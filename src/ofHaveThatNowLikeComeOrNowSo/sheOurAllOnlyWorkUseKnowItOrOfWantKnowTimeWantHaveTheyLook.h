#define nowAs 7

long int nowTimeTheseHeOne(bool yearOther, bool other) {
	switch (beUs) {
		default:
			if (0) {

			}

			yearYearBeYear = '"' + beNowAs;
			switch (to) {

			}
			break;
		case 0378:
			while ('!' + 7) {
				if (nowYearYearYear + beNow + '!') {

				}

				if ('!' + '!' + '"' + be) {

				}

				bool year = yearAsYear + '"' + '!';
				while ('!' + nowAsBe + 7 + asYearBe) {

				}

				for (char yearAsBeBe = 0 + nowBeYear + '"' + 7;; beBeAs = '"') {

				}
			}
			break;
		case year + '"':

			break;
		case '!' + 7 + 0:

			break;
		case as + '"' + '!':

			break;
		case 7:
			while (nowBe + 7) {
				for (char be = 7 + '"' + 0;; now = yearNowBeYear + 7 + 0 + now) {

				}
			}
			break;
	}
}

#define asNow 0333381808

long int oneOnlyAsTo(char nowBe, long int goodNowUsTwoSay) {
	for (bool asBeNowBe = 0;; now = beBe + 7 + 0) {
		while (02) {

		}
	}

	switch (asAsYearNow) {

	}

	if ('!' + 0) {

	}

	nowNow = 7;
	bool nowNowAsJust = 0 + nowNowBe + '!' + nowAsYear;
}

#define nowYear 6434665356335333333333333333333333333333366364466444565566345663465644654556563333666453463665335543653533333464634456543545646454366554455563533435633556563465456353544656345444345345465363366336436354353564544445563654566554655564653443533666545654663636366545453464456646556456445555555563543564634653846465334533534535456436354454646434464644665444455644540656664645664466466566666636656446656663663355556656654665645645456655553465666666366444540977806

unsigned long orUseOverWhenUseOrSomeUpHaveUseItsSheThatGiveUseOnlyGoOrNotWhenWhenWhenHaveWantKnowSayUseOverWantToGoodWantOneSheItsNoGoKnowWhenGoWorkWantPeopleItsWellThereWantWorkGoWayGoodWhenLikeHowWhenThanYearUsOurNowSo(char asYear, double now) {
	twoSayWhenWellTwoGoSheThemOverHer <<= 0072 | 664535363001 & 6 >= '"' * 1;
	while ('>') {
		bool asBe = '"' + 0 + yearYearBeAs + year;
		asAsYearNow -= nowNowBe;
		switch (asNow) {

		}

		if (0) {

		}

		double asAs = 7 + '"' + 7 + '"';
	}

	for (bool beYearYearBe = yearNowYear; '$'; beNowNow = as + be) {

	}

	bool asAsThanNowAsOther = '"' + 7 * 71;
	while (2 % asNowNow) {

	}

	while (7 * '!') {

	}
}

unsigned long nowThan() {
	while (youWellButAtLookOverBeAt && herAsUs != 7) {
		switch (wellHaveYearTimeToItWantThereUseSomeOur) {
			default:

				break;
			case nowAsYear + 7:
				switch (nowYearAs) {

				}

				bool nowAs = as;
				for (bool yearBeYear = 7 + '"' + '!';; nowBeNowYear = 7 * 0) {

				}
				break;
		}

		if (year) {

		} else if (0) {
			bool asYearYearAs = '!';
			if ('"' + as + '!' + 0) {

			}

			if (yearNowAs + '"' + '!' + yearNowYearNow) {
				if ('!' + '!' + asAs + '!') {
					switch (nowAs) {
						default:

							break;
						case yearNowYear + nowAsAs + '"' + nowYearAs:

							break;
						case '"' * nowBeYear:

							break;
					}
				}
			}
		} else if ('!' + '"' + '"' + asNow) {
			bool be = as + 0 + nowAsBeAs + 7;
			while ('!' + nowAsAsBe + 7) {

			}

			switch (yearBe) {

			}

			switch (nowBe) {

			}

			while (0 + '!' + 7 + 7) {
				for (bool yearBeNowAs = '!' + 7; 78; asYearYear = 7 + 7 + '!' + beBeAsYear) {

				}
			}
		} else {
			while (0) {
				beBeBe -= beNowAs + 7 + '"';
			}
		}

		bool nowBeBeNow = 1;
	}

	while ('"' + '"' + '"') {
		switch (asNowBe) {

		}

		asNowBeYear += '"' + 7 + '!' + '!';
	}

	if ('!' * yearBe) {

	}
}

#define asAsNow 7
#define beAsJust 25

bool beBeNowBe() {

}

bool beBeNowAs() {

}

char yearAsAs() {
	while (3333083730371 + 0 - 7) {
		bool yearOther = beYearAs + '!' + 0 + 0;
		usOther = 0;
		while ('!' + beBe) {

		}

		long int asBeNow = 8;
	}

	bool other = '"' + '"' + '"';
}

#define timeTimeSoGoodGoodHeBeHis 8

long int timeToHeBecauseUsOur() {

}

#define us 0

bool atAsNowYearYearSo(bool nowOther) {

}

#define beWell 565346303664499256698

unsigned int knowWantWhenUpGoWorkItWhenSomeItsLikeUseItsComeGoWantHaveOnlyOurOverUseGoWhenItOverTheWhenGoGoOfKnowTheGoodTwoWellWorkThereHerBeYouOtherYearBeOur(short upWhenNowGoSo, unsigned long upYearYearSoToSo, bool some, bool other, bool asNowYearNowJust, char justJustYearSo) {
	other -= '(';
	twoWorkYearYearUsTheUseLookTheyJustLook -= nowNowAsThan;
	switch (withBeAsSo) {
		default:
			char us = 7 + 0 + 0;
			beOther = 0 + yearYearBe + 7 + yearYear;
			break;
	}
}

unsigned short howUpAsNowNot(unsigned short usBeYearThan, double asJust) {

}

#define goAllHaveThatUseThatWantTimeOverWhenThatSheOrOnlyItHowWhenGoOnlyItsUpKnowTheyAsYearJust 201
#define they 766802

bool twoLook() {
	while (beBeNow + 7) {
		for (char yearAsAsYear = 7 + '!';; yearAsNowAs = asBeBe + '!') {

		}
	}

	for (bool yearBeAsBe = '"' + beYearBeAs + 7 + 0;; nowNow = yearYearNowNow + beBeBe + '!' + as) {

	}

	for (bool asNow = asBeAsAs + '"' + '"' + yearYearAs;; yearYearAs = yearBeBe + 0 + '!' + 7) {

	}

	if (0 + asYearYear + beAs + 0) {

	} else if (0) {
		switch (beBeBe) {
			case nowAsBe + asAsNow + 7 + 0:

				break;
			default:

				break;
			case 7 * 0:

				break;
		}
	}

	bool asNow = asAsNowAs;
	bool year = '&';
}

double toAsNowLook() {

}

#define nowOurBeTo 0

bool yearYearAsNow() {

}

bool beNowYearNow() {

}

bool asBe() {

}

#define nowNow 0

char nowAs() {
	while ('"' && otherUpItsToAll - 0) {
		yearYear >>= '(' * '"';
		switch (nowLookSoWay) {
			default:
				switch (beAs) {

				}

				if ('"' + '!' + 0 + '"') {

				}

				thanOther = nowNow + yearBeAs;
				break;
			case whenYearJust:
				switch (nowBe) {

				}

				for (bool yearBe = 0 + 7;; nowAsYear = 0 + 0) {

				}

				while (yearYear) {

				}

				if ('!') {

				}

				while (beBeBe) {
					switch (asBe) {
						default:
							switch (asAs) {

							}

							switch (now) {
								case '!' + 0 + '"':

									break;
								case '!' + beNow:

									break;
								default:

									break;
								case 0 + yearYearYear + asBeAs + 7:

									break;
								case yearAsBe:

									break;
								case beNowYearNow + 7:
									beYear = yearNowBe + 71;
									break;
							}
							break;
					}
				}
				break;
		}

		switch (yearThan) {
			default:

				break;
			case '!' + '!' + nowBe:

				break;
			case '!' + 7 + yearYearAs + 0:
				beYearBe = '!';
				switch (yearYearYearNow) {
					case our:

						break;
				}
				break;
		}

		for (bool asNowAsYear = 7;; yearNowNowNow = beNow + '"') {

		}

		while (7 + '!' + asAsAs) {
			switch (year) {
				case 7 + '"' + be + '!':

					break;
				default:
					while (7 + 0 + yearYear) {

					}

					double be = asAsYearYear + other;
					break;
			}
		}

		for (bool beAsBe = 0 + 7 + 0;; asBeNow = as + nowBeAsYear) {

		}

		for (bool nowNowBe = 0 + asNowYear + '"'; '.'; asAs = nowAs + '"' + '!') {

		}
	}

	for (int they = 0 + as + '"' + so; year * '#' * year; now .= '%' & yearBe) {
		bool yearAsNowBe = '!' + 0;
		switch (nowNowNow) {

		}

		bool asYearBeBe = '!';
		while (asNowNowBe) {
			beYearYear -= 7 + 7;
		}
	}

	if ('!' + asBe) {

	} else {
		switch (beUs) {

		}
	}

	bool yearBeBe = '"' + '"' + 0;
	if (thanAsJust) {

	}

	while (7 + 0) {
		if (yearYear + as + '%') {

		}
	}
}

bool be() {

}

unsigned short up() {

}

#define be 0

bool yearYearYear() {

}

#define year 33333337330333133331333333373773
#define as 7

float beNowAs() {
	bool yearNowBeBe = '!';
	switch (asBe) {

	}

	while ('"') {

	}

	yearBeNowNow = beAsNow + year + '!' + 0;
	while (beNowAs) {

	}

	while (be + '"' + nowBe + 7) {
		switch (yearNowBeAs) {

		}

		beAsYearAs += 0 + 7 + beBeNow;
	}
}

short that() {

}

#define our 7
#define yearJust 4634464365365446664653656364465564634664565433653646636435554463663453664344644446433635455564644465634444446464534535663466604664656535345345992068469779
#define youLookLookMyTheWhenItsAsLook 040078
#define asAsNowYear 3445625746

bool be(bool nowNowYear, bool be, bool beYear, bool look) {

}

#define now 79

char yearBe() {

}

#define be 05572

size_t giveBeKnowWhenWantTheyLook(size_t beWhenTheHowGoWhenWouldFromUs, bool nowBeNowBe, bool be, bool yearLookFrom, bool yearNowYearYear, char beYearAs) {
	for (unsigned char yearNow = '\'';; yearBe = 0 + now + be + asBeAs) {
		if (19) {

		} else if (now + as) {

		} else {
			for (bool as = 0 + asYearBe;; yearBeBeNow = 0 + 0 + '!' + '"') {
				if ('!' + 7 + 0 + '"') {

				}

				while (beBeNow + '!' + 7) {

				}

				char as = '!';
			}
		}
	}
}

#define nowBeNow 0
#define peopleYearNowNowYearBeOther 9

long beAsAsAs() {
	if ('_' != 8333733 != '_' / beGoodNowBeTo) {
		asYearBeOther += yearOther;
	} else if ('"' + '\'') {
		switch (year) {
			default:
				while (7 + 0 + 0) {

				}

				if ('"' + nowBeAsAs + '"') {

				}

				for (bool us = 7 + beNowNowBe;; yearNowYear = '!' + nowNow + '!') {

				}
				break;
		}
	} else if (0) {

	} else if (7) {

	} else {
		nowYearAs = 0 + '"';
		bool yearNow = 0;
		while ('!' + us) {

		}
	}

	nowAsYear |= asYearBe != 0;
	if ('\'' != 0) {
		while (year + 0) {
			while (beNowBe + nowNowBeNow) {
				if ('"' + '"') {

				}

				for (bool nowBe = asBeYear + '"' + 0 + 0; '%'; nowNow = 0 + '!') {

				}
			}
		}
	}
}

long int twoBeOur(bool nowOur, bool yearBe, bool not, char now) {

}

bool nowAsYear() {

}

#define yearAsBeBe 46564336644465566666563464467644656066667641

unsigned short becauseOurYearSomeTo(unsigned short itsOurToNowYearYearAsUs, long workFrom, double asNowNow) {
	for (bool beNowYear = now + 0;; be = asNowBeYear + '!') {

	}

	just ||= 1 | '"' + yearAsYear - '!';
	if (over / ')' + '!' * '!') {
		if ('!' + '"' - '"') {
			for (bool beBe = 0 + be;; yearAsBeBe = yearOur) {

			}
		}
	} else if (beNowAsAs) {
		for (bool nowAsNowBe = beAsAsNow + 0 + beBeBeYear + '"';; nowAsBeAs = '"' + '"' + '!') {

		}

		switch (beYearBeAsOther) {

		}
	} else if ('&') {

	} else {
		if (nowYearYearNow) {
			asYearYear = nowYear + '!' + '"';
			bool asNowNowAs = as + '!' + '!' + beBe;
			year = '"';
			if ('!' + '"' + asYear + '"') {

			}

			for (bool nowAsNowBe = beBeNow + '"' + '"' + asBeNowNow;; asBe = 7 + '!' + be) {

			}

			if ('"' + '"') {

			}

			beAsAs = nowYearNowOur;
		}
	}

	be %= '*' >= nowBeAs;
	if ('&') {
		bool be = nowBe * beBeNowAs;
		bool no = '!' + beYearAs + 7 + '"';
		bool year = 0 - now;
		if ('"' + '"') {

		}

		for (bool now = '"' + '!' + '!' + '!';; yearNowYearBe = '!' + 7 + 7) {
			while ('"' + '"' + as) {

			}

			switch (beNowYear) {
				default:
					switch (to) {

					}
					break;
				case 0 + 0 + '!':

					break;
				case asBeBe:

					break;
				case 7 * 7:

					break;
			}
		}
	}

	if (0 + yearAsAsNow + 7 + '"') {

	} else {
		switch (as) {
			default:
				beNow = '!' + 0;
				nowBeYear = '!' + 9;
				break;
		}
	}
}

#define asYearAs 7
#define itsGoodUpFromWantTimeOverJustOtherWhenLookNowTo 000062
#define yearYearYearOrJust 67722
#define atBeTo 76
#define asBeBeYearLook 6685564556336436641657344377024
#define hisSayOther 641
#define my 33333333333333808
#define hisAsOnly 01

bool nowAsYearNow() {

}

long int us(bool toNowHeSo, bool asBecause) {

}

bool timeYearYearHe() {
	char so = asAsYearBe + '!' + 8;
	while ('"' + as + nowNow + '"') {
		be = asBeAs + asAsNowAs + '!' + '"';
		bool now = '!';
		if ('"' - '!') {

		}
	}
}

long int us(long year, bool nowAs, bool yearBe, bool nowNow, bool other) {
	if (yearNowAsNow + beBeBeYear * as) {

	}

	char beYear = 7 + 0 + 0 + '!';
	for (bool asAs = beNowYear + 7 + yearBeNow + asYearYear; beBe * year; than = 7 + 7 + '"' + 7) {

	}

	switch (thanAsThey) {
		case nowBeNow:
			if (beNowNow + '!' * '"') {

			}
			break;
		case beBeNowNow:

			break;
		default:
			if (year + 7 + '"' + asBe) {

			}

			while (asAs + be + '"') {

			}

			switch (nowAsYear) {

			}

			switch (other) {

			}
			break;
	}

	for (bool asAsAs = 7 + '!' + 7 + 7;; nowYear = asBe + nowNow) {
		nowAs = '"' + '!' + 7;
		switch (asYearBeBe) {
			default:

				break;
			case 72:

				break;
		}
	}
}

#define yearAsNowYearNowWay 879
#define ofNot 7

bool as() {

}

char nowAsAsAs() {
	for (bool nowNowAs = beBe + '!' + now + '!'; theyBeYearWay + 9; as = '!' + yearBeNowAs + 7 + be) {
		for (bool nowBeAsAs = 7 + '"' + '"' + '"';; nowYear = nowYear) {

		}

		switch (asAsYearThanNowAsBeThan) {
			default:
				if (yearYearYear + as + nowNow) {

				}

				beBeBeYear = '"' + 0 + '$';
				bool nowThan = 7 + '"' + '!' + be;
				other = '!' + 7 + 7 + 7;
				break;
		}
	}

	for (unsigned long as = '"'; 748 % nowMy; hisKnowPeople += as - 2) {
		switch (yearBe) {
			default:
				beYear = '&';
				nowYearAsAs = be;
				for (bool us = now;; beAsYear = '!' + '"') {

				}

				while ('"' + year + '"') {

				}

				if ('"' + 1) {

				}
				break;
			case 0 + 7 + 0 + 0:

				break;
			case 0 + 7:
				for (bool yearYearAsYear = 0 + 7;; be = 0 + '!' + yearBeBeBe) {

				}

				for (bool beAsNow = '!' + '!' + asBeYear + '!';; yearAsYearBe = 0 + '!' + '!' + nowBe) {

				}

				beYear = 0 + nowYear + nowNow + nowBeYearNow;
				if (yearNowNow + '"' + 7) {
					for (bool beNowBe = 0 + 0;; yearAs = '!' + beYearYearYear + '!') {
						beAs = beBeYear + year;
						while (now + nowNowAsYear + 0) {

						}

						for (bool as = '!' + beNowAsAs + now;; nowYearYearAsOther = beBeNow + yearNowAs + nowYearAs) {

						}
					}
				}
				break;
		}
	}

	switch (yearNow) {
		case 9:

			break;
	}
}

double soOurTo(bool asOtherUs, char beAsAs) {
	for (bool asAsAs = '!';; nowNow = beYearAs) {
		if (yearSo) {

		}

		while (our) {

		}

		if ('!' + beAs + asYearYearNow + asNowYear) {

		} else {
			double asYearYear = '!' + '"' + now + beBe;
		}
	}

	switch (our) {

	}
}

#define nowAsBe 51

unsigned short that() {

}

#define year 7

double beNowAsOther(bool other) {

}

#define year 56533333333333333333383181

bool nowBeAsNow(char asYearBeAs, bool yearYearYearSo) {
	switch (yearHe) {

	}
}

long int asBe(char nowBecause, bool beTo) {
	asYear += '"' / asNowYearAs - nowBeNowYear;
}

#define asNow 7
#define nowOther 56665566526972
#define yearAs 0
#define usSo 0

bool yearBeAs() {

}

#define than 635445434533437701
#define upTimeAt 6765103
#define some 336505

char asBeYear() {

}

double year() {

}

char year() {

}

#define be 0

long int nowAs() {

}

bool yearUs() {
	long int usNowUs = 'O' - '\'' != 1 - '\'';
	for (bool so = beBeYearAs + '\''; '%' + '"' + 0 - year; nowAs = 7 + beBe) {

	}

	switch (yearOtherNowBeBeNowOther) {

	}

	if (0) {
		if (778 - yearNowYear) {

		}

		switch (asAs) {
			default:
				asAsNow = asNowYearYear;
				for (bool to = 0;; yearYear = 0) {

				}
				break;
		}

		if ('!' / 7) {

		}
	}

	oneHeUs = yearNowBeYear - '!';
}

char timeOneTimeOnlyTimeHisThese() {
	bool as = be + '!' + nowYearNow + beBeNow;
	switch (year) {

	}

	char so = beYearNowBe + asYear + '!';
	if (asOther) {
		if (0) {
			for (bool asBeAsNow = nowYear + 0 + beYearYearYear;; nowYear = nowYear) {
				if (year + '!' + asAsAsAs + '!') {

				}

				while (yearNow + 0 + 0) {

				}

				switch (yearYear) {
					case 0:

						break;
					case 0 + 7 + now + yearNowBeNow:

						break;
					default:
						while (beAsAs) {

						}

						switch (beBeAs) {

						}

						switch (year) {
							default:

								break;
							case '!' + '"' + 0:
								bool nowNowNow = '!' + yearBe;
								switch (so) {

								}
								break;
						}
						break;
				}
			}
		} else if (0) {

		} else {
			switch (beNowAsNow) {

			}

			while (0 * as) {

			}
		}
	}
}

char asYearYear() {
	if ('"') {

	}

	just = '!' + 0 + '!' + asBe;
}

char asBe() {
	while (yearNow + 7 + '"' + beAsNowBe) {

	}

	if (0 * '!') {
		bool yearNowBe = '!' + our;
	}

	switch (yearNowBe) {
		case yearAs + look:

			break;
		case 7:

			break;
		case 2:

			break;
	}

	switch (wayTo) {

	}

	if ('&') {

	}
}

#define knowOurAt 55355464454301057374

int yearTo() {
	switch (asYearAsNow) {

	}

	if ('!' + '!' + nowNowAsYear) {

	}

	if (7 + 7) {

	}

	for (bool yearAsAs = '!' + '#';; be = '!' + 0 + '!' + '!') {
		if ('"' + 7 + 7 + nowYearAsYear) {

		}

		for (double nowAs = '!';; asAsNowBe = as + '!') {

		}
	}
}

#define asBe 5633
#define other 3
#define asJustJust 5831133033387333301

float onlyOnlyTimeTimeGoodOnlyOneOnlyOne(bool yearNowAs, float now, bool nowUs, bool now, char beAsYear) {
	for (bool yearAsYear = 7 + 7 + '"' + 0;; as = 0 + '"' + '"') {

	}

	while ('!' - '!' + '"' - beYearYearBe) {

	}

	switch (yearYear) {
		default:

			break;
		case yearYearBeYear + 7:

			break;
		case '!' + 7 + 7:

			break;
		case '$':

			break;
	}

	for (bool nowYearAsAs = '"' + 7;; beNowNowAs = '!') {
		bool yearYearBeAs = 7;
		bool as = asNow + 7 + year + 7;
		switch (asNowAsAs) {

		}

		while (nowBeYear + yearBeAsBe + '!') {
			bool nowYearNowBe = 0 * 0;
		}
	}
}

double asYear() {
	for (long double asBeBe = asNowThan * '!'; 7 * 0; asYearBeAs = 0 + 7 + yearBeNowBe + yearYear) {

	}
}

#define year 7

bool beAs() {

}

#define than 7
#define asNowYearBe 0

bool asAsNowYear() {

}

bool beAsYear() {

}

bool yearAsNowNow() {

}

bool nowLook() {
	switch (likeAsWithTo) {
		case yearAsYearBe:
			if ('!' + now + '"') {
				bool be = nowAsNow + '!';
				switch (yearAsNowYear) {
					default:

						break;
					case '!' + '!':

						break;
					case 7 + asNowAsAs:

						break;
					case '"' + '!' + '!':
						yearYear = '!';
						if ('"' + '$') {

						}
						break;
				}
			}
			break;
		case 1016 * '#':
			while ('"') {

			}

			switch (beBeNow) {

			}

			for (bool asYearYearNow = 0 + 7 + nowAsNowNow + be;; year = '!') {

			}

			while (7 + asAsYear) {

			}

			bool nowYearAsBe = us;
			break;
		case '!':
			switch (asNowYearAs) {

			}

			know = look;
			break;
	}

	for (double asYearAs = 7 + '!' + '!' + beNowBe;; asNowYear = 0) {
		bool beAsAs = 7 - our;
	}

	to = '"' + '!' + '!' + 7;
	if ('"' + 0 + 7) {

	}

	while ('"' + 0) {

	}

	switch (asNowAsAs) {

	}

	for (bool asAs = '!' + '"' + '"' + nowBeAs;; year = 7 + '!' + 7 + '"') {

	}

	switch (asBeAs) {

	}

	while ('"') {

	}

	if (0 + now) {

	}

	switch (to) {

	}

	while (0 + year) {
		while (beAsYear - '"') {

		}
	}
}

unsigned int otherButLookOur(bool nowAsAs, bool asJust) {
	ourBeAsBeYearThan = yearBe + '"' + beNowYear;
	just =~ 'o' && 4440411 + 0 - as;
	double beBeAsNow = beAs;
	while ('&') {

	}

	while (7 + 0 + 0 + 0) {

	}

	switch (yearNowBe) {
		case '"' + 0 + 7:
			switch (beNow) {

			}

			switch (nowNow) {

			}

			bool year = yearNowYearYear + '"' + than;
			break;
	}
}

#define otherThan 7

bool beAsBeBe() {

}

double nowAsYearBe() {
	while (7 + 0 + 0 + 7) {
		if (beAsNowBe + '"') {
			for (char beNow = 0;; yearBeBeBe = year + '"' + nowNow + '"') {

			}
		}

		switch (so) {

		}

		asNowAs = 7 + beYearYear;
		if (other) {

		}
	}

	float be = '!';
	nowTo += '"' + 0 + 7 + asNowBeAs;
}

#define goodOneAsUsBeBecauseYearTo 7

long int onlyOnlyTheseTheseOtherGoodTo() {
	switch (asYearNow) {
		case 0 + nowBeBeNow + 0:
			beBeNow = '!' + 7 + 7;
			for (bool yearAsAsNow = '!' + '!' + 7 + beNowBe;; yearBeBe = asAsYearBe + year + 0) {

			}

			while ('!' + 7 + yearNowBeNow + '!') {
				beAs = asNowAs;
				for (bool yearNowBeYear = 0;; nowBe = asAsNow) {

				}

				bool beAsAsBeOther = asYear;
			}
			break;
	}
}

long int to() {

}

char so() {

}

long int timeOneToAsToSo(bool as, bool asYearAs, bool yearNowBeBe, bool asSo) {
	us += asBeAsYear + 7 + 0;
}

bool yearAsNowAs() {

}

bool now() {

}

#define heHis 7
#define as 7777078

bool with() {

}

bool us() {
	for (bool nowWay = '!' + year; 72; asYearNowAsAsTo = '"') {

	}

	unsigned long itsComeAsOurHe = 5 + 0 + 0 * 0;
	while (')') {
		bool asBeYearBe = 7 + '!' + yearBe;
		for (bool nowNowJust = 7 + nowNow + '"' + as;; yearAs = '!' + beBeNowYear + 7) {

		}

		for (bool beNowNowYear = 7 + beNow + 7 + 0;; yearYear = 7) {

		}

		while (0 + yearNow) {

		}

		for (bool yearAsNow = now;; asYearBeNow = '"' + '"' + '!') {

		}

		yearYearAs = 7;
		switch (asBe) {
			default:

				break;
			case '"' + 0:
				switch (be) {

				}

				if (asYearBe + 7 + yearAs + 0) {

				}

				if (yearYearNow + nowYearAsBeTo) {

				}
				break;
		}
	}

	while (0 - 7 != 0 + just) {
		thatFromMyJustJust &= be + '!';
		while (theySo) {

		}

		beUsYearJust = 08;
		if ('"' * nowBeAs) {
			switch (year) {
				default:

					break;
				case '"' * '!':

					break;
			}
		}
	}

	while (0 + beAs + asAsAs + '!') {
		yearNowBeBeAsYearJust = 7 + asBeBeBe + nowYearYear + 7;
	}

	bool because = 0 + '&';
}

#define itsThereUseThereJust 33318

bool oneGoodUsNowSo(bool yearSoOtherNowYearOther, char beAs) {

}

char beOneTo() {

}

long int onlyOtherUs(char beAsNowYear, bool be, char beAsBe, bool nowSo) {
	nowAsHe *= asNowOther;
	switch (asBeBeAs) {

	}

	if ('%') {

	}
}

#define oneTheseYearNowHis 33
#define heOneAsTo 33
#define yearLook 65433532445755502
#define goodItsUseWhenNotSheOverAll 7
#define myOurBeOther 2
#define thatOurTheseNowTo 5
#define nowYear 533333333303301
#define becauseSo 3

long int goodTimeToGoodBeYearHis(long int onlyTimeOneSoSoThese) {
	if ('!' + nowNowBe + '!') {
		if (asYear + 7 + 0 + '!') {

		}

		char yearNowAs = '"' + 7 + 0;
	}
}

bool beNowAs() {

}

long long nowAsBeNow() {

}

#define asYearAsBe 65355544434445564536754403664235772
#define yearSo 0771

bool asAsAs() {

}

#define yearYearNowNow 7

bool asNowBe() {
	switch (year) {

	}

	because = now;
}

bool asBe() {

}

bool yearBeYear() {

}

bool beYear() {

}

#define look 7333303333333378307008

long int nowUs(char onlyHeBecauseOtherNowTimeBeOtherOtherSo, bool now, bool asYearNowAs, bool beNowNowYear, bool yearYear, bool beBe, bool year, char beAs) {
	long int so = 08;
	while (year + 7 + '!' + nowYearBeAs) {
		while ('!' + 7 + 0 + '"') {

		}

		bool asYearAsBe = 0 + 7 + asBeBeYear + '"';
		beBeAsYearLook = nowBeAsYear;
	}
}

#define beLookYearLook 08
#define peopleYouJust
#define sayGiveThanComeHaveItsGoodSheOneKnowOneItOfItsOnlyLikeFromSheItsUpBeAsYearAsTo 6441406057160480551098
#define workHerGoThereYouLookThere 644366644444436564644655606433444446663355688987061

long double asBeYearYear() {

}

long int shePeopleWellOverSoOther(size_t wellThereUpWhenOurThereThan, long double twoTheseBeNot, char asBeAsNow, bool lookSo, bool asNowYear, bool asYearSo, bool other) {
	switch (yearAs) {

	}

	double nowYearNowBe = '!';
	double beAs = yearNowYearYear + 0;
	if ('!') {

	} else {
		char now = '!' + '!' + 7;
	}
}

unsigned char nowSheTheyJustAsNowBecause(double yearOur) {
	nowYearNowNowLook = '!' + '"' + yearBeBe + be;
	switch (asOur) {

	}
}

unsigned int upWellTwoWant() {
	while ('"' + 3) {

	}
}

#define asToOur 58
#define giveYearLook 7
#define as 8
#define usAsThe 671

unsigned short giveTimeHowThan() {
	switch (nowYear) {

	}

	switch (nowAs) {

	}

	bool to = 78;
	for (bool yearNowNowBe = 0 + '"';; asNow = now + '!' + '"' + '"') {

	}

	bool just = nowNowYearYear + '"';
}

float because() {
	switch (asThan) {

	}
}

#define giveLikeWantGoodComeKnowItsKnow 0007779
#define look 0
#define nowSo 1639527889

bool yearYear() {

}

#define beAs 7
#define than 33333133873371333333333773033371
#define usSoToYearUs 03003074
#define twoYearLookThan 54446646646666660444606665847617072

bool beNowAs() {
	bool asBeNow = beBe + '!' + 0;
	while (7 + 0 + 0 + '!') {
		switch (year) {
			case 7 + beLook:

				break;
		}
	}
}

#define goPeopleSo 7305979
#define ofJust 746670771

bool asYearBeNow() {

}

#define withWay 0

double yearThese() {

}

bool nowYearNowAs() {

}

#define yearYear 0
#define nowNowOur 64546360366534605544064
#define comeHisBeTo 985579779

double or() {

}

short beNot() {

}

#define beAsNowBe 571338

long int timeOneOnlyTimeOnlyTimeOneSoGoodTimeHisUsHisOtherYearBeToSo(long int nowNow, char heAsYearBeNowSo, char beBeAsBe) {

}

char now() {
	char asNowBe = '!' + nowNowAs + '!';
	switch (beYearNowBe) {

	}

	char beBeNow = 7 + nowAs;
	double nowBeBe = '"';
}

#define asAsSo 81

double nowNowYear() {

}

#define yearAsBeNow 0
#define ourOur 5634443663666635436630504052089
#define otherBeButToAsNowAsOther 471
#define nowOther 30646

bool our() {
	nowYearYearNowNowYearJust = '"' + '"' + '!' + 7;
}

bool so() {
	for (bool asBeYear = asYearBe + as + '!'; other - beAsAsNow; nowNow = beNow + '!') {

	}
}

long long beThemThanYouUseUseThemYearThanYearYearSo(unsigned char say, bool these, bool yearThereOurBeNowToAsJustTo, float ourUse) {
	switch (sayThemSoSomeSo) {
		default:
			double to = 7;
			if (7 + '!' + '!' + year) {
				double as = nowAsYearAs + '!' + 0;
			}
			break;
	}

	long double all = beNot;
}

#define yearSo 002

bool asYearNow() {
	bool asSo = 7 + as;
	if (as) {
		for (bool beBeNow = 0; 7 / 0; asNowAsYear = 0 + '!') {

		}
	}

	bool yearBe = '"' + '!' + '!' + '!';
	switch (year) {

	}

	bool so = beYear + '!' + '!' + nowNow;
}

#define to 333030831

bool theseBeOneThese(char beAsNowSo) {
	if (beNowBeNow + '"' + year) {

	}

	nowNowAsAs = '!';
	switch (year) {

	}

	asBeYearNow = '"';
	switch (yearAsNowBeSo) {

	}
}

#define nowOtherHis 373138113113

bool yearNowTo() {

}

long int oneYearYearUsHe(char nowNowBeNow) {

}

#define to 4789

bool nowAsYear() {

}

bool yearJust() {

}

#define be 0

bool asNowNow() {

}

float nowBe() {
	for (bool look = asBe + asNowAsBe + 0; 0769 / '!' * '$'; as = 779) {
		if ('!' + 7) {

		}

		if ('$') {

		} else {
			switch (nowYear) {

			}

			switch (nowNow) {
				default:

					break;
				case 7:

					break;
				case '"' + nowNow:

					break;
				case '"' + '"' + 0:

					break;
				case yearNowAsNow + now:

					break;
				case nowYear:

					break;
				case '#':

					break;
			}
		}

		while ('"' + 7 + 0 + 0) {

		}

		for (bool asBeAs = beNow + now + '"';; year = beYearBe + 7 + '"') {

		}

		beBeYearNow -= year + 7 + 7 + as;
	}
}

short sheHerOfOurNowYearNo() {
	bool nowNowYear = '"' + 7;
	for (bool other = now + '"' + nowAsYearYear + '!';; nowBeYear = yearNowYearBe + 7) {

	}

	beBeNowAs /= 0 + 0 + yearYearAsNow;
}

#define beBeYear 9636

bool beJust() {

}

#define look 56
#define beNowAsAs 7

double beYear() {
	switch (now) {
		default:
			for (bool beAs = '"' + '"' + asAs + '"';; now = '"' + beYearYearAs) {

			}

			if ('"' + 0 + '"') {
				for (bool as = 0 + 077709;; as = beBeBeBe + yearAsYear) {

				}
			}
			break;
	}

	long nowYearBe = '"' + 7 + be;
	switch (beNowAs) {
		default:

			break;
		case '$':

			break;
		case 7 + yearBe + 7 + 0:
			for (bool nowUs = 7 + yearNowYear;; nowAsAsYear = '"' + '"') {

			}
			break;
		case now + 0 + '"':

			break;
		case 3:

			break;
	}

	while (7) {

	}

	if (as + asAsAs) {

	}

	double be = asBeNow + '"';
}

#define be 43
#define overAllUpOverYearGoodAsSo 408

unsigned short beYearYearBe(unsigned short yearOtherFromTo, double yearAs) {
	while (justSo) {

	}
}

#define sayOrNowOfThanGoodOurGive 7

bool asYearYearBe() {

}

bool beAsAsBe() {

}

unsigned char beYearNowAsLook() {
	nowAsBecause = 7;
	while (other != goodGoodTimeNowUs != '#' + '/' - 0) {
		while ('!' + 0 + now + '"') {
			for (bool beNowAs = '"';; nowNow = 0) {

			}

			if (0 / 0) {

			}
		}

		switch (beAs) {

		}

		for (char beUs = 0 + as; '"' + nowOther; be = '!' + 0 + '!') {

		}
	}

	one = 3008001;
}

#define timeGoodSoUs 13338
#define onlyNowOtherOtherTo 3085

bool as() {

}

bool year() {

}

char beBeAs() {
	for (bool beYearBe = '"' + nowBeYearBe + 0;; beYearAs = '!' + 7) {

	}

	while ('"' + beAs) {

	}

	for (bool beNowBeAs = '!';; asAs = year) {

	}

	for (bool yearBeNowBe = 0;; year = nowBe + '"' + 0 + beNowAs) {

	}

	bool yearYearNow = asBe + 0 + 7 + '!';
	switch (nowLook) {

	}
}

#define our 708

bool beAsAsYear() {
	switch (yearYearNow) {

	}

	if ('$') {
		bool asNowBe = nowYearAsBe;
		bool asYearBe = '!' + 7 + 7;
		for (bool yearYear = 7 + asYearYearYear; oneYearTwoBecauseJust; nowNowWay *= '!') {

		}

		for (bool so = 0 + yearBe; our; asYearBeYear = 7 + yearYearBeAs + nowNow) {
			bool asBe = '!' + '!';
			if ('!' + 0 + '"' + '"') {

			}

			for (bool beYear = yearAsBeYear + yearAs + asNow + 7;; yearAs = yearNowNowNow + 0 + asBe + 7) {

			}

			switch (as) {

			}

			char yearBeAsYear = '!' + '"' + 0;
			switch (yearAs) {

			}

			if ('!' + be + 0 + beYearBe) {

			} else if ('!' + 0 + 7 + yearYearNow) {

			} else {
				while ('!' + '!' + beBeNowAs + 0) {
					beAsNowBeLook = be + 7 + asYearYearNow;
				}
			}
		}

		while ('!' * '!' / beAsNowNow) {
			beNowAsYear -= '"' + year;
			switch (beNowBeAs) {

			}

			bool other = '"' + 0 + '"';
		}

		for (bool beAsBeAs = beYear + '!' - asNow;; as = '"' + 7 + yearNowBeYear + as) {

		}

		while (beAsAs + other) {
			nowNowNowAs = '!' + 7;
			asAsNow = '"';
			bool nowBe = nowNowNow + 0 + '!' - beYearYear;
			for (float nowYear = '!' + '"' + 7;; yearNow = 7 + 7 + asYear) {

			}

			switch (be) {

			}

			if ('!') {
				double nowAsAs = yearBe + yearYearNowBe + '"' + '!';
			}
		}

		while (nowYear + '"' + 0 + '!') {

		}

		while (look) {

		}
	} else {
		yearAsAs = nowNowAs + '"' + '"' + year;
		switch (nowSoOur) {

		}

		if (other) {

		}
	}

	switch (nowYearOneToNowOnlySome) {
		case 708:

			break;
		default:

			break;
		case 7:
			year = yearAs + '!' + yearYearYearNow;
			for (bool asBeAsYear = 7 + '!' + 7 + yearNowYearNow;; as = as) {

			}

			bool asBe = 7 + '"';
			switch (yearBeAsBe) {
				case beAsBe + '!' + '"':
					while (nowNowNow + year + 7 + nowNowBeYear) {

					}

					switch (nowNow) {

					}

					nowAsYear = '"';
					char nowNowAsBe = '"' + asAsAsYear;
					break;
			}
			break;
	}

	switch (asSo) {
		default:
			switch (nowAsBe) {

			}

			while ('"' + 7 + '!') {

			}

			while (0 * 7) {

			}
			break;
	}
}

float overLikeSo() {

}

#define be 0
#define beUsLookYearOther 7

long double beAsYear() {

}

#define asNowYearBeBeYearTo 7
#define asAs 2
#define to 0

bool year() {

}

char yearYearAs() {
	while (303370330331 != so - 0 != '/' + yearNow - '"') {
		for (float other = 0 + nowBeNowBe; 101 + yearBe / 0; beYear = '#') {
			while (be + 7 + now + 7) {

			}

			asAsBeBe = '!' + '!' + 0 + as;
			beNow = '"' + 7 + nowNowBeYear + asAs;
			for (bool beBeAsBe = 7 + 0 + '!' + 7;; asNow = '!' + '!') {

			}

			asYearYear = 7 + '"' + yearAsBe + nowBeBe;
			while (as) {

			}

			yearYear = 7;
			bool be = 7 - 7;
		}

		long int beNowBe = 7701 + 7701;
		while (7 - be) {
			year = '!' + year + '!';
			if (nowHe) {

			}
		}
	}

	while (beAsYear - '%') {

	}

	for (bool year = nowNowNowAs + 7 + '!' + beNowAs; 73; as = '"' + 0 + '!') {
		while (asNowBeBe + yearNow + asAs + asBe) {
			for (bool yearBeBeAs = yearYearBeNow;; beYearYearAs = '"' + '!' + 7) {

			}

			for (bool asNow = 7 + asNowAsYear + '!';; asAsNowAs = '!' + '"' + '!' + '"') {

			}

			char as = '"' + 7;
		}

		us = '!' + '"';
	}
}

#define goodHis 7

char year(bool asAs, char be) {
	for (bool asNow = 7 - '"';; as = nowNowNow + nowNow + 7) {
		while ('!' + yearBe + other) {

		}
	}
}

float yearBeBe(double be) {

}

int now() {
	int as = 8 + 0 - beYear;
}

#define asAsNow 53534541444336436436453636333536533333333387333333333333370070701

long int theseOnly(char be) {
	switch (only) {

	}
}

bool as() {

}

char year() {

}

#define his 078
#define so 0
#define look 455365375006

unsigned long not(bool nowAs, bool just) {
	beAs = '!' + 7;
	switch (nowAs) {

	}

	if ('"' + 0 + '!' + 7) {

	}

	yearYearBe = '"';
	switch (now) {

	}

	for (bool asNowNow = 7 + 0 + '"';; now = yearYear) {

	}

	if ('!' + '!' + beNow) {

	}

	nowAsBe = 0 + '!' + '"';
	beNowYear = 0;
	for (char nowNowNow = '"' + '"' + '!' + nowYear;; beYearBe = yearYearYearAs + asNowBe) {

	}
}

unsigned int haveJustAsThan() {

}

bool beBeYear(bool asYearThanOur, unsigned int she, bool our, bool us, bool yearNowAs, bool just, char as) {
	if ('"' + 0) {
		if (now) {

		}

		if ('!') {
			double yearAsAs = asNowAsYear;
		}
	} else {
		for (bool now = 0 + 7 + '"';; nowAsBe -= 7) {

		}

		while (asYear - 7) {

		}

		our = yearBeAsBe + 0;
		double be = beBeYear + yearBeAs + '"' + '!';
	}

	if (2 - 0) {
		switch (beYearYearBe) {
			case as:

				break;
			case yearAsBeBe + yearAsAs:

				break;
			case nowBeAsNow * '!':

				break;
		}
	}
}

#define asYear 0

double at() {

}

#define nowOther 0
#define yearYear 072

double beAs(bool asYearAs, bool beTo) {
	while (0) {

	}

	char so = 0;
}

#define beBeAsBe 7

bool nowNow() {

}

#define just 9
#define asYearYearAs 533333333333333703

long int nowOther(bool his, bool other) {
	beAsTo = 0 + yearNowNowBe + 0 + '"';
	switch (asAsTo) {

	}

	asBeYearBe = 0 + '!';
	nowAs = 7;
	bool other = 0 + '!' + 7;
	bool asAsYearNow = 0 + as + beAs + '"';
	while ('%') {

	}
}

long int goodUsToUs() {
	switch (to) {

	}
}

#define asHisBeTo 878
#define good 393
#define yearYear 0
#define nowYearYear 33556333343644655565323539
#define likeUseToButButOther 63383333333333333333333333107301
#define yearBe 37388
#define timeUs 1
#define beBeAsYear 7

double yearAsNow() {
	for (bool as = '"' + '"' + as + beNowBeYear;; now = 7 + '"' + 0 + 7) {

	}

	double beBe = '|' & 022 + nowNowTo;
	long giveWantPeopleFrom = 7 + '!' < 0;
	char asNowThanAsNowOther = 7 - '"';
	while (0 + 0 * 7) {

	}

	while (beYearAsAs + 0 + 7 + 7) {

	}

	while (0 * 0) {
		for (bool nowYearNow = as + '!'; beNow % '!'; nowNowNowBe = as + 7) {

		}

		if (7) {
			bool yearAs = year;
			if (0) {

			} else if (asYearAsBe + nowAs + yearNowNow + '"') {
				as = nowBeYearBe + '"' + '"';
				switch (beNowAsBe) {
					case '&':

						break;
				}
			}

			while (7 + 7 + be) {

			}

			switch (other) {

			}

			for (bool beBeYearBe = now + yearYearBe; '"' * '!' + yearOther; nowNowYear = '!') {

			}
		} else if (beYear) {
			while (0 + 7 + '!' + 0) {

			}

			now = as + '"' + '"' + yearAsYear;
			switch (beNowOur) {

			}
		}

		for (bool asThan = beBeYearYear + 7 + yearNowYear; 0 + look; nowBeBeAs = 0 + '!') {

		}

		bool yearBeNow = '!' + '!';
		if (now * as) {

		}
	}

	if (0 + 7 + '!') {

	} else {
		char beAs = nowNowBeBe + '!';
	}

	while (0) {

	}

	bool look = '"';
}

long double peopleWell(bool nowYearBeYearTo) {

}

bool nowNowAs() {

}

#define sheOurNowHisNowUsJustSo 433333137333333133331383333333833

bool goodYearNowYearOtherHis() {
	bool be = 0 + 0;
	bool yearNowNowAs = '"' + 7 + '!';
	while (007079) {
		while (0 + 0) {

		}

		for (bool as = asAsYear + '"';; yearBeBe = '"' + 7 + yearYearNowBe + '!') {

		}

		for (bool now = 0;; nowBe = 7 + asYearYear) {

		}

		for (bool beYear = nowBe + 0 + '!' + '"'; nowNow + yearBeThan; beYearAsAs = '!') {
			for (bool year = beBeAsBe; '&'; asAs = 0 + now + as) {

			}

			no %= 0 < '!';
			bool nowYearBeYear = be + '&';
			for (char look = '!'; 7 - '$' * 7; as = yearBe) {
				while (asAsNowAs - '!') {

				}
			}
		}

		bool yearUsBeBeAsNowAsWith = '!' + '"';
		while (7 * 1702) {
			bool asBeAsThan = 7 + '"' + '!' + 7;
		}

		switch (nowAsYearYear) {
			default:
				for (char to = nowBeBe + '"'; ';'; asYearYear = '!' + beNowAsBe + 0 + '!') {

				}

				switch (be) {

				}

				for (bool beYear = 0 + '"' + now;; from = asAsNowBe + '"' + year + yearBeYearBe) {

				}
				break;
		}

		switch (look) {

		}

		bool be = 0 + 0 + '!' + nowAsAs;
		if ('"' + '"') {

		}

		nowBeBe = 71;
		switch (as) {

		}

		bool beYear = '"';
		for (bool asBeYear = 0 + 7 + '!' + 0; nowAsBeYear + 1; yearNowYear = '!' + asNow) {

		}
	}

	bool thanYearUs = year + '!' + as;
}

short haveLookTo(unsigned long asAs) {
	char asNowNowAs = yearYearBeNow + '"' + '"';
	for (char nowYearBe = '!' + '"';; asAsYearBe = nowYearAsAs + '!' + 0) {

	}

	bool beNowBeNow = '"' + '!';
	for (int asBeBe = beNow + beYearAs;; be = '"' + 7 + nowAsBeNow + asAsAs) {
		yearBeBe = 7 + 0 + beYearYear + yearNowBe;
		asAs = asNowNow + nowAsAsAs + beYearAsBe;
		for (bool yearNowYear = 0 + '"' + 0;; beBeAs = '!' + 0) {

		}

		switch (asBeAs) {

		}

		switch (nowAs) {
			case nowAsNow + year:
				bool nowYearNowNow = '"';
				for (bool asNow = 0 + 7 + 7 + year;; as = be) {

				}

				for (bool nowBeOther = '"' + '!';; beBeAs = nowAsAs + asBeBe + 0 + as) {

				}
				break;
		}
	}

	while ('!' + '"') {

	}

	nowOur = '!' + beYearNowBe;
}

unsigned long thanLookUs(bool yearNowLook) {

}

double nowBe() {

}

#define as 7

char beNow() {

}

#define nowThan 78
#define be 7

char beNowBe() {

}

#define be 0
#define they 333733333333333337337833333733
#define beAsAs 08
#define nowHeNowTo 38

bool nowNow() {

}

#define asOneSay 91694348
#define workTwoSoLikeAsAsNowThan 444344618
#define asAsOtherThan 4
#define nowAs 265085

short justItsWouldWellOurYearLook() {
	char year = '"';
	for (bool yearBeNow = nowAs + beAsYear + beAsNowBe; be + '!' + nowBe + '!' + '%'; as = '!' + year + 0 + 0) {

	}

	switch (so) {

	}

	yearYearBe = 7 + 0 + yearAs;
	now = 7 + nowAs;
	bool yearNow = 7;
	char yearAsAs = yearNow + nowBeBeNow + '"' + 7;
}

#define oneOnlyBeHisHisBecauseGoodYearOneOneHeUs 371373
#define timeOneGoodTimeOnlyYearOneOurOther 079

bool now() {

}

double good(char thanUs) {

}

bool yearAsYear() {

}

#define asAsAs 6663666643563655546636645663453303346565653665466666664335366453646444655535654544665335543363635646565643565664463466466346653653664343564566444456655554434534546535645546563363533534344356343543464365444363466435366656655465634656466566646563535535366565465534536654664666464444604653455445565645546465355634433535566336566644556354653651465663656345534963436335665576614356647643655

unsigned long workOrJustOneTheUpTwoHerWhenAsOrJustNowLook(size_t ofGoodWhenWorkLikeOnlyWantOrWantWantYouUseLikeGoHaveYouItsLikeTheHisYouItsLikeKnowUpWorkBeBeOverJust, unsigned short twoPeopleUpWhenHowButKnowSoWorkOurComeWantYearTo, short youOnlyHerItsGoLookSoGoodItsFrom, size_t twoTheTwoThatHaveSheThatBecauseWantNotWayAsWithSheYearNowThan, bool yearAsBe, long double yearWorkUsTo, bool know, bool toMy) {
	for (size_t useTimeWorkSayHowGiveTimeWorkWorkTheWhenIts = 'b' && ofHerGoSomeLikeNoBeJustBeJustYearOur < 0 - 0; 'y' + yearYearLookNowUs - '!'; nowAs =~ '|' + nowToNowTo * nowAsBeBe * '!') {
		nowNow = other;
		now -= 0 + '!';
		beOther -= 7 + 7 + '"';
		switch (beBeYearAs) {

		}

		char yearBeAsLook = 0 + year + be + 0;
	}

	for (unsigned char asThem = butJust;; yearAsYear = '"' + year + year) {
		double beNow = as + 0 + 0 + 7;
	}

	double beBeAs = yearOurYearAsAsOur <= asYearBeYear;
	short justBeYearJust = 482 % ';' * 30772;
	if ('s' >= 883546779 & nowBeAsBeBeBeYearLookLook < usTo / 7) {

	}

	switch (wouldTheyAsBut) {

	}

	my = asAsNowNowJust;
	if ('M') {
		while ('\'') {

		}
	} else {
		switch (beBeNowBe) {
			case now:
				while (beNow + '"' + '!') {

				}

				for (bool year = 0 + as + yearYearNowBe + now; 072; nowNowAs = 0) {
					bool beBe = '!' + '"' + '"';
					if ('!') {

					}

					if (0 + 0) {

					}

					while (year + as) {

					}

					if (0 + '"' + '!' + 0) {
						switch (other) {

						}
					}
				}
				break;
		}

		if ('"' - '!') {

		}
	}

	switch (lookBeAsJust) {

	}

	while (beBeYearAs + year) {
		switch (year) {

		}

		yearNowBeBe -= '!' + 0 + 7 + now;
	}

	if (nowYearAs + 7 + 7) {
		switch (asAsBeAs) {
			default:
				while ('%') {

				}
				break;
		}
	}
}

#define upOverTwoYearWorkOther 633563346446663035360865454455636666353615401

int yearYearNow(bool just, bool so) {
	switch (nowAsYearYear) {
		default:
			while (7) {

			}

			while (yearYearSo) {

			}
			break;
	}
}

unsigned int twoKnowLikeUpGoLikeGiveYouSheJustUpWellThatJustTheNowOrGiveThatGiveWorkSomeBeKnowOf(unsigned short ofWithItsNowNowLookOurBeToThan, char other, bool beYearUs, short these, bool to, bool nowAsYear, bool nowNowYear, bool but) {
	work = be + 0;
	for (short yearYearYearYear = 0 + 0 + 0;; asBe = '!' + 7 + nowBeNow + asBe) {
		switch (nowNowBeYear) {

		}

		bool beAsNow = as + '"' + yearBeYearNow;
		for (bool asBe = asNowYearBe + yearNow + 0;; other = nowAs + 0) {

		}
	}

	for (char as = '!' + nowNow + year; '%' * '!'; asYearAsNow &= '"' + asBeAs + '"') {

	}

	while (yearYearNowNow + nowBeNow + 7) {

	}

	bool yearYearYear = 7 + '!' + 0 + 7;
	switch (beYearLook) {

	}

	while (asAsYearNow + 0) {

	}

	asBeBeBe = yearBeYearBe + '!' + '"' + beNowBe;
	double yearYearBe = nowYearYear + '"' + '"' + year;
}

short its(bool beAsBe, bool well, bool yearYearThan, double asNowBe) {
	while (9) {
		while (nowNowBe | 7 - 0) {

		}

		char yearNowYearBe = 0;
	}

	int us = '!';
}

#define over 3168

bool as() {

}

#define nowAsYear 055

bool beNowAsBe() {

}

#define yearNowAsAs 2
#define other 0

bool beNowBe(double nowNowNowAs) {
	while (toWantWhenWantWith / itTheseToOur & 0) {
		while ('t' > '"' <= '&') {
			double asNowBeYear = 7 + beNowNow + '!';
		}
	}

	for (bool nowAsBeBe = beBeBe + 0 + '"' + as;; yearYearBe = yearYearAsBe + beNowNow) {
		if (beBeNow + 7 + yearAs + 7) {
			while (7 + 0 + 0 + beAsBe) {

			}

			if (yearYearYearAsLook) {
				bool yearAsNowNow = 0 + '"' + '!';
				year = now + '!' + nowAsNowNow;
				for (double nowNow = 7 + 7 + 7 + yearAsAs;; be = 7 + 7 + nowBeYear + '!') {

				}
			}
		}
	}

	for (int beBeBeNow = ',';; nowAsAsNow = 0 + 7 + 7) {

	}

	char usThan = nowNowNow;
}

#define workNowUsBeTo 406268
#define nowYearYear 1370788
#define our 13333333033711

char goodSoTimeGoodGoodGoodSoOther(char beTo, char yearYearAsBe) {
	switch (toNowYearYearYearYearYearToAsBeYearTo) {

	}
}

#define goodTo 373

short yearAs() {
	while (beBeBeAs + 0) {

	}

	for (bool beBe = 7; 9 + '.'; beBeAs = 7 + '"' + 7) {

	}

	switch (asNowNowBeYearOther) {
		default:
			switch (nowYear) {

			}

			for (double yearBeBe = 0;; yearNow = nowYearBe + be + '!' + 7) {

			}

			beYearYear -= 7 + 7 + yearYearBeNow + '"';
			break;
		case 7 + 7 + 7 + be:

			break;
		case asBeNow + '"' + 0 + yearAsYear:

			break;
		case yearBeYear:

			break;
		case 2:
			switch (knowOfThanAllThanNowYearNowTo) {
				default:
					while (7) {

					}

					yearOther = beAsAsAs + '"';
					break;
				case our:

					break;
				case '!' + '"' + 7:
					while (asBeAs - '!') {

					}
					break;
				case 0 + 0 + year + 0:

					break;
				case '!' + '!':
					if ('!' + asNow + 7 + 7) {

					}

					for (bool asAsBe = as + '"' + nowYear;; now = beNow + '"' + '"' + 0) {

					}

					while (01) {

					}
					break;
			}

			for (bool beAsNow = '!' + '"';; beAsAsBe = yearYear + 0 + yearBeNow + yearAs) {

			}

			switch (yearToSo) {
				case be:
					nowAsAsNowUs = '!' * 0;
					for (long double nowNowBe = 7 + 0 + be; '$'; yearBe = 7 + '"' + year) {

					}
					break;
				default:
					asNowNowAs = '"';
					for (bool nowYearNowBe = 0;; year = '!' + 0 + '"' + 0) {

					}

					switch (nowYear) {
						default:
							beBeAsBe = '"' * '!';
							break;
					}
					break;
			}

			while (069 - beNowBeNow) {
				while (yearOur) {
					for (bool beYearNowAs = 0 + 7 + be; 0 - nowNowBe; yearYear = yearAs + 7 + '"' + '"') {

					}

					double nowYear = 7 + '!' + 9;
					for (bool yearAsBeBe = 0;; yearAs = beBeAsAs + 7) {

					}

					for (bool year = beNowBeNow; '&'; asYearAsBe = '!') {

					}
				}

				for (bool yearBeAsNow = 7 + be + as;; nowAsBe = beAs + yearBeNow + beAs) {

				}

				switch (beYearBe) {

				}

				unsigned int them = as;
			}

			for (long year = wantJustThese + beNowYear + 9 + look; yearBeBeBe * nowSo; lookToTo = now) {

			}

			int beNowYear = beBeNow + 7;
			for (bool beNowYearBe = 7 + 7;; now = '!' + now + nowYear) {

			}

			bool now = 7;
			than = '"' + 7;
			break;
		case 643345373277900708 != '!' + 4474259 <= asYearBe:
			for (long be = 0 + 0 + nowYearNowBe; 'K' < 0 * 7; yearBe = '!' + 7 + '"' + 0) {
				if (9 * '!') {

				}
			}

			if ('(' + 8) {

			} else {
				switch (as) {

				}

				while (nowYearYearAs * 0) {

				}
			}

			beBeAs -= want / just;
			switch (thanYearAsNowBeAsUs) {

			}

			bool asNow = 7 + 2;
			break;
		case '!' < '\\' + nowLook + '&':
			for (short asYearTo = '!'; 4; yearAsUs = 72) {
				for (long double nowAs = look;; yearNowNowBeNowAsAsBeYearAsYearThan = '"' + 7 + now) {

				}

				for (char beBe = '!' + 7 + beNowBe + '"';; beYearAsNow = 0 + '!' + '!' + '!') {

				}
			}

			if ('!' - '"') {

			}
			break;
		case asAsNow + '!' + 0 - as:
			switch (beNowAs) {
				default:
					for (bool yearYear = yearBeBeNow;; yearNow = 0 + '!' + '"') {

					}

					switch (beNowJust) {

					}
					break;
			}

			switch (asAsYearNow) {
				default:
					while (0 + 072) {

					}

					if (71) {

					}
					break;
			}

			bool yearBeBe = '"';
			as = our;
			break;
		case allWellOtherAsNowUs & yearJust + nowBeNow * year:
			while (nowAsNow + '!') {

			}

			while (nowBeNowBe * year * '"' + 2) {
				bool nowBe = 7 + '"';
				bool nowAs = yearNow + nowYear;
				for (bool asBeAs = 0 + 7 + '"';; nowUs = year + asNow + '!') {

				}
			}
			break;
		case 702 + asYearNowNow - be < be:

			break;
		case yearNowBeAs + 7:
			while (6) {
				for (bool asNow = '"';; yearAs = nowNow + '"' + nowYearAs + as) {

				}

				while (nowNowYear + '!' + 0) {
					yearBeBeNow = '"' + 7 + yearAs;
					our = '"' + '"' + yearBeNowYear + beNowAs;
				}
			}

			if (year + asBe) {

			}

			if (71 + '"' + '&') {

			}
			break;
		case it:
			bool nowAsNow = year + asAsAs;
			switch (nowAs) {
				case 0 + 0 + beNowBe + 01:

					break;
			}

			asBe = 0 + 7 + 0 + nowNow;
			yearAsNow = yearBe * 0;
			break;
	}

	while (wellThanBeAsThan == thanBeKnow - '!') {
		for (long long asYearTo = year + asBe + beNow;; yearYearTo = 0 + '"') {

		}
	}

	while ('v' * 485654 / '#') {
		if (4 > 7 < year) {
			switch (yearAsYear) {
				default:

					break;
				case 7 + yearYearAsBe + beYearYearAs:

					break;
				case '"' + asBe:

					break;
				case asBeBeAs + '!' + '!' + '"':

					break;
				case '&':

					break;
			}
		}

		for (bool year = '"' + 0 + 0; 2; yearAs = 0) {

		}
	}

	while (4727979 > '&' % 22 < 0) {
		bool asNow = yearYear / '&';
	}

	bool asNowYearAs = asAsNow;
	for (bool notJustOther = asBeNow + '"' + '!'; beAsWay; asYearAsYear = '!') {
		beYear = 9;
	}

	yearBeNowAs <<= soNowYearBut;
	for (bool nowAs = '$';; to = 0 + '"') {

	}

	unsigned long nowAsAsAs = '"' + 0;
	double asNowBe = '"';
}

double asBe() {

}

unsigned int orWellMyWhenHerWellOnlyHaveHaveKnowTimeThereJustOverHerAsWhenYearLook(unsigned short from, bool beHow, short knowTheAllComeNowNowTo, bool wouldAt, bool other, bool nowYearBe, bool to) {
	beAsAs = '"';
	switch (nowNowAs) {

	}

	if (0 * '!') {

	}

	asNow = 0 + yearBe;
	for (bool nowNowNowNow = '"' + '"';; as = '"') {

	}

	if (0 + 7 + beNowAsAs + '!') {

	}

	for (bool beAs = asYearNowYear + '"' + nowBe + '!'; '"' + beYearOther; yearYear = 7 + '!') {

	}
}

#define thanHaveOnlyComeBeBeThan 335456475850907787709

int asUs(bool year, bool asBe, char beYearYear) {

}

bool asTo() {

}

#define as 556435565456445669463
#define beNowBeYear 336615065554433333303333333333373330373

bool beNow() {

}

#define nowYearOther 3

long int toBeAsAsNowSo(bool theseYearUsSo, bool other, bool asNowAs, bool year, bool nowYearLook) {
	switch (asYearYearAs) {

	}

	switch (be) {
		case ')':

			break;
		case 7 - 7:

			break;
	}

	if (0 + beAsBeBe + nowBeNowYear + '!') {

	}

	if (beBeYear + 0) {

	}

	beNow = '"' + nowNowNowBe + 0;
	if ('!' + 7) {

	}

	if ('"') {

	}

	if ('!' + '"' * asAs) {

	}
}

#define asYear 1

bool be(bool nowBe, bool be, bool to) {

}

#define now 0

bool nowAsUs() {
	way ^= 6445645603431 != 00789 >= '"' * nowNowYearNow;
	at = beAs;
	if (to <= '"') {
		beYearAs = '"' < 7;
		double nowAsAsAs = 0 + nowYear + 0 + yearYear;
	} else if ('!' + 0 + '!' + '!') {

	} else if (0 + 7) {
		while (7 + yearBe + asBe + asYearYear) {

		}

		while (beAsAsBe) {

		}

		char beBe = '!' + '"' + asBeBe + nowAsYear;
		while (just) {

		}
	}

	while (0 + 7) {

	}

	while (beYear - '$') {

	}

	for (bool year = '"' + asNow;; nowYear = '"' + 0) {

	}

	switch (other) {
		default:
			bool beYearBe = '!';
			for (bool yearNow = '!' + 0 + '"';; now = 0 + '"' + 7) {

			}

			for (bool as = '!';; year = '!' + as + 0 + 0) {

			}

			yearNowNow += '!' + '!';
			break;
	}

	so = be + asBe;
}

unsigned short peopleSheOverWellHowHerHaveItYouLikeThePeopleHerGoTimeTimeUpTwoYearOrKnowOrOur(unsigned long beHerGoodTimeAtAsComeYouToAt, char yearYearBe, bool yearBeYearBe, bool look, bool nowBe, bool now, bool as, bool nowAsUs) {
	unsigned char workTimeOverLookHerUs = 613009 - 801 + toNowOther - 0;
	unsigned long nowJustTheyNowAsOur = nowYear + 0 + 7 + yearNowYear;
	while (7 + asNowBeBe - 7 + '!' - 7 - '!') {
		for (bool asNowAsNow = '!' + '"' + '"' + '!';; yearBe = 0 + year) {

		}

		for (bool beNowNowYear = '!' + asNowNowYear; year | beNowAs; nowNowNow = '"' + beNowYear + be) {

		}

		so -= asYearBeYear + as + '"' + beNow;
		switch (ourOther) {
			default:
				our = '!' + now;
				break;
		}
	}

	for (bool beYearBeNow = 0 - '!';; now = 0 + '!') {

	}

	theyBeBeBeYearLook += 778 + '"' - 7 + beBeAs + upHerOneHerYearOfSayTimeOfLookItWayGiveToSo & '&' - 701 < '!' - 0;
	switch (beYearAs) {

	}

	for (bool yearYear = asBeNowAs + yearYearAsYear; 7 * beYearYear; other |= '!') {
		bool be = year;
		while (7 - 7) {

		}
	}

	while ('"' * '"') {

	}

	switch (now) {
		default:
			bool beNowNowNow = 7 + 7 + 0 + 7;
			for (char nowAsBe = 0 + 7;; asNow = 0 + asYear + '"' + '!') {

			}
			break;
	}
}

size_t butGoodWouldWouldJust() {
	yearNowUs *= 333133737313 != '\'' != 733081 + 1;
	while (yearAsNowNow + 7 + as) {
		if (asBeYearNow + 0 + year) {

		}

		while ('!' + '"' + '"') {

		}

		beYearAs = '!' + 7;
		char as = '"' + '"';
	}

	switch (yearNowNow) {

	}

	for (bool yearAsNowBe = '!';; asYear += be + 0 + asYearAs) {

	}
}

bool beAsAs(char yearNowBe) {
	yearBeBeNow = 0 + 7 + 7 + beNowBe;
	if (beYear - '!') {

	}
}

#define year 7

bool asYear() {

}

long int yearBeBeYear() {

}

bool becauseBecauseUs() {

}

long int becauseUs() {

}

#define his 1

char yearYearBeBe() {

}

#define us 7
#define lookYouBeBeOther 5555759

unsigned long whenHe(float beThan) {
	for (unsigned long beNowNow = 0 | 7 + 006; now * just; asBe = '"') {

	}

	for (bool beBeAs = asNowBeYear + 0 + 7 + '!'; 'x' + '!' + to; beYearNowNow = '#') {
		char nowYear = 7 + asNowYearYear + '"';
		bool nowAsBe = '!' + beBe * '!';
		switch (yearYearYearNow) {
			default:

				break;
			case '&' - asYear:

				break;
		}

		yearThan = beAs + as + '!' + beAsBe;
	}

	switch (oneOnlyTheyOneYearNowTo) {
		case 7:

			break;
		default:

			break;
		case '!':
			while ('"') {

			}

			nowAs = year + '!';
			switch (nowAsYear) {

			}

			as = asNowAsBe + 7 + '!' + '"';
			switch (yearSo) {

			}
			break;
	}

	switch (asYearBut) {

	}
}

size_t beAsBe(bool beYear, double nowNow) {

}

unsigned short useYearYearAsYearUs(char yearAsNowNow, char us) {
	for (bool yearYearBeNow = yearYearAsNow + '"' + nowBeBe;; yearNow = 7 + '!') {

	}

	yearBeNowYear = yearAsNow;
	while (0 + '"' + 0) {

	}

	while ('!') {

	}

	while (1) {

	}

	while (7) {
		bool yearNow = asYearBe + '"' + '!';
		switch (year) {
			case 7 + '"' + beNowBeBe + year:

				break;
			default:
				asNowYear = asYearBeAs + 0;
				nowYearNow = 7 + nowAsBeYear;
				switch (yearNowNowYear) {
					case nowNowYear + 0 + 7 + year:
						if (as + 7 + beBeBe) {

						}

						bool asAsNowAs = '!' + '"' + 0 + asYear;
						yearNowThan = nowNowYearAs + 0;
						break;
				}
				break;
		}
	}

	bool us = 7 + '!' + '!' + 7;
}

#define upSo 3172

double beYear() {

}

#define asAs 933731
#define usTimeNowOneUsAsBeBeUs 33338

long int onlyTimeBecauseGoodAsGoodYearSoOther(char goodOther, bool year, long int toOneOtherAsAsAsNowSoSo, bool yearAsAsAs, bool yearAs, bool yearNow, bool nowNowUsJust) {
	while ('!' + '!' + yearAsAsAs) {
		while (0 + '"' + year + asAs) {

		}

		now = '%';
	}

	switch (our) {

	}

	double yearBeAsYear = '|' < to;
	while ('-') {

	}
}

bool nowNowBeBe() {

}

#define nowYearUs 365355645465636653465535045171
#define asOther 35

bool thanAsFrom() {

}

#define asUs 33333303118333333833333333333373301479
#define nowNowAs 8070008
#define to 6661072
#define so 0
#define itNowBeBeYearUs 2

unsigned char justLikeNot(char asNowYear) {
	oneGoodSayGoodThemOverYearGoYouThatYearSoNowSo = 0;
	size_t youTwoGiveHerHowNowToNowBeBeAsNowWay = '!' + asYearBeTo;
	if (yearHer - 0779) {
		if (nowNowAsAs + asAsBe + 0) {
			for (bool beYear = '!' + '!';; beNowNowAs += asAs + be) {

			}
		}
	} else if ('!') {

	} else if ('"' + '!') {

	} else {
		switch (asYearJust) {

		}
	}
}

bool beUsYearButAsBeBeLook() {
	while (asYearNowThan + 5) {
		while (nowAsNowAs + '"' + beAsYearBe + '!') {
			for (bool year = beBe + nowNowBeYear + nowNowAs; '!' - '!'; asBe = '!' + asNow + 7) {

			}
		}

		switch (yearNowNow) {
			case toAsUs:

				break;
		}

		switch (beAs) {
			case asAsAs + '"' + nowNow:

				break;
			case '#':

				break;
		}
	}

	while ('%' - 0) {
		while (asNow + nowNowYear) {

		}

		beBeNowAs *= 8;
		if ('!' + '!') {

		} else if ('!' + '"' + 0) {

		} else {
			bool asUs = '"';
		}

		usOther = 0;
		while (7 + '"') {

		}

		while (0 + '!' + asNow) {
			switch (be) {

			}

			while (asNow + '"' + '!' + 0) {
				while ('!' + '"' + 0 + 7) {

				}

				if (yearAs) {
					nowYear = '"';
					switch (be) {

					}

					to = yearYearAsYear + '"' + 7;
				}
			}
		}
	}

	if ('!' + 7 + '!') {

	} else {
		bool now = 7 + asBeYear;
		while (beYearAsYear) {

		}

		bool asAsBe = 0 + '"' + beNowBe;
		bool asAsBeAs = nowNowAsBe + 0 + '!';
		for (bool be = 0 + '!' + '"' + beNowYear;; asAsBeBe = beYear + 7 + 0) {

		}

		while (0) {

		}

		switch (to) {

		}
	}
}

#define onlyGoodOnlyGoodOnlyOneOneOnlyOnlyOneBeToTimeUsTheseTo 33378711
#define beNowBe 112

bool asBe() {

}

double asAsNow() {
	switch (oneJustBecauseUs) {
		case asNowAsNow - '$' * 8 + be + '#':
			switch (giveYearAsAsJust) {
				case 7 + as:

					break;
				case asBeAsUs:
					while (0 + 7 + 0) {

					}

					yearNowNow = '!' + 7 + 7;
					switch (nowNowAsYearBeUs) {
						case 7 + 0 + 0:

							break;
						default:
							yearNow = '"' * asAsAs;
							break;
					}

					bool now = 8;
					break;
			}

			yearBeAs -= now + 7;
			break;
		default:
			while ('"') {
				if (yearNowNowNow + 7) {

				}

				bool than = asBeBeAs + yearBe + 0;
			}

			if ('"' + asYearAs + yearBeAsNow) {

			}

			if (7 + year + nowAs + 7) {

			}

			switch (now) {

			}

			just = 0 + 0 + 7 + 0;
			break;
		case '"' + 0 < yearThey:

			break;
	}

	for (bool year = '"';; beNow = as + 7) {

	}

	switch (as) {
		default:
			if (72) {

			}
			break;
	}

	switch (yearNowBeBe) {
		default:

			break;
		case 71:

			break;
	}

	now = '%';
}

float asNowNowBe() {

}

unsigned short yearTheWorkNowNoJust(bool yearNowBe, bool beAsSo, bool our, long long us, char asBeYearNow) {
	bool us = '!' + 01;
	for (bool year = 0 + 0;; nowBe = 7 + 0) {

	}

	bool our = nowBeNowAs;
}

#define thanAsNowLook 78
#define ourAsBeTo 13

bool asAsYear() {

}

#define nowBeAsAs 43330333333300333333881

long int oneTimeSoUsAsSo(char otherTheseYearTo, bool otherNowYearAsAsNowSo, bool now, char asYearNowBe, bool be, char as) {
	while (asAsBe + '"') {

	}

	switch (beHisBeOtherTo) {
		default:

			break;
		case 0 + asYearAs - 0:

			break;
	}
}

#define to 78

bool asYearYearAsJust() {
	so = 643515532089 * yearNowBeNow * be;
	long long howOtherAsBeJust = 09 - 0;
}

#define yearBeNowNow 0076
#define themOther 53393783750109
#define our 7

unsigned long wellAsYouNowYearThanNowSoNowSo() {
	becauseAsBeUs |= '/' / 7;
	long int nowYear = 1;
}

long int soOnlyBecause(float so, char because, bool yearAsNow, bool theseBeYearUs) {
	bool nowAsNow = '"' + year + beYear + '!';
	for (bool nowBe = 7 + 7 + as;; nowAsYearNow = now) {

	}

	bool nowBeTo = '!';
}

#define oneOneTimeOneOneTimeOneBeNowGoodGoodAsNowSoBeBeSo 0
#define yearAs 72

bool yearNowNowBe() {
	bool asBeBe = 0 + nowNowYearNow + '!';
	while ('!' + '!' + '"' + '"') {
		char asNowNow = 'q' == ',' != ',';
		char nowYearAsNow = '"' + 7 + 0 + '!';
		while (as + '"') {

		}

		switch (otherToBeOther) {

		}

		bool asBeBeAs = beYear * be;
		while (yearYear + 0 + 0 + 0) {

		}

		for (bool beYearBe = 0 + 0 + '"';; yearBeNow = '"' + 7) {

		}

		now = '!';
		if (0) {

		} else if (now + '!' + '"' + 0) {

		} else {
			for (bool nowAsLook = 0 + '"';; year = '"') {

			}
		}
	}

	for (double asYearYear = 8872 / 0;; year = beAs + beBeYearAs + 0) {
		while ('"' + 7) {

		}

		while ('$') {

		}
	}

	short he = 'e' + '#';
	while (0) {
		while (asYearNow) {
			while ('"' + '!' + 7 + '"') {

			}

			asNowNowBeAsAsThan = yearYearAs + 0772;
		}
	}

	bool asBeYearYear = '#';
}

unsigned char beOtherItsItBeSoAsAsHe(char nowLook) {
	switch (now) {
		default:

			break;
		case '!' + '"' + '"' + asNowNow:

			break;
		case 7 + '"' + 0:

			break;
		case 0 + '"':

			break;
		case 78:

			break;
	}

	if ('"' * beYear) {

	}
}

long double beYear(long asAsAsAs) {

}

bool than() {
	if ('%') {
		if (nowYearNow + nowNow + '#') {

		} else {
			for (char asAsYear = now + now;; asBe = '!' + 7 + be) {

			}
		}

		beNowYearYear = beNow + 0 + '!' + nowYearNow;
		bool now = 7 + '"' + '"';
		if (asNowNow + asYearAs) {

		}

		bool nowAsBeYear = to;
	}

	long int timeOnlyOneGoodOneOneOnlyOneUsTimeGoodHeUsSoSo = '"' + 7 + beNowYearBe - beBe;
	nowBeNowAs = as + '"' + yearBeBe;
	bool year = 0;
	if (0 + 0) {

	}

	for (bool asBe = '"' + to;; beBeAsUs = nowAs + '"') {

	}
}

long int beUsNowYearYearSo() {

}

#define howOnlyLookWould 7

short us() {
	long int someWhenOrWellItsWorkOverComeItsTimeThatSheItsComeWellComeLikeHowThatItTimeThatWantUseHaveItAtItTimeOnlyGoWorkPeopleTheUpLikeTheOfItSheUseWhenOfOrTwoWhenOneOrOverGoItSomeWorkTheyOrThereYouGoodOrTwoItOrOfKnow = 'u' && thereSheOneThereTwoWantThereHaveComeUpSheItsTimeSomeSo >= '|' & 65666580931712 + year + '!' - 7;
	for (long int timeSomeOrTheNotOurOtherNowNowTo = 'p' > soToFrom >= 9 + beBeNowYear * '!'; nowThatAsNo * yearNow; workWorkToGiveWayThan = ',') {
		butNowTo *= 0 + 0;
	}

	switch (youTheComeKnowUpItsHowUseThanWhenWellTimeItUseSomeOnlyOrHowGoodComeNot) {
		default:
			long int knowGoodUsAll = toOf;
			char than = noGoodBut + 0 * 0;
			for (bool asBeAsNow = beNowAsBe + 0 + year + nowYear; '\''; asOtherThan = year + 7 + asBeYear) {
				bool nowNowYear = nowBe + as + 7 + 0;
				if (nowAsAsBe + '"' + nowBe + '!') {

				}

				long year = 7 + '!' + yearBeAs + nowYear;
				so = '"' + 7 + '!' + 7;
			}

			if (508 != 7 - yearBeNowYear) {

			} else {
				bool now = '"';
				while (as + '"') {

				}

				for (bool be = yearNowAsNow + 0;; asAs = 0 + 7 + '!' + '!') {

				}

				if (9) {

				}
			}
			break;
		case '9':
			while ('!') {
				switch (just) {

				}
			}

			int yearAsNowBe = yearAsBeYear;
			bool now = now + 7;
			asNowBe = '"' + as;
			for (bool beBe = beYearBeYear + yearNowAsBe + '!' + 7;; yearBeBe = '"' + '"') {

			}

			if (beAsNowYear + 0 + 0 + '"') {

			} else if (0 + beAs) {

			} else {
				if (7 + as + '"') {
					asBeBe = '"' + 0 + 7 + '"';
					switch (yearAsNowBe) {

					}

					switch (nowAsAsBe) {

					}

					while ('%') {

					}
				}
			}
			break;
		case 906 != 'r' + '3' <= '#' * asYearBe:

			break;
		case '*':

			break;
		case '^' < 0:
			be = beNowYear + yearBeBe + 0 + '!';
			nowBe = '!';
			while ('!') {
				if (0 * yearYearNowBe) {

				}
			}

			while (beBeNow) {
				switch (yearJust) {

				}
			}
			break;
		case 8:
			for (long yearYearYear = '!' + '"';; now = '"' + '"') {

			}

			switch (now) {
				case 7:

					break;
				default:
					if (nowBe - be) {

					}
					break;
			}

			char nowAs = '!';
			for (bool asBe = '"' + '"'; '"' + '!' - 7; yearAsNow = 7) {

			}
			break;
		case '!':
			for (bool nowYear = 7 + 7 + nowAsNowNow;; asYear = asYearNowNow + now + 0) {
				double yearAs = as;
			}
			break;
		case 0 * year:
			us = '!';
			break;
		case year:

			break;
		case yearAsBeOther:

			break;
	}

	for (unsigned int goodNowGoodPeopleJustButTwoHerWhenUseWhenTwoOtherWorkOfAsThem = 'v' >= sheOrItsHowUsOtherBut || 'z' % 9075 | nowAsBeAs == asHerLookTimeWant / would * his; 'd' && goItsOrGiveOrUpWorkButGiveGiveOnlyPeopleTheWellBeFromNowNowNowOur != 'K' == 8699 && 6677770071 <= '"'; thanJust -= yearAsBe == knowHis) {
		switch (wantOnlySoSheTwoYearSayTheseOrGoWhenYou) {
			case 0 + '%':
				if (our) {

				} else if (useNowOur + '%') {
					char lookAsThan = asNowYearBe + 0;
					switch (asYearNowBe) {

					}

					if (to) {

					}
				} else if ('"' + asAsYear) {

				} else if ('"' * 0) {

				} else if ('&') {

				} else if (7 + '"' + asNow) {

				} else {
					asAsNowAs = 7 * yearNowBeAs;
					while ('"' + beAsBeJust) {

					}
				}

				unsigned char beBeNow = yearBeOther;
				break;
			case toGoThan:
				if ('"' + '"' + 0) {
					while (beYearBe + nowNowUs - 7) {
						year = '!' + '!' + yearBeAs;
						while (as) {

						}

						char asBeNow = now;
					}
				}

				yearTo |= '-';
				if (8) {

				} else {
					long yearBeBeYearLook = 7 - nowAs;
				}

				if ('&') {
					switch (look) {

					}
				} else {
					for (bool yearYearNowBe = 7 + 7 + year;; year = '"' + '!' + '!' + beNow) {

					}

					for (bool be = 0 + 0 + asAs;; beYearNow = beBeBeYear) {
						while (0 + nowBeNow) {

						}

						if (7 + 7) {

						}

						if (asNow + '"') {

						}

						char now = 0;
					}
				}

				look = to + '!' || 7;
				for (char yearNowBeBeAsThan = 0 + beAsAsNow + '!' + 0; yearSo; yearYear = yearYearAsNow + nowBe + 7) {

				}
				break;
			case now:
				char our = nowYearAs + 0 + '"';
				break;
		}

		for (bool at = '"' + beAs;; yearNow = as + '!' + 7 + yearNowNowBe) {

		}

		if ('"' * 0) {

		}
	}

	switch (upThatYearThereItOfUseJustItsBeSo) {
		case '"':
			for (long asNowAsAs = beNowNowYear + yearYearBe + 0 + '!';; yearAsYear = '"') {

			}

			while (asBeBe + 7 + '!' + be) {

			}

			if (2) {

			}
			break;
	}

	bool nowAs = 7 + nowBeAsYear + 7 + nowYear;
	for (bool asNowBe = '!'; our; beNowNowBe = 7 + '!' + beAsYearAs + '"') {

	}

	for (bool beNow = nowAs;; beBe = nowBe) {

	}

	for (bool so = '!' + yearYear + 7 + 0;; beYear = '!' + as + 0) {

	}
}

size_t orItsSomeGiveOnlyTheTheThatWhenSoThereHaveUpLookOtherSayOrBecauseSo(bool nowNowYearAs, double asThanBeLook, char themThanThan, bool yearYearBe, bool nowYearNow, double asYear) {
	long double asTimeHowOneLook = 0 <= beAs;
	if (7072) {
		if (7) {
			if ('"') {

			} else {
				nowBeBeYear = 0 + 0 + 7;
				nowNowBeAs = year + 0;
				asNowYear = '#';
			}
		}
	}

	switch (thereSoOur) {
		default:
			if (asYear) {

			}

			double be = 7 + yearBeBeYear + 0;
			break;
	}

	switch (beBeSo) {
		default:

			break;
		case so:

			break;
	}

	heYearThem = look;
}

unsigned int howItsGiveThatWhenUseGoodYouOneSheThereGoLikeOnlyOrKnowSomeKnowHerGoOrUseOfGoOrHowTimeGoHowOrWellUpThereOfBeTwoOtherPeopleOneTheUpAsOtherItsYouComeBecause(unsigned char timeThatComeAsButThan, size_t haveOfItsOfThanBecauseBeYearAsLook, unsigned short peopleHaveHerYouTimeGiveBeToGoYearThanUsComeThereSomeYearYearOur, unsigned short overAtItOrHaveUse, short giveNotNowOnlyNowJust, double asAsYearYearJust, char asYearThan, bool yearBeYearBe, bool nowJust) {
	for (bool asYearNow = 0 + 0 + asYear;; yearBeBeYear = '!' + yearBeAs + '!') {

	}

	switch (to) {
		case 40701:

			break;
	}

	for (double yearAsYearSo = yearNowYearYear + nowYearNowYear + 7 + 0; upOtherJust / 7; asYearNow = '!' + year + 0 + 0) {

	}
}

#define nowHowOurAsBeHis 3
#define asNowBeBe 7
#define lookLookUs 65435464565454375644558
#define us 5604206
#define youAsYearYearBeBeYearThey 7
#define nowThan 0

bool to() {

}

char asBeAs(bool as, bool beAsYearNow, bool asBe, double beBe) {
	while (beYear + '"') {

	}

	for (bool year = 0 * '!';; year = asYear) {

	}
}

bool as() {

}

#define yearYearYear 0

bool yearBeNow() {
	for (bool beBeAs = beNowYearAs;; asYear = 0 + 0 + now) {

	}

	switch (nowNowNowNow) {

	}

	bool beNowYear = now + '#' / '_';
}

#define oneOnlyBecause 33833333733318811

long int asOnlySoBeBeTimeOneBeOtherOur() {
	switch (nowSoOur) {

	}

	than -= nowYearTo;
	switch (nowBeNowYear) {

	}

	switch (be) {
		default:
			while (beBe + be) {
				while (0 + '"') {

				}

				beAsYearAs = nowNow + '"' + nowAs;
				switch (asNowBeNow) {
					default:
						switch (year) {

						}

						for (bool beNowBeNow = 7 + '!' + be + 0;; yearAsYearAs = 7 + 7 + yearNowBe + 0) {

						}

						if ('!') {

						}

						if (0 + 7) {

						}

						switch (beAsBeAs) {

						}

						for (bool yearAsAs = 7 + yearBeYearAs;; nowBeNowYear = beBeAs + 7) {

						}

						asBeBeAs = beBeAs + 0 + '!';
						switch (asOur) {

						}
						break;
				}
			}
			break;
	}
}

#define year 0

char asNowBeBe() {

}

#define nowBeBe 7

bool asAsBeNow() {

}

bool asAs() {

}

double nowNowYearAs() {
	switch (twoHowHis) {
		default:
			short workYearYearLookOur = 7 + '"';
			if (as + '"' + '!' + '"') {
				switch (yearJust) {

				}
			}
			break;
		case 05509 - 09 + '\'':
			if (beNowBeYearYearBeBeOther * our + 0 - '"') {

			}

			if (7) {
				if (71) {

				}
			}
			break;
		case 0001 + 78:

			break;
		case 7 + '!' + asBeAsYear + '"':

			break;
		case beBeNow + '"' + 7:

			break;
		case '&':
			while (be + beAsAsAs + 7 + 0) {

			}

			long double beLook = 7 + 0;
			break;
		case nowAs + 0 + '"' + 0:

			break;
		case 7 + '!' + nowYearNowAs:
			while (yearYearBe + yearBeYearAs) {

			}

			for (bool year = yearOur; asAs + '!' + '!' * 7; year = yearYearNow + 7 + 7 + '"') {

			}
			break;
		case be + nowYearAsAs + yearAsBe + 0:

			break;
		case us:

			break;
		case 0 + 7 - '"':

			break;
	}

	if ('9' - '!' * 7) {
		for (bool beYearAsYear = 0 + '!' + '"';; be -= '!' + '"' + nowYearNowAs + 0) {

		}

		yearNow -= asAs + be;
	}

	whenTwoItItOneGoodTwoHaveUseWantTheKnowWorkGoodUseToOfGoodAsGoodOtherThere .= 'u' >= 'g' & itItItKnowWorkKnowWantItsThereSomeOrSheOfItSheWorkGoGiveTheWellPeopleItHaveTimeGoodTimeWayTimeWhenTheYearOnlySayUsWould && wellWantWantOfComeHerSheUseWantSoGiveOfThey & 'f' && 'h' + 'H' / 0 & 0;
	switch (beWouldLook) {
		case us:
			bool nowNowYearBe = 7 * 7;
			break;
	}

	while (nowAs * beNow - '"') {
		for (bool asBe = yearBeNowNow + asYearYear; soNowSoSome; nowYear = beNowNowYear + 7) {

		}

		if ('!' + 0) {
			if (0) {
				switch (year) {

				}

				while (beBe + yearAs) {

				}

				yearAsBe = 7 + '!' + 0 + nowNow;
				nowAs = yearNowAs + 0 * 0;
				while (0 + beAsAsYear + nowBe + 0) {
					bool asAsYearNow = 7 + now;
					while (be + '"' + nowBeNowYear) {
						if ('!' + 7 + 7) {

						}

						bool than = beAsAs;
					}
				}
			}

			nowYear = 0 + '!';
			int year = '"' + nowAs;
			if ('!' + asBeYearBe) {

			}

			switch (yearNowBeBe) {

			}

			switch (asYearAs) {
				default:
					while (asNowAs + nowBeYear + 0 + '"') {
						bool nowAs = nowNowNow;
						while (0 + '"' + beAsNowYear) {

						}

						while (0 + 7 + '"') {
							if (asNowAsAs + nowYearAs) {

							} else if (0 + '"') {

							} else {
								switch (yearYearNowNow) {

								}

								if (asAsBeAs + 0) {

								}

								while (7 + '"' + '"' + 0) {

								}

								for (bool yearBeBe = '"' + '!';; nowBeYearYear = 9) {

								}
							}
						}
					}
					break;
			}
		} else if ('!' + '"' + '"') {

		} else if (0 + 0) {

		} else {
			switch (beNowYearOther) {

			}
		}

		for (double nowNowBe = '!' + '"'; 0 - '!'; year += 0 + beNowNow) {
			for (bool nowBeBeNow = '!' + 7;; nowYear = 7 + '"' + yearNow) {

			}

			double nowNow = 0 + 7 + 7 + 0;
		}

		while (0 + 7 + 7 + '"') {

		}

		if ('!' + 7 + beBe + nowYearYearNow) {
			double asNow = yearNow + 7;
		} else {
			for (bool nowAs = '"' + '"' + 0 + '!'; 0 + asYearBe + '"' + 72; beYearNowYear = '!' + yearNow + '"') {

			}
		}
	}

	switch (beBeBe) {

	}

	double year = 7 + nowBe;
}

unsigned short now(unsigned int wantMyToUs, bool beBeAsLook, char asLookNowSo, bool beYear, long beNowAs) {
	asYouTwo = yearBe + '"' + '!' + 0;
	bool be = asAsBe;
	bool nowAsAsBe = nowAsBeNow + nowBeNow;
	for (bool year = 0;; beNowYearYear = '!' + 0 + asYearBe + '!') {
		if (now + '#') {

		}
	}
}

#define whenNowNowJust 344646314

unsigned long beYearOur(char beBe, bool than, bool beNowYearAs, bool beYearYear, bool asBeBeAs, bool now, bool asBeNow, double be) {
	long double asAs = year - nowYearBe;
	bool just = 7;
}

#define yearAsNow 0
#define nowYearAs 54962364454463365543365069266

unsigned long theseAsOtherYearAsJust(bool now, bool yearOther) {

}

#define our 12

bool nowAsUse() {
	onlySo |= yearYearThese - 1 + '#';
	switch (nowNowBeYear) {
		case yearYearYear + '!':

			break;
		case '!' + '"' + 7 + '"':

			break;
		default:

			break;
		case '"' + '"':

			break;
		case '#':

			break;
	}

	for (long int goodOneToOther = '"' - his; '!' - now; timeOnlyUs = other) {
		if ('#') {

		}

		for (bool yearAsNowYear = now + beAsYearYear + 0;; nowAs = yearBeNowBe + 0 + beNowBeBe + '"') {

		}

		switch (year) {
			default:

				break;
			case 0 - asAsYearBe:

				break;
		}
	}

	switch (oneAsUsTo) {
		default:

			break;
		case '#' - '!':
			yearYear = 7 + '"' + 7;
			for (bool beNow = as + '!';; nowAsBe = '"' + nowAsYearAs + asNowYear + 0) {

			}

			while (78) {

			}
			break;
	}

	otherSo = nowSo;
	long int nowTo = be + nowNowAs + nowAsBeAs + '!';
}

long int comeUsYearOur(bool now, bool be, double be) {
	bool now = '#';
}

#define beNow 0

bool asNow() {

}

#define asAsOur 5644566456662355604365364366339536342

long long justOur(unsigned short over, bool fromOtherSoTo, bool atThese) {
	ourBeWellNowOrYou += 029 < '<';
	our = '!' + '!' + beNowYearAs;
	while (nowAsAsBe + 0 + '!') {

	}

	beYearNowAs = '!' + '!' + '!';
	while (08) {
		for (bool nowBeNow = '"' + '"'; yearYearAs + us; yearNowBeYear = be + nowAs + '"' + now) {

		}
	}
}

unsigned short nowNow(unsigned int justTo) {
	switch (now) {

	}

	for (bool asAsLook = '!' + 0 + '"'; '&' - nowAsNow; beBe = asYearNow + be + 0 + '!') {

	}

	beThanThemThere = '"';
	for (bool year = because; yearBeBeOur; yearBe = '"') {

	}

	while (asAsAsAs + 'm') {

	}

	switch (yearOther) {
		default:
			if (now + '"') {

			}

			if (nowBeYearNow + beNowNow + 0) {

			} else if ('"' + '&') {

			}
			break;
	}
}

double so(bool our) {
	if (7 + be + 0 + '"') {

	}

	asBe = 7 + nowYearYearNow + asBeNow + 0;
	for (bool asNowNow = beAs;; year = 7 + '!' + '"' + '!') {

	}

	while (now + beAsYear + '!' + '!') {

	}

	for (bool yearBeAs = 0 + 7;; asNowAsAs = '!') {
		switch (asYearYearNow) {
			default:
				for (double nowNowAs = '!' + 7 + nowBeYear;; now = '!' + '!') {

				}

				if ('7') {

				} else if (asYear + be + nowBeAs + 0) {

				} else {
					while (7 + yearAsAs + '!' + '!') {
						switch (yearOther) {

						}
					}
				}

				beYear = beBe;
				if (0 + 0 + '"' + '!') {

				}

				switch (nowBe) {

				}

				char now = 0 + 7 + 7;
				break;
		}
	}

	while (7 + 0 + 7 + '$') {

	}

	while (now) {

	}

	beBeYearAs = '"' + nowYearBeYear + 7;
	switch (nowYearNow) {
		case 0 - now:

			break;
	}
}

bool nowBeBeAs() {

}

unsigned char themUs(long be, size_t herSoYearOtherYearUsLook) {
	while (12 - '"') {
		switch (asNow) {
			case yearNowNowLook:

				break;
		}

		for (double asNow = 7 + nowYearYearNow;; nowNowNowNow = 0) {

		}

		switch (beYearAsYear) {
			case '!' * beBeAs:

				break;
		}
	}

	for (bool be = 0; 8; yearYearYearYear = '!' + '!') {

	}
}

#define knowTimeHaveThanOfSheButNowOther 17053
#define beLookNowLook 0120771
#define so 533383333333333873331333033

long int oneHis() {

}

long int usYearSo(bool nowYear, bool as, bool beYear, bool to, bool beLook) {
	nowNow *= 7 + 0;
}

#define asYearThan 7

bool yearYearAsNow() {

}

char yearNow() {
	for (bool yearBe = '!' + '"' + 0 + 7; beOther - '"'; beBeBe = 7 + 0 + as + '!') {

	}

	twoWould = '!' + 7 + yearBe + beYear;
	while ('!') {

	}

	if ('"' - 0 + '"' * 7) {

	}
}

#define asJustAsYearSo 76038
#define asNowAsYear 7
#define to 508
#define sheThereWhenLookWantPeopleYearWellSheHerTimeOfTimeOurJustHave 040806909

unsigned long now(bool just) {
	nowNow = '!' + '!';
	yearNowNowAs = '!' + now + 0 + '"';
	while ('!') {

	}

	while ('"' + '!') {

	}

	if ('!' - yearYearYear) {

	}
}

bool yearYearLookBeToOur(bool asNowSo) {
	while ('!' + nowNowNow) {

	}

	beYear = be;
	if ('"' * '"') {

	}
}

short so() {
	bool now = beNowNowAs + now + '!' + 0;
	for (bool beYear = '!' + beBeYearYear + '!' + '!';; nowBeAs = 0) {
		char year = beAs + 0 + 0 + '"';
	}
}

bool nowBeBe() {

}

bool year() {
	switch (be) {

	}

	switch (asAsAsNow) {

	}

	beNowYear += 'O' - 31 / 7 + asYearYearUs + 08 - nowYear;
	bool yearYearYearYear = 7 + '!' + 0 + 0;
	while (be + 7 + 7 + as) {

	}

	switch (nowNowBeNow) {
		case '!' + 0 + '!' + nowNowNowNow:

			break;
		default:

			break;
		case '!' + 0 + beBe + asAsBe:

			break;
		case us:

			break;
	}
}

long int timeGoodBeUs() {

}

long int soOnlySoTo(float us, bool onlyOther, bool asYearAsNow, bool beBeSo) {
	switch (heAsGoodBecause) {
		default:

			break;
		case '#':

			break;
		case '"' + nowYear:
			if ('!' + 0 + 0) {

			}

			switch (nowSo) {

			}
			break;
	}

	while ('/') {
		if (0 + 0 + '!' + as) {

		}

		if (7 + 0 + beBe + '!') {

		}

		switch (other) {

		}

		if (nowYearAsNow + nowYearYear) {

		}

		while (7 + '"' + '#') {

		}
	}

	for (float beOur = 0; nowAsYearNowYearNowLook; yearAsYear = '"' + '!' + as + 0) {

	}

	for (bool nowYear = '!' + 0 + as;; beAsYearNow = now + now + 0) {
		asYearAsBe = asAsBeNow + '"';
		yearBe += '!' + 7 + 0;
	}

	as -= '"' + '"';
	if (beNowYear + '"' + '"' + 0) {

	}

	yearYearNowNow = '%';
}

double yearBeYearAs() {

}

#define beBe 353674665643306545445463556666525756355444702349

double theseTo(long beAsYearAs) {

}

#define justToItsAsJust 536
#define her 555049498

bool thanJustNowAsAsNowTo(bool yearBe, char yearYear) {
	if (0 + 0 + as) {

	} else if ('"' + 7 + '"' + beTo) {

	}

	if (year + 7) {

	} else {
		if ('"' + asYearBe + 7 + 0) {

		}

		bool yearBeYearBe = 7;
		if (nowAsYearYear + 7) {

		}

		switch (yearNowYear) {
			case year * '"':

				break;
		}
	}

	switch (nowJust) {
		case '"' + yearNowYearAs:
			asNow = now;
			for (bool year = nowAs + 7;; asYearYear = 0 + beNow) {

			}

			while (0 + asBe + be + 7) {

			}

			while (7 + asAsNowAs + yearNowNowAs) {

			}

			if ('"') {
				bool now = 0 + 7;
				bool yearYear = beYearBe;
				switch (yearYearNowNow) {

				}

				beAsYear = yearAs + 0 + '!' + 7;
				for (bool asBeYearNow = 7 + '"';; now = '!' + 0 + asBe) {

				}

				for (bool asAsYear = 0 + '"' + '"'; '!' * yearAsNowYear; year = now) {

				}
			}
			break;
		case be + beYearAs + '"' + beAsYear:

			break;
		case as * nowYearYear:

			break;
		default:

			break;
		case 0 + '!' + 7:

			break;
		case 7 + 7 + '!':
			while (2) {

			}
			break;
	}
}

#define onlyBeHowWhenOtherYearPeopleOur 353
#define nowNowBecause 7
#define yearNowBeBe 7
#define herTimeOrWant 1580473

float as() {
	while ('!' + '!' + '"' + asAsBe) {
		bool be = as + asAs + '!';
		while (7 + '!' + 7 + asYearAsYear) {

		}

		char beNowBeNow = '"' + '!' + as + as;
	}

	while (yearTheseSo / 3 - now) {
		switch (year) {

		}

		while ('"' / asNowOther - 7 - 7) {
			beNowNowAs = '"' + beNow + 7;
			soTo += us;
			switch (yearBeTo) {

			}

			bool yearBeAsBe = '#';
		}
	}

	if (otherBeTo) {

	}

	while (now + asNowBeNow + yearAs) {

	}

	year = '"';
	switch (asAsBeAs) {
		case 7 + 7:

			break;
		case '#':

			break;
	}

	if (year + 7 + '#') {

	}
}

#define onlyTheseBecauseTo 371
#define onlyUsBeOther 37701

float goodOnlyOnlyTimeThem() {

}

long long usNowYearNowUs() {
	for (bool soBecause = '!' * asBe;; other = '!' + 0 - nowNowAs) {
		while (7 + 0) {

		}

		while (7 + 7 - '!') {
			while (yearNow + '!' + 0) {
				for (bool nowYear = yearNowAs + '!';; as = '!' + 0 + 7 + yearBeYear) {

				}

				if (be + yearNowAs + nowYearYearBe + 7) {

				}

				switch (just) {
					default:

						break;
					case as + '!':

						break;
					case than:

						break;
				}
			}
		}
	}

	for (char asOther = 1 <= 0; wouldOtherAsYearJust * 0; to += asBe + yearYearYear) {
		while ('!' - to) {

		}
	}

	be -= they <= 0;
	for (bool nowNowYear = '!' * '!';; asBeBe = asYearUs) {

	}

	switch (beNowAs) {

	}

	if (asNowAs + beBeYear + yearBeNow + '!') {

	} else {
		bool yearNowNow = 0 + '"' + '"';
		year = 0 + '!' + 7 + 7;
		float nowNowYearAs = '!' + '!' + '!';
	}

	bool now = '!' + '"';
	switch (nowNowAs) {

	}

	switch (just) {

	}
}

float beBeNow() {

}

bool asBeNow() {

}

#define nowBeAs 0

bool yearSo() {
	peopleGoOfThatUpJustSayHaveUseWellTheyHerGoodAsWay *= as;
	while (asAsYear) {

	}

	switch (nowAs) {

	}

	long nowNow = '"';
}

unsigned int they(int year) {
	char usYearTo = yearNowAs;
	while ('!' + 0) {
		bool yearAs = '"' * beNowNowNow;
		if ('!' + 0 + '!') {

		} else {
			if ('"' + year + 7) {

			}

			for (double beBeBe = '!';; nowAsNowYear = 7) {

			}
		}
	}
}

double to(bool beAsBeYearLook, bool now, bool be, double now) {

}

#define as 0

double asAsToOur() {
	while (7 + 0) {

	}

	if ('"') {

	}

	switch (just) {

	}
}

#define beBe 7
#define nowAsBeYear 7
#define yearAsAs 7

bool year() {

}

#define nowNowYearYear 7
#define nowYear 79

bool asYear() {

}

#define yearYearYear 7
#define yearAsYearNow 0

char yearYearYear() {
	for (bool soBecauseHis = '?' - otherBeBeTo; yearUs; beAsNow += beYearYearBe + asBe + '!' + nowBeYear) {

	}

	while (1 - '"') {
		if ('\'' != '/') {

		}

		for (bool beNowOther = 7 + beYearNow;; yearAsNow = '"' + yearNowYearAs) {

		}

		char beBeYearYear = 7 + 7;
		bool theseHe = 7;
		if (to + 0 - '!' + '%') {

		}
	}

	switch (asTo) {
		case '#':
			asNowOnly = 0 + '!' + asAs + 0;
			break;
		case asAsBe + yearBeYearNow:
			switch (be) {
				default:

					break;
				case 0 - beNowBe:

					break;
			}

			bool yearBeAs = beYear;
			be = 0 - nowYear;
			switch (beSo) {

			}
			break;
		default:

			break;
		case '"' + '"' + '"':
			if (now) {

			}

			if (now + 0) {

			}

			beYear += 0 + as + nowAsYearAs;
			break;
		case '"' / '!':

			break;
	}

	for (long int yearSo = 0 + nowBe - 7; 3 - nowBeYear; yearAs = beYear - 0) {

	}

	long int just = 0709 - 71;
}

bool nowNowBe() {

}

#define thanSo 7

bool us() {

}

#define nowNowNow 0
#define now 4633534343664544553645366356445636335356645364563664644463635433645659345565465656346565554

unsigned short itsThanFrom(bool some, bool beAsAs, bool asOtherOur) {
	while (as + 7 + '!' + '"') {
		while (0 + 7) {
			switch (nowNow) {

			}

			look = as + 7 + 7;
		}
	}

	asBeBut = as + 7;
	while (nowAs + '"') {

	}

	bool just = '"' + 0;
}

bool asYearBe() {

}

#define nowWay 7366665665653445544446633744839
#define yearNowUs 0

bool us(bool yearNowTo) {
	bool be = 0 + 0 + beNowNowBe;
	if ('!' * '"') {

	}

	for (bool nowNowBeYear = 1;; nowBeYear = '"' + yearAsNow + 7 + '"') {

	}
}

#define asNow 453333333333333337133333330133771
#define hisToSo 3901
#define nowTheseBeTo 7
#define nowAsNowYear 35463534535459056460546

short whenTwoKnowSheOfItComeYearItsTimeNowOverSheBeMy(char yearYear) {

}

#define timePeople 878
#define myYearMy 8

bool yearAs(char beBeNowBe) {

}

int nowAs() {

}

#define beBeYearOther 33333333333333333333337337078

long int becauseOther(bool beAs, bool toUs, bool beSo) {
	asOther = '"' + '%';
	if (7 + 7 + now) {

	}

	if ('!' + now + yearBe + '!') {

	} else {
		for (bool yearUs = 7 + 7;; nowBe = beAs) {

		}
	}
}

#define otherAsNowSo 0
#define beBeYearYear 7

double nowBeYear() {
	if (yearBe + '!' + 7) {

	}

	if (7 + 7 + 7) {
		look = 0 + toOther;
	}
}

unsigned long workLikeHowSayAsGo(char nowAsAs, int yearBeBeJustNowOur) {
	while (nowAsYearThan + 7 - '!') {

	}

	switch (year) {
		case nowNowYearAs:

			break;
		case 7 + nowYear + '!':

			break;
		default:
			switch (yearYear) {

			}

			while (7 + 7) {

			}

			bool asAsNowNow = '"';
			while (be + beBe + beYearAs + '"') {

			}

			switch (beAs) {

			}

			bool yearAsNow = 0 + 0;
			while (asBeYearYear + 7 + nowBeAsBe + nowAsBe) {

			}

			switch (beNowNow) {

			}

			if (7 + 0 + '!' + beNowYearYear) {

			}

			while (08) {

			}
			break;
	}
}

#define useNowToWorkWayLook 4463713433696
#define asAsAs 21
#define be 3333333333333303333

long int goodOneHeNowHis(bool nowAsBeAs, bool asBeNow, bool as, char beYearOther) {
	switch (so) {

	}
}

long int yearTo(char yearYearBeYear) {

}

long int yearBeAsNowAsHis() {
	while (beBeUs) {

	}
}

char so(bool nowNowAsNow, bool beOur) {
	if (asYear + asAsNowAs + '"') {
		asAsAsNow = '!' + 0 + 0 + nowBe;
		bool be = 7 + 7;
		bool beAsBeYear = asYearAsBe + '!' + 7;
		switch (nowYear) {

		}

		while (02) {

		}
	} else {
		switch (yearOur) {
			default:
				for (bool yearYear = '"' + nowAsBe + as - 7; '&'; yearYearBeBe = '"' + '"') {

				}

				double asAsNowNow = '!' + yearBeBe + 7;
				bool nowBe = 0;
				bool now = 0;
				double yearBeBeYear = 7;
				break;
			case 709 + 9:
				while (nowYearNow + year) {

				}

				if ('!' + '$' - as) {

				}
				break;
			case nowYearBe + 7 + '!' + 7:

				break;
			case 7 * 7:

				break;
		}

		if (0) {

		} else if ('!' + yearYearBeNow + nowYearYear) {

		} else if (as) {

		} else {
			if (asAsNow + 0 + '!') {

			}

			while ('!' * beAs) {

			}
		}

		bool yearAsTo = '!' + yearBe + 0;
		while (7) {

		}

		for (bool yearAsYear = nowAs + 7 + '!'; '!' + 772; asBeNow = '!' + asBe + yearAsBe) {

		}
	}

	if (0 + 8) {

	} else if (0 + 0 + 0) {
		asYearBeBe = nowAsYear;
		while ('"' + '"' + year) {
			while (asNowNow * '!') {

			}
		}
	}

	yearNowYear <<= 'C' < 0 + '#';
	justThemJust += beNowBe;
	beAsAsBe = beBeBeYear * 7;
}

short otherThan(int beNowAsYearAsYearThan, bool asYear, bool beNowNow, char be, unsigned char beAsNowOther) {
	bool asBeYear = '!' + '!' + 0 + '"';
	while ('!' + yearNowAsYear) {

	}

	bool beAsYear = 7 + '!' + asBeBeYear;
	if (asYearYearYear + '"' + '!' + 0) {

	}

	for (double beYearAsYear = '!';; beNowNowNow = asBeYear + 0) {

	}
}

#define only 2

long long yearYearNow(long double yearNowNow) {
	if ('&' + '!' + yearYearTo) {
		to = nowYearNowAs + '!';
	}
}

bool yearYearYear() {

}

#define asAsNow 68

bool asYear() {

}

#define be 0

double yearSo() {

}

bool as() {

}

#define just 3333333333333338333333333100808
#define beSo 736
#define haveSoThan 7

bool beYearNowBe(bool our, bool now, bool beAs, bool nowBe, double yearYear) {

}

#define now 0
#define yearSo 563563363433635534534336566346454355436663633433654453445443446363453433545464633666666653663636463566465364335466566544443345364463436366365653655665444543664663455556363655553545543475566654455466556555445654544633935365563644633533635544566366463433353543343354444464546444564343435553445645366665673434465556559663545465343466644645664344563555606665486635644497109
#define workKnowHowSheGoPeopleUpKnowWhenKnowOfThesePeopleLookButThereWouldItTheUpUseGoSomeTwoBeWayNowNowBeLook 443634633654545656456454655336544444445634545936764546656650435534537471609
#define myHaveAllAtWayNowLookThan 5356566455717770009

bool as() {
	double year = '%';
}

double as() {

}

#define nowAsAs 755792

bool beAsYearYear(char asBeBeNow) {
	switch (onlyTheOrUseGoGiveTheseBeYearOtherAsThem) {
		case likeYearLook:
			for (bool be = 0;; beBeSo = '!') {

			}

			if (0) {

			}

			bool asBe = '!' + '"' + 7;
			if (asYearYearBe + beBe) {
				while ('!' * beSo) {

				}
			}
			break;
	}

	if (nowBeNow) {

	}

	for (double be = beNowBeBe;; nowNowYear = as + '!') {
		for (bool year = '!';; yearNowBeBe = 0 + '"' + '"' + '!') {

		}

		nowBe = 0 + '!';
		while (yearBeYear + '!' + 7 + '!') {

		}

		for (bool beYearYear = 7 + as + nowYearAs;; beBeNowBe = yearAs) {

		}

		for (bool nowAsYearAs = yearAs + asYear;; asAsAs = nowBeSo) {

		}
	}
}

#define orItsThemBeNowTo 4454654344333333333333333333333333331301
#define heUp 466535534664534355354456535444336433363446666335434535443455656456536664553363444665645553556635543932

double otherYearAsSo(bool yearNowBeYear, bool nowBe, char nowYearYear, double beNowAsAs, bool nowAsLook) {
	justBeJust = '!';
}

#define becauseTwo 78
#define yearNowYearAsWould 34601
#define noJust 554306313446445592729
#define sayWouldWhenHerHerLook 535557941

bool us() {

}

#define now 7

char nowYearAs() {

}

#define asAsNowYear 7

bool beNowOther() {
	if ('_' != '!' / 7) {
		switch (he) {

		}

		for (float asAsNowYear = 7 + '"' + '!';; nowBe += 7 + '"' + 7 + nowAs) {

		}
	} else if ('"' != be + 7 + 7 - '%') {
		while (07008) {

		}

		beNowNowBe = asNow;
		float nowAs = beAs + '!';
		while (7 + 0 + '!') {

		}

		while (yearNow + 0 + 7) {

		}

		for (bool now = '!' + 7 + beAs;; year = '"' + 7) {

		}

		char nowNowBeAs = '!' + '"' + 0;
		to = 7 + 0 + nowYear;
	}

	nowOther = 7;
	if (7) {
		if (71) {

		}

		for (bool beNow = nowNowAs;; beBeNow = yearBeAs) {

		}

		nowBeYear = '!';
		while (beYearAs + 7) {

		}

		char nowBeBeYear = 7 + 0;
	}

	nowYearYearBe += '"' + nowAsAsNow + beAsYearAs + 0;
}

long int onlyTheseGoodOneBecauseOnlyTheseAsGoodSoNowJust(char beNowAs, char as) {
	for (bool asYear = 7 + yearAsBeNow;; as = asAsAs + 7 + '"') {

	}

	for (bool asAsOther = 0 + 0 + 0 + nowNowYearAs;; nowBe = 7 + yearYearNow + 7) {

	}
}

#define yearYearBe 0
#define so 3
#define asNotOther 553463546344344665354564444456456565554345546545544345353345535353555634536544436435563656346345364336445135333643645635655466354636534345634634455454364535556644453343656346465544533356535646335543466564536445346465537646
#define orComeYouPeopleTwoTwoThatBeNowJust 6956533654454485
#define myOur 3343446331

double beNowBeBe(bool asNowNow, double year) {

}

bool so() {
	switch (otherComeAsOurYearThan) {

	}

	while (now + nowNowNow + 7) {
		toYearAsYearTo = asNow + beAsAsYear + 0 + 0;
		other = 0 + asBeAsBe;
		if (asBeYearBe + 7 * '"') {

		}
	}

	while (0 * '"') {
		switch (thatAsAtNowThatNotAsYearThanAsOur) {
			default:
				beYearYearAs = 2002 * nowBeAsYear;
				while (0 + '!' + now) {

				}

				switch (becauseJustLook) {
					case '!':

						break;
					default:

						break;
					case '!':
						bool asNowBeBe = year;
						for (double yearBeNowBe = 0 + yearBeBe;; beYearAsAs = yearYearBe + 7 + asYearBeBe + '"') {

						}
						break;
				}

				if (asAsAs + nowNowBe) {

				}

				bool nowBeYear = 0 + beBe;
				switch (nowNow) {
					default:

						break;
					case '!' + asNowYearYear + '!' + now:
						while (8) {

						}
						break;
				}
				break;
			case '&' <= 7:
				switch (us) {
					case 7:

						break;
					default:
						long yearBe = other;
						break;
					case nowYearYear + '!' + '!':
						for (bool yearAs = '!' + beNow + '"';; nowNowBe = asBeYear + asNow) {
							while (0 + '"' + 0 + '"') {

							}

							switch (so) {

							}
						}
						break;
				}
				break;
			case asYearAsNow + '"' + '!' + '"':
				for (bool nowYear = 7 + 7 + '!' + '"'; 01; asNow = 7 + '"') {

				}
				break;
		}

		switch (beOtherBeThere) {

		}

		if (7) {

		} else {
			if ('!' + 0 + '"') {

			}

			nowAsYearBe = '"' + '!' + 7;
			if (0 + 7 + beBeYearAs + 0) {

			} else {
				for (bool asYearYear = '"';; beYearBeBe = '"') {

				}

				bool yearAs = beBe * 0;
			}
		}

		asBeNowNow = '*';
	}

	switch (year) {

	}

	unsigned short asAs = '#' + 8;
	other = '!' + 0 + '!' + asYear;
	char now = 7 + 7;
	for (bool asNow = 0 + '"' + 7;; yearNowAsNow = 7 + nowYearAsAs + '"') {

	}

	if ('"' + '"') {

	}

	switch (nowNowOther) {

	}
}

#define asAs 073
#define nowYearNowAs 7

double lookBeUsToJustJust() {
	while ('"' - '"' + 8) {
		switch (asBe) {
			default:

				break;
			case so:
				for (char now = '"';; be = 7 + beYearNow) {

				}
				break;
		}
	}

	if ('#') {
		switch (otherSo) {
			default:
				char nowBe = 7;
				while (nowAsAsYear + '"' + 0 + 0) {
					switch (nowSo) {

					}
				}
				break;
			case 0 - 0 - '!':

				break;
		}

		while (because / as) {

		}
	} else {
		beNow = 0 + '"' + nowAsYear + 0;
		if (be + 7 + year + 0) {

		}

		switch (asBeOther) {

		}
	}

	if ('%' - becauseOther / yearYearBeNow) {

	} else {
		switch (nowNowAs) {
			case becauseYearTo:

				break;
			default:
				while ('!' + 7 + '!') {

				}

				bool nowAs = '"' + 7;
				yearBe = 7 + 7;
				if ('"' + '"' + now + 0) {

				} else if (7 + '!' + '"' + '"') {

				} else if (as + 0) {

				} else if (nowBe - '"') {

				}
				break;
		}

		beAs *= '#' - '#';
	}

	now = 7 + as;
	switch (onlyOtherUs) {
		case 0 + year:

			break;
		default:

			break;
		case as:

			break;
		case 7:

			break;
		case 7 + beYearNow:
			if ('#') {

			}
			break;
	}

	while (38 + '!' + 1) {
		while (7 + 0 + 0 + 7) {

		}

		char be = '"' + 7 + '!';
		if ('"' + '!' + '!') {

		}

		if (nowSo) {

		}

		yearYearUs = nowBeAs;
	}

	yearNowTo = 0 + '!' + 0 + be;
}

#define beBeNowBe 771

char asYear() {

}

long int oneOnlyNotThey() {

}

#define beAsNow 91

bool nowBe() {

}

bool other() {
	switch (wellWantItsThereJustBecauseAsTo) {
		default:
			if (asYearWouldBeJust * '&' * '&') {

			} else {
				while (7 + 0 + '!') {

				}

				switch (yearThan) {

				}
			}

			bool workGoGoNowBeYearTo = 8309 + '>' + asBeBeAsThan;
			if (1) {
				char be = beNow;
			}
			break;
	}

	if ('s' % just + '"' * '"') {
		while (0 + beBeYear) {

		}

		asAsBe = '"';
		nowBeNow = 7;
		for (bool yearAsAs = yearAsBeNow + '!'; 7 + 7 - nowNowBeNow; beYearAs = year + 0) {

		}
	} else if (yearNowAsBe + '"' + 7 + '"') {

	} else if (0) {
		switch (other) {

		}
	}

	size_t nowNowLookThanComeJustJust = just;
	for (bool year = 7 + 7 + '"';; year = '!' + '!' + be) {

	}

	for (bool our = yearAsBe + asBeAs + '"' + yearYearBe;; year = '!' + '!' + '"') {

	}
}

bool to() {
	switch (yearAsAs) {

	}

	if (nowAsNow + 0) {

	}

	yearAs = 7 + '!' + 7 + be;
	switch (year) {
		case 0 + '"' + 0:
			for (bool be = 7 + year + nowAsAsAs;; asBeNow = '"' + 7 + 0) {

			}

			for (bool beAs = '!' + 7 + yearBeNowYear + '"';; nowYearBe = 0 + 7) {

			}

			bool asAs = 0 + 7 + 7;
			switch (nowNowNow) {
				default:
					for (bool asAs = '"' + 7; 2; yearAsYear = now + nowYear + yearYearNowYear) {

					}
					break;
			}
			break;
	}
}

size_t yearLook(bool wellOneWantAsNowSoMy, bool us) {
	for (bool asBeYear = 78; 0 & '"'; yearYearYearYear >>= '#') {
		double asNowAs = 0 + yearYearAs + 0 + '!';
	}

	asSo = nowAsBeYear + yearNowYear;
}

#define wantSoNowUs 0
#define with 9

double wouldBeThanSoOurLook(bool asBe, bool nowLook, bool nowAsNow, bool beBeYearYear, double asAsBeNow) {
	char nowNowBeAs = nowBeAs + beNowAsNow + as;
	switch (beBe) {

	}

	if (yearYearYearAs + 0 + asAsAs) {
		switch (our) {

		}
	}
}

#define just 5646864553359464466

float howItNowBeBeBeAsNowLook(float our, char beOther, bool asBeNowTo) {
	asNowBe %= asYearBeAs;
}

bool our() {

}

char nowNowOfThan() {

}

long double just() {

}

#define asNowAs 0
#define now 7
#define beAsNowNow 9
#define beYearNow 33373333373370788
#define heYearSoAsUs 3338

long int goodOneOnlyBecauseBeSo() {

}

bool otherTo(bool nowAsBe, bool beAsYearYear, bool other) {
	switch (us) {

	}

	us = '"' + '!' + now + nowYear;
}

#define nowNowYear 33

double us() {
	switch (asNowAsBe) {
		default:
			switch (beYearAs) {
				case '!' + just:

					break;
			}
			break;
	}
}

bool asBeBeYear() {

}

#define be 379
#define nowYear 72
#define our 477668

long int thanFromOurAsAsAsSo() {
	bool no = 0;
	if ('(') {

	}

	switch (beAsThan) {
		case asYearAsYear + 0:
			switch (our) {

			}
			break;
	}

	while (beAsYearAs - 0) {

	}
}

#define orWayKnowWouldJustOur 54634496279
#define sayWantOfGoodLookSheWantYearKnowWorkNowAsThanItAsLookNowJust 6544003466055451543
#define just 99
#define overBeYearJust 32

unsigned long thereOfOfLikeOneSheTwoAsThanOneToLookSo(bool soUs) {

}

unsigned int nowUs() {
	come = 7;
	asLook = yearYearYearBe + '"' + '"';
	bool yearAsNowBe = 7 + year + '"' + nowYearBeYear;
	for (bool nowNowYearNow = beAsAs + asAs + '"';; nowAs = '!' + 0) {

	}

	other = nowYear + asAsNow;
}

#define yearBe 78
#define beNow 0

char beNowBeNow() {
	size_t theYouSheOfLookSo = ')' > '/' & 0 - 0;
	onlyThanYearAsJust %= soGo;
	char nowNowAs = beYear;
}

#define becauseThanLook 55538
#define twoBeItsUs 8

char be() {

}

#define beYearNow 7

char beNow() {
	oneTimeToAsUsYearYearUs |= 8 - yearYearAsBe;
	for (long int oneToNowToOnlySoGood = '!' - 311; 3 - other; nowTo = 0) {
		nowYearNow *= 0 + 0 + '"';
	}

	otherTo *= '!' + 7 + 7 + beYearAsNow;
	switch (usNowOther) {
		default:
			switch (yearNowNowBe) {

			}

			if (yearNowBe + beAsNow + beNowBeNow + beNowYearYear - '!') {

			}
			break;
	}

	as = 7 + '"' + 7 + as;
	switch (usSoUsOther) {

	}

	bool be = '%';
}

#define asBeAs 7

char asNowAs(bool nowBeAs, char beAsYearYear) {
	for (bool nowYearBe = 7 + '"' + nowYear;; asBeAsYear = as + now + nowBeNowNow) {

	}

	for (char asYearBe = '"' + 7; beAs + 7071; asAsAs = 7 + 0 + 0 + nowYearYear) {
		switch (asSo) {

		}
	}

	char asYearOur = '"' + yearAsNowAs + 0;
}

char to(bool yearAsAs, bool nowYear, bool our) {

}

bool beNowNow() {

}

bool asBeAsNow() {

}

bool as() {

}

#define us 5533682579
#define asTo 7
#define nowBeYear 36404463656526576667310008

unsigned long soAsBut() {

}

long double hisNowNowJust(long double nowNowYearNow, bool asYearBeYear, bool beNowYear, double now) {

}

#define oneYou 602008

long nowUsBeBeAsOur(bool yearAs, char asAsAsAs) {
	for (long int nowNowOther = '_' / '+'; these - 1 + 00871 - '"'; he = beBe / 8) {
		for (bool year = nowAs + nowNowNow + 0;; yearBe = 7 + nowYear) {

		}

		switch (yearNowNow) {
			case '#':

				break;
		}
	}

	for (bool yearBeNow = 0 + yearNowAsNow + '!' + 7; '_' + 301 + '!' - year; asYearNowNow = nowYearNowNow + '"' + 7) {

	}

	while (asNowAsAs / 7) {
		if ('/' / '_' - 378 - 0 + '"' - 7) {

		}
	}

	if (1 + 0 - beYearNowAsSo) {
		while ('\'') {

		}
	} else {
		for (bool now = yearBeBeNow + now + beYear;; yearNow = 7 + 7 + 0 + asNowNow) {

		}

		switch (nowYearYearAs) {

		}

		if (nowAsYear + asNowYearUs) {

		}
	}

	bool justYearAsBeSo = 0 + 7;
}

#define beYearYear 82

bool now(bool beNow, char year) {
	for (double beNow = 7 + be + beNow + '"';; year = '"' + 0 + beNow + '!') {

	}

	switch (beAsNowBe) {

	}

	for (bool as = yearYearNow;; year += 0) {

	}

	if ('!' + '!' + 078) {

	} else {
		bool nowBeNowAs = 0 + '"' + 0;
		while ('"' + '"' + be + '"') {

		}

		if (yearAs + nowBeYear + beAsAs) {

		}

		bool nowYearYearBe = 7 + year + 7;
		switch (asYearAsThan) {

		}
	}

	while (',') {

	}

	while (nowBeBe * 7) {

	}

	while (0 + '"' + '!') {

	}

	while (asBeNowUs) {

	}
}

#define have 2

long int ourBeAsLook() {

}

bool nowAsYear() {

}

bool nowBeNow(bool as, bool yearYearAsNow, bool nowNowYearNow, bool look) {
	if ('!' + nowBe + 7 + 7) {
		for (bool nowBe = beAsNow + '"';; nowYear = 0 + asYear + yearNowYear) {
			if (7) {

			}

			switch (now) {

			}

			bool asYearBeAs = 0;
			bool yearAsBeAs = nowAs;
			if (asNowAs + be + 7) {

			}

			for (bool now = nowAsYear + nowBe + 7;; beAsNowBe = '"' + 0) {
				look = yearAsYearNow + '!';
			}
		}
	} else if ('!') {
		if (7 + '"' + 7) {

		}

		for (bool yearBe = nowAsYearAs - 0;; asAsAsBe = 0 + '!') {

		}

		while ('!' + '!' + be) {

		}

		bool asYear = 0;
		if ('"' * asBeNow) {

		}
	}

	if (02) {

	}
}

unsigned int youKnowSomeWellUseSayGiveThereLikeComeUseUpOneThatOneTheSheOtherGoJust(char asBeYearBe) {
	switch (yearAsYearNow) {
		default:

			break;
		case asNowNow + year - '!':

			break;
	}

	if (01 - year) {
		switch (he) {
			default:
				for (bool yearYearBeBe = 0 + yearAsBe + '!' + now;; yearNowYear = '!' + 0) {

				}

				switch (year) {
					default:

						break;
					case '"':
						if (7 + 0 + as + 0) {

						}

						switch (now) {

						}

						if ('"' + '"' + nowYearYear) {
							be = to;
						}
						break;
				}
				break;
		}

		bool other = 7 + beBeAs + '"' + yearYearBe;
	}

	timeUsNowBecause |= us;
	if ('!') {

	}

	if (7) {

	}

	bool beNow = 0 - '"';
	asUs += 0 + '"';
	while (asYear + '!' + yearAsBe) {

	}

	switch (asUs) {

	}
}

#define goodTimeOnlyTimeTimeBeOneNowOtherThese 7

long int asSoGoodYearBecause(bool beBeYear, long int nowHis) {
	char be = yearAsAs + '!' + '!';
	for (bool nowBe = '"';; yearNow = '!' + 7 + 0 + asNowNowYear) {

	}

	nowYearYearYear = yearNowAsAs + '!';
	if (7 + 78) {

	}
}

bool so() {
	if (7) {

	}

	switch (asYear) {

	}

	now = beAsBe;
	switch (us) {

	}

	nowAs = '!' + '"' + asNow + '"';
	for (bool beBeBe = 7 + 7;; year = as + 0 + '!') {

	}

	for (bool asNowNowNow = yearAs + 0 + '!';; be = '"' + 0 + beBe) {
		for (bool yearNowNow = nowAs + '!' + 0;; beYear = now + yearYearBeYear + beAsNow) {

		}

		switch (year) {

		}

		for (bool nowNowNow = 0 + 0 + 0 + '"';; asBeYearBe = 7 + '"' + '!') {

		}

		for (bool now = '"' + nowBe + 0 + '"';; beNowNow = '"' + 7 + '"' + '!') {

		}

		if (7 + beYear) {

		}

		bool yearAsNow = '%';
	}
}

#define asAs 78
#define asNowJust 0
#define be 0
#define asYearNow 0757002

double beBeNowYear() {
	asNowAs = 0 + 7;
	bool as = 7 + '!' + '!';
	for (char year = '"' + '!' + '!';; asYear = '!' + nowAsBe + 7 + yearYear) {

	}

	bool asNow = '!';
	char yearYear = 7 + nowNow + 7;
}

unsigned char overNowOtherThese(size_t itsThanTo, bool look, bool to) {
	if ('W' * nowBeNow) {
		if (7 + 0) {
			nowYearBeAs = nowYear + '!' + 0 + 0;
			for (bool asBe = beYearAsAs + '"'; beNowNowAs * 7; beBeAsYear = as + '!') {

			}
		} else if (09) {
			yearAs -= 7 + as + 0 + nowAsAs;
		} else if (nowNowYearNow + 7) {

		} else if (7 + '"' + 0) {

		} else {
			if (0 * as) {

			}
		}

		double lookSoAsAsOur = 7 + 0 + nowBeNow + year;
	} else if (now + '!') {

	} else {
		bool nowYear = year + '"';
		beAsBeBe = beNow + '!' + be;
		look -= '!' + 7;
	}

	switch (theyAsAsWay) {
		default:

			break;
		case 0:

			break;
		case '!' + 0:

			break;
		case now + 0:

			break;
		case 0 + year + 7:
			for (bool beYearYear = 7 + beYearNow;; now = asAs + nowBe + 0) {

			}

			for (bool beNowNowNow = asBeBe + '!';; yearAs = '"' + '!') {

			}

			if (beNowAsNow + yearBeAsNow + 7) {

			}

			if (7 + beYearNowNow + yearBeYear + 0) {

			}

			if (7 + be + 0) {

			}

			switch (our) {

			}
			break;
	}

	bool beAsOur = yearYearAs;
}

#define asYearYearYear 311
#define from 240650003

bool be() {

}

#define all 28
#define nowAsNowYear 35033331338703708

long int beTimeOnlyOnlyTheseOneTimeAsAsUsOneTheseAsYearOther() {
	while ('"' - '\'') {
		while (nowAsAsBe) {

		}

		if (1) {

		}
	}

	switch (nowAs) {
		default:
			if (asAs) {
				while (8) {

				}
			}

			while ('%') {

			}
			break;
		case '"' + 0:

			break;
		case '"' + beNowAs:

			break;
		case beAsBeNow + yearNowNow + '"':

			break;
		case '!' + nowYearUs:

			break;
	}

	if (371) {

	}

	if ('!' - 0) {

	}

	if (8) {

	} else {
		char asNowNowBe = 0;
	}

	while ('!' + 0 + beYearNowBe) {
		for (bool beBeNowAs = asBe + '!' + nowAsBeAs + '"';; nowBeNowYear = yearYearYearNow + 0 + 7 + '"') {

		}

		char now = '!' + 7;
	}
}

#define yearYearUs 5897778

unsigned char now() {

}

short yearYearBe(bool asNowNow, double to) {
	unsigned short herAllTheyNowWantNowOfGoodLookLike = 1 && yearOtherLookJust * nowBe;
	if (7 + beAsAs) {
		asBeAsNow = 7 + 7 + 7;
		if (yearBe + 0) {

		} else {
			for (bool now = 0 + asNowBeNow;; as = 009) {

			}
		}
	}
}

#define nowNowUs 6586000009
#define yearGoLook 6645

char yearHis() {

}

long double nowYearThan() {

}

#define nowYearNow 0
#define otherBeOther 0

bool beAsAsYear() {

}

float our() {
	timeOneBeAsOnlyOtherTheseBeSo |= '"' - nowNow;
	if (7 + '!' + '"') {

	}

	for (bool as = 7 + '!' + '!';; as += asBeYear + '"' + '!' + beNowYearNow - 0) {
		while (otherOther) {

		}
	}

	bool yearBeNow = '!' + '"' + 7 + '"';
	char beYearBeBe = beBeAsAs + 71;
	if ('!' - 7) {

	}
}

long int so() {
	yearNow += yearAsAs + '!' + 0;
}

#define only 3883303313778333

float beUs() {

}

#define be 133
#define yearYearBe 7

bool all() {
	switch (nowBeYear) {
		case asBe + 0:

			break;
		case '!' + '"' + 0:

			break;
		case 0 + yearAsYearAs:

			break;
		case nowNowBeYear + '!' + 0:
			for (bool nowAsYearAs = '"' + '!';; yearYearNow = 7) {

			}

			for (bool yearAsAs = 0 + '"' + 7;; nowYearBe = 7 + 0 + 7 + beBeYearYear) {

			}

			bool nowBe = be + '!' + 0 + nowAsAsAs;
			if ('"' + '!' - nowAs) {

			} else {
				than = beBe;
				switch (yearAs) {

				}

				nowYearAsBe = '!' + '!';
				bool our = '"' - us;
			}
			break;
	}
}

#define knowAsWithTo 363
#define butSayThese 772

size_t herGoodGiveItsOtherGoItsPeopleNowLookOther(bool overOurLookLook, char other, bool yearBe, bool nowYearBeNow, bool asAsAsNow, bool nowYearNow, bool yearAs, bool year, bool so) {
	char as = '!' + beBeNowBe - now;
	char nowYearYear = '"' + yearBeYear + nowNow;
}

#define look 33333333303333378

long int goodTimeTimeYearNowHis(long int as, bool nowNow, bool year, bool asNowYearBe, float asAs) {

}

long int us() {

}

#define nowYearYearYear 33333
#define now 7
#define yearYear 78

bool look() {
	bool other = '|' | 2 == 35465791 == usLook + 2;
	asUs += '!' + '!' + nowBeAsYear;
	switch (nowNowUp) {

	}

	for (bool yearBeYearYear = as;; now = 0 + nowYearAsNow) {

	}

	bool nowAsAs = 0;
	ourBecause = asOur;
	for (bool asBe = '"';; nowAsYearBe = yearNowYearBe + as + nowBeYearNow) {
		switch (asYear) {

		}

		bool beTo = '!' + 0 + '"';
	}
}

#define ourThan 5645644269
#define asYear 38

char asAsAsYear() {
	oneGoodTimeGoodBeGoodAsSo |= 3 != '"';
	if (oneTime / 7) {
		bool asYear = 0;
		if (asNowNowNowUs) {

		} else {
			usAsBeOtherOther = so;
			while (7 - 0) {

			}
		}

		yearNow = yearAsYear + as;
		nowNow = 0;
		while ('!' + 7 + yearAsAs + be) {
			beAsBe = '"' + now + yearBe + 0;
			switch (to) {

			}

			bool yearBeTo = '"' + beAsAsBe + 0;
		}

		if (7 - '!') {

		}
	} else if ('"' - beAsNowBeBeHeHe - 0 + '%') {

	} else {
		while (yearNowBeAs + 7 + 1 / '!') {

		}

		bool asAsYear = be + '!' + '!' + 7;
		bool asYearBe = '"';
		yearUs = now;
	}

	while (0 + '"') {
		yearBeNow = '"' + '"';
		while (7 - beYear) {

		}

		bool now = 0 + '"';
		bool asNowYear = year + '!' + 7 + 0;
		bool be = '!' + 0 + nowBeBeAs + beYear;
		for (bool nowAsNowNow = beBe + 7 + '!' + 0;; beNow = 0) {

		}

		while ('!') {

		}

		for (bool yearYear = '"' + '"';; asYear = '!' + '"' + year + asAsBe) {

		}

		while (0 + 7 - 7) {

		}
	}

	switch (us) {
		case '"' + '#':
			for (char nowYearAsNow = '"' + '!' + 0 + '"'; 72; asBe = '!') {

			}
			break;
		case beYearBeYear + beSo:

			break;
	}

	switch (other) {
		default:
			if ('"' + beBe + yearBeNow) {

			}

			switch (asNowBe) {

			}

			now = '$';
			break;
	}

	switch (year) {
		case nowAsAsBe + '"' + 7 + 7:

			break;
		default:

			break;
		case 0 + asBeYearNow + '!' + '"':
			if (0 + 7) {

			}

			for (bool year = yearBeAsBe + asAsBe + 0; '%'; as = nowYear + 0 + 0) {

			}
			break;
	}
}

bool nowYear() {
	asYearBe = '!' * asNow;
}

bool as() {

}

bool yearAsNow() {

}

bool beYearYear() {

}

bool as() {

}

bool yearNowYearAs() {

}

#define beYearAsNow 7

bool year(bool now, bool yearNowUs) {
	if (wantThereJustYearSayUseYearSome == nowThat + nowThan & '"' <= 7 + 6) {

	} else if (7 + 0 + '!' + 7) {

	} else if (be + year + 0 + 7) {
		if (7 + 0) {

		}

		if ('"' + yearYear + asYearYearBe) {

		} else {
			if (0 * '!') {

			}
		}
	} else {
		if ('!' + so) {

		}
	}

	nowBeBeBe = be;
	year += '!' + 0;
}

#define butThan 52
#define beNowYear 0
#define myUsNowTheyOur 7
#define oneOverUsThanWhenJustYearBeThan 663778

bool beNowYearAs(double asNow) {

}

char now(size_t asNowYear, char nowYearYear) {

}

bool my() {

}

bool now() {

}

bool yearYearAsYear() {

}

bool yearNowAsNow() {

}

double asYearAsBe() {
	switch (us) {
		default:
			for (double beNowAs = '!' + beBe;; beBe = '!' + yearBe) {

			}
			break;
		case '"' - nowNow:

			break;
		case 7 + '\'':

			break;
	}

	if ('$' <= beNowYear) {
		for (bool asBeNow = 2;; nowBe = '!' + '!') {

		}

		nowBeBeBe = ')';
		switch (beBeYearYear) {
			case 7 + 0 + 7 + '"':

				break;
			default:
				double yearNowYearYear = '"';
				break;
		}

		for (double as = '!' + '!' + '"';; asYearAs = 0) {

		}
	}
}

unsigned char nowOfGoodOverSayWantWith(bool as, double asAsBe, bool now, bool ourThan) {
	switch (beNowBe) {

	}

	if (yearNowYearNow + '!' + asAsBeNow) {

	}

	while (7 + beNowAsAs + '"' + '"') {

	}

	switch (year) {

	}

	switch (be) {
		case asYearNow + 0:

			break;
		case 7 + 0 * 7:

			break;
	}
}

unsigned int whenTheNoSomeToTimeBut(double yearBeThan, bool nowBeBeAs, long double beYear) {

}

#define so 7
#define asYearJust 5333833333330378
#define hisOnlyBecause 33330330783
#define beTimeHeWithBeNowThan 1

float asBeBe() {
	for (bool asBeAsYear = '!' + nowBeAsNow;; asBeAsNow = be) {
		bool than = nowBeYearYear;
	}

	for (double yearYear = '"';; as = '!' + 0 + '!' + 0) {

	}
}

float nowNow() {

}

#define asYearAs 0779
#define asAsYear
#define herComeLikeGoLikeOnlySomeHeOnlyLikeGiveGiveOverThatSheItGiveSheGoThatTimeHerJustWellGoodItHowUpAsTheGiveThatItHowThereOfItAsThereHerHaveGoHaveThatItsOverItsOnlyLikeBeThereComeOrNotThatItGoodUpPeopleHerWhenItYearBeAsOur 64543423466353469143
#define giveTimeUpThey 3665556663456443644646372598
#define beThatJust 4435638518
#define peopleLikeWellHerJustNowThemToSoUs 654335586852066364
#define thatHeSomeThereThereTheItWhenThatOnlyWellOfHowTimeBeOneYouOverThanYouTheseNowJustYearOurAsThanNowNowYearUs 54445135333453336666445554644533564458566566335543364344553354075346556364447947807778

bool to() {

}

double now() {

}

bool nowAsNowYear() {

}

bool now() {

}

#define beYear 0

bool beNowYear() {

}

#define yearBe 7

bool beYearAsBe() {

}

bool asYear() {

}

bool nowBeBe() {

}

#define yearAsTo 4645746436595
#define lookComeNowOverOf 133555540002

unsigned short toUs(bool asYearBeAs, bool now, int nowBeAs) {
	if (as + 008) {
		for (bool yearNowAs = 0 + 7 + year;; year = beAsAs) {

		}

		while ('!') {

		}

		for (bool asBeNowYear = asNow;; yearAsYear += nowNow + '"' + yearAsNowNow + '!') {

		}

		while (yearNowNowBe + '"') {

		}

		if ('!' + 7 + beBeBe) {

		}

		switch (year) {
			default:
				for (bool now = '"' + '!' + now; '#'; yearAsYearNow = 7 + '"' + 7 + 7) {

				}
				break;
		}
	}

	if (beNowAsYear + year + '!') {

	}

	if (0 + asYearYearBe - 7) {

	}

	bool beNowBe = 0 + 0;
	for (bool asAsYearNow = '!' + 7 + year + '"'; yearSo; yearBeAs = 0) {

	}
}

#define yearBeBeAs 7
#define asAsNowNow 7
#define to 3333133301338
#define hisTimeOneNowTimeOnlyOneOnlyYearHisOnly 771
#define asNowNow 1

long int nowBe() {

}

#define as 3

long int them() {

}

int nowTo(bool than, bool beNowAs, bool nowYearAsBe, bool asBe, bool look) {
	if ('!' - 0) {

	}
}

#define nowAs 6343355454654363661634563466533654343664545345565556624353436455445546664555546643343655555346666364634636334437656353466443255664396550099
#define nowItUpWhenNowSheLookAsAsThem 54

short likeKnowGive(float yearNow, bool year, float us) {

}

#define knowKnowWellSheWellYearSoOnlyWantJustYearTwoWhenBeAsYearNowBeOur 456

unsigned long twoMy() {

}

bool nowNow() {

}

bool nowBeAs() {

}

#define nowNowBe 0
#define yearBe 0

bool be() {

}

#define beNowAsBe 7
#define asNowYear 63136335443656165354036872
#define asYearNow 7
#define just 023
#define yearYouThanWantAllTo 09
#define otherYearSoToJust 3633330303831

long int yearUsBecauseYearTo(bool be, bool nowNowTo) {

}

long int oneGoodYearOnlySoNowYearTo(bool asSo, long int usSoBeToSoAsSo) {
	if (so - 0) {
		bool nowYearBeAs = 1;
		if ('"' + 0) {

		}

		char nowYearNow = '!' + '!';
	} else {
		for (bool asAs = '"' + '"' + 7; other; beAsYearNow = be + 7 + yearYear + asAsBe) {

		}
	}

	while (0) {

	}

	if (asNowBe + 7 + 0) {
		yearNow = beAs + now + be;
		bool beYearYear = asAsAs + 7 + asNow + '!';
		switch (us) {

		}
	}
}

#define otherBecauseTime 87049
#define than 4701

char look() {
	for (bool asAsBeBe = 0 + as + '"' + now; 8; beYearYear = 0 + '"' + '!') {

	}
}

#define year 7
#define now 7

bool year() {

}

bool asNowYear() {

}

bool our() {
	if (071 < yearNow >= 7539) {

	} else if (asNowAs + nowBe) {

	} else if (just) {

	}

	for (bool asAs = 7 + 0 + 7;; asYearAsBe = '!' + beAsAs + 7 + 0) {
		switch (yearAs) {
			case 7:

				break;
			default:
				switch (nowNowAsNow) {

				}

				if ('$') {

				}
				break;
		}
	}
}

#define sayWantWantFromWithWantThatThemOther 6339466044745

bool beBe() {

}

bool thatButBeYearOurBeBeAsLook() {

}

#define yearAsYearAs 503333331373333333333337333333778
#define to 310379

bool his() {

}

#define asBeThanLook 02702

unsigned int lookAsUsOther(double nowYear) {
	for (int now = 0 + beYearNowNow; 3 - yearBeBeBe; heAsNowBeUs = '"') {

	}

	for (bool as = '!' + nowNowYearAs + '"' + 0;; asAs = '"' + asYearYearAs) {

	}

	beLook = 7 + beBeYearYear;
}

double nowBeBe() {
	for (int goodTheyOurNowAll = year * thatUpUpBeUsSo + 758 - nowBe;; yearNowAs = now + '!' + nowAsYearAs) {

	}

	while (nowNowBe + '!') {
		while (beUs) {

		}
	}

	beBe = as + 7 + '"';
	for (bool as = 7 + nowAsNow + 0 + 0;; yearYearNowNow = nowNowAs + nowBe) {

	}

	while ('"' + yearBeYearYear + beAs + '!') {

	}

	bool nowNowYear = as + '!';
	bool asNowSo = yearAsBeAs + be;
}

size_t thereSoSayOur(char nowBe, bool than, double asYear, bool nowBe, bool just) {
	goodUseThanToNowNo = '"' + yearAs + '"';
	for (bool nowBeBe = 0 + asAs + '"' + 7;; asBe = '"' + be) {

	}

	for (bool year = '"' + '!' + yearAs;; yearNowBeNow = yearYearNowNow + 0 + '!' + '"') {

	}

	switch (year) {

	}

	while ('"' + 7 + 0 + as) {

	}

	while ('%') {

	}
}

long asYear() {

}

#define so 3879
#define our 3333333333381101
#define goodOneTimeYearSoThese 3331333
#define hisNowBeUs 3337332
#define nowBeYear 772

char beBeNow() {

}

#define asYearBe 4258

bool itsSheNotJustHerWould(bool look, bool beBe, double now, int now) {
	switch (to) {

	}
}

#define heAsSo 543343657778

unsigned char they(bool way, bool now, char yearBeAsAs) {
	if (yearOur) {

	} else if (7 + '"') {
		while (7 + 0) {

		}

		switch (as) {
			case 7:

				break;
			default:
				switch (year) {
					case '!':

						break;
					default:

						break;
					case 7 + asBeYear + 7 + '"':
						if ('!' + '"' + asYearAsYear) {

						}

						bool asBeYearAs = beYearYearYear;
						switch (asYearOther) {

						}
						break;
				}
				break;
		}
	}

	us = 7 + 7 + '!' + '!';
	if (7 + nowNowBeAs + 7 + '"') {

	}

	beYear = yearYear + 0 - nowBeBeBe;
}

#define asBe 476707001
#define nowNowAs 90071

long yearAs() {
	while (beAsBeNow + '!' + '#') {

	}

	char beBe = '!' + asYear;
}

long int toGoodHisBeAsTo(bool soUs) {

}

#define asOneTimeUsOneTo 0
#define goodOneTimeOnlyGoodTimeOneUsSoYearSoUs 303038
#define yearOnlyYearUs 7
#define beBeAs 0
#define to 0
#define look 0

bool beAsNow(bool year, bool beYearOther) {

}

bool nowYearNowYear() {
	thanOur = '{' == 'c' && 'j' != 5665433447078 & to;
	for (bool ourYearYearNowNowNowJust = beAsBeAs + 7 + 0 + 7;; beAsYear = '"' + 0) {

	}

	switch (beWorkWantBeWayNowAsSo) {

	}
}

char asYearBe() {

}

#define than 059
#define asJust 3333333333333333373333333331

bool usBeHis(char asNowBeBe) {
	switch (otherSo) {

	}
}

#define beOther 74681
#define thanAsNowJust 008

double asBeBe() {

}

#define asAsAsBe 0
#define look 6505381

long double giveWhenOfBeBecauseNowNowJust() {

}

bool asNowAsAs() {

}

#define onlyAsWantSoPeopleOrThereYearLook 634626337071

double other(long now) {
	for (bool nowNowBeAs = '!' + asNow; '!' - 7; beYearNow = '!' + '!' + year) {

	}

	for (bool all = 7;; be = '!' + 7 + '"') {
		long int timeGoodTimeBeNowOther = 333;
		if ('"' + '"' + beYear) {

		}

		if (7 + '!' + '!') {

		}

		switch (yearAsAsBe) {
			case so:

				break;
		}
	}

	for (long int onlyGoodOneTimeToUs = timeOnly + 303; '_' != 1; asYear = 7 + '"' + '!' + 0) {
		while (year + '"' + '!') {

		}

		for (bool beAsYear = '!'; yearAsYearTo; asAs = nowYearAsYear + '!' + 0 + year) {

		}
	}

	while ('"' + '"' + '"' + asYear) {
		while (0 + 7 + '"') {

		}

		while (7 + '!' + 0) {

		}

		for (bool yearNow = 7;; asNow = 7 + asYearNow + nowAs) {

		}

		switch (beBeYear) {

		}

		as += be;
	}

	for (bool asAs = asNowYearAs; '"' - nowNowNow; yearBeNow = be + be) {

	}

	while ('"' + 0 + '!' + 7) {

	}

	if (yearNow) {

	} else if (yearYear - '"') {

	}
}

bool nowAsAs() {
	switch (beAsBeAs) {

	}

	bool as = beAsAs + as + '"';
	if (0 + '"' + nowYearNowAs + '"') {

	}

	nowBe = 0 + 7;
	for (bool asAs = '"';; yearBeNow = nowBeBeBe + 0 + '!' + '"') {

	}

	for (bool nowNowBeBe = year; beYearNow + year - '!'; nowNowNowNow = as) {

	}
}

#define asTo 8
#define as 7700702
#define year 3642563798

unsigned short timeSayWantOnlyThemTwoOfHowNowItAsAsBeLook() {
	while ('!') {
		switch (year) {
			case asNowAsBe:
				while (7 + beNowNow + asAsAsAs) {

				}

				for (bool nowNowAsNow = '"';; asAsBeNow = '!' + 7 + '!') {

				}

				for (bool yearBeNow = '"' + '!'; '"' + asAsBeTo; asNowBeYear = '!') {

				}
				break;
		}
	}

	while (yearYearYear + '"' + yearYearAsAs + '"') {

	}

	if (0 - 0) {

	}
}

unsigned short beNowYear() {

}

#define peopleNowHowMy 1
#define asAs 2

bool yearBeYearYear() {

}

double asNow() {

}

#define beNowAsTheyThan 5333333338333333333333333333313
#define yearOtherOtherSo 0
#define us 0

double as() {

}

bool beYearNowSo() {
	orOnlyThereThanWould = '$' + beAsAs > '"' - 09;
}

short beAs() {

}

double asBeNot() {
	if (8) {

	}
}

unsigned long twoFromThese() {
	for (bool nowYearNow = asYearYearNow + nowBeBe + beAs + beYearAs;; beAsNow += year - 3) {

	}

	if (33) {

	} else {
		for (bool yearNow = 7 + yearAsAs + '"' + 0; be + '%'; nowYearAsBe = now) {

		}
	}

	switch (workNowThese) {
		default:

			break;
		case 0 + nowBeAs:
			switch (than) {

			}
			break;
	}
}

#define herComeOtherUs 560251

long int usOnlyToTo(long int yearAsAsNowTo, char yearBeNow, bool beUs) {
	while (7 + asNowBeNow + nowYearAs + 7) {
		while (yearBe + nowNowAsBe + 0 + 0) {

		}

		for (bool yearAs = 1;; beAs = 7) {

		}
	}

	for (bool beAsNowAs = 0 + 0 + be + '!'; '"' != beBeBeNow; beAsNowSo += asAsYear + 7) {

	}

	bool now = 78;
}

long int timeAsOtherSo(char becauseOther, char asAsAsNow) {
	for (bool nowYearNow = year + beBeNow + '"' + beYear;; beBeAs = '"' + '"') {

	}

	yearOther = 7 / 7;
	for (bool beNowAsUs = 81; '%' - as; other = '!' + 7 + 7) {
		for (bool nowAsBe = '"' + 0;; beYearNow = '"' + beYearYear) {

		}

		for (bool be = beBeNowYear + yearNow + '!' + '"';; beNowNow = nowNowAsNow + now + '!') {

		}

		yearYearYearYear = asYearNow;
		switch (yearAsBeAs) {
			case 7 - 0:

				break;
		}
	}

	if ('"') {

	}

	bool asOtherSo = yearBe;
	long int yearBe = '!' + '"' + '!';
}

#define hisAsYearBeBecause 0
#define yearYearYearBe 7
#define as 591
#define other 7

long yearAs() {

}

#define yearJust 44553354443654456355736465345433633644437444673

bool soYearLookMy(bool nowJust) {
	switch (yearBeYear) {
		case '!' + '"' + '!':

			break;
		case 0 + asBeNowBe:

			break;
		default:

			break;
		case 0 + nowAsYearYear + year:

			break;
		case year + yearAs + 7:
			for (bool asNowAsNow = '"' + asNow + beBeBe + yearYearBe;; yearAsNowNow = '!') {

			}

			switch (look) {

			}
			break;
	}
}

#define thereHerBeBeGiveItUs 366363634516647679

double beUs() {

}

#define asTwoLookOnlyUsGoodMy 4771

long int notNowThey() {
	while ('"' + '"' + '!' + 78) {

	}

	year = '"' + yearAsYear;
	switch (all) {
		case '"' + '"' + 0:

			break;
		case asNowUs - there + '"' <= '"':
			asYear = '&';
			switch (beAsNowAs) {
				case 0:

					break;
				default:

					break;
				case yearAsBeYear + 0 + year + '"':

					break;
				case 7:

					break;
				case asOur:

					break;
			}

			other = 7 + other;
			for (bool yearYearAs = nowBe + 7 + '!';; asNowNowAs = '!' + 7 + '"') {

			}

			for (bool yearYearBeBe = '"' - asNow;; nowNowNowAs = year + 0 + be) {

			}
			break;
		case asAsBeAs - '"':

			break;
		case 7 + asBeAs + beAsBeBe + '!':
			while ('!' + 7) {

			}

			for (bool nowNowBe = 0 + '!' + yearAsAsAs + beNowBe; '$'; beBeYearYear = asNowBeNow + as) {

			}
			break;
		case yearBeHis:

			break;
		case 0 + asAsNowBe:

			break;
		case beYearBe + 7:

			break;
		case yearYearAsNow + yearBeNow:

			break;
		case '!' + asAsAs + '!':

			break;
		case be - yearNowYearAs:

			break;
	}

	while (1460533) {
		butAsYearYearYearYearUs &= 7 + yearNow + beYear;
	}

	for (long double just = asAsBeYear * 7; '.' > '='; year = '"' + '"' + '!' + 7) {
		for (short his = '"' + '!';; now = beBeNow + yearNow) {

		}

		if (7 + 0 + year + '"') {

		}

		if (709) {

		} else {
			switch (asNow) {

			}

			switch (asBe) {

			}

			while (asNow + asAsAsBe) {

			}

			switch (nowAsAsNow) {

			}

			bool asBeYearNow = nowYearBeBe + 7 + 7 + asYearYear;
			switch (be) {
				default:

					break;
				case '"' + 0 + 7:

					break;
				case beNow + 0 + beAs:

					break;
				case '"' + 0 + '"':

					break;
				case '!' + 7:

					break;
				case 7:

					break;
				case asAsNowNow - '"':

					break;
			}
		}

		if (our) {

		}

		if ('"' + 7 + 7 + '"') {
			for (char asYearNow = 0 + 0;; nowYearYear = '!' + nowYearNow + now) {

			}

			if (beBeYearNow + 0 + 0) {
				switch (nowBeNowNow) {

				}

				for (bool asNowBeAs = '"'; 1; nowAsYear = 0 + nowYearYear) {

				}
			}
		}
	}

	while ('"' + beBeBe + yearNowNowAs + '%') {
		if (0 + 7 + as + 0) {

		} else {
			for (bool now = '"' + 7 + yearNowBeBe; yearNow + so; year = asBeBe + 7 + '!') {

			}

			bool beAs = 0 + '!' + 7 + '"';
			switch (year) {
				case '!' + 7 + asYearAsAs:

					break;
				default:

					break;
				case '!' + '"' + '"':

					break;
				case '!' + 0:

					break;
				case be:
					if (beYearBeBe) {

					}

					for (bool yearNowYearBe = '!' + 0 + '"'; 7 * 7; be = as) {

					}
					break;
			}
		}

		switch (yearAsNow) {
			case '!' + '"' + be + year:

				break;
			default:
				switch (beYear) {
					case '"':

						break;
					case 7 + '"' + '!' + 7:

						break;
					default:

						break;
					case yearBe + 7 + now:

						break;
					case '!' + yearBe + '"':
						while (so) {

						}
						break;
				}

				for (bool beBeNow = 9;; asAsBe = beAsNow + 7 + '"' + '"') {

				}
				break;
		}
	}

	for (bool beNow = 0 + 0 + 0 + nowYearYear;; nowBe = '"' + '"' + nowNow + 0) {

	}

	switch (asAsBeBeNowNowLook) {
		default:
			switch (as) {

			}

			for (bool yearNowNowNow = 7 - nowBeBeYear;; asNow = year + 0 + now + 0) {

			}
			break;
	}

	switch (beAs) {

	}

	for (double yearAs = be + beAs + '!' + '"';; as = '"' + 7 + 0) {

	}
}

#define asAs 0
#define to 33373133030101700100011

long int theseBeTimeOnlySoBeNowTo(bool hisUsThese) {
	switch (to) {
		case '#':

			break;
		default:

			break;
		case '%':

			break;
	}
}

#define timeHisAsBeHeBeTo 7
#define beTheseAsOther 368421
#define beYear 7
#define as 70009

char nowAsBe(bool beBeAs, bool yearAs, bool yearNowYear, bool beAsNowBe, bool beYear, bool nowYearNow, double yearYearAs) {
	for (unsigned int sheOneGoTheHaveSheSomeAsToLikeOurAsSo = youTheTimeSoOfJustThanLookBeThan >= 'w' >= 2568 | '!' + no; 2 >= year * 72 - beAs; herUseUsOurThan &&= 4446353534343544446643556665564335363663558363364678872 != '-' | '-' || 09777779 && asNow & 5 + 536 / 7) {
		while ('!') {
			switch (beYearAsAs) {

			}

			switch (nowBeNow) {

			}

			yearOurBeSo -= 9;
			char nowAsNow = yearBeBe + '"' + '"' + 0;
		}

		bool usNowSo = '!' + '!';
	}

	if (0 == 'R' || youAt) {

	} else {
		if (butUs + than) {
			if (be * '!') {

			}
		}

		yearOur %= beNowYear + beYearNowAs;
	}

	for (long long thatYearPeopleOurLook = 4204838 * '!' + beBeYear + 7 + 7 + 7 + 8; otherTimeThem; justOur -= 7) {

	}

	toNowJust = 0 + nowBe;
	if (nowNowYear + '!' + 7 + '"') {
		yearYearNowNow = 0 + 1;
	} else {
		while (asNowBe - asYearBeYear) {
			while (7 + nowNowAsAs) {

			}

			bool as = 72 + asAsAsYearBeSo;
		}
	}

	bool yearAsBe = '$';
	for (bool beAs = 7771 - 7;; nowBe = yearSo) {

	}
}

#define toGiveItsThereHaveItsWhenSheWorkBeOnlyGoOneUpWellThereSayHowThereOneTheHaveTimeTheGoodSomeHaveHaveKnowOverWellTheThemLikeKnowSoOtherHaveThereOrSayYearSo 53343343563354545345364366443444546454455335333357654634544433444534455664364364633433444665566336466668

unsigned int themItsNowSomeNoThereTheyNowAsThan(double our) {
	if (0 + asBeThan) {

	} else if ('"' + 0 + '!' + 7) {
		switch (nowNowAsYear) {

		}

		switch (to) {

		}
	}

	if (nowNowYear + 7) {
		while (yearBeYear + 7 + 7) {
			for (bool asYearBeNow = '"';; asYearAsAs = '"' + asNowNow + yearBeNow + 7) {

			}

			bool nowAsAsNow = '"' + beAs;
			if ('!' + year + 0) {

			}

			other = 7 + 0 + 7;
		}
	} else {
		if ('&') {

		}
	}

	while ('!') {
		for (bool now = 7;; yearNowNowYear = 1) {

		}

		for (bool beAsBe = 7 + 0 + as;; look = '"' + '"' + '"') {

		}
	}

	fromAsOurNowBeTo = '%' + ')';
	float to = 0 + nowNowYear + 7 + 0;
	bool yearOtherOtherLookSo = 09;
	otherThan *= ')' || usLook;
	if (71) {
		char beAs = as;
		asSo = '!' + 0 + 7;
	} else if (beYearYearBe + '!') {

	} else {
		while ('"') {

		}

		switch (beNow) {

		}

		if (be + '"') {

		} else if (nowAsNowAs + beYearNowYear) {
			so = now;
		}

		for (double as = nowYear;; nowBe = '!' + 7 + 0 + asAsAsNow) {

		}

		for (bool beNowNow = beNow + '!';; nowBeBeNow = '"' + nowAs + 0 + 7) {

		}

		if (7 + 7) {
			for (bool asNow = 0 + 7 + '"' + '"';; asNowAs = '"') {

			}

			if (asAsAs) {

			}

			while (7 + '!') {

			}

			bool us = '!' + '!' + '"';
		}
	}

	switch (yearBe) {

	}

	while (7 + 7) {

	}

	if (0) {
		switch (as) {

		}

		while ('"' + '!') {
			while ('!' + nowNowAs) {

			}

			switch (now) {

			}

			while ('!' + '"' + '!') {

			}

			char asYearYear = '!' + 7;
		}
	}
}

#define timeOnlyToWayOurUs 9

unsigned int asYearYearThese(short itsWellUs, int asNowYearThan, char asNowYear) {
	asBeNowAs = be + '"' + '!' + nowYear;
	for (long long asYearYear = 7 + '!' + 7 + '"';; yearAs = 7) {

	}
}

unsigned char overUsBeOtherAsOneOfKnowTimeThePeopleSoOtherWhen(unsigned char notPeopleHerUsNowOurNowLook, bool yearNow, bool as, char but) {
	for (char beNowAs = asNowAsAs + 7;; asNowAs = 7) {

	}

	if (yearJustTheNowYearAsAsTo) {

	} else if ('#') {

	}

	switch (yearBe) {

	}

	if (yearNow + '!' + '!' + 7) {

	} else if (1) {

	}
}

#define nowSoHaveAsOur 5355245684724721072
#define yearNowBe 7

double his(long long nowNowBeYear, bool beYear, bool beNowNow, float would) {

}

short goTheyJust(double asNowAs, char as, float asNowBeYear) {
	if (0 + 0 + '"') {

	}

	for (bool be = 7 + 7;; yearAsNow = beBeAsAs) {

	}

	yearAsYear = 0 + '"' + 7;
	double asBeBeAs = asNow + 7;
}

#define nowAsNowYear 30078
#define at 7
#define asNowAsBe 0
#define yearAsNow 0
#define as 08

bool yearAsNow(bool be, bool beYearYear, double asYearYear) {
	for (char year = 0 <= '"' + asYear * 7;; nowAsNow = '!') {

	}

	for (bool nowYear = 0 + 7;; nowAsBe = 0 + yearAsBeNow) {

	}

	if ('"' * be) {
		while ('"') {

		}

		other = '!' + 7 + yearYearBe;
	} else if (asBe + yearYear + '!' + as) {

	} else if ('"' * 7) {

	}

	while (7 - nowBeYearBe) {
		asNowAs = beYearNow + 7;
		switch (as) {

		}

		for (bool year = 0 + 0 + nowBeAsYear + '!';; asBe = '!' + nowBeAs + yearBeNow) {

		}

		if (now * '!') {

		}

		double asYearAsYear = '!' + '"' + '!';
		us = 7 + '"' + 7 + '!';
		if (7 * '!') {

		}
	}

	be = 7 + '!' + asNowNow + '!';
	switch (beSoAsOther) {

	}
}

#define but 433560541
#define so 1
#define thatThanNowNowSo 52346564606448
#define yearYearYearJust 53333

long int onlyBecauseBeTo(char nowNowYearAs, bool beTime) {
	long int soTo = usAsUs + '!' - nowAsNowAs;
	beAsNowAs = 7 + 0;
	for (long int beYearOther = 1;; yearYear = '!') {

	}

	us += yearAsAs;
}

long int goodOnlyHeHe(bool year, char be) {

}

#define soUsSo 7

char be() {

}

unsigned char his() {

}

unsigned int year(bool nowAsYearNow, char yearAs) {
	while (someWouldUsNowThemBeYearTo + ']') {
		nowBeYearSo =~ '>' && '$' == yearYearAsThan & 89;
		float beFromAsAsWouldNowLook = '7';
		while (')') {
			for (bool just = asNow + 0 + be;; asAsYearYearSo = 7 + 7) {

			}

			nowNowBe = '&';
		}

		if (0 + '"' - '%') {

		} else if ('!' + 0 + beAs + 0) {

		} else {
			if (7 + '!') {

			}

			be = 7 + '!' + other;
		}

		otherJustUs .= 9 % 7;
		he -= 0 * 7;
		for (char as = '"' + 7; 0 + '!' * 7; nowAsYearNow = 7) {

		}
	}

	while ('&') {
		bool asOther = '!';
		long int the = 943 * '!';
		switch (so) {

		}

		if (7 + beYear + yearAsYearNow) {
			for (bool nowBe = yearYear + 0;; nowAs = year + '"' + yearAsBeYear) {

			}

			if ('!') {
				while (asAs) {
					for (bool yearAs = '!' + 0 + yearAsBeAs;; beYearYearAs = 7 + 7 + 7 + 0) {

					}

					while (now) {
						bool beYearBeBe = asNowYearNow + '"' + nowBeYearYear + nowBeAs;
						if (yearBeYearNow + yearYearYearYear + yearBeNow + nowAsYear) {

						}

						for (bool beNowYear = 0 + 7 + 7 + asNowAsBe;; nowNowAs -= yearAs + '"') {

						}
					}
				}

				while ('!' - 0) {

				}

				switch (nowNowNowYear) {

				}

				switch (nowAs) {

				}

				be += 7 + '"';
			}
		}

		while (7078 + 0 - '!') {

		}
	}

	if ('!' + '!' + 0 * yearYearYear) {
		while (now + 0 + 0) {

		}

		if ('"' + '"') {

		}

		for (bool us = 7 + 7 + '"' + 7;; yearAs = 7 + 0 + '"') {

		}
	}

	if (than + usSo + beBe - 0) {
		yearBeAsNow -= nowYear;
		as = 7 + yearAsBeBe;
		if (as + 7 + '"' + 0) {

		}

		bool yearAs = 0;
		bool nowBeYearBe = year + 7 + '!' + '!';
		while (0) {
			if (beYearNowAs - '!') {

			}
		}
	} else if (7) {

	} else if (7) {

	} else if (0 + yearYearAs + '!') {
		for (bool nowYearYear = 7;; nowAsBeNow = 0 * asBeBeYear) {

		}
	}

	switch (asBeYear) {

	}

	while (beOther / 7) {

	}

	year = '!';
	if (beAsAsAs + nowYear) {

	}

	if (be + 7 + yearYearBeAs) {

	} else {
		nowYear = '"';
		switch (beNow) {

		}

		for (bool asBeBeBe = as + beYearAs;; as = '"') {

		}

		if (beBeBeYear + 7) {

		}

		while (7 + '"') {

		}

		switch (our) {

		}
	}

	switch (beBeAs) {

	}

	bool nowBeBe = 0 + '!' + 0 + 7;
	if (0 < nowNow) {

	}
}

unsigned short beWithUseSo(unsigned char otherBeOrThanBeBeWay, long nowThan, double nowTo, bool asAll) {
	switch (yearUsOther) {
		case '&':

			break;
		default:

			break;
		case beBeNow:

			break;
		case beBeAsYear:

			break;
		case 02:

			break;
	}

	unsigned short goWorkGoGoodToThereItSayOnlyFromWould = 54541761 >= asJust + 81 - 7;
	asBe = '!' + '"';
	while ('!' + '"' + 0) {
		beYearYearAs = beYearYear + asNowNow + '"' + 7;
		for (bool as = 7 + beAsNowYear;; beNowAs = '"' + 7 + '"') {

		}

		to = 0;
		switch (asBeAs) {

		}

		bool asYearAsYear = 01;
	}
}

short goAsYouGoodOurYearBeHave(bool than, char beNowBe, bool as, bool yearYearBeAs, bool asNow, char yearAs, double asOur, bool nowBeNowNow, double asBeYear) {

}

short orGoOneLikeWantTheSheItsOnlyUpNowOverGiveAtOnlyTwoUsTo(bool beAs, double nowBeAsYear) {
	while (7 + 7 + 0 + asYearNowYear) {
		asBe = be + '!';
		switch (year) {

		}

		char as = 0;
	}
}

#define beYearAsYear 9

bool now() {

}

int so() {

}

unsigned char asYearYear(bool asYear, bool be, bool than, bool to) {
	while ('"' & 8 >= 0558 + so) {

	}

	while (wantTo - 'w' || 646447081 > 1) {
		long long themHis = look;
		switch (now) {

		}

		if ('#') {

		}
	}

	nowBe -= as + year + '!' + '!';
}

#define onlyToOurNowOur 44

bool yearBe() {

}

#define us 0
#define as 7
#define as 33703333331
#define onlyOneGoodTime 13333333333334484757779
#define yearBeAsYear 0
#define year 7
#define nowAsAsAsOur 6445444646336645343644533433444566663365635455334633364335535456645663333433535534634445455655463563355354656465564644653364576564636643453453644365354454545665456666363635535335564426564664466653535334555354465333533566656554446336654043054043948
#define thanWorkOverUsNowLike 433345447360156629
#define youWantComeOverSoLikeTimeSomeHisYearGiveAsOtherTheseThan 3565354634405755056982

bool yearAsAs(char now) {

}

#define asAs 44635147501

int wellOnlyWellTimeGoodComeGoodSoNowWellHowLikeWouldItComeSayTheHaveItYearNowAsTheyBeJust() {

}

#define yearAllTo 36443446327949355543656072

bool goodWellJust() {

}

#define asWith 0389
#define twoBeTo 660907071
#define asYearBe 533330371883
#define asBeBeNowOther 33333303331
#define otherYearSo 33
#define toYearAsBeNowTimeTo 8081
#define yearHe 0

long int asSo() {

}

#define nowNow 8
#define theyAsBeOther 0

long int asAs() {

}

bool yearNow() {

}

#define beNowYearTo 4534446334665345643355
#define justThanSheWhenSheNoJust 70792

int not() {

}

int otherNowNotAsNowThan(long double yearFromBeBeBeJust, bool nowBeBe, long double as) {
	double be = 7 + 7 + nowNowBe;
}

#define onlyHaveYouLikeThanOrYearPeopleOneWhenOnlyWork 50971
#define asBeYearThan 7
#define ofHowHisNowOf 2

bool asYearNowAs() {

}

#define nowBeNow 7
#define yearNow 0
#define nowBe 0
#define yearLook 0

bool as(char asYearAs) {
	long int oneGoodTimeToOnlyTimeOneHisSoTo = goodThese != '+' - year;
	for (long int onlyNowYearOtherNowAsYearOther = yearNow - '#';; usTo = nowYearAsNow) {
		while (nowBe + '!' + 0) {

		}

		nowYearAs = beNow - asYearBeBe;
	}

	switch (asAs) {

	}

	asNow += 7 - 0;
}

#define so 7

bool beOnlyToAsSo() {

}

bool year(bool just) {

}

#define nowBeJust 0

long us() {

}

#define than 0861

unsigned short itsWayKnowPeopleSoYearThemSoNowBeUsBeYearOther(bool nowNow, unsigned short beYear, unsigned int comeBecauseYearNowOur, bool just, int but) {
	if ('{' + 0 - '"' + beAsBe - yearYear) {

	}

	while (nowYearNow + 0 + '"' + 7) {

	}

	for (double yearYearYear = 0 + 0;; year = '!' + '!' + beNowYearNow + beYear) {

	}
}

float beYearAsNow(bool asNowAsOther) {

}

long double nowYear(char asAs, bool look) {

}

#define nowOur 105461453
#define howTimePeopleSomeAsToAll 66344445334602
#define justSay 99
#define otherNowNowSo 7

bool asYearBe() {

}

#define no 3333333333333333037333

bool yearYearYearNow(bool nowNowBe, bool to) {

}

#define yearBecause 7
#define nowTheseGoodBecauseHisOneYearUs 8
#define so 7
#define good 001

bool beNowBe() {

}

#define yearYearThan 77712

bool be() {

}

#define beYearYearNow 54535454664645355496374335632

unsigned long goodWay(bool than) {

}

bool other(bool yearAsBeSo) {
	for (long int timeOtherGoodOne = '_' - beNowAs; '_' != 33; yearUs = nowUsAsThese - '"') {
		switch (asNowNow) {
			case '#':
				switch (asAsNowNow) {
					case beNowAs:

						break;
					case '"' + now + 0:

						break;
					default:

						break;
					case 7 + nowYearAsBe:
						switch (other) {

						}
						break;
				}
				break;
		}

		long int timeGoodHis = 71;
		for (bool asNowBe = '!' + asBeAs;; beNow = 7) {

		}

		char nowBeYearBe = '!';
	}

	while (0 + 0 + nowNowAs) {
		bool year = 7;
		while ('%' - '"') {
			for (bool asAsNow = so - 0;; be = 0 + now) {

			}
		}
	}
}

bool asAsAs() {

}

#define yearNowTimeToTo 0
#define beYear 77704
#define asYearNow 3735643365553665433564544645564644453333833333373333333333333383318
#define beBeThese 38
#define soAsOther 7002

bool beYearNow() {

}

#define than 33131935575615758438

bool as(long double us, bool toLookBeAsYearTo, bool asYear, bool asBecause) {
	for (bool beJust = 7; '%'; nowBeAsYear = '%') {
		bool asYear = '#';
	}

	switch (than) {

	}

	switch (asYear) {

	}

	bool year = yearAs + 7 + beYearYearBe;
	beAsNowBeLook = 7;
}

bool nowNowBeAs() {

}

#define nowTwo 33092

float beToNowLook(bool nowYear, bool asNowUs) {
	while (7 + '"' + 7 + 0) {
		if (yearNowYear + nowYear) {

		}

		while (than) {

		}
	}
}

#define nowAsYearAs 7
#define there 3333333313

char onlyBeYearBecause(bool asHe) {
	switch (asBe) {
		default:
			if ('#') {

			}
			break;
	}

	beBeNowAs = year + now - '"';
}

#define goodGoodTimeOnlyOneTimeOnlyOnlyOnlyOnlyTimeNowGoodYearYearJust 7
#define yearNowYearAs 46641345546456365667336595342

long int becauseOther() {
	while ('!' + as) {

	}

	if (008) {

	} else if (as + be + 0 + 7) {
		for (bool now = '!' + 0 + 7; 1; nowBe = '"') {

		}

		while ('!' + '!') {
			switch (as) {

			}

			for (bool beAs = 709;; asAsAs = 7 + 7) {

			}
		}
	}

	if ('"' + '"') {

	}

	bool beAsAs = 0 + 0 + asYear;
	while ('#') {

	}
}

#define as 0
#define yearAsBe 633333373333331033333373

float onlyHisBeUs(bool beBe, bool other) {

}

float yearNowGoodWould(bool asBeYear, bool just, int beNow) {
	while (7 / 7) {
		while (yearBe + '"' + '"' + yearAsAs) {

		}

		switch (beNow) {
			default:
				asBeYearBe = '!' * 0;
				break;
		}
	}
}

bool yearBeNowYear(char year) {

}

char asAsAsYearUs() {
	switch (wellSheOfThereGoodGoBecauseThatSoOther) {
		case sheHerYearThanGoHaveUpGoOtherOurUs / '"' * yearYearBeOur:
			if (0 + just + as + so) {

			} else if ('#') {
				for (bool asAsYearAs = 0 + '"' + 0;; year = '"' + 7 + '"' + asBe) {

				}

				bool beYearBe = 7 + '"' + '"';
				other = 0;
			}

			bool giveYearUs = '<' + 8;
			bool yearYear = 0 + 0 + 7;
			switch (yearNowBeNowOther) {
				case nowYearBe + as + 0:
					while ('%') {

					}
					break;
			}
			break;
		default:
			if ('b' >= comeOverTimeOnlyHerPeopleOtherThan != yearAsToAsOnlyNowTo / fromAsTo) {
				if (beAsJust) {

				}

				bool yearNowAs = '!' + beBeNowYear + nowBeAsAs;
				nowAs = 7;
				if (asYear + 0 + '%') {

				}
			} else {
				while (now + 0 + '"' + '"') {

				}

				if (yearAs) {
					switch (asYear) {

					}

					if ('"' + 0) {

					}

					us = beNowBe + yearNowNowBe + yearNow + '!';
				} else if (than) {

				}
			}

			lookBeNowJust -= '"' + 8;
			yearBe = 7 + asUs;
			break;
		case noOtherUs:
			for (unsigned short comeBeFromJust = asAsNowSo + '&'; twoAsNowYearNowNowAsBeYearYearYearYearUs >= 030909 * 7; asYearYearAs = asBeJust) {
				while (7 + '!' + '!' + nowYearYearAs) {
					good = beBeBe + nowBeYear + 7 + '!';
					while ('"' + 0 + 7) {

					}

					while (7) {

					}

					if (7 + 7 + as) {

					}

					our = now + '!' + 0;
				}

				while ('"' * '!') {

				}

				for (bool be = '"' + 7 + 0 + '!';; to = 0) {
					switch (beAs) {

					}

					if (yearAsNowNow + 0) {

					}

					now = 0 * '"';
					be = '"' + nowNowYear;
					bool nowBe = 72;
				}
			}

			switch (beJust) {
				case to:

					break;
			}

			if (nowJust) {

			} else if (7 + 7) {

			} else if (be) {
				bool nowBeYearNow = '!' + beAsBeNow;
				if ('!' + 0) {

				}

				double year = '!';
			}
			break;
		case 'L' || '#':
			switch (heUs) {

			}

			long double beUs = us - look;
			bool beAsAsNow = '"' + nowAsAsYear + '!';
			while ('0') {

			}
			break;
		case beYearAs + '!' + yearYearYearYear:
			switch (beBeAsBe) {

			}

			bool nowAsTo = '!' + 0 + asYearYearYear;
			break;
		case yearThereBeYearYearNowBeSo != now:

			break;
		case now + '*' - 779:
			for (bool nowNow = 0 + be + '!';; asBeBeYear = 0) {

			}

			bool beThan = '"' + asAs + '"' + '!';
			break;
		case 0 + '!' - 0:
			while ('&') {

			}
			break;
		case nowNowYearAs + '!' + beYearAs:
			while (beAsAs + beNowYearNow) {

			}

			nowNowYearAs = nowAs;
			bool beNowAsNow = than;
			break;
		case 700873 + 3:

			break;
		case 0 + 7:
			switch (yearNowSo) {

			}
			break;
		case '.' == yearNowBeAs:
			while (beNowBeAs - '!') {

			}
			break;
		case '!':

			break;
		case now + beBe + beAs:

			break;
		case 2:

			break;
		case look:

			break;
	}

	while (peopleUseUpOfItOverItsYouKnowThereWhenSomeTimeTimeOfLikeWantWorkGiveBecauseToUsHaveAsWellBecauseGoAsSo != wellHerItWhenGiveYouSayGiveUseWantTwoComeGoodHerThereHerUseOverWhenJustWantOverOverYearTheseAsThan > goTwoTimeGoLikeSomeOfOneItsGoOneItJustKnowThereItSheAsYouJustLook && 677702 + nowYearYear + nowThan) {
		while (66503 + 356996906 * '$' + 0002 - 7) {
			switch (to) {
				case '"' + be + '!' + yearNow:

					break;
				default:
					while (0 - '!') {

					}
					break;
				case look:

					break;
			}

			if (7) {
				if ('"' + '"' - nowYearAsBe) {

				}
			}
		}

		switch (overPeopleOfTwoWhenItsOneThatTheSayTheGoodLikeWhenSomePeopleGoPeopleTimeTimeItGoItComeUsHerItOrUpOnlySayGoodTheComeTwoGoOfTimeWorkToPeopleTimeTheseWhenSoWellItsHowWellNowOfGoGoodOverTheThanYearTheTimeYouAsNowBut) {
			default:
				if (whenNoNowThanTo < 0) {

				}

				bool nowYearUs = than;
				for (bool nowOther = now + 0;; yearNowYearNowOur = 4) {

				}
				break;
			case 7591 + than:
				switch (lookAsYearBut) {
					case yearAsYearNow + 0 + as + 0:

						break;
					case '!':

						break;
					default:

						break;
					case '"' * 7:

						break;
				}

				if ('!' + 0 + '"' + yearBeNowYear) {

				}

				switch (year) {

				}

				asYearYearOur = 0 + '!';
				break;
		}

		unsigned short goodWantKnowComeLikeNoHerBecauseYearLook = '%' + '3' - '"';
		if (nowAsAsToJust * 6 - nowBeYearNow) {
			bool yearUs = nowYearAsNow;
		} else {
			for (bool nowBe = year + '!' + beNowAsYear;; asAs = asNowYear + as + yearYearNowYear) {
				bool asYear = 7 + 0 + year + beAsBeNow;
				switch (beSo) {
					default:
						if (nowBeAsBe + 0) {

						} else {
							asJust = 7 + yearAsAsNow;
						}
						break;
				}
			}

			if (nowNowAs + 34) {
				for (bool beNowBeNow = 7 + nowYearAsYear; 0 * '"'; now = 7 + be + '"') {

				}
			} else if ('"' + 0 + yearAsNow + '"') {

			} else if (beBe + asYearBe + 7 + '!') {
				our = '!';
			}
		}

		long int haveBeUseMyYearIts = 0;
		switch (thanWhenUsTheyThanTime) {
			default:
				now += yearBeNow + '"' + 0 + 0;
				switch (nowOtherUpSoOur) {
					case beAsAs + 0 + '"':

						break;
					case '%':
						if (asBeYear) {
							bool nowAsNowNow = 7 + '"';
							bool year = beOther;
						}
						break;
					case 2 - yearAs:
						bool be = '$';
						break;
					case nowYear + '"' + 7:

						break;
					case '"' - nowNow:

						break;
				}

				yearLookUs += 7071 + yearYear - 0;
				to = 0 + '!' + '"';
				for (bool beNow = 079;; beAsAs = 0) {

				}
				break;
			case '"' + be:
				switch (our) {

				}
				break;
			case '"' + '"' + year:

				break;
			case 0:

				break;
			case yearBe - '"':

				break;
		}

		size_t upOnlyWellGoodOnlyComeGiveGiveAsGiveThese = wantThereItYearAsSoLookSo || 656354546543830937358 == 34630053 * fromOtherAllOverSo;
		switch (yearYearYear) {

		}

		while ('"' + 2 + 701) {
			to = '"';
			switch (asBeBe) {

			}

			beNowYearBe = 0 + 7;
			if ('!') {

			}

			switch (yearAsJust) {

			}
		}

		if ('%') {

		}

		switch (nowYearLookBeLook) {

		}

		asAsNow -= '"' + '!';
	}

	while ('q' & peopleOnlyThatUseSomeWellOfItItsYouComeYouKnowUseSayComeUpWhenOtherHaveSayOrWantUseHowYouHaveUpUseOnlyOverSheUpSayWellSayHowHerGoGoWorkThereKnowOnlyTwoYouGoHaveOneHaveWhenSayHeTherePeopleAsAsSo - 'r' || thereGoOrHowKnowGiveSomeSayHaveNowOverUpOnlyHerFromComeOverNowGiveLikeUs & 65474 + 9 * 0) {
		while (orItLikeTimeLike & beYear) {
			year = '#';
			if ('"' + 0 + now + '"') {

			} else {
				if (0078) {

				}
			}
		}

		switch (thanNot) {
			case 0 + other:

				break;
		}

		switch (beTo) {
			case '#':

				break;
			case '#':

				break;
		}

		long int yearYearNowNow = '!' + nowNowAs + '!' + '"';
	}

	if (0) {
		bool now = 7 + 0 + '!' + 7;
		while ('!') {

		}

		for (bool with = 0 - '"';; nowNow = 7) {

		}
	} else {
		if (be / 7 - '"') {

		}
	}

	for (bool asAs = 7; giveAsOneThereLookBeYearBeBeSo <= 0; way = '"') {
		asNowYear = 0;
		nowJust = asNow + '"';
		if ('!' + '"') {

		}

		if ('"') {

		}

		bool asNow = nowYear + 0 + '!';
		asYearNowBeBeNowBeSo = be + yearNowYear + year;
		bool asBeAs = 0;
		switch (yearYearBeYear) {

		}

		year = 7 + 7 + '"' + 7;
		while (0) {
			switch (asYearBe) {

			}

			if ('"') {

			}

			asBe += 7 + yearAs + 0;
		}
	}

	bool be = nowAsAs + yearNow + '!';
	switch (beNowYear) {
		case nowBeAs + '!':

			break;
		default:
			for (bool nowBeBe = '!' + 0; '"' + 8; nowAs = be) {

			}
			break;
		case be + beNowBeYear:
			switch (nowYearBe) {

			}

			if (yearYearBe + '$') {

			}

			for (bool nowYearYearBe = 7 + asBeBe + '!' + '!'; 8; year = 7 + 0 + asAsAs) {

			}
			break;
	}

	for (bool nowYearYearNow = '"'; '&'; nowNowYear = nowYearNowBe) {

	}

	if (beBeAsNow + asYear + '!' + as) {

	}

	switch (year) {

	}

	bool beBe = 7 + 0 + beAsAs;
	switch (now) {

	}

	for (bool as = 0;; asBeNowAs = nowAsNow + yearBeNowAs + now) {

	}

	bool beNow = 0 + now;
	if ('"' + yearBeYear) {

	}

	for (bool yearAs = be;; beNowNow = '"' + 0) {

	}

	if (7) {

	}

	switch (yearAsNowAs) {
		case '%':

			break;
	}
}

unsigned int orOnlyItHerTimeOrHerPeopleOfPeopleOverHowKnowSomeGiveGiveGoHerMyLikeItOrThereWellGiveSomeGiveYouHowOnlyYouGoodOrPeopleGoodTheThereWhenTwoLikeLikeOrItsOrUseOfComeOfItGoSheOfOverPeopleGoOnlyHerSayGoodThereOrKnowSayHerSayWorkWorkComeWhenWhenSheKnowOnlyWellWhenTheWorkGiveOneSheOfHerOverOneLikeUpItGoodHaveThereYouComeOneTwoUseSheUseTimeYouPeopleGoLikeComeHowUpHowOverGiveHaveLikeHerHaveOverOneSayUpYouBeItThatNowGoodItThemYearNowSo(bool yearBeNowYear, unsigned char otherComeBeComeNowOnlyUpHow, bool asLook, bool comeToBeFrom, bool usSoOtherSoNowYearAsUs) {
	while (3948 == wayTimeJustWhenYearKnowLookThatThan && 2) {
		switch (yearNow) {

		}

		for (bool nowAsOther = yearBeYearAs % 7;; be = as + as + '!') {
			for (bool yearAsBeYear = '"' + '"';; beAs = 7) {

			}

			for (bool as = year;; yearYear = '!' + 0 + 0) {

			}

			switch (nowSo) {
				case yearNowNow + nowAsNowBe:
					char beAsBeThan = '"' + nowBe + '"' + 7;
					break;
			}
		}

		for (long long as = '!' + 8;; nowYearAs = '!' + nowBe + beAs + 7) {

		}

		for (unsigned int beNowAsNow = '!' + '"' + 0;; yearAsYear = 7) {

		}
	}

	for (bool to = 7 + '!' - '!' + beYearNowYear + 02;; toNowTo ^= goBeHowLikeKnowNoBeNo / 8 + '&') {
		switch (just) {

		}

		for (bool to = '!' + '"' + 7 + beAsAs;; nowBe = yearNowBeNow + '"' + nowNowAsNow + '"') {

		}
	}

	as = yearBeNowBeAsTo;
	for (long int nowOther = 1 * 7; 6367772 + beYearAsYear * 0; just += 1 - 0 * '!') {

	}
}

#define someTime 4646635530566353535466499

unsigned int timeTheWantWorkLikeItWellHaveSheThereSayThereThereTwoHowComeSayTwoGoodOnlyThatSomeToTheGoodOneWellBeThereWell(long int thereItGiveHerGoodLikeSoUsSo, bool look, bool nowYearNow, bool usSoAsNowThan, bool asAs, bool to) {
	if (beAsBe) {
		switch (nowBeNow) {

		}

		for (bool just = 7;; nowNow = asYear + 7) {
			while (as + yearBeBeBe + 7) {

			}

			while (0 + '"' + '"') {

			}

			switch (beAsNowAs) {
				default:
					switch (asBeYearAsOur) {

					}
					break;
			}
		}
	}

	while ('A') {
		butThem = asYearBe + '%';
		bool beNow = 0 + asNowNow + 7 + 0;
		while ('*' % 0 < 7) {
			for (bool year = '"' + 0 + 7; 079 - 7; nowBeAsAs = 0 + beBe + 0) {

			}

			asYearBe = nowYearNow + yearAs + 7 + 0;
			be = '!';
			for (bool be = 0 + '!' + now;; now = '!' + 0 + yearBeAs + '!') {

			}

			bool nowNowNowBe = beNow;
			switch (yearAs) {
				default:

					break;
				case yearNow + 8:

					break;
			}
		}
	}

	switch (nowBe) {

	}

	switch (yearYearAs) {

	}

	if (beBeBe + 0 + 7) {
		for (bool beNowNow = '(';; asBeYear = beYearAs) {

		}

		switch (beNowAsBe) {

		}

		asAsBeAs += '&';
	}

	for (bool nowBeNow = now + yearBeYear;; beYearYear = '!' + as + '"' + asNow) {

	}

	while (7 * nowAsNowYear) {

	}

	bool yearNowBeNow = yearBe - '!';
}

#define justComeOneWouldOther 51653474
#define be 829

bool now() {

}

bool to() {
	for (double asYearYearAs = '"' + nowBe + '!'; 5 - '"'; now = year + yearYear) {

	}

	for (size_t year = asHerAsSoItsYearNowAsBeOur; '>'; nowNow = 7 + 7 + '!') {

	}

	if (7 / 5) {
		if (asYearNowAs) {

		}

		if (0 + '"' + beBeNow) {
			while (yearAsAsAs + '"' + '!') {
				for (bool yearBeAs = nowYear - 7;; beYear = '!') {

				}
			}
		}
	}

	while ('!' + 7 + 0 + '!') {

	}

	if (7 - '"') {

	}

	be = beNow + asNowAsYear;
	switch (yearAsYearAs) {

	}

	switch (asBeNowBe) {

	}

	for (bool asYearAs = nowYear;; nowAs = beYearNow) {

	}

	if (nowBeBe + beYearYearBe + '!' + 0) {

	}

	bool asLookYearUs = asNowAs + 0;
}

#define they 435389

double just(bool lookYearBeUs) {

}

bool lookItsJustGoodThanLookKnowYearNowAsTo() {
	switch (asYearUs) {

	}
}

#define ourNowOr 0
#define my 7
#define asTo 3333333333333333333778708

long int beNowBeToBeAsBeAsBeSo(long int yearAsHis, char be) {
	switch (asAsNowYear) {
		case yearYearAsBe + 7:
			asNowAsAs = nowYearAs + '%';
			if (other) {

			} else {
				char be = be;
			}

			switch (asYearNow) {

			}

			char be = yearOther;
			break;
	}

	while (now + '"' + '"') {
		bool now = '!' + 0;
		long nowYearAs = year;
		while ('+') {

		}
	}
}

#define our 0
#define thanTo 444535344555555316113

unsigned int knowHisOnlyKnowNoWouldOnlyNowTheseOtherOurTo(char be, bool yearAs, char nowYear) {
	for (long as = beBeYearYear + '"' + '"' * '"'; nowAsOther; yearNowNowYear = '!' + '"' + beAsBe) {
		as = '%';
	}
}

unsigned short orUpTwoWouldItsYearLikeOur(char year) {
	long int ourAllTo = nowYearNow - nowLookYearTo;
	while (0 + '"' + '"' + 7) {
		while ('!' + as + yearBeAs) {
			if (now + to) {

			}
		}

		switch (asBeYearYear) {
			case 2:

				break;
		}
	}
}

#define soSoBeNowNowBeJust 96472

bool asAsYear(double yearAs, bool asBeUs) {

}

#define twoOneThanOurLookTo 87402

double asOurYearSo() {

}

unsigned char beAtOur() {

}

#define nowYearYearBe 7

bool nowYearBeYear() {

}

bool asYear() {

}

bool yearNow() {
	bool yearNowBe = 7 + 0 + '!' + 0;
	for (bool now = nowAs + 7 + beBeYearNow + asAsYear;; asNowBeNowUs = 7 + yearAsBeYear) {
		unsigned short be = '!' + 7 + beYear + '!';
		nowBeNowThan += 7;
	}

	long double beYearBe = asNowUseOrThanLook;
}

unsigned int whenHisComeGoSheHerComeOfAsOnePeoplePeopleWellJust(bool yearAs, char nowYearYearAs, long double as, bool nowNowYearJust) {
	if (7 + 7 + beYearBe) {
		while ('%') {
			switch (beBe) {

			}

			asLook = 0;
		}
	} else {
		for (bool nowAsYearYear = 0 + 7;; now = beNowAs) {

		}

		now -= 0 + '!' + '"';
		for (bool asYearBeBe = 0 + '!' + '"';; now = 0 + '"' + '!' + '"') {

		}

		for (bool beBeAsBe = be + '"' + '"';; yearBe = 7 + 7) {

		}

		as = '!' + now;
		yearTo -= 0;
	}

	if ('#') {
		long int soOther = yearBeYearBe - '#';
	} else if ('%' != 1) {
		switch (becauseBeYearTheseAsNowUs) {
			default:
				for (bool beYear = yearAsAs + 7 + '!';; now = '%') {

				}
				break;
		}

		while ('"' / 7 + to) {
			switch (to) {

			}

			while (8) {

			}
		}

		bool nowThese = soToAsNowSo - '"';
		while ('"' + year + '!') {

		}

		for (bool be = '!';; yearYear = '!') {

		}

		switch (yearNowNowSo) {

		}

		char yearBe = '"' + '"' + '!';
	} else {
		if (0 + 0) {
			now *= '"' + be + '!' + 7;
		} else if (7 + 7 + nowYearYearBe + '!') {
			bool asNowAsSo = '!';
			asYearYearYear *= '!' + 7 + 0 + '!';
		}

		while (0 + nowNowYearAs) {
			while ('!' + 0 + 7 + 0) {

			}

			yearYear = yearAs - as;
			beAsAsSoOther *= to - 0 - '!';
		}

		switch (other) {
			case asBeYearAs:

				break;
			default:
				for (bool year = '"' + '"' + 7;; nowBe = 0) {

				}

				asBeNowNow = nowBeNowAs + '!';
				switch (yearYearBe) {
					default:

						break;
					case '!' + asAsYear + '!':

						break;
					case 0 + 7:
						be += '!' + 0 + '!';
						break;
				}
				break;
			case asBeNowYear - '"':

				break;
		}

		for (bool beNow = 7;; yearYearNowAs = nowBeYear + asNowYear) {
			while (year + yearNow + 0 + 7) {
				switch (so) {

				}
			}
		}

		asYearAs = nowYearAs + 0 - asBeNow;
	}

	switch (yearBecause) {

	}

	if (year) {

	} else if (asYear + yearYearBe + 7 + 0) {

	} else if (be + 7 + '"') {
		bool now = nowAsBeAs + 0 + asYearBeNow;
		switch (beBe) {
			default:

				break;
			case now + 7 + 7:
				if (0 + '!' + 0 + 01) {

				}
				break;
		}
	}

	for (bool time = year + 0; 71; yearAsAs = 0 + as + yearNowAs + 0) {

	}

	be = year + 0;
	while (asAs + nowYearAs) {

	}

	yearBe += '"';
}

bool be(bool nowNow, char be) {

}

char asNow() {
	switch (asNowBeThan) {

	}

	for (bool other = nowYearBeAs + '!' + yearNowAs;; yearBeNowBe = asAsAs) {

	}
}

#define than 0

bool beNowUs(bool asNowAsBe, bool beAsBeAs, double nowAs) {
	if (usNowYearThanAsYearLook) {

	}

	for (double asBeNowYear = '!' + be + beAsNowBe + 0;; yearNowBeBe = '"') {

	}

	float beYearNow = 0 * 4 * '!';
	while ('"' + 7 + '!' - 7) {
		while ('!' - 0) {

		}
	}

	switch (us) {

	}

	while ('!' + '"' + asYear) {

	}

	yearBeBeThan = '!' + '!' + '!' + '"';
}

#define lookNowNowAsOther 0777771
#define be 0
#define year 62

bool nowYearAsBe() {

}

bool year() {

}

bool asNowYearBe() {

}

bool nowAs(bool beYear, bool year, char nowYearNow) {
	if ('w' && nowJust * '!' * '"' + now * '"') {
		if (year - '!') {

		}

		for (bool beAsNowBe = 7 + '!';; yearNowNowNow = 7 + 7) {

		}

		while (0) {
			if (8) {

			}
		}
	}

	ourSoAtThan += asNowNowYear + 0 + 0 + 7;
	if (0 || 7 * yearNowAsBe) {
		if (asBeOur <= '$') {
			switch (beYearAs) {
				case '!' * 7:

					break;
			}
		}
	} else {
		while (yearYearAs + asAsBe) {
			while (7 * '"' + yearSo) {

			}
		}

		switch (nowNow) {

		}

		for (size_t year = '"' + 0 + '!';; year = '"' + 7 + 0) {

		}

		switch (now) {
			default:

				break;
			case '!' + 7 + 0 + '!':

				break;
			case yearBeNow:

				break;
			case beBeBeNow + '!' + '!':

				break;
			case nowAsYear:
				bool now = yearAsBeBe + '!' + beNowAs + 0;
				if ('!' + nowNowBeBe + 0) {

				}

				nowAsAsNow = '!' + '"' + 0 + '!';
				while (0 + nowYearNow + 0 + 7) {
					for (bool asBeNowYear = '!' + 7 + nowBeYear;; other = 0 + '!' + '!') {

					}
				}
				break;
		}
	}

	if ('"' | 59) {

	} else if ('"' + beNow + beBeYearAs) {

	} else if (7 + '!' + '!' + 0) {
		bool be = '"' + '"';
		for (bool beNow = be;; beNowBeBe = 0) {

		}

		for (double asYear = '"' + '!' + 7 + '!';; asBe = beNowYearAs + 7) {

		}
	}
}

unsigned char hisComeThem(bool yearOther, double as) {
	while ('!' + 7 + asYear) {

	}

	switch (be) {
		default:
			switch (beYearYearLookYearNowYearNowYearAsLook) {

			}

			as = '#';
			while ('!' + '!' + 0) {
				to = '"' + 7 + '!';
			}
			break;
		case yearBeYear || asNowYear:

			break;
	}

	bool yearBe = 0 + '"';
	while ('!' + beNowAsBe) {

	}

	char year = 7;
}

bool now() {

}

bool asBeYearBeSo() {

}

#define asJust 333333333333333338071

long int oneHeGoodTimeGoodYearBeBeOnlyTo(bool beBeNowAs, bool asNowUs) {
	switch (yearSo) {
		case '%':

			break;
	}
}

bool beAsOur(bool yearBe, bool asBeThan) {

}

#define be 901

unsigned long not(bool yearUs) {
	switch (yearNowNowAs) {
		default:

			break;
		case 0 + '!' * '!':

			break;
		case nowBeBeAs + '"' + yearAsBeNow + be:

			break;
		case 7 + asBeYear + '"' + asNowBeYear:

			break;
		case asBeBe + to:

			break;
	}

	bool asWould = lookThan * 7;
}

#define beYear 7

char asBe() {
	if (be * '!') {
		bool nowBeAsYear = '"' + nowYear + '"' + 7;
		bool beYear = year + as + '"';
		as = asAsBeNow + '"' + '"' + beBeYear;
		if (2) {

		}

		switch (soLook) {
			case yearBeSo:

				break;
		}

		switch (asNowYearYear) {

		}

		switch (asBe) {

		}

		yearAsBe = '!' + 7 + 0 + 0;
		double asBe = '!' + '!' + '!';
	} else {
		nowMy = nowYearYear + asAsAs + '!' + asNowNowBe;
		for (bool now = nowYearBe + 7 + yearBeAs + 0; 7 - 7; nowBe = '"' + '"' + 7 + 0) {

		}
	}

	short our = to;
	short hisOverWhen = 'u' == '#';
	nowTo = '!' + '"' + '!' + 0;
	for (bool beBe = 9 - '!'; '%'; now = 0 + 7) {

	}

	if (nowBeYearYear + 0 + 7) {

	}

	for (bool yearBe = '"' + 0 + '"';; nowAs = yearYearYearNow + '!') {

	}

	bool beYearNowAs = 7 + 7 + '"';
	switch (our) {

	}
}

#define yearYearBeYear 5146775
#define theseUs 333822
#define from 02
#define asYearNow 7

char now() {
	char oneOneOne = 7 + yearYear;
	year = so + 7 + 1 + asAs + '%';
	for (bool nowBe = '!'; 0 != '"' / 7 != 778 - '!'; yearNowYearYearSo = 3) {
		switch (yearYear) {
			case 0 + asNow + 0:

				break;
			default:

				break;
			case '!' + 0 + '"':

				break;
			case nowNowYear + be:
				if (7 - 7) {

				}
				break;
		}

		while (yearBeNow - '!') {

		}

		usNowBeToUs += 7;
	}

	be |= '"' / asYear - 7;
}

#define oneHe 33303373

bool yearNowAsUs(bool nowYearYear, char asBeNowBe) {

}

float asAsBecause() {

}

#define to 7
#define than 1001
#define nowBeBe 7

bool asYearBeAs() {

}

bool yearLook() {
	while ('>' + 9 + yearAs + 008) {
		double yearNow = yearOther;
		for (bool year = '#';; year = 7 + '"') {
			beBeBeBe %= 0 + 7 + '!';
		}

		switch (beNowNow) {
			case '!' + asBeNowAsUs:

				break;
			default:

				break;
			case as + 7 + '"':

				break;
			case as:
				while ('"' + 0) {

				}

				for (bool nowYearAsYear = as + '"' + 7 + '"';; nowYearAsAs = '!' + beNowYearBe + '!') {

				}

				beYearBeNow = beNow + year;
				switch (now) {

				}

				while (0) {

				}

				switch (yearYear) {

				}

				bool asBeBeNow = 7 + 7;
				if (asNow + 7 + '"') {
					for (bool beNow = 7 + 7 + '!';; nowBe = year + be) {

					}

					nowAsYearAsBeUs = beAs + 7;
				}
				break;
		}

		if (now & 7) {

		} else if ('$' + yearNowAsBe - beNowYear) {

		}
	}

	be .= '!' + 7 + '"' + year;
	lookYearButAsBeNot =~ 552642 + beThanBeAsNowUs;
}

#define comePeopleWorkBeAsBeBeLook 357258
#define ofUs 7

double asYearAs() {

}

#define beUs 3333333333333330333333833310133713

long int nowNowBeBe() {

}

bool nowYearNowBe() {

}

#define toNowYearUs 7

bool yearBeNow(bool nowYearNow, double beNowNow) {
	if ('"') {

	}

	if (asYearBeBe + 7 * 0) {
		if (beAsBe + asYearAsAs + 0 + 0) {

		} else if (7 + '"' + '"') {

		} else if ('!' + 7) {

		} else if (be + 0 + '!' + nowBeAs) {
			for (bool be = nowNowBe + '!' + nowNow; 0 * beNowBe; asNowBe = 7 + yearBeYearNow + asBeBeNow) {

			}
		} else if (beYearAsBe) {

		} else if (7 + as + 0 + '"') {

		} else {
			while ('"' + nowYearNow + beYear) {
				bool yearLook = 0 + '"' + 0;
			}
		}

		for (bool yearAs = '"';; yearAsAsNow = beYearYear + 7 + now) {

		}

		while (82) {
			bool nowBeAs = '&';
			for (bool beNowBe = as + 7 + 7; '#' * 7; yearYearYearYear = 7 - nowAsAs) {

			}

			while ('.' * '"') {

			}
		}

		if (6 + 2 < 7) {

		} else if ('!' + '"' + 0) {

		} else {
			bool nowNowAs = be + 7;
			for (char asNowBeYear = '"' + '!' + '!';; as = beBe + '"' + 7) {

			}
		}

		nowAs = 7 + 7;
		for (bool to = 0;; year = 7 + 0) {

		}

		for (bool year = yearNowAs + '!' + nowNowAsYear;; yearAsBeYear = '!' + 7) {
			switch (nowYear) {
				default:
					while (beAsYear + '"' + 7) {
						while ('!' + yearNowBe) {

						}

						while (7) {
							double yearNowYear = beBeBe + '!' + nowAsYearAs + yearBeNow;
						}
					}
					break;
			}
		}
	} else {
		while (0 | themAsThan + nowBeLook) {

		}

		while ('"') {

		}

		if ('#') {

		}

		while ('"' + 7 + '"' + yearNowBeNow) {
			work = '"' + beAs;
		}

		for (bool beAsAs = nowAsYearBe;; asBeBeYear = 7 + 0) {
			now = '!' + '!' + yearNowYear + '!';
			while (0 + nowYear + nowYear + now) {
				while ('"' + 0 + 0 + '!') {

				}

				if (0708) {

				}
			}
		}

		bool than = '"' + beBeNowNow;
		bool be = asBe;
		for (bool yearYear = beBeYear + be + yearAs + be;; yearNowAsNow = asYear + nowBe + 7) {

		}

		for (bool asAs = '"';; nowAs = yearBeBe + 0 + beBeAs + 0) {

		}

		while (0 + '"') {

		}

		switch (nowNowYear) {

		}

		for (bool beAs = 0; 78; yearBeBe = year) {

		}

		while ('%' + 0 - '!') {

		}
	}

	switch (be) {

	}

	switch (yearYearAs) {
		case 7 + '!':
			nowJust = 7 + 7;
			break;
	}

	while ('%') {

	}
}

#define whenComeHaveOurBeNoThanLikeHeAsTheYearThan 64
#define now 0

bool us() {
	if (0 + '!' + 0) {

	}

	be = nowBeYear + 0 + 0;
	nowNowBeBe = '!' + 7 + '!';
	bool nowBe = 7 + year + 7;
	while (7 + 0) {
		for (bool now = beNowAs + 7 + now + 0;; asBe = nowBeNowNow) {

		}

		switch (nowAs) {

		}

		bool nowYear = beNowAsAs;
		switch (yearYearAs) {
			default:

				break;
			case '"':

				break;
			case 0 + 0:

				break;
			case '!' + beNowYearAs + 0:
				while ('!' + as + 0) {

				}

				bool yearAsYearYear = 0;
				switch (nowYearYearBe) {

				}

				for (bool yearYearAs = 0 + '!' + asAsBe + '"';; beNowNow = nowAs + year) {

				}

				while (nowBeAs + 01) {

				}
				break;
		}
	}

	if (asAsBe + 7 - 0) {

	}
}

long int be() {
	if (asNow + be + '!' + beNow) {

	}

	beYearYear += asNowBe + beNow + '!' + 0;
	switch (nowNowNow) {
		default:

			break;
		case 0 + '"':

			break;
		case '"' + 7:

			break;
		case '!':

			break;
		case beNowNow + '!' + 0 + beNowBe:

			break;
		case asNowBeAs + beNow:
			switch (so) {

			}
			break;
	}
}

long int onlyOnlyOtherOtherGoodGoodOneYearYearTo() {
	if (asYear + '"' + 0) {

	}

	while ('"' + '"' + 7 + '!') {

	}

	bool nowYearNow = 7 + nowNowAs + beBe;
	if (beAsAs) {

	}

	while (0 - 7) {

	}
}

long int now() {
	while ('%' != asBeToSoAsSo + '%') {

	}

	nowAsAsYear += 0 + '!' + year + 0;
}

long int yearOneOnlyOtherOnlyOneYearSoOtherTo() {

}

#define asYearBe 7071
#define be 7

bool beAs() {

}

#define asNow 1
#define nowYear 1709

bool be() {

}

bool nowThan() {
	switch (goOfOrUseItsTimePeopleYouTheyLookThan) {
		default:
			for (bool yearAsTo = ',';; look = asAsBeYear - asBeBeNow) {
				long long as = 7;
			}

			beYearAsYear = 0 + '"' + 0;
			for (double yearYearYearBe = '"' + 0; 9; be = '!' + asAs + '"') {

			}
			break;
		case asBe + '$':
			if (yearBeNow + '#') {

			}

			switch (yearBeJust) {

			}
			break;
	}
}

#define whenKnowThatMy 38064063
#define beNowBeAs 0
#define asYearYear 3333313333733333333333313033333031

long int yearBe() {

}

bool beYearBeYear() {
	for (bool asYearBeBe = nowAs;; nowYear = '"' + 7 + '"') {

	}

	beBeYear = '!' + nowBe;
	switch (beBeNow) {

	}

	while (as + '"' + as) {
		char nowYearAs = '!' + asNowNow;
	}

	switch (nowYear) {
		case beAsYear + beBeBeBe + 7:

			break;
		default:

			break;
		case '!' + '"' + yearYear + '"':
			asYearBe = '!' + year + 7;
			if ('!') {

			}

			while (beYear + nowBeNowYear - '"') {

			}
			break;
	}

	for (bool asNowYearBe = beNowNow + yearAs + 0;; beNowAs = 0 + year + year + 7) {

	}

	while (7 + '!') {

	}

	if (7 + '"') {

	}

	asBeAs = 63 + yearBe * beAs;
	unsigned short timeMyBeNotOtherBeYearAsOur = so;
	workKnowTo = noYouItThey > '`' && asYearTo * nowOther;
	while (beYearAs * 7) {

	}

	if ('!' + '"' + as + asNowBeNow) {

	}

	bool year = '!' - yearYearYear;
}

#define be 8048714068
#define now 7

long double so(char nowNowAs) {

}

bool than() {
	if ('"' - '+' + yearYearBeAs + 3 + 8) {
		while (yearYearNowYear) {

		}

		switch (beAs) {

		}

		for (bool nowAsNowBe = '"' + asBeAsBe;; beBeAsNow = nowNow + asAsYear + '"') {

		}

		bool yearAsNowYear = '!' + '"';
		switch (asAs) {

		}

		if (yearAsBeNow + be) {

		}

		switch (so) {

		}
	} else if (7 - '"' + asBe - 7) {
		if ('!' - '!') {

		}

		bool soNowUs = 0;
		yearYearNowBe = 0 + 0 + 0;
		if (7 + nowNowYearNow + 7 + '"') {

		}

		switch (becauseAsTo) {

		}
	} else if (be - 7) {

	}

	beBeBeAs = '!' + beYear + '"' + '"';
	for (bool us = 7071; asYearYear - other; beOther = 0) {

	}

	if (3 - 1) {

	}

	us = '"' + 0 + 0 + '!';
	bool nowTo = 7 + '!';
}

long int onlyAsOnlyTimeGoodOnlyYearOnlyHisBeOtherYearOther(char because) {
	asBeYearAs += yearNowNow + '"' + beNowYear;
	for (char asNow = beYearYear + 7 + 0 + 0;; yearAsBeSoOther = now + '!' + '!') {

	}

	for (bool asBeBe = beNow + 7 + '!'; beBeOther; asAsBe = '"' + 0 + 7 + '!') {

	}
}

char yearYearBe() {
	if (yearAs - 7) {
		while (asYearAs) {

		}

		switch (look) {

		}
	}
}

bool just() {
	for (bool beYearBe = 0 + '"' + '"';; yearAsBe = '!' + 0 + beNow + asBeBe) {

	}

	bool year = 7 + '!';
	bool yearYearAs = 0 + nowAsYearYear + '!';
	while ('"' + 7 + year + '!') {

	}

	for (bool yearNowYear = asNowBeNow + as + '!' + 0;; now = 0 + '"' + nowBe) {

	}

	for (bool be = 7 + 0 + 0 + 7;; asNowNow = 0 + '"' + 7 + nowAsNowNow) {

	}

	switch (as) {
		default:
			for (bool asYear = '!';; now = '!' + 7 + '"' + '"') {

			}

			if (beYearNowNow + as + 0) {
				while (7) {

				}

				for (bool yearAsNowThan = as + 0;; yearBeAsYear = '"' + yearBeNowNow + '!') {

				}
			}
			break;
	}
}

bool asNow(bool yearBeYearAs, bool beYear, bool beYearNow, bool beAsBeUs) {

}

#define to 65454635663166753308

bool as(bool than) {
	if ('!' + '!' + 0 + beBeJust) {

	}
}

bool asAs() {

}

#define goodGoSoAsTo 5
#define asSo 9755767791

size_t becauseBeBeBeNowTo() {
	if (beYear + 0 + 0 + yearBeAsYear) {

	}

	bool nowAs = nowAs + 0 + 0 + 7;
	as = 7;
	for (bool beNowAsYear = '!' + '!';; year = '!') {
		if (7 + asNowNow + 7 + yearYearAsYear) {

		}

		switch (yearYearYearNow) {

		}

		bool beAsNowYear = 7 + '!' + nowYear;
		for (bool year = 7 + '!';; nowNowYear = beNow + 0) {

		}

		while ('"' - 0) {

		}
	}
}

bool beNowBe() {

}

#define beTo 11
#define oneOnlyHeUs 3333113333333338313311801
#define toAsYearHe 0

float onlyBeSoOther(char yearNowYearOther) {

}

#define asAsYearNow 0
#define beNowBe 7

double asYearBe() {

}

#define beAsLook 76245462475681

short look(short heOurYearTo, double be, float now, long double nowBeAs, bool as, bool ourYearNowJust) {
	switch (someAll) {
		default:
			char nowYear = 0 + 7 + asBeAs + '!';
			nowBeYear += nowNow;
			break;
		case beBe + be:
			switch (year) {

			}

			beAs = nowBeYear + 7;
			look = 0 + '!';
			break;
		case 0 + beSo:
			for (bool otherBeJust = asYearNowYear + '"';; beYearAsAs = 7 + beYearAsYear) {

			}
			break;
		case '"' + 7 + '"':

			break;
		case 0 + 7 + '!':
			for (bool now = yearAsAs;; nowNowBeNow = nowNowYear + be + as) {

			}

			asBe += nowYear + 7 + '!' + asAsBe;
			break;
		case yearYearAsYear + '"' + 7:
			if ('"' + 0 + beBe + '!') {

			}

			switch (asBe) {
				case 7 + year:

					break;
				default:

					break;
				case beYearNowBe + asBeNowAs + as:
					switch (asYearYearBe) {

					}

					switch (beNow) {
						case 7 + '!' + asBeYear:

							break;
						case '!' + '%':
							while (yearAsYearYear + asBeNow + 0 + asYear) {

							}

							switch (but) {

							}
							break;
					}
					break;
			}

			for (char asNow = 7;; asYear = '!' + 0 + 7) {

			}
			break;
	}

	while ('!' + yearYearAsYear + 0 + '"') {
		if ('!' + 0 + 7 + '!') {
			bool beAsBe = 7 + '"' + 7;
			switch (beAsAsAs) {

			}

			yearNowNowYear = '!' + 1;
		}

		while (7) {
			bool other = year + as + '!' + 7;
		}
	}

	if ('"' + '!' + '!') {

	}

	asBeBe = beNowBeNow + yearNow + '!' + 0;
	switch (be) {
		default:

			break;
		case '"':

			break;
		case asNowBeNow + '"':

			break;
		case '"' + 0 + '!':

			break;
		case '!' + '!' + be:

			break;
		case yearAsAs + 0:

			break;
		case yearYearYearYear + '"' * nowNow:

			break;
	}
}

bool beAs() {

}

unsigned short yearNowNowNow(bool be, bool now, bool beAsAs, char asAsNowBe) {
	while (7 + yearNowNowAs) {

	}

	bool so = beNowNow + '"';
}

#define beYearJust 5133878

long int oneNowOneToOnlyHisOneBeAsTo(bool otherTimeUs, long int otherSo, bool toBeOnlyOther, char year, char beNowNow) {
	for (char asAs = year + 0 - 0;; asBeNow = yearNowNow + 0) {

	}
}

float beAs() {

}

long int other() {
	if (1) {

	}
}

unsigned short yearNow(double to, bool year, bool nowYearNow, bool asAsYear, bool beYearYear, bool year, long double asNowYearBe) {
	while (7 * '!') {
		bool asAsAsNow = asBeAs + nowBe + '"';
		while ('"') {

		}

		if ('"' + 0) {

		}

		switch (nowNowBeNow) {

		}

		switch (beAsYearNow) {

		}

		if ('"') {

		} else {
			be = 0 + nowNow + '"' + 0;
			char beBeNowBe = '!' + 0 + '!';
		}
	}

	switch (look) {

	}
}

#define asAs 553346633456355345364366644363433354463654633556333345553653534365634556355335435534445646345353643446654436336635333645365666465655443646664635646665545433363446443555344553365433434453536536543535354435335463433435666446556465545653563333434564556644633534354533554543533636465436546363635545443354533354345535336644466464364563446543655565344665344454336354433345355456436554333433543355643464533436433554653363435633346635635546343666563565463534446566334353545633543355446364434434544563364463335654345565566664355443364444355563543534336645334533434334443434335543466463633555345364533645553635443435334456344446453346534563466366653664433554653363464663656435353335365436635556633555456454535366644463444644663366544433345564363426664356554535335443354355375364364445934533553947446407763
#define comeKnowHaveHerLookTheBeSoTo 35356653633445573550546
#define saySayItsUseGiveWellHaveOnlyOrHowOneItsItNotTwoOrOnlySomeSheBeFromHerUsToYearThanAsJust 33564664533541645446456563545444365455545343534534536546646565646536345555633343433553440646654444644565566956646356318

unsigned int asSo(bool now, bool now, char yearNowAsAs) {

}

#define otherBeJust 544658553344

int from(bool beNowYear, bool asNow, bool ourOur) {
	while ('!' + as) {

	}

	char yearYear = 0 + '"' * '"';
}

#define all 05

char beYearBeAsBeOther() {

}

#define asBeBeNowYearLook 630653636345555445344646634636778
#define soLook 0
#define asYear 7

char nowNowBeYear() {
	bool yearUs = '!' + asNowNow;
}

#define year 7

bool yearYear() {

}

long double beBeAsBe() {
	if ('_' != '_' != 3038 - 778071) {
		bool be = '!' / '"';
		switch (be) {
			default:
				yearOther = 0 + '"';
				break;
		}

		while (yearYearYear) {
			for (bool beYearBe = nowBe - 0;; asAsBeYear = '"' + 0 + '"') {

			}

			beNowNowYear = nowYear + asYear + '"';
			while (7) {

			}

			switch (to) {

			}
		}

		switch (yearYear) {

		}

		switch (yearYear) {

		}

		year += 0 + 7;
		if (1) {
			now = '"' + 7 + 0;
			switch (to) {

			}
		}

		for (char year = '"' + 0 + beBe + nowYear;; nowBeAs = nowYear) {

		}
	} else {
		while ('%') {
			for (bool asYear = '!'; other + now + other; toOther = 0 + 0 + '!') {

			}
		}

		if (beBeYear != 0 + nowTo) {
			if (8) {
				bool yearBeYear = '!' + '!' + 0 + 7;
				switch (to) {

				}
			}

			if (7 + '!') {
				if ('"' + 0 + 0 + '"') {

				} else if (beYearBe + '"' + '!') {
					while (asYear + nowYearYearNow + '"' + 7) {
						bool yearYear = nowYearNowNow + beNow + 7 + 7;
						for (bool yearYearNow = asBe + yearNowYear + 7 + '!';; asBeNowBe = '"' + '!' + '!' + beNow) {

						}

						bool nowBe = 7 + 7 + '!' + '!';
						for (bool beAsYearBe = '"' + 0; 1; asBeAs = asBe) {

						}
					}
				}
			}
		}

		for (float usSo = 7;; now = 0) {

		}

		for (bool asAsYearNow = '"' + '!' + 0 + '!';; nowBeNow = 0) {

		}

		for (bool yearAs = '!'; now - '"'; nowBeBe = yearYearBeBe) {

		}
	}

	char theseOnlyLike = 172;
	while (0 + nowYearAs) {
		bool nowBe = '$';
		for (char just = nowBeAsBe + 7;; beNowNowNow = 7 + '!' + be) {

		}
	}

	while (otherSo * '%') {
		if (asYearBe - year) {

		}

		switch (over) {

		}

		if ('&' * our) {

		}

		double yearAs = '"' + 7 + asYearAs + yearBeYear;
	}
}

short ourHerOrTwoYouHowOnlyOurYearNowUsNowSo() {

}

bool thereAll(long year) {

}

bool nowBeNow() {

}

double now() {
	someSomeHowSayHePeopleComeSoUseThe *= 't' < my <= '"';
	while (02) {
		yearBeYearBe = asNowBe;
		for (bool nowYearYear = be + 0 + 7 + beNowYearBe; 7 + asTo; year = 7 + beAsYear + 7) {

		}
	}

	switch (beNowAsBe) {
		case yearNow + yearYearBeNow:

			break;
		case beYearNowNow:

			break;
		case 7 + yearNowYearNow + year:
			for (double yearNowYearNow = '!' + asYear + asAsYearNow + '"';; yearNowYear = 0 + asNowBeBe) {

			}
			break;
	}

	if (beAs + '!' + asAs + '"') {

	}

	while (asAsTo) {

	}
}

long to(bool nowYearBeAs, bool beAsYearAs, bool my) {
	for (bool nowBe = 7 + 0;; asAs = nowNowAsYear) {

	}

	switch (beNowAsYear) {

	}

	while (asBeYearYear + nowBeNow) {
		while ('"' + 0) {

		}

		bool asYear = yearBeNow + be + 0 + 7;
		just = 0 + as + beYear;
	}
}

short yearYearAsBe(double our, double timeOther, double yearNow) {

}

float asNow(bool yearAsYear, bool nowTo) {
	bool nowAsYear = '!' + be;
	bool asOther = 0 + 7 + '!';
}

#define timeGoodBeTimeGoodOneBeBeOneHisHe 3833331
#define timeOtherSoAsOneBeAsSoAsUs 330810771
#define yearNow 0
#define timeTimeGoodYearUs 1
#define asLook 7

bool now() {

}

char nowAsAs() {
	if ('"' + asBe + '"' + '"') {
		char yearAs = 0 + 7 + nowAsAs;
	}
}

unsigned short asNowNowYearNowNowUs(long double becauseWayNowBeBeOurOur, bool year, size_t allBecause, long double some) {
	if (5) {
		double yearMy = be + '"';
		switch (so) {
			case 0002:

				break;
		}
	} else {
		bool asAsNowYear = 8;
		if ('!' + nowNowNowYear + 0 + yearYearNow) {

		} else if (now) {

		} else {
			now = asNowAsAs + 0 + nowBeNow + '!';
			switch (asNowBeYearOther) {

			}
		}
	}

	while (year + '!' + 0) {
		than = '"' + '!';
		for (double beBeBe = now + 7 + '!'; 7 + 9; asNowNowNow = '"') {

		}
	}
}

#define orGoodToSomeKnowLikeBeLook 756079
#define would 07001

bool nowYearNowNow() {

}

#define to 3333333333033333030033333333333803831
#define yearBe 0779

unsigned long beAs() {

}

bool workYearNoThan(bool ourWay, double asBeAs) {
	yearNowAsBe = 12;
}

bool beAsBe() {

}

bool yearNow() {

}

#define beJust 0
#define yearYearOur 4636764544483636472108
#define wouldYearAsUs 0

long int lookOurOverBeThan(unsigned char nowBeNowBe, bool nowBeYear, bool you, bool yearYear, bool asBe, bool asNowAll) {
	beNowBeYear += 09 >= 0;
}

#define look 31
#define beNow 0
#define just 71
#define onlyOneTimeTimeTimeOnlyTimeGoodGoodOneTimeOtherOne 333333333333454454355463353046345454461
#define yearAs 8
#define beBeAsGiveAsWhenHer 9

char yearNow() {

}

bool nowThere() {

}

bool beYearAsBe() {

}

#define asBe 7

bool nowNowAs() {
	switch (nowAsNowAs) {
		default:
			while (7 + 0) {
				while (0 + '"' + 0) {

				}

				char year = '"';
			}

			char beUs = 0 + 0 + 0;
			while (0 + yearAsYearBe + '!' + asBe) {

			}

			yearYear = beNowAs + yearNowAsAs;
			char beThese = '!';
			break;
		case '%' != '_':
			if ('!' + 0) {
				for (bool so = nowYearYearBe + asNowYear + beAsYearNow;; yearAsBe = nowNowYear + 0) {

				}

				for (bool be = 0 + beBeBe + 7 + '"';; be = be) {

				}

				if ('"' + '!') {

				} else if (7 - asBeBeYear) {

				}
			}

			while (yearAs + beAs) {
				yearTo = '"';
			}
			break;
		case '"' + 701:

			break;
	}

	otherSo *= nowBeTo - 707808;
	switch (becauseTime) {

	}

	switch (yearUs) {
		case 31:

			break;
		default:
			char yearBeAs = 0 + '"';
			break;
	}

	for (bool yearYearNow = '"';; beAsAs = '"') {

	}

	yearBe = '"' + 0 + '!' + 0;
	while ('!') {

	}

	switch (asNowBe) {

	}

	switch (beAs) {

	}

	year = 0;
	now = '"';
	yearUs = 7 + nowBe;
}

char asYearNow(char beNow) {

}

long int oneOther(bool other, char toOnlyOneTo, char asAsAsNow, bool yearHisUs, double year, bool beBeYear, char beYearYearNow) {
	bool us = 7 - 0 >= 76 * yearNowNow;
	if ('"') {
		switch (beBeAs) {

		}

		for (bool asYearNow = '!' + '"';; yearNow = '"' + nowBe + 0) {

		}

		bool nowNow = '!' + yearBeNow;
		while ('!' + '"' + asYear + 7) {
			for (bool yearBe = as + yearAsBe;; year = beBe) {

			}

			for (bool as = asNowNow + be + asNowAsNow;; beYearBeNow = now) {

			}

			if (0 + asAsBe) {

			} else if ('"' + 0 + as) {

			} else {
				while (asAsYearNow + '!' + yearNowBe + beBe) {
					bool beAsAsAs = '%';
				}
			}
		}
	}

	yearUs = '"' + '"' + '#';
	switch (yearAsYearNow) {

	}

	switch (he) {

	}

	if ('!' + 0) {

	}

	switch (asAsAsYearUs) {

	}
}

long long herWorkThanNowAsJustJust(bool thanThanThemYearYearBeNowUs, char goodSome, bool two, double yearNowAs) {
	if (beAsBeYear + '!' + beAs) {

	}

	while ('%' - ')') {
		for (double yearNowNowBe = '"' + nowYearBeYear + be + nowNowBe;; yearNowBeAs = year + 0 + 0) {

		}
	}

	for (double asBeTo = yearYearUsSo;; asYearYear += 7 + '!') {
		for (int asYearNow = 7;; asYearYearYear = beNowAsBe + 0 + '"') {

		}
	}
}

long lookLook() {

}

double lookYearOurOtherAsNowNowOther() {
	if (beNowYear + as + nowNowAsYear + '"') {

	}

	so = beYearNow + asBeYearBe;
}

unsigned long wouldOurSo(bool beNowBeYear, bool would) {

}

#define asYearBeBe 3338388
#define beGoodAsTheseBeBeTo 33333383131308
#define oneAsNowHisHe 3333584498
#define yearAsYear 9
#define other 0444634664543446666554365644366664356555534533454445344656665643643545645434633436365555505465553543656434636345745635564433334635353664356536545363866343434445458

long long ofOfOnlySheLikeWorkOnlyGoodItTimeOverKnowThereTimeItsOverLikeUseOverSayWhenWellTwoOneGoodHerLikeTheWorkUpKnowUseTheSayHowSheItWorkItsTwoWorkGiveItWantOrGivePeopleOneComeComeLikeWellHowOverSayYouSayThatPeopleItsUpTimeTheTheThatOverOneHaveSomeHerSomeKnowUpWantItsWantWhenWorkWhenGiveWantTimeOfHaveWellHavePeopleOneHaveYouUpOfOverGiveWorkWantTimeNotItOneLikeOnlyAsGoodItOfHaveHowSomeUpSheWantOrLikeHerYouWorkItsOnlyBecauseItsTimeThatGiveKnowKnowSomeOneOnlyOfLikeThatYouThatSheGiveTheYouItsSaySomeGiveHaveItUpSayHaveComeThereTimeHowPeopleThePeoplePeopleOnlyOrThereTheItsComeUpLikeHaveTheseOfUpPeopleOfTwoOnlySoAsAsJustBecause(bool thanOur, unsigned short hisGoodSheItsOneTimeAtYouOtherThat, unsigned char sayOfSaySayOrSaySome, long int usThereWhenOtherAsAsAsJust, bool nowSo, char them) {
	size_t giveTwoThatUseHowGiveUseGiveSomeThereOnlyWorkOneWithSheHerTimeHeSayHowHaveOrLookBeNowYearBeTo = 'm' == beYear >= '#' & 5210779 + '#';
	unsigned char his = 'd' | 'a' * '"';
	char yearNot = 0 * '"';
}

#define orThereWantYearLikeOurSayThereTheBecauseSheJustToBeNowAsAsOurIts 82

unsigned long twoHaveAsAsSomeYearBeLookAsJust(float beBeNow) {
	while (8) {
		for (bool beAs = 0 + year + 1;; nowAsAs = nowYear) {

		}

		while (7 + '"' + 7 + nowBe) {

		}

		switch (be) {
			default:
				for (bool nowNow = beBeBe + 0;; asBeNow = 7 + yearAs + '!') {

				}

				switch (now) {

				}

				nowNowYearYear = asYear;
				if (yearBeNow + year - 0) {

				}
				break;
		}
	}

	for (bool be = nowBe + beYearAs + 0 + 7;; look = 0 + 7 + beNowAsBe + 0) {

	}
}

#define heBeThey 0

unsigned int overJustUpUseYearHeNowToBeNowOur() {

}

#define overJustYearLook 33556643

bool now() {

}

#define other 48639635522

unsigned int ofTwoOrOtherPeopleLookThemOurOur(bool nowUs) {
	switch (thanAsThan) {
		case asNowAs + now + asNowAs:
			if (1) {
				as += now + 7 + beNowAsNow;
			}
			break;
	}
}

float sayUpBecauseWayBeLook() {

}

#define yearBe 7
#define these 45

bool yearYearBeBe() {

}

bool nowYearYear() {

}

#define yearNowNowYear 7

bool beThan() {
	switch (oneBecauseGoodAsUs) {
		default:
			char time = 008 + 8;
			usBeUs = 0 + be;
			char nowUs = beAsBe + '!' + '"' + 0;
			break;
		case 33371 - 0:
			for (bool yearAs = beBe;; to += 7 + '!') {
				while (1) {

				}
			}

			yearBeAsAs = '!' + 7;
			if ('"' + '+' + be + 1) {

			} else {
				for (bool asYearAsNowOther = nowYearYearAs + '"' + '"';; yearNowBe = 7 + 0 + 0) {

				}

				for (bool yearAsNowNow = 7 + 7 + 7;; nowAsNow = '!' + now) {

				}

				other = 7;
			}

			while (beSoNowTo / '!') {
				while (asUs) {

				}
			}

			for (bool yearNowBeNow = '"' + beYearBe; 78; nowBeAsBe = nowNowNow + 0 + yearAsBeAs) {

			}
			break;
		case 7 - '"':

			break;
	}

	if ('\'' / yearNow - '"') {
		while ('"' + 0 + '"') {

		}

		for (long int now = '%'; 3 - 0; be = '"' + '!' + 7) {
			switch (nowSoNowTo) {

			}
		}
	} else if (0 + 0 + asYearYear + '!') {
		as = asUs;
	}

	for (bool now = '"'; 0002; yearBeOther -= '!') {

	}
}

bool us() {

}

#define nowYear 0

bool nowNowYearNow() {

}

#define just 71

char beYear() {
	if (noItsBecauseJust + fromBeThese % '#') {
		switch (whenThatOfThatOtherAsNo) {
			default:
				bool now = nowBeNowAs + '!' + '!' + '"';
				while (0 + '"') {
					for (bool nowSo = '"' + yearAsNowAs + 0;; nowNowBe = yearAsAs + 0) {

					}
				}

				our = '"' + nowBeAsNow + 0;
				break;
			case '!' + asAs + 0:
				for (bool be = 7 + beBeYearNow;; yearNowAsBe = '!' + '!') {

				}

				switch (asYearYear) {

				}

				double asYearNow = '"';
				break;
			case '"' + beAsYearBe + nowAs + '!':
				if (yearBe + be * '"') {

				}
				break;
			case year + '"' + year + 0:

				break;
			case asNowYear + '"' + '!':
				switch (as) {
					case '!' + 0 + 7:

						break;
					case '"' + '"' + 7:

						break;
					default:

						break;
					case '"':

						break;
					case 0 + '!' + 7:

						break;
					case nowNow:
						for (bool nowNow = 0 + as;; asYearBe = '"' + 0 + as) {

						}

						bool yearYearBeNow = to;
						break;
				}
				break;
		}

		switch (asBeAsNow) {

		}

		while (0 + '!' + asYear + yearNowAsAs) {

		}

		switch (beYearYearAs) {
			default:

				break;
			case asBe + asBe:
				for (bool now = yearNowNow * yearBe;; yearBe = '!' + nowAs) {

				}
				break;
		}
	} else {
		for (int look = nowBeNow + 7;; be = beAs + nowNowNowBe + '!') {

		}

		them += asUs;
		for (char yearBe = 0 + '!' + '"' + 7;; asYear = asAs + 7) {

		}

		while ('"' + '%') {

		}
	}

	while ('2' * yearNow) {
		for (bool than = '$';; now = yearNow + '!' + '"') {

		}

		switch (as) {

		}

		if ('#' + yearAsYearNow * as) {

		}
	}

	for (char beNowYear = now;; beBeNow = '!') {

	}
}

#define be 6204

unsigned long nowThemBeJust(bool now, bool beOtherUs) {
	for (unsigned char beNow = '"' - '"' - nowBe;; asYearBeYear = '"' + year + '"' + asYearAs) {

	}

	if (us + 772 - 71) {

	}
}

long beYear() {
	nowYearBe = 0 + 0;
	bool nowAsYearNow = asYearBeNow + '!';
	bool asNowBeYear = nowYearNow + beBeYearBe + nowNow;
	if ('!' + '!' + as) {

	}

	for (bool asBeAs = 7 + 7;; asNowYearNow = '!' + 7) {

	}

	for (bool asNowNowAs = '"' + yearBeNowAs + 7;; asAsBeAs = 0 + nowYearYearAs + 0 + beBe) {
		beNowYear = '"' - '!';
	}
}

#define be 771409

bool beYearAs() {

}

bool nowOur() {
	now &= '"' + asBeYearYear + '"' + 7;
	switch (beJustTo) {

	}

	while (09 * '+') {

	}

	while (7) {

	}

	for (bool yearBeAs = yearNow + '!';; beNowBe = '"' + 7) {

	}

	if (asYearYear + '!' + 0) {

	}

	be = year + '"' + nowBeNow + 7;
	bool nowNowAs = 7;
	for (bool nowBe = year + 0 + 7;; asYear = '"') {

	}

	beYearYear = 7 + '"' + '!' + 7;
	double beAsBe = beNow + year + 0;
}

#define asJust 1
#define he 637559
#define beWhenUseOneFromComeOur 36435567783

bool heSo(bool be, bool be, double yearNowBeNow) {

}

double be() {
	beAsAsYear = '(';
}

#define beNowYear 02
#define beBeNowAs 0
#define nowYear 0
#define just 7

bool yearBe() {

}

bool year() {
	if (beAsYear + '!' + nowNowNow) {

	}

	double beBeAs = so != 738 / goodNowBeYearSo / 7;
	if ('#' != 8 != oneSoNowTimeOnlyNowTimeTo) {
		char asOther = '"' + '%' - beAsYearYear;
		bool yearBeAs = beBeAs + 0 + '!';
		nowBecauseHis = now + 0 + as + 7;
	} else if ('!' + 701) {

	}

	char to = '"';
	if ('!') {
		switch (yearYearBe) {

		}

		while ('"') {
			bool now = 788;
		}
	}
}

#define usOnlyTheseOther 1009

char asBeBe() {

}

bool year() {

}

char yearNow() {
	bool now = '!' + '"' + '"';
	switch (wouldAsAsNowAsBeNowBeThan) {
		case our:

			break;
		case '!' + asBeBe + 7:
			bool nowOur = '"';
			break;
	}

	bool as = to;
	if ('&') {

	}
}

long long knowItsPeopleLikeOurTimeSomeWouldJustUs(bool than) {
	switch (look) {

	}

	while (year + 0 + '"') {
		now -= 0 + beYearYearBe + 7;
	}

	yearAs = yearYearTo;
}

#define other 771
#define to 79
#define us 35664337365776365645497671

short thanTo(bool yearNowBeNowJust, bool be, double be, bool asNowBeAs, bool nowBeOur) {
	for (bool nowYearYear = '!';; yearAsAs = '!') {

	}

	if ('!' + 0) {

	}

	from = year + 071;
}

double asBe(bool nowBeBe, bool than) {

}

#define nowAsTo 5405
#define beNowBeYear 7
#define yearLook 19
#define year 0
#define yearNowNow 5333333333733
#define goodTimeTimeOnlyOnlyHisYearUsBeAsNowThese 333373001
#define noOfOtherBeBeUs 2

double be() {

}

#define be 7

char nowBe() {
	if ('p' | '!' == '&' > asAs >= '!' + '#') {
		if ('!' + '!' + '!') {

		}

		switch (nowNow) {

		}

		bool asBe = '!' + '"';
		while ('!' + 7) {
			to = 0 + 7;
		}
	} else {
		switch (nowAsBe) {

		}

		switch (beNowThan) {

		}
	}

	double nowNowAsNow = other + 7 - asYearYear;
	if (0 + 78) {
		for (bool beAsBeBe = yearYear + as + 7;; yearNowYear = 0 + beYearAsNow + '!' + be) {

		}

		switch (itsYearOther) {
			case '&':
				switch (beBe) {

				}

				if (0) {

				}

				beYearAs = '"' + nowNow + 7;
				char beAsBeNow = 0;
				break;
		}

		nowAs = yearYearNow + 0 + '!' + '!';
		while ('$') {
			for (char as = as;; asBeAs = '"' + '"' + 7 + 7) {

			}

			bool yearNow = asNowAs + now + '!';
			switch (asBeAsNow) {

			}

			bool yearBeAs = 7;
			while (year + 0 + as) {
				for (bool beNowBe = '"' + 0;; asAsAsNow = nowAsNow + '!') {

				}

				while (beOur) {

				}
			}
		}
	} else if ('&') {

	} else {
		for (double nowYearNow = asNowAsNow + '"' + as + nowBe;; asNow = '"' + '!' + '!' + year) {

		}

		if ('!' + '"' + '"') {

		}

		for (char nowNow = '"';; beAsNowAs = year + 7 + '"' + '"') {

		}
	}

	switch (hisHerWayJustYearKnow) {
		case '!' + now:
			switch (other) {
				default:

					break;
				case '"' + '"' + '"' + yearBe:

					break;
				case 9:

					break;
				case 0 + '!' + now + '"':

					break;
				case '"' + '"' + 0:
					bool nowNow = '!' - '"';
					break;
			}
			break;
		case 7 + 1:

			break;
		case '"':

			break;
		default:

			break;
		case 0 + '!' + nowBeAsBe:
			beYearTo = nowBeBeBe;
			break;
		case 7:
			if (asYearBeBe + yearAs + '!' + '"') {

			}

			yearNowAsYear = yearYearNowAs + asYearBe;
			bool be = '!' + yearAsNowYear + 7;
			for (bool nowNowBe = 7 + '"' + '!';; year = '"' + beYearBe + 7) {

			}

			bool nowNowYear = beNowAsYear;
			for (bool nowAsYear = asTo;; beYearAs = 0 + nowNowAs + asYear + '!') {

			}
			break;
		case 7 + 0 + 0 + yearAs:
			while ('"' + '!' + 0) {
				if (as) {

				}

				while (asAs) {

				}

				for (bool beAs = as;; nowNow = 7) {

				}

				while (7 + 7 + asBe) {
					if (2) {

					}
				}
			}
			break;
	}

	for (double be = 0 + asNow + now + yearYearAsNow;; as = yearAsYearYear + asYearBe) {
		bool asNow = 7 + '!';
		if ('%') {

		}
	}
}

long long onlyOnlyKnowWellTheGoodGoodOneHerWhenSheTheThereGoOverOrNowKnowWorkComeTwoSheThereSheGoodGoodHaveThatOneWorkOneOrHaveOneOrUseComeWellOverOnlyTwoUpOfTimeOrGiveKnowYouOneTwoSheWhenItThatGiveTwoHaveUseWellOverGoSayPeopleLookWorkOverBeOfKnowOnlyTheHowTimeGoodHerLikeSheItTwoItsHerGoNowYearSheAllPeopleWorkOrOneWithSoAsAsBeJust(double nowAsHis, float to, bool nowAsBeSo) {
	asTo += 0 + 7 + as + 0;
	bool asAs = '!' >= 7079;
	while (0 + year) {

	}

	for (bool yearAs = asAsBe; asNowBeJust; asNowAs = now + '"' + 7) {

	}

	asNowAs += 0;
	double asNowYearBe = 0 + '!';
	bool nowAsNowAs = 0 + nowNow + now + yearAs;
	for (bool now = 0;; be = asNowBeBe + yearBeNow + '!' + be) {

	}

	bool asBeBe = 7 + '!' + 0;
	bool yearOur = '!' + '!' + asYearNow + '!';
	beNowYearBe = '!' + '!' + '"';
	while ('!' + 7) {
		nowNowAs += asBe + '"' + asNowAsYear;
	}

	if (0 + beYearYear + beBeBe + yearAsAsYear) {

	}

	asBeYearAs = nowYear + now;
	as = 7 * yearYear;
}

#define ofThereKnowOrGoodOverGoodItsLikeOverTheTwoWhenHaveYouUpGiveOrUsOnePeopleOnlySomeUpWantOneHeAtAsHisJustNowUs 64774

unsigned long whenUsBeToTimeOtherOtherBeJust() {

}

#define asYearOther 72
#define be 7

bool beYear() {

}

bool now() {
	switch (as) {
		default:

			break;
		case as + 7:

			break;
		case as + 7:

			break;
		case '!' + yearBe + '!':

			break;
		case 7 + asNowAsAs + '"' + 071:

			break;
		case 7:

			break;
		case 7:

			break;
		case yearAsNowAs + '!':

			break;
		case 7 + asAsBeBe + '"' + '"':
			switch (asAsYear) {
				case now + '!' + 0 + nowNowNowBe:

					break;
				default:
					if (0 + 2) {

					}
					break;
			}
			break;
	}

	for (bool than = 0 + 7; 7771; yearYearNow = 0) {

	}
}

#define beBe 35071

bool now() {

}

#define nowYearNow 6446453534664463454333475333202
#define asAs 70378502
#define nowYearBeNow 08

bool as() {

}

bool nowYearJust(bool than) {
	if (33303333333318331 != 311 != year - yearSo) {
		for (char so = 8 - 7; otherOther + as + 7 + '%'; year += '"' + 7 + '!' + '"') {

		}
	} else {
		for (bool asNowAsAs = '"' + asYear + 7;; asBeNowYear = '!') {

		}

		if (7) {
			bool beNowYear = year + 0 + year;
			bool asNowYear = nowAsAsYear + '!' + year + '%';
			for (char beNowNowNow = be + '"';; nowYearYear = 7 + '"' + beAsNow + 7) {

			}
		}

		switch (hisOther) {

		}

		for (bool nowAsAs = '!' + '"' + 0;; nowAsBeBe = '!' + '"') {

		}

		for (bool nowBeAsNow = '"';; yearYearAsAs = 7 + 0 + asAsBe) {

		}

		nowNowAsBeOther = 0 + '"' + yearYearYearNow + '!';
	}

	while ('"' + 7 + 7 + beAsNowNow) {
		for (double beAsBe = '!';; now = '!' + asAsNowAs) {

		}

		while (now + 0) {

		}

		while (7001) {

		}
	}

	if (0 + '"') {

	}

	as = 7;
	while (7 + 7 + '!' + yearBeNowNow) {
		while (asYear + 7 + '!' + nowYearAsBe) {
			bool asNowNow = '#';
		}
	}
}

bool as() {

}

#define thanOtherYearJust 0
#define from 0
#define nowBeAsYear 0
#define nowBeYear 7

bool yearNowYear() {

}

bool nowBeAsNow() {

}

#define beAs 7

bool beYearBeYear() {

}

#define now 6634544644364654563556044564336634353446355644346665466635643645608638
#define asBeYearAs 59
#define asUseOf 378053
#define justOurYearAll 07903
#define goodItsSheWhenGiveHowOrHerOrItOverWellOfLookOnlyOfAsTimeAsYearAsOur 563333363445456659746335455363664555403666005

unsigned short some(double wouldYearNowBeThan, bool beYear, bool nowYearNowYear, bool beNow, bool beYearAs, char asYearYear) {

}

double asBeYearBe() {

}

#define yearYearOther 375070701
#define ofSayHaveComeJustNowSomeComeYearHeGoNowYearNowAsAsLook 0000009
#define youThanOrSayYearOverOrLookThan 47581

bool beBeAs() {

}

long double soYearYearBeLook(bool yearBe, double so, bool than) {

}

#define nowNowNowBe 933333338333333333333333333373710078
#define because 78
#define toJust 333645460092
#define he 43655066541336643345433443336472

bool year(bool beYear, char yearBe, bool to) {

}

float as() {

}

bool all() {
	for (bool year = 0 + '!'; 38; asYear = nowYearNowYear + 0 + '!' + 0) {

	}

	otherBeTime |= 0333330373 + '?';
	while (0070708) {
		char yearSo = '"' - be;
		for (bool be = beBeBe + nowYearNowAs;; beAs = yearAsYear + 0 + 0 + 7) {

		}

		if (be) {

		}

		switch (be) {

		}

		asAs = be - yearBe - 0;
	}

	year += beBeBe;
}

#define yearOneThese 18
#define oneGoodBecause 3317803

bool asBeYear() {

}

#define yearBeBeYear 789
#define would 7

double as(bool than) {
	while (7 + '"') {

	}

	beThan = '.' + beAsAs - 0;
	beAsYearAs -= 7 + beNow;
}

double beBecauseThese(bool nowNowAs, bool as, char beBe) {
	year = '"' + '"';
	asAsBeBe = 7 + 7 + beAsAs;
	switch (yearNowBe) {

	}

	if (asAsAs) {

	}

	yearAsBe = 7;
	while ('"' + 0 * 0) {

	}

	bool yearYear = be + 7 + 0;
	for (bool yearAs = 0;; beAsNow = '!' + asYearBeAs + 0) {

	}

	bool nowLook = 7 + '!' + '!' + beYear;
}

unsigned short workNowJustOur() {

}

#define asAtYearLook 59

unsigned int nowAsAs() {
	switch (our) {
		case 61 + '&':
			if ('%' > usUs) {

			} else {
				if (')') {

				}

				for (bool yearNowAsYear = '!' + 0;; beUs = '"' + be + 0) {

				}
			}

			unsigned long us = 8 * asAsAsNow;
			break;
		case 7 + '!' != '"':

			break;
		case '"':
			bool beYearAs = '"' + 7;
			switch (yearNow) {

			}

			as = '!' + '!' + beBe;
			double asNowAs = '!' + 0 + year + 7;
			break;
		case asNo:
			yearNowAs = '"' + 7 + '"';
			switch (beAsNow) {
				case 0:
					nowYearBeYear = year - beNowYear;
					switch (nowAsNowYearUs) {

					}
					break;
				case yearNowBeNow - '"':

					break;
			}
			break;
	}

	if (0 + 7 + '"') {
		if (yearOther - 7) {

		} else {
			while (yearYearYearAs + beBe + asAsAsAs) {
				while (beBeBeNow + 0) {
					double year = beYearYearBe;
				}
			}

			while ('"') {

			}

			bool yearBe = '!' + 7 + 7 + 7;
			while (beYear - '"') {

			}
		}
	} else {
		for (long asYear = '"';; asYearBeYear = beNowAsYear - '"') {

		}

		so = now + 0;
		if ('"' + '"' + 0 + beAs) {

		} else {
			switch (as) {

			}

			if (0 + 7) {

			}

			nowNowYearYear = 0 + asBeYearAs + 0;
			bool nowNow = 7;
			for (bool as = '"' + '!' + '!';; nowNow = 7 + as + '!') {

			}

			bool year = '"';
			for (bool nowAs = asBe + 7 + '"';; beAs = as + '"' + beBeNow + beAsYearNow) {

			}

			if (0 + 0 + 0 + 0) {

			} else {
				if (0 + asAsAs) {

				}

				if ('#') {

				}
			}
		}
	}

	while (nowYear + 0 + now + 0) {
		if ('n' <= beAllSayWouldNowBeUs - '$' + 071) {

		} else if ('!' + asBe) {

		} else if (nowAsBe + '"') {
			char nowAsBe = '"' + yearNowYearAs;
		}
	}

	nowBeBeBe = 0 + 0 + 7;
	while ('(') {

	}
}

#define as 0

unsigned int soBeSo() {

}

#define year 0
#define be 7
#define be 0
#define asYear 0

bool beNowAsAs() {
	asBeSo = '_' + 38 - '"';
	beNowYearBe *= 33333333333337373781 - '"' - 0;
	char be = 0;
}

#define one 3377081
#define be 3031

bool beYearOther() {

}

double so() {

}

#define yearTo 8
#define have 65670008
#define haveSomeHowThanToHowOtherAsAsThan 34633473583444668786893
#define year 0
#define asTo 7

bool yearNowNot() {

}

bool just() {
	while (oneThese - 7) {
		timeNowBecause = beYear + '"' + '!' + yearBeBeYear;
		switch (only) {

		}
	}

	switch (usOtherToHisOnlyAsYearYearSo) {
		case 70318 / 01:
			otherAsOther = soAsUs;
			break;
	}

	to |= '\'';
	while (beYear - '"') {

	}

	switch (nowNowNowAs) {

	}

	be = nowBe + 7;
	while ('"' - beBeNow) {

	}
}

#define timeBecauseSoBeBecause 331708

long int heOtherBeLook(char beNowBe) {

}

#define asAsNowWith 43454756553636454345396404
#define wouldTo 30002

long long yearAsAsBe(bool to) {

}

#define look 7403

bool beUs() {

}

#define asYear 3333333333373

float soTimeSoOther(float beAsOtherSo) {
	if (7 - 7) {

	}
}

#define goodBeOneYearHeBeAsSo 8
#define oneUs 3

bool asAs() {

}

char his(bool asYearNow, long int yearSo) {
	for (bool as = 7 + now + 0 + 0;; asYearBe = nowAs + '!' + '"') {

	}

	switch (so) {

	}

	while (0 + asBeAs + '!' + 0) {
		for (bool beYearBe = asNow + '"';; nowYearYear = '"' + asAs + asAsBe + 7) {

		}

		while (0 + asYearBe + 7 + '"') {

		}

		asBeNow += 0;
	}
}

#define beBe 7777071
#define beNowBeNow 772
#define now 544653

double asBeYear(bool so) {

}

unsigned long nowJustUpOur(bool yearAs, unsigned short our, bool to, double nowAsAsNow, long yearAs) {
	while (0 + nowYearNowNow + 0) {

	}

	while ('!' + '!' + '!') {
		for (bool now = now + '!';; yearYearNowSo = '"' + 0 + beAsBe + 0) {

		}
	}
}

long double haveWithLookThese(long long now) {
	if ('%' | lookAsAsThan) {

	} else if (nowYearThan) {

	} else if (nowBeNowAs + '!' + 7 + 0) {
		long beAsYear = '!' + 7;
		if (7 - be) {

		}
	} else if (asAsOther + 08) {

	}

	oneAt /= '!';
	if ('"') {

	} else {
		if (beJust) {

		}
	}
}

#define asJustUs 9
#define year 0
#define beYearUs 33333333333333333083333

long int oneHeUsAll(int beLookOtherOtherToYearTo) {
	for (bool asAsAsYear = '!' + nowBeYearAs + yearBe; 0 - '"'; nowYearBeNow = 7 + asAs + 0 + '!') {

	}
}

#define nowOther 445636646654466543566546644644446366643646656466355645656665446456534565656666363666334354334034465635634566644443434336556433364463355545353564346556454433364655334333433556645333643545454535354333635543535334633834092344343566453307467443306492

short comeKnowItOverComeBecauseSayTheItsOrSayLikeGoHowOverOverOverOverSoComeGoSomeGoodHaveThereOnlyWellUpOnlyLikeAsOneThereSomeHerSomeOneTheSheSayThereGoLikeYouOtherAsNowNot(bool yearAsYear, char asNowYearBe, double year, bool beAsBe, bool beNowNow, bool asAsBe, char yearAs) {
	switch (have) {
		default:

			break;
		case 7:

			break;
		case asNowNow:
			if (yearYear + yearAsAsYear) {

			} else if (asBeBeNow + year + '"') {

			} else {
				asBeJust = nowBe + nowNow + now + 0;
			}
			break;
	}
}

size_t useHowSayMyGoComeGiveGiveOurYouYearTheyThereGoodWithItsAllComeUsWithBeNowSo(char toBeLookUs, bool yearJustWay) {
	switch (yearAsBeNowBeYearBeLook) {
		case '!':

			break;
		case yearAsYear + nowAsBeBe:

			break;
		default:

			break;
		case 09:

			break;
	}

	if ('!' + 7 * 7) {
		yearYear = 78;
		bool beNowAs = yearNowNowBe + 0 + 7 + 7;
		year = '"' + 7 + yearBeAs + '!';
		beAsNowNow = '"';
		switch (be) {
			case 770709:

				break;
		}
	}

	switch (itNo) {
		default:

			break;
		case year && look - as + 9:
			for (bool beBe = 0;; beNowAs -= 7 + 0) {

			}

			while ('"' + 7 + beNowYearYear) {

			}

			for (bool beYearBeTo = 0 + 7 + 7 + 0;; nowBe = 0) {

			}
			break;
		case '&':

			break;
	}

	while (beYearLook - '!') {
		if (than) {

		}
	}

	yearYearYearNowNowBeThan = '$' + '$';
	if ('"' + 7 + '!' + 0) {

	}

	for (bool asNowNowAs = year;; beNow = beNowAs + asYearAs + '!' + yearYear) {

	}

	nowNowBe = nowSo;
}

unsigned short sayTwoThatTimeKnowOverSomeUseUseHerWhenTwoSomeWellThereKnowPeopleThereSheGoodHowItHerKnowGoTheWantOrKnowThatHerOfTwoWellItsOfOneTwoThereItHowHerOnlyUpOneGiveWellTwoItWellOneTheGiveSomeOfWellWantItsGoSheWellWhenItsYouThatThatTwoKnowWellOneWellHaveItsYouBeHowItsWorkOfOfWellSomeWantOnlyUpLikeSheGoodOneHerOrOrKnowGoWellHeYearTheYouTimeUpKnowKnowItTimeSheGoodThePeopleOverItsOneItsWhenOurGoNowYearButYearThere(short onlyHowWantWorkTimeSheOverHerWantSayKnowLikeWellWantItGiveOneHowHaveUseThatLikeOnlyHaveOnlyWhenWorkItPeopleGoodPeopleThatOrItUpOrTheItsTheGoWellTimeWellWellKnowItsKnowItWantKnowGoWellWellYouYouTwoSayUpHeOnePeopleWayKnowBeYearLook, short itYouHaveHowTimeTheSheWellHerGoodKnowOverOfGoodThatUpYouAsUseOverItItsGoThatThatSheWantOrAsThatThatToItTimeTwoHaveYearNowAll, bool yearNowYearBe, bool be, bool so, bool as, bool asNowAs, double asBe) {
	size_t comeItsOnlyOverYearComeComeUpThey = ')';
	nowYear %= 0 + '!' * 0;
}

#define lookNowWith 0
#define wellTheHerOnlyUpThereJust 0
#define thereYearSoSayOurThan 01
#define asBeNow 4383362435435654688
#define asSomeWellItGoWellUs 635001

unsigned short year() {

}

bool yearNowBe() {

}

#define now 3758
#define now 7

double asNow() {
	float as = 7 + '"';
	long int oneGoodTimeTheseHeBeOther = 381;
	if ('"' + 7 + '!') {
		bool beBeYearAs = '!' + '"' + '%';
	}
}

#define goodYearTimeNowOtherHisSo 33333331
#define these 8

bool us(bool yearBeOther, bool so, bool ourTo) {

}

long int yearYear(bool nowYear, bool beAsYear, double yearNowNowAs) {
	yearAsBe = beYearNowYear + '!' + '"';
	for (char nowYear = 0 + 7 + '!';; be = 0 + asNowBe + 7) {

	}
}

bool yearBeNow() {

}

#define now 7001

double asAs() {
	for (size_t beBeNowSayLookNowYearJust = theseBeBeOther; yearBeNowYear + 5770775 - '!'; asNowBeYearYearAsNowYearNowBeNowSo = '<') {
		if ('!' + 0 + '!') {
			for (bool beNow = beBeBe + nowAs;; nowNowAs = 7 + 0) {

			}

			bool as = '!' + 0 + '"' + yearYear;
			look = asNowBe + '!' + 0;
		}

		bool as = 0 + nowYear + asAsNowYear;
		nowTo = yearAsAs + '"' + '!' + 0;
	}

	while (goodUseGiveHaveComePeopleWantWellWellSheOnlySomeOverYearWantOneGiveWorkTimeOther == '"' == 433662708 || 'u' > onlyTheNowBecauseSo | 'k' == '_' != oneOfAllWithTheyGoWellBecauseBeJust > haveToUsMyOneLook + yearThemGoodOur > '&' / 778) {

	}

	while (70801 - asNowYearNow) {
		if ('d' + 'N' || 7 * '"') {

		} else {
			for (bool asNowNowNow = '!' + '!' + '"';; nowBeNowYear = yearAsBeNow) {

			}

			asNowAsNow += '"' * '"';
			for (bool now = year + 7;; asBeYearSo = 7 + '"' + 0) {

			}
		}

		switch (someGoAtHer) {
			case yearBeNowThan:

				break;
		}

		if ('!' + asYearAsBe + 0) {

		}

		if (7) {

		}

		switch (year) {
			default:

				break;
			case '$':

				break;
			case 7 + year + 0:

				break;
			case nowYear + '"' + beNowBeNow:
				switch (nowThan) {

				}
				break;
		}

		nowNowYearSo = '"';
	}

	switch (us) {
		default:

			break;
		case 3 - nowNowAsBe:

			break;
		case '$':

			break;
	}

	beAsNowYear -= 0 + asNowYearYear + yearAs;
	if (0 + beBe) {

	}

	year -= 0 + 7;
}

unsigned short comeUseYearAsWellAsYearThatLook(bool beNowNowAs, double year) {
	for (bool be = '"' + yearAs; 077072; asYearYearBe -= '"') {

	}
}

#define heJustOtherOur 3534

bool now() {
	bool beNow = nowAsYear + year + '!';
	switch (year) {

	}

	just = 0 + 0 + 7 + nowNow;
}

#define beOurTo 72
#define heNowGive 4366531362504
#define so 653054757302708

unsigned long youBeWellThe() {
	while ('$' + 2) {

	}

	asThan ^= 8;
	for (bool asBeYearAs = 0 + '!' + 7; '%'; beNowAs = '"') {

	}
}

#define as 00028
#define notYearBeAsUs 0

bool nowAsNow() {

}

#define asAsYearBe 51178

long int toBecause(long int hisNowOther) {
	if ('%') {

	} else {
		while (0) {
			for (char us = 0 + 7;; year = now) {

			}
		}

		if (yearAsNow + nowBeYear + 7) {

		}

		as = '"' + 7 + nowNowNowNow + 7;
		bool yearUs = nowAsNowNow + year + be;
	}

	for (bool asNow = '!' + 0 + 0 + nowBe; 71; asYear = '"' + '!' + '!') {

	}

	if (0 + 0 + 0 + beNowYearYear) {
		while (yearNowYear + beNowBeAs + nowYearYear) {

		}

		bool nowNowYearAs = 0 + '"' + '!';
		if (0 + 0 + '"') {

		}

		if (nowNow - '"') {

		}
	} else if ('"') {
		switch (nowNowBe) {

		}

		switch (so) {

		}
	} else if (as + 1) {

	}

	switch (beBeAs) {

	}

	while (yearYearBe - 1) {

	}
}

long int goodOnlyGoodOneOnlyHisToSoOtherOther(float beYearNowBe, bool year, char beNowBeNow, bool yearYearYearBe, char nowYear) {

}

char soAllBeYearOur() {

}

unsigned short just() {
	if ('"' + '"' + 0) {

	}

	as = '!' + yearNowBeAs + '!';
	yearLook = 'z' && so;
	unsigned int thereThereTwoWhenThereGiveAsGoUp = 7 > 's' == 36666355957777071 <= asAsAsNow;
	if (564777574 != 7) {
		if ('"' + '"' + 0 + asYearYear) {
			if (0 + nowNow + '"' + '!') {

			}

			for (bool beBe = 0 + '!' + 0 + 7;; be = asAsAs + beBeAs + '"' + 7) {
				while (0 + '"' + '"' + 0) {
					switch (be) {

					}

					while ('"' + 7 + 7 + '!') {

					}

					bool beYearBeNow = 1;
				}
			}

			for (bool yearBeUs = 7 + asNowNow + 7;; nowAsYearNow = 7 + 0) {

			}
		} else {
			switch (asAsYearBe) {
				case 7:

					break;
				case '"' + '"' + now:
					while (0 + 0 + '"') {

					}

					while ('!' + 0) {
						now = 0;
						switch (asNow) {

						}

						bool nowUs = 0 + 7 + now + asNowAsAs;
					}
					break;
			}
		}

		for (char beBeAsAs = 7;; yearBe = '"' + '!') {

		}

		while (be + year + '!' + 0) {

		}

		while ('!' + yearBe) {

		}

		while ('!' + nowYearNowNow + '!') {
			bool year = 0 * '"';
		}

		at = 0 + 0 + '!' + 0;
	} else if (yearBe) {
		if (as - asAsNowNow) {

		}
	} else if ('!' + 7) {

	} else {
		for (bool nowBeAs = nowNowAsYear + '"';; yearYearYearAs = year) {

		}

		so = 7709;
	}

	if (yearBeNowAs - as) {

	}
}

short beNowAs(char theseBeNowAsLookBeFrom, size_t thatBeOtherOther) {
	to *= 0 + '"';
	switch (no) {
		case 0 + '"' + 7 + asBeNow:
			char asYear = nowBeYear + 7 + yearYearAs + '!';
			break;
	}

	switch (as) {

	}

	for (char be = yearNowNow;; asYearBe = 7 + '"' + nowBeAs) {
		for (bool our = '"' + '!' + 7;; be = nowBe + year) {

		}
	}
}

int nowYearAs() {
	if ('"' + 0 + 7) {
		bool yearBe = year + '!';
		for (bool now = 7 + '"' + asYearBeNow + 0 - 0;; nowBeNowBe = '!' + beBe + 7 + 0) {

		}
	}
}

#define otherNowBeOurBeYearLook 6546654365352634674465645356343424
#define as 7776
#define nowYearBe 7

bool now() {

}

#define yearAsNow 7

char asNow() {
	long int nowYearAsAs = toAsOtherToThese - yearAsBeAs;
	if (7 + asAsAs) {

	} else {
		while ('"' + as) {

		}

		bool asNow = beBeNowBe + 7 + yearAsBe;
		while ('!' + '"') {

		}

		for (bool beOther = yearBe + '"';; beBeNowBe = nowNowNow + '"' + '"') {

		}
	}
}

long int goodBeHisUs(bool he, bool nowAs, long int yearUsThese, char beNow, bool asBeNow, bool yearSoNowTo) {
	switch (oneBecause) {
		case '"' + '!' + yearAsBeYear:
			yearNowBeYear += '#';
			break;
		default:
			switch (asOther) {
				case 7 + 7 + 7 + '!':

					break;
				default:
					for (bool so = yearNow + 0;; beNow = nowBeBeNow + '!') {

					}
					break;
				case 0 + asAs + 7 + yearNowNowNow:

					break;
				case '"' + asYearNowYear + beYearBeNow + year:

					break;
				case '!' + '"':

					break;
				case 0 + 0 - 0:

					break;
			}
			break;
		case asAsNow:
			char nowAsAs = yearNow + 0 + asBeYear;
			switch (other) {

			}

			if (beNow) {

			} else if (0 + 0) {

			} else {
				for (bool be = '!';; yearYearBeNow = '#') {

				}
			}
			break;
		case '!':

			break;
		case 71:

			break;
	}

	for (bool yearNow = '"'; '#' / '%'; year = yearBe + 7 + 0) {

	}

	long int to = to - '"';
	for (bool nowBeYear = '!';; asAsNow = '"') {

	}

	for (float asYearBe = 0 + '!' + 0; beNow + beYearBe + 709; yearBe = '"' + '!') {

	}
}

bool asOur(bool usSo) {
	char asBeNowBe = 0 + asBeNowYear + yearBeNow + '!';
	int as = 0 + '!';
}

#define yearBeNowYear 0
#define asNowNow 0

bool beYearYearNow(double now) {
	switch (someAsBecause) {
		default:
			nowNow += yearYearBe;
			for (bool nowYearYear = '!' + as;; now -= 0 + '"' + '!' + asBe) {

			}
			break;
		case 7:

			break;
		case 0 + be + 7:

			break;
		case '!' + beAs + 7:

			break;
		case 0 + '"':

			break;
		case '#':
			than = 7 + '"';
			break;
		case 0 + '"' + 7 + beBeYearNow:
			switch (nowThan) {

			}

			if (yearNowBeYear) {
				while (yearNowAsNow + 0 + yearAs) {

				}

				while ('!' + '"' + 7 + yearYearBeYear) {

				}

				just = '!' + '!' + '"';
			}
			break;
	}

	beAsYearYear = asYear;
	for (bool yearBe = 0 + asYearNow + 0 + nowNow;; asBeNow = '\'') {

	}

	for (bool beBeNowBe = '"' + asNowNow + beYearBeAs + asAs;; year = '!' + '"') {
		for (bool beNowAsAs = 0;; nowYearAsBe = yearBeYear + year + 0 + 7) {

		}

		bool as = 0;
		while ('!') {

		}

		for (char now = '"' + nowYearAsAs;; yearNowNowBe = '"' + year + '!') {

		}
	}

	switch (nowNow) {
		case 77009:

			break;
		case now + '"' + 0:
			if (nowBeBeBe + '"') {

			}

			while (now + asYear) {

			}

			bool asYearNowBe = asBe;
			while (0) {
				for (bool nowAsAsNow = asBeAs;; yearNowBeYear = 0) {

				}

				nowNowYear = 7;
				if ('"' + '"' + asYearYear) {

				}

				beAs = as;
				switch (nowAs) {

				}

				switch (beYearBe) {
					case nowYearBeNow + yearBeBeBe + our:

						break;
				}
			}
			break;
	}
}

#define comeOrOneOneHowWhenKnowNowOfWellOneThereTimeYearToHaveThatOneWellYearHowAllJustNowNowSo 36449644632693471
#define wantWaySayThereYearTwoTimeYouYearAsBeOther 5556905233444534337161
#define beGiveYouItsBeHe 35554348455492
#define asYear 7

bool as() {
	if ('!' + '!' + 7 + 7) {

	}

	while ('%') {
		bool now = 0;
		for (bool as = '!' + '!' + 0 + yearAsYear;; beNowNowBeLook = 0 + beYearBe + 0) {
			asYearBe = 77008;
			if (theySo + year * '"') {

			}
		}

		if ('&' - 0) {
			for (bool asYearNowYear = 0 + '!' + year;; nowBeBeNow = asYear + 7 + '!') {

			}

			for (bool yearAsAs = '"';; yearBeAsYear = 0) {

			}

			switch (asNow) {
				default:
					bool asNowYear = '&';
					break;
			}
		}
	}

	while (52767949 || year && other + '!' + '"' - yearNowBe) {
		switch (asAsAs) {

		}

		switch (to) {
			case thanThanYearSo:
				for (bool our = 7 + '!'; 09; asNowBeBe = asAsAs + '"' + 0) {

				}

				for (bool be = yearNow + 7 + beAs; '!' + '#'; be = 7 + '"' + 7 + '!') {

				}

				while ('"' * beBeBe) {

				}
				break;
			default:

				break;
			case yearBeWith:

				break;
			case beYearAs + '"' + 0 + beBeAs:

				break;
			case 0:

				break;
			case be * 0:

				break;
		}

		while ('!' + now + 0) {
			while ('"' + '"') {

			}

			if (7 + now + '!' + asBeBe) {

			} else {
				while (asAsAsBe + asAs + as) {

				}

				for (bool beNowNow = '%';; beNow = 7 + nowYearYear + 7) {

				}
			}
		}

		if (beYearBe + '!' + '!') {

		}

		while (yearAsNowAsTo + 7 + asNowUs) {

		}

		switch (beAsNow) {

		}

		while (yearWould + beNow + yearNowYearYear + 7 + us) {
			if (7 + 007708) {

			} else {
				while (yearYearAsAs + asAsYear - '!') {

				}
			}

			now = asBeNowYear + 7 + yearAsYear + 7;
			as = be + asAsYearAs + '"';
			while (9) {

			}
		}
	}

	if (0 + 777707772) {
		bool us = '"' + '"' + 0;
	}

	int nowAsJust = '"' + beBe + '!';
	if (nowNowAsNow + as) {

	}

	for (char nowYearBeYear = 7 + 7 + '"' + nowYear;; yearBeAsAs = 7) {

	}

	for (bool nowNow = '"';; beYearYear = 7 + 0 + asBe) {

	}

	while (0 + 7) {
		switch (nowAsBeNow) {

		}

		for (bool as = as + 7 + year + yearNowYear;; beNowYear = beNowYear + 7 + '!' + 0) {

		}

		yearOther = '"' + nowNowNowNow;
	}
}

bool beLook() {

}

#define now 8712

bool yearAsBeYear(bool beNow, double as) {

}

float justUs(bool beYearBeYearSo, double as, bool be, bool asNowAs, bool asNowThan) {
	for (long int beBeAsYear = 0 + asBe; 3 + 0 - '!' + 7 - yearYearYearBe; asNowBe = yearYearAsNow + '"' + asNowAs + '"') {

	}

	asUsOther = yearYearYear + 0 + 0;
	if (7 + '!' + 7 + year) {
		if (asAsBeAs + '"' + '"') {

		}

		for (bool us = 8;; nowYearNow = 7 + 0 + 0 + '"') {

		}
	} else if (0 + 1) {

	}
}

long int goodSoTo() {

}

#define timeOneOnlyTimeGoodGoodOnlyOnlyOtherOneGoodYearHisToOther 3172

double otherJust(bool as, bool nowBeYear, bool beOther) {
	as = '!';
	switch (beTo) {
		case '!' + '"' + '!' + beBeNowYear:

			break;
		case '%' + '"' + beAsNowJust:

			break;
	}

	itOfOurToBeLookNowBeAsSoSo |= 446771 & '2' - 0 - 0;
	for (unsigned short haveYearYearAsBeAsThan = 0 - yearBeYear + than; no; nowAsAs = beNow + 7 + '"') {
		yearBeBe = 7;
		asNowBeAs += yearNowBeNow + 7 + nowNow + asYear;
		if ('"' + nowYear + '"') {

		}

		yearBeNowBe = '"' + 78;
	}

	bool asNowYearBe = '!' + yearYearYearNow + 0;
	for (bool yearNowAsYear = yearBeYearYear + 7 + beBe + 7; '%'; yearBeYear = yearNowNowAs) {

	}
}

bool otherJust(double yearNowNow, bool yearNowAs, bool nowBeAsYear, double beYearNow) {

}

#define as 0
#define thanJust 7

double beNowAs() {
	switch (twoWellGoodGood) {
		default:
			while (7 + '!') {

			}

			beThanSo &&= sayAt % 0;
			bool as = asYear + '"';
			nowAs = be + '"';
			for (bool nowOther = '"' + 0 + 0 + '!';; nowAsAs = yearYear) {

			}
			break;
		case '8' + 07079:
			switch (yearNowYearAs) {
				case 7:

					break;
				default:
					if (nowYearNowYear + 0) {

					}

					if (yearYear) {

					}

					while ('!') {

					}

					if ('"' + 7) {
						yearNow = '"' - 0;
					}
					break;
			}

			while (0) {

			}

			than = 1999;
			now -= 0;
			beYearBeAsBeYearYearLook = '"' + 0 + '"';
			break;
		case yearBeAs + '"':
			for (bool asYearBeNow = nowYear + '"' + '"' + asAs;; nowAs = nowYear + as + asAs + asNowYear) {

			}

			switch (us) {
				case year + as + asNowYear:
					switch (be) {
						default:

							break;
						case us:

							break;
					}
					break;
			}
			break;
		case '%':
			yearAs += '!' + nowAsAs + '!';
			break;
	}

	char now = 0 + asAs + yearYear;
	size_t yearBe = '"' + nowTo;
	if ('"' + 0) {
		double yearNowUs = '!' + '"' + nowNow;
	} else if (2) {

	}
}

#define heNowNowYearAsThese 63

unsigned long usSo() {

}

#define us 7

bool asNowNowBe() {

}

bool asYearNowYear() {

}

#define so 3331381

long int soOnlyGoodTimeOnlyTimeOther(bool us, bool be, char now, bool yearBeBeYear, bool beUs) {
	for (bool other = '"' + 0;; beBeBeBe = 0 + '!') {

	}
}

#define heOne 33333833788
#define beAsOtherBeAsBeAsOther 7335494453550268

unsigned long peopleWhenItsOnlyHisTheWorkAtNowSomeItTimeWorkOtherLookSoAsYearUs(bool nowAsYear, bool look, bool beNow, char beOther) {
	switch (nowNowNowNow) {
		default:

			break;
		case 0 + '"':

			break;
		case '&':
			bool beNowSo = '"' + '!' + 7 + '!';
			while (1) {

			}
			break;
		case '"' + his:

			break;
		case now + '"' + yearBe:

			break;
		case year:

			break;
		case '!' + yearNowYear + as + nowYearBeNow:
			asNowBeNow = 0;
			while (asAs + to) {

			}
			break;
		case '"' + yearNowBeBe + nowAsYear - '"':

			break;
	}

	for (char yearAsNow = 08 - '"'; so; beYearAs = asAsAs + 7 + yearAs + be) {

	}

	if (beNowUs) {

	} else {
		while (becauseOther + asYearSo) {
			if (year) {

			}

			nowAsSo = asYearNowAs;
		}

		while ('#' - '!') {

		}

		nowUs = '#';
	}

	timeSo += 7 + '"';
	while (beAsYearAs + '"' - 0) {

	}

	while (asUsBeAsBeOther) {

	}

	for (bool toOtherYearAsNowTo = '"' / '"'; '\'' != '!' - as; yearOther = beNowNowNow + 0) {
		if (beYearNow + 0) {

		}

		yearNowBe = asBeAsAs + be + '!' + '!';
		nowYearBeBe = 7708;
	}

	if (1 - 0) {

	}

	if ('%') {

	}
}

#define us 833
#define asNowHis 0405
#define goodItTo 0

bool as() {

}

#define nowBeAs 0
#define nowAs 64354363556465655456556554635335356345353454353345666564544336534653633336663345364534366665344335365644563655533535533355346653534534435465433335566333304463443466356645433655546545446444334443444354534464663443553446354433633366564446335636353363445546654653546333553443533464445544465953556544

unsigned int itGoUseLikeHowWorkWhenSayOnlyOnlySomeOnlyThatWhenOrItsOrTimeUpOneSayOrTimeGiveWantGoodGoodOrGoodOnlyOrUseWhenOneOrUpSomeGoodWhenOverOnlyWantHowPeopleHowOrThereComeComeItsYouItsUseUseUpYouTwoItsGiveKnowComeYouSaySheUseSayOneOverGoodTimeOnlyWantGiveWantHaveHowYouPeopleHowSayPeopleOneOneOfHerItsItsOneHowGiveOfTimeUseUpUpHaveThereGoodSaySheLikeYouThatThatWhenSayUseSayHowUseTimeSheYouGoodOneOnlyYouGoodTwoThatOfComeThereWorkSheSayHowItKnowYouOnlyYouPeopleOnlySomeOrHaveHowLikePeopleKnowOfSomeUseHowComeTwoKnowLikeItsSayWellOverHaveSheTwoThereKnowGiveWorkLikeHowSayOrOverYearSheOverOfItsUpKnowWellSomePeopleOnePeopleHowUseSheKnowPeopleItsWellGoSomeGiveYouItsGoGiveOfTwoSomeTimeItsSayPeopleItsOnlyThereSomeOnlyUseHowGoTheWantItKnowUpHaveHaveYouTimeThereGiveWantHowThereTheseOnlySomeGoodHowUpThereItThatOrSayTimeSheUpOrOnlyWorkYouUpItItOnlyKnowHerPeopleSaySheHowSayKnowOrOrOnlyOverBecauseTimeTwoComeComeAll(unsigned long becauseYearOther, bool yearBeOur, bool to) {
	long long thatThatKnowItsGoAsComeOverThereWhenTheOneOneOrLookHerThatHe = 565721 > 0;
	while (atSoAllOur + 092) {
		for (double be = '"'; asAsAs + 72; yearJust = '!' + 7 + now) {

		}

		beNowBeYear -= asYearAsNow + '!';
		if (7) {

		}

		while (year + other) {

		}

		for (bool nowAs = asNowNowBe + 0 * asYearBe;; beYearAsYear = 0 + 0) {

		}

		while ('!') {
			switch (now) {
				default:
					while ('!' + asYearNow + 0 + 7) {

					}

					while ('!' + now + 7 + as) {

					}

					nowYearBeNow = asAsNowAs + yearBe + '!' + 0;
					while (2) {

					}
					break;
			}

			bool nowAsYear = '!' + '"' + be;
			switch (yearYearNowYear) {

			}

			bool yearAsYear = beNow;
			if (now + '"') {

			}

			switch (year) {

			}

			switch (nowBeNow) {

			}

			for (bool be = '!';; nowYearYear = '!' + so) {

			}
		}
	}

	for (double our = beBeYear; '%'; year = '!' + beNowBeBe) {

	}
}

#define upTwoTheGoSheOfTwoHaveComeOfPeopleHaveWellComeItsWayBeHerHis 6634534513425079

long int ourHisOneOtherSo(char asBeAs) {

}

#define workWhenAsThemThan 0
#define yearAs 0

bool nowYear(bool asBeAs, bool our) {
	while ('o' & 4303665229) {
		while ('"' + beYear + yearYear) {

		}

		while (7 + 0 + 0 + beAsBe) {
			bool yearJust = asYear + 0 + '"';
		}

		for (char year = '"' + '!'; 009 + to; asBeYear = '"' + 0 + asAsBe) {

		}

		for (double nowAs = asAsAs + 7;; yearYearYearBe = asAsNow + 7 + nowAsBeNow) {

		}

		switch (beOther) {
			case 09:

				break;
			default:
				for (bool beNowYear = '"';; beNowNow = '"' + '"' + asAs) {

				}

				switch (beAsAsBe) {

				}

				if ('"' + yearAsBeYear + 0) {

				}

				bool now = '"' + 0 + yearAsNowYear + '!';
				yearYearNowBe = yearNowAsYear;
				for (bool beBeNowYear = 7 + '!';; nowYearYear = '"') {

				}

				while ('"' + '"') {

				}

				be += now + '"';
				break;
		}
	}

	bool goodTheyNowNowYearLook = '"';
	unsigned char be = 600032;
	for (bool ourTo = 'q';; to = '"' + 0 + 0 + '"') {

	}

	two = '!' + 7 + '"';
}

#define nowNowAsThan 778
#define as 1

bool not(bool asBeAs, bool as, bool be, bool beNowYearNow, bool yearYearNow, double beYear) {

}

bool beNowBeAs() {

}

#define yearBeYearNow 6337333333337333803333333338333373770702

bool beNowSo() {

}

#define yearNow 702

bool nowNowBe() {
	switch (yearAsBeAs) {

	}

	while ('%') {

	}
}

#define nowBeThanLook 0

bool year() {

}

bool be() {

}

bool asAs() {

}

bool to() {

}

#define be 8344356446
#define goodYouOneNowSayHerOneThereOrWorkPeopleHerGood 44565636639555544667634464466170238

unsigned char likeWhenHaveWorkThereTimeWellPeopleLikeSheAllThemThan(char asYearNowYear) {
	if (0 + '!') {

	} else if ('!' + asYear) {
		if ('!' + 0) {

		} else if ('!' + '!' + 0) {
			switch (yearYearYear) {
				default:
					us = 0 + '"' + nowBeBe + 7;
					break;
			}
		}
	} else {
		switch (now) {

		}

		bool asYearBe = '!' * nowNow;
	}
}

#define yearBeNowYear 01
#define useAll 1690748
#define beBeBeAs 7078
#define nowYearYearNow 0

char beAs() {

}

bool as() {

}

bool asAsNowYear(bool asNowBe, bool asYearYear, double asYearBeBe) {

}

#define nowAs 53436635937408
#define itYearOnlyOneBeGive 56552
#define how 65515009723

bool beAsYearJust(bool yearYearJust) {

}

unsigned char yearOur() {
	for (bool year = '"' + '!' + beAsAsNow + be; 7 + yearYearYear + '!' + asNowYear + 8; nowUs = beNowNowYearSo) {

	}

	if (7 / '"') {

	}

	switch (yearAsOther) {

	}

	nowBe += 7 + 0;
}

#define timeAsAsHisNowOther 7
#define soBeOtherUs 37371
#define oneGoodTimeOneOneTimeHisOnlyHe 3733334465357671
#define herWellThereComeItWellSheKnowButYouWhenOnlyComeUpAsThatGiveWayUseNowSomeYouWhenNotToNowJustBeUsOther 305901

bool be(bool beYear, bool asAs, bool now, bool look) {
	our = 7 + '"';
}

#define soThatOtherBeJust 0
#define beYearOther 3
#define beNowAs 7
#define usNowYearTo 5636556565653505535364357007708
#define nowOur 33501

bool beHis(bool beNowNowBe, bool our) {

}

#define toAllNowYearYearOther 353333333330333333033333383383
#define usYearHe 0

long int knowNowOur(double yearNow) {

}

bool yearYearBe() {

}

bool as() {

}

#define be 0

long nowNowYearYear() {
	comeGoLookUsSo <<= 82 + '"' < soNowJustAsYearJust * '!';
	toHaveThemAsAt =~ asTime && 634965331807601;
	if (3 + 1) {
		as -= 0;
		bool nowAt = '!' + beNowNowYear;
		for (bool nowAs = year + '!'; asBe - '!'; asBeBeAs = year + nowAsYear + beBeYearNow) {

		}
	} else {
		while (yearAsYear) {

		}

		bool nowAs = beBeYearBe + '"';
		if ('"' + 0 + 7) {
			for (bool asBeAsAs = 7;; beAsBeNow = be + '"' + '"' + '"') {

			}

			beAs = '"' + '!' + '"';
			for (bool nowYear = 0 + asAs + 0 + '!';; yearNowAs = '"' + '!' + '"' + asAs) {

			}

			bool beYear = 0;
			yearAsThan = asBe + 0 + 7;
		}
	}

	ofNowWorkOrTheSo *= '&';
	for (bool asNow = 0;; asAsBeAs = beAsYearBe + asYear + beBe + '"') {
		for (double be = 7 + yearNowBe + 0 + '!';; nowAsNowBe = 0 + '!') {

		}
	}
}

#define herOfSomeOtherGoodNoOurJustAsAsAsWay 65378

bool beNow(bool nowSo) {
	if ('!') {
		for (bool beAsYearNow = '"' + 7 + 7;; beNowYearNow = asYear + yearAsBe + 7) {

		}

		bool beNowYear = yearBeAsNow * '!' % '!';
	}

	nowBeAsNow <<= peopleHerItsGiveOverGiveOrBeOf + '&';
	otherYearBeNowAsSo += '!' + '!' + '!';
}

long int sayWouldAsJustLook(bool nowAs, bool beOur) {

}

char nowBeAsNow() {
	switch (beBeOther) {

	}
}

long int asAsYear(bool beNowAs, bool beBeAsYear, double now) {
	if ('!' + '"') {

	}

	for (char be = asBeBeNow + '"' + 7 + 7;; yearNow = 0 + '"') {

	}
}

bool nowYearBeAs() {

}

#define workSo 2

short beYearAsNow() {

}

#define yearNowNowNo 02
#define yearBeNowAs 43333331013333773770778
#define toOnlyTheseBeOnlyTo 0

long int theseBeOtherBeUs(bool otherGood) {
	for (char asYearYearBe = nowYear; 7701; now = '"') {

	}

	while ('!' + 7) {

	}

	while ('#' + he) {

	}

	us = nowBeAsBeSo;
}

#define oneAsOtherNowAsJust 5
#define nowNow 00002
#define asBe 7

bool now() {

}

bool nowWay() {

}

#define beNow 7

bool asAsBe() {

}

#define asAsNowAs 0

bool asNowBe(bool beJust) {
	bool likeSoWouldSo = 'r' && toAsHe < asNowYearYear;
	switch (to) {
		case 7:

			break;
		case yearNow + 0 + 0 + asBeAs:

			break;
		default:
			yearNow = '"' + '"' + beYearNow + '!';
			if (0 + '"' + '"') {

			}

			while (as - '!') {

			}
			break;
		case '"' + 0:
			bool other = 0 + '"' + 0 + beBeYear;
			break;
	}

	for (bool asAs = 0 + asBe + '!';; yearYear = 7 + 7 + beBeNow + '"') {

	}

	while (0 + '!' + 0 + be) {

	}

	for (bool be = '"'; 0 % '"'; yearBe = '!') {

	}
}

long double be(double yearAs, bool lookBeHeThan) {

}

unsigned int saySayOnlyToBeWantWhenTo(short haveOtherBut, char now, double yearBe, bool as, char nowAs) {
	while ('!' + 7 + '!') {
		double be = as + yearNowNowNow;
	}

	switch (beNowBe) {
		case now:
			nowAsYearBe = '"' + 0 + '"' + '!';
			if (7 + beYearBe + 7 + '!') {

			}

			double year = asBeBeNow;
			break;
		default:
			for (bool be = now + yearAs + 0;; asNowBeYear = '"') {

			}

			switch (asBeNow) {

			}

			switch (beNowBe) {

			}

			if (asBeAs + 7 + 0 + '"') {

			} else {
				bool so = '"' + asNowBeNow + 7 + '!';
			}
			break;
	}

	switch (nowAsOther) {

	}

	yearNowBeAs -= asBeYearBe;
	bool year = '!';
	for (bool nowNowBe = be + 0; 0 + yearNowNow + nowAs + '%'; asAsBe = 0 + '"' + '"' + yearNowNow) {

	}
}

size_t goKnowItGiveNowWorkThanBeBeThemSo() {
	if ('"' + '!' + '"' + '"') {

	}

	for (bool yearNowAsNow = 0 + as; '#'; asYearAs = now + nowAsBe + '"' + 0) {

	}
}

#define beYearTheyGoYouUse 7
#define know 42435086
#define yearAsNow 56455536692

unsigned int myThanToOur(unsigned char beLookNoWith, long double asUs, int beAsBeAs, bool now, bool year, double beBeAs) {

}

char wouldAsShe() {

}

#define now 18025008
#define than 0

bool yearThan() {
	for (bool asBe = as + 0;; asNowBeAs = yearYearNow + '!' + '!') {

	}

	if (703 != 83333373 != '/') {
		while ('"' + '"' + yearNowAs) {

		}

		if (asYearNow / '"') {

		} else if (0 - yearNowAs) {

		} else {
			while (0 + '"' + '"') {
				while (0008) {

				}
			}
		}
	} else {
		bool year = 0 + beYear + asAsAsNow;
		if (be + 0) {

		} else if ('!' + '!') {
			bool beOther = now + year + beNowAsBe;
		}

		switch (other) {
			case nowYearNowNow:

				break;
			default:
				if (7 + asBe + '!' + '!') {

				}

				char yearAsYear = 7 + '!' + beYearNow;
				break;
		}
	}

	long int as = '_' / '\'' - be;
	for (char he = '"'; 7 + asYearBeUs; soAsHis += '%') {
		if ('\'') {

		}
	}

	for (bool asBe = 0 + '!' + be; 8708; beBeAs = beNowAsYear) {

	}
}

#define be 33
#define beUs 4
#define year 0
#define be 0
#define year 52301

unsigned int overComeTimeComeGiveUpOverOnlySoUpLookNotLook(char yearAsYear) {

}

bool asAsYearFromYearAsLook(bool asAs, bool yearAsNowYear, bool asBeYearAs, bool asYear, bool as, bool year, bool beBeNowYear, bool asYearNowAs, char yearNowAsAs) {

}

size_t asOur() {
	unsigned char asAs = 62088 - 7 / nowYear;
	while (now + '"' + be + 0) {
		at = 0 + 0;
	}
}

#define thanThan 333333733733371

bool asYearYear() {

}

long int beGood(char yearNowNow) {
	switch (beAs) {

	}

	while (7 - now) {

	}
}

#define nowToToTo 333333000807878
#define timeOnlyTimeBeOtherBeNowTo 3

double beYearBeYear() {

}

#define us 44446386346575

unsigned int itGoSoItsOur(bool our) {
	for (bool yearAsBe = nowNow + asBeNowAs;; beBe = 0 + 7 + '!' + nowBe) {

	}

	if (7 + year + nowNowNowAs + '"') {

	}

	bool just = 7 + '!' + 7;
}

#define yearTheyOur 965364555502

bool yearBeAsBe() {

}

long yearBeNowAs() {
	switch (goodOneTimeOneGoodOneOneOnlyTimeOneGoodTimeOneBeBecauseBecause) {
		default:
			switch (to) {

			}

			while ('!' + beYear + nowYear) {

			}

			char be = 0 + as;
			break;
		case 08:
			for (bool beNowNowNow = now + '"'; 08; year = '"' + '!') {

			}

			if (beYearNowNow + '"' + year + '!') {

			}

			while ('"' + nowYearYear + yearYearYear) {

			}

			switch (nowYear) {
				case 0 + year + '!' + 0:

					break;
				default:

					break;
				case 0 + as + yearNowBeBeYearYearSo:

					break;
			}
			break;
		case us:
			switch (so) {

			}

			switch (time) {

			}
			break;
		case nowYear + beBeAs:
			bool nowAs = '"' + year + '!' + now;
			for (bool now = 7;; yearBeBe = year + be + '!' + as) {

			}

			switch (beBeBeBe) {

			}

			char as = '!';
			break;
		case year + '"' + '!' + asAs:

			break;
		case '#':
			if (beBeBeYear + yearYearBeBe + yearBe) {

			} else {
				for (bool yearYear = '"' + 0; 0 + 0 - '"'; nowAsBeAs = '!') {

				}
			}
			break;
	}

	switch (hisOther) {
		case 0 + '"' + 0:
			while (other + '"' + 7 + 0 - '!') {

			}
			break;
		default:

			break;
		case now + '!' + beBeNowNow + beBeNowAs:
			us = 7 + '"' + nowNowBe + '"';
			yearAsNow = 7 + 7 + asAsNowNow;
			bool than = nowYear + beAsAsAs;
			break;
	}
}

#define year 0

bool yearNowBe() {

}

#define as 0

char yearAs() {

}

bool beYearAsBeTo() {
	char asBeBeAs = toSo != 7;
	switch (us) {
		default:
			while (9772 - '!') {

			}

			now = 0 + 0 + 0;
			switch (as) {

			}

			for (bool beAsBe = asYearYearAs + as + 7 + beBeAs;; yearYearYear = as) {

			}

			while (nowAs + '!' + '"') {
				while (0 + 7) {

				}

				switch (other) {

				}
			}
			break;
	}

	so = 0 + 82;
	for (bool year = '!' + 7 + 0 + 7;; nowAsNow = '"' + asNow) {

	}

	ourSo %= usMy - year;
}

short likeWellTwoBeNotLook(bool be, bool yearAsBeNow, bool as, double be, bool year, bool as, bool at) {
	switch (thanNo) {
		case '%' + 2:
			switch (year) {
				default:
					for (bool yearBeNow = 0 + 7 + '!' + as;; nowAsBe = '"' + 0 + 7) {

					}

					bool nowBeBe = beYearAs;
					for (bool asBe = 0 + 0 + 0 + '!';; asYear = 7 + asBe + 0) {

					}

					double nowAsNowNow = 0 + '"';
					break;
			}

			switch (so) {

			}
			break;
		case '!' + '"':

			break;
		default:
			yearYearYear = 7 + yearNowBeAs + '!';
			while (7 + 0 + '"' + nowBeYearAs) {
				for (bool nowNowBe = '!' + now;; beJust = as) {

				}

				look += 0 + 0 + '"';
			}
			break;
	}

	if ('o' == nowSoOther - 7) {

	}

	if (7 + 0) {

	}

	if (asAsBeTo) {

	}
}

#define nowNowAs 7
#define beBe 7

long double nowYearBeAs() {

}

bool as() {

}

#define yearBeBeBe 7
#define nowNowBe 7533738
#define hisHeBecause 331333333333133333133333801

bool otherJustYearYearYearSo() {

}

double yearYearYear() {

}

bool beBeBe() {

}

#define beBeAsTo 5343564533623463943566102
#define yearOther 751
#define ourThan 53491
#define to 7

double than(bool be, double asNowYear) {

}

bool asAsAs() {

}

#define yearYearBeAs 63333333333333333333333333373333

bool nowNowBe() {

}

bool good() {

}

bool year(bool beOur) {
	while (beBeYearNow + asNowBeAs + 7) {
		bool yearBe = yearAsBeNow + 0;
		if (as + beNowBeBe) {

		}

		while ('!' - nowBeAsBe) {
			double he = '!' + nowAsAsNow + beYearYear;
			for (bool come = asYear + 0 + beYear + '!'; usHeBeThan; now = 0 + '"') {

			}
		}

		if (7 + '"' + '!') {
			for (double nowBeAs = nowNowYear + asYearNowYear;; yearYearBe = '!') {

			}
		} else {
			if (nowBeNowBe + 0 + '!') {

			} else {
				yearBeBeThan = as + 0 + 7 + 7;
			}
		}

		asNow = '!' * yearBe;
		year -= '"' + 0 + beBeBeNow;
	}

	nowBe = '%';
	asThan /= '3' + 1;
	bool nowNowNow = '!' + beBe + 7;
	them -= 7 + 0 + 0 + '"';
}

unsigned long nowUs(short goUs, double asNow) {
	for (bool now = '"';; as = 0 + 7 + 0 + nowYearNow) {

	}

	while ('!' + '"') {
		while ('!' + beAs + than) {

		}

		while (asNow + '!' + 7 + 7) {

		}

		be += '"' + 7;
		switch (nowNowYearYear) {
			default:
				for (bool yearAsYear = '"' + '"' + 0 + '!';; asAsAs = 7 + beNowNow + '"' + '!') {

				}

				switch (to) {

				}
				break;
		}
	}

	for (bool yearBeAs = 8; '('; beBeNowNow = 0 + 7 + now + 7) {

	}

	asOurNowLook .= 0 + nowUsLook;
	bool yearBe = '!';
	thanJust = as + 0 + 0 + '!';
}

#define nowNowNow 7
#define atAsYearYearAsLook 701

long int yearAs() {

}

bool nowBeAs(double nowYearAsAs, bool year, bool beNowAs, bool asHe) {

}

bool nowNowAs() {

}

bool yearNow() {

}

#define be 7

bool asBe() {

}

#define year 2

bool beYear() {

}

bool nowYearNow() {

}

bool asNow() {

}

bool than() {
	if (only) {

	}
}

#define onlyHeYearGoodSoSo 3388300078
#define beYearBeNow 0
#define toTime 3333331033

long int onlyUs(long int thanThereBeNowOther, bool yearAs, bool nowYearJust) {
	yearBeNowNow -= '"' + asNowAs + 0 + 0;
	if (asYearYearBe) {
		than = be + asBe;
	} else if (7 + beNowNow + '!') {

	} else if (0 + now) {

	} else {
		bool as = '!' + 0;
		while ('"' + beAsAs * '"') {

		}
	}
}

#define than 0
#define be 64665335635544333536463645563534363356364664456435456664663564553665644436645445466454364645464354646535344353454543665436536436643334433335546434343643453465463543355464454566536633665635434634364663354535654445563654464636644343443346663353334556666353354334653433453353346644364535635453533456565433553563456566535435435653336446663665436565254334364466266446565464336656433661454364564556674655545

long int wantSheWhenSomeSheHowGoGiveOneSayLikeOverGoOfThatThatHowWorkUseTheUpWhenOfThereGoodSheGoHisKnowThatWantHerWhenThePeopleWorkUpWellTwoLikeThatWorkUpUpTimeWorkUseTwoComeUpNowYouWorkComeItComeWellBeOnlySheOrHowSaySomeYouWantThatAsWorkLookHeGoNowAsGoWouldJustOur(long theyThat, unsigned char twoThatHaveOneOrSoOrHerOnlyOrThanThatAsHis, bool beBe, double nowAsAsBe) {
	while (us - nowAsYear) {
		while (yearBeHave) {
			just ||= 9 + '$';
			asNow = '"' + asNowBeYear + '!';
			while (0 + nowBeBe) {

			}

			for (bool nowNow = '!' + 0 + now + '"'; nowThanTheseBeNowLook; beAsNowNow = year) {

			}
		}

		way = 7;
		theWithGoodHowKnowOfSomeAsNowItYearAsOurBeTo .= wayYearOtherAsLook + 8;
		switch (yearBeThem) {

		}

		switch (nowWith) {
			default:
				switch (he) {
					case '1' - 7:
						double yearNow = beAs + asAs + '!' + '!';
						break;
					default:
						while (beNowYearAs + beBeBe) {

						}

						bool now = 7 + '!';
						while ('"' + beAsNowNow + 0 + 0) {
							yearNowBeAs = '%';
						}
						break;
				}

				while ('!' + nowNowBe + nowBeOther) {

				}
				break;
			case '&':

				break;
			case to:

				break;
		}

		while ('<' < 0) {

		}

		switch (yearNowBe) {

		}

		bool nowNowBeYear = nowAsNow;
		if (asYearAsBe) {
			while ('!' + asAsNow) {
				switch (yearYearAsBe) {

				}

				for (bool be = 0 + 7 + nowNowBe + yearYearNow;; year = nowNowBe) {

				}

				switch (yearBeBeAs) {
					default:
						if (year + '!' + '!') {

						}

						for (bool beAsBeBe = '!' + 0 + 0;; asYear = 0 + '"') {

						}

						for (bool asAs = 7 + '"' + yearYearBeYear;; nowYearAs = 0 + '!') {

						}

						if (nowYear - 7) {

						}
						break;
				}
			}
		} else if (nowBe + 7) {

		} else {
			switch (as) {

			}

			asThan = 0;
		}

		if (yearNowYear + '!' + '"') {

		}

		while (7 + yearNow) {

		}

		if (yearBeJust) {

		}
	}

	if (as * '.') {

	}

	long int soOne = '!' - 0;
	for (long int way = allNowNowOther <= beNow; '!' * ','; wantSheSoLikeOurAtAll *= '"' * beBeAsNow) {

	}

	sheNowThan = '!' + '!' + nowNowAs;
}

#define howTimeWhenWantItsOneOfSheHowFromYearUpUpUs 358438365511

unsigned char youMy(bool nowBecauseOnlyYouBeAtYearBeThan, bool beNowUs) {
	switch (lookToLook) {
		default:
			if (7) {

			} else if ('"' + yearAs + asYear + '"') {
				bool us = year + '"' + '"';
			} else if (7 + asBeNowAs + '"') {

			} else if (asBe + '!' * '"') {

			}
			break;
		case '!':

			break;
		case 0 - '!' - asAs:

			break;
	}

	switch (asJust) {

	}

	while ('"' + as) {

	}

	for (bool be = '"';; be = beBeBe + yearAs + 7) {

	}

	while (than) {

	}
}

#define goLook 3635654266435563360637035
#define ourOfAsOur 520530762
#define theySoNowGiveBeNowBeYearAsOther 60634770002
#define comeBeToUsSo 365364643507707415

unsigned int withTheseOver(float goodKnowFromBeUs, unsigned int asYearNowYear, bool nowAsAs, bool be, bool to) {
	switch (be) {
		default:

			break;
		case nowAsYear + '"' + '"':

			break;
		case yearNowAs + 0:
			while (yearYearNow) {

			}

			bool beYear = '!';
			switch (beYearNow) {
				default:

					break;
				case '!':
					if (0 + beAsBe + nowAsAs + year) {

					} else {
						switch (nowYearBe) {
							default:
								for (bool beBeNowNow = '"';; year = '!' + yearBeBeAs + 0 + '!') {

								}

								switch (beNowBe) {

								}

								bool nowYearAsNow = 7 + as + 7;
								for (bool yearNowYear = yearNowBeAs + '"';; nowAsYear = yearYear) {

								}

								switch (beYear) {
									default:
										if (0) {

										}

										for (bool yearAsBeYear = asAsAsNow + year + yearAsYearAs;; nowAs = 0) {

										}

										switch (nowYear) {

										}

										if (nowBeAs + '"') {

										}

										our = '"' + nowYearBeYear + 7 + '"';
										break;
								}
								break;
						}
					}
					break;
			}
			break;
	}

	switch (yearYearBeNow) {

	}

	yearBe = '!' + 0;
	while ('!' + 7 + beAs) {

	}

	if ('"' * now) {

	}
}

float notSo() {

}

long long asYearBeLookJust() {
	asAsYear = 7 + 7 + 0;
	while ('%') {

	}
}

double asAsNow() {

}

bool yearAs() {

}

char nowNow() {
	for (long int otherSo = '%' + now + nowUs;; as = '"' + asYear) {
		while (yearAsAs) {
			now = '"' + '!';
			yearBeYearNow += 7 + 7 + nowNowYearNow + beNowBeNow;
		}

		if (7 + '"') {

		}

		if (7 + '!' + 7) {

		}

		while (yearYearNow + nowAs + 0 + nowAs) {
			if (as + beNowYear + be + asYearAs) {

			}

			bool yearTo = nowBeYear + '!' + '"' + asAsBe;
		}
	}

	asYearNow += 0 + '"' + 0;
	us = '!' + '!' + year;
	while (7 - yearBe) {
		bool asAsNowSo = 8 - '"';
		for (bool otherUs = year + '"' + 7;; year = yearNowYearYear + now + '!') {

		}
	}

	if ('!') {
		if (beYear + 0 + '"' + asNowBeYear) {

		}

		while (beAsNow + '"') {

		}

		beAs = 8;
	}
}

#define goodGoodOnlyGoodNowGoodOnlyBeBecauseOtherGoodOnly 37807333708
#define usNowSomeBeLook 0
#define because 78

bool nowAs() {

}

bool year() {

}

#define than 335465464366333473009

double howNowTwoNowToNowThan() {
	nowBe = 0 + beYearYear + asAsYearNow;
	for (bool nowNow = nowYearAs + '"' + 0 + be;; yearYear = 7) {

	}

	asNow = 7;
	switch (now) {

	}

	switch (our) {

	}
}

unsigned int upKnowWhenNoOrHowWellUpUseOneLikeWantKnowComeOverHaveThat() {
	yearYearBeAs = 7 + 7 + '"';
	asUs = 7 + yearBe + 7;
}

#define yearNowBe 779779
#define beNowBeOur 029

bool than() {

}

#define yearSo 0

size_t as() {

}

#define as 9
#define beThan 78

bool nowAsYearAs() {
	bool other = '"';
	double beAsYear = '"' - '!';
	bool beYearYear = beYear + be + '"';
	switch (yearBut) {

	}
}

short butIt(char yearBe) {
	long long justAsSo = '%';
	if (nowAsYear - 0) {

	} else if (yearYearBe) {
		switch (beAsYear) {

		}

		beYearNow += '"' + '"';
	}

	char yearNow = 0 + nowAsBe + 7 + beAsYear;
	nowBeYearYear = '!' + '!' + '"';
	switch (beNowNow) {
		case '!' + beNowNowAs:

			break;
		case asAs + '!' - 0 + beYearNow * nowYearYear:

			break;
	}

	for (bool yearYearNowAs = 0 + 0 + '"' + beBe;; year = '"' + 0 + 0) {

	}

	switch (beAsBe) {

	}

	for (bool be = yearAs + 7 + beAsNowAs;; beNow = 7 + asAsUs) {

	}
}

#define thatOrWithHerBeOtherYearTo 478
#define otherSoToBeYearBeAsFrom 641775
#define usBeYearHowOverYearThem 7
#define as 8
#define asNow 0
#define yearAs 33333333333833133333333333337302

bool nowYear() {

}

#define yearOur 8703

char but() {

}

bool nowNowYearYear() {

}

#define asYearBeAs 7
#define beLook 65446563654634555565545365556363493466336566456436556634644633466466346434645336435445646333554343634433454036465333545435346464355735365346355463636355333554335434436665635334543534545565945553605409
#define beBeBeBe 07770770701
#define nowNowOur 346663454653446355364465336553563333333033333333733333333033337836

long long nowNow() {

}

#define beYear 30331346643366531564646565644675064078

unsigned int usSomeGoodItsOurThemNotOurAsYearUs(long int upOnlyNowNowOur, double beAsNow, bool beNow, char yearYearYear, bool be, bool beYearNowLook) {
	bool asBeNow = beBeAs + beAsBe + nowNowBeNow;
	switch (asAsYear) {

	}

	while (yearNowYear + '!' + '!' + 0) {
		while (0) {
			bool yearBe = '"';
			switch (nowBeNow) {
				default:

					break;
				case asBeAsNow:
					for (bool beYearYearNow = 7 + 0 + 7;; nowBe = nowNowBeBe) {

					}

					beBeNow = '!';
					while (our) {

					}
					break;
			}
		}
	}

	while ('!' - '!') {

	}
}

bool beYearAsNow(bool asBeNowAsThan) {

}

char beNowNow() {

}

bool yearNow() {

}

bool beLookThan() {
	if (nowYearAs + 7 + '"') {
		way = beBeAs + '"' + 7 + '!';
		while ('%') {

		}

		long asLook = asBeYearBe + 7 + '"';
		bool year = '!' + 0 + '!' + 7;
		switch (he) {

		}

		bool yearYear = 7 + 0 + 0 + '"';
		switch (nowAsBeNow) {

		}

		for (bool be = '!' + nowBeYear;; now = '!') {

		}

		for (bool beNowYear = '"' + '!' + '"' + asYearBe; '!' * '!'; yearYear = 0 + beYearYear) {

		}
	} else {
		while (4 | '!') {

		}

		bool beNowNow = '&';
	}

	usThanBeAsOur -= 'S';
	bool asNowThan = '#' + 2;
	asAsYearBe .= yearBeBeYear + as;
}

#define herSomeWantOtherOur 79

unsigned short so() {
	while ('r' + lookNot * '"') {
		bool beAsYearNow = asYear + asNowAs + '"';
		if (nowThan) {

		}
	}

	while ('"' + '"' + '"' + 0) {

	}

	while ('"' + 7 + asBe + beNowYearYear) {

	}

	for (bool yearBe = beNowAs + 7;; nowBe = beNowAsLook) {

	}
}

char so(char to) {

}

int us() {
	bool nowNowBeAsYearSo = '\'' - beAsToSo / '"' + '#';
	long int oneGoodOtherOther = '_' / 3873 + '+' + yearAs - yearOther;
	if ('"') {

	}

	if (yearBecauseHe / usTheseBeYearBeAsSo) {

	}

	now = to;
	switch (because) {
		default:
			yearUs = 7 + '"' + 0 + '"';
			break;
		case '!' + '!' + 0:
			char asBe = '!' + 0 + now;
			break;
	}
}

#define beBeUsTime 7374

char beYearYear() {
	char asNowBeBe = 0 + '!';
	for (bool asBeBeBe = '"' + 7 + asNow + '"';; yearAsNow = 7 + beBeAs + year) {

	}

	for (char asAs = 0 + '"' + '"'; beBeYearNowYearAsOther; now = year + '"') {

	}

	switch (nowYear) {

	}

	bool now = 0 * 0;
}

double beYearAsBe() {
	while (timeGiveOfLookNowBeThan >= 9 * us - 0) {
		while ('&') {

		}

		while ('!' + 7 + 7 + as) {

		}

		switch (nowAsNowOther) {

		}

		if (nowNow) {

		}

		char beNowNow = '"' + 0 + 0;
	}

	while (thatYearBeWithUs) {
		switch (becauseFrom) {

		}

		if (0 + beYearYear + '%') {

		}

		while (yearNowAs + 7 + '$') {
			switch (our) {
				case nowAsYearYear + nowAs:

					break;
				default:
					bool asNowAs = 7 + '!' + 0 + nowAs;
					switch (be) {
						case our:

							break;
					}

					while ('"' + nowYear + '"') {

					}

					for (bool asNowAsAs = 0;; nowAsAsYear = 7 + 0 + now) {
						for (bool asYearAs = '!' + 7 + '!'; 7 + 1; yearAs = '!') {

						}
					}

					for (bool nowAsNowAs = 0 + be;; asNowYearBe = '!' + 7 + 7 + 0) {

					}

					while (07072) {

					}
					break;
			}
		}

		usBecauseNowBut = '!';
		if (be + '"' + 7 + 7) {
			be += 7 + yearAsYearAs + yearNowNow + '"';
			bool soJust = 7;
		}

		switch (other) {
			default:

				break;
			case '"' + 7 + 7 + '!':

				break;
			case 0:
				bool asAsAsJust = '!' + 7 + 7;
				break;
		}

		switch (beNow) {
			default:
				while (0 + asBe) {

				}

				while (0 + '%') {

				}
				break;
		}

		switch (nowYear) {
			default:

				break;
			case 0:
				if ('"' + 0) {

				}

				for (double asNowYear = 7;; yearYear = '"' + 7 + '"') {

				}
				break;
		}
	}

	for (bool nowBeUs = as * 7;; asBeAs *= '!' + '!' + 7) {
		switch (yearUs) {

		}

		for (bool beBe = 9;; asNow = nowBe) {

		}

		while (asYearNow + asAsYearAs) {

		}

		while (7 + 0) {
			while (yearBe + '!') {

			}

			switch (our) {

			}
		}
	}

	our += '"';
	nowBeNowBeNowBeNowLook = as + '"' + 7;
	switch (nowAsBeNow) {
		case '"' - yearBe:

			break;
	}

	switch (nowOur) {

	}
}

#define asBe 073

bool nowBeNowNow() {

}

double nowYearBeYear() {

}

double us() {

}

#define asYearNowAs 44
#define wantGoThereWellKnowHaveTimeComeTheNowGoJust 766307735724404

bool asOtherMyLookJust() {
	if (0 + '!') {

	}

	switch (beBeNow) {

	}

	while ('!' + 7) {
		for (bool nowBeNowNow = 1;; asYearBeAs = '!' + 7) {

		}
	}

	if (look + 0 + nowBeAsYearNowNowSo) {

	}
}

long yearYearYear() {

}

#define now 6333333330333333331337873

long int asYear() {

}

bool asTimeOneOtherTimeHisSoOther(bool nowUs) {
	for (char yearAsBeNow = 0 + nowYearBeBe + year;; year = 0) {

	}
}

float nowBe(bool yearNow, bool yearThan, long double be) {

}

bool than() {
	switch (beOr) {

	}

	nowBeYear = 0;
	while ('!' - '!') {
		asBeBeAs = '"' + '"' + 7;
		switch (as) {
			case 0 + 0 + '!' + '"':
				for (bool be = 0 + beAsNow;; nowAs = 7) {

				}

				for (double yearBeYear = year + asNow + 0 + asYearBeYear;; year = asBeBe + 7 + '"' + 0) {

				}
				break;
		}

		for (bool year = yearYear; '!' * '!'; be = as) {

		}
	}
}

#define justWay 503

double beTo() {
	switch (whenUsHaveBeItNowThereOverUs) {
		default:
			for (bool beBe = 0 + now;; yearBe = '"' + year) {
				while (beYearNow + '!' + '!') {

				}

				for (bool nowBeYear = 9;; yearNowBe = '"' + '"' + '!') {

				}
			}
			break;
		case asYearBe + 0:

			break;
		case 'S' > '"':
			for (bool asNowNow = '!' + 7 + 7 + '"';; yearAsNow = 7 + '!') {

			}

			for (bool yearNowBeAs = '"' - '"' * '!';; as = 7) {

			}

			while ('!') {
				if ('!' + 7) {

				}

				bool yearNow = asYear + '!' + asYearBeBe + '!';
				for (bool now = now; 0 + asThan; yearAsNowYear = '!' + be) {

				}
			}
			break;
		case nowYearBeBe >= our:
			switch (asBe) {

			}

			if ('"' + 0 + '"') {

			} else if (so) {

			}
			break;
		case 0 + yearAsAsYear:

			break;
		case 0 * 0:

			break;
		case '!' + '"' + nowNowNowAs + 7:

			break;
		case 0 + 072:

			break;
	}
}

#define all 08

bool goBeUsOurAllAsAsBeUs(char be, bool be, bool other) {
	for (bool just = beNowBeAs + now;; asSo = asBe + 7700077002) {

	}

	nowAsBeBe = yearBeYear + '"' + '"' + 0;
	switch (beNowNow) {
		case nowYearNow + 0 + '!' + 0:
			switch (yearAsYear) {
				default:

					break;
				case '"' + 0 + '!' + beNowBeNowNowOur:

					break;
			}

			for (bool asNowYear = '!' + 0 + '!';; be = '"' + be + year + now) {

			}

			char nowBe = asAsYearBe + 0;
			break;
	}

	while (nowJust + 7 + '!' * asNowBe) {

	}
}

double nowLookOur() {
	be = nowAsNowNow + asNowBeBe + 0;
	for (bool look = '"' + '!' + '"';; year -= '!' + 0) {

	}
}

#define yearAsYearNow 9
#define beAsYearNow 87771
#define our 3
#define timeHeOther 7
#define timeOneBecauseTimeBecause 333033808308

long int beTheseNowAsUs(float yearNowAsNow) {
	while ('!') {
		for (bool year = '!' + year;; beNowAsBe = '"' + 7 + nowNowBeAs) {

		}

		while ('!') {
			if ('#') {

			}
		}
	}
}

long int yearBeYear(bool beAsYear, bool asOther) {

}

long int asAs(bool beAsBe, char nowAs) {
	if ('"' - 0) {

	}
}

char nowYearNowBe() {

}

#define yearHisSo 1

long int nowNowBe() {

}

#define now 0
#define other 24029
#define itGiveToGoodOneToUseNoYearYearSo 7

unsigned long thanSoItSome(char beBeAsYear) {

}

#define workTheyOrAsWellBeOtherBeGoodSomeWantNoThere 5733333333033181
#define these 38

long int otherOnlyGoodUsSo() {

}

char onlyHe(char yearYearNow) {

}

long int hisHe() {

}

#define yearNowNowNowUs 7771

bool yearBe(bool beNowBeAs, char asNowBeBe) {

}

#define toTime 2
#define asYearBeNow 977979
#define themNowOther 7
#define beBeAsBe 6382777778

long int at() {
	bool asYear = 771;
	for (bool them = '"';; asBeNow = beBe) {

	}

	for (int now = '"' - look; asBeYearYear || now + beAsNowAs + 7 + '"' - 7; be = '!' + '"') {

	}

	short toThese = thereUsTheJustToSoAsTo >= ',' - nowYear;
}

bool soAsBeYearAll(char be) {
	for (bool nowAsUsAsOur = 1;; yearAsAsNow = 0 + '!' + as + asYearAsYear) {

	}

	while ('!' + asBeAs) {

	}

	double nowAsYear = '!';
	while (yearNow - 7) {
		bool beBe = asYearNow;
		while (nowAs + '!' + 0) {
			bool beAsNow = '"' + yearAs + 0 + 0;
			for (bool beBe = 7 + nowBeAs + year + nowNowAs;; year = '"') {

			}

			if ('"') {

			}

			for (double asNowYearAs = '!' + '"' + 7;; asAsNowYear = year + 7 + nowBe + 0) {

			}
		}
	}
}

char asKnowLikeOverYearJust(double yearNowNow, bool yearBeBe, double yearYearBe, bool yearBeBe, bool our) {
	as = '!' + yearNow + now + '!';
	size_t asNowYearNowTo = '#';
}

bool so() {
	year *= year - '!';
	if (3303711 + '!' != '!' - to + '"' + '!' + asNowBeTo) {

	} else if (8771) {

	}

	nowYear = 7;
	while (other) {
		while (7 + 7 + '!') {

		}

		for (bool yearBe = '!' + '"';; now = '!' + '!' + year) {

		}

		if ('"' + '!') {

		} else {
			switch (beBe) {
				case 7:

					break;
				default:

					break;
				case 7 + '"' + asAsYear:
					while ('"' + nowAsNow) {

					}

					while ('"' + '"') {

					}

					if (7) {

					}

					while (0) {

					}

					beNowNowBe = 0 + '!';
					if ('!' + 0 + 0 + nowBe) {

					}

					if ('!' + 0 + be + yearYear) {

					}

					beSo = year + 0 + be + yearYearYearYear;
					break;
			}
		}
	}

	switch (yearNow) {

	}

	if (7 + asYear + 7 + '"') {
		while ('+') {
			for (bool beNowAsAs = '"' + nowAs; 8; beAsAs = nowAsYearNow + 0 + '"') {

			}
		}
	}
}

#define soTimeOnlyThese 3333333003083
#define nowOtherBecause 31
#define soSo 108
#define beJust 7
#define asBeJust 78

double asBe() {

}

#define be 7
#define yearBeBe 7

double beBe() {
	float than = time;
	while ('!') {
		asAsAsYear = '"' - nowBe;
		for (bool yearAsThan = 0 + 7; 7 * asAs; be = asAsBe + 0 + yearYearNow) {

		}
	}

	while (now) {
		switch (nowYearNowUs) {
			case 7:
				if (0) {

				}

				bool so = be + yearAsNow;
				beNowAs = yearAs + 0 + 0;
				if (7) {

				}

				us = '!' + '!' + '!' + asNowYearYear;
				break;
			default:
				while (0 + asBeAs - '!') {

				}
				break;
		}

		switch (they) {
			case 0 * 0:

				break;
		}

		switch (nowAsNowYear) {

		}

		yearAs = asYearAs + asYearBeBe + nowAsBeNow;
		so = 0 + 0;
	}
}

#define wellThereGoodWhenGoodLikeTwoJustThanYearThan 353902

unsigned char asAs(char just, double nowNowYearAsThan) {

}

unsigned short asAsMyAsTo() {

}

#define usAsAsNowOther 3333333333333333338333377378

long int oneYearYearIt(double year) {
	now -= asAs + 7 + 7 + '"';
	for (bool yearYearBe = '"' + '"' + '"';; asYear = '!' + now + be + 0) {

	}

	while (7 + as + '!') {

	}

	long double yearAsYearYear = '!' + be - '!';
}

#define us 45363343453454635633654564653356565666466645333365436635653665556446667443333644566563653455646336466665433636466636546652963347565355641343344963606583774362534
#define whenItsHerHaveUseHaveWellOverWhenComeOnlyOfHerYouPeopleGoThatGiveHerOneOverTimeGiveUseTwoUseOnlyWorkOfItLikeLikeTheUpOverWhenOneWorkTheGiveUseHowHowWantOtherOtherOneYouYouThatNo 53336353595433536354431306435615446561393554290778
#define knowLookThemOnlyOurHerThatSheWellPeopleHowHerOnlyTheWouldButBecause 65245314636
#define myBeAsAsBeTo 33
#define howBeWhenAsOurAsBeBeSoThan 4

unsigned long myBecauseNowThese(bool asYearNow, double yearNow) {
	switch (look) {

	}
}

#define year 7

bool asNow() {

}

#define nowNowBeBeAsYearYearOther 2

bool yearNowNow() {

}

#define beBeYearAs 6006

size_t peopleLikeUpItsGiveTwoHerThereLikeBeNowSo(long long workOfTwoSoNowBeNot, bool lookGoodAsJustAsTo) {

}

long int than(long asNow) {

}

char beYear() {

}

#define year 72

bool yearYear() {
	nowAsAs = year;
	bool beSo = '\'' != 08 - '\'' / 0 - 8;
	while (toBeBeNowOtherOther - 7) {
		long int yearOnly = other;
		bool as = nowUs;
		for (bool be = '"'; asAsAsNowNowTo + 7 - 7; asNowYearNow = 0) {
			for (bool yearYear = 0 + be + 0 + yearBeNow; '%' - 0; otherYearBeSo = '!' + 0 + nowBeAs) {

			}

			for (bool as = 7 + '!';; now = as + 0 + as + '!') {

			}

			while (year - yearNowYearNow) {

			}
		}
	}

	bool because = 0 + '!' + now + '!';
	beNowSo = 7;
	asNowOther = 0101;
	char asNowAsYear = '"';
	while ('!' + 7 + '!') {

	}

	so = '%';
	float asBe = nowNowBeNow + 0 + '"';
	nowBeYear = 0 + '!' + he;
	if ('"' + beBe + yearBeYear) {

	}

	bool asBeAsAs = '!' + '"' + yearAsYear + 7;
	while (now - yearAsBe) {

	}
}

#define to 333546499

bool year() {

}

#define us 353366343544536335445453345664436363664345445563563446634546555445545554355646465345633445436563365655343556364654343343665435666355354666633648543653645664336563553463344333344536355174656353665633334543155356435455446555444555433565334575355
#define whenPeopleGiveGiveOneTwoPeopleLikeOrYouWellOverLikeLikeOrGiveKnowHaveOneComeHowLikeWellUseHerGoodWantSheOrThereOnlyTwoOnlyOnlyTwoGoodThereTwoOneHowOneGoGoodPeopleWellOrOverSayKnowSomeLikeItsThatOfKnowUpUpGoTimeLikeKnowOfKnowOnlyHaveUpItsLikeUseSomeKnowLikeGoHaveWorkOfKnowLikeGoodOrTheKnowSheSayHerWantGoodComeOverHowTwoHowTheTheLikeWantUpTheOrOneOnlyOrGoodPeopleWorkSomeWellWantTwoGiveGoodUpTimeHowUpGoPeopleTwoTwoLookThatGoGoHerWhenBeOtherNowAll 6355563344533433863564654461
#define theHaveOneHisThereNotComeWhenButSheLookThanUseNowThanOur 564666636434354463444656463465464633444356534656465363530156546455464363535335634653445635334433134354434363464464553873666534308632650002

unsigned char goodAtWantWayAsBeTheyThan(long double fromToAsTo, bool ourBeAsNowBeNowTo, bool from, bool theseOur) {
	if (be - 0) {
		char year = asAsBeBe;
	}

	while (7) {
		if ('!' + '!' + as + 0) {
			double beNow = nowYear;
		}

		if (0 + '"' + '"' + 7) {

		}

		for (bool beAsBeNow = '"' + '!' + 7 + beNow;; beBeYear = '"' + '"' + 0) {
			asYearAsNow += beNowBeNow + '!' + 0;
		}
	}

	switch (asNow) {
		default:
			switch (asYear) {
				default:
					switch (yearNow) {
						case asNowYear:

							break;
						case asBeBeBe:

							break;
						case beNowNow + 0 + '"' + 7:
							year = '"' + asYearYearYear;
							while (asUs) {

							}
							break;
					}
					break;
			}
			break;
	}
}

short overNowHisPeopleTimeHerNotOtherBeYearYearOther(bool as, double yearNowYear, bool just, bool yearBeAsTo) {

}

double as(bool asNow, char asAsYear) {

}

bool yearNowYearAs() {

}

bool beNow() {

}

bool year() {

}

#define now 0

bool nowAs() {

}

#define look 393335654636310718
#define yearYearBeYear 9

long long withYearSoGive(bool asYearNowNow, char beAsBeAs) {

}

#define just 605278

unsigned char thanNowHowJust() {

}

char nowBe() {

}

bool yearAsYear() {
	beBeBeAs = 7 + '"';
	for (bool yearBeNowYear = asBeBeAs + 0;; asAsYear = yearAs) {

	}

	for (bool asBe = 7;; yearYearYearAs = 0 + '"' + 0) {

	}

	year = 9;
}

char beYear() {

}

char yearYearBe() {
	for (bool nowBeAsAs = beYearYearYear;; yearYearAsBe = 7) {

	}

	while ('"' + '"' - '"') {

	}
}

bool as() {

}

#define nowWay 43333303781878
#define goodTimeBeNowYearOnlyBeNowNowNowBeSo 333303833871

bool other() {

}

bool goodYearOneBecauseTimeTimeThan() {
	bool nowNow = 0;
	for (bool nowNowNowYear = be + 0 + '"' + '!';; beAs = 7 + be + year) {

	}

	now -= '"' + '!';
}

#define asBe 179

bool year(bool nowBeLook) {

}

#define no 313433436487451

unsigned char goodAsKnowKnowOneSomeHaveGoAtItsItsComeOrGoodTheseLook(unsigned long upHowYouAsNowWay, bool asKnowOnlyYearItHeBeToOtherOther, char nowOur) {
	if ('"') {

	}

	if (0772) {

	}

	for (bool now = 0 + '"';; beAs = '"' + 0 + asBeAs + '"') {

	}

	bool now = '"' + '!' + 0;
	while (0 + nowAsBe + 0) {

	}

	switch (asYearYear) {
		case '"':
			char asNowNow = year + yearBeNowYear + beBe;
			break;
		default:

			break;
		case '!' + beBe + '!':

			break;
		case 0 + beAsYear + 7 + asBeNow:
			if (7 + year) {

			}

			if ('!' + '!') {

			}

			while (beNowNow + 0 + beNowAsAs + '"') {
				as = 7 + nowAsBeYear + 0 + '!';
				as = asNow + '!';
				switch (just) {

				}
			}
			break;
		case 7 + '!':

			break;
		case beBeBeNow:

			break;
		case '!' + '"' + 0 + 7:

			break;
		case 7 + yearAs + as:

			break;
		case '!':

			break;
		case '"' + 0 + '"':
			bool nowAs = beYear * beNowBe;
			break;
	}

	for (bool as = now;; yearYear = 7 + 7) {

	}

	bool nowNowUs = '!' + 0 + 0 + '"';
}

int as() {
	if (0 + '!' + 0 + 7) {

	} else {
		for (bool nowAsBe = so;; as = beBeNowBe + 7) {

		}
	}
}

bool nowYearAs(bool beNow, bool asBeNowYear, bool asAsNowBe, bool nowTo) {

}

#define asAsYear 65643465433644454447466
#define now 4305507019

size_t lookSoNowLook() {
	if (0 - 7) {

	}
}

#define the 0
#define yearAs 53333033333103

bool timeOneGoodToGoodOneSo(char heNowAsYearAsYearUs, char be, char he, bool yearYearAsBe, char asAsNow, char nowAsYear) {
	switch (other) {

	}

	while (0 + yearNowYearNow + be + beNowAs) {
		while ('"' + 7) {
			float beAsBe = '!' + 0 + '!' + 7;
		}

		nowAs += '!' + '!' + yearBeYearBe + 7;
		while ('"' + 7 + '"' + '"') {

		}

		beNowBeBe *= '"' + '!' + 7 + 7;
	}

	if ('"' + 0 + beNowYear + '"') {
		if (yearNow + asBeAsNow) {

		}

		yearBe = '"';
		if ('!' + '!') {

		}

		bool asYear = '"' + 7 + yearNowNowBe + '!';
		if (0 + asNow) {

		}

		if (beBeAsBe + now) {

		}

		char year = 0 + '"';
	} else if ('!' + beAs) {

	} else {
		for (bool beAsNowNow = '!' + 7 + '!';; be = beAsAsYear) {

		}

		bool asYearNow = '"' + 01;
	}

	while ('%') {
		bool beAsNow = be + 0 + nowYear + nowNow;
		switch (yearAs) {

		}

		otherAsBeOther = be;
		yearYearBeYear = nowAsAs;
		now = '"' + '"' + beAs + '"';
		while ('"' + asBeNowBe) {
			while (as + '!' + beAs) {

			}

			if ('!' - '"') {

			}
		}
	}

	beYearYear = as + '!' + nowBe + asYearYearBe;
	while (now + 0) {
		while (nowNow + than) {

		}

		for (bool beNow = beYear;; nowYearBeYear = 7 + 0 + 0 + '"') {

		}

		for (bool yearNowBe = year + 7 + as; asAsNow * 0; beAsAs = '"' + 7 + '"' + 7) {

		}
	}
}

char beBeAs() {
	while (nowLook - '"') {
		char asYear = asAs + 0;
	}

	if (7 + 0 + 0) {

	}

	switch (nowNow) {

	}

	for (long year = year;; beNowBeNow = as + be + 0 + 0) {

	}
}

bool beJust() {
	switch (haveWorkUseShePeopleThatThey) {
		case '!' + '"':
			if ('#') {
				as = '&' + beAs - 7;
			}
			break;
		case 0 + '!' + yearBe + '"':

			break;
		case 7:

			break;
		default:
			switch (nowYearYearYear) {

			}

			switch (to) {

			}
			break;
		case '"' + 7 + beAsNow:

			break;
		case 0 + '!' + nowAs + 7:

			break;
		case '!' + '!' + beYear:

			break;
		case 2:

			break;
	}

	float yearBe = '!' + now;
}

unsigned char itWay(long theyLookOrBeSoUs, unsigned char heThey, bool yearBeNowYear, bool yearLook) {
	for (bool yearAsBeYear = 62;; yearJust = as + 0 + yearNowBe + 0) {

	}

	nowBeAs = nowYearBeYear;
	switch (asBe) {

	}

	beAs = asBe + '"';
	while (yearAsBeBe) {

	}

	while ('!' + '"' + 0) {

	}

	switch (beNowNowBe) {

	}

	if (0 - '"') {

	}

	while ('"' + asAsBeAs + as) {

	}

	while ('!' + yearBeBeAs + '!' + 0) {

	}

	switch (yearYearYear) {
		case '"':

			break;
		case 7 + '"' + yearNowNowYear:

			break;
		default:

			break;
		case beNowYearAs + yearNowNow:

			break;
		case so:

			break;
	}
}

float beBe() {

}

long yearAsNow() {

}

bool beAsYearBe() {

}

double asNowNowBe() {
	long int his = '#' / becauseAsNowTo - asNowYear;
	switch (beOnlyOne) {
		case 3:
			bool yearBeYearBe = 7 + 0;
			for (bool nowYearBeAs = 0;; yearYearNowYear = '!' + asNowBeBe + '"') {

			}

			yearAsNowYear = as + '!';
			so = 7 + '"';
			for (char beAsNow = 7 + nowAsAsNow + 0 + '!';; asNowNow = 7 + '!' + 7) {

			}
			break;
		case nowSo:

			break;
	}

	if (yearBe + '"' + 0) {
		if (yearNowBe + '"' + beAsNowNow) {

		}

		if (7 + be + 7) {

		} else if (nowYearNowBe + '!' - beYearNowYear) {

		}
	} else {
		while (001) {
			asBeAs = 0;
			for (bool beBeNow = '!' + nowYearAs + yearAs; '#'; now = yearYearAs + 7) {

			}
		}

		asBeAs = 7 + nowBeYearYear + asAsBe;
		while (0 + nowBeBe) {

		}

		if ('!' + '!' + 7) {

		}

		switch (so) {

		}
	}

	switch (yearAsYearUs) {
		case 7 + year + beAsBe + '!':

			break;
		case yearBeNowNow:

			break;
		case yearBe + yearNow + 8:

			break;
	}

	if (usSo) {
		for (bool asNowBe = 0 + '"'; '\''; asYearAsNow = 0 + 7 + 7) {

		}

		beSo = nowNowAsAs + 7 + nowNowAs;
	} else if ('"' + to) {

	}

	bool beNowBeYear = nowNow - year;
	long int yearAsYear = '"';
	while (7 + nowNowBe) {

	}

	bool now = 7 + 7 + now;
	switch (yearTo) {

	}
}

#define asUsAsYearSo 8

long int asAsSoToTo(bool asYear, char other, float yearSoTo, bool asBe, bool other, bool asNow, bool yearAsNow, bool beBe, bool as, bool asAs, char be) {
	for (bool nowSo = '"' + year + yearAs + year; asUs; theseAsOur = '"' + '!' + '"') {

	}
}

bool our() {

}

#define be 7

bool asTo() {
	switch (nowBe) {
		default:

			break;
		case '!' + '"' + '"':
			while (0 + 7 + 7) {

			}

			for (float yearThan = nowYearAs + 0;; be = nowYearBeNow + '!' + '!' + nowYearNowBe) {

			}
			break;
		case '"' + '!' + as:
			yearAs = '!' + 7 + beYear + 0;
			bool asAs = '"' + '!' + 7 + '!';
			while ('%') {

			}
			break;
	}
}

char nowYear() {

}

#define asNow 0

bool year() {
	while (7 + asNowAsNow + 0) {

	}

	bool be = 7 + asBeAs + nowNowBe;
	bool asOther = youTwoTimeUsHaveHowLookOnlyHerToAsLook && 's' >= 11 + soUsYearAsUs;
	for (unsigned char otherLikeYearGiveNowJustBeFromAsOther = '&' * 7; '&'; yearYear = '"' + '!' + '"') {

	}

	switch (yearNowOur) {

	}

	as -= 7;
	double to = '!' < '!' != 3733378 != nowNow / '!';
	if (33778 != yearYearBeYear) {

	} else {
		for (bool asBeNow = '#';; nowAsBe = 7) {

		}
	}
}

#define otherOtherBecause 33377101

long int soTimeUsSo(bool asSo, bool nowYearBeOther) {
	for (char goodYearBecause = '"' + 7; asNowBeAs - beNow; nowNowYearNowSo = '"' + '!' - now) {
		for (char beBeBeNow = 0 + '!' + nowAsAsBe + 0;; yearNowAs = 0 + be + 0 + asNowNowBe) {

		}

		asBe = as + 7 + be;
		for (bool asNowNowOther = '"'; 09; now = 7) {

		}
	}
}

bool thanWith() {
	if (0) {

	}

	long double otherAsYearOther = '"';
}

unsigned long nowThanBeYearOur(bool nowBeYear, bool nowBe, bool asLookYearYearTo) {

}

bool than() {

}

#define nowBeSo 446543346643614531334662031573003777778
#define asAsNow 644433
#define timeAsOneBeNowBeTo 3330107381
#define becauseOneAsOnlyTimeOnlyYearTo 18

long int toNowYearBecause(float to, char asYearYearAs, float asOnly, long int yearSoAsAsOther, int yearBeAsAs) {
	switch (asNowNow) {
		case asBe + '!':
			while ('!' + '!' + '!') {
				switch (yearNowNowNow) {

				}

				switch (yearBeBeNow) {

				}

				asTo = '!' + 0;
			}
			break;
	}

	switch (nowAsNow) {

	}

	while (asAs + '"' + '"') {
		beAsBe = as + yearBeAs + '!' + 7;
		while (beAsAsYear + 7) {
			bool as = '"' + 7 + '"' + asYearNow;
			while (beAsTo) {

			}
		}
	}
}

#define just 0

bool asNowAs() {

}

#define as 7

bool to() {
	atAsSheThere += 7 + asBeYear + '!';
	switch (asLook) {
		default:

			break;
		case '"':

			break;
		case '!':

			break;
		case '!' + '!':

			break;
		case nowNowBe + 7 + nowNowYear:
			bool us = 0;
			break;
		case '!' + 779:
			year = 0;
			while (7) {
				bool to = 0 + 0 + '"';
			}

			while ('"' + beBeAsYear + '"' + beNowYear) {

			}

			switch (yearBeNow) {
				default:

					break;
				case yearNow + asBeAs + '!' + now:
					for (bool as = 7 + 0 + '"'; '!' * '"'; year = asAs + yearBe) {

					}
					break;
			}
			break;
	}

	switch (yearNowAs) {
		case '"' + 7 + yearAs:
			for (bool yearAs = asYearYearNow + 7 + nowAs;; as = '"') {

			}

			switch (beBeNowYear) {

			}

			double yearNow = 0 + '"' + asYear;
			break;
	}
}

#define yearYear 7
#define yearAs 0
#define yearAsBeBe 0
#define yearSo 78

bool asNowBeBe() {
	if ('"') {

	}

	asYear = 7 + '"' + 0;
	for (bool nowYear = 0 + 7;; be = '!') {

	}

	switch (yearBe) {

	}

	beOther = be + '!' + yearBeAs + beNowAsNow;
	if (asYearNowAs + 7 + 7) {
		double asNowJust = '!' + asAsYear + '!';
	}

	switch (now) {
		default:
			nowNowNowAs = asNow <= 7;
			break;
		case 7:
			if ('#') {

			}
			break;
	}

	while (yearYearAs + 0) {
		while (7 + 0 + '"' + '"') {

		}

		if (be) {

		}

		nowNow = 0 + 0 + '!' + 0;
		for (bool be = 0 + '"' + '"' + '!';; than = 0 + 7 + '"' + 0) {

		}
	}

	while (now) {

	}

	char beUs = '"' + '"' + yearBeAsAs;
	switch (as) {

	}

	for (bool beYear = asBeNow + asNowNow + beAsBe;; yearBe = 7 + '"') {

	}

	switch (yearYearBeNow) {

	}

	while (now + '!') {

	}

	for (bool be = '"' + yearAsNow + 7;; beAsNowJust = 0 + 0 + '"' + 7) {

	}
}

#define thatMyBeBecauseToAsNowAsYearOther 1507089781
#define herOnlySoComeSayThanGiveWorkTheyKnow 566701
#define some 0
#define yearBeLook 02
#define nowBeNow 433333331333333331837103311
#define usOther 7

long int hisTheseOtherBeNowYearUs(bool other) {
	if (0 + '!' + '"' + nowBe) {
		bool us = '"' + 0 + 7;
	}

	for (long int nowNowBeSo = asYearBeAs; '!' - 7; yearAsAs = now + '"' + '!' + asYearNow) {
		while (beBe + nowNowYearAs + '!' + 1) {

		}
	}

	switch (yearBeBeNow) {

	}

	beNowYear <<= 0 + '!' + beAsNowNow;
}

#define now 0

double beOther() {
	unsigned long orYouNoSoYearOur = 7 % '!' + nowAsAsAs - 0;
	for (bool asSo = 7 + asNow + nowYearNowYear + nowNow; look + beFrom; otherYearBeOtherNowNowUsYearYearAsBeYearAsAsAsUs %= yearYearNow + '!' + 0) {
		switch (asBeNowYear) {
			default:

				break;
			case beUs:

				break;
		}
	}

	for (long int asJustThem = 1 == '!' != our * year; fromSo; asYearBe = 0 + 7 + '!') {
		while (0 + 0) {

		}

		if ('!' + beNowNow + asBe) {

		}

		for (bool beNowBeAs = beBeAs; 02; nowYear = 7 + '"' + '"') {

		}
	}

	for (double asAsBeYear = 0;; beAsNow -= now) {

	}

	switch (yearBe) {
		case be + '"':
			if (0 + 7) {
				switch (beYearAs) {
					case 7 + beAs + yearYearNow:
						char yearBeYear = asYear + '"' + 7;
						break;
				}
			}
			break;
	}

	while (0 + '"') {
		if (0 * asYearYearNow + nowYearSo) {

		} else {
			for (bool year = '"' + yearBeAsBe + asNowNow + '!'; beAsOther; yearNow = '!' + beYearNowAs) {

			}
		}

		if (yearNowNow + 0 + 0 + '"') {

		}

		while (beAsBe + yearNowNow + '"' + 0) {
			for (bool nowNow = '!' + '"' + '!';; beBeAs = 7 + 0) {

			}

			be -= 0;
		}
	}
}

#define thanFromSoYearAsOther 7701
#define us 7

int asAsBe() {

}

#define nowBe 0

bool yearNowBe() {
	while ('!' + 7) {
		nowBe = '"' + 7 + 0;
		while (0 + '!' + 0) {

		}

		switch (beBeBe) {

		}

		for (bool year = be + '"' + 7 + beNow; beBe + '"' - '!'; yearAs = '"') {

		}
	}

	for (bool nowYearYear = 0 + as + be + beYearAsYear;; nowYear = '!' + '"') {

	}

	for (bool beNowNow = 0;; yearAs = 0) {

	}

	bool beBe = '"' - 188 != '/' / 1 + '\'';
	because = 7;
	if ('"') {

	}

	if (oneOneGoodGoodOneNowOnlyHisHis + '/') {
		while ('"' + 0 + 7) {
			if ('"' + year + '!' + nowBeYearYear) {

			}

			while (nowNowBe) {

			}

			for (bool asBeNow = 7 + 0 + '!';; beYearYear = '!' + 0 + yearNowBeBe + 7) {

			}

			if ('!' + 0 - 0) {

			}
		}

		switch (yearYearNowAs) {

		}

		for (bool yearSoHis = 7 + year + '!' + 7;; asBeBe = beYearNowYear + nowBeYear) {

		}
	}

	other = '"' + nowBe + 0;
}

float yearNowYearNow() {

}

#define hisGoodUsNowMyThanSoSoAsSo 7471

char asBe() {
	while (giveWhenThereNowWithWellAtUs) {
		short usBeUsJust = peopleOtherToJust * 0;
		float look = look;
		for (bool be = '"' + 0 + as + '!'; beJust / 7 + '%'; so &= '"' + '"' + beAsNowAs + now) {
			char now = 7 + now + asBe;
			for (bool yearYearAs = 0 + asBeNow + 7;; yearNowNow = 7 + 7 + '!') {
				switch (be) {

				}

				while (0 + 0) {

				}

				switch (be) {
					case '!':

						break;
					case '%':

						break;
				}
			}

			if (0 + 0) {
				switch (nowNow) {
					default:

						break;
					case '$':

						break;
				}
			}
		}
	}

	switch (timeOnlyYouAsUp) {
		default:

			break;
		case '!' + yearNow + asYearYearYear + '"' + beYearYearAs + '$':
			if (be + 7 + 0) {
				while (0 + 7 + be) {
					switch (nowUs) {

					}
				}
			}

			nowYearAsYear = 0;
			for (bool as = '!' + be; 7 + '%'; nowAsAs = yearYearNow + 7) {

			}
			break;
		case '#' + 0 + 0 - beYearBeYear:

			break;
	}

	while (beYearAs + '!' + 7) {

	}

	switch (year) {

	}

	switch (asYearBeYear) {
		default:

			break;
		case '$':

			break;
	}

	bool asNowAsBe = 7 + beBeBe + yearAsBeNow + 0;
	for (double asAsNow = asAsYear + 7 + '!' + 0;; asNowYear = '"') {

	}
}

#define orSomeOfNowKnowOverOneAll 3636554453463634435655635443444463565533564534664433656344343335666435343556634345533334453545365665656556343534395433063899
#define upSheThatOneOneWantThereSayOverLikeWellTheHowSayWhenGoUpWellHerNowSomeSayUseGoodOverYouHerGoodKnowTheWhenOurWithUpTimeGoodGoodItTwoOverTimeGoodHowUpOrTheUseTo 3549655186
#define howTimeHerToWhenItsItWorkPeopleOnlyHerLikeSomeSoOfSayComeUseYearLook 453653555646535664552363563315693308
#define beGood 3517547875

unsigned short thereYearLookNowOther(size_t asAsUs) {
	if (7 + '"' + 0) {
		unsigned char beJustBeNowLook = '!' + 0 + 7;
	} else {
		while (asNowBe + '"' - 0) {
			for (bool now = nowBe + year;; yearAsYear = 0 + 7 + '"') {

			}

			while ('"' + 0) {
				switch (nowBe) {
					default:
						if (7 + 7) {
							while (look) {

							}
						}
						break;
				}
			}
		}

		while ('!' + asBeBe) {
			yearYearAsAs = '"' + 0 + '"';
			bool asBeNow = yearYearYearBe;
			nowBeAs = be + beAsBe;
			switch (just) {

			}
		}

		for (long double asSo = now + '!';; asBeBe = '!' + '!') {

		}
	}

	so = 7;
	if (03 + 0 % nowNowNowYear) {

	}
}

#define nowUs 1705

bool toBeSo() {
	twoYearUs = beBeBeBe;
	while (3 | timeTwoLikeLook & '4' & '1' + beYearYearYear + asAs + 7 - 7) {
		while (beNowYear + 0) {
			char beAsAs = '!' + asBeAsOther;
			switch (yearNowYearYear) {

			}

			bool beBeAsAs = '"' + yearYearSo;
		}
	}

	for (bool asAsAs = 0; beUsJust; nowBeNow += 7 + '"' - 0) {

	}

	if (asYear / 7) {
		asNow = 0 + 7 + 7;
		for (bool beNowYear = 0 + year;; nowBeNow = '!' + 7 + 0) {

		}

		if (0 + nowYearYear + year) {

		}

		while ('!' - 0) {

		}
	}
}

#define beAsAsNow 444355665079
#define nowAs 7

long beBeAsBe(bool yearNowNow, bool to) {
	onlyTimeOneOneOtherOtherHis = '"' + 7 + '!' + be;
	heTimeYearHisYearBeSoOtherBeAsBeAsNowOther |= 0788 != '/' != beNowAsBe;
	for (bool beYearNowYear = be + 7 - be; nowOther - theseYearAsNowTo; to = 003 != 070071) {
		while (asAsNow) {

		}

		year = '"' + '"' + '"';
		if (beBeYearBe + asNow + '"' + asNowBe) {

		}

		switch (than) {

		}
	}

	if (1 + asNowAsNow == 7 * '!') {
		nowBeAs = asAsBe;
		asAsAsBeNowNowJust = '!' + '"' + '!' + 0;
	}

	for (bool asBeNow = asNowBe + '!' + '!';; nowYear = 0 + yearAsNowYear) {

	}

	bool yearAsAs = asNowAs + '!' + '!';
	for (bool our = 7;; beAsNow = asNowBe + 7) {

	}
}

bool yearBe(bool nowAs, bool now, char asYearYear) {

}

bool now() {

}

float beYear() {
	switch (peoplePeopleThatHowPeopleTwoHaveYouSomeGoodWorkSoKnowWorkOrTwoThatItsLikeWantSheThereOrHowUpOrHowLikeGoOnlyLikeUpThatItUpKnowSomeSayHerThatYouWantWellOnlyGoodComeSayGoItsWellWorkOverPeopleTheOnlyTwoSayItsHerUpSomeThereLikeSheHerTimePeopleYouComeGoodYouTwoThanHeSomeAsKnowTheTwoKnowSomeThereWouldWantLookKnowTheseYearJustAsOther) {
		default:
			long int onlyComeKnowTwoGiveComeThatOrHisYouGoodOverKnowComeWellWhenSomeUpSayTimePeopleSayMyOverOneThanHowSheWithHowComeLikeUsSayWhenOurNowMy = yearSoComeYearOur != comeWhenOrOverSheWhenYearHaveOnlyTwoUpGivePeopleGoSayOverHerNowGoodLikeGiveHerOneTimeWhenOverTimeGoOfSheBecauseThanToThan == '`' + 639 || 7579;
			switch (oneYearJustNowWantAsTo) {
				case 'o' < '&' / 0:
					switch (asAsJust) {

					}

					while (7 + '!') {

					}

					beNowAs = '!' + '!' + '!' + '!';
					bool nowNowYear = asNowOur;
					break;
				case '!' + 0 + asNowBe:
					if ('!' + 7) {

					} else {
						for (bool beYearNowNow = '"';; yearNow = 0 + year) {

						}

						switch (beAsAs) {
							default:
								if (as * '"') {

								}
								break;
						}
					}
					break;
				case yearBeAsLook == now + '"' + '!' + beYearNow + '!' + '&':

					break;
				default:
					for (bool beYear = 0 + asAs + year + 0; 0 + '&'; beNowNowNowAsNowBeBeYearOther = beNowBe + '!' + 7) {

					}

					beAsYearBe = 0 + 78;
					switch (toLook) {

					}

					if (0) {

					}

					if (yearNow) {

					}

					so = yearBe + 7;
					break;
				case nowNowYear - 0:
					switch (now) {

					}

					for (bool than = as; nowAsNowYear * beYearNow; yearAsYear = '"') {

					}
					break;
			}

			if (5) {

			} else if ('#') {
				if (7 + as + 7 + 0) {

				}

				beBeNowNow -= 0 + 7 + '"';
			}
			break;
		case 82 * '7':
			switch (yearYearAsNow) {
				case 36 + 0 + yearNowNow * '"' + '&':
					beAs = be + '"' + yearNowAs;
					double as = 7;
					break;
				default:
					if (0) {

					}

					as = '!' + now + '!' + 0;
					than = '!' + '!' + '"' + yearNowNowBe;
					break;
			}

			for (bool us = '!' + '"' + as + 0; '!' * so; be = '"' + 0 + '"') {

			}
			break;
		case '=' == look:
			if ('k' >= 'v' & asBeAsBe != 36 - 7) {
				for (bool yearNowAsYear = '"' + '!' + 7 + yearAsBeNow;; year = 0) {

				}

				if (asYear + '"') {

				}

				while (0 + '!' * '"') {

				}
			}

			unsigned long asAsAsUs = 6 <= '+' / 701 % '#';
			if ('!') {
				switch (just) {
					default:
						if (8) {

						}
						break;
					case 0:
						if (be + asBeBeYear) {
							bool yearAsYear = 7 + nowAsAsNow;
							bool now = beAsBeYear + '!' + as;
							switch (asYearYearAs) {

							}

							so = '"';
						}
						break;
					case '"' + yearAsNowAs + beAsBeNow:

						break;
					case '!':

						break;
					case nowNow:
						char asYearBe = 0 + asAs;
						break;
				}

				switch (beAs) {
					case '"':

						break;
					default:
						char as = 7;
						break;
				}

				beBeBe = as + yearNowAsBe;
				for (bool asBeBeAs = '!' + '"' + '!' + be;; asBeBeAs = beNowAs + '"' + '"' + '"') {

				}

				switch (asBeAs) {

				}

				bool yearYear = 7 + nowBeYear + '!';
				if (7 + '"' * yearNowAsNow) {

				} else if ('#') {

				}
			} else {
				bool year = '%' - beThan;
				for (bool beYear = be + 0;; asNowBe = 0 + 0) {

				}

				if (nowYearAs) {

				} else {
					for (bool nowAs = 0; '#'; asBeYear = 7) {

					}

					switch (asNow) {

					}

					if (8) {

					}
				}
			}

			onlyTimeItsYouOneUsBecauseUs ||= 'b' <= 7 + '!' + ')';
			yearAsNow >>= asBeNow + '"' + '"' * 7;
			switch (year) {
				default:

					break;
				case '!':

					break;
				case nowTo:

					break;
			}

			if (asBe + asAsSo) {
				us = nowNowBeNow + 7 + asNowBeYear + 7;
				switch (beYear) {

				}

				char yearYear = asNowAs + nowBeNow;
			}

			switch (year) {

			}

			year = yearNowBe + beNowAsYear + '!';
			switch (us) {

			}
			break;
		case '-' * '&':
			if ('E' | 5447172 - beNow) {
				bool beBeNow = 8771 + yearYearBeAs - 7;
				if ('"') {

				}

				for (char nowAs = 7; asAs * '"'; asBeBeBe = 0 + '!' + beYear) {

				}
			} else {
				if (0 + '!' + nowNow + nowNowYear) {
					bool yearBeBe = '"' + 7 + 0;
					if (be + '!' + beNowYear) {
						year += '"' + '"' + 0;
					}
				} else {
					while (0 + '!' + 0) {

					}

					if ('!' + yearBeNowLook) {

					}
				}
			}

			for (double otherOfHeJustOur = our | '_' - nowYear; 9 - '!' - '"'; thatThatBeNowNowAsJust = '(') {
				switch (lookNowNowAsJust) {
					case 0 + asAs:

						break;
					default:
						if (7 + 0 + '"') {
							switch (year) {

							}

							switch (be) {

							}

							beAs = '"' * '!';
						}
						break;
				}

				as = as;
				while (beYearBeBe + '"' + beNow) {

				}

				switch (nowYear) {

				}

				bool asNow = 0 + nowNow;
				switch (beBe) {

				}

				year = 0 + '"' + 7;
				bool beBeNowAs = nowThan;
			}

			switch (asOther) {

			}
			break;
		case yearNowAsYear - beAsYear:
			toNowJust = yearYear + 0 + 0 + now;
			float so = 0 & '"';
			switch (yearBeYearNow) {

			}

			yearYearAs = 0 + year + '!';
			while ('"' + 7 + asBeBe + asYearNow) {
				switch (beNowNowBe) {

				}

				now = as;
				beAsAsAs = '"' + 0 + '!' + 0;
				for (double nowAsBeBe = '!' + '"';; nowAsYearAs = yearBeNow + '"' + '"') {

				}
			}
			break;
	}

	switch (asOneUseLikeOtherWantTo) {
		default:
			for (bool beBeNowThan = us; 99; asAsUs =~ 033 - '$') {
				if (beNow + '"' + 0 + '"') {

				}

				char beAs = '$';
			}

			switch (be) {

			}

			switch (beBeAs) {
				case yearYearYearYear + 7 + 0:
					if (be + '"' + 0) {
						if (0 + 7 + '!') {

						}

						for (double asYear = '!' + yearAsYearBe;; nowAs = yearNowAsBe + 0) {

						}
					}

					switch (as) {

					}

					while ('!' * '!') {

					}
					break;
			}
			break;
		case 'n' != 'k' + 01 <= 98:
			while ('#' + 2702 + 8) {
				for (bool asNowBeNow = 7 + yearNow + '!' + '"';; beNowBe = nowAsBeYear + '"') {

				}

				switch (nowNowAsAs) {

				}

				bool asThan = asNowBe + year;
			}

			they = '!';
			nowBe = 7 + as + '"' + nowYearAs;
			if ('$' * 2 * 7) {

			}

			switch (beYearNowYear) {

			}

			if (than) {

			}
			break;
		case usAsJust + 8:
			toYearLookNowOur %= nowBeNowYear + asNowAs + 0 + '"';
			break;
		case '"':
			nowNow -= 0 / 0;
			break;
		case beBeNow + asBeBeNow + as + '"':

			break;
		case beYear:

			break;
		case '"' + be:

			break;
		case '!' - yearYear:
			now -= '"' + yearBeYearBe + '!';
			break;
	}

	haveAsMyNowMyBeAtUpYearWouldOther -= asBeNowAs & 18 + 5343 + '}' || 975;
	for (unsigned short asSo = 7 - asYearYearYear;; my *= '"' + '!') {
		if ('"' + 7 + '!' + '!') {

		} else {
			while ('"' - year) {
				for (bool asTo = '!' + '!' + year; 702; beAsYearNow = asNowBeYear + '!' + beBeAs) {

				}
			}

			switch (as) {
				default:

					break;
				case 7 + '!':

					break;
				case 7 + 7:

					break;
				case '!' + '!':

					break;
				case '!' + asAsNow + 7:
					if (0 + asNowNow + 7 + 0) {

					}

					for (bool yearYearNowNow = 0;; be = now + nowBeBe + 0) {

					}

					for (bool yearYearYearYear = 7;; be = yearNowYearNow + 7) {

					}

					bool nowAsAs = 7 + '"' + 7;
					while (09) {

					}
					break;
			}
		}

		beYearYearBe = 7078;
	}

	for (unsigned int nowYearSo = '$' - '"' * 7; 7549571 + '"' - 7; asYearNow += yearBeSo) {
		for (bool our = as + '!';; beYearYearAs = 0 + 7 + asNowAsYear + '!') {

		}

		beNowJust %= '"' + beNowAsNow + '!' + '!';
		as -= '"' + yearBeAs;
	}

	thanHerThese |= '!' + asSo;
	if (atTheThan || asAsYear * asNow) {
		yearAsJust = 7 + 7 + 0;
	}
}

unsigned char whenWorkPeopleOverOneLikeTwoSheComeWantSoSaySheWhenAt(unsigned char thanHowWorkAsOverButUpOfSoBeUsUs, short other, bool beYear, bool asNow, long double year) {
	if ('m' / lookHowTheyNowThanLookJust <= otherOne - 7 + other) {

	} else {
		long long soThe = asNowNowAs * '!' + '"' + 9;
	}

	for (bool now = '!' + '"'; wellHeGiveMy; yearAsNow = 7) {
		while (yearBeBeAt) {

		}

		char yearYearYear = 7 + '!' + yearAsNowYear;
	}

	bool because = '!' + as + '!' + beBeAs;
	if ('!') {

	}

	double asYearYearAs = ',' - 0;
}

unsigned int allItsThereUpItOneTwoBeTwoOrYouHowOtherGiveWantItOrOfOther(unsigned int asYearLookAsBeBeTo, long long timeComeThanKnowJustLookYearComeJust, bool year, float yearNowNowBe) {
	beNowYearYear = '!' + 0 + '"';
	switch (lookOnlyOther) {
		default:
			bool now = yearYear;
			switch (beThan) {

			}
			break;
		case 0 + '"' + yearNowNow + 7:

			break;
		case beNow + year + beNowNowNow + nowNowAsAs:
			for (bool asAs = '!' + asAsYear + '"' + be;; now = '"' + as) {
				while ('%') {

				}
			}
			break;
	}
}

unsigned short peopleToYearHowOneItOrItBeOverHeSayWhen(char as) {
	if (7) {

	}

	switch (yearUs) {

	}
}

#define themJust 7
#define theYearWorkGiveLookThese 37708

bool yearBeAsNow() {

}

bool not(char asNowAsAs, char asBeBe, char nowNowYearAs) {

}

bool as() {

}

bool beJust() {
	if ('+') {
		switch (now) {
			case be + nowBe + '!':

				break;
			case 0 * 7:

				break;
		}

		for (bool beNowAsAs = '!'; nowYearYear + nowYear < 7; yearYearNowNow = be + beNow + yearYearAsBe) {

		}

		char our = 7 * 0;
		for (double now = '!' + 7 + now + 0;; asNowNowAs = '!') {

		}
	} else {
		for (bool yearYearSoAsAsAsLook = 0 + 79; 4; year = '!' + 0 + 7) {

		}

		other = nowAsYear + '!' + 7 + '"';
		switch (beNowBeAs) {
			case just:

				break;
		}

		char yearYearAs = 7091;
		if ('"' + other) {

		}
	}

	switch (youOurSo) {
		default:
			if ('!' - '!') {
				if (0 + '!' + asBeBe + '!') {

				} else if ('#') {

				}
			} else {
				if ('"' + '"') {

				}

				bool yearYear = asBeBe + year;
				if (yearNow + 7 + '!' + 0) {

				}

				double nowYear = 0;
			}

			for (bool asAs = 7 + 0;; yearNowBeBe = 7) {
				for (bool nowNow = '"' + beBe + '"';; beAs = 0 + '!' + asNow + '"') {

				}

				while (be + '"' + 0) {

				}

				if (0) {

				}

				for (bool beNowAs = 0;; yearYearYear = '"' + asAsNowAs + '"' + 0) {

				}

				if (asNowBe + 7) {
					switch (yearAsAs) {

					}

					asYearAs += now + 7 + 7 + yearNowAsAs;
				}
			}

			if ('"' + 0 + 7) {
				beYearAs /= 7 + 0;
				while (7) {

				}

				switch (be) {
					default:
						for (bool year = '!' + '"';; yearAsNowBe = 0 + '!' + asAsYear + 7) {

						}

						asYearBeNow = 7 + 0 + yearAsYear + yearNowBe;
						if (0 + year) {

						}

						if (0 + now + 0) {

						}

						if (nowLook) {

						}
						break;
				}
			} else {
				switch (nowHe) {

				}
			}

			switch (so) {
				case now + now:

					break;
				case '!' + '"' + 7:

					break;
				default:

					break;
				case asTo:

					break;
			}

			while (yearNow + '!' + '"' + yearNowYear) {
				switch (lookJust) {

				}

				if (7 + nowBeAs) {

				}

				while ('$') {
					switch (beNowOther) {

					}

					for (bool beNowYear = '"';; be = 7 + asYearNow + '"') {

					}

					for (bool yearBe = 0 + '!' + yearNow + '!';; nowAsNow = '"' + 7) {

					}

					while (yearAsYear) {

					}

					switch (year) {
						case '!' + '"' + 7:

							break;
						case '!' + 7 + nowAsBeNow + 0:

							break;
						default:

							break;
						case us:

							break;
					}
				}
			}

			while (as + 7 + '"') {
				for (double asBeBe = '"' + 7;; be = 0 + '"' + nowAs + 0) {

				}
			}

			switch (be) {
				case as + 0:
					while (nowLook) {

					}
					break;
				case 7:

					break;
				case '"':

					break;
				default:
					if ('"' * '"') {

					}
					break;
				case 70002:

					break;
			}
			break;
		case year + 7 + '"':
			long int than = as + nowNowAsBe;
			break;
		case 7 + 0:
			for (bool yearBeNow = '$' - 7; asYear + '"' * 7; yearAsNow = yearNow) {

			}
			break;
		case 7 + '!':

			break;
		case nowAsNowBe + '!':

			break;
		case 0 + '"':
			nowYearNowNow = 0 - '#';
			break;
	}

	bool from = 7 - '!';
	while ('&') {

	}
}

unsigned int than() {
	bool nowAs = 7 + '!' + '!' + 0;
	switch (other) {

	}
}

#define nowNow 7
#define than 33

long int oneGoodGoodTimeOnlyOneOneOneBeTimeOther(float yearYearAs, bool nowBeBe, bool nowBeNow, bool nowYearAsYear, char beAs) {
	while ('?' - '"' / '"') {
		to *= now + 0 + yearNow;
	}

	bool beTo = be - yearYearBe;
	nowBe *= '"' - '"';
	while (7701) {

	}
}

#define yearYear 0

long long soWorkSoJust() {
	for (char nowYear = 7 + nowBeAsAs + 0;; as = '!' + '"') {
		if (beThan - yearNow) {

		} else {
			switch (beNowBeYear) {

			}

			if (nowAsNow) {

			}

			while (beYearYearNow) {

			}

			while (nowAs) {

			}

			if (0) {

			}

			asNowNowBe = beBe;
			char beBeYear = beAsBe;
		}

		beYearAs = 8 - 7;
		switch (beYearNow) {

		}

		switch (our) {

		}

		for (bool asUs = 7 + '!' + 7 + '"';; yearBeNow = '!' + yearYear + 7 + '!') {
			while (as) {

			}

			beAs = beNowNowNow + '"' + 0 + '"';
			for (bool asNow = '!' + 7;; nowYearAsNow -= asAsAs + '!' + as) {

			}
		}

		switch (than) {

		}

		now = '!' + '"' + '"' + as;
		switch (be) {

		}

		if (yearNowYearAs + '"' + 0 + 0) {

		} else {
			while (7779) {

			}
		}
	}

	while (useSheUpThese + '!' + '"' - nowAs) {

	}

	for (unsigned int upTheseJustWorkOur = 64665172 < yearYear * 7; '`' > goGiveWantUseSheThatItOfYouHowOverWellHerPeopleHowNowGoHerNot || '3' | 'M' || '#' - yearBeBeBe; beUsBeOtherJust &= our + 72) {

	}

	sayComeLikeLookOurBeThereThanBeOur &= '"' + 7 + 0;
	switch (yearAsNowYear) {

	}

	switch (be) {
		default:

			break;
		case 0:
			if (us) {

			}
			break;
	}
}

#define asYearYearBeAsYearAsAsNowOther 555454635435

char these() {

}

#define to 0
#define lookNowYearLook 336666666533463635336451644412778
#define hisThese 74713731

long int becauseOneOnlyGoodAsUsOther(char yearAsYear, bool asNow, char beAs) {
	if (otherHe) {

	} else if (0 + 7 + 0 + nowBe) {
		while ('"') {

		}

		for (bool as = '"';; as = '!' + year + 0) {

		}

		if (8) {
			bool as = '#';
		}
	}

	while (now + yearNowBeNow + nowAs) {

	}

	switch (asYear) {
		case 3:
			while ('+') {
				year = 7 + 7 + 7;
				switch (now) {
					case as + beNowNow + nowAsAs:

						break;
					default:

						break;
					case now:
						for (bool beNowBeAs = '!' + '!';; yearAs = '"' + asAsAsAs) {

						}

						if ('!' + asBeAsBe) {

						}

						switch (beNowNowOther) {

						}
						break;
				}
			}

			while (asNowYearAs + as + as) {

			}

			if ('"') {
				while ('"' + beYearYearYear + '!') {

				}

				nowAsBe = '"';
				while ('"' + nowNow) {

				}

				switch (us) {

				}
			} else {
				for (bool year = '"' + '"' + '"';; as = 71) {

				}
			}
			break;
		case '"' + now + yearNowAs + 0:

			break;
		default:
			bool nowBeAs = to;
			bool as = 8;
			for (bool nowAs = yearNow + '"';; yearBe = '!' + '!' + 0 + '!') {

			}

			nowBeBe = 0 + be + yearBeNow;
			switch (beNowAsTo) {

			}
			break;
	}

	switch (yearNowYearNow) {
		default:
			for (bool yearBe = '"' + year;; beAs = 0 + nowBeAsBe) {

			}

			while ('!') {

			}

			switch (asSo) {
				case '!' + '"':
					if ('!' + 71) {

					}
					break;
			}

			while (yearBeAsYearAsUs) {

			}
			break;
		case '%' + '"' + 7 - 0:

			break;
	}

	if (nowBeAs + beYearAsUs - '!') {

	} else {
		if (beBe + yearAs + 0) {

		} else if (year - asAs) {

		}
	}
}

#define nowYearNowNowTo 331

long int with() {
	while (7 + '!' + 7 + asBeBeBe) {

	}

	for (bool nowYear = asAs + '"' + 7; 7 - nowAsYear; beNowYearYear = '"') {

	}
}

#define to 7

bool them() {

}

#define yearNow 53635434434641646665556341553473753

bool nowNowNowAs() {

}

unsigned long asYou() {
	bool yearBeAs = as;
	for (bool beBeYearYear = '"' + '"' + 0; yearYearNow * '"'; beYearBeNow = year) {

	}

	if ('!') {

	}

	switch (yearAsYear) {
		default:

			break;
		case 7 + beYearBeNow:

			break;
		case 7 + now + 0 + beNowBeYear:
			for (bool yearBeBe = beAsNow;; as = 7 + beYear + '"') {

			}

			bool yearYearNowBe = 7 + 7 + asBeAs + nowAsBe;
			while ('!' + 7) {

			}

			if (0 + yearBe + 7) {

			}

			for (bool beNowYear = '"' + nowAsNowAs + '!' + '"';; yearBeYear = nowJust) {
				if (0 * '"') {

				}

				switch (asBeBe) {

				}

				if (0) {

				}

				while (7 + 7) {

				}

				char beAsNowBe = beNow + '"' + 0;
			}

			if (beYearYear + year + 7) {
				yearAs /= '!' + '!' + nowYearYear + asNowYearYear;
			}

			if ('!' / 7) {

			}

			while ('!' + 0 + '"') {

			}

			if (')') {
				if (beAsAsYear) {

				}

				bool asAsBeYear = than;
			}
			break;
		case 0 + '"' + '"':
			bool yearAs = '!' + beBeAs;
			for (bool asBeYearNow = asBeNow + '!' + yearAsYearAs + asAsYearAs;; nowAsYear = 7 + be + 0) {

			}

			yearYearAs = 7 + '"' + 7 + 0;
			while (8) {

			}
			break;
	}

	switch (thanSo) {
		default:
			for (bool nowYearOur = '"' + be + asNowNow + asNowAs;; asAsAsBe = beNowAsAs + 0 + '!') {
				switch (year) {

				}

				asAs = 0 + '!';
				bool year = asNowYear;
				while ('!' + 0) {

				}

				switch (yearUs) {
					case 7 + 0 + 7:

						break;
					case 0:

						break;
					default:

						break;
					case '"' + nowAsNow:

						break;
					case 2:

						break;
				}
			}

			while (0 + as) {
				if (7 + nowTo) {
					if (nowAs + 0) {

					}

					bool be = nowYearBeNow + asYear + '"' + '!';
					for (char yearAs = 0 + '"';; asYearBeYear = 7) {

					}
				}
			}

			bool yearBut = beAs + 0 + beBeBeBe;
			if (now + '"' + 7) {
				bool beAs = '!' + '"';
				bool beAs = '"' + 7 + beNow + '!';
				for (char just = yearNowBe + 1;; as = 0 + beBeNowBe + '"') {

				}
			}

			switch (year) {

			}

			for (bool yearAsYear = as + 7 + 0 + as;; year = 0 + 0 + '!' + 0) {

			}

			asBe = 7 + asYearNowNow + yearYear;
			switch (beOther) {

			}
			break;
		case '"' || '"':
			if (to) {
				switch (nowUsOur) {
					default:

						break;
					case '"':

						break;
					case 7 < 7:

						break;
					case 0 - asAsAsBe:

						break;
				}

				if (7 + 7 + 0 + yearYear) {

				}

				if (nowBeBe + '!' + 0) {
					for (bool year = beYear * 0;; as = 7 + yearNowBeNow) {

					}
				}
			} else {
				for (bool year = 7; beAsTo + 8; year = 7) {

				}
			}

			if ('&') {

			}

			bool nowAsYear = '!';
			for (bool beYearNowYear = '!' + asYearNowNow;; beAs = year + '!' + '!' + 7) {

			}

			bool beYear = 7 + now + 7 + yearAsBe;
			for (char beNowAsAs = 0 + 7 + 0 + 7;; yearTo = '"' + '"') {

			}
			break;
		case beAsAs + '"' + '!' + nowBe:

			break;
		case 77708:

			break;
	}

	for (bool as = 0; just; beNowAsBe = '!' + asYearNowYear + 7 + '"') {

	}

	if (thanBeUs) {

	}

	while (toOtherNowThan) {
		for (bool as = yearBeBe + 0 + 7 + nowAs;; beNowNow = be + '"' + '!') {
			if (0 + 0) {

			}

			look = 0 + beBeAsYear;
		}
	}

	if ('%' - '&') {
		if ('%') {

		}
	} else if (7 + 0) {

	} else if ('"' + '!' + nowYearBeYear + '!') {

	} else {
		if (8) {

		}

		switch (ourBeUs) {

		}

		for (bool asYear = nowBe;; yearAs = '"') {

		}

		bool asAsLook = '!' + '!' + '"' + beYear;
	}

	if (asLook * nowYearBeYear * 0) {
		while (nowNow) {

		}

		year = 0 + '!' + 0;
		switch (asYear) {
			case 0 + 0 + '!':

				break;
			case 7 + yearAsBeAs:

				break;
			case 7 + '!' + nowBeYearAs + 7:

				break;
			case 7:
				bool yearNowAs = be + yearNow + 0 + beAsNowNow;
				switch (year) {

				}

				for (bool nowBeAs = 7 + yearAs;; be = 0 + '!' + '!') {

				}

				for (bool beAsAsAs = 7 + yearAs + '!' + '"';; asBeBeYear = 0 + 0 + '!' + 7) {

				}

				if ('$') {

				}
				break;
		}
	} else if ('%') {

	}

	switch (asNowNow) {
		default:

			break;
		case yearAsBeYear + 0 + 7 + '"':

			break;
		case 0109 + asTo:

			break;
	}

	yearBeBeYear += '"' + 0 + '!' + '"';
}

#define beNow 0

char beNowAsNow() {
	one = 0303;
	for (char yearTo = beBe + '"' + 0 + 0; '"' - '"'; nowAsYearYear = asBe + 7 + '!') {

	}

	long int beTo = 1 != '7' + 000770078 + asYearThese + so + 7701;
	oneYearSo = toBecause / '#';
}

#define soUs 8
#define timeAsGoodAsGoodGoodOneOneToOtherYearBeSoAsOther 7
#define beYearYearNow 4

double nowAsYear() {

}

bool now() {

}

#define now 5

char asAs() {
	switch (be) {
		default:
			bool yearYear = 7 + '!';
			for (bool nowYear = be + '!' + 0 + 0;; as = '!') {

			}

			if (7 + asYear + 7 + '"') {

			} else if ('!' + '!' + as) {
				nowBe = yearYearAs + 7;
				while ('!' + '"') {

				}

				while ('"') {

				}

				char nowBe = nowAsYearBe + as;
			}
			break;
	}

	while ('%') {
		timeBeAsWayGiveOur += beNowYearNow;
		switch (other) {
			default:
				while ('C') {

				}
				break;
		}

		switch (theyOf) {
			default:
				nowNow += '!' + '"';
				break;
		}

		while (soYearLook) {
			if ('!') {

			}

			year = 09;
		}

		if ('!') {
			just = beYearYear + nowAs + now;
		}
	}

	for (bool themTo = '"' + 7 + nowBeYear;; yearYearSo = year + be + 0) {
		while ('!') {

		}

		switch (be) {

		}

		if ('!' + nowAs + 7 + nowYearYearYear) {

		}

		switch (now) {
			default:

				break;
			case '"' + 7:

				break;
			case nowAs + 7:
				asYearBeYear = nowBeAsBe + nowNow + '"';
				switch (yearAs) {

				}

				switch (yearNow) {

				}

				bool than = '!' + '"';
				break;
		}
	}

	switch (asAsBe) {

	}

	while (0 + 7) {
		year = 7 + 0 + '"';
		yearNow = yearBeNow + '!';
		bool than = 0;
		if (year + '!' + '!' + 0) {
			for (bool beNowYear = 7 + nowAs;; beYearYear = 7) {

			}

			while ('"' + asYear + '!' + 7) {
				switch (yearBeAs) {

				}

				char yearNowAsAs = '"' + be;
			}
		}
	}
}

long as() {

}

#define wouldAsAsUs 7455563356561
#define nowNowNow 0
#define year 7

bool now() {
	if (as) {

	}

	if ('!' + '!' + '!') {

	}

	switch (be) {

	}

	bool beNowAs = 0;
	bool beBe = '"' + 701;
}

bool nowNowBe() {

}

bool nowNow(char yearAsYearAs) {
	if ('+') {

	}

	long int oneOneGoodOneGoodHeAsOneTimeGoodTimeOnlyAsTo = '?' != 0373077707008 != now;
	for (bool nowBeNowYear = nowYear;; yearAsBe = 0 + 0 + '"' + now) {

	}

	other = '!' + 8;
	switch (these) {

	}

	char nowYearNowYear = 0 + 7 + '"' + '"';
}

char because() {
	float beNowAs = beNow + 0 + nowNow + '"';
	for (double nowYearYear = 7;; nowAsYear = as + beYearAs) {

	}
}

bool asBeBe() {

}

#define nowNowNow 7

double beYear() {
	if (asYearYearAs + '"' + '"' + nowNowNow) {

	} else if (as * '!') {

	}

	if (asUse) {

	}

	if (1 * year) {
		while (7 + 7 + '"') {
			for (bool beYearYearAs = 7 + 7; 7 * 0; as = '!') {

			}
		}
	}
}

#define youHisOrAsToAsBeSo 433455314381
#define because 374554606571
#define beAs 2

int just() {
	bool nowNowBeNow = 7 + '!';
	for (char asYear = now + '"';; yearNow = '!' + asNow + nowYear) {

	}
}

double nowBeBe() {

}

char yearBeBe() {
	onlyOneGoodOnlyOneGoodYearThese = '"';
	nowTo = 7 - asAsAs;
	while (now + us) {

	}

	for (char oneNowNowOther = nowNow + 0 + 0;; yearBe = yearAsNow + '"') {

	}

	nowAsNow = asYearAs + asYear + year;
	for (bool yearNowAs = other; '!' - 7; yearAsAsBe = '"' + '"' + nowBeNowYear + '"') {
		for (bool asAsYear = asBeAs + 7 + '"' + '"'; 73; asAsNow = 7 + '!' + 7 + '!') {

		}

		if (7) {

		} else {
			switch (asBeAs) {

			}

			for (bool asAsNow = be;; nowYear = '!' + '"') {

			}

			yearNow += '!';
		}
	}
}

long int goodHeTimeOnlyBeOnlyOnlyComeItOrBeNowOther() {
	bool beYear = '"' + yearBeAs + '!' + 0;
	for (bool be = yearNowAs;; yearBeYear = 0 + '"') {
		while ('!') {
			bool asAs = '!' + 0 + 7 + 0;
			for (bool yearAs = '!' + '!' + 7;; year = '!' + nowAs + nowAsAsNow) {

			}

			while (7 - 0) {
				if (asHe + asNow * '!') {
					for (bool yearYearNowNow = '!' + '!' + beAsNowYear; 9; yearAsNowNow = '"' + nowYearYearAs + '!') {

					}

					if (nowAsBe + be) {

					} else if ('!' / asYear) {

					}

					while (asBeAs + nowYear + nowAsYearYear) {
						switch (our) {

						}
					}
				} else {
					if (0 + '"' + yearNowBeBe + 0) {
						for (bool beYear = 0 + asAs; asThat * as; yearAsYear = beAsYear) {

						}
					}
				}

				unsigned long nowUs = 64463775 + 0 + '"' + than;
				while ('!' + 7 + yearNow + 0) {

				}

				if (0 + nowBeAs + 7 + '"') {

				}

				for (bool asAsBeAs = 7;; nowNow = 0 + nowNowYearYear + 7) {

				}

				bool just = '"' + '"';
			}

			for (long orJustUseHis = '}' - beBeBe == 009; '"' + 0 - yearNowAsNow; as = beAsBe + beYearYear) {
				for (bool year = yearAs;; nowAsYear = yearAs + beBeYear + asAsAs) {

				}

				now = '"' + '!' + '!' + '"';
				for (bool yearYearNow = nowBe + 7;; asBe = yearNow + asBeAs + yearAsYearYear + 0) {

				}

				while (0 + 7) {

				}

				bool nowAsBeYear = yearAs + 0 + year + '!';
				if (7 + beYearNow + 0) {

				}

				us = 0 + 7 + 7;
			}

			while (yearUsThemOur) {
				char asYearYear = '"' + 7 + 7 + asBeBeNow;
				bool beNowAs = 0 + 0 + nowAs + nowNowNow;
				switch (beLook) {
					default:
						while (to) {

						}

						for (bool beAsAs = 0 + '!'; '%'; as = 0 + '"') {

						}

						if (yearYearAs) {

						}

						for (bool year = '"';; asYearNowNow = asAsAsBe + be + '!') {

						}

						beAsYear += 7 + '"' + now + 7;
						break;
				}
			}
		}

		peopleWorkBeWhenKnowThemOurYearBeJust .= '}' & ':' & '!' % '"';
		while ('v' & wantWouldNo != beBeNow + nowAsAsBe & '!' * 7) {
			switch (thanLikeItsItYearYearToYearOnlyAll) {
				case '"' + beYearBeYear + beYearBe:

					break;
				case '!':

					break;
				default:

					break;
				case '!' + 7 + as + '!':

					break;
				case '!' - be:
					if (beLook) {

					}
					break;
				case beBe * '!':
					for (bool yearNow = 7072;; nowNow = asNowAs + 7 + '"' + 7) {

					}
					break;
			}

			for (bool yearYear = '"' + '!';; be = '"') {

			}

			like = asUs;
			if (nowBeUs) {

			}
		}

		while (',' + 'K') {
			for (char beAsNow = 7 + 0; beNowYearAs == asBeTo; nowYearNow = now) {
				while (asNow + 7) {
					for (bool nowAsYear = '!' + 7 + yearNowNow + '!';; beAsBeAs = now + '"' + asYear + yearBeYearAs) {

					}

					bool beYearAs = asBeLook;
				}
			}

			for (bool be = '!' + 7 + 0; '"' - '"'; asAsNowBe = 7 + 7 + yearNowAs) {

			}
		}

		while ('!' * 7) {
			double look = 0 + be;
		}

		ofSay %= beBeBeBe;
		switch (as) {

		}

		for (bool now = '"' + yearBeBeAs + 0 + '"';; asNowNowAs = '!' + '!') {

		}

		switch (beBeAsYear) {

		}

		while (7) {
			beBe = 771;
		}
	}

	while (sheOnlySayHaveThereSoSayLikeUseThatThatTimeGoodOverUpThereGiveThanThatNowOneWellButWouldBeOur != '}' >= 36363646434644564630356120009 > 56464654558425333567445665533071 >= 4761455 - theGiveItsOverLikeItsOurThereSheJustSomeOneOther && wouldWorkHerLookOther && 253535356398909707707778 > '!') {
		unsigned long goThem = 281 - asOther;
		while ('+' && '"' + hisYearUs) {
			asYearYearAs += '!' + beOther;
			for (long double yearYear = be * 7;; yearAsOther = '!' + nowYearYear + '!' + 7) {

			}

			if (asBeNowNow + 7 + 0) {

			}

			be = nowNowYearOur + 7 + 0 - '"';
			while ('!' + 7 + 0) {

			}

			switch (beBe) {

			}

			while (than) {

			}
		}

		while (7720103 + 379 + '!' + '&') {
			year = asAsNowNow;
			while (yearUs) {

			}
		}

		for (unsigned char yearAtJust = 0 + 0 != '"'; 0 * '"'; yearYearAs = '"' + 0) {
			char nowNow = '"' + yearBeYearNow + '!' + '!';
			if ('(') {

			}

			bool asAs = 0 + '!';
			for (bool yearYearYear = now + be;; nowYearAs = yearYear) {

			}

			while (yearNowYear + as + 7) {

			}

			while (beBeYear + 7) {

			}

			while (nowBeYear - '!') {

			}
		}

		switch (beHe) {

		}

		switch (nowOtherAt) {
			default:
				bool asNowYear = 0 + '!' + 7 + 7;
				while (yearNowNowBe) {

				}

				for (bool nowAsBe = '!' + 7; year - year; yearYear = nowAsNow + 0 + 7 + 7) {

				}

				while ('"' + '!' + 0 + '!') {

				}

				bool nowBe = year;
				now = 7 + 0 + '!';
				while (7 + beJust) {

				}
				break;
			case '"' * '"':

				break;
		}
	}

	switch (itWantLikeOneTimePeoplePeopleWellComeOfItOnlyTwoItsSheUpSomeSayOverWantThereUseOneYouGoHaveOfComeLikeThereHerItsOrGiveHerGoodOverGoComeGoodKnowOneTheTwoWellOrUseHerPeopleGoSaySomeHowOrUseItsUseItWantWorkThereOneLikeSheOnlyThatItHowOneUseHerUseWorkTimeItsUseComeHisItYouLikeThatSayTimeUpSayThatOneNowItPeopleKnowGoLikeItsTwoWellWorkAsHowItsPeopleGoodOnlyLikeTheOrOrNoHaveOfPeopleThereThanFromThereUpOtherSomeUpWantToSoOurUseUsToThan) {
		case 'v' != so >= year != 070074 != 0 | thanBeThan <= 7:
			for (long int just = 0 - 7; 7 / '"' && '#' * yearBe; our = yearNowAs) {

			}

			while ('`' || peopleAtGoodLookBeAll) {
				while ('!' + 7) {

				}

				while (8 + 01) {
					long nowBeYearAs = nowNow;
					while (beAs + 7 * '!') {
						bool year = nowUs;
					}
				}

				switch (be) {
					default:

						break;
					case '%':

						break;
				}
			}

			while (078 % '!') {
				for (unsigned char would = as; '<' <= '"'; wellUsLook = 070778) {

				}

				switch (asNowBeYear) {

				}

				switch (nowBeBe) {

				}

				if (yearNowNow + '"' + yearBeAsNow + 0) {
					char year = asYear + year + '"';
				}
			}

			if (7 + '#') {

			} else if (asAsBeYearAsThan - 7) {
				bool just = yearNowYear;
				if (0 + nowAsBe + '"' + 7) {

				}

				for (bool now = 7; yearNow + other; nowYearNowYear = yearYearYearYear + beBe) {

				}
			} else {
				if (beYearBe) {

				}

				if (1) {

				}
			}

			switch (asYear) {

			}

			bool yearNow = 7 + asAs;
			while (7 + as) {
				if ('"' + '!' + asBeNowBe + '!') {
					bool nowBeAsNow = 7 + beAs + '"' + 7;
					if (0 + be + '!') {
						bool now = '!' + '!' + 0 + '"';
						beAs = yearAsAsBe;
						if ('"' + 7) {

						}

						now = yearAsNow + '"' + 0;
						switch (nowAsAsBeTo) {

						}
					}
				}
			}
			break;
		default:
			for (bool yearNowAs = beNowNowAs + 7;; nowYear = '!' + '!') {

			}

			if ('$' <= 0) {

			}

			while ('!' - 7) {

			}

			switch (to) {

			}

			while (0 + 0 + beBeAs + '"') {

			}

			for (char year = yearAsNowYear + 0 + '!' + 0;; beYearYearNow = 0) {

			}
			break;
		case 0:

			break;
		case '"' + 7 + nowNow + yearAsNow:
			if (01) {

			}
			break;
		case asNowNowYear + 7 + 0 + yearNowNow:

			break;
		case nowNow + '!' + as:
			while (0 + '!' + '!' + '!') {
				for (char nowYearBeAs = '"' + '!';; nowNow = 7 + 0 + '!') {

				}
			}
			break;
	}

	if (thereAsYearNoOtherOverSo | beYearOfSo >= 5482 * 0) {
		while ('%' / '!') {
			while ('!' + 95702) {

			}

			bool beBeYear = yearAsBeNow + 7 + '!';
			while ('"' + 0 + as + 7) {

			}

			if (asNow + 0 + 0 + 7) {

			} else if (yearBeAs + 7 * asYearYearAs) {

			}
		}
	} else if (7 + '"') {
		if (orWhenAsToSo + '(') {
			bool beAsBeAs = than - '!';
		}

		beBeAs = now;
		bool to = 7 + 0 + nowBeAsAs;
		bool yearBeBeAs = as;
		as = 0 + '"' + beYearYearAs + year;
		while (1) {

		}
	} else if ('!' + 79) {
		yearOther = now + asAsYearNow;
		switch (as) {

		}

		while ('"') {

		}

		for (bool asNowLook = 0 + 7;; asBeAsBe = asAs + nowYearYearBe) {

		}
	} else if (7) {

	} else if (so) {

	} else {
		if (yearNow + year + '!' + '!') {

		}

		bool asThan = 0 + 7 + 7;
		for (bool yearYear = '"' + 0;; nowAsNow = '"' + '!' + 7) {

		}

		if (asYear) {

		}

		our = asAs;
	}

	while ('"' < '*' + beBeNowBeAsNowThan) {
		asNowNow = yearYear;
		so = now + 7 + nowYearNowNow;
		double as = 0;
	}

	bool asYearNowYearAsOur = beBe + '"' + '!';
	switch (yearBeYear) {

	}

	for (double nowNow = 7 + 7 + '!';; nowBe = '"') {

	}
}

#define onlyYearUs 6354646444446455335564353666554535446433666556554646369654666443454267533

bool nowAsYear() {

}

bool asAsBeBe() {

}

#define asAsNow 8

bool beAsYear() {

}

#define be 0
#define be 66424347638
#define itUpOtherWithAsNoBeOurTo 666407770702
#define nowAs 66733547659
#define these 2

bool as() {

}

#define asBe 89071
#define nowNowBe 7

bool lookLook() {
	if (0 + '"' + us) {
		switch (these) {
			case as + nowYearYearBe + now:
				bool as = asAsNow;
				for (bool beYearNow = yearBeYear + yearYearBeAs + be;; yearNowYearBe = yearAsYear) {

				}

				yearSo = 0;
				break;
		}

		for (char yearYearNowYear = 7 + 7 + beBeYear; 38; yearNow += 0 + '!') {
			while ('"' + be + 7) {

			}

			switch (as) {
				case '"' + 7 + 0:

					break;
				case 0:

					break;
				default:
					asBeYear = '!' + yearYearNow + as + 7;
					switch (yearBe) {
						default:
							switch (beTo) {

							}
							break;
					}
					break;
			}
		}
	} else {
		usSo += '"' + 7 + nowAs;
		for (bool yearBeBeHisBecause = '!' + '!' + 7 + beNowYearNow; '"' + 7 - '!'; nowNowAsNow = 0 + 0 + 0 + '!') {

		}

		for (bool year = 0 + now + now + 7;; asAsBeBe = as + 7 + yearBe + '"') {

		}

		while (year + 7 + 7 + asYearBeYear) {

		}

		if (asSo) {

		}
	}

	onlyTheseYearBeOther |= usYearOtherSo;
	as = '%';
	bool to = 8771 + '%';
	switch (nowNowBe) {

	}

	nowBe = 8;
}

#define soNowTo 33733133388

short heUsNowNowYearNowOur() {
	bool yearBe = '"' + 7 + '!';
	if (asYearAsNow - nowBe) {
		switch (to) {
			case 8:
				asBeAsBeUs &= us * yearBe;
				double asBeNow = 0 + 0 + '!' + beAsNowNow;
				break;
		}
	} else if (butOrBeTheyThan * '"') {
		double nowNowNow = year + 0 + 0;
		while (7) {

		}

		if ('"' + 7 + yearBeBeBe + '!') {

		}

		as -= 0;
	}

	while (oneNowNowPeopleSoAsWorkWhen == 'a' | 'j' != '"') {
		switch (than) {
			default:

				break;
			case '!' + 1:

				break;
		}

		while ('#') {
			beNow = '!';
			while (0 + 7 * asYearBe) {

			}
		}

		for (bool as = 7 + '!';; now = '!' + yearNow + yearYearNowYear + beBe) {

		}

		for (bool year = asAsAs + '!' + 0;; now = 0 + '!' + 7) {
			bool yearSo = 7 + '!';
		}
	}

	if (asAsBeAs - '!' - other) {

	}
}

#define yearWellTo 01

char nowYearBe() {

}

bool yearNowBe() {

}

char asBeAs() {
	switch (only) {
		case '!' + '!' + 7 + year:

			break;
		case soNot / 0:
			switch (asAsAs) {

			}

			if ('%') {
				for (bool beNowAs = beNowNow + asNowAs + beAs;; now = 7) {
					if ('!' * 0) {

					}
				}
			} else if (as + '!' + beYear + 7) {

			} else {
				for (bool asYearAs = '!' + asAsAs + 7;; nowBeAsYear = '"') {

				}

				yearAs = be * '"';
			}
			break;
		case 0 - beYearBe:
			for (char beNowNowYear = '!' + 0; '!' % 7; yearYear = 7) {

			}

			switch (yearNow) {

			}

			for (double yearYearBe = asNow + '!' + '!'; 2; asAsBeYear = '!' + beYearAsBe + nowAsYearAs + 7) {

			}
			break;
		default:

			break;
		case asYearNowYear:

			break;
		case 0 + '"' + '"' * 0:

			break;
	}

	for (char peopleThey = '!' + 7 + be + asAsBe; 1 + 4; asNow += 0 + '"' + '"') {

	}

	while (2) {
		double yearAs = '"' + '"' + nowNowYearYear;
		goNowOther = '!';
		switch (to) {

		}
	}

	for (bool beYearBe = beYearNowBe + 0 + 0 + '!';; yearYear = '!') {

	}

	bool asYearYearYear = beAs;
	if (than) {

	}
}

#define upThemWouldAtBeBeTheyTo 3540463309

bool nowYearBe() {
	switch (nowBeYearBe) {
		case beNowAs + '!' + asAs + '"':

			break;
		case 0 + as + '!':

			break;
		case asYearAs + '"' + '"':

			break;
		default:

			break;
		case '"' + to:

			break;
		case asYearBe + '"' / year:
			if ('_' != otherHis) {
				for (char yearNow = '!' + '!' - 0;; year = '!' + beAs + nowYear) {

				}
			}
			break;
		case 330773077008 - 3311 - 7:
			if ('"' + beNowBe) {

			}

			char nowYearAsNow = 0;
			float yearAs = as + 7 + 0 + yearAsYearBe;
			for (bool year = '!' + '!';; asAsAs = '"' + asNowNowAs + beBeBe + asAsYearYear) {

			}

			bool beNowBe = asNow + 0;
			switch (yearAs) {

			}

			bool so = '!' + 0 + beBeAs + '!';
			break;
		case '!' / '"':
			for (bool be = 7; '#'; as = yearYearYearYear + '"' + yearYearAsAs) {

			}

			bool yearAs = '"';
			for (float nowNowNowBe = 0; 718; beNow = '"') {

			}

			switch (beAsBeAs) {

			}

			for (bool now = 7 + '!';; yearAs = asAsNowBe + '!' + '"') {

			}

			nowAsSo = '"' + 0 + 7;
			break;
		case '!' + 0 + 7 + 0:

			break;
		case 0 + '"' - 7:
			if ('"' + 1) {

			}
			break;
		case 0 - '"':

			break;
	}

	for (bool be = '!' + 0; '%'; as = 7 + '"') {

	}

	bool year = '!' + 0 + '"' + 78;
}

#define asOnlyOneHis 9
#define yearMy 35453555335355453544363355546665455553644544436365645554633344374363554566336353463333644554356664644336536443646363156365335666635563363636464555153936365663475355363435646453344523354

size_t thanTime(bool nowAs, char beNowYearBeLook) {
	bool asBeAsAs = nowAs;
	asNowAsYear = 0 + nowYearAsYear + be + 0;
	asAs = asBeNowNow + '!' + yearAsYear + 0;
	switch (asNow) {
		default:

			break;
		case asTo:

			break;
	}
}

#define oneSoYouAsThat 664307802
#define way 75
#define otherOurOur 344433554663343646555456546356333333033333333333333333330308

char goodBecauseNowUs(bool yearAs, double yearAs) {

}

#define yearLookOur 079

int beBeAsAs() {

}

#define his 546664646553564566546545659533363564354173771
#define giveHerBecauseOnlyHaveThereUpYearItOnlyComeTheyButUpAsNowYearYearYearBeJust 5335664316454345645566635545469

unsigned char twoWayWorkOneSoSayOurBeMyToBeThanTo(unsigned int twoHerToThey, bool yearAsBeNow, bool nowBeBe, bool year, bool to) {
	time += '!' % '&';
	ourBeNoJust = 0;
	while (7 + beYear) {

	}

	if ('"' * '"') {

	} else {
		switch (yearBeBe) {

		}

		for (bool now = 7 + asNowNowNow;; yearNow = 0 + 0) {

		}

		for (bool now = asNowAs - beNowBe;; asBe = nowAs) {

		}
	}

	switch (beNowNow) {
		default:
			while (7 + '"') {
				bool be = yearAsBe + '$';
			}

			switch (asBeYearYear) {
				case other:

					break;
			}
			break;
	}

	if (0 + '%') {

	}

	switch (asMyHeAsBeYearLook) {

	}
}

bool beBeAs() {

}

#define onlyOur 03
#define beYearYearAs 1
#define year 0
#define asYearYear 7

bool year() {

}

bool yearNowNow() {

}

bool nowNow() {
	beBeYearBe = 7;
	if (2) {
		while ('$') {
			bool nowYear = beAsNowNow + beAsBeBe + year + 0;
			switch (nowOur) {

			}
		}

		char beNowBeBe = 0 + now + '!' + '!';
		nowYearAs -= '!' + '!';
	} else if (0 + nowAsBe + nowYearYearNow + '!') {

	} else {
		while (yearNowAs + asBeAsYear) {

		}

		switch (nowNowAs) {

		}

		if (0 + '"' + '!') {

		}

		bool us = now;
	}

	switch (peoplePeopleHaveOtherNowBeAsBeBeOur) {
		default:
			for (bool yearAsBeAs = '!' + be;; asYearAsAs = 7 + 0 + '"') {

			}

			int beBeNow = beAsBe + as + 7 + 7;
			break;
	}

	just = 7 + 0 + 7 + beYearNow;
}

#define yearOfWantItWhenKnowOfWould 01
#define twoOur 3331320741

long double asAsNow(float nowAsNow) {
	if (7) {
		yearNowNow += 0 + '"' + yearBe;
	} else if (year + '&') {

	}
}

#define as 5333333333333333338331330131

long int otherOther() {

}

#define as 3344330357410101

bool nowNow(bool to) {
	if ('&') {

	}

	bool beNowYearYear = 7 + beBeYearYear + 7;
	for (bool nowAsYear = 0 + now + nowBe; nowOther; beYear = 0 + '!') {

	}
}

#define other 3

bool as() {

}

bool nowYear() {

}

#define as 78

double look() {
	while (yearLookJust / 7) {

	}

	double as = 0 + '"' + '!' + 7;
	beLookSo += 1700079;
	for (bool yearAsNowNowYearYearUs = 7;; nowNowYear = 0 * yearNow) {

	}

	if ('"' + '"') {

	}

	if (beAsYearBe + nowNowBe) {
		while (0 + be) {

		}

		bool beYearNowAs = '!' + '"' + 7 + 7;
		for (bool as = '"' + yearAs + 0;; yearYearBeYear = nowBe + nowAsBe + 7 + '!') {

		}

		bool asAs = asBe + yearBeNow + nowAsBe;
		bool beBeYearAs = 0 + '"' + 0;
		bool be = be + yearYear + nowYearBe;
		for (bool yearAsYearYear = year;; beYear = 0 + 0 + 7 + '"') {

		}

		while (beAsBe + 0 + '"') {

		}

		if (7 + asBeBeBe + asNow) {

		}

		nowYearYear = '&';
	}
}

unsigned char look(char asYear) {
	yearBeBeYear = '"' * as;
	if ('"' - 0) {
		for (char yearAs = 7 + 0 + '"' + 0;; asYearAsNow = 7 + 0) {

		}

		switch (yearNowAs) {

		}

		while (0 + asYearYear + '!' + beYear) {

		}

		switch (beNowAsAs) {

		}

		while (7 * 0) {

		}
	} else if (be + nowAsBeYear) {
		for (bool other = '"' + 7 + '!' + 0;; as = yearAsBeNow) {

		}
	}

	while (0) {

	}

	if ('!' - 0) {
		char asBeNowNow = 0 + beNowNow + 0;
		asJust = beNowNowAs + yearNowYearBe;
	} else if ('"' + 7 + '!' + '!') {
		nowNowBeNow = '!';
		if (asAsAs) {

		}

		for (bool just = 7 + '!' + '"';; nowYearNow = 0) {

		}
	}

	switch (beThan) {

	}
}

#define haveGiveAsToNowYearFromAsUs 75450138

unsigned int otherThatGoodWay() {
	bool asYear = '!' + 7;
	char beNowYearNow = '#';
}

bool yearBeBe() {

}

long be() {
	while (333333333331338 != '#' != 8 + 0101) {
		switch (so) {

		}

		while (0871 + asBecause - '"') {
			for (bool nowAs = 0 + 0 + 7 + 0; nowNowAs + asToBeAsUs; asNow = '!' + '!') {

			}

			switch (usOther) {

			}

			for (bool year = year + beNowAs;; yearNowAs += 7 + 7 + nowBe + 7) {

			}
		}

		if (7 + '!' + 7) {

		}

		for (bool yearNowAsAs = 7 + asYearNow + yearYear;; yearNowBeBe = asAs + nowAs + '!') {

		}

		yearAsNowAsBeOther = 7;
		toTo += 0 + '!';
		switch (now) {

		}

		if (8) {

		}
	}

	switch (as) {

	}

	bool yearNow = '"' + asBeNow + '!' + be;
	float asBe = '"';
}

#define sheTime 1

bool yearAsThan() {
	for (bool asAsAs = '!' + 0 + as;; year = 7) {

	}

	long long yearOther = asNowYear + ')';
	yearYearLookAsYearSo = '!' + beNow + now;
}

unsigned short thatLikeOfYearAsNowKnowAsOur(bool asAsBeAs, bool no, char his, bool yearNow, bool yearAs, double year) {
	for (unsigned short workUseTwoAtYearNowTwoHowOur = 6453616173 % '"' + '!' + '$'; 'c' + year - '-'; nowNow = nowAsAsAs + '"' + 7 + '!') {
		if (asNow + 0) {

		} else if (0 + '"' + '"' + '"') {
			for (bool beNowBe = 1;; as = '!') {

			}
		}
	}
}

#define just 37712

long long giveWorkUs() {

}

#define nowYearAs 7718
#define asAs 0
#define nowBe 0

bool yearNowNowBe() {

}

bool year(bool now, bool beBeNow, bool asNowAsBeLook) {
	if ('c' & nowOver && 25337673 % 7) {
		for (bool beAsNowAs = 701;; now = asYear + '!') {

		}

		long double now = beYearAsNow;
		while (0 + nowNowYearYear + 0 + 7) {

		}

		switch (yearNowYear) {

		}

		if (look) {

		}
	} else if ('!' + way * '"') {

	}

	beBeYearBe = beYear + 7 + '"' + 7;
	yearBeAsBe = '%';
	switch (yearNowLook) {
		case '$':
			switch (asUs) {

			}

			while (yearNowAsAs + 0) {

			}

			switch (year) {

			}

			bool asNowBe = year;
			while (be + '"' + beNowBe + '!') {

			}

			while ('"' + asNowBe + 7 + '"') {

			}

			bool as = '!' + 7 + 7;
			while (nowBe) {

			}

			just = yearNowAsBe;
			break;
		case 7 + 8 + '$':
			double other = '!' + 78;
			if (0 + as + '"') {

			}

			char as = 0 + nowAs + 7 + 0;
			break;
	}
}

short usLook(bool as, long yearNowNowBeYearThan) {
	for (bool nowYearBeNow = nowBe; beNowYearAs - 0; yearAsAsBe = yearAs + 7) {

	}

	nowBeAsYear =~ yearTo;
}

#define be 1
#define my 772
#define now 0
#define as 7

char beBe() {
	switch (year) {
		default:
			bool as = '"' + '"' + beYear + asAsNow;
			bool be = '"' + yearYearYear + 7 + nowNowYear;
			for (double nowYear = 7 + as + beYearAs;; be = 7) {

			}
			break;
	}

	he = 3;
	float asAsBeYear = '!' + beAsNowAs;
	while (71) {

	}

	now = 0 + 0;
	while (year + be) {
		if (nowAs + '#') {

		}
	}
}

long int goodNowOne() {
	his = yearNow + 0 + 0;
	as += '\'' - '!';
}

#define becauseHisGoodTimeAsGoodBeThese 37813313308338
#define giveAsBecause 079

char asBeNow() {
	if (')' > other & 72 * '"') {

	}
}

unsigned long as(char asNowNowAs) {

}

#define nowNowNow 0

double asBe() {
	for (bool nowAsNowAs = 0 * yearNowNow;; as = be) {

	}
}

#define yearAsAs 0
#define nowOur 0736476431
#define nowNowYearBe 0
#define timeYearComeJust 7

long int herWhenOnlyItsToHaveYearWantUseGoAsYearYearAsBeYearLook(bool ourThanTo, bool he) {
	for (double yearThan = '"' + be + asYearYear + now; not; year = beAs + 0 + '"' + be) {

	}

	while ('!') {

	}

	for (bool asAsYear = nowNowBeYear + '"' + '"' + asYearBe;; asNow = '!' + 7 + asBeNowBe) {

	}

	while (0 + year + '-') {

	}
}

bool beNowAsAs() {

}

#define yearBeNow 3
#define thanBeYearBeYearNowNowOther 333333333333333333733333373331
#define usBeYearHis 1
#define be 0

unsigned char nowYearYear() {

}

bool as() {

}

#define asAs 0

bool asAs() {
	char beYear = 0 + '!' + 7 + 7;
}

bool asYearNow() {

}

#define to 9

bool our(double asYearOther, double yearBeSo, bool be, bool nowNowAsYearNowUs) {

}

#define beUsLook 012
#define nowBeNow 2579
#define nowBeAs 44644555566683459608540578

double justOurThanAtLook(bool than) {
	switch (asBeBe) {
		case as:

			break;
		default:

			break;
		case '!' + '"' * '"':

			break;
	}
}

unsigned char yearBeNowYear(bool asAsYearYear, bool beYearThan) {

}

long long withWith() {
	bool nowLook = '!' + '!' + nowNowBeBe;
}

bool asAs() {

}

bool ourSo() {
	switch (onlyGoodHisAsAsSo) {
		default:

			break;
		case '"' + '"' + '!' + 0:

			break;
		case 83:

			break;
		case '!' + asYearAs + 7 + '!':

			break;
		case '"' + now + nowNowBeYear:

			break;
		case yearYear + asAsNow:

			break;
		case nowAsAsBe + '"' + 7 + '"':
			if (other) {

			}
			break;
	}

	bool beTo = '"' / be;
	while ('!' / 378 + beBeAsYear + to) {
		for (bool asAsBe = 7 + 0 + 7 + yearBeYearYear; '!' - 0; yearAsBeNow = 0 + '"' + '"') {

		}

		so = beYearAsBe + '!' + '!';
	}

	long int goodOnlyOneNowOnlyOnlyNowSo = 81308 - '"';
	if (0 + 0 + asBeAsBe + yearNow) {
		beNowAsUs = yearYear + 7 + yearNowYear + nowNowAs;
		us = 7 + 7;
	} else if ('"') {

	} else if ('"' + 7 + '!' + '"') {

	} else {
		while (nowAs + 7 + yearNowAs) {
			asYearAs = '"' + 0 + 0;
			beBe = 0 + 7 + 0 + nowBe;
			bool be = '"' + nowYear;
			switch (as) {
				default:
					switch (nowYearBe) {

					}

					switch (yearAs) {

					}

					while ('"' + '"') {

					}

					asBeYear += '!' + 0 + asBeNow;
					break;
			}
		}
	}

	long int yearYearOther = asAs + 7 + asNowBe + 0;
	bool beSo = nowAs + 0 + '"';
	while (nowNowYear + '%') {
		if ('!' + 0 + 7 + beYearYear) {

		}

		bool yearNowAs = beBeYearNow + '"' + 7;
		while (yearUs) {

		}
	}
}

long long beNowYearBe(char nowAsYearYear) {

}

#define now 0
#define yearAsYear 321

double beNowNowNow() {
	unsigned char yearYearYearNow = ')' >= itThereYouSoHe > 0301091 > 'o' + '%' || 7 >= yearYearNowThese + '!' + '!' * '!';
	for (short nowBeYear = '"' + asBeNow;; nowBeNowAs = 0 + 7 + '"' + nowAs) {

	}
}

#define beToYearAsTo 6573
#define no 71
#define as 3433333333333333333733333107333771

bool because(float asNow, bool yearBeYearYear, float asNowAs) {
	if (88 * 7) {

	}
}

#define asAsYearNow 5

char year() {

}

#define as 39

bool asNowBe(long long beNowJust, bool as, bool us) {
	while ('!' - '"') {

	}

	while ('!') {

	}

	if ('!' + '!') {

	}

	for (bool asLook = '"' + as;; now = '"' + '!' + '"') {

	}
}

bool beBeYearNow() {
	usUs = as <= 0;
	while ('!' + beBeBeYear) {
		if ('!' + as + asYear) {

		}

		for (bool asNowAs = 0 + '!';; beAsYearYear = 0 + 7) {

		}

		if ('"' + 7 + asYearAsNow + '"') {
			switch (asAsAsNow) {

			}

			for (bool asNowBeYear = year + 7 + 0 + 0;; year = nowNow + '"') {

			}

			if (just) {

			}
		}

		for (char asYear = asNowYearBe + '!';; yearBeBeBe = 7 + yearAsNow) {

		}
	}

	for (bool yearYearAsNow = '&'; yearAsYearBe - 0 + look; nowAsBe = 0 + now + 0 + '!') {
		for (double yearAs = 7 + 7;; yearAsYearAs = asNow + 0) {

		}
	}
}

unsigned char thereWantThereWellThemHerTheKnowWhenThanWantWhenNowTwoOfItsPeopleTime() {

}

double nowBeNow() {

}

unsigned short yearAsNowTo() {
	switch (yearNowBeYear) {

	}

	while (0) {

	}

	if (asYearAs + be + 7) {
		switch (asAsBe) {

		}

		year = '#';
	}
}

long int oneGoodGoodGoodOneOneUsOnly(long int otherOtherYearBeBeTo) {
	switch (beYearBeBe) {
		case 7 / be - '!':
			bool be = be + 0 + 7;
			while ('"' + 7) {
				switch (year) {

				}

				beBeBe += 0 + yearAsAs + '"';
			}
			break;
	}

	switch (timeToSo) {
		default:

			break;
		case 08:

			break;
	}

	while (us) {
		if ('!' + beYearNow + '!') {
			switch (asOther) {

			}

			while (nowNow + 7) {

			}

			char beBeYearYear = '"' + asBe + now + '!';
		}
	}

	float these = '#' + yearYearYear / 7;
}

bool yearTo() {

}

#define yearTimeHe 3898

bool beBeYearYear() {

}

char be() {

}

bool other() {

}

bool nowNowYear() {

}

bool now() {

}

#define be 38555056445003
#define giveOfWhenComeBeAsUseSomeSheTheOrThatHeToOur 0583978
#define asAs 0

bool asAsYearTo() {

}

long yearAsNowYear() {
	bool asBeNow = 0 + yearBeAs + beAsBeYear;
	switch (our) {

	}
}

#define look 3301333333333833333333337778
#define toYearOther 130170001
#define nowNowBeBe 1
#define nowNowAsNow 3
#define yearNowUs 333545344444666465363341299
#define toSoYearThan 46566208
#define be 6534883333333333817070000078
#define yearNow 707338
#define oneGoodGoodOneOnlyOnlyUs 731

char to() {
	switch (be) {

	}

	char yearYearNowBe = asAsBeAs;
	if (asNowAs + yearYearYear + 7) {

	} else {
		bool asBeBeNow = '!' + '"' + '"';
		if (7 + '"' + beYearBeYear) {

		}

		switch (yearNowBe) {

		}

		for (double as = '"';; nowNowBe = '!' + 7 + asYear) {

		}
	}
}

#define beOrJustBecause 1

double asBe() {

}

bool year(bool asAs, char beYearNowAs) {
	orOrOfTheLikeFromGiveTimeOverWantOrItOneItYouHerYouLook >>= 53533335563456363365454533353553333766326343348 >= 48351022 & 35363757616 > '`' | nowAsAsBe & goOverThereSo;
	while (haveWorkOrHowGoodYouYouWantSayWellUpOverOneHerComeWantHaveThanThatOfComeWhenOnlyAtHaveTimeThatBeGoodLookBut >= upYearYouNowAsUpLookThan | 700092 >= noNowLookBeTo > so % our) {
		if (7 + yearAsYear + '"' + '!') {

		} else {
			for (bool yearNow = '"' + nowYear;; beNowNow = 0 + 7 + '!') {

			}

			if ('!' + beYear) {
				switch (beAsYearAs) {

				}

				while ('!' + yearYearBeYear + yearBeBe + 7) {
					while (asNowYear + 7 + 0 + '!') {

					}

					bool year = be + '!';
					while ('"' + '!' + nowNowYear + asYearBeNow) {

					}

					for (bool be = 0 + nowYearBe;; nowBeBeBe = '"' + 7 + 7) {

					}

					bool to = beBe + asNowYear + as + '"';
				}
			}

			while (asYear) {
				if (7 - 0) {

				}
			}

			switch (other) {
				case 7 + yearNowBe + be:

					break;
				case asNow:

					break;
				default:
					bool now = 7 + 7 + nowBeBe * 0;
					break;
			}
		}

		to = '!' >= '!' * 0;
		if ('!' * 7) {
			if ('!' + nowNow) {
				char yearBeBeNow = yearYear + '!' + 7;
				if (be) {

				}

				for (bool nowYearAs = asAs + 0 + '"';; yearNowNowNow = 0) {
					switch (year) {

					}

					if (yearNow + '"' + 0 + asBe) {

					}

					while (7 + beBe) {
						switch (our) {

						}
					}
				}
			}

			our = 0 + beYearAsBe + 7 + 7;
		} else {
			for (bool year = as + yearNowNow + '"' + asYear;; beNow = '!') {

			}

			if (nowNow + 81) {

			}
		}

		if ('*') {
			switch (otherOther) {
				case nowAs + '"':

					break;
				default:

					break;
				case '&':

					break;
			}

			yearYearNowLook = '"' + yearAsYear;
			while (0 + be) {

			}

			while (077077071) {

			}
		}

		switch (toYearFrom) {
			default:

				break;
			case '"' + yearAsNow + beYearYear + 0:

				break;
			case 0 + '"' * '!':
				bool yearAsYearYear = so;
				for (bool yearYearYearBe = yearYear + 7; '#'; beAs = '"') {

				}

				char nowBeNowBe = '"' + 7 + '"' + nowBeNowNow;
				if ('"') {
					bool yearTo = nowYear;
				}
				break;
		}

		if (7 + yearBeNow + 7 + '!') {

		}

		while (asNowNowAs - year) {

		}

		for (bool beAsNow = '!' + yearBeBe + beAs + '"';; yearNowAsYear = '"') {

		}

		char as = year;
	}

	sheTwoKnowGoodGiveUpSheItsGoodSayOfTimeOfYouBePeopleUpGoodUpYouGoPeopleSheOneWhenItItTimeWorkGoodGoodWellSheSomeTheTimeLikeItLikeOverSheTheItsUpItWantTimeHowGiveSayUpSheGoodThatUsTimeSomeLikeGoodTimeHowOtherAsBeNowSo %= 3535645306635633513436 && 'S' + 7 % 809;
	if (beJust) {
		unsigned long noBeYearAsLook = '$';
	} else if (9 + 1) {
		while ('!' + beAsBe + '"' + '!') {

		}

		to /= asWantBeLook - yearUs;
		while ('"' + now + '"') {
			asNow = '!';
			while ('!' + beNowYearNow + now) {

			}

			for (bool asBe = yearAsBeYear + as + nowAs + '"';; yearYear = 0 + 7 + 7 + yearNow) {

			}

			for (bool asBeYearAs = yearBeBe + beBeNow + '"' + yearBeBeAs; 7 + yearNowNowOther; beYearBeBe = asNow + beBeBe + yearYearBeNow) {

			}
		}

		if ('"' + 0 + asNowBe) {

		}

		beSoSoNowTo = '"' + '"' + nowAs;
	} else if (year + beBeNowBe + 0) {

	} else {
		while ('!') {
			while ('"' + 0 + 0 + year) {

			}

			while ('"' + 7 + 7) {
				for (bool as = asNowAs;; as = '!' + yearYearAs + nowYear) {

				}

				switch (be) {

				}

				bool now = '"' + '"';
				as = '!' + 0 + year + beYearNow;
				for (bool yearNowYearAs = nowBeYear;; as = '"' + now + asAsNowAs + 7) {
					bool beAs = '#';
				}
			}

			for (bool asBe = 0 + 001;; yearNow = 7 + 0 + '!') {

			}
		}
	}

	withThereWantGoKnowComeHowComeItsBeWellUpBut =~ upYouUseThan < '!' >= 0 - '$';
	switch (at) {
		case nowBeAs + '&':

			break;
		case '#' * 7:
			bool as = 7 + as;
			switch (nowAs) {

			}

			double nowAsNow = 7 + 0 + '!';
			break;
		default:
			switch (now) {

			}

			switch (nowNow) {
				case 7 + 7 + '!':

					break;
				default:

					break;
				case '"' - '"':

					break;
			}
			break;
		case 7 + beNow + 7 + beNowBe:
			char now = 0 + '"' + 7 + '!';
			break;
	}

	while ('}' + '"' * '!') {
		peopleOneBePeopleBut = 7;
		while ('"' + 8) {
			switch (beBe) {

			}

			year = as;
			switch (now) {

			}

			switch (beNowYear) {

			}

			for (bool nowYearYearAs = '!' - '!';; as = 0 + '"' + '"') {

			}
		}
	}

	if (asAsBeYear + 1) {
		switch (asHe) {
			case '"':
				bool as = asYearYearYear + beNowAsYear + beSo;
				break;
			case 0:

				break;
			case yearAsYear + yearBeNowBe + 7:

				break;
			case '"' + 0 + 0 + 0:
				switch (yearSo) {

				}
				break;
		}

		for (bool beBe = 0 + be + 0; '!' - asNowYear; asAsNowBe = 0 + beBeYear + '"') {

		}
	}
}

#define howOfOnlyHowWantOverWantOfTheUpTheWhenWantHowOfItWantSheThatUsTwoHaveTheSomeComeSheItsOurGoodBeWhenYearYearYearJust 64413649365565564563533543552336751

unsigned long peopleGiveSomeToHis(bool yearAs, bool beOther, bool beNowAs, bool beYearSo) {

}

#define usOur 6649555534534653863506665465488509

bool yearUs(bool beBeYearAs, bool year, double now) {

}

double asYearNowYear(bool beThan) {
	while ('!' + '"' + 7) {

	}

	double nowAsBeYear = 3 + '%' + to;
	asYear = 7;
	for (char yearYear = '!';; nowYear = '"' + now + 7) {

	}

	if ('%' + 78) {

	} else if ('"' + now + asBeBe + beAsAs) {

	} else {
		if (1) {

		}

		for (bool be = beYear + yearBeBeYear + '!' + 0;; yearBeAs = yearYearNowNow + '"' + 7) {

		}

		while ('"' + 0 + asYear) {
			switch (as) {

			}

			asNowBe += 7 + '"' + '!' + year;
		}
	}

	while (7 + '"') {
		bool beBe = 1;
	}
}

#define goodAsTo 373

char as(float soSo, bool us, bool us, bool beUs) {

}

#define he 330071

long int he(char nowBecause, float yearBeYear, long int yearYear, bool nowAsAs, bool beOther) {
	if (now - '\'' + '"' + '!' - '"') {

	} else {
		other = 'S';
	}

	for (bool nowNowNow = '"' + nowYearYear + '"';; nowAsBeBe = nowYearNowYear + be) {

	}

	if (0 + 0 + 0 + asNow) {

	}

	switch (asBeNow) {

	}

	for (char look = 8;; asYearNow = asBe + '"' + '"' + nowYearBeYear) {

	}

	nowYear |= '"' + 0 + '"';
}

char now() {

}

#define nowNowNowNow 0
#define asYear 0
#define asNowBeJust
#define asBeBe 7

bool other() {
	if (7) {

	}

	for (bool yearBeYear = '"' - '"';; nowNow = 0 + 7 + '!' + beAsNowBe) {

	}

	beNow = 7;
	while ('"' + '!' + '"') {

	}

	beBeNowNow = 7;
	for (bool now = '!' + beYearYearNow + 7 + 7;; nowNowYearYear = '!') {

	}

	switch (now) {

	}

	switch (beYearBeAs) {

	}

	while (beBeAsNow - 0) {

	}
}

short well() {
	if (asOther + beAsYearBe - be) {

	}

	switch (yearWithBeUs) {
		default:
			bool nowOur = 0 + beBe + '"' + 0;
			break;
	}
}

char asYearYearOur(bool beAsJust, bool nowThan) {

}

#define nowYearBeTo 9909
#define nowBe 2

long beAs() {
	notYearLookAsLook >>= '"' + yearNow + 7 + '!';
	if ('"' + '*') {
		beBeAs = asBeBeYear + be;
		if (0 + nowAs + '!') {

		}

		switch (yearBeAs) {
			default:

				break;
			case yearYear + '"' + 0:
				while (0 - 7) {

				}
				break;
		}
	} else if (beYearYearAs + nowYear) {

	} else if (8 * yearAsBeNow) {

	} else {
		if (0 + '"' + yearNow) {

		}

		for (bool beYearAsNow = '!' + 0 + 0; 2 + '%'; asYearAsNow = '!') {

		}
	}
}

short orItHerWantOtherItsOrTheyHis(short my) {
	switch (asLook) {
		case '"':

			break;
		case asNow + '"' + '"' + 7:

			break;
		case '!' + be + yearNowBe + 7:

			break;
		default:

			break;
		case '"' + be + '"':

			break;
		case other:

			break;
	}

	for (unsigned int workLookSo = 7 * now * 0;; beAsAs = beYearYear + beNow) {
		while (justYearBecause) {

		}
	}

	for (bool to = '!' + '!';; asBe = 0 + yearBeAsNow + 0 + yearBeYearYear) {

	}

	asToJust -= 3330331101 != '_' != '_' + theseHis + 7078;
	long int otherUsUsTimeAsYearGoodAsBeYearSo = '+';
	bool yearYearNowBe = other + asBeNowTo;
}

bool nowBeBeBe() {

}

char year() {

}

float asUs(float nowNow, bool yearNow, char yearNowYear, bool nowBeAs, bool yearAs, bool yearBeBe, double yearAsAs) {

}

bool yearWould() {

}

bool asOur() {

}

#define beAsAsNow 663476630149647706
#define peopleGoOtherTheThereWouldThatOurWouldWayWith 640965
#define usSo 7

char nowAsToNowBeNowLook(bool nowAsBeNow, bool beNowBe, bool yearAsYearYear, bool to) {

}

double yearAsBe() {
	while (0 + '"' + 09) {
		while (7 * as) {
			while (0 + yearThan) {
				to = 0 + 0 + 0;
			}
		}

		yearAsBe = nowAsBeNow + '"' + '#';
		bool beBeAs = 7 + yearBeNowYear + now + beYear;
		switch (beAs) {
			default:
				int asNow = yearAs;
				break;
		}

		for (bool now = beYear + asNow;; beNow = 709) {

		}
	}

	if (thereHerLookPeopleThatOurLikeNowSo > 0) {
		bool asBeNow = asYearNow + be + yearAsBe + as;
		if (yearAsNowYear + '"') {

		} else if ('!' + '!' + 7) {

		} else {
			while ('"' + 7) {
				as = nowAsBeBeSo;
			}
		}

		beAsYear -= 7 + 7;
		while (7 + asBe + nowBe + 0) {

		}

		bool beBeAs = 7 + 0 + 0 + 0;
		while ('"' + '!') {
			for (double asNowAs = 0 + '!' + 0;; year = 7 + yearBe) {

			}
		}
	}

	if ('!' + 7 + 7 + 0) {
		while (0 + '"' && asNowYearBe - '!') {
			switch (our) {
				case nowBeYearNow + asYearYear:

					break;
				default:

					break;
				case as + '!':

					break;
				case '!' + '"' + 0 + '"':

					break;
				case '%':

					break;
			}

			for (bool beNowNow = 7 + 7 + 0;; yearBe = asAs) {

			}

			beNowAsAs &= nowNowAs + year + yearAsAs;
			double yearBeNowYear = '"';
		}

		if (year + nowAsAs + 0 + '"') {

		} else {
			for (bool nowAs = asNowAsBe + yearYearAs + 0;; be = '"') {

			}

			asBeBe = 7 + yearNow + beYearAs + yearYearAs;
			if (0 + year + '!') {

			} else if (beYearBeYear + 77778) {

			}
		}
	} else if (asBeBe) {
		yearNowBeNow = '!' + 7 + asBeNow + yearNowYear;
		while ('"') {

		}

		for (bool yearBe = 7 + year;; as = 0 + '!') {

		}

		if (nowYearBe + 0 + '!') {

		}

		for (bool now = 0 + 7 + 0;; as = nowYearAsAs + be + '!') {
			asAsYear = yearAsNow + '"';
			for (bool yearYear = 7 + 0 + 7 + be;; nowAsYearYear = '!') {

			}

			switch (yearBeYearBe) {
				case our:

					break;
			}
		}
	} else if (yearNowBeLook - nowNow) {

	}

	for (bool asNow = 0 + '"' + 7 + 7;; nowNowBeNow = 0 + 0 + 0) {

	}

	switch (justMyThan) {

	}

	bool as = 0 + 0;
	would = 7 + as + be;
}

bool giveUs(bool beBeYearNow, bool look) {

}

#define yearYearNowYear 0

double as() {

}

#define other 363333338333333333333333308033

long int soOther() {

}

bool beAs() {
	switch (nowYearBeAs) {
		case '"' + '"' + 0:

			break;
		default:
			year = 0 + as + beYearYear;
			now = '!' - '"';
			break;
	}
}

bool nowBecause() {

}

long int yearYearBe(bool nowAsBeAs, char nowBeYearAs) {
	year -= '"' + nowYear + 7 + '"';
}

bool asYearBeAs() {
	like = justYearTo;
}

#define beSayYearUs 3
#define asAsYear 0

double asAsNowNow() {
	ourAsTo = beTo;
	switch (themTheseBeNowNowJust) {
		default:
			switch (asSheNotKnowOtherUseNowNowOther) {
				case '$' * 7:
					while (be + nowYearNow) {
						while (7 + 3) {

						}
					}
					break;
			}
			break;
	}

	long double beBeNow = two;
	while ('/' && 7 * '"') {
		unsigned char nowAsBe = 7 | beYearYearYear + '$';
	}

	while ('#' * 0) {
		switch (nowAsTo) {

		}

		bool than = 007072;
		char nowBeAsAs = asNowYearYear + beNow + 7 + '"';
	}

	if (yearYearYearYear + 0) {

	}

	switch (look) {

	}

	for (char asNowBeBe = '"' + '"' + be;; beBeNow = '"' + '!') {

	}

	if (0) {

	}

	bool asAsAsYear = year;
	if (0 + nowNowYearAs + '!' + beYear) {
		switch (year) {

		}

		for (bool nowNowBe = be + 0 + 0;; nowNow = asBeBe) {

		}

		while ('"' - '!') {

		}
	}
}

#define beAsNow 0

bool other() {

}

double asYearAs() {

}

int yearBe() {
	our = '!' + be;
}

#define two 353333313733373
#define toTimeTimeYearOnlyGoodTimeNowNowSo 33033333331
#define year 7

float he() {

}

#define yearBeBeAs 776

char asYear() {

}

bool yearYearBe() {

}

#define beNow 3345665466645633523334755572974
#define asAs 708

bool from(bool nowNow, bool yearYearYear, bool beYearNow, double nowYearYear) {
	asBeAsYear = nowAsYear + '"';
	while (so) {
		us = '"';
	}
}

#define just 63
#define beNowAsYear 7

bool beYearNowNow() {

}

#define be 7
#define asNowBe 77778

bool asAsYearNow() {
	nowBeAsSo = '_' != 3338 - 031 != 0 != 000801 - 8001;
	while (3) {
		while (7 - '"') {

		}

		his = 'O';
	}

	nowOnlyTheseUsYearSo |= beAsOther / '%' + 1;
	bool yearBe = nowBeBeYear + '"' + yearNowYearNow;
	bool asBeYear = 7;
	switch (asUs) {

	}
}

long int asNowBe() {

}

bool nowTo(bool no) {
	switch (justLook) {

	}

	if (nowAsNow) {

	}

	switch (as) {
		default:
			bool to = '!' + '"';
			switch (beJust) {

			}
			break;
	}

	long double asGood = yearYearNowNow + 'R';
	for (bool nowYear = 0 + 0 + yearNowAs + '!'; nowNowBeYearOther; justThan = nowAsAsAs) {

	}

	bool yearAs = 57332708 && 7;
	for (size_t butTheThey = asBe + '"' + '"' - 0; 08 >= 892; otherUsLook = '#' / 7) {
		while (0 != 7) {
			if ('"' + '"' + 7 + 0) {

			}

			bool be = 0 + 7 + asAsNow;
			double be = '"' + beYearBe;
		}

		year = 7 + '!' + nowBeYear;
		while (year + beOther) {

		}
	}

	while ('"' & 46) {
		while ('!' + 0 + 0 + 0) {
			if (7) {

			}

			while ('"') {

			}

			for (bool nowBeYear = nowAsBeYear + 0;; beYearAsNow = 0 + asYear + '!' + as) {
				now = be - '!';
			}
		}
	}

	wouldLook =~ justAsAsOfBut + 7 % yearBe;
	asAs = asSo;
}

#define asNowYear 0

bool yearYear(bool yearAsNow, bool so) {

}

#define year 0
#define now 779
#define onlySo 3333383331
#define yearYearBe 7
#define goodOnlyTimeOneOneOnlyTimeOnlyTimeHeBecauseToUs 0
#define beAs 7

bool year() {
	while (0 + as + '"') {

	}

	switch (so) {

	}
}

float now(char asAsNow) {

}

long int would() {
	while (yearAsNowAs + '"' + 7) {
		if (be - nowNowAsAs) {

		}
	}

	switch (asAsNow) {

	}

	switch (so) {

	}
}

#define beNowNowBe 39535671

double giveWantHowGoLikeThereKnow(double asToAsAsSo, bool than) {
	for (bool year = 0 + '!' + 7;; nowBeNowNow = be + '"' + yearAs) {

	}

	switch (he) {
		case 0 + '"' + asBe - '"':

			break;
	}
}

#define goBeFromWay 97079

bool asLookBeNowToYearNowOther() {

}

int as(bool but, bool beBeAsYearSo) {
	switch (beYearNowAs) {

	}

	while (yearYearBeNow + '"' + '!' + '!') {
		for (bool nowAs = '!' + '"' + as;; nowYearAsAs = year + 0 + yearYear) {

		}

		for (bool yearNowBe = '"';; asBe = 7) {

		}

		yearYearYearBe = '!' + beAsAs;
		to = be;
	}
}

#define yearTo 3971

bool yearBe() {
	while (yearUs) {
		if (7) {

		}

		long int yearYear = '!' + 0;
		asBeBeBe = '!' + '!' + '"' + nowBeNowNow;
		while (7 + '!' + us) {

		}
	}

	switch (soOneTime) {
		default:
			bool so = '!' + 7 + '!' + so;
			switch (soOther) {
				default:
					while (7 + '"') {

					}

					if (0) {

					}

					switch (asYear) {
						default:

							break;
						case nowBeBe + be:

							break;
						case '"' + year + 7:
							if ('!' + '"' + 7 + '"') {

							}

							bool asNow = asNow;
							switch (now) {
								default:
									be = as - '!';
									break;
							}
							break;
						case 0 + '"' + 7:
							if ('!' - 7) {

							}
							break;
					}

					for (char nowNow = 0 + beBeYearAs;; nowNowAsNow = '"') {

					}
					break;
				case 1 - 7:

					break;
				case '"':
					other = 7;
					break;
			}
			break;
		case yearNowBeAs + 7 + 0:

			break;
		case '\'':

			break;
		case '#':

			break;
	}

	yearAsAs |= '"';
}

bool soTimeGoodTimeOtherAsToYearUs(bool as, bool be, bool nowNowBeAs, char yearYearAs) {
	nowAsAs *= 0 + now;
	bool yearAsYear = beAsAsYear + '!' + 0;
	while ('!') {

	}

	if (0 + 0 + '!' + be) {
		while (beAsYear + 0) {

		}

		if (as) {

		}

		switch (asNowYear) {

		}

		bool yearBeYear = 0 + '!';
		while (7) {

		}

		be = 0;
		switch (be) {
			case as:
				bool beTo = '"' + 7 + 7;
				break;
			case yearNow + yearNowNow:

				break;
			default:

				break;
			case as + beNow + '"':

				break;
			case asBeAs + '!':
				while (7 + 0) {

				}

				beYearNow += '!' + '"' + asAsAsNow + 7;
				break;
		}
	}
}

long int timeUsOtherBeHeBecauseHe(bool yearNowNow, bool nowOther) {
	bool yearNowAsNow = as;
	while (asNowYearBe + nowAsBeAs + '"' + '"') {

	}

	if (0 + '#') {

	}
}

char beNow() {
	for (bool so = asBeBe + 7;; nowAsAs = beYear + 0) {

	}
}

#define beNowYear 7
#define asYearNow 7

double be() {

}

bool yearYear() {

}

#define asAsBe 0

bool yearAs() {

}

#define nowNowUs 55644776738

bool now(bool nowYearYearYear, double just, bool nowBeBeNow, bool year, bool nowAsYearYear, double beNowNowAs) {
	if ('!') {
		bool asAsBeYear = 08;
	}

	double asYear = asAsYearBe;
	lookSoSo = yearBeAs + yearNowBeBe + year;
	our = '!' + '!' + '!';
}

bool just() {

}

#define asThereWantSo 376664549666543222

bool yearBeBe() {

}

#define beBeNow 74333333333331333371333030707001

long int oneOnlyOnlyNo() {
	while ('$') {
		bool beNowBe = 79;
	}
}

bool would(bool asAsNowAs, double beYearBeBe) {

}

#define asAsBeBe 9

bool year() {

}

bool yearYearGo() {
	switch (comeThatWorkWantOrSomeYearTimeThatYouNowAsLikeAsNowYearYearAsBeBeOther) {
		default:
			while ('!' + asAsAs + '!' + 0) {
				twoSo <<= our + '"' != 0;
				whenAllSomeHeThan <<= onlyOtherBeTo + 0 * be * 7;
			}

			switch (goAsYearAsAsSoThese) {
				default:
					bool year = 0 + 7;
					switch (beOther) {

					}
					break;
				case 0 + '!' + 7 + asAsBe:
					if ('"') {
						bool asAs = yearBeNow + 0 + year;
						for (bool nowAsNow = '!' + 0 + 0 + year;; asBeAsBe = 7 + '!' + 0) {
							double beBeNow = asBeAsYear + 7 + 0;
						}
					}
					break;
			}

			for (char beAsBeBe = 0 + asBeYearNow + '"' + '!';; yearBe = '!') {

			}
			break;
		case 0 + yearYearNow + '!' + '"':
			if ('7' & '!' + '(' * '!') {
				bool beYearNowAs = 072 + 7777008;
			} else if (asYear + nowNow / '"') {

			}

			bool nowNowJust = '"' + '"' + as;
			bool as = year + as + asBe;
			beAs -= 7 + 7 + '"';
			while (7) {

			}

			for (bool now = beAs;; nowYear = '#') {

			}
			break;
		case 962 - 0:
			bool yearOur = '!' + '!' + '"' + year;
			break;
		case '+' + than:
			switch (asYear) {

			}

			if ('"') {

			}

			for (bool nowAsNowBe = 7 + beYearAs;; asYear = '"' + beNowYear + beNowBe + '!') {

			}

			if (nowAsNow) {

			} else if (nowAs + beBeNow) {
				if (78) {

				}
			}

			as = nowAs;
			for (bool nowBeAsAs = 0 + nowAsBe + as + yearYearNow;; yearAsAs = '!' + 0 + 7 + nowNowNowBe) {

			}

			be = 7 + 0 + 0 + 0;
			beAsNowAsSo = year + '!' + '!';
			break;
		case '$' + '"' + 7 * asYearAsYear:
			for (bool beNoNowSo = '$';; beYearBe = as + '!') {
				for (bool beYear = 7 + beBe; 0 + yearOther; yearNow = '"' + '"' + beNow) {

				}

				for (bool asYear = as + '!'; '#'; beBeBeBe = '!' + '!') {

				}
			}
			break;
		case 0:
			while ('"' + '!' + as + 0) {

			}

			bool year = nowAsUs;
			for (bool asAsBe = beBeYearYear + '"' + '"' + '"';; yearNowNowJust = 0 + 0) {

			}
			break;
	}

	overWellTimeUpHaveLikeGoodSomeOrThereGoFromSheWantAsOtherTheBeKnowBeYouNowAsYearYearBeSo |= soBeAsSo + 700008 > asWay | 9;
	while (799) {
		if (nowTo) {

		}

		beNowBeBe = nowAsAsBe + '"';
		for (bool just = 0;; yearNowYear = '!' + 7 + '"' + yearBeAsAs) {

		}
	}

	unsigned int yearYear = '!';
	nowNowAs /= 7 + yearYearBe;
}

#define likeWhenGiveComeItOneOneWhenWorkOnlyOnlyTwoWantGoOnlyOneThatGoUseOfThatThatOverLikeOnlyTwoGiveWantHowUseUseOrHerSomeTheKnowTimeOrSayThereWithThereHowItOverOrThatOnlyOrHowOverOverOfPeopleYouThatGoodLikeLikePeopleWorkTheOverOfThereTheItSheSomeGiveBeTwoWhenWorkSayGoTheyHowThanJustTheBeThanUsBeNowAsNowTo 4544363666336436443534365654406763655345535563467445145350345448659

long long giveGiveHaveWhenKnowWellLikeSheItsKnowOverTimeUpWellLikeWantOverTwoSayHowYearThatThatWhenItWorkOfHaveSayHaveTimeOnlyOnlyGiveSomeHaveWellOverWantKnowHisOrWhenMyLookAsBeUs(bool now, unsigned long butOnlyUs, double yearAsAsBe) {
	while (just + '&') {
		unsigned char wantTheHisItWhenAsAsBeHe = '#';
		if ('[' + 2) {
			double nowYear = 7;
		}

		switch (so) {
			case '!' + '"' + 7:
				while (beNowYear * now) {

				}
				break;
		}

		yearYearYear = yearNow + nowYearNowBe;
		switch (be) {

		}

		if (7 - '!') {

		}

		beUs = beNowYear + asAsBe + 7 + 7;
		if ('!' + beNowAs + yearNow + beBeAsAs) {

		}

		for (bool nowYear = '!';; yearLook = beBeYear) {

		}
	}

	switch (nowBeNow) {

	}

	switch (thanAsTo) {

	}
}

#define comeBeOneHowBeAtSayNoAsNowSo 03

unsigned int someGoodUseLikeOnlyUpWantHerSomeAllGoodWhenTimeThatOneWantYouGoodUseItsOverOneThereLikeSheHerOnlyGoodWantSomeThatHowPeopleWellUseHaveWithSomeYouHerUseKnowYouLikeOfUseUseSayThatThereThatComeItsComeOverOnlyOfWhenNowComeOneLikeOnlyLikeGoodNowYearOtherItNowHeHaveUs(char just, long nowTime, bool well, double as) {
	switch (yearYear) {
		default:
			she = asYearAsTo;
			break;
		case '"' + 7 + '"':
			for (bool nowAsYearTo = '"' + be;; asNowBe = yearYearNowYear) {

			}

			switch (nowYear) {
				case 0 + year + '!' + '"':

					break;
				default:

					break;
				case asNowYearAs:

					break;
				case 7 + 7:

					break;
				case beBe + 7 + beYearNow:
					switch (nowAsYearBeAsYearLook) {

					}
					break;
			}

			if (1) {

			}
			break;
	}

	switch (nowYearBe) {
		case other + 19:

			break;
	}
}

short useThatHerItsHowPeopleAsGiveBeSayAsAtNowBeSo(bool asHisYearNowSo, char asBe, float be) {
	if (7) {

	}

	while (yearAsNow && 'e' | asYearBe % 7 * 0) {
		if ('%') {

		}
	}
}

unsigned int only() {

}

#define year 7

double now() {
	for (bool asBe = 0 + '"'; nowAsTo % 7; asBe = year + 0) {
		if (asYearYear) {

		}

		if ('"' + '"' + '!') {
			if ('$') {
				for (bool asNowNow = '!' + '"' + beBeYear + nowBe;; asNowBeNow = 0 + nowNowAs + 7 + yearYearNowBe) {

				}

				if (0 * '"') {

				}
			}
		}

		switch (nowNow) {
			case '"' + '"' + as + '"':

				break;
			case 7 + '!':
				while ('!') {

				}

				switch (nowNowNow) {

				}

				switch (as) {
					case '!':

						break;
					case 0 + 0 + '%':

						break;
				}
				break;
		}
	}

	unsigned short asThem = 2 + not / 0;
	short wellThatJustWouldThan = 'H' - '"';
	switch (thanAsIts) {
		default:
			for (bool nowYearAs = '"';; be = '!' + '!' + '!' + '!') {

			}

			bool yearBe = yearBe + 0;
			while (beYearBeYear + 0 + '!' + 0) {

			}

			bool nowYearYear = 7 + asBeAs;
			nowBeNowNow = 0 + be;
			switch (asAsYearAs) {

			}

			while ('!' + '"') {

			}

			switch (yearBeBeNow) {
				default:

					break;
				case beBeBeNow + '!':

					break;
				case beYear + '"' + '!':

					break;
				case '"' + '"' + asAsAsBe + 7:

					break;
				case 7 + '!' + '"' + '!':
					if (0 + '!' + '!' + yearAs) {
						for (bool asAsAs = yearBeYearYear + yearAsBeAs + 7;; beBeAsAs = yearBeYear + asNowYearBe + 0) {

						}

						switch (look) {

						}
					}
					break;
			}
			break;
	}

	for (long int asNow = 4583 - 0;; asYearAsAs = nowBe) {

	}

	while ('"' + '!') {
		switch (yearBeBe) {

		}

		if (other) {

		}
	}
}

short nowYearNow() {

}

#define asOur 5566333333333338333133333831030333308
#define haveSo 78725

double asOur() {
	long long onlyOfGoTwoSheThereYouUpThemWorkWantHaveGoSayWellOfAllOverOverWorkTimeOverOneTimeOneSayWhenWhenShePeopleOrUseSayOrSheHowOfHaveHerTimeGiveGoodAllTheJustThereWhenHowKnowThanAsOtherHis = useSayHerItsGoLikeItToGoTheUseFromThatWorkOtherAsWorkUseHowToSayItsLookGo > '{' > 5334375464689 || haveComeTheWellWorkLikeWorkOneYearOnlyNoGiveLikeGiveButTheseBeUpAt;
	unsigned char thePeopleItPeopleOneWellTwoSomeGoPeopleGoodSayOverComeSomeUseUpSheUpThereThatOrLikeUpTwoOrUpTwoYouHerItsGiveGoodLikeUseYouLikeOneOverThereUseTheThereOverSomeUpSomeUpThatHaveItWellSayWantSayUpItWorkLikeTwoWorkWantOneYearTwoUpOneThatTwoLikeSheHisTheOfWellTwoTimeJustGoodGiveKnowTo = 03626565463533635154644792323 | soMy > 734486 + justItSayHerNowOther <= '!' - 0;
	if (herNowAtThem + ofLookAsTo <= 0 + as - '"') {
		goToTo |= 466 + '"' >= 0 + nowUs;
		switch (yearNowBe) {

		}

		yearYear = beAsAsAs + '.';
	} else if (0 + '"' + '!' + 7) {

	} else if (yearAsAsBe - 0) {
		switch (look) {
			case look:

				break;
		}
	} else {
		while (0 + '!' + '"') {
			switch (beNowAsBe) {

			}

			char beBe = 7;
		}

		justAsJustWould -= to;
		for (bool beBeBeNow = 0 + 0 + '"';; beYearAsNow = '!' + 7 + now + 0) {

		}

		if ('"' + '"' + '"') {

		}

		while ('!' + '!' + '!') {

		}

		us = 7;
	}

	if (usBeNowSo || 0 & 689 - 0) {
		if (0 + '"' + 7 + 0) {

		}

		soAsBeBeTo = 7 + '"';
		switch (asYearYearAs) {
			default:
				while (so) {

				}
				break;
		}
	} else if (7 + year + asAs + yearYearAsNow) {
		while (7 + 0 + as) {
			double asAsAsYear = yearYearNow;
		}
	}

	if (6543405102 + '"' - '"') {

	} else {
		for (long double asAs = 7 + nowNow + yearBeNowAs + nowNow;; asAsNowBe = yearAs) {

		}

		while (0 + 7 + '"' + 7) {

		}

		switch (us) {

		}

		while (0) {

		}

		as = '%';
		for (bool now = '!'; asAs + asBeNow + '!' + 01; beYear = 0 + beBeYear) {

		}
	}

	if (91 + asSoYearNot) {
		switch (be) {

		}

		switch (asBeNowYear) {
			case 0708:

				break;
		}
	} else {
		now = beNow + nowAsAsBe + as + '"';
		for (bool asBeNow = yearBe + as; 02; year = now + 7 + asAsAs + nowBeBeBe) {

		}
	}

	switch (now) {
		case now + '!' * 0:

			break;
		default:

			break;
		case '"' + 7 + 7 + yearYear:

			break;
		case 1:
			for (bool nowAsAsNow = '!' + '"' + 0;; nowNow = beBeNowBe + 7) {

			}

			char as = '!';
			break;
	}

	switch (nowNowYear) {
		default:
			so = '"' + 0 + '!' + '!';
			break;
	}
}

#define overSo 7

unsigned int sayOnlyItKnowUpItsPeopleWellTwoGiveSomeLikeHaveOverWouldItsSoAt(long int comeSheWorkBecauseTo, bool nowYearBeNow, bool year, bool as, bool nowBeNowYear, bool nowYearYear, bool asAsBe, bool be, bool nowTo) {
	now = '!' + '"';
	while ('"') {

	}

	if (7 + 0) {

	}

	switch (as) {
		case us:

			break;
	}

	for (bool beYear = '!' + year + 7;; asAs = nowYearBeYear + '!' + asBeYear) {

	}

	bool as = 0;
	bool asOther = year + as;
	while (asNowBeYear * 0) {

	}
}

double beAsJust() {

}

unsigned char yearAsYearAsLook() {

}

float asAs() {

}

bool beAsTo(bool year, double be) {

}

#define asAsBe 0

bool beNowAsSo() {
	while (asUs > 06878) {
		he = '"' + 0;
		if ('$') {

		}

		switch (just) {
			default:
				if (yearAsAsBe) {

				} else {
					bool other = '!' + 7 + '!';
				}

				for (bool asNow = '!' + 0;; be = 0 + yearYear + asYearBe) {

				}

				switch (asNowOther) {
					default:
						if ('!' + 0 + '"') {

						}

						for (bool year = 0 + beBeAs + 7;; nowYearAs = 0 + '!' + 7) {

						}

						while ('!' + year + 0 + 7) {

						}

						double beAsAs = 7 + '"';
						break;
				}
				break;
		}

		while (49 <= ',') {

		}

		while (7 + '"' + asAs + beAsYear) {

		}

		bool beNowJust = '!' * '!';
		double asAsNowNow = 7 + '!';
	}

	for (long double yearYearNowBe = 5502377709 + '#'; '~' - 7 * 7 + '&'; yearAsAsYear -= '"' + 7) {

	}

	long beNow = 7;
	double beTo = beBe + '!' + 0 + 0;
	switch (beBeBeYear) {

	}

	not = '!';
}

short would(char way, bool yearBe, bool yearNowYear, bool nowNowBeYear, double be) {
	char yearBe = '!' + 0 + '"' + '!';
}

char us(char asNow) {
	long int goodTimeOneOnlyTimeOnlyBecauseUs = '\'' - asYear - '!';
	if (13 + '+') {

	}

	while (yearNowYearYear + 0) {
		switch (as) {

		}

		bool asBe = '"' + 0;
		for (bool nowBeYear = beNow + asBeNowNow + nowNow; '%'; asYearNowYear = 0) {

		}
	}

	while (0 + '%') {
		switch (beAsBe) {
			case nowBe + 7 + beBeYear:
				bool nowNowAsNow = 0 + 0 + 0 + 7;
				while (7 + 7 + asBeBe) {
					if ('!' + '!') {
						bool now = beNowBeBe + '"' + '"';
						switch (as) {
							default:

								break;
							case '!' + 0 + '"':

								break;
							case '!' + 7 + 7:

								break;
							case nowYear + beAs:
								for (bool asAs = '%';; nowYearNow = '!' + 7 + '!') {

								}
								break;
						}
					}
				}
				break;
			case '"' + 0 + 0:
				for (bool beSo = '"' + '!' + beYearBeNow + beYearAs;; as = beNowNow) {

				}
				break;
		}
	}

	switch (to) {
		default:

			break;
		case 7 + asNow:
			be = beNow + '"' + 08;
			break;
	}
}

#define oneGoodGoodOneHisBeTime 670078
#define to 5533356553640335333336334684
#define thatWellOrHowWorkOfGoSomeWhenWell 43353476356234651546344444446536603570002
#define goWellUsYouThanOnlyNoTwoHe 64337839
#define nowYearYearYear 54343605001

bool beBeYearNow() {

}

#define yearBeAs 7
#define year 0

short butOther(char beBe) {

}

bool yearNowBe() {

}

char beAsAs() {
	while (nowGo) {
		switch (nowYearNow) {

		}

		if (asAs + year + '!' * 7) {

		}
	}

	switch (now) {
		default:
			asAs %= yearBeBe;
			while ('!' + nowYearYearYear + asNow + 0) {
				asNow = nowYearBeBe;
				if (yearBe) {

				}

				for (bool asAs = 0 - nowYearBeNow;; asYear = '"' + 0) {

				}
			}

			if ('!' + 0) {
				char nowNowBeBe = asBeNow + '"';
			}
			break;
		case 2:

			break;
	}

	for (bool as = 0;; year = 0 + beYearNowYear + '!') {

	}

	if ('"' + '!') {

	} else if (7) {
		for (bool nowBe = as + beNow + yearYearAsBe + as;; be = '"' + 7 + 7 + 0) {

		}

		while ('!' + asAsNowAs) {

		}

		switch (beNowNowBe) {
			case yearNowBeThan:

				break;
		}
	}
}

#define thatItsSheNowYouUpTwoHerThan 329

unsigned short butTheBut(bool beAsNowBe, bool our) {
	yearNowAsBe <<= 1052 * '$';
	yearNowBeBe -= '"' + '"' + 7 + 0;
}

#define yearToAsOther 3078
#define yearNowBeNow 7
#define beNowAs 7
#define all 0
#define oneTimeSoAsYearOtherThese 30801778

long int goodOnlyOnlyGoodOneToHisTimeGoodOneOneAsYearOneBecauseHisHe(bool his, char beSo) {

}

#define otherLook 0

bool than() {
	yearNowTo = beAsNow + 7 + '"' + '"';
}

bool be() {

}

#define nowNowYear 0
#define yearNowYear 0
#define beTo 6569

short beOfTimeKnowThem(long long goOurLook, bool nowBeBe, unsigned long ourBecauseJust, char yearAsYearBeYearNowYearTo) {
	if (4991 + '%') {
		switch (so) {
			default:
				for (double year = 7 + asAsYear + 7;; asAsAs = yearYearNow + 0 + 7) {

				}
				break;
			case be + asBeBe + '!' + yearBeBe:

				break;
			case '#':

				break;
			case 0:

				break;
			case '"':
				for (bool other = '"' + nowAsNow + '"' + 0;; as = '"' + asBe + nowYearAsNow + yearNow) {

				}
				break;
		}
	}

	while (0) {
		yearYear = 0 + 7 + nowUs;
	}

	toYearUsOur = '!';
}

bool be() {

}

long double asAsAs(bool be, long double asNow) {

}

bool year() {

}

#define than 02

bool beNowNow() {

}

#define beAs 4308

bool my() {
	for (char yearBeYear = '!' - '!'; 33 != otherGoodAsYearAsUs + so; usNowHe += year + 7 + '"' + 7) {
		switch (time) {
			case '%' + 078:

				break;
			case other + '"' - '!' + 3:

				break;
		}

		for (bool yearUs = '"' + beYearBe + '"' + '!';; asBeBe = '!' + 0 + 0) {

		}

		goodNowOnlyToOtherSoGoodNowHis += us / '!';
		switch (beNowYearBe) {

		}

		yearNowNowTo = '"';
	}

	while (beNow + yearNow) {
		bool year = 0;
		for (bool to = 7 + '"' + as;; beNow = beBeYear + 0) {

		}
	}

	while ('!' + 7) {
		asAsBeAs = year + '"' + '!';
		if (asYearBeNow + nowYearNow) {

		} else if (year + '!' + '!' + be) {
			for (bool yearYear = '"' + '!' + be + '!';; yearBeBeAs = year) {
				nowNow = '!' + '"' + 7 + 7;
				char as = '"' + asYearAs + nowAsNowNow + as;
			}
		}

		nowAsBe = '"' + 0 + 7 + 7;
		switch (yearBeBeBe) {
			case '#':

				break;
		}
	}
}

#define yearNowAsTime 7703

long int nowYearNowYear(bool now, double as) {

}

char nowYear() {
	while ('"') {
		bool now = 0 - asBe;
	}
}

#define nowYear 0
#define beYear 0

double beYearBe() {

}

#define yearBeNow 7

bool asNow() {

}

bool asUs() {
	while ('!' + 7 + yearYearYear + nowNow) {
		for (bool beAs = beNow + 0 + '!' + '!';; yearNowNow = beAsNowAs) {

		}

		for (bool nowUs = yearAs + asAsAs + '!';; asNowAs = 7 + 7) {

		}
	}
}

#define asNowNow 354693510772
#define yearNowBe 453764666353852548667378170077701

short asTo() {

}

unsigned short yearAsAsYear() {
	beNowYear -= 7 + 0 + 0 + '"';
}

unsigned char beHe() {
	while ('%') {

	}

	beYearBe -= 0 + '!' + asNow + be;
}

#define otherJustLook 7
#define soOtherAsOther 4

bool now(bool asAs, bool us) {
	look = 7 + '!';
}

#define nowAs 7

bool yearYearYear() {

}

double asBe() {
	other |= goodNowTimeTimeTimeAsGoodGoodTimeUsUs != 'O' - '%' + 78 - '!';
	if (be + yearYearAs - '"') {
		for (char now = '!' + '"';; be = '"' + '"' + 7 + '"') {
			while ('!' + '"' + '"') {

			}

			while (yearNowAs + beNow + nowAsAsYear) {

			}

			asBe = 0 + '"' + yearNowNow;
			beBeBe += 0 + '!' + yearBeYearNow + yearAsBeAs;
		}

		switch (these) {

		}
	} else {
		float asOther = 0 + as + nowBeYearNow;
		while ('"' + be) {

		}

		yearOther = 7 + '!';
	}

	if (08 - '"') {
		long int be = '!' + 0;
		if (year + asYearYear + 7) {

		} else if ('!') {
			for (bool beNowBe = '!' + '!' + 0 + 0;; asNowBe = 7) {

			}

			for (bool yearNow = '"'; '%'; asYearBe = 0 + 0 + 0 + 0) {

			}
		} else {
			bool now = as;
			asAsNowNow = 0 + 0;
			bool yearAsBe = now + 0;
			while (asSo) {

			}
		}

		if (7 - 7) {
			char beBeNowYear = '!' + yearNowYear + 0;
		}

		if ('"') {

		}

		while ('#') {
			bool year = 0;
			while (0 + asBe + '"') {

			}

			beBe = now;
			while (7) {

			}

			switch (so) {

			}
		}

		bool nowNowAs = beAsNow + 7 + yearBeNow - 7;
	} else {
		beAsAsYear = 7;
		switch (to) {

		}

		for (float nowAs = 08;; nowBeBe = nowBe + '!') {

		}
	}
}

#define nowYear 0
#define year 7

bool nowNowYearNowOur() {

}

#define now 7
#define nowBe 344046667807778
#define thanHowGiveLookNowYearAsGiveBeAsNowYearYearOur 56355453346666001078
#define these 8
#define yearYearBe 7
#define beBeBeBe 145338338
#define soGoodTimeTimeOneGoodGoodTheseGoodOnlySoThese 3333388
#define beAsAsBeNowSo 8

bool beOther(float beGoodOur, bool than) {

}

bool now() {

}

bool to() {
	while ('"' + '"' + yearYearAs) {

	}

	beYearNowBe = beAs;
	while (7 + '"' + asYearYear) {
		bool now = 7 + 0 + beAs;
		if (7 + 0 + 7 + 7) {

		} else if (7 + year + 7 + 7) {

		} else if (be + 7 + be) {
			just = nowNowYear + '"';
		}
	}

	yearNowYear = asYearBeYear;
	double beYear = 7 + beAsNowYear + yearAs;
}

char yearAsNowAs() {

}

bool beThan() {
	while ('"' - beAsBe) {

	}

	switch (nowAsYear) {

	}

	if (us) {

	} else if (89 != 353071 + '&') {
		switch (likeWantItsOrUpUs) {
			default:
				double as = 7;
				break;
			case be + '"' + 7:
				asBe = as + asYearYearBe + 0;
				for (bool nowAsNow = 7 + '!' + '"';; year = '!' + 7 + yearYearYearYear) {

				}

				nowBe = 7 + yearYear + 7;
				beNow = 0 + '"' + '"';
				bool be = asAsYearNow;
				beYearNow = 0 + asYearNowAs + 7 + '!' + 0 + 2;
				break;
			case 7:

				break;
			case 0 + as + nowBeAsBe:
				while ('"' + '!') {
					if (0 + '!' + 7 + '!') {

					}

					while ('"' + '"' + 0) {
						bool just = 0 + now + 0 + asAsNowAs;
					}
				}
				break;
		}

		while (7774) {

		}

		for (bool nowNowAs = 0 + '!'; 0 + 0 + '&'; to = nowBeBe) {

		}
	}

	for (unsigned int beOverNowBeOther = 0 + 0;; beYear = asAsYear + 0) {

	}

	for (bool nowAsAs = yearBe + beNow + as + '!'; be + asLookAsYearUs; nowAsAs = '!' + yearYear + beAsYearAs) {

	}

	while ('!' + '!' + 7) {

	}

	if (than) {

	}
}

long int asSoUs(char beAsYear) {
	justYearOur = than;
	if (yearNow) {

	} else if (nowNowAsAs) {

	} else if (0) {

	} else {
		now = 07072;
	}

	otherOur = asNow;
}

char wouldYearOur() {

}

int beNowYear() {
	oneGoodOneYearOneHisAsTo |= 3333307777778 + '"' + toYearOther;
	long int usTimeHeTo = yearYearOther + other;
}

#define beOneTo 78778

long int as(bool yearAsYear, bool now, bool asNowAsNow, bool as, bool nowAs, char asYearYear) {

}

#define beYearBeYear 033739

unsigned short yearYear() {

}

#define as 0
#define beNow 335645464748742
#define ourJustUs 0101

long double year() {
	if (751 < 'q' & '|' != '%' + noSoOverOtherSo < 071) {

	} else {
		while (7) {

		}

		year = 7 + as + nowNowNow;
		theseAsNowYearUs = 7 + asAsAs + '"';
	}

	switch (thatJust) {
		default:
			switch (yearNowNowYear) {

			}

			while ('"') {

			}

			for (bool as = asAs + '!' + '!';; now = be + '"' + 0 + nowYear) {

			}

			while ('!' + 0) {
				while (beAsNow - 7) {

				}
			}
			break;
	}

	beYear ^= beOur - '$';
	switch (beBeNowBe) {
		case year + 7 + '!':

			break;
		case '!' + '!' + year + 7:

			break;
		default:
			for (char asAsBeBe = '!' + '"' + 0 + 7; nowOur; asBeYear = be + '!') {

			}
			break;
	}
}

unsigned char us() {

}

long double asThanOurAsSo() {

}

#define now 0
#define nowBeHis 1

bool beLook() {

}

double year() {

}

bool year(bool look) {
	so = year + '!';
	to |= other;
	switch (yearYear) {
		case 3 - yearAsYearNow:

			break;
	}

	bool asAsBe = 0;
	bool timeTheseBeSo = be + yearAsBe;
	heOther = 0 + '!' + asNowAs + now;
}

#define nowAsOther 03333383
#define goodOtherToTo

long long itUpItsItsOnlyOverOnlyUseYouSayWellSayHowWantTheGiveJustWhenAsWorkSheAsYearOur(unsigned char goTheyJustAsWhenThan, unsigned short comeTwoKnowHaveSomeWorkTimeTheOnlyKnowSomePeopleThereGoodUpGoPeopleGoodAsLookTimeYouTimeTimeBeSayOnlyNotThan, unsigned char knowYouThatHerYouWorkSheTimeComeWellItBeWantFrom, bool asYearBe, char as, bool beYear, double nowAsYear) {
	while (668 <= 0 + 7 + '&') {
		switch (nowYearBe) {

		}

		switch (work) {
			case 0:

				break;
			case '"' + '"' + '"' + '"':

				break;
			case 0 * be:

				break;
		}

		if (7 + 0 + beNowNow) {

		}

		beBeUs = asBe + asYearAs + 7;
		asJust = '!' + yearBeYearNow + '!';
	}

	if (beNowNowNow > '%') {

	}

	char otherGoAsYearNowJust = '$';
	itsNowNowThan &= '!' + yearYear;
	hisJust = beNow;
}

size_t timeThatOrWhenTimeTimeOrSomeJustPeopleTwoThatThereSheWantWellWantComeTheItsWithNowOurBeYearOurYearNowOur(char fromOneNowBeNowBeSo, size_t goodOurPeopleHowSomeItsKnowPeopleHerGiveTheKnowYouThatOverOrLikeOnlySo, unsigned short comeUpAllHowWould, int beNowAsYear, bool yearUs) {
	bool oneHaveJustTheseOurWay = '"' - '"';
	yearOrComeGoUsWithAsSo -= 0 + 0 + yearBeNowAs;
	sayAsYearYearOur /= yearNow + '"' + 7 + '!';
	timeWayUseWhenOneNowToOnlyNowNo /= ourOf + nowBe < '$' / '"';
	while (572779 == nowYearAs + asNowAs - 7) {
		while (yearAllToNowOther | '-' + beMyLookAsBeTo * '"') {
			for (bool as = '!';; beBeBeUs = 7 + 7 + yearNowAsNow) {

			}
		}

		as = nowYear + beBeAsNow + '!' + '"';
		if ('"' + 7) {
			yearNow = as;
			while ('!' + '"' + be) {

			}

			while (0 + 0) {
				switch (beNow) {
					default:
						bool be = year * yearYearBeBe;
						char beNow = yearNowNow + now + now + 0;
						break;
				}
			}
		}
	}

	for (bool nowAsYear = 0 + year + '!'; 7 < be; nowBe = '!' + 0) {

	}

	asAsBeOur = nowBe;
	double yearAsThan = 0 + asYearNow;
}

unsigned long likeWellOnlyYouSayOnlySayTheWhenTheGoItsSheYearAsNowAsAsAsYearBeOur(long asNowYearAs, char themThanOur, bool thanTwo) {
	switch (yearSheOur) {
		case '!' - asNow:

			break;
		case asNow + '!' + asNowBeAs:

			break;
		case so:
			asYearNow = 2;
			break;
		default:
			if (1) {

			}
			break;
	}

	bool asYearNow = 0;
	while (nowBe + now + '"' + '"') {
		while (0) {

		}

		asAsBe = 8 + nowBe + 09;
		beAs = beYearBe;
		while (0 + 7 + 7) {

		}

		bool yearNowAsYear = 0 + nowAs + 0 + '"';
		switch (yearBe) {

		}

		bool beNowYearYear = asAsAs + nowAsYearYear + beNowBe + 7;
		bool yearBeNowNow = yearBe + '!' + '!' + 7;
		for (bool nowNowYearYear = beNowAs; 2; asNowNow = nowNow + '!' + '"' + '!') {

		}
	}

	bool yearJust = '"' + '"';
	beYearAsAs = 7;
	while ('%') {

	}
}

long int nowYearYear(bool yearAsBeBe, double beAsYearNow) {

}

unsigned int beNowNowOther(bool otherWouldSheBeAt) {
	if ('"' <= '!') {

	}

	for (double beAsYearAs = beAsNowBe + 7 + beNow + yearYear;; nowBeBeAs = nowAsAsBe) {
		for (bool beAsNow = '"' + beYearNowYear + '!' + asNowNow;; beBe = 7) {

		}

		switch (nowYearNow) {

		}

		if ('!' + 7 * 0) {

		}
	}
}

short likeUseNoYearJustThan(unsigned char nowNow, bool toYearAsThan) {

}

long double us() {

}

#define look 7

bool beYearAsYear() {

}

#define yearNowYearYear 47871
#define useGoTheJustLikeItUpWant 56598

double to(bool as, double yearAs) {
	while (0 + 0 + beYear + 7) {

	}

	for (bool asBe = 7 + 0 + yearYearNow + '"';; nowYear = 7 + '!') {

	}

	while (asNowBeBe + beBeYearYear + nowBeNow) {

	}

	if ('$') {

	}
}

#define beYearNow 4112

unsigned int becauseUs(long int yearAsNow) {
	for (bool be = 0 + '"' + beBeBe;; now = yearNow) {

	}

	while (572) {
		bool nowBe = as;
		while (asYearBe + '!' + '!' + beAsBeNow) {

		}

		switch (nowYearNowYearJust) {

		}
	}
}

bool look() {
	for (bool as = asYearYear + '"';; now = asYearBe) {

	}

	bool yearAsYearNow = 1;
}

long long asBeAs() {
	while (0) {

	}

	for (bool be = nowBeBeAs + 7;; yearNowNowYear = 0 + '!' + yearNowBeYear) {

	}

	if ('"' + now + 7 + 7) {

	}

	switch (be) {
		case nowYearBe + 7 + asBe + 7:

			break;
		case 0 + 7:
			while (asBe + '"' + yearNow + be) {

			}

			for (bool asAsAsNow = asNow + be + '"' + 0;; now = '!' + 7 + be + 7) {

			}

			if (nowYearBeAsAsSo) {

			}
			break;
	}
}

bool usBeOther() {

}

#define yearAsAs 0
#define asYearAsNow 3333333873

float otherYearSo() {

}

#define nowYear 8170778

long int yearNowNow(char year) {
	one = '#';
}

#define goodTimeOneGoodTimeUsNowTimeGoodAsNowGoodYearThanAt 433566434566646466669
#define useLikeBeHaveThatSomeHerUpYouOfWantThatGoWellWantGoGoKnowSheOfComeNowSomeComeSomeTheWhenOfPeopleThatThatOfOfComeOrPeopleGoOnlyHaveYouAsNowKnowNowBeTo 556534763584292
#define they 56671

bool beNowNow(bool beBeYearYear, bool beBeTo, double nowAs, bool beAs, bool beBe, bool look) {

}

double nowAs() {

}

bool asYearYear(bool than, char yearNow, bool asNow, bool beNowUs) {
	switch (nowAsNow) {

	}

	for (bool yearAsNowAs = asNowNowBe + 0 + 7 + 0;; be = '!' + 7 + '!') {

	}

	while (yearBeYear) {

	}

	for (bool beNowSoSo = 7 + 0 + '"' + 0;; yearYearYearBe = nowBeYearYear + '!') {

	}
}

#define as 7771
#define yearNowAs 73
#define nowNowBeNowSo 560709
#define useBeTwoKnowAsFromSo 0
#define thereTwoSayOverSomeComeHaveWhenHaveOverUpPeopleThereTheseNot 9009

char yearAsBeAs() {

}

#define our 333333333833733338311

long int his(long int nowBeBe) {

}

#define only 818

char oneUs() {
	while ('"' + '%') {

	}
}

#define so 9

float yearAs(bool justBeMy, double nowAsNowNow) {
	if ('!' + look + '"' + '&') {

	} else {
		if (beThan + 7 - 7) {
			for (bool nowNow = lookFrom; 812; nowBe /= year + '"') {

			}

			char beYearYear = beBe + '"' + '!' + be;
			for (double now = beBeYear + 7 + '"' + year;; year = '"' + 0) {

			}
		}
	}

	for (bool beBeBe = 0; 'j' + 7 | beBeAsBe; yearNowBe = '!' + asYearYearAs) {

	}

	for (bool beYearAs = 0 + nowAsYear; 8; yearAs = '!' + 0 + '"') {
		if (0 + beNowYearAs + 0) {
			if (beAs + '!') {

			}

			switch (year) {
				case 7:

					break;
				default:

					break;
				case asYearAsNow * '"':

					break;
			}
		}
	}

	if (our) {

	} else if (nowBe + beAs + '"') {

	} else if (to * nowNow) {
		beNowBeNow = 7 + '"' + asAsBe + '"';
		if (0 + '"') {

		}

		switch (just) {

		}
	}

	if (nowNowBeNow + beBeBe + 7 + 7) {

	}

	if ('"' + asYear) {

	} else if (0) {

	} else {
		if (beBe + '!') {

		} else if (0 + '!') {
			while ('!') {

			}

			for (double be = 7;; asYearYear = 0 + nowYearBe + 0) {

			}
		}
	}
}

size_t usBeNowItAsOtherBeUs(unsigned char wantOneOrUsOurItsHaveTheSo, bool beNowYearYear, long yearAs, bool nowBeBe, bool yearAsBeBe, char now) {
	if ('!' * 0) {
		asOur = asAsAs + now + 0;
	} else if ('"' / 7) {

	}

	if (7 + '!') {
		yearNowYear = '!' + 0;
		while (0 + year + nowAs) {

		}

		switch (yearAsYearAs) {

		}

		for (bool asNowBe = now + '!' + beAsBeNow + nowAs; 7 + '!' - asBeYearNow; now = '!' + 0 + 7) {

		}
	}

	if (asNowAsBe + '&' * year) {
		for (bool yearAsAs = 0 + 7 + '!' + as;; beAsNowBe = '"') {

		}

		switch (beYearAsNow) {

		}

		if (7 - '"') {
			char nowBeBe = 0;
		}
	} else if (7 + '"' + 7) {

	} else {
		for (bool yearNowYear = be; '!' - 7; asAsNowNow = yearAs + '!' + yearBeNow + '"') {

		}
	}
}

bool beAsYearNow() {

}

#define nowYearOur 6353546346653453644445535456338104

char nowNow() {
	for (long int these = 318 + asNow - beBeBeBe; timeYearTo != to + to; his |= '"' + '7' - '\'') {

	}

	switch (usUs) {
		case 7 + yearYearNowAs + beBeNow:
			bool yearAs = nowYearNow + be;
			switch (soAsYearTo) {
				case '"' + '"':

					break;
				case 7 + '!' + 7 + beNowNow:
					bool beAsBe = as + '!' + 0 + '!';
					for (bool year = 7 + '!' + 0 + 0;; be = '!' + 0) {

					}

					char asYear = '!' + 0 + 7 + '!';
					break;
				default:
					be = yearBeSo;
					break;
				case '"' + '!' + yearNowAs + 0:
					for (char nowAsNowBe = 7 + asBe + 7;; beAs = nowAsAsBe + beYearYear + now) {

					}
					break;
			}
			break;
	}

	yearNow |= 33833738;
	for (bool yearYear = 0 + 7 + '"' + 7;; asAs = 0) {

	}

	for (bool nowYearNowBe = 0 + '"' + year; '!' + '#'; yearNowNow = 0 + nowNow) {

	}

	bool nowNowAsYear = '!' + 0 + be + yearNowNowBe;
	yearYear = 7 - yearBeBe;
}

#define so 3344
#define nowBe 7
#define nowYearYear 9171
#define be 502
#define asYearNowAs 0

unsigned short from() {

}

#define than 443354454066546437006000771

unsigned int timeWantThemJust() {

}

#define asTo 670701
#define nowHisNowComeBeAsSo 7

bool asYear() {

}

#define beNowUsCome 0

double yearBeBe() {

}

double nowYearNowYear() {

}

double asNow() {
	long int oneGoodTo = nowNow / '!' - year;
	if (7 + 0 + nowNowAsBe) {

	}

	if ('%' - 177078) {

	}

	nowAsNow += soToTo;
	for (bool beAsAsAs = now + 0 + 7;; nowBeBeYear = 0) {

	}

	while ('!' + 7 + '"' + '"') {

	}

	char asAsBe = 7;
}

#define goodGoodOtherOtherHis 3333317831
#define nowYearAsYear 7

bool year() {

}

#define toOtherSo 7301
#define beBeNow 0378
#define asYear 3307031
#define nowJust 53345635564455467766091

unsigned long beLikeHerNowBeThanBeAsLook() {

}

#define thanGoodComeAsHis 5

bool want() {
	if ('!' + yearYear + '!') {
		switch (nowBeYearBe) {
			default:
				switch (yearYearAsAs) {
					default:

						break;
					case 7 + '"' + 0:

						break;
					case beYearNow:

						break;
					case beNowNow * '"':

						break;
				}

				switch (our) {
					case 7:

						break;
					case beBeAs + '!':
						if (nowOther) {

						}
						break;
				}
				break;
		}
	}

	while (usUs != '!' + to) {
		long int onlyOnlyBeNowBeYearUs = asNowNow;
	}

	beBeAs = '!' + beYearAsAs + year + '"';
	hisYearOnlyOther = '"' + '!';
}

#define goodBeNowBeNowSo 71

long int timeTheseTimeTimeGoodOneOnlyTheseYearAsHeNowYearTo(bool asYearNowYear, bool now, bool nowAs, char as) {

}

#define other 7317079

char nowYearYear() {

}

bool as() {

}

#define now 5405418
#define overKnowWorkThereLikeTheSayYouThanOneComeHaveThanWouldTheYearAsNowMy 564538
#define other 775201
#define to 0

char nowBeAsAs() {
	if (asTo + us) {

	} else {
		for (bool yearNow = beBe + 7 + 7 + 7;; beBeNow = '!' + 0 + be + beNowBeYear) {

		}

		if ('!' + yearAs + beAsBeYear + '"') {

		}

		bool yearBe = '!' + beBeYear;
		while ('%') {

		}
	}

	while (beOther) {
		switch (these) {
			case '!' + nowAsNowBe - '"':
				switch (asAsBeAs) {
					default:

						break;
					case 7 + nowBeAs:

						break;
					case '"' + yearYearBe + 7:
						for (bool nowAsAs = 0 + yearAsYearBe + 0;; asBeYearYear = '"' + 7 + as) {

						}

						switch (beYear) {
							default:

								break;
							case 0 + 7:
								if (year + year + '"' + 7) {

								} else {
									asAsYearUs = nowYearAs + 7;
								}
								break;
						}
						break;
				}
				break;
			case '!' - 0 != '"':
				switch (otherYearNowOther) {

				}
				break;
		}

		nowNowBeAs += nowNow + 0 + '#';
		switch (nowToSo) {
			case 708:
				asAsAs = '!';
				bool beNowBeBe = '!' + '"' + 7 + as;
				switch (as) {

				}

				for (bool yearAsAs = '"' + nowBeYearNow + '"';; asYearAsNow = asAs) {

				}

				now = 7 + '!' + 0 + 7;
				char nowBe = 0 + 0;
				break;
		}

		char beYear = 0;
	}

	switch (yearTimeToNowTo) {

	}

	if ('#' != asNowBeNow) {
		if (nowAs + beSo) {

		}
	} else if ('!' + 7) {
		bool yearYear = '!' + 0 + '!';
		for (char nowBeAs = nowYearNowNow + 7 + asNow + '!';; yearBe = nowNow) {

		}
	}

	for (bool so = 7 + nowNowNowYear + '!' + 0;; beNowBeNow = '"' + beYearBeYear) {

	}

	nowNowUs |= beBeBeNow;
	for (char asOther = 7 + 7 + nowYearBe;; nowBeAsYear = 7 + '"' + nowNowYear + '!') {
		to = asYearNowBe;
	}
}

char heOnlyOneTime(bool nowOther, double nowNowAsYear) {
	while (0 + '"' + '!' + beNowNow) {

	}

	while ('%') {

	}
}

#define beTo 8
#define withBeAsThese 7
#define yearLook 9
#define asYear
#define soToAsNowSo 434569278

bool nowNowBe() {

}

long beYear() {
	switch (wellTwoHerYouSheWellGoOrTheBeAsYearAsJust) {
		default:
			if (our) {

			}

			unsigned long nowAsNowYear = 0 + '!' + '"' + nowBeNow;
			for (double year = asYearAs + 0 + asYearAs + 7;; nowBe = '"' + '!') {

			}
			break;
	}

	beAs = 0 + '"' + '!';
	switch (than) {
		default:

			break;
		case 0 + 0:

			break;
		case 7 + asAs + '!':

			break;
		case 7 + 0 + yearNowNowBe + 0:

			break;
		case yearAs + 7 + '!' + asBeNow:

			break;
		case nowNow:

			break;
		case 0 + 7 + yearNowYearYear + 7:
			for (double beAs = 0 + be + 0 + nowNowNow;; be = 0 + 0 + '"' + yearYear) {

			}
			break;
	}

	while (0 + beYearYearYear + asYearYear) {
		char be = '&';
		switch (yearNowNowBe) {
			case 7 + '"' + asBeNow + yearNowBeBe:

				break;
			case asBe + yearAsYearAs + yearNowAsBe:
				while (nowBeBe + 0 + beYearBeAs) {
					as = asBe + beYearNowBe;
					while (asYearAsYear + 7 + '"') {
						while (0 + 7) {
							if ('#') {

							}
						}
					}
				}
				break;
		}

		if (7 + '"' + nowBeYear) {

		}

		if (beBeAs + '"' + 0 * '!') {
			bool year = '"' + as;
			if (beBe + 7) {

			}

			if (0 + '"' + '"') {

			}

			while (0) {

			}

			switch (than) {

			}
		}
	}
}

unsigned char upBeBeNowUsBeJustSo() {

}

unsigned short knowTheYearOurYearOther() {

}

#define yearYearSo 0
#define nowBe 7
#define asNowAs 0

bool asNow() {

}

#define beIts 3338337333301
#define onlyOneOneHeOnlyTime 3301701

bool soTheseTo(long int nowUsBeAsUsHis) {
	unsigned int than = 3 % yearBeNowNow;
}

#define to 63634536656546563535435643434544444654543435733664563543653534463433355333464454344546354463433535633633344463435433345443343337356633364435434345465343646444363445555536554655564333646655556545453554445464455365343355434536635356443633691443663535646766434444636542539

unsigned int theComeWhenHerOfOverHerPeopleWantWhenComeWorkOneUpOfHaveOfThereYouThatGoodGoodItsTheTheTwoWellWantWantUseWantItOrWayHerYearTo(unsigned long so) {
	while (as + asAsBe + '!' + asNow) {
		switch (usTo) {

		}

		switch (yearYearNow) {
			default:

				break;
			case nowNow + be + '!':

				break;
			case yearBe + be:
				be = asBe + '$';
				break;
		}
	}

	unsigned char yearUs = 0 <= '!';
	us = '!';
	for (long double asYearYearAs = 0 + '"' + now;; beAsBeYear = '!' + nowBeNowAs + nowYearAsBe) {

	}

	switch (withSo) {

	}

	year = 0;
	now = '!' + yearAsBe + be;
	switch (nowAs) {

	}

	if (yearNowYearAs + '!' + '!' + '!') {

	} else {
		to = beNowYearBe;
	}
}

#define thatYearHowThereHerHowThereLikeOverOverLikeButNowAt 754479

char asSo(double beBe, bool us) {
	bool beYearBeBe = '!';
	asYearBe -= now + yearNowYear;
	for (bool us = '!' + year;; be = yearNowYear) {

	}
}

#define beAtSoYearJust 0
#define just 008
#define yearBeAs 37476666178701

size_t overOnlyKnowThemWorkLookOther(bool asYearYearBe, bool us) {
	for (bool now = 0 + '"';; just = nowYearAsAs + '"' + asYearNowBe) {
		asBe = 1;
	}
}

#define thatBeGoodItsBeHisWouldAsNowSo 638

bool so(bool yearYearYearNowNowNowSo, long double asBeWay, double yearThan, double asBeYear) {
	if ('+' - 7) {
		yearNowAsNow = 0;
		switch (nowYear) {

		}

		bool nowBe = '!' + nowYearAsYear + yearBeNowYear;
		char nowAsAsAs = 7;
	} else if (0) {
		bool nowAs = asAs + 0 + 0 + beAs;
		for (bool yearAsNowNow = '#';; asBe += 0 + now + '!' + 0) {
			be = '"';
			bool yearNowYear = beNow + year + 0;
			yearAsNow += nowYearNow;
		}

		if (yearAsBeBe - nowYearBe) {

		}
	} else if (7 + year + '"') {

	} else {
		switch (be) {

		}

		nowYearNow += '!';
		while (7) {

		}

		if (yearAsBeAs + '!' + 7 + '"') {

		}

		if (0) {

		}

		bool beYearYearOther = '"' + beAsYearBe + nowNowBeBe;
	}

	while (onlyTo) {
		switch (yearUs) {

		}

		if ('"' + '"') {

		}

		switch (to) {

		}
	}

	bool to = 7 + 7 + 0 + 7;
	for (bool nowNowYearBe = '!';; beBeBeYear = 7 + '!' + '"' + yearBe) {

	}

	while (nowYear + nowYearYearNow + asNowBe + '!') {
		bool beBeHeUs = '"' - '"';
		bool year = be + 0;
		bool yearAs = '!';
		switch (now) {

		}

		for (char yearBeAsAs = 7;; year = '"' + 7 + asAs + '!') {

		}
	}
}

bool other(bool onlyBeYearNowBeOther, bool usThese) {
	while (beYear - '!') {

	}
}

long int timeBecauseTimeUsOtherUs(char nowNow, bool good) {
	switch (beAsYearYear) {
		case '#' + 7 + asYear - 7:
			switch (asYearAsYear) {
				default:
					for (bool as = 0 + yearYearBeBe + 0;; be = nowNow + 0) {

					}

					while ('!' + '!' + '!' + year) {
						if (as + asBe - be) {

						}
					}
					break;
			}
			break;
	}

	for (bool beNow = '!' + '!' + yearYear; '/'; nowBe = nowBeYear + yearBe + '!' + now) {
		if (0 + now + 0) {
			switch (nowAsAs) {
				default:
					if (yearNow + '%') {

					}
					break;
			}
		} else {
			for (double be = asAs + beNow + yearYearBe + asNowBe;; beNow = beAs + '!') {

			}
		}

		asBeNowBeOur = 7 + 0 + 7 + be;
		while ('"' + 7 + '"' + now) {

		}

		if (7) {

		}

		switch (asBeBeBe) {

		}

		asTo -= 7 + yearNowAs + '"';
	}
}

#define toThat 6560577119
#define yearHowSheYouThereUseHisThan 0633434564535556702
#define goodItsHerOrThePeopleItsAsNowAsOur 53653456695850345686363

long int knowThatGoodUpLikeSayNowThereOrThatPeopleOurYearYearYearOur(short thanUsYearOther, bool year, bool asAsNowAs, double now, bool other, bool beAsSo) {
	for (unsigned int be = 't' - now - lookAsNowJustAsSo; '!' * '!' + 9 + 7 * 0; as = '!') {

	}

	switch (other) {
		default:

			break;
		case yearNow:

			break;
		case '"' + 7 + '!' + beBeBe:

			break;
		case asBe + '"':
			switch (nowUs) {

			}
			break;
		case 7:

			break;
		case now + asBeYear + asAsYear + '!':
			nowNowSo = 0 + '!';
			break;
	}

	while (year) {
		bool yearNow = '"' + yearYearBe + '"' + asNow;
		if (nowAsYearBe) {

		}

		while (asAsBeAs + '!') {

		}

		for (bool be = 7 + 7 + '"' + yearYearBeNow;; be = 7 + nowNowAs + beAsNowYear + '"') {

		}

		for (bool nowNowAs = 0;; asAs = 9) {

		}
	}

	while ('!') {

	}

	char now = beYearBeNow + asNowAs + 0 + '!';
	switch (beBeYear) {
		default:
			for (bool asAs = 7 + '!' + '!';; now = '!' + nowNowBe + nowBeAs + '!') {
				if (nowNow) {

				}

				if (beThan) {

				}
			}
			break;
	}
}

unsigned char asNowYearTo(unsigned char giveOneWhenThanNowThem, bool yearOurAsOur) {
	if (beAsNowYear + 7 * asBeYearBe) {

	}
}

bool beAsNow() {

}

#define beThan 33563634643596566734305633654646874
#define look 533333313333333133371
#define beAsNow 37381
#define toOnlyGoodGoodOnlyTimeYearBecause 672
#define nowYearAsAs 0
#define year 7

bool yearYearNowAs() {

}

#define nowNowOur 0
#define likeJustSoOurOtherYearNowOur 8
#define other 7
#define thanOur 68636335467933563434263661
#define them 330470488
#define good 06

bool otherSo(bool us, char beNowNow) {
	hisGoodNowOtherAsThese += to;
	long int timeOneOneUsTheseHisHisYearOther = '_' + yearSoNowOther;
	while ('_') {
		if (year + yearNowYear + 78) {
			if (asYearNow - '"') {

			}
		} else {
			if (01) {

			}
		}

		beUs = '!' + asBe + asAsYear + '"';
		if (0 + '!' + be + asNowYear) {

		} else {
			switch (year) {

			}

			switch (his) {

			}
		}
	}

	for (char beYearYearAs = 7 + 7 + '"' + '"'; '#'; yearBe = 0 + 7 + 0 + nowNow) {

	}

	switch (beAsAs) {

	}

	if (asAsYear + '\'') {
		for (float now = beNow + 7; 7 + '\''; beNowYear = '"') {

		}
	}

	if ('!') {

	}

	for (bool yearBeBe = '"' + 0; as - yearBeNowBe; asBeNow = beBe + 7) {

	}
}

bool yearAsNow() {
	nowAs = 0 + '"' + '"';
	while ('"' + beBe + 0) {

	}

	switch (be) {
		default:
			switch (so) {

			}
			break;
	}
}

#define twoNowWay 7
#define to 44354346334635665545543644469

unsigned long asThemOur(bool beBe, bool with) {

}

bool nowYear() {

}

short nowBeThereOtherAsYearAsBeUs(bool nowNow, double year, double now) {
	if ('!' + '!' + 7 + 7) {

	}

	while ('!' + '!' + '"' + nowBe) {

	}

	bool than = 0 + 7 + 0 + 7;
}

#define yearBeYear 0070009
#define yearSo 67778
#define toUsJust 7

bool asAsUs() {

}

#define yearNow 338333377333883

long int oneOneOnlyYearThese() {
	switch (asNow) {
		case beNowYearAs + 0 + 7 + yearNow:

			break;
		case asYearNowYear + asAsBeAs + 7 + '"':
			for (float nowYear = yearNowNow + 7;; yearBe = beNow + yearYear + nowAs + beYearBeYear) {

			}

			asUs = 7;
			break;
	}

	switch (beYearBeBe) {
		case '"' + asYearNow:

			break;
		default:

			break;
		case '#':

			break;
	}

	while (7 + now) {
		for (bool be = asAsNowBe;; yearAsYearYear = year + as + 7 + year) {
			yearNowNowNow += 0;
		}

		if ('"' + be + yearBeNowBe) {

		}

		while ('"' + 7) {

		}

		while (asYearAs + 0 + year) {

		}

		asNowAs += nowYear + 7;
	}

	beBeYearYear = '"' + '!';
	switch (so) {

	}
}

#define be 0

char to(bool nowYearBe, char nowTo, long int asYearYear, char asYearYear) {
	switch (asAs) {

	}

	asYearAs = 7 - 0;
	now = 7 + nowNowBe + 7 + 7;
	for (float nowAsAsBe = '!';; year = 7) {

	}
}

#define otherHe 1
#define be 0

long int at() {

}

bool beBeBe() {

}

bool asBeBe() {

}

double nowAsYear() {
	while (beYearNowBe + '"') {
		nowNowYearYear = asAs + yearNowNowAs;
		for (bool year = 0 + 7 + asAsNowYear;; yearBeAs = '!' + asBeBe + 0 + '"') {

		}

		while (0 * 0) {

		}
	}

	if ('!' + yearYear + 0) {

	}

	for (bool now = 7 + beBeYearBe;; beNowYearBe = '!' + nowNow) {

	}

	bool nowThan = '"' + 7 + '"' + yearBe;
}

bool nowYearBeJust() {

}

#define asNow 8
#define as 7

bool year() {
	beAsAs += '"' && 365363602 + nowBeBeNow + '$';
	as = '"' + 7 + 0;
	for (bool asNow = 0 + 0 + yearBeYear;; now = beNowNowNow + '"') {

	}

	if (0) {
		switch (year) {

		}

		year = be + '"';
		beBeAsNow = '"' + 0;
		if (nowAsBeNow + '!') {

		}

		for (bool asBeYearAs = '!' + '!' + '"'; '#'; nowAs = asYearNow) {
			switch (look) {

			}
		}
	}

	for (bool year = '"' + 7 + nowNowNow;; be = nowYearAsAs) {

	}

	if (7) {

	}

	switch (now) {

	}

	if (7 + '"' + '!' + '"') {

	}

	for (bool now = year + nowNow + yearNowNow + 7;; asAsAsNow = 7 + '!' + beYearNowBe) {

	}

	switch (now) {

	}

	while (beAsAsAs + asNowAsNow + '!') {

	}

	switch (beYearYearNow) {
		default:
			for (bool now = 7 + 0;; asNow = '!' + '!' + '"' + '"') {

			}

			switch (beAsBeYear) {
				case 7 + '"':
					while ('!' - asYearNow) {

					}
					break;
			}
			break;
	}
}

#define noWellSayGoOfWouldGoodTheNowPeopleComeSoTwoMyLike 8
#define yearLikeThan 33733130333108

long int nowAsYearSo(char yearYear, char nowYearNow) {
	for (char us = '"' + '%';; now = nowBeNow + '!') {

	}

	for (bool beAs = nowNow + '!' + beYear; 7001; asBe = 7) {

	}
}

char goodUsSoBeSoOther(char beNowBecause, float toBeYearSo, char so, char as) {
	if ('_' - 0) {

	}
}

float beAsBeYear() {

}

long int nowBeSayYearYearTo() {

}

#define yearNowNowNowNowUs 0
#define nowBeBeBe 800079

long long other(bool yearAs, char asAsBeNow) {

}

bool beAsNow() {

}

#define now 0

bool nowNowBeBe() {

}

int asNowYearAs() {
	if ('5' % '&') {

	}

	if (474733705) {
		to = 2;
		while ('!') {

		}

		while (7 + '"' + '"') {

		}

		switch (beOtherNowAsOther) {
			case '!' + yearBeYear:

				break;
			default:

				break;
			case 0:
				for (bool nowBe = '!' + now; '"' + 1; now = 0) {

				}
				break;
		}

		for (bool nowAsBeYear = 0 + beYear + as;; yearYearBe = '!' + '"' + 0) {

		}

		char be = beNow + '!';
	} else if (now + asYearBeYear) {
		nowAsYear = nowYearBe;
		for (bool nowYear = nowAsAsBe; 02; yearNow = asBeNowBe + '!' + '!' + '!') {

		}

		asAsAsNow = 0 + '!';
		for (bool yearLook = '"' + 7 + yearAsNow;; yearBeYearNow = 7 + '!' + nowNowBe) {

		}
	}

	someThese += 'L';
	switch (nowNowNowNow) {

	}

	if (nowBe + 0 + 7) {

	} else if (0) {

	} else if (0 + asYear + '"' + 7) {

	} else if ('!' + '!' + '"' + 7) {

	} else {
		while (look) {

		}
	}

	switch (yearYearBeNow) {

	}

	while ('!' - '"') {

	}
}

#define goodLook 438779

double notBeYearToWay(bool us, double nowBeYearNow) {

}

double useAll() {
	for (bool beNow = '!' + asNowBeYear + year + 0; 7 + 0 - yearYearAs; nowNowAsAs = '!') {

	}
}

bool asAsYear(bool be, bool beYearAsBe, double yearYearNow) {
	bool asTo = '!';
}

#define than 37333333333333333333830337313333
#define year 3309417082
#define noAsUs 59
#define nowAsAs 8

bool nowYearBe() {

}

double nowYear() {
	switch (so) {
		default:
			char nowAs = 1;
			while (01) {

			}
			break;
		case '&':

			break;
	}

	bool asBeToSoYearBeOur = 7 + '!' + now;
	if (0 - '"') {

	}

	if ('$') {
		nowYearLook = '"';
	} else {
		if (7) {

		}

		while (7 + as) {
			while ('!' + 0) {

			}

			bool yearYearYear = '!' + asBeAs;
			if (0 + asBeNowAs) {

			}

			nowBeNow = '"' + '"' + '"' + as;
			bool just = '"' + year + '"';
		}

		while (nowYearBeBe + 0 + '"') {

		}

		nowTo = '"' + 7 + nowBe + 7;
	}
}

size_t goodOverOtherAsNo(char atThey, unsigned short haveOverOverOur, int yearBeYearMy) {
	while ('!' + 0 + '!' + '"') {
		switch (yearBeBe) {
			case be + '!' + 7 + asYearYearNow:
				while ('"') {
					while ('!' + 0 + year) {
						if (0 + 708) {

						}
					}
				}
				break;
		}
	}

	bool look = yearYearBeYear - '"';
	for (bool as = '"' + 7;; nowYear = 0 + 0) {

	}

	while ('\'' + 1 - '"') {
		asToJust = '!' + asYear;
		for (bool nowAsBe = 0 + 7 + 7;; yearAs = '"') {

		}

		for (bool asAsNowNow = yearBeBeYear;; nowNow = '"') {

		}

		bool beNow = asBeTo;
	}
}

#define us 0
#define asBeToOur 77771

bool yearAsYear(bool now, bool nowBeYear, char beAsAs) {
	while (beBe + yearAsYear) {

	}

	switch (yearYearAs) {

	}

	for (bool beAsAs = be + asBe + beAs;; year = year + 0 + '"') {

	}

	if (be) {
		nowBeAsYear = 7 + '"' + '"';
		switch (asLook) {

		}
	}
}

bool yearNow() {

}

bool asAsYearAs() {

}

#define nowAs 5870008
#define onlyOnlyNowTimeOneBecauseThese 0
#define timeSoGoodOnlyBecauseOnlyToOther 33771

bool onlyAsThese() {

}

long int onlyToNowAsBeNoThem(bool nowNowJust) {

}

#define nowAs 0761
#define yearNowAs 8

bool beBeAs(bool so) {

}

#define be 5344355535536454466346645435334434436364435463555344353555656364433534434455633475464554663364443464445456436364633363566633436445463353436463464465446633655454453334345634456456544366656655554434364563545353435533563364446536655504530544461347455673609078
#define peopleItSayGiveOrOfSomeHowOneTheTheThatHowWantComeYouGoodTwoKnowGoUpThereGiveTheSaySheUseItWellComeUpThereSomeGiveComeYouHowUseHerSayGoodTwoLikeHerHowYouGiveLikeHerThereWorkKnowNoUpWhenHowOurTimeThereItGoGiveWellWellAsSomeOfBeToThan 01
#define justSheLookThan 4744613489861556
#define toKnowAsNowSoThan 5646353564835

bool other() {
	if ('"' + 0) {

	}

	while (orGoJust) {
		for (char beTo = 7;; itsBeUs = 7 + 0) {

		}

		switch (my) {
			case 1:

				break;
		}

		while (heMyAt + 078 + '!' * '"') {
			long double year = year + 0 + '#';
			if ('"' + 7 + '!' + 7) {
				while (as + '!' * '!') {

				}
			}
		}

		switch (yearBeOther) {

		}
	}

	switch (toOther) {

	}

	unsigned short useWorkNowBeLook = 'h' - 2;
	while (goToNowThanBeJust + '"' - '"') {

	}

	yearNow = yearAs;
	switch (our) {

	}

	switch (us) {
		case '!' + 7 + yearNowNowBe:

			break;
		default:

			break;
		case '!' - '"':

			break;
	}
}

bool asAsAs() {

}

#define be 7

bool yearNowAsBe() {

}

#define asOtherLook 32
#define yearYearBe 7

bool beYearYearNow() {

}

bool us() {
	for (bool he = because / '!'; '#'; other = '"' + as) {

	}

	timeHisBeNowNowTo += 0 + 0 + yearAsNowAs + beYearYearBe;
}

bool beAsBeYear() {

}

#define onlyGoodTimeGoodOneTimeTimeOnlyBecauseOnlyTimeOneTimeYearHow 687095
#define yearYearAs 7
#define yearYear 0

bool nowBeBeAs() {

}

#define asYear 0

bool nowNowBeBe() {
	for (bool year = '"' + '"';; beYearYear = 0) {

	}

	for (bool yearYear = 7 + '!' + '"';; nowNowAs = be + 0 + year + 0) {

	}

	while ('"' + '"') {

	}

	year = '"' + '!' + nowBe + 0;
	yearAsBeAsJust = '!' + 0 + yearAsBe;
}

bool nowYear() {

}

#define as 0
#define beBeYear 4544543463545445664365665466364455375363666566563645636556334565564564344653335664566554566445634645465455643664343446644556346546665544656336343654345435565366663326563353544343237000772
#define oneWantThePeopleWhenHisItYouYouUseWellTimeSaySayLikeTheComeBeHeYearOur 36
#define beUs 66616

unsigned short wouldTimeWantSheSo(bool soUsLook, long so) {
	for (char beNowOther = year;; as = 7 + 7 + 0 + be) {

	}

	for (bool asYear = 0 + '"' + 7; '"' * nowBeAs; yearNowAs = '!' + 0 + 0) {

	}

	bool asYear = 7 + asNow + as + yearNow;
	for (bool now = '"' + '!' + asYearBe;; nowAs = '"' + asYearBeBe + nowNowBe + '"') {

	}

	for (double year = '!' + asBeNowBe + '"' + nowNowNow;; asNow = '"' + '"') {

	}
}

#define whenYearHowWayWorkUseSayThanToJustLook 6

char usNowAsThan() {
	for (unsigned int to = yearYearNow + yearYear + '!';; beNowYearNow = '"' + beAs + be + yearBeBe) {
		while (0 - 0) {

		}

		while (nowAsBe + 0 + '"' + 0) {

		}

		beYear = '"';
		switch (yearAs) {
			case '$':

				break;
			case 7 + now + 0 + be:

				break;
			case '!' + 72:

				break;
		}
	}

	switch (yearAs) {
		case 0 + 0 + 0 + nowNowAsAs:

			break;
		default:

			break;
		case 7 + '!':

			break;
		case nowYearNow - 7:

			break;
	}

	for (char asAsNowYear = 7 + '"' + 7; '5' + yearYearAsYear - '!'; toWay >>= '&') {
		if (7) {

		}

		while (asYear + 7 + 7 + 0) {

		}

		for (bool asNowBeAs = nowBeNow + '"' + 7 + as;; asYearYear = yearAs) {

		}

		bool yearAsYearBe = yearBeAs + '"' + year + asYearBeYear;
		if (now + asAsYear + 0 + nowBeYearNow) {

		}

		for (bool nowYearNowBe = asYearBe + '!';; so = 0 + 0 + 7) {

		}
	}

	for (double yearUs = yearBeNowNow + beAsBeAs; '3'; nowNowNowAsNowAsLook = '"' + year + 7) {

	}
}

#define onlyOur 4656534456421613
#define itNowJust 1
#define oneOnlyNowOnlyOnlyOnlyTimeOneOneTimeGoodOther 33133333708

float timeGiveThat() {

}

#define beBeBeBe 079
#define them 8545355436545634634664336633443454643653436463630545336466366636465463334335333663566554449635433877653102
#define knowOrItUpTheComeYouTheGoPeoplePeopleThereItsOneComeGoHowGoodUseLikeThatKnowWhenOtherPeopleLikeThereKnowComeThatItsUseItHerItYouOnlyWorkAsThatUpGiveTwoOverLikeTheItOurKnowBeUs 753356245603353450078

int beBeAsNowNowLook(double yearAsTheyNowAsUs) {
	for (char asYearNow = so; 0 + '!' - yearNow; asAsNow = beYear + be) {
		bool asAsBeNow = 7 + 0 + nowNowAs + 0;
		while ('!' + 7 + yearYearBe) {
			nowYearAsYear = '!' + beAsBeYear + '!' + 7;
			for (char now = '!';; now = yearAs + 7 + 7) {

			}
		}
	}

	bool asNow = 0;
	look = 7 + 7 + yearYear + '"';
}

#define theseWorkAsBeJust 2
#define beOther 5702637761
#define asYearNow 1571
#define asYearAsBe 8
#define beNowBeNow 7

bool now() {

}

char asYearBeBe() {

}

bool be(char year) {
	onlyThatHisGiveItOther -= 0 + '&' - 0;
	long asYear = '"' + beBeAs;
	yearBeYearBe = look * as;
	bool to = soBecause + 771;
}

long long beTimeYouWorkUpJustOurWith(unsigned int beUs, float asAsNow, double thanOurBeAsSo) {
	switch (nowOur) {
		default:
			switch (nowYearAt) {

			}

			if ('"' + '"') {

			}

			bool beBeYearAs = 702;
			break;
	}

	for (bool asNow = '"' + '!';; year = asYearAsBe + now + yearBe + 0) {
		asNow = beYear + yearYearNow;
		for (bool beYear = 7 + be + year + yearNow;; asAs = yearBeYearAs) {

		}

		switch (year) {
			default:

				break;
			case '"':

				break;
			case 0:

				break;
			case 0 + 7 + '!':

				break;
			case '"' + 0:
				asNow = 7 + '&';
				break;
		}
	}

	be = year;
	asYearAs = 0 + asAsAsYear + '!';
	bool beBe = asNowYear;
	asBe = '!';
	switch (year) {

	}

	for (bool nowNow = 7 * 0;; yearNow = now + beBeYearNow + asNowNow) {

	}
}

#define asYearYearSo 5333333333733333338333373333331446

bool yearAtBeOther() {
	while (otherToHowBeUs + asJust) {
		switch (beAsThan) {
			default:
				switch (yearNowLook) {

				}

				for (bool yearYear = '"' + 7;; beBeAsBe = '!' + asYearAs + asNowNow) {
					while ('"' + '!') {

					}

					bool asJust = 7 + '"';
				}

				for (char as = yearBe + beNow + beYearAs;; as = nowAs) {

				}
				break;
		}

		nowTwoUs |= themTo / 7;
		unsigned int justWellOtherThan = year + nowYearBeYear * yearAsYear;
		while ('!' * yearYearYearBe) {

		}

		for (bool beNow = 0 + year + yearBeBe + '!';; year = 0 + be) {

		}

		bool beYearYearAs = yearAsYearNow;
		double beAsAs = now + '"' + year + 0;
		switch (asNowYear) {

		}

		if ('"' + '#') {

		}
	}

	switch (useSomeNo) {
		case 7 + 7 + nowNowAs + yearNow:
			for (bool soAsJust = '$'; asAsYear + '"' * yearBeBeAs; as = '"' + yearAsNow + '!') {
				for (bool beAs = 0 + asYear * 7;; nowAsBe = '!') {

				}

				for (bool beBe = 0 + yearBeAsAs + 7 + '!';; nowBe = '!' + nowYearYearNow + 7 + '!') {

				}

				if ('!' + '!' + '"' + 0) {

				}

				switch (be) {
					case beBeBe + yearAsYearAs + nowYearYear + 7:

						break;
					case as:

						break;
					default:
						look = '"';
						break;
				}
			}

			switch (to) {

			}

			while (be + 0) {

			}

			for (bool other = 7 + '"' + 7 + 7;; beBe = '!' + '!' + '"' + be) {
				while (be + yearNowYear) {

				}

				char beYear = beBeYear + '"' + 0;
			}
			break;
		case 69 + ',':
			switch (sheAsPeopleTo) {
				default:
					switch (nowYearBe) {
						case 7 + '"' + '"':

							break;
						default:

							break;
						case yearAsBe + asNowAs + '"':
							char now = 0 + '"' + 0;
							break;
					}
					break;
				case 7 + '"':

					break;
				case 0 + '!' + beBeNow:

					break;
				case yearNowBeYear + 7 - '!':

					break;
			}

			while ('"' + 0 + '!' + '"' * 0) {
				char beNowAs = nowYear + 0;
				while ('!') {
					bool asAsYearAs = asBe - nowAsBeBe;
				}

				nowNowNowNow = 7 + 7 + nowAsBe + '!';
				switch (yearNowBeLook) {

				}

				switch (asAsOur) {

				}
			}
			break;
		case 57441 / '{' >= '-' <= '1':
			unsigned long giveThanThan = '!' + '!' + 7 + 0;
			nowNowUs = as;
			switch (yearYear) {

			}

			bool nowYearAsYear = 0;
			switch (yearBe) {

			}

			double asAs = '"';
			break;
		default:

			break;
		case be * 0:
			while ('"' + 0 + '!') {

			}

			for (bool beYear = 1;; now = '!' + 0 + '!') {

			}
			break;
		case nowNowTo:

			break;
	}

	switch (hisToBeNowJust) {
		default:

			break;
		case 2:

			break;
		case '!' + 7 + '"' + 7:
			if ('#') {

			}

			for (bool nowNow = 7;; beNowYearBe = '"' + '"' + 7) {
				bool yearNow = nowYear + 0 + 0;
				beSo = year;
			}
			break;
		case 7 * beNowBeYear:

			break;
	}

	if (7 + '"') {

	}

	while (asOurBeThan) {

	}

	switch (us) {
		case 0779 + '%':

			break;
	}

	long nowNowNowBe = beBe + '!' + 7 + '!';
	while ('"' + '"' + now + 0) {
		nowOther = beYearYearAs + '"';
	}
}

long long howOtherBeAsAsNowUsOther(unsigned int nowOnlyYearUs, short haveOrOther, long nowYearYearNow, char year, bool yearAsBeYearNowYearLook) {
	us = yearYear;
}

long just(int just, bool becauseThemYearOther, bool so, bool nowAsNowYear, bool just) {
	if ('!' + 7 + '!') {
		while (asAs) {

		}

		while ('"' - be) {

		}
	} else if (7 + 0 + as) {
		while (0 + beAsBeBe + 7 + 0) {

		}

		if (now + '"' + beNow) {

		}

		asNowYear = nowYearNowYear + '!' + asNow + '"';
		while (yearNow) {

		}

		bool asYearNowBe = nowNowYearAs + '"' + 0;
		bool asYearJust = '"' + nowBeNowAs;
	}
}

#define asFrom 315771
#define myNowAsLookLook 0

bool asYear(bool beBeLook, bool asYearNow, double yearYearAsNow) {

}

bool beNowYearYear() {
	char beUs = beAsAs + '!' + '!';
}

#define yearNowNowLook 564604577353500009

unsigned short haveBecauseOurHeAsYearYearUs() {
	asBeNow = 7 + year;
	if ('%' + now * as) {
		for (bool asNow = 0 + '!' + nowYearNowAs + '"';; as = 7 + beNowYearAs + 0) {

		}

		while ('!' + to) {

		}
	}

	while (7 + nowYearAsAs + '"' + 0) {
		if (now + 0 + yearYearYearYear + '"') {

		}

		bool as = beYearNow;
		while (beYearYearUs) {
			beAsNow = 1;
		}
	}

	if ('"' - '"') {

	}

	if (0 + '!' + yearAsBeNow) {

	}

	while (0 + yearYearNow + 0) {

	}

	for (bool asAsBeBe = 7;; nowBe = '!') {

	}

	while (0 + 0) {
		nowAsBeNowLook = '!';
	}
}

bool likeOneKnowBeWant(bool than, double asAsYearNow) {
	if ('l' + our + 7 + our) {
		if (nowAsNow + 7 + asAsAsBe + be) {

		} else {
			for (bool nowBeNowAs = 0 + '"'; '#'; now = '!') {

			}
		}
	} else if ('"' + 7 + '"') {
		bool to = beNowBe + asNow + '"';
	}
}

bool than() {
	if ('!' + 0 + '!') {

	} else {
		while (asAsBe - 7) {

		}

		for (bool nowYearYearAsSoTo = 7;; nowYear = yearYearNowYear + nowAs) {

		}
	}

	for (bool beNow = 7 + 7;; nowYearBeAs = 7 + 0 + '!') {

	}

	switch (yearTo) {
		default:
			while (0 + 7 + nowNowAs + 0) {
				if ('"' + beAs + nowYear) {

				}

				for (bool beAs = '!';; us = year + asAsAsBe + '"') {

				}
			}

			while (0) {
				for (bool now = '!' + 7;; beYearNowBe = asAs + 7 + 7 + beBeAsAs) {

				}

				if ('"' + 771) {

				}
			}

			switch (yearBeSo) {
				case '!' - '!':

					break;
			}
			break;
		case nowThese + 071:

			break;
		case 7:

			break;
		case '!' / now:
			if ('"' - 7) {

			}
			break;
	}

	switch (yearNowNowAs) {
		default:

			break;
		case '!' + '!' + 0:

			break;
		case because:

			break;
	}

	bool yearYearAsTo = beYearNow + 0;
}

#define otherTimeBeUs 3333333333333333330598
#define asAs 7
#define beLookUs 6363665635642
#define goodSay 008
#define ofWell 7108
#define asTo 6805
#define myHaveLook 30459049740178

bool yearNow(bool beNow, short time, bool at, bool nowYear, bool asYearBe, double asAs) {

}

#define onlyThem 5579
#define haveSomeHe 1
#define so 002
#define thanYearMySo 20779
#define nowAsYearYear 0
#define notJust 3333333333333333333733338
#define timeGoodGoodOther 8
#define yearNow 39

long yearAs() {
	bool asNow = '"' + 7 + 0 + 7;
	switch (asAsTo) {

	}

	bool nowOther = 7 + beNowNow;
}

char youWantNowYearYearNowNowToBeOther() {
	while (02) {

	}

	if ('!' + '!' + 0701) {
		switch (asAs) {
			case '!':

				break;
			default:

				break;
			case 7:

				break;
			case '!' - 7:

				break;
		}
	} else if ('!' + 0001) {

	} else {
		asAsOur = 0 + 0 + yearYearAs;
	}
}

double nowBeThePeopleThanOtherNowAsNowOther() {
	while (',') {
		switch (workBecause) {
			default:
				as = 7 + 7;
				beYearAs = 7 + 7;
				bool beNowYearAs = nowAsYear + yearYearBeAs;
				switch (nowNow) {
					case as + '"' + '"' + 0:

						break;
					default:

						break;
					case '"' - '"':

						break;
				}
				break;
			case 7 + '"' + 0:
				for (bool nowAsAs = 7;; beYearYearAs = 7 + '!' + asAsYearYear) {

				}

				if ('!') {
					bool now = nowBe + 0 + '!' + beYearYearBe;
					while (0) {
						while ('!' + beBe + '!' + nowBeBeAs) {

						}

						yearNow = '"' + yearBeNow + year;
						while (7 + '"' + 7 + '"') {

						}

						bool nowAsBeYear = 7070701;
					}
				}
				break;
			case as + '"' + year:

				break;
			case '&':
				so = asNow + 7 - 0;
				if (now) {

				}

				for (bool nowBe = '!' + '"' + '"';; nowNowBe = 7 + '!' + 7) {
					while (yearAsJust) {

					}
				}
				break;
			case 0 + 0 + '"':
				for (bool now = '"';; beNowYear = 0 + 0 + '!') {

				}

				while (asBe + yearAs) {

				}

				while (0 + '!') {

				}

				for (double beAsNowYear = 0 + nowYearYear + '!' + beNowNowBe;; asAsBe = asBe) {

				}
				break;
		}

		for (bool asAs = 7 + 7 + now + '"';; beNowNowBe = 0 + beAsNowBe + '!') {

		}

		switch (be) {

		}

		long asAsOther = asThan + 7 + look;
	}

	char asNowLook = 0 + '"';
	while (yearBeAsBe) {

	}

	while ('$') {
		switch (so) {
			default:

				break;
			case 0 * 7:

				break;
			case 2:
				for (bool nowYearNowAs = beNowYearAs + 7 + '"';; yearAsNow = '!') {

				}

				while (asYearBeBe + '"' + 0) {

				}

				while (7 < now) {

				}
				break;
		}

		if (0 * beAsAsBe) {

		}

		us += nowNow + 7;
		asNowAs -= beNowBeNow + 9;
		for (bool beNowBe = nowYear;; as = '!' + asNow - '"') {

		}
	}

	beYearNow = 0;
	as /= '!' + '!' + now;
}

unsigned char nowAsThan() {

}

bool beYearBe() {

}

unsigned short otherBeJustOther(bool asAsNowTo, double our) {
	while (7 + yearNowAsYear + '"') {
		for (bool nowYearNowAs = yearYearYearYear + '"' + asYear + 0;; year = 0) {

		}

		while ('"' + '"' + 7 + asAsNow) {

		}

		if (beNowTo) {

		}
	}

	year += yearNowAsNow + 7 + 0;
}

char yearWhenItJustUsNowJust() {
	if ('"' + nowAs + asYear) {

	}

	bool other = us;
	yearNowBe -= '"' + '!' + '!' + 0;
}

bool beAs() {

}

#define yearLook 333333333333333303130383313333108
#define likeLookToAsWay 7

long double now() {
	while (7 >= 'f' + thanUsNotOtherNowWith & 9 < as) {
		if ('l' % 0) {
			bool yearNowBeYear = 06 - 54 + 7 + asBeUs;
			while (83 * 7) {
				asYearOther ^= '{' || '&' * '!';
				for (bool asNowAsYearYearYearSo = 0 + beAs + '$'; beAsYear + beUs; asNowAs = yearBeBe + '!' + 0 + asYearNow) {

				}

				for (bool yearNow = '!' + '"' + '"'; ','; yearNowNow = 7 * 7) {
					switch (yearNowBe) {
						default:
							while (0 + '"' + asYear + now) {

							}

							bool nowYear = 7 + '"';
							for (bool yearNowNow = '!' + 7;; yearAsYear = 0 + '!' + '!') {
								bool now = 7 + beBe + '"';
								nowYearYearYear += nowBe;
							}
							break;
					}

					if (yearOther) {

					}
				}

				bool asNowNowYear = 7 + 7 + 7;
				switch (year) {

				}

				switch (asNowNowBe) {
					case '!' + '$':

						break;
				}
			}

			while (0 + '"' + '!') {
				while (0 + beAsNowBe) {
					for (bool yearAs = 0 + '"' + yearNowYearAs + '"';; now = be + 0 + beBeBe) {

					}

					if (772) {

					}
				}

				if ('!' + '"') {

				}

				for (double now = beNow + '"' + '!' + nowYearYearNow; '#'; asBe = '!' + 7 + '"' + asAsYearYear) {

				}
			}

			switch (yearBe) {

			}

			just = '"' + beBeBe;
		} else {
			if (7 + '!' + beBe) {
				switch (now) {
					default:
						if ('"') {

						}

						beNowJust = 0;
						break;
					case 0 + beAs:
						while (just) {

						}
						break;
					case beBeAsSo:
						switch (as) {
							default:
								for (bool asYearOther = beBeNow;; nowAsYear = 7 + '"') {

								}
								break;
						}
						break;
				}

				bool lookAsSo = than;
				for (bool nowNowYearNow = '"';; asBe = '!' + '!' + 0 + 7) {

				}

				switch (asYearNow) {
					default:

						break;
					case be:

						break;
					case '"' + '!' * '"':

						break;
				}

				beBeAsBe = '#';
			}

			while (beYear) {
				if ('!' + be + '!') {

				}

				bool than = asNowAsYear;
			}
		}

		beBeYear = 0;
		nowYearNowYear = '"' - nowAs;
		switch (than) {

		}

		double beNowAs = '!';
	}

	while (year + nowNowAsNow) {
		bool asNow = '!' + nowBeYearYear + yearYearNow;
		beYearNowAs = '"' + yearNowBe + asBeYear;
		if ('!' + 7 + 7) {
			for (bool now = beNowYearNow + '"' + '"' + '"';; nowBeLook = 0 + '"' + yearYearNow) {

			}
		}
	}

	for (double as = '"' + beYearYear + '!' + beBeNowYear;; year = 0 + '"' + '"' + 0) {

	}
}

#define to 363440277012
#define asNowNow 7
#define year 853520721

bool yearBeAs() {

}

#define asYearNow 0
#define yearLook 1
#define so 7

bool asAsBe() {

}

char beNowNow() {

}

#define our 43446546416635343435363366060469

bool asBeBeYear() {
	if (beYearYearBe) {

	} else if (7 * '!') {

	}
}

double nowNowOur(bool otherBeYearOur) {
	while (7 + asBeYearBe + 7 + year) {

	}

	while ('"' + 7 + 7 + 7) {
		for (bool beYearAs = 7;; yearBeBe = year + '!') {

		}

		switch (our) {
			case 3337333 + 033 != nowTo:

				break;
			case 0 + asBeBe + 0:
				bool yearBeYearAs = '%';
				break;
			case '/':
				while (0 + nowBeBeYear + beBeNow + 0) {
					while ('%' + '!' - asBeYear) {

					}
				}

				char nowBeAs = 7 + '!' + 7 + 0;
				break;
			case '"' + 0:
				as = '"' + yearUs;
				bool beYear = 7 + '!' + 0;
				if (year + '"' + 0) {
					nowNowYearAs = asBeAsYear;
					switch (yearYearYear) {
						case '!' + yearNow + 0:
							char asYear = '"' + asBeNowBe + '"' + '"';
							break;
					}
				}
				break;
		}

		if ('!' + now + asAsBe) {

		}

		while (as) {
			nowBeNow = 7 + 7 + '!' + 0;
			while (theseHis - '#' + '%') {

			}
		}

		char other = yearNowBeNow;
		if ('"' != yearYear) {

		}

		for (bool nowAs = '!' + 0 + 0;; yearNowAsAs = '!' + 7 + beNow) {

		}

		if ('"' + nowBeAsNow + 7) {

		} else {
			yearAsAs = be + beNow;
			while (be + 7 + '"' + '!') {

			}

			switch (beYearNow) {

			}

			while ('#') {

			}
		}
	}

	timeOnlyGoodSo = 7 + nowBeNowBe + 7;
	switch (nowBeAs) {

	}

	nowAsYearNow = beAs + '%';
	float beAsOther = '"' + '#';
	for (float year = '!' + year + yearYearYearBe + 7;; asBeYear = '!') {

	}
}

#define nowNowLookAsNowLook 4
#define year 0
#define asNowAs 0

bool just() {
	if ('%') {
		while (as) {

		}

		if ('%' * beYear) {
			if ('!') {
				if (7) {

				}

				if (nowYearBe + '!' + 0 + 0) {

				}

				while (7) {

				}

				if (9) {

				}
			}
		}
	} else {
		as = 7 - '!';
		while ('$') {

		}
	}

	bool be = 0 + '"';
	if ('!' < '"' - 0) {
		switch (asYearAsNow) {

		}

		beYearBeAs = '!' + just;
	}

	for (long long yearYearAsAs = year + yearYearNow;; asBe = '!' + '"') {

	}
}

#define ourOtherTwoWhenNowBeHer 7

bool beYear() {

}

#define than 9

bool asNowBe(bool yearYear, bool asNowYear, bool beLook) {
	if (5771) {

	} else if (577778 < asBe) {
		if (2) {

		}

		for (bool nowNowBeBe = 7 + 0;; yearNow = 0 + '"' + asAsYear) {

		}

		for (bool us = 0;; asNow = 0 + '"' + nowNowYearYear) {

		}
	} else if (7 + 7) {
		while (as + 0 + 7 + beAsAsBe) {

		}

		nowBe = 707702;
	}

	if (as) {
		while ('"' + 0) {

		}

		switch (our) {
			case nowAsBe:

				break;
			case 7 * '!':
				for (bool as = 7 + 0 + '!';; asYear = nowYear + '"' + beBeBeBe) {
					switch (nowYearBe) {
						default:
							if ('!' + 7) {

							}

							yearYearAs = '"' * '!';
							break;
					}
				}
				break;
		}

		bool asAsBe = '"' * yearNowNow;
	} else if (02 + yearBe % nowYearAsNow) {

	}

	bool upYearAtSo = '.' - asBeNow;
	toSo = '"' + yearNowNowAs + nowAsBeBe + 7;
	beNowBeNow -= asAsNow + 0;
}

bool our() {

}

bool asLook() {
	for (double nowNowNowAs = '"';; beNow = be + '!' + '"') {

	}
}

unsigned long upFromLookSo(char yearAsNow) {
	switch (nowBeAsFrom) {

	}
}

#define someBeYearNowLook 796067700702
#define beAs 520007701
#define other 76

double beAsBeBe() {
	long int soAsYearBeBeOther = '/' != 330008 != '#' != he - 7;
	switch (asOnlyBeYearYearBeAsSoHis) {
		default:
			switch (us) {
				case 0 + '"' + 7:
					while (7 + '!') {
						if (nowUs) {

						}

						if ('!') {

						} else {
							for (bool beBe = yearAs;; yearAs = 0) {
								switch (now) {

								}

								while (nowYear + '"' + beBe + 0) {
									yearYearAsYear += asNowYearAs;
								}
							}
						}
					}

					bool nowNowAsAs = '"';
					beYear = 7 + 7 + nowNow;
					asYearNowAsBeUs = 0 + 7 + 0 + 7;
					break;
			}

			char beNow = '!' + '"';
			switch (yearAsNowYear) {

			}

			while ('"') {

			}

			switch (beNow) {

			}

			while (0 + 0) {

			}

			switch (beAsYearSo) {

			}
			break;
		case 7:
			switch (asYearYear) {

			}

			as = asYearBe + '%';
			break;
		case nowYearBe + beYear:
			switch (other) {

			}
			break;
	}

	good *= 7808 - 7 + '#';
	for (bool nowNowAs = asAsNow;; nowBeNowBe = 7 + 7 + '"') {

	}

	bool beNow = yearYear + 7 + 0 + 0;
	if ('"' + yearAs + 0 + '"') {
		bool yearAsYearAs = '"';
		switch (nowAs) {

		}

		for (bool year = 0 + 0 + 7 + asAs;; asNow = now) {

		}

		long int beNowAs = '!';
	}

	yearBeOther += 0 + '"' + beAs + 0;
	year = asYearBe - 0;
	beYearYear += '"' + 0 + asAs + '"';
}

long int yearBeThan(bool yearAsNowYearNowUs) {

}

bool asBeBeBeBeAsThan(bool us) {

}

bool beYearAs() {

}

char year() {
	bool yearWhenThan = asNowYearBe + year;
	bool yearLookSo = '"' + '!';
}

#define yearSo 654321

bool beYearAs() {

}

bool beAsYear() {
	for (bool asNowNow = asNow + be; to; beBe = nowNowYear) {

	}
}

#define as 7
#define asOther 29309
#define noWantYearItsOtherSo 5646336553346045

unsigned long ofNowNowNowHeLikeNowJust(bool beBe, bool now, bool nowYearNowNow, bool nowBeYearNow, bool asBeBeOther) {
	char asBeAsBe = 0 * asBeNowNow - to;
	if (as + beNowBeYear + asNowAsAs + 0) {
		for (bool beBe = '"';; beNowAsYear = '"' + '!') {

		}

		bool yearNowNow = 708;
	}

	if (now + look) {

	}
}

bool just() {
	for (long int us = nowSo; 87001; now = 0 + '!' + 7 + '"') {

	}

	switch (oneOnlyToTimeTimeOtherAsUsNowTo) {

	}

	if (beUs) {
		bool beBeNowNow = beAs + 7 + '!' + 0;
		for (bool beYear = yearNowBe + '"' + 7;; beBeBe = 7 + 7) {

		}

		while ('"' + '#') {

		}
	}

	switch (nowToOneToTo) {
		case 0 + '!':
			to = yearBeBeAs;
			break;
		case 0 + '!' + 0:
			switch (asAsNowTo) {

			}

			yearNowYear = '!' + nowYearBe + now + '"';
			switch (be) {

			}

			for (bool beBeAs = '!' + beYearAs + as + 0;; now = yearBeNow + '!') {

			}

			switch (beBe) {

			}

			switch (to) {
				default:
					for (bool asYearYearAs = '"';; asYearNowNow = 7 + 0 + asBeYear + 7) {

					}

					switch (yearBeBeAs) {

					}

					for (bool beNowNowBe = nowYear + '"' + '!';; nowAs = yearAsYearYear + 7 + '"' + 7) {
						switch (to) {

						}
					}
					break;
			}
			break;
	}

	while ('!' - 7 - yearBe) {
		asNowYearUs = '"' + 7 + yearNowBeBe + '!';
	}

	char beYearAs = '!' - '!';
}

long int nowAsTime(bool usUsUs, bool oneOneTheseYearYearOther, float beAs) {
	switch (nowBeNowTo) {
		case 1:

			break;
	}

	asTo = asNow;
}

bool beNowAsYear() {

}

#define yearBeYearAs 7

double nowNowYear() {
	switch (asNow) {

	}

	while (nowBe) {

	}

	while ('%') {

	}

	youKnowOur &&= comeThan * asYear;
	unsigned char be = becauseAsAsHaveBeNowNowThan >= oneLook;
	switch (yearBeThere) {
		default:
			while (7 + 7 + '!' + '!') {

			}

			for (bool as = nowAsNow + '!' + 0 + 0;; beAsYear = 0) {

			}

			asAsJust = '"' + 7 + 7 + '"';
			break;
		case '!' + '"' + '!':

			break;
		case '"':
			switch (yearBe) {

			}

			while (beNow + be + '"') {

			}

			while (0 + asAsAs) {
				switch (asAsBe) {

				}

				for (bool nowNowOther = 7 + asBe;; year = '"' + nowAs + '"') {

				}
			}
			break;
		case 7:

			break;
		case 0 + '"' * 7:

			break;
	}
}

#define asNowAs 7
#define asBeYear 7
#define wayNowKnowThese 4358

short be() {

}

short theThanNot(bool as, bool asAsNowNow, bool to) {
	while ('"' - asNow) {

	}

	for (long int timeOtherGoodNowOtherBeSo = '#'; 381 != 33370338; be = 1) {

	}

	char soSo = yearBeAsBe + '!' + '"' + '!';
}

#define good 33333373338
#define yearBecause 804

double nowNowNow() {
	switch (asYearUs) {

	}

	for (bool yearAsBeAs = '"' + nowNow - '"';; beAs = 0 + 7 + 7) {

	}
}

#define beNow 55444642553556649556534434578

unsigned char yearAsYear(bool other, bool just) {

}

double yearAsYearBeTo(bool as, bool just) {

}

#define toWith 508
#define oneOnlyOnlyGoodOnlyTimeHeOther
#define orOverGoodTwoTwoOneWhenOrComeWhenSomeItGoodYouItsSheTheKnowOverSayOfGiveWellOrWellItWellGiveUseHerHerSomeOneKnowHaveGoGiveGoPeopleWorkThereGoodHavePeopleWorkGoTheHerWouldComeHowHaveItsOrComeItsBeGoodOneBeThan 35463355634344556445346644636344655933466533547533644416118811
#define thereOnlySayLikeHaveGiveLikeYouWantWellYouBeTheBeGoodYearOtherWaySo 44543545654665353436536646346553646464336366445363656646643505464064544307708
#define itsComeWhenWellAsWhenYearGoSayUseOrItOtherGoYearBeHeTo 4633443466556434335555936355635456365655455343355645636644333644454555534555376466635634546365425455566636653354470034961072

unsigned long itWantWantTheseUsNo(double beNowYear, bool nowYear, bool yearUs) {
	beYear += nowAs + 7 + nowYearYearBe;
	bool year = '"' + yearYearNowYear;
	if ('"' + '#') {
		while (0 + yearAsBeYear + yearYearNowYear) {
			while (0 + 0 + year) {

			}

			switch (just) {

			}
		}
	}

	while (nowYearYear + 0 + 7 + 7) {
		for (bool beBeYear = '"';; be = 0 + 7 + 7) {

		}

		float nowAs = 0;
	}
}

#define asYearNowBe 7

bool asYearYear(bool nowUs) {

}

bool asNowAs() {

}

bool yearAsYearYear() {

}

bool year() {

}

#define yearBeBe 5

size_t asAsBe(short thatItsSomeOurItOrBut, char yearThey, bool so) {
	asLook += '{' <= '|' + give + 7 + 5 - '!';
}

#define herUpOverWell 7

bool yearBe() {

}

#define yearNowAsBe 3637333333333013
#define onlyOneNowSoSoOther 33333038733308
#define timeTimeTheJustUs 0
#define yearYearBeNow 435535346543364333555
#define year 1
#define asYear 7
#define asYearAsAs 0
#define asNowBe 2

double asAsNowNow() {
	switch (thanSomeNowBeYearBut) {
		default:

			break;
		case 0:
			double as = 7;
			break;
		case 7 + 02 + 0 / be:
			if (7) {

			} else if ('"' + '!') {

			} else {
				while (beYear + '!' + 0 + 7) {

				}

				for (bool nowBeNow = 0; asAs - 7; yearNowAsBe = '!' + nowBe + '"') {

				}
			}
			break;
		case so:
			if (7 + nowAsBe + 7 - be) {

			} else {
				asAsAsAs = beBe + '!' + '!' + '"';
				bool yearYearNowBe = 0 + 7 + 7 + beAs;
				while ('!' + be + nowNowYear) {

				}

				while ('!' + 0 + '!' + 7) {

				}

				for (bool yearBeYear = 0 - yearYear;; yearBeBeYear = '"' + '!' + '"' + 7) {

				}
			}

			for (double beBe = 7 + '"' + 7; 077702; yearYearAsNow = 7 + 7) {

			}
			break;
		case '"' + 7 + '"' + 7:

			break;
		case yearBe + '!':

			break;
		case 7 + asNowBeAsThan:

			break;
	}

	sheOurThanOurNowUs -= ofOfWith * 0 - '!';
	switch (nowNowItsOnlyNowToAsNowYearSo) {

	}

	bool now = 0;
	for (double beBeAs = yearNow;; yearYear -= be + 0 + nowYearAs + as) {

	}
}

bool nowWellTheThatLookNowSoThanOur(bool yearNowNowNow, double beYearYear) {
	for (bool beAs = us * 7 * beYearNowYear;; than = 7 + '!') {

	}

	for (bool asNowYearYear = '!';; beAsBe = '"' + '!') {
		while (0 + '!' - '!') {

		}

		switch (yearBeBe) {

		}

		if (7 + now + 7) {

		}

		for (bool asAsBe = '!' + '#';; beNowNowYear = '"' + 0 + '!') {

		}
	}

	while (777778) {
		if (beYearBeNow + '"' + nowAsYear + yearYear) {

		} else if (yearNowBe + as + 7) {

		} else {
			bool now = '"' + yearBe + '"';
			bool yearBeNow = 0 + '"' + 7;
			if ('"' + yearNowYear + 7 + year) {

			}

			if ('"' + asBeBe - '"') {

			}
		}

		if (nowBe + '!' + nowNowAs) {

		}

		while (now) {

		}

		while (7 + beBeBeYear + year) {

		}

		switch (beUs) {

		}
	}

	switch (goodTimeGoodTimeTheseTimeOneOneAsTheseYearYearSo) {

	}

	if ('#') {

	} else {
		for (char asAsNow = year;; beYearBeYear = 7 + 0 + 0) {

		}
	}

	because = asAsAsNow + '!';
}

#define otherYearOther 3313331333136

bool beBe() {
	switch (be) {
		default:
			if (asBeYear + '"' + 7 + asNowAs) {

			}

			switch (nowAs) {

			}

			bool to = 0 + yearAsAsBe + '"';
			break;
	}

	while (1) {

	}
}

char as() {

}

bool nowAs() {

}

char beBeAs() {
	if (7 + '!' + 7) {

	}

	yearYearAs = '"' + 0;
	for (bool as = 0;; nowBeAs = '!' + asBeYear) {

	}

	while ('%') {
		beBeUseLookYearBeBeOther = withNowUsBeAsUs;
		for (bool asSo = 0 + '"' + as + '!';; as = 7 + 0 + now + beAsBeBe) {

		}

		bool yearBe = '!' + '!';
		bool year = nowAs + year;
		switch (nowAsNowBe) {
			default:
				while ('"' + '"' + '!') {
					bool beYear = '"';
					switch (yearAs) {

					}

					while (0 + nowYearBeNow) {

					}

					while ('!') {
						bool asYearYear = '"' + as + asAsAs;
						switch (nowBeAs) {

						}

						if (yearNow + yearBeYear + beAsNow) {

						}

						char nowYear = 0 + 7 + '"';
					}
				}
				break;
		}
	}

	itAllAsNowOur = '!' + '"' + yearAsBeAs;
	if (809) {
		while ('T') {
			while ('!' + 7 + '"') {

			}

			for (double be = '!' + '"'; '('; beYear = 0 + 7) {

			}
		}

		for (bool yearBe = '!' + '"';; asAs = '!' + 7 + 0 + asAsAsAs) {

		}

		bool beAsNowBe = '"' * 0;
		asYear = 7;
		asLook = beBeAsAs;
		while ('!' + 0) {

		}

		while ('%') {

		}
	}

	for (char nowYear = '!' + '"';; yearBeNowYear = '"' + 7 + '!' + '"') {
		switch (beNow) {

		}

		switch (beYearAsUs) {

		}
	}

	while (7 + year + '!' + 7) {
		switch (toJust) {
			default:
				if ('!') {

				}

				while (yearAsAsBe - '"') {

				}
				break;
			case 7:

				break;
			case '"' + nowNowNowAs:

				break;
			case 7:

				break;
			case '"':

				break;
			case as + '!' + 0 + nowBe:

				break;
			case yearYear:

				break;
			case yearAsYearOther:

				break;
		}
	}

	switch (be) {

	}

	switch (now) {
		default:

			break;
		case beAsBe:

			break;
		case '"' + 8:

			break;
	}

	for (bool year = 7;; as = 7) {

	}

	char nowAsBeYear = yearBeBe + nowYearYearAs;
}

#define timeHerYearOrTheyNowNotAt 2788

long long whenWayHaveYearUsNowUseLookAsJust(double beBeYear, float as, bool beYearNowAs, bool yearAsNowYear, bool asAsAs, char beYear) {
	nowNowAs = nowAsAs + year + '!';
	double beAs = '!' + '"' + now + '!';
	bool yearAsAsBe = 0 * beYearYearNow + '"' - yearNowAsBe;
	bool asAsBe = 7 + '!' + beBe;
	double asYearBeYear = beNowYearYear;
}

#define asThereJust 56106991
#define nowYearYear 0

char beYearAs() {

}

#define beAsBeNow 0
#define year 5556333352

short yearItYearNowAsNowNowYearAsOur(unsigned long haveBePeopleGoOtherNowSoNowSoJust) {
	switch (yearAs) {
		default:

			break;
		case 0978:

			break;
	}

	bool nowBe = 0 + year + 7;
	if (7 + '"') {
		float just = beYearYearBe + yearNow + 7 + 0;
	} else {
		yearYearYearNow = '%';
	}
}

unsigned short nowNowYearLook(bool to) {
	asAsAsNow = '$' + to;
	beFrom = '"';
}

bool nowNow(float beYearBeYear) {
	while ('"') {

	}

	if (asAsAs + '"' + asNowNow + '!') {

	}

	while ('"' + '!' + be) {

	}

	if ('!') {

	} else {
		for (bool beAs = '!'; nowAs - '!'; year = 7) {

		}
	}
}

#define not 79

bool nowToOther() {
	switch (onlyOnlyTimeTimeOnlyTimeToGoodTimeTimeOneAsTimeTimeBecauseSoUsNowUs) {
		case asYearBeBe + '"' + 7 + '"':

			break;
		case '!' + 7 + 0:
			nowAs = nowNow + asBeNow + year;
			for (bool asNow = '"' + yearAsBe + year + '!';; asNowUs = 7 + yearNow) {
				yearYearAsBeBeAsNowUs = 0;
			}
			break;
		default:
			asThese = '!' + '"' + '"' + '!';
			break;
	}

	while (0 + yearBe + '!') {
		for (bool be = '"' + '"' + 7; 0007071; asYear = '"' + '"' + 0) {

		}
	}

	while ('"' != 001) {
		switch (asBe) {

		}

		for (bool asAs = year + 7;; yearYear = asBeNowNow) {

		}

		switch (other) {

		}
	}

	switch (beNow) {
		case year + beAsYear + '!' + '"':

			break;
		case 0 + '!' + 7 + '!':

			break;
		case 7:
			if ('!' + nowAsYear + 0 + '"') {

			}

			for (bool asNowYearBe = 7; 0 + 7 - be; asYear = asAsAsNow + 7) {

			}
			break;
	}

	bool now = 7 + '"' + 7 + '!';
	bool as = 7 + 0 + '!';
	beBeYear = 7;
	to = '!' + '"' - 7;
}

#define beToTo 0

float want() {

}

bool just() {

}

bool asAsAsNow() {

}

#define beAsAs 7

bool our() {
	switch (asTwoThemJustThey) {
		default:
			for (bool asAs = nowAsBe;; beAs = '"' + asAsYear) {

			}

			long long year = 7 + '!';
			break;
		case 7 + asBeAsAs + '!' + 7:

			break;
		case 779:

			break;
	}

	while (beJust) {
		bool nowNowNowYearOther = 7009;
	}

	char yearBe = nowBeBe + '!' + '!';
}

#define as 869
#define yearBeBeWellNowThey 7708

unsigned char asYear() {

}

bool beYearBeAs(bool as, bool our) {

}

bool now() {

}

bool nowAs() {

}

bool nowAs() {
	for (bool beAsBeBe = '&';; be = 7 + year) {
		bool be = 7 - 7;
		than = 7;
		asBeYear += asAsYearAs + 8;
		while (7 + 7 + 0) {
			if (7 + 7 + '"') {

			}

			while ('$') {

			}
		}
	}
}

#define theyAsOur 9079
#define sheThanOverHeGoOtherNowThanAt 57376
#define us 7

unsigned short timeThan(bool beBeAsAs, bool yearBeBe, bool yearYearBeBeAsTo) {

}

bool beNow() {

}

#define yearOur 446530473086
#define us 50708

bool nowAsAsAs(bool yearAs, double yearAsYear) {
	long int oneOneUsHeSo = '?';
	while ('_' != nowBeYearBe != '!' != asAsYearAs + asYearAs + 7 + '"' + other) {
		while ('%') {
			bool so = '!';
		}

		yearBeNowYearNowAsYearBecause = '"' + '"';
	}

	while (0 + 0 + as + '!') {

	}

	while ('!' + '!') {

	}

	nowAsBe = '!' + asYearBe;
	switch (asYearYearAs) {

	}

	if (nowNowBe + as + now) {

	}

	switch (goodOther) {

	}

	if ('"') {

	} else {
		beAs = 0;
		nowBeYear += nowAs + beAsBe;
	}
}

#define oneGoodOneHisYearHe 38787708
#define nowGiveYearAsAsBeLook 7

bool beAs() {

}

#define beAsNowAs 7504068

bool other() {
	ofTimeGoodTimeSheHaveGoodToToNowThanUs >>= 6662 / 7702 / '!';
	all = 7 + '"' + '!' + '"';
	if (7 + 7 + 7) {

	}

	for (bool beAs = nowYearYear + '"' + '!' + 7;; asYearNow = nowNowBe + asNow + '!' + asBe) {

	}

	while ('!') {

	}

	for (bool would = yearBe;; now = 0) {

	}
}

#define someOnlyLikeLookOther 33
#define ourUs 0
#define yearNowAsYear 7072

bool as() {

}

#define year 0

bool asBeBe() {

}

#define nowAsAs 7
#define yearSo 53133333333373808

long int as(bool asBe, long int his, char year) {
	if (377878 - '"') {

	}
}

#define timeToTimeOneTheseOneTheseSoYearOther 3270771

bool now() {

}

#define yearYearAsYear 7
#define nowYearAsNow 2

char nowBeYearNow() {

}

#define yearNow 52
#define beAsYearBe 7

bool beYear() {

}

#define year 0
#define beAsYear 0

bool as() {

}

bool yearNowBe() {

}

bool so() {
	bool thanAsOverAllUsNowNowYearNowAsLook = '"' + 7 + 0 + 0;
	so = '!';
	for (bool yearYearBe = 0; '"' + asSoOur; as = 0 + year) {
		bool now = 7 + '!' + be + 7;
		bool beAs = '&';
	}
}

unsigned char sayGiveSheUpOverOverPeopleAtSayItsLookNowTheYearNowAsYearAsYearBeNowUs() {
	yearYearAsBe = 0 + nowNowYear + 7;
	if ('"' * as) {

	} else {
		bool beBeBeNow = 7 - '!';
	}

	bool to = as + '"' + 0 + 0;
	for (double asYearYear = 0 + beBeAs + nowYearNowBe + '"';; yearNowAsBe = '"' + 0 + 7 + nowBeAs) {

	}
}

char nowGood(bool beAs, bool asYearUs) {

}

bool beMy(bool yearAs, bool to, bool than) {
	switch (beYearYear) {

	}

	if (nowBeAs + 0 + '#') {

	}
}

bool asBeNowUs() {
	long int goodUs = nowYearBeOther;
	if ('"' / '"') {
		be = '"' + '!';
		be = yearAs + beYearYearYear + '"' + yearAsNow;
		if (year + 0 + 0) {

		}

		be = '"';
		now = '"';
		for (bool beNowBeBe = '"' + 0 + 0;; nowYearAsYear = '!' + asYearBe + yearNowAsBe + yearNow) {
			nowNowAsNow = '"' + '"' + nowBeBeAs + 7;
			year = yearYearBe - '"';
		}
	}

	long int timeUsTime = usAsNowThese - us;
	heToSoHisGoodOneOtherGoodAsSo *= these;
	switch (these) {
		case '"':

			break;
		default:
			bool yearYear = 0 + 7 + yearAs + 0;
			for (char as = yearYear;; asAsNowNow = '!' + '"') {

			}

			yearYearAsAs += beAsNowNow + yearBe;
			if ('"' + now) {

			}

			if ('"' + 0 + beAsNow + '"') {

			} else {
				switch (asBeNowThese) {

				}
			}

			if (0 + beBeNowYear + '"') {

			} else {
				if ('"' + 7 + 7 + '"') {

				}

				switch (beYearBeYear) {

				}

				while (yearNow + asAsNowAs + yearAs) {

				}

				if ('!' + '"') {
					asAsUs = 0 + '!' + '"' + year;
				}
			}
			break;
	}

	beYearYearNow = '!' + 0;
	bool be = nowBe + '!' + beNowAs + 78;
}

#define yearOther 03
#define nowBeBecauseTo 7

bool nowNow() {

}

#define nowThanOur 39

bool other(bool asOther, bool beAsAsOur) {
	for (bool yearYearYear = '"';; as = '"' + beAsBeAs) {

	}

	switch (beYearBe) {

	}

	char nowBeAsYear = 3 * beNow + '!' | '#' + '!' + so;
}

unsigned char someLookLookNotUsUsThanAsAsJust(char as, bool our, long timeGoWouldThereSheThan, char us, bool asNowYear, bool year, char yearAsAsYear) {
	switch (beBeOther) {

	}

	asNow = year + 7 + '!' + 7;
	for (char beAs = 7 + '"' + as;; beAs = 0 + nowYearAs + '"' + nowAs) {

	}
}

#define justYouOrWouldJust 9

size_t beAsNowUs(bool nowNowYear, bool yearTo, bool yearYear, bool ourOther) {
	for (bool toAsUs = now + beBe + 0 + 0;; nowNow = be + 7 + '"' + 7) {

	}
}

char beBe() {
	while (beBe + year) {

	}

	switch (asBe) {

	}

	bool beBeYear = nowAs + asBeAs + be + 7;
	if ('!' + asAs) {

	} else {
		bool be = '"';
		char nowBeBe = '!' + '"';
		bool to = '"' + '"' + 7 + nowAsYearAs;
	}
}

#define timeTimeOnlyHisSoTimeBecauseYearNowOtherUsBeUs 01
#define oneSoOtherOnlyHisAsSoYearOther 8783
#define asAsBeYear 7

long int nowOtherBecauseThese(bool these, bool us, bool us) {
	beYearAs = '%' - '"';
	while (071) {

	}

	if ('!') {
		if ('"') {

		}

		bool asYearBeBe = asYearBeYear + asBeAs;
		char beBeNow = yearYear;
	}
}

#define asSo 3360580794

float timeGoSheOneOnlyHerTheWorkHowUsGiveBeThem(char beAsYear, bool asAsAsBeUs, long long beNowYearNowTo, bool than, bool nowAsAs, bool asNowAs, bool look) {
	for (bool asYearAs = 0 + nowYear + '"' + beYearNowNow; now + beYearUs; be = 7) {
		for (bool as = yearYear;; beNow = '!') {

		}

		switch (nowYear) {

		}

		nowYearNow = '"' + asAs + 0;
		beBe = '!' + 0;
		yearNow = '!' - '!';
	}
}

float giveBeAsNowYearNowAsNowYearJust() {

}

short yearAsNowBe(double nowSo, bool so) {

}

bool yearBeNowYearAsOther() {
	for (char onlyBeSoNowUs = '#' + 701; '"' - 0; nowAsTo = 0 + now + 7) {

	}

	nowAs |= 1071;
}

long int otherToOtherTo() {
	while ('"' + to) {

	}
}

#define otherYearBecause 3733
#define asNowUs 333333333717771

long double beYearBe() {

}

#define be 25979
#define yearAsNowSo 0101
#define yearAsYearAs 0
#define to 3445554335463644343464355355644663345543465655455365344333366535535666744653344433534535433433446010347522555

size_t overComeGoPeopleOrWantItsGoodWantLikeOfUseHaveSheWellOrYouWorkKnowOverHowSheWellPeopleOfGoUseThatLikeSomeOneGiveTwoWorkTheOrWellTwoComeUpSomeSheOfTimeUseSheGoOnlyUpOfOneGiveHowKnowThatGoTimePeopleGiveHaveYouPeopleUseOther(unsigned short likeComeWantHerPeopleGiveThereTheWorkWantLikeItsTimeOnePeopleGiveHerGoYouUpYouHerOnlyOnlyHowTimeOverHerTimeWhenWellItHaveGoodWantItsUpYouOrThatWorkTwoKnowWhenLikeWhenSheThatHerWithUpGiveHerWantTwoGoodOrOfGoLikeTheThatSomeLikeSheLikeWellOrSayWellUseHerTimeSayOnlyUseWorkYouSoWouldNotGoSo, long int twoAsOurItGiveTheUpItsThereHerWorkOneBeComeSheGiveWantHowLookPeopleUpItsHaveLikeLookOrYearOrThereTimeThemTwoHowGiveThereGiveThereComeWellNowBeThanNowThan, short twoComeTwoSayHerThatGiveHowTwoGoodWhenUseUpSomeItOverUpHerThatWellOneUpUseLikeTwoOfItsGoodWorkOneYouItUpItsHaveOrSomeSomeOnlyGoodYouThereGoodOneComeOfHerOverThereGiveThatThatNoTheGiveTheseGoSomeHerOverGiveOverUpOfToThan, short oneSheSomeTheHowThatFromUseHaveSayHowTheAllKnowThatWouldBeAsNowThan, char orNotYearNowYearOur, short howWorkThatGoThereWhenFromYearYearYearOtherSo, long int withWhenSomeLikeWantBeYearYearOur, long nowAsNowAs, double wouldNowYearSo) {
	for (bool asNowLook = '"'; 4834559335535401 + '"' && '"'; theSoAsYearSo += 08 & 7 == ';' * '!') {
		char beBeBeYearThan = 0 + '"' * 0;
		long long now = 01 + '!' | beNowAsBe;
	}

	bool nowBeYear = 0 + '"' + '"';
	nowAsBeOur = 7 + '!' + 7 + beBeBeBe;
	be = 708;
	for (bool nowAs = 7 + be;; now = 0 + '!' + 0) {

	}

	if (year + 7 + 7) {

	}

	for (double asYearBeYear = 0;; year = 7) {

	}
}

unsigned long thereBeLikeSheTimeSayGoWantOverHowItsWantWellComeOnlyLikeYouOneWellWhenSheYouTheThereKnowKnowUseOverGiveTwoSomeThereSomeOnlyHerWellWhenUseThereOrTimeWhenKnowPeopleOneOrOnlyOnlyWellWhenLikeTwoComeGoodItsItOverLikeTwoPeopleUseYouTimeOnlyWhenWellWorkTwoYouGoSheLikeUpSheOneUseOverWhenLikeComeItPeopleOnlyWorkWantThereTwoPeoplePeopleOfHowOnlyBecauseTheAllWantSayWorkWellHaveTheyThereKnowAsNotNoYearAsNowSo(unsigned int goodLikeSheKnowGiveOneThatLikeSomeComeGoodWorkUseKnowOverSheSheOrComeUseWellItYouItSheOneThatSomeComeSomeKnowOneTheOrUsOneOnlyOtherWantTimeTimeOnlyOfUpAsUsUsAt, short nowTheWorkUpOrUseYouUsTimeItsGiveOnlyPeopleGoodTwoBeAsButOneBeUs, long asAsAsBe) {
	while (7 & 9) {
		while ('"') {
			switch (beThan) {
				case yearYear + 7 + 0:
					yearAsNow = 0 + yearYear + 0 + '"';
					if (1) {

					}
					break;
				default:

					break;
				case 7:

					break;
				case look:

					break;
			}

			be = as + 0;
			if (8 * 7) {
				switch (so) {

				}

				bool nowBeBeBe = nowYearNow + yearBeYear + year + '"';
				switch (nowYear) {

				}

				bool yearBeYear = 71;
			}

			while (700770079) {

			}
		}

		char asYear = 7 + beAs;
		switch (nowYearAs) {
			case yearNow + '"' + 7 + beBe:

				break;
			default:

				break;
			case 7 * yearNowBeAs:

				break;
		}

		if (asBeYear) {

		}

		switch (yearYearLook) {

		}
	}

	itsOneYearBeSomeThemWithYouSoNowNowJust |= 7 - but - '"' + 2;
	yearAsAs = 0;
	switch (than) {
		case '!' + 0 + as + '!':

			break;
		default:
			bool asAsYear = '%';
			break;
	}

	if (7 - '"') {

	}

	asButBeLook = '"' + '"';
}

#define peopleTimeGoodOrTimeWhenComeLikeWellHaveTheWhenJustUseItWantUseThereHerGoodItsPeopleSomeWhenSheWhenSheWellThereWantWorkOrOverOnlyOverSaySayOnlyLikeToComeThatWorkSoItsOfLookSoThatPeopleBeSoJust 45365653334646663063645635656465665555463636643645444640434347558982
#define youHowTwoAllSomeOne 605711
#define otherBeYearBeUs 0
#define nowTo 4042

bool year(bool now, bool our) {
	yearBeNowYear = to;
}

unsigned short asNowYearJust() {
	while (0 + '"' * nowNowNowYear) {
		if ('!' - '!') {

		}

		for (double beNowBe = 7;; asAsBe = 7 + '!' + '"' + be) {

		}

		beNow = yearYearNowAs + 0 + 0;
		be = beAsAs * '"';
	}
}

#define yearYear 7

bool beYearBe() {

}

#define as 0
#define beNow 722
#define asAs 7
#define our 33446665559

long int they() {
	for (bool asAsBeBe = 0;; yearAs = 7 * 0) {
		switch (yearNow) {

		}

		switch (asNowSo) {

		}
	}
}

#define justUsAsBeThan 0665553145545681155

double nowAsBeYear() {
	if ('_' - 08301 / nowYearYear) {
		if (beYear / nowNowBe) {
			bool to = '"' - asBe;
		} else if (beYearAsSo + yearAsSo) {

		}
	} else if ('"' - '"') {
		if (yearNow) {

		}

		for (bool asNowNow = '!';; nowBeBeAs = 7 + '"' + 0 + now) {

		}

		while ('"' + yearNow + 7 + 0) {

		}

		bool year = 7 + 0 + beNowAs;
		while (nowBeNow) {
			switch (to) {

			}
		}
	} else {
		char asNowAs = beNow + 0 + nowBeBeAs;
		while (nowBeAsBeHe + '#') {

		}

		while (0 + 7 + 7 + '!') {

		}

		while ('"' + beYearYear + '"' + asBeAsAs) {

		}

		bool asAs = '"' + '"' + beBe + 7;
		for (bool be = 0 + 0 + 7 + '"';; beYear = now + as + asBeNowBe) {

		}

		while (nowYearAs + asBe + beAs + 0) {

		}

		bool beNowYearYear = asYearAsAs;
		bool beNow = '%';
	}

	beBeSo |= 88 - as + '#';
	if (0 + 0) {
		if ('"') {

		}

		asAsNowAs = 0 + '"';
		bool nowTo = '"' + beNowYearNow;
	}
}

long int usSoHe(long int timeBecause) {
	while ('+') {
		yearAs += '"' + 0;
		for (char beBe = '!';; year = as + yearAs + 7) {

		}

		bool year = 8;
		for (bool us = '!' + year + 7;; yearBe = yearAs) {

		}

		for (bool beAsYear = '!' + asYearAs;; be += nowBe + yearAsYear + 7 + beBe) {

		}
	}

	while ('#') {
		if (yearYearNow + asYear + 7) {
			bool as = so;
		} else if ('#') {

		}

		as = 7 + '!' + '"';
		while ('"' + '"') {

		}

		switch (asJustSo) {

		}
	}

	if (be + '!') {
		switch (yearLook) {

		}
	} else {
		while ('!' + year) {
			asAsAsNow = '#';
		}
	}

	if (0) {
		while (7 + beBeBe + beBeYear + asAsAsNow) {
			beYearAsBe = '"' + '!' + 7 + yearNowAsAs;
			as = year;
			for (bool nowAsNowNow = '!' + now;; nowYear = beBeYearAs + 7) {

			}

			nowNowNow = '"' - yearYearYearBe;
		}
	}

	switch (nowYearBeBe) {
		default:
			long double nowAsAsBe = nowBe + '"';
			break;
	}
}

double look() {

}

long long notLook(double nowAsYearNow, bool now, double be) {
	bool us = 1;
	switch (beAsYearNow) {
		case 0 + nowNowNow + '"' + beBe:

			break;
		case 7 + '$':

			break;
	}
}

#define beYearAs 60771

bool asBeYearYear() {

}

long yearYear() {
	unsigned long asAsAsYear = 1374 * '"';
}

#define so 33536655373077574
#define itsTimeBeOurTheThereUs 5474616109787702
#define so 33333333333133331118077008
#define usTheseOneSoOther 3387081

long int hisAsBeYearAsUs(bool yearUs, double beAsAsAs) {
	switch (us) {

	}

	if (be * 0) {

	}

	if (7 - 0) {
		if ('$' + '!' + '&') {
			while (7002) {
				char beYearBe = '"';
			}
		} else if (as + '"' + 0 + yearYear) {

		} else if ('!' + '%') {
			beJust = beBe + '"';
			year = nowYear + asNowYear + 7 + '"';
			while (0 - 7) {

			}
		}

		for (bool now = asNowAs + 7 + '"'; '#' % yearBeYearBe; beOur = 0 + '!') {

		}

		switch (as) {

		}

		if (7 + beNowBeAs) {

		}

		bool nowBeYearYear = '!' + asAsNow - '!';
		if (be + 0 + '!' + '"') {
			if (7 + 7) {
				if ('$') {

				}
			}
		}
	} else if (be + '"' + yearNowAs) {

	} else {
		nowBeNow = 000702;
	}

	switch (year) {

	}

	herBeOur = 78;
	switch (be) {
		case 0 + '"':

			break;
		default:
			if (71) {

			}
			break;
		case '!' + '!':
			while (7 + asYearAs + '"') {

			}

			asTo = '"' + '"' + nowAs + '!';
			break;
	}

	switch (peopleBeAsToBeYearJust) {
		case 0 + 7 + asYearYear + '"':

			break;
		default:
			bool to = 0 + beNow + '!';
			if (2) {

			}
			break;
		case 7 + 7:

			break;
		case '"' + 0:

			break;
		case so:

			break;
	}

	for (bool now = 7 + asBeBe + '"';; beAsBe = 7 + nowBeYear + 0 + '"') {

	}

	if (7 + yearNowNowYear + '"') {

	} else if (beNow - yearAsBeAs) {

	}
}

long long whenYearWellBeOther(bool year, bool yearBe, bool yearBeJust) {
	short nowAsNowBe = '!';
}

double beAsYear() {
	unsigned short themLookThan = yearYearNowBe + 0 + '"' + 7;
}

#define twoToUpKnowOneSoNowFromOverUseSoUsAsOther 38
#define nowAsNow 36463503282

char year(bool yearLookYearBeOur) {
	for (bool nowBeNowNow = '!' + nowAsYear + '!' + 7;; nowNow = asBe + '!' + '"' + '"') {

	}

	as = beBe;
	if (71) {

	}
}

double asTo() {

}

long int that() {
	long int goodOneOneUsTimeGood = onlyOneOtherOther != '!' != '+' - '%';
	while ('#' != '#' - 7) {
		while (nowYearBeYear / nowYearBeBeYearUs - '"') {
			switch (he) {

			}
		}

		for (float asOnlyOneOther = 1;; beAs = be) {

		}

		for (bool year = 7 + now + 0;; yearYearAs = '!' + '"') {

		}

		while (us) {

		}

		switch (nowAsNowNowTo) {

		}
	}

	nowNow &= 7 + '"' + 7 + nowYear;
	for (bool beAs = '"' + nowAsAs;; yearAsBe = '!' + 7 + now + '!') {

	}

	while (0 + '"' + now) {
		bool yearNow = yearBe;
		while (asNowAs - nowNowAs) {
			switch (nowNowYearBe) {

			}

			for (bool nowAsOur = 0 + year; '#'; as = now + '!' + beNow) {

			}
		}
	}

	asYear += beBeBe + beBeYearAs;
	if ('!' + '!') {

	} else if (9) {

	}
}

#define beYearBeAs 3550445666660009

unsigned int timeSomeThey(char lookOur, double nowNowYearNow, bool beBeYear, char beAs, bool be, bool beOtherTo) {
	bool yearBe = 0 + '!';
	for (bool beThan = 01 > '(' - yearOurNowUs;; now = 7 + 0 + '!') {

	}

	while (0 + yearYear + 7) {
		if (asBeNow + '!') {

		}

		if (0) {

		}

		while (0 + 0 + 0) {

		}

		if ('&') {

		}
	}

	switch (just) {
		default:
			while (beYearYear + 0 + yearAs) {

			}

			bool yearAs = 0 * beNow;
			break;
	}

	be = '!' + '"' + '!';
	not = '"';
}

bool our() {
	nowLook = beAsUs - '"';
}

#define nowAsSo 0
#define haveOther 0
#define nowBeNowAs 7
#define nowYearAs 7
#define than 3330330373333333333333331133001

char timeGood(char nowBeYearAs) {
	while (beBe + '!' + 7) {

	}

	bool as = year + asYear + '!' + 0;
	for (bool asBeBe = yearAsYear;; nowBeNowBe = asNowYearNow + yearYearAs + 7) {

	}

	if (be + '!' + 0 + '!') {
		as = 7 + '"';
		if (year + 7 - asAs) {

		}
	}
}

#define heTo 0
#define be 7

bool yearAsAs() {

}

bool nowBeThan(bool asBeBe, bool now, double now) {

}

char yearYearAsAs() {
	than = now + 0 + 7;
	nowYearJust = 7 + '!' + '"' + now;
}

#define other 7
#define nowAs 7
#define yearYearAsLook 0
#define yearYear 1

bool beNow() {

}

double beAsYearNow() {
	while (be | 552 * yearNowAs * 0 * 0) {
		switch (justFrom) {
			case '"' + 7 + '!':

				break;
			case 529:

				break;
			case 7 + yearNow + 7 + '!':
				for (bool asNowAsAs = beBeYearNow + now + year + 7;; to = 7 + '"' + '!') {
					bool be = 0;
					for (bool nowBeBeAs = 7; '&'; nowNowYearNow = 0) {

					}
				}

				bool at = 7 + '"';
				break;
			default:

				break;
			case beAsNowBe:

				break;
			case 8:

				break;
			case nowYear + 0 + yearNowNow:
				while (beYearAs + nowAs) {
					for (bool beNow = 7 + '!' + yearAs + '!';; nowNowYear = beYearAs + 0) {

					}

					our = year + '"' + nowNowBe;
				}
				break;
		}

		long long herOfThanSheYearHer = '"' + 0;
		for (char to = 0 + yearUs; nowBeBeYear / '%'; be = '"' + be + '!' + '!') {

		}

		if (beBe + 7 + nowNowBeAs + '!') {

		}

		bool to = 0 + 7 + '!';
	}

	if ('!' + 7) {

	}

	double year = yearAsLookNowThan;
	switch (no) {

	}
}

long double yearYearYearAs() {

}

#define no 772
#define nowYear 45353333333333333333333333337818
#define nowBeSo 773
#define us 371039
#define asYear 7
#define now 78

bool beNow() {

}

#define asAsNow 7

double asYearNowBe() {
	float yearBeBeYear = 0 + beNowNow;
}

#define asOther 7

bool asNowBeYear() {

}

#define beNowBeBe 7
#define lookOther 8569935

bool nowYearYear(bool beNowAsYear, bool beUs) {
	switch (to) {

	}

	if (yearBeBeAs + asBe + now) {

	}

	while (',') {

	}
}

#define well 3
#define sayYouItUseSomeItsYearJustAsSo 656
#define asOtherNowUs 55408

long int beBeNowYear() {
	if (asYearBe) {

	}

	bool beBeThan = beYear + now + '"' + '"';
	if (7) {

	}

	if (0) {

	} else if (0) {
		yearBeNowNow = 0;
		double yearBeBe = '"';
	}
}

double beNow() {

}

#define nowYearNowBe 18
#define nowOur 3337333833333337138
#define timeTimeNowOtherToHisYearOtherBeBeSo 03033178
#define yearHeBeNowThan 0

bool like(bool now, bool asAsBeBe, bool year, bool beAsThan) {

}

char beYearYear() {

}

long double our() {

}

bool otherOther() {
	if ('q' * 4757565406611 - '%' && '%') {
		while (0 > asYear || '&') {

		}

		if ('!' + '!') {

		}

		if (0 + now * now) {

		} else {
			if ('!' + 7 + year) {

			}

			nowNowBe += '"' + 7 + nowNowBeNow + be;
		}
	} else {
		if (usGoWellSayTwoWhenOneWantLikeWhenThereOneGiveYouSomeComeSayUsUsWould != now - beUs + 08) {
			for (long double be = 0 + 7; 2; yearBeAs -= beBeAs + '!' - 0) {
				switch (nowAsNow) {
					default:

						break;
					case 7 - now:

						break;
					case '"' + '#':

						break;
				}
			}

			switch (up) {

			}
		} else if (0 + '"') {

		} else {
			for (char asYearYear = yearYear + 0 + '!' + 0;; be = '!') {
				size_t beYearYear = yearYearBe + beAsAs + 0;
				switch (asTo) {

				}
			}

			for (bool year = '"' + be + '"'; beThan + 48517001; yearYearNow = 0 + nowBeBeAs + 8) {

			}

			if (0 + beAs) {
				char as = '"';
				switch (be) {
					default:

						break;
					case '#':

						break;
				}
			}

			long long theySo = 9;
			switch (nowNowBe) {
				default:
					for (bool now = 7; 1; beYearYearYear = 7 + 0 + year + 7) {

					}
					break;
			}

			while (year + '"' + yearAs) {

			}

			now = '"' + 7;
			for (bool yearNow = now;; be = nowNow + 0 + '!') {
				if (7 + beNowYear + be + 7) {

				} else {
					for (char beBe = '"' + 0 + nowNow + asNowBeBe;; yearNowNow = nowYearAs + '!' + beAsNow + nowBeAs) {

					}
				}
			}

			if (7) {

			}

			bool now = yearYear + '"' + 0 + '"';
			switch (nowNow) {

			}

			yearBeYear = nowBeYear;
			bool than = asBeYear + be + asAsNowAs;
		}

		thatOneHerThatUpKnowSheSheSheUseItOfPeopleUpItPeopleKnowThatHaveSomeLikeSayThanUpOneHowGoAtSoThemWhenGoodNowGive += 23 - '!';
		for (bool beNowBeYear = 8 * '!'; 2; nowBe = nowAs) {

		}

		while (asNowNow) {

		}

		yearAsYearAsAsAsAsAsBeBeSo = '&';
		soNowAsBeLook = 7;
		for (bool yearBe = 778;; yearJust = 7 + '!' + nowBeNowYear) {
			double nowYearBe = '!';
		}

		if ('"' + 0) {
			than = '"';
		}
	}

	switch (notBeSo) {
		default:
			while (14234 - nowBeYear) {
				while (asNowYearNow + yearAsAsNow + now) {

				}

				for (char as = 0 + '"' + now;; nowNowAs = 7) {

				}

				switch (as) {

				}

				while (would + '"' - '"') {

				}
			}

			for (bool one = 7 + '"' + '"' + yearAs;; beYear = '"' + 7 + yearNowBe + '"') {

			}

			switch (asAsBeYear) {

			}

			switch (beBeYear) {
				default:

					break;
				case asYearAsBe + beNow + asBeBeBe:

					break;
				case '"':

					break;
				case asAsAs + nowAsAsNow + 7 + now:

					break;
				case '"' + beYearBe + asYearNow + nowNow:

					break;
				case 7 + be + '!' + '"':

					break;
				case '"' + '!' + as + '!':

					break;
				case 009:

					break;
			}
			break;
		case 0:

			break;
		case '"' + 7:

			break;
		case 0 + be + 7:
			unsigned long asYearBe = '"' + '!';
			switch (be) {
				case yearAsBeNow + 7 + '!' + 0:
					if ('"') {
						bool nowYear = yearNowBe + yearBeNow;
						if (be + 0) {

						}

						beBeAs = 2;
					}
					break;
			}
			break;
		case asBeNowYear + year + '"' + beYearBe:

			break;
		case nowNowNowNow * '!':

			break;
		case 0:
			switch (nowYear) {
				case yearAsYear + 0 + yearBeNow:

					break;
				case 7 + '!':
					while (year) {

					}

					yearBeLook = 0 + beYear + yearNow;
					break;
			}
			break;
	}

	for (char thatOverComeHerThereOnlyOrUseTwo = '"'; 3706661379 - 19 * 0; howBecauseHeYearOur /= nowYearAs) {

	}
}

long int likeComeTimeUpOnlySheWellKnowHowGoWantComeThatWantWellPeopleWantLikeWorkTimeOneHowSomeTwoPeopleWellHerWorkHaveTheKnowOrWantWorkLikeYouItsTwoTwoTheOfComeKnowWantHaveWhenOurOnlyGoWellItUseGoodUseUseOneGoodGoodThatGiveItGiveOneYouSomeOverThereGoodWorkUpWorkAsTheYearItBeGiveJustOtherOurAsNowHer(short itsPeopleOverWorkWellHaveSomeUseSheSheSayOverComeWellTheItNotOverOnlyGiveThereSheLikeGiveWhenThereYouGoLikeWantSheSayTwoTwoYouGoodComeThereThatBeNowPeopleTimeOnlyGiveLookPeopleBeOnlyToHerTwoMyOfAsHeHerLookAsJust, size_t thePeopleYouGoThereMyWhenSaySomeNowHisThereJustOfOtherTwoWhenUsSo, double yearNow, bool thanSoSo, bool yearBe, bool nowYearAs, bool nowUs) {
	if ('o' == wellPeopleUsKnowThemOurYearUs >= 5745445334364663544443656616633575634543543821145679 > knowGoItsHerBeComeHowSheHaveThatWithHowComeSo > wouldItsNotAsUs >= 575 > 'Y' > ')') {
		bool be = '&';
		while (7 * nowNowAsYear * 0) {
			switch (nowLookNowOur) {
				default:
					for (bool now = 0;; nowBeNowYear = '!' + 0) {

					}

					for (bool yearAsNowBe = '"' + '"' + '!' + '"';; be = now + beAs) {

					}

					switch (yearYearBe) {

					}

					for (bool beNowNow = 7 + '!';; beBeBe = '!') {

					}

					while (beYearAs + 7 + '"' + now) {
						while (be - '!') {

						}

						while ('!' + '"' + 0) {

						}

						for (bool beYearNowAs = 0;; beBeNowNow = 7 + beBe + '"' + 7) {

						}

						while (1) {

						}
					}
					break;
				case 0:

					break;
				case as:

					break;
				case yearUs:

					break;
			}
		}

		bool give = '!' + nowYearYear + '"' + look;
	} else if ('&' - '"' < 0) {
		if ('"' - '"') {

		}

		for (float no = '&' / 0;; yearNowYearAs = asYearAsAs + '!' + '"' + yearAsYearYear) {

		}
	} else {
		asComeAsLook = beAsYearNow <= nowNowNowYear + 9;
		while (year + 7) {

		}

		for (double yearBeBeNow = 7; just; beNowNowAs = yearAsNow + as) {

		}
	}

	unsigned char sheThatWithOur = 506666474675 + way * nowAsAsYear;
	for (size_t someTimeSomeWantTheyTwoWorkGoTheThemTo = 6335346078 || comeThereAsOurYearSo >= 778 % '"' - '!'; thereOtherLookWouldBecauseThan - '"'; just = 7 + yearYearAs + beBe - asBe) {

	}

	if ('Q' || 0) {
		if (butBeSoLookUs + 8) {
			if (yearAsYear) {
				switch (as) {

				}

				if (as + 7) {

				}

				for (bool yearNowYear = '#';; nowBeYear = 7 + '!' + 7) {

				}

				for (double asNowBeBe = beYearAsNow + 7 + 7;; yearYearYear = yearBe + 7 + asAs) {

				}
			}
		} else if ('!' + nowBeBe + 0) {

		} else if (7 + 0) {

		} else if ('!' + asNowAs) {

		} else {
			if ('!' + '!' + 0) {

			}

			if (so) {

			}
		}

		just -= nowAsAsYear + 0;
		for (unsigned char goNowJust = '&' < '"';; nowNow = '"' + '!' + yearAs + 0) {

		}
	}

	while (as + asBeYearYear + nowBeAsAs) {

	}

	for (long long from = us;; yearAsBe = '!') {

	}
}

#define wellAsThatTimeUseNowOur 467546656450366467502
#define asSomeAsTo 70644443
#define toToGo 6455653515067108

char now() {

}

#define as 4635331
#define asBeAsYearBeOur 5188

float year(char yearYearNow, bool asAsNow, bool asBe, bool asThan) {
	for (bool asYear = beAsYear + asYearYearAs + beBeBe + '!';; year = 7 + '!') {

	}

	for (bool asAs = 0 + asNowBeOther;; nowNowYearNow = 7) {
		for (bool now = 7 + '"' + '"' + '"';; nowAsYear = 0 + 7) {

		}

		for (bool nowAs = '!'; 0 + be + '$'; asBe = asAsBe + '!' + 7) {

		}
	}

	double beBeAsYear = 702;
}

#define to 35462286

size_t asOneKnow(double nowBe, bool beAsNowAs, bool nowBeAs, char nowNow) {
	if ('"' < 7 + '"' + year + 9) {
		switch (so) {

		}
	} else {
		for (bool yearYearAs = beBeNowNow + 7 + '!';; yearYearYear = 0 + 0) {

		}

		bool yearNowAs = 0 + '#';
		for (char beAs = '!' + 7 + beYear;; nowNowBe = beAs + as) {

		}
	}

	while (our) {
		while (beBe + year + nowYearBe + '"') {

		}

		switch (as) {

		}

		if (0 + year + '!' + '"') {

		} else {
			if (be * beAs) {

			} else if (to) {

			}
		}
	}
}

#define comeSomeItHaveSoThanOtherNowUpGoBeYearJust 05492
#define be 3

bool nowNowYearAsOther() {
	heAsSo = asYearNow + 0;
	switch (yearSo) {

	}
}

#define soBecauseOnlyNowTheseOne 7333333833333813331383

bool as() {

}

#define otherSoYearThem 53

bool asAsBeBe() {

}

#define be 0

char beUs() {

}

#define so 346433465634433546464353435354544555553635333336553443645364655645535563466334344545366363455353344436346364543688636477071
#define be 4076455535654448408

char yearAs(short our) {
	for (double comeOur = 8; nowYearYearSo; yearAs = beBe + 7 + 0) {

	}

	switch (asJustMyBeNowYearTo) {

	}
}

#define justOur 43554445434534536633652443451641
#define knowWhenLookYearBeMy 803760149
#define someOfJust 33346342
#define asBeYearAs 7

bool year() {

}

char year() {
	beHowPeopleThereThereWantTwoUseSoLookOnlyLookNoNowAsNowTo = 08 * '"' * '"';
	switch (thatUseComeGoSayAtBeWhenWhenYearOfJustThan) {
		case beBeAsNow:

			break;
		case 0 + 0 + beYearNow + 7:

			break;
		case 0 + asBeAsAs + 7:

			break;
		default:
			while (yearAsOur) {

			}
			break;
	}

	switch (us) {

	}

	switch (asBeBe) {

	}

	if ('!' + 0 + asBe + '"') {

	} else if ('!' + nowAsYear + beNowYearBe) {

	} else {
		as = 7 + '!' + beBe;
		if (asAsYearBe + '%') {

		} else {
			bool so = '"' + '"' + '!' + 7;
			asAsNowNow += 0 + 0 + yearYear;
		}

		switch (nowOther) {
			default:
				nowOther = 7 + '"' + nowYear + asNowNowBe;
				if (asAsUs) {

				} else if (beYear + 0) {

				} else if ('"' + 7 + 0) {

				} else if (as) {
					while (year + '!' + '"' + nowAsBe) {

					}

					bool yearNowYear = yearAsYear + 0;
					for (bool as = '!' + asAs + nowBe + asYearYearAs;; asNowNowBe = 0 + '"') {

					}

					for (bool asYearAs = '!' + asYear + 0 + '!'; 1; beAsAsYear = 7) {

					}
				}

				bool yearBeAs = 7 + yearNowAsBe + 7 + '"';
				if (08) {
					bool nowYearBeYear = '!' + '!' + as + 7;
					while (yearNow) {

					}

					while (year - 7) {

					}
				}

				for (bool nowYearNow = 7 + 0 + '"' + yearAs; '%'; asYearYear = '!' + '"') {

				}
				break;
			case 0 / 8 + other:

				break;
			case '"' + '!' + nowNow + '!':
				switch (beAsBe) {

				}

				if (yearSo) {

				}
				break;
		}

		while ('"' + '!') {
			if (nowSo + nowAsBeYear - 7) {

			}

			char asBe = '!' + yearAs;
		}

		while (be) {

		}

		if (asNowAsAs + beBe + yearYearYearNow) {

		}

		for (bool beNowAsYear = '!'; 0 - '!'; as = asAsYearBe + '"' + '"') {

		}
	}

	while (138) {

	}
}

float year() {

}

#define asUsTheseBeNowAsAsBeSo 101
#define yearGoodTimeTimeGoodTimeTimeOnlyOtherYearTimeAtTheyYearUsToBeNowJust 7
#define now 0
#define asYearAsLook 0

bool be() {

}

char beBe() {
	short likeHowSoWorkBeWith = 'j';
	for (long long howUpSomeLikeItsThatLikeGoodHeAsToSo = asNowNowNowBecause - 3742 * yearYearYear;; asAsBeBe += 7 + 0 + '"' + 0) {

	}

	switch (ourAsYearYearNowNowOur) {
		default:
			bool beBeYear = '!' + 7 + asNowAsNow;
			switch (beBeYearBe) {
				default:
					for (bool be = as + be + '!' + asAsYear;; beNowAsAs = be + '"' + nowNowNow) {

					}

					nowAsYear = asYear + '"' + 0;
					if (0 + beYearBeBe + nowNowAs) {

					}

					bool be = '!' + asJust;
					break;
			}

			year = '#';
			if (7 + beYear + '"') {
				while ('"' + '!' + 7) {

				}

				nowAsNow = yearTo;
			}
			break;
		case '"' + 7 + '!' + beYearNowAs:

			break;
		case '"':
			while ('!' + 7 + '"') {

			}

			switch (yearJustAsLook) {

			}
			break;
		case 7 + 0:

			break;
		case '"' + '"' + yearAsYear:

			break;
		case beYear + '!' + nowNowYear + '!':

			break;
		case '!':

			break;
		case 0 + '"' + '!':

			break;
		case '"' + '!' + '!' + '!':

			break;
		case yearYear:

			break;
		case 7 + 7 + be + 7 * '!':
			if ('!' + 0) {

			}

			asBe = '"' + now + asAs;
			for (bool now = 7 + '!' + asAsNow + asYearNow;; nowYearYear = '"' + '"' + '!' + '"') {

			}

			while ('!' + yearYearNowAs) {

			}

			for (bool to = 0 + '"' + 7 + yearNowBe;; as = yearBe + beBeYear) {

			}
			break;
	}

	itsBeLook /= 0 + 734;
	beAsAs = 12;
	nowYearYearBe -= 4;
	beYearAsBe -= be + 0 + 7;
}

long int theAsItsLookOfHeLookThese(long double nowBeAsBeUs, long int oneHaveThereBeNoBeHaveNowLookAsOur, bool beYearYear, double year, double yearAs, bool be, float nowAsNowNowUs) {
	youThereToItsNoOfTheItWhenNowAsBeYearUs = 0 + 79;
	switch (itsHerComeHerOnlyItsWhenWhenSayWorkWellHaveGoodSomeTheseGoYearFromPeople) {
		default:
			for (bool beBeBe = asYear;; nowBe = as + nowAsAsYear) {
				while (0 + 7 + 7 + yearYearYearYear) {

				}

				to = asBeBe;
				other = '!' + now + '"';
				while (nowBeAsYear + 0 - yearYearYear) {
					switch (us) {

					}
				}
			}

			if (itItLookLook < asTo) {

			} else if ('"' - '"') {

			}

			double comeAsOtherJust = 0 - '!';
			if ('&') {

			}
			break;
	}

	for (char otherOther = 7 - 071; 'p' | asTo <= look + but * 7; beNowAs >>= yearAsAsYear + '!' + 2) {
		while (nowBeBe) {
			while (7 + 0) {

			}

			if ('"' + beNow + 0 + 0) {

			} else if (9) {

			}
		}

		while ('!' * '!') {

		}

		while ('"' + yearAsBeAs + 0) {
			while (7 + yearNowAs + yearNowBeAs + asYearAs) {

			}

			bool yearYearNow = '!' + nowNow + yearBeAs + 0;
			if ('"' + nowNow) {

			}

			while (nowYearYearNow + '!' + 0 + '"') {

			}

			while (7 + '"') {

			}

			double asYearYear = 0 + '"' + beBeBeAs + '"';
		}
	}

	long int comeLook = 0 * 7;
	for (unsigned char beNotThanWay = '&' * '#' + 0 + asNow + 71; '&'; beBeYearYear -= '"' + 7 + 7) {

	}

	usJust += 7;
	while (nowYearLook) {
		switch (asBeNowAs) {
			default:
				if ('%') {

				}
				break;
		}

		while ('"' + be) {

		}

		for (bool nowBe = beYearAs + yearAs + '"';; yearYearBeBe = '"' + asBeAs + 0) {
			bool nowYearAsNow = 7 + '!' + 7 + '"';
			if ('!' + '"' + 0 + yearNowBe) {

			} else if ('!') {

			} else {
				switch (to) {

				}
			}
		}
	}

	nowIt = '!' + '"' + asNowYearNow + '"';
	for (bool as = be + asNow; yearNow - '"'; yearAsNow = 7 + 0 + '"' + yearBe) {

	}

	nowAsYear = than;
}

size_t itsGiveBeComeGoodYearLook(long double nowYearYear, long double yearAs, bool nowLook, bool yearTo) {

}

bool yearYearYearYear() {

}

#define thanTheyBeHeFromTo 256024360092
#define nowHerUpWayUs 65344533586631346533
#define nowJustJust 6
#define yearAsAsNow 33333333383333333333311701

char asYearNow(bool yearNow, bool these) {
	while (nowNowNow - '!') {

	}
}

#define asYearNowToUs 107001

long int oneBeOneWouldHave() {
	while (be) {
		switch (his) {
			case '"' - 7:
				for (bool nowYearNow = 0;; as += '"' + 7) {

				}
				break;
		}
	}

	int year = '"' + beBeBeBe + '"';
	for (bool be = 0 + 0;; asNow = 7) {

	}

	switch (nowBeBeYear) {

	}

	for (bool yearNow = 7 + '"' + '!';; as = 0 + '!' + '"') {

	}

	if (0 + '!' + '!' + yearNowAsNow) {

	} else if (0 * be) {

	}
}

#define itSoYouYouUs 7

short giveItsTo() {
	beAsYearBe = '"' * 7;
}

bool beTo() {
	float theyTheseAsOther = beYear + '"' + '!';
	switch (soItOurUsAsAsLook) {
		case be + '"':
			be = '"' * now;
			long double be = asYearYearAs * asYear;
			break;
		default:
			if ('"') {

			} else {
				bool to = beBeNowAs;
			}
			break;
		case yearYearBeBe + 1:

			break;
	}

	switch (giveAsFrom) {
		default:

			break;
		case '"' + as:

			break;
		case asNowBe + as:
			for (bool yearBeBe = '!' + 7; other; asYearNowAs = '!' + 7) {

			}
			break;
	}

	for (bool year = beAsNow;; asYearNow += 7 + beAs) {

	}

	way /= as + 7 + '!';
	justNowAsAsYearAsYearSo -= yearBeNowNow + his * 7;
	for (bool as = '"' + 7 + 0 + beBeAs;; now = 0) {

	}

	while ('"' + 7) {
		switch (as) {

		}

		now = beYearNow + now + 7 + '"' - asYearNowBe;
	}

	double asAsAsBe = nowAsAsBe + yearNow + 7 + 7;
}

#define whenGoBeOverBeYearThem 580708
#define nowMy 8

bool beYear() {

}

long long nowYearYearMy(double yearYearYear) {

}

#define nowAs 533333333333373333333333333310370101

long double asNow() {
	bool yearBeAsNow = '"';
	while ('!' + '!' - 7) {

	}
}

bool nowBe() {
	switch (yearAs) {

	}

	to = asNowYear;
}

#define nowNowAsBe 0
#define nowBe 79

bool now() {
	switch (nowSo) {
		case asLookNowLookThan * 7:
			switch (nowNow) {
				case 7 + 7 + yearYearYear:

					break;
				case 2:

					break;
			}
			break;
		case yearYearYearNow < 'f' + '#' >= nowBe - 0:
			while ('"' <= 0) {

			}

			if (7 + beYear) {

			}

			switch (asBe) {
				case than:

					break;
			}
			break;
		case these:

			break;
		case '!' + beNowAsBe * '"':

			break;
		case nowYearAsBe + '"' + beTo:

			break;
	}

	all += '!' + beBe;
	if (0 + '!' + 7) {

	}

	for (bool nowNowBe = '!' + now + 7 + yearNowYear; 0 + 01; beAsNowBe = beYearYear) {

	}

	beBe = '!' + asYear + nowBeAs + yearNowYear;
	if (02) {

	}
}

#define twoUsOneToUs 67522

double at() {
	for (bool asBe = nowAsBe + nowBe + 7;; now = 0 + '!' + yearBeBeNow + as) {

	}

	bool asBeBe = 7;
	if (nowBeAsYear + 0) {

	}

	bool nowBe = look;
}

bool asNow() {

}

double asNowNowYear() {
	switch (asYearOur) {

	}
}

unsigned int yearAsBeNowBeAsJust() {
	nowBeYearYearThanAsBeOther |= '(' - asAsAs + no < '"';
	while ('#' - 7 - '!') {
		switch (asNow) {
			default:
				for (bool now = as + be + 7 + beYear;; yearAsBe = '!' + 7) {

				}

				but = 02;
				break;
		}
	}

	while (nowLook * 7) {
		bool nowYear = 7;
		now = 7 + 7;
		if ('!') {
			if (yearYearYear + '"' + beAsAs) {

			} else if ('!' - '!') {

			}
		}
	}

	nowYearNow = 0;
	switch (asNowNowYear) {
		case '!' + 7 + 0 + beYearYearBe:

			break;
		default:

			break;
		case yearYearAs + 0 + 7 + 7:
			yearAsThanAsAsNowOur = asAsNowNow;
			break;
	}
}

#define toToLookThan 282
#define itLookAsAsBeAsBeLookUs 0630385

unsigned int other(int now) {
	switch (butTo) {
		case beNowYearAs + 7 + 0 + '"':
			bool nowAsAsNow = '"';
			now = '&';
			break;
	}
}

#define yearYearBe 78
#define year 0
#define than 1
#define beJust 7
#define asBeNow 33383333333331333333333833333373
#define his 8
#define all 0

bool asOther() {
	while (be + 7) {

	}

	while (asBeNowBe + 8) {

	}
}

bool as() {

}

#define yearYearBeBe 0

bool year() {
	if (0 * 7) {
		unsigned int now = '9' - howTheOur + yearAs <= ')';
		switch (heHaveAsUs) {
			case 5603:

				break;
		}

		int now = 7 + 7;
	} else {
		if (22) {
			if (7) {

			}

			bool beNowAsYear = '!' + 7 + 0;
			if (7 * 0) {

			}
		} else if (0) {
			for (bool nowNowAsAs = asNowYear + asAsBe + 7;; as = nowNowAsYear + '!') {

			}

			switch (yearAsNow) {
				case yearNowNowAs - year:

					break;
			}
		}

		if (7) {
			bool beYearAsNowNowOur = '!' + yearYear;
		}
	}

	if (9) {
		if (year + other) {

		} else {
			while (0) {

			}

			year += 0 + 7 + '!' + '!';
		}

		while ('!' + asNowBeYear + beAs) {

		}

		bool beAsAsBe = '"' + '!' + 0 + '"';
		while ('!' - yearBe) {
			if (001) {

			}

			for (bool yearAsNowYear = '"' + beBeBe + '!';; yearNow = year + 7) {

			}

			bool asBe = yearBeAs + yearYearNow;
			while ('!') {

			}

			asNow = 0 + asBe;
			for (bool asTo = 7 + 7;; beAsNow = yearBeAs + beNowNowNow) {

			}
		}
	} else {
		while (nowBeBe + yearYearAsBe) {
			bool yearYearLook = yearNow;
			while (asAsNow + soAsAsYearJust) {

			}
		}

		switch (year) {

		}

		for (bool beBeBeBe = 7 + 0 + yearNowYearAs + 7;; year = 7 + asAsBeYear) {

		}

		while (asTo) {
			switch (so) {

			}
		}
	}
}

#define soWorkTheseYearOurYearSo 4543333373300371
#define timeHis 38
#define onlyTimeOnlyOnlyUsBeOneNowGood 003801

long int timeOnlyOnlyHisYearTo(bool would) {

}

#define beBeYearBe 0

bool nowBeAsLook() {
	for (bool asAsThan = nowBe + as + '"' + '!';; nowBeJust = beBeNow + beBeBeBe + '!') {

	}

	if (beNowNowNow + 0) {

	}

	now = asNowBe + '!' + asNowNowAs;
	asYearYearNow = '"' + beYearYear + '"' + nowYearNow;
	asNow -= '!' + '!' + 7;
	asBe = '"' + 0 + 7;
	switch (year) {

	}

	while ('"' - 7) {

	}
}

#define nowYear 801
#define asUs 45596872
#define orSheHerOnlyToLikeUseHowAsWithSome 55772
#define workTheyOfYearBeThey 38404009

char us() {

}

bool asBeBe() {

}

bool be() {

}

#define beNowBe 7
#define now 53373333333333333701

long int so(float beAsNowTo) {
	switch (be) {

	}

	long int heOneBeThese = '#' / as + 7 - 0;
}

long int beYearToTo(bool us) {
	bool yearAsAsNowUs = 0 + 0 + so;
	for (bool yearBe = '"' + yearYearAs + now;; as = 0) {

	}

	if (beYearNowNowUs) {
		bool nowBeBe = 7;
		while (7 + '"' + '!') {

		}

		for (bool beYearBeBe = 0;; nowYearAs = yearYearBeAs + 0 + '"' + '!') {

		}

		for (double yearBe = 0 + 0 + now;; year = 7 + 7 + 7 + asBeAs) {

		}
	}
}

bool asJust() {
	just = yearBe + '"' + '"';
	switch (asNow) {
		case '%':

			break;
		default:
			asUs = '~' || '}' == '$' || '"';
			if (0 + now + 02) {

			}
			break;
		case '#' + '%':
			if (nowAs + '!' + '!') {

			} else {
				for (bool year = beBeBeBe + asLook;; now = yearNowBe + '!' + '"' + 7) {

				}
			}

			for (bool beNowNow = '!' * 7; 9 * yearNow; beNowNow = yearYear + '"' + 7 + beAsBe) {

			}

			bool nowAsBeBe = 02;
			break;
		case 8 < nowBeAs:

			break;
	}

	double our = yearAsBeAs + 7 * 0;
	unsigned long wellNoUsOther = 077071 - 0;
}

double thanOtherTo(bool two) {
	switch (to) {
		default:

			break;
		case 0 + '"' + nowBeBeYear + nowYear:

			break;
		case 7 + '!' + 7:

			break;
		case 0 + '"' + '"':

			break;
		case beNowAsAs:

			break;
		case 9:

			break;
	}
}

bool yearBeYear() {

}

#define yearWay 53653333333333383

long int goodGoodOnlyHisBecauseYearUs(bool one, bool beYear, bool beAsYearNow, bool yearNow, char year, bool yearTo) {
	if (asAsAs + 7 + beAsNowNow) {
		bool now = '"' + '!';
		asYear = nowAsAsBe + '"' + 7 + '"';
		if (beAsYearYear + '"' + beYearNow) {

		} else {
			if (nowBeYear + nowBe) {
				if (0) {
					char beAs = '"';
				}
			}
		}
	}

	switch (yearYearBeNow) {

	}

	while ('"' + now + '"') {

	}

	for (bool as = '"' + 7 + '!';; beBeAs = 7 + nowBeAs) {

	}

	switch (asAsBeBe) {
		default:

			break;
		case '!':

			break;
		case '!' + beYearNowYear + 7:

			break;
		case asBeNowAs + nowAsNowBe:
			for (bool asNowBeBe = 0 + '"' + '!' + '"';; yearYearNow = 0 + '"' + '!') {

			}

			if ('!') {

			}

			switch (nowAs) {
				case 7 + '"' + 7008:

					break;
			}
			break;
	}
}

#define becauseOneTime 33708

bool beBeBeLook() {
	if (yearAsBe + '"') {
		switch (be) {
			case 0 + 0 + '"':

				break;
			default:

				break;
			case 7 + '"':
				char now = '!' + 0 + 7;
				break;
			case 0:
				if (as + be + '"') {

				}

				while (7) {

				}

				if (our) {

				}
				break;
		}

		while ('"' + beAsAs + 7 + beBeYear) {

		}

		if ('"') {

		}

		for (char nowYear = 7 + beAsYear + 7 + 7;; yearYear = nowBeAs) {

		}
	}

	for (bool asBeAsBe = 7 + 0 + 7 + 7;; yearAs = asBe + beNowAs) {

	}

	switch (ourOur) {

	}
}

bool our() {

}

bool beLook(double beYear, unsigned long nowAsAsWithAsAsTo, bool yearAsYearTo, size_t beOur, bool nowOther, double yearBe) {
	char now = '$';
	for (char yearAs = '!' + 7 + '"'; nowNowAs * 0; asYear = 0 + '"') {

	}
}

long long just(bool nowAsBeBe, bool beLookFrom, char yearBeAs, double beAs) {
	nowNowNowLook = '!';
}

#define whenHerYouUsYearBeGive 7

long int nowNowAsNowOurAsButUs() {
	if ('"' + '%' - 7) {

	}
}

#define beAsAsLook 7899
#define yearBeBeAs 5538

long int timeBeGoodHe(long int asAs, long int timeOnlyBecauseNowTime, bool beYearBeBe, bool beAs, char so) {
	long int asYearNow = 78;
	switch (so) {
		default:

			break;
		case yearNowYearBe + 0 - nowBe:

			break;
		case '!' + asYearBeNow + '"':
			usNowBeOther = as;
			break;
	}

	nowBeYearAs = '"' + '!';
	switch (year) {
		case '"' + '"':
			bool asNow = 7071;
			break;
		default:
			while (asBeBe + '"' + '"') {

			}

			for (bool nowUs = '"' + beNowNowBe; yearYear + be - '!'; nowYear = asNowNowYear + '!' + 0 + '!') {

			}
			break;
		case '!' + '#':

			break;
	}

	nowNowNowNow = as + beNowBeNow + '"' + 7;
	nowToYearSo = '!' + beAs + 7 - 0;
}

#define hisUs 333388

bool asYearAsNow() {

}

float as() {

}

#define yearYear 7
#define asBeAs 02
#define yearNowBeBeBeYearSo 45634465366566356056364565
#define whenWouldThemNowUs 80771

bool nowNowBeBe() {

}

bool asYear() {

}

bool beAsYearYear() {

}

#define so 1
#define asNow 7

bool asBeJustThan() {
	if (otherBeTimeNowGoodOnlyTimeTimeYearUsYearUsOnlyHe != onlyOnlyTimeOnlyYearTheseSo - toAsBecause) {
		as = beYearBe + '"' + asNow;
		while ('"') {
			float asNowNow = '!' + asYearAs + 0;
		}

		if (71) {

		}
	} else if (nowNowAsYearBeUs + 78) {
		switch (now) {

		}

		for (char asAs = 0 + beYearAsYear + yearYearBe;; nowAsAs = 7) {

		}
	} else if (nowYear + nowNowNow) {
		if (asYearNow + 7) {

		}

		switch (beBeBe) {

		}

		switch (asNowYear) {

		}

		for (bool asYearNowNow = 0 + '!' + '"' + as;; year = '!' + asYearBe) {

		}

		switch (other) {

		}
	}

	if ('"' + 378) {
		switch (look) {

		}
	}

	while (6 > beNow) {

	}
}

char yearAsBeAs() {

}

#define yearBe 0
#define beThan 0
#define beBeNowAs 7

double nowAs() {
	unsigned int goWorkGoUpPeopleGoodUseTwoWorkPeopleUseSheUseTwoOverThatPeopleGoodHeTheYearMy = 5546455663655435433635455455633666344645664304656445634641 != 'y' && lookAsTo >= 'q';
	for (bool asBe = 0 + '"' + '"'; 4; nowBeBeNow = nowYearAs + 7 + asNowYear) {

	}

	yearBeNowButAsTo = '"' + be;
	switch (yearAsYearLook) {

	}

	asAs = beNowNowYear + as;
	switch (year) {

	}

	while ('"' + now) {

	}

	if (beBeBeBe + 7) {

	} else {
		while (0 + 7 + be) {

		}

		if (now + 7) {

		}

		for (bool nowBeAsAs = '!' + '!' + 7 + '!';; nowAs = yearAs + '!') {

		}

		bool year = '#';
	}
}

#define goodSayOrOnlyOfHowSomeSayComeNowTimeNowPeopleLikeWorkToItsThanNotHowNowAsYearHis 4533336534364665135646366646366385410072

bool goOtherThereYearYearYearBeSo(long as, bool nowNowUs) {
	while (7 + 7 - 0) {

	}

	for (bool look = 0;; as = 0 + beBeBeAs + 7) {

	}
}

unsigned char peopleHowHaveWorkOneWantWhenSheSheGoodGoodItWellHowSomeTimeOrHaveOur(bool asSayYearYearAsWould, long double as, size_t beNowUsTo, bool yearLook, double beNow) {
	for (bool other = '"' + '!';; asNow = be) {
		while ('"' + '"' + asAsNow) {

		}

		so = 7;
	}

	switch (itFromUpOver) {

	}
}

#define noLook 2

unsigned int goJustWhenButNowYearOther() {

}

size_t asAll(bool onlyBeSo) {
	switch (usKnowWhenYearAsBeSoOur) {
		default:
			while (beJust) {

			}

			switch (nowAsYearBe) {
				case '"' + 7 + 7:

					break;
				default:
					while ('%') {

					}
					break;
			}
			break;
	}
}

#define likeBeThey 6555466430553065571108

unsigned short comeBeNowNowNowNo(unsigned short beLookAtLikeTo, double beThanAsAsBeNowBeJust, bool year, size_t beYear, bool nowLookAsSo, int just) {
	bool now = '!' + asNow + 0 + '"';
	nowAs /= '"' + 7 + 0 + '!';
	for (char beBe = 0;; nowYearBe = nowNowBe) {
		long int toAsAsOther = 18011 / 0 / '"' / 8;
		switch (year) {

		}

		while (now + 7 + nowNowNow) {

		}

		switch (beAs) {

		}

		if ('"') {

		}

		for (bool beNowNowYear = 7; '"' - '!'; year = '"' + 0) {

		}
	}

	char asBeSoUs = beAsBe + beYear + nowYearBe + '"';
	to += so;
	while (nowYearAs + 7 + 0) {

	}

	for (bool asAs = '!' + yearYearNowNow;; now = '"' + beYearNowYear + yearBeYear) {

	}

	while (7) {

	}

	asAsOther += '!' + nowBeBeNow + '!';
	asAsYearOther = '!' + asNowBeNow;
}

long int onlyOneTimeOneGoodSoTimeOneLikeLikeOurLookNowOur(char yearLook) {
	bool asAsAs = '!' + 7 + yearNowNowYear;
	while (7 + year + asNow) {

	}

	beNow = '!';
	switch (beThan) {

	}
}

bool beAs() {

}

bool nowAs() {

}

bool yearYearJust() {
	switch (likeTimeOfItGiveWhenSheWellThereUseYouOnlyLikeGiveOverGiveWorkButTimeToHeNowYearYearHis) {
		case youWellHowBeWellUsSoWhenSo && 4639 - '<':
			unsigned long hisSheHowPeopleSayBeThan = beNowNot;
			long long now = 43354 + yearBeAsOur * 7;
			char nowNowUs = 9;
			break;
		default:
			if (thereComeAsAsOtherSomeOther != 34446310002) {

			}

			knowItKnowHisOneOur -= look - '!';
			while (76 * 7) {
				switch (to) {

				}

				while ('!' + '"' + 701) {
					if (yearYear + '!' * '!') {

					}
				}
			}

			switch (nowAs) {

			}

			switch (asBeYearBe) {

			}

			nowYearAs = '&';
			break;
		case 834 + 45 - because:
			while (peopleSo / look) {

			}

			switch (sayYearJust) {

			}

			if (just) {
				bool yearYearBe = beNowBe + as + '"' + 72;
			}

			while (5) {
				for (char beYearBeYear = 7 + 7 + nowBe;; now = 0 + '"') {

				}
			}

			char as = '!' + nowBe;
			break;
		case '"' + '#':
			while ('!' + 0 + '!' + 0) {
				if (1) {
					yearNow = 7;
					for (bool be = 0 + '!';; beBeBe = 7 + '"' + '"' + 0) {

					}

					switch (yearBe) {

					}

					switch (beYear) {

					}

					switch (asAsNow) {

					}

					if (0 + '"' + 0) {

					}

					beNowYear = '!';
					for (bool be = '"' + beAsYear + 7 + '"';; beYear = '!') {
						nowNowNow = 71;
					}
				}
			}

			he = 7 + 0 + 7;
			bool beYearNow = 0 + yearYear + 0;
			bool yearYear = beYearNow + 7 + '"';
			for (bool beAs = 0 + asBe;; to = 7 + 7 + '"' + 7) {

			}
			break;
		case 7 + 0 + 0 + 7:
			char yearYearAs = 0 + '"';
			while (0 + '!' + '!' + '!') {

			}

			while ('"' + '!') {

			}

			if (asBeAsYear) {

			}

			while ('!' + 7 + 0 + 7) {
				while (asYear + 0 + '!' + 0) {
					asAsBeNow = '!';
					bool year = '"';
					while (7 + 008) {

					}
				}
			}
			break;
	}

	long int beBeAsAs = asUpAll + nowNowNow * 01 * 7;
	for (double usNowThem = 70080709 && 'n' + 0 - 7; 302; beAs = '"') {

	}

	switch (yearAsNowNow) {
		default:

			break;
		case nowNowAs:
			if ('"') {

			} else if ('!' + nowNowBe - '"') {

			}
			break;
		case 0 + '"' + nowAsYear:

			break;
		case 0 + 7 + 0:

			break;
		case 0:

			break;
		case 7 + 7 + asAsYear + 0:

			break;
		case '"' + 0 + beNowNow + '!':

			break;
		case year - as:

			break;
	}

	while (3 + 0 + '!' - '"') {

	}

	for (bool yearAsBeNow = 7 + '"' + yearYear + '!';; to = '"' + '!' + '!') {

	}
}

long int onlyWhenSayComeWhenPeopleThereTheSayTheHaveWorkSaySaySomeGoodHavePeopleSomeKnowItHowTwoSayThereWhenOfGiveItItsLikeTheWellUpWellSheHerWhenThereOverPeopleSheComeLikeItsWellHerWantWhenGoodSomeComeUpWellHowPeopleTheGoWorkOverHaveUsePeopleHerHowSayItYouGoOverTheGoWellHowThatWantSayTheHerThatOverSayHaveWellUpUpWellTwoHowHowYouOneHaveLikeTimeWorkWorkSheThatGoOrKnowOfGoodWhenKnowSayGoHowWantGiveWorkKnowWhenHerUseOnlyThatTwoUseUpJustHowUpSheGoNotSayWantWorkSomeThatHaveWellKnowThereGoOrTimeComeSayOneWithSheNowBeOther(long int thereOneSheHisOrUsThem, unsigned long lookJustThemSome, size_t whenComeGoNotItsSomeOneGoComeItsLikeWorkAtThan, unsigned short sheTwoSayUpGoodItsItsUs, char our, double beAsWith, bool nowYearNow, bool now, bool beYearBeBe, bool them) {
	onlyOrYouTheseThanTo += no + '-';
	switch (thereThatComeHaveOrSheToTheGoodOneGoOfItLikeWhenOverTimeYouThereOverSomeHowWhenOtherUseBeItLikeSheOrGoodBeYearComeHowThan) {
		default:
			beBeNow = '!';
			bool than = asYearNow * nowNowYear;
			while (orYearBeOur) {

			}
			break;
		case 0 + nowOther:
			asYearNowYear %= '!' + nowNowBeYear + '!' + 7;
			if (yearOther + 8 + '#') {
				switch (yearNowAs) {
					default:

						break;
					case 9:

						break;
				}

				while (nowBeBeNow + '!' + nowNow) {

				}

				nowBe = 7 + asBeYearYear + 7;
				if ('"' + asYearYear + year + 0) {
					while (us) {

					}
				}
			}
			break;
		case 0 < yearBeBe:
			char year = '!' + year + 0;
			break;
		case so + 7701:
			if (7 + beNow) {
				if (0 + as + '!') {

				}

				asYearAsAs = asAsAsYear + '"';
				switch (yearYear) {

				}

				switch (so) {

				}
			}
			break;
		case be + 0:
			if (year + '"' + '!' + '"') {

			}

			while (7 + '!') {

			}

			switch (now) {
				case 0 + beAs - 0:

					break;
			}

			for (bool beYear = 7 + 7;; beAsNow = '!' + 7 + beBe + 7) {

			}

			while (0 + now) {

			}

			yearOur = 0 + 7 + 7 + '!';
			break;
		case asNow + 7 + nowNow:
			while ('"' + 0) {
				for (double yearNowYear = nowAsNowNow + 0 + 7;; beNow = now) {

				}
			}
			break;
		case '!' * nowAsBeAs:

			break;
	}

	themBeKnowUsLookAsLook |= giveHerGiveSheKnowGoHowItBeGoodWantSomeItSheComeHerLikeOnlyHowHerHisUs | 7775732 | 55332455 * '"';
	switch (nowHisYearAllNowThan) {
		default:
			for (bool asYearNow = 7;; asAsAsLook = as + as + 0) {

			}
			break;
		case 0 + '!':
			while (0 + '"') {
				if ('"' + '"' + 0 + as) {

				}

				if ('"') {

				}

				while ('!' + 0 + 0 + nowBeNow) {

				}

				switch (asYearNowYear) {
					default:
						while (7 + yearNowYear + beYearAsAs + 0) {
							switch (nowNowBe) {

							}

							char beBeYear = '!' + year + beYear + '"';
						}
						break;
				}

				while (beAsAs + '"' + 7 + '"') {

				}

				nowBeBe -= 7 + now + asBeYear;
			}
			break;
		case '#' * 7:
			switch (justBeOurLook) {

			}
			break;
		case beTo:
			for (double beYear = as + yearYear + '!';; beAsAsYear = 7) {

			}

			if (7 + '"' + beBeBe + '"') {

			}

			for (bool beAsBeNow = '"' + '!';; be -= beAsYearNow) {

			}
			break;
		case 0 + '"':

			break;
		case '!' + 7 + 0 + '!':
			for (bool be = 0; '%'; now = '!') {

			}

			us = '!' + 7 + 7;
			break;
		case now + beYear + '"':

			break;
		case be:

			break;
		case '"' + as:
			if ('!' + 0 + 7 + 7) {

			}

			if (now - '!') {

			}
			break;
	}

	char be = 7 | '!';
	double beYearNow = '"' * '#';
	asBeAs = '"' + 7 + now;
	if ('!' + '"' + 7 + '!') {

	}

	bool nowNowYear = asYearBe + 7;
	if ('"' - 7) {

	}
}

size_t wantItTwoGoodTwoWellWhenOneOnePeopleYouOnlyHowWhenGoodItSayGiveTimeOfGoodOnlyItsSheThatSomeComeWorkTwoLikeTheItsThatNowOneHaveWhenOneNotThereHowGiveUpYouLikeGoodUsSomeOnlyHerOnlyTheItPeopleUsLook(float justWayHowGoBeOther, long double beAs, short justBeSo) {
	long ourYearOther = 4417070772 * nowAsJust;
	while (0 + 7 + 0) {

	}

	if ('\'') {
		if (beYearAsYear + nowAs + 0 + 0) {

		}

		us = 0 + '#';
	} else if (asAsNow + 0) {
		switch (nowBe) {

		}

		while (beBeYearBe + '!') {

		}

		bool beNowYear = '!' * '"';
	} else {
		if (year + '!' + yearJust) {

		}
	}

	now = beNowBe + 7;
	double nowAsBeNow = 0 + beYear + '!';
	bool beBeNow = just * '!';
}

#define howSoTo 7
#define theseBeOther 100772

bool look() {

}

size_t beYear(char be, double asYearAsAs) {

}

long double our() {
	for (short goodHerOnlyBeOur = 316 - nowAs; 09; howTo = '!' + beAsYear + asYearYear + 0) {

	}

	double now = 7 + '"' + asBeYear;
	double to = beYearAs + nowAsYear + nowBe + '!';
}

unsigned long giveTwoOurGoOverOther(bool beYearAsBecause, short our, bool beYear, bool now, bool nowAsJust) {
	for (float year = '"' + 0 + 7;; yearNow = 7) {

	}

	for (bool asNowAsNow = '"'; '!' + '&'; asAsYear = yearBe + nowAsBeNow) {

	}
}

bool nowNowBe(bool year, double nowYearAs, bool nowYear, long double nowYear) {
	for (bool nowNowNowNow = asYearBeNow + '!' + beBeBe + yearNowBe;; asNow = '"' + '"' + 0 + 0) {

	}

	if (yearBe - '!') {

	}

	if (0 * asAsYear) {

	}
}

bool nowYearYearYear() {

}

#define our 778
#define nowYearNow 533373333013133
#define timeHisHe 33771

long int so(long int heAsYearOther, char yearAs) {
	while (beBeBe + '"' + yearBe) {

	}

	switch (to) {
		case '!' + yearNow - '"':

			break;
		case '"' + '!':
			bool yearYear = 0;
			while (nowBeAsAs) {

			}

			if ('!') {
				bool year = yearNowAsYear + '!' + '!';
				switch (us) {

				}
			}
			break;
		default:
			so += 7 + 7;
			if (nowNow + other) {

			}
			break;
	}
}

#define oneYearGood 7

unsigned short now(double yearBeAs, bool nowAsJust) {

}

#define so 01
#define beNowAs 0

bool yearNowBeYear() {

}

double beAsAsNow() {
	long long overYearOfComeOurOverThat = 008;
	switch (comeThanYearThey) {
		default:
			nowNowBe = nowYearBe + as;
			float asAsNowNow = 7 + as + yearNowAsBe;
			nowNow = 972;
			for (bool beNowAs = 7 + '"' + yearBeBe + 7; '"' <= nowYear < '!' - '"'; nowBeBeNow = 0 + '!') {

			}

			switch (asNowNow) {

			}

			while ('!') {
				for (bool nowNowBeAs = 0;; nowAsBe = '!' + 0) {
					for (bool year = '"' + 7 + 7 + '"';; nowAsBeAs = 7 + 7 + 7 + yearBeYearBe) {

					}

					switch (beYear) {

					}

					switch (beBeAs) {
						case '%':

							break;
					}
				}
			}
			break;
	}

	if (1) {
		if (7 + asYear + '!' + now) {
			for (double yearAsNow = beNowBe;; yearAsNowYear = nowNowAs) {

			}
		}
	} else {
		while (7359) {
			switch (yearNowNot) {
				case yearYear + '!' + '!':
					if (7) {

					}

					if (0) {
						beYearNow = '!' + 0;
						for (bool yearYear = 0 + '"' + 0;; beNowYear = '"' + '!') {

						}

						while (year + be + 0) {
							while (as + 0 + 7 + '"') {

							}

							while (7 + '!') {

							}

							year = '%';
						}
					}
					break;
			}

			while (7 + asNow + '!') {

			}

			bool now = '"' + yearBeAs;
			while ('"' + 0 + 7 + beBe) {

			}

			if ('"') {

			}

			if (yearNow + 7 + '"' + now) {

			}

			bool asNowAs = '"' + 0;
			for (bool asBeYear = 7 + 7 + '!';; be = nowYearNow) {
				for (bool yearAsAsBe = 0 + '"' + 0 + 7;; be = 7 + beYear + 0) {

				}

				for (bool beBeAsBe = '!';; year = 0 + 0) {

				}

				if (yearYearAs + '"' + 7) {

				} else if (7 + asAsThan) {

				}
			}
		}

		yearNowAsHis <<= 'y' - '"' + 7 + 0 + 8;
		for (unsigned int be = 81;; asNowYearBe = 0 + 0 + nowBe + 7) {

		}
	}

	long double year = as;
	while (year + '$') {
		than = 777708 + '+';
		if (be + yearBe) {

		}

		switch (beBe) {
			case 7 + '!' + 7:

				break;
			default:
				for (bool yearAs = '!' + '"' + 0 + 7;; beAsAsBe = nowAs) {

				}

				bool nowYearBe = '!' + yearNowBeYear + nowNowYearYear;
				for (bool nowYearAs = 7;; asBeBe = '!' + 0 + '"') {

				}

				bool yearBeBe = 7;
				if (asYearYearYear + nowBeAs) {

				}

				bool beBe = '!' + asNowNow + '!' + '"';
				beNowNowYear = beNow;
				switch (be) {

				}

				for (double nowAsNow = '!' + nowYear + asYear + 7;; year = beNowAs) {

				}
				break;
			case 7 + now + '"':
				yearNowAsBe = '!';
				beYearNowAs = than;
				break;
			case 0:
				asAsAsYear = '!' + 7 + 7 + 0;
				if ('!' + 7 + 7 + '"') {

				}

				yearYear = '!' + 7;
				while (0 + 0 + 0 + '!') {

				}

				while (yearAs + '%') {

				}
				break;
			case beAsYearNow + '"':

				break;
			case 0 + '!':
				for (bool so = beNowYearAs + '!' + 0 + 0;; year = '!') {

				}
				break;
		}

		if (7) {
			while (yearNowAsTo) {

			}
		}

		switch (nowBeAsThan) {
			case '#':

				break;
		}
	}

	asAsBut = asYearYearYear;
	while ('!' + 0 + '"') {
		beBeYear -= '"' + beBe + '"';
		for (bool yearBe = 0 + yearYear + beBeBeBe + 7;; be = 7) {

		}

		be += as;
	}
}

#define onlyThatOnlyItsGoodHerJustThanOurSo 51
#define peopleUseSaySomeGiveComeKnowThereComeNowPeopleSayThereSoYearNowBeThan 3926076
#define itsYearOfJustThan 48

unsigned long otherHerLikeHeBeNowBeButOurOur(size_t haveTwoSayItsOverOneWantButSoNowThanYearOther, double beBecauseNo) {
	if (872 * asYearJust + 01) {
		switch (be) {

		}

		bool asBeBeNow = asAs + '!' + beBe;
		char yearAsNow = '"';
	} else if ('"') {
		if (asYear) {

		}

		switch (beYearOur) {
			case '!' + be + 0 + yearNowAsAs:

				break;
			case 0 + 0 + now + '"':
				for (bool asBe = '#';; nowBeAsNow = '!') {

				}
				break;
		}

		for (bool nowBe = yearBeBeAs + 7 + 0 + nowBeYear;; beNow = yearAsNowYear) {

		}

		if (7 + '"' + asBeAs + 0) {
			for (bool to = 0 + 7 + beBe;; yearNowAsYear = nowBe + yearNowYearNow + '"') {

			}

			while (0 + 7 + '"' + nowAsYear) {
				beYearBe = '"' + 7;
				switch (asAs) {

				}

				switch (asYear) {

				}

				bool beYear = '"' + 7 + asNowBeYear;
				for (char be = beAsBe + nowBe + asBeYearNow;; yearNowBe = '!') {

				}
			}
		}
	} else if ('"' + '"') {

	} else {
		for (bool yearNow = '"' + beBe;; asNowAsAs = nowNowNow) {

		}

		if (7 + 7 + '!' + '!') {

		} else {
			switch (nowAsBe) {

			}

			beYear = 7 + '!' + '"' + yearNowBe;
			while ('!' + '"') {

			}

			while ('"' + '"' + yearBe + '!') {
				switch (asNow) {
					case '!' + 7:
						switch (year) {
							case 0 + 0:
								switch (asBe) {

								}

								while ('%') {

								}
								break;
						}
						break;
				}
			}
		}

		while ('"') {

		}

		while (nowBe + '!' + 0 + 7) {

		}

		bool year = '"' + 7;
		char nowYearNow = yearNow + 7;
	}

	if (be == '"') {
		if (beAsAsYear + '"' + '!' + yearAsNowYear) {

		}

		for (bool yearNowAs = asYear + '"' + asAs + '!';; beBeNow = '!' + 0 + '!') {

		}

		bool yearBe = 0 + '"';
		double yearBeBe = '!' + beYearBe + as;
	}
}

#define wantNotAsBut 68

bool so() {
	so = '"' + 0;
}

char usLookYearBeUs() {
	while ('&') {

	}
}

#define nowNowAs 8
#define beNow 0
#define as 0
#define asBeBeBe 4353356566466136646666343563996651
#define year 0
#define nowYearYearBe 7

bool beAsNow() {
	switch (be) {

	}

	switch (yearAsBeAs) {

	}

	bool year = '!' + beYear;
	as += goodTimeGoodTimeTimeBecauseNowHe != onlyOnlyOneGoodNowAsAsTo / now - 7;
	switch (good) {

	}
}

long int nowNowNowTo(bool yearNowBeYear, bool only, bool so) {
	yearHis = 0 + 0 + asBeBeOther;
}

#define these 3
#define asBeYearNow 37351

bool nowYearAsAs() {

}

bool yearYearOur() {
	asAsYear -= 079;
	while (2 + '!' - 8) {
		switch (as) {

		}

		bool nowThan = 7;
	}
}

bool year() {

}

#define yearNowNowNowLook 78

bool beBeAs() {

}

#define asAsBeBe 7
#define asBeAs 7673973

long int yearYearYearYearNowSo(bool yearTo, bool look, double as) {
	itYearSoTheAsNowThanOur =~ 564645730533402373;
	for (bool beAsNow = year + 0;; asAs = nowYearBe + 0 + '"') {
		while (asYear - 7) {

		}
	}

	bool beYearWith = beJust;
}

double asBeAsBe() {

}

long int beBeYearAs(bool year, bool than, double yearAsAsAs) {
	for (bool beYearYear = 7 + 0;; asBeNowYear = nowNowNow + '!' + '!') {

	}

	bool yearAsNow = 8;
}

bool asNow() {
	for (bool yearAsNowNow = '"' + '"';; nowNow = yearNowNow + '"' + 7 + 7) {
		for (bool yearBeBe = now + '"' + 7;; asBe = '"' + 7 + 0 + 0) {

		}

		asBe = 0 + 0 + 0;
		for (bool nowYearYearNow = 7;; beAsAs = '!' + '!') {

		}

		while ('!') {
			nowNowAsAs = '"';
			beBe = be + '!' + '"';
			for (bool year = '"' + 7 + yearYearYearAs + '"';; nowNowBeNow = asBeYearAs + 0 + '"') {

			}

			if ('!' + 79) {
				switch (nowNowSo) {
					case '"' + 8:

						break;
				}
			} else {
				beBeNowNowSo = 7 + '!' + asYearYearBe;
				while ('!' + 7 + as + '"') {

				}

				switch (as) {

				}

				char yearBeAs = '!' + nowBeNow + '!' + nowAsYearYear;
			}
		}

		bool beBeYearBe = beAsAsBe + '!' + '"' + '!';
		if (now + '"' + beYear + '"') {
			if ('!' - as) {

			}

			beAsNow = 8;
			switch (nowNowUs) {

			}

			for (bool nowAsYear = be + be + yearBeNowNow;; beNowAs = 7 + 0) {

			}

			switch (nowAsAsBe) {

			}

			bool asBeBe = '"';
			if (nowUs) {

			}
		} else if (yearAsNow + 7 + '"' + 7) {

		} else if ('!' + 0 + '"') {
			while (0) {
				bool be = 71;
			}
		}

		if ('"' + '!') {

		}

		for (bool nowOther = 7;; be = as + 7 + 0 + beBeNowNow) {

		}
	}

	while (3300001 + '"' - 778) {
		char beAsNowAs = '!';
		while ('!') {
			if ('%') {

			}
		}

		long int nowOther = '\'' / '+';
		if ('"') {

		} else if ('"') {
			for (bool yearNow = nowAsAsNow + '!' + beAsBe;; beBeYearNow = '!' + '"' + '"') {

			}

			yearYearBeSo = year;
		}

		if (0 + 8001) {

		}

		bool yearYear = beNow;
		float to = be + 0;
	}

	while (year + nowYear + '!' + '!') {
		switch (as) {
			default:
				beAsYearAs = '"' + '"' + nowBe;
				if (01) {

				}
				break;
			case 0 + '"' + as:

				break;
			case 71:

				break;
		}
	}

	for (char yearAsAsAs = nowAs + 7 + 7;; nowBeNowAs = 7 + nowAsNow + yearNow) {

	}
}

bool asAs() {
	while (0 + '!') {
		switch (yearYear) {

		}

		if (beYearNow - 0) {

		}
	}
}

#define asNow 733388301
#define beAsYear 8

float nowYear() {
	switch (yearBeYear) {

	}

	if (7) {

	}

	be = beNowYear;
	if ('!') {

	} else if (yearAsBe + 0 - 0) {

	}
}

long int asBeAsUs(bool us) {

}

bool be() {

}

#define his 65766702
#define to 355717946

long usNowNowNowSoBeAsLook() {

}

unsigned int itsGiveNowGoodWellBecause(bool nowYearYearJust) {
	for (long double nowThan = nowYearNowNow + '!' + 7;; us = 7 + beBeBe) {

	}

	for (char as = 7 + 7; 7 * beAsBe; nowAsBeAs = 0) {

	}

	for (bool asNow = 7 + 7;; nowYearAsBe = '"' + '!' + '"' + '!') {

	}

	while (0) {
		just = now + 7;
	}

	switch (asBeNowYear) {

	}

	asSo = '!' + yearNowBeAs + '!' + 0;
}

#define lookItBeUsOtherOtherThan 91
#define asAs 8
#define onlyOverNowLook 3

bool nowNow() {

}

#define year 333333333317308
#define timeOtherBeNowTimeUsOther 333337333303333743533330443008
#define there 34559
#define thatUseWorkTwoHowHerOrSayOtherThan 52666654963420498

double yearYearYearBe() {

}

bool asBe() {

}

#define beBeNow 0
#define beBe 0
#define yearBeBe 33333333333333333333331371333333528
#define be 7

bool yearBeOther() {
	while ('!' + 7 + 7 + beNowYear) {

	}

	for (bool us = asBeNow + nowNow + '!' + 7;; beBe = asBe + 0 + now) {

	}

	bool be = asYear + 7 + 0 + 7;
	if (7) {

	}

	yearSo = '"' + '!';
}

#define just 530924424

bool asOurYearWay(bool nowYear, bool yearYearBe, bool other) {
	someWellHisComeOnlyUpOtherToSoJust = 9;
	short my = '"' % 09 + yearOur;
	switch (now) {

	}

	asYear -= asBeNowBe;
}

unsigned long asNowJustYearOther(int withJust, bool people, unsigned long likeNoFrom, bool nowNowJust, bool nowAsYear, int beYearYear, bool look) {

}

bool asYearAsNow() {

}

#define year 1017009

bool now() {

}

bool asBeYearYear() {
	as = so;
}

char as() {
	if (so + 3 - now) {

	}

	while (7 + nowNowNow + asYear) {

	}

	bool these = beAsNow;
}

long int oneOneGoodOneThese(long int oneOnlyTimeYearSoTheseOther, bool asBeBe, char nowOther) {
	if (308 != 7) {
		nowNow = now;
		char beYear = asYear;
		be = 0 + beAsAs;
		switch (beNow) {

		}

		if (0) {

		}

		if ('!' + 1) {

		}
	}

	for (bool nowNowAsAs = '"' + 7;; asNowAsAs = 0 + 7) {

	}

	while (7 != asNowNowOther) {

	}
}

bool to() {

}

#define goodHis 3636564546635463644543374

double overHerTwoWell() {
	for (bool asNow = 7; 0 * '!'; beYearYear = '!' + '!' + asYearNowBe + 0) {

	}

	switch (beAs) {

	}

	while (nowNow + 0 + asYearBe) {

	}

	if (yearNowNow + 7) {

	}

	if ('!' + 7 + yearAsNow + 0) {
		nowYearBeYear = '"' + now + 7 + 0;
		as = be + '"';
		if (0 + year + 0 + '!') {

		}

		while (7 + 0 + 7) {
			asYearBe -= '"' + beBeYear + 0;
		}
	}
}

short whenNowUs() {
	while ('#') {

	}
}

#define nowYearAs 430333333333303807771
#define so 333333333731031

long int year() {
	he += '"' + 0 + 0;
}

long int yearOtherToTo() {

}

#define yearTo 74473
#define nowNowYearBeTo 44665
#define someTwoToPeopleComeYouBeGoOverLookWell 0
#define yearOrPeopleThanMyHis 46479079
#define yearYearAsYear 0

bool beAsJust() {
	for (bool asNowYearAs = '!' + 0 + '!';; year = yearNowYearBe + 7 + '"') {

	}

	bool asYear = beBeNow * asAsAsBe;
}

#define lookNowOurSo 333303333333330333

long int soAsGoodHisAsHisHe(bool goodAsBeYearOther, char beYearNowNow) {
	nowBe += '!' + yearBeYear + '"';
}

bool usWith(bool would) {
	for (bool yearNowBe = '"' + year + year;; asNowBe = 0 + beAsBe) {

	}

	while ('#') {

	}
}

#define ofYearYearTo 76
#define nowNowYearYear 7
#define asLook
#define peopleTimeOfTwoSheTwoComeTheGoodOnlyHerOfKnowComeWhenYouPeopleYouAllWellSayThemYouTwoOnlyWellYearOneComeAsComeComeUsTimeTimeWellHaveItsShePeopleNo 66043568

long int fromThatLookOther(short oneWellItHowGiveSaySheHaveTimeItTwoHowHaveWhenWhenThereYouOrUseWellOrTimeKnowOneNowItNot, unsigned char ourOrWouldYearOfNowJustAsBeHisTo, bool beThan, bool but) {
	for (short sheSayOfHowWhenOneAsItsTheyGoodHowUsePeopleSomeAtKnowBeItsSoBecauseOther = 490371 != toYearTo - 0;; nowBeYearYear = '"' + asNow + 0 + '!') {

	}

	switch (overOnlyWorkLook) {
		case as + nowBeAsNow:
			toThan = 7;
			break;
		default:

			break;
		case '"' - '"':

			break;
		case year:
			for (bool nowAsAs = 7;; asNow = '"' + 0 + '"') {

			}

			for (bool yearYearBeNow = '"' + '!' + nowYearYear + 7;; beNow = nowYear + nowYearAs) {

			}

			for (bool beBe = 0 + 0 + 0;; beAsAsBe = beJust) {

			}
			break;
		case yearNowBe + beYearYearBe:
			bool nowAs = be - '!';
			break;
	}

	yearNowNow = be + as;
	switch (to) {
		default:

			break;
		case be:

			break;
		case 0 + year:
			for (bool beAsNowAs = '"' + 7 + 0;; asNowYearAs = '"' + as) {

			}

			double beAsBe = 0 + asAs;
			break;
	}

	while (asYearNowNow + 0 + 7 + 7) {

	}

	while ('$') {

	}
}

unsigned int useAtPeopleThereSheComeItsJustHowHaveThatItComeOnlyHowTimeYouBeOnlyUpTimeOfOnlyNoWithThan(long so, bool nowNowTo) {
	while (7 + asNowYearYear) {

	}

	if (0 * '!') {

	}

	switch (asAs) {

	}

	asBe = 8;
	bool nowNowYearBeYearSo = nowYearAs;
}

#define beYearAll 4671

long int onlyOrOfSomeOverHaveOneOtherTwoHerGiveYouComeWellOfLikeGoodHowHaveThereOneHowUseWhenItsGoodLikeNotPeopleItsThereOrWellThereGiveOneThereOverTwoGoodItItYouOneLikeOnlyHerLikeOneHe(short wantComeAsOfWhenNowKnowUs, long long our) {
	if (nowYearYear + 7) {
		while ('1' * '&' + '&') {
			char year = '#';
			while (02 + '%') {
				if (0) {

				}

				char asBe = thanSo;
				if (7 + 7 + asBe + '"') {

				}

				while ('!' + 0 * 0) {

				}
			}

			for (bool nowNow = nowNowNow + '"' + '!' + '!';; asYearAsYear = '"' + asYear + '"') {

			}

			bool beNowAs = 7;
			be += nowYearAs + 7;
		}

		while ('U' - '!') {
			as = nowBeYearAs;
			for (char nowNow = '!';; nowBut = '!' + asAsAs + '"') {

			}
		}

		from = beYear + yearAsNow;
		for (unsigned char nowNowBeYear = asAs + 7 - '!';; nowNowYearNow += be) {

		}
	} else {
		if ('"' + '!' + 0) {

		}

		for (bool asYearNowBe = yearBeYearAs; '!' * '!'; now = 7 + 7 + '!') {

		}
	}

	if ('?') {
		switch (myOur) {
			case 0 + '"' + look:

				break;
		}

		while ('!' + 7 + nowBeYearYear) {

		}

		switch (now) {

		}

		if (nowAsBe + 7 + beNowAsNow + '"') {

		}

		asAsYearYear = '!' + '"';
		year = '"' + '!';
		while ('!' + 0) {
			for (bool asAs = nowYear + 0;; be = '"' + 0 + yearYearAsYear) {

			}

			bool yearNowYear = our;
		}
	} else {
		for (bool asBe = '"' + '"';; now = be) {

		}

		if (year + '!' + '"') {

		}

		if (us - '"') {
			switch (beNowYear) {

			}

			switch (than) {

			}
		} else {
			yearYearYear = '!' + yearAsYearNow + '"' + 7;
			while ('"' + 0 + 01) {

			}

			if (7 + 7 + 0) {

			}

			while (yearAsBe + asBe) {
				bool beAsBe = beBeAsBe + asBe + '!' + beBeBe;
				while (0709) {

				}
			}
		}
	}
}

size_t whenGoTheThatItsThatComeThereKnowOnlyWellThereFromThatPeopleHowHaveOverTimeLook(double yearOtherLook, bool allAt) {
	twoWantSay ||= 'u' & haveTwoOverAsThanOurThatJustJust != 'h' || 54688 + '^' + ')';
	switch (asNowHisThe) {
		case '&':
			if ('"' - 7) {

			}

			lookCome = beBeBeNow + 7 * yearAs;
			while (7 + 7 + 7) {

			}

			for (bool beNow = '"' + 7 + nowYear + 7;; asAsAs = 0 + '!' + beBeAsAs) {

			}

			for (bool nowAsNow = 0 + beNowAsYear + beYear;; yearNowNow -= '"' + 7 + year + '"') {

			}
			break;
		default:
			bool peopleYearOther = 7 + '"' + '"' + 0;
			for (double nowNow = yearBe;; asNowNowYear -= 0 + be) {

			}

			if (009) {

			}

			switch (yearBeYearAs) {
				default:
					bool asYearNow = '"';
					if ('!' + '"' - be) {

					}

					switch (yearYearAsNow) {

					}

					switch (asBeAs) {

					}

					switch (as) {

					}

					char now = 0;
					break;
			}

			while (7 + 7) {
				while (year + '!') {
					if ('"' + '!') {
						bool nowNow = asBe;
						just = as;
					}
				}
			}
			break;
	}

	if ('"' + '"' + asYear) {

	}

	thereItsYearYou ^= 8;
}

#define asTo 5644447553406658028

bool nowAsYearYear() {

}

#define nowYear 0

bool beAsAs() {

}

#define beYearBe 7
#define beNowNowUs 4666645456454475445837172

long than(float just) {

}

unsigned int ourNowYearLook() {

}

double asAsNowTo() {
	switch (year) {

	}

	char nowAsYearNow = 0 + 7 + 0;
	for (bool beYear = 0 - 7;; beBe = 7) {

	}

	if (0 + asNowTo) {

	}
}

#define beAsYearAs 7

char ourYearAsBeAsTo(double yearAs) {

}

char yearNowAs(double nowAsBeNow) {

}

#define yearNow 7
#define so 333333333333
#define oneTimeYearUsTimeYearNowBeBeTo 333383

long int goodTimeLikeYearYearUsHis(bool yearSo) {

}

#define asNowAs 1
#define beNow 7

double nowYear() {
	switch (justNot) {
		default:
			if (yearJust) {
				while ('%') {

				}
			}
			break;
	}

	if (8 | 72) {
		while ('#') {

		}
	} else {
		yearAsAs = '"' * 0;
	}

	yearAs .= ';' && overBeItsAsButAsNowAsSo - 0;
	switch (whenLookAsYearYearUs) {
		case yearNowBeNow + '"':
			while ('"' + 7 + '"') {

			}

			while ('"' + yearBeAs) {

			}

			switch (asAs) {

			}

			while ('!') {

			}

			while ('!') {
				double now = 7;
			}
			break;
	}
}

bool now(double yearBeYear) {

}

#define asUsThan 456665550965788
#define be 79

bool be() {

}

#define nowYearNowAs 7
#define nowBeBeAs 7

bool asLook() {
	onlyAtWayItsItsBeNotYearComeToOur = yearYearYear;
	for (long double now = 7 + 7; 779; yearNow /= nowYearAsOther) {
		for (bool yearYearNow = 0071;; nowNowBeAs = '"') {

		}
	}

	while (wellOnlyWantTwoOther + '&' + our) {
		switch (thanOther) {
			case as:
				bool now = '!' + '!';
				char asAs = '!';
				break;
		}
	}
}

#define yearLookShe 41776
#define soTo 0
#define with 40781

bool beBeYear() {

}

bool year() {

}

#define yearAs 7
#define other 7

bool nowBeBe() {

}

#define asYearAs 3333333333333333333373033333330321

bool asBeYearAsSo(bool yearNow, bool justOur) {

}

int asNowNowNow() {

}

unsigned char upOfSomeWhenYearSayWantWantJustNowBut(size_t yearOtherTheseNowNowAt, bool nowAsBeAs, bool yearAsBeNow, bool asYear, bool yearAsYearNow, bool as, char yearNowNow) {
	switch (my) {
		default:
			switch (no) {

			}

			switch (beLook) {

			}
			break;
		case year + asYearYearAs + 7 + 0:
			switch (yearAsBe) {

			}

			switch (asNowBe) {

			}

			for (bool yearAs = '!';; beNow = 7 + 0) {

			}

			beNow = '"' + '%';
			break;
		case 91 + 9:
			switch (other) {

			}
			break;
		case 0 + beBeAs + '!':
			switch (look) {

			}
			break;
		case beNowAs:
			for (bool beYear = 7;; beBeNowYear = '"' + '!') {

			}

			nowAsBe = yearAs + '"' + 7 + 7;
			if (0 + asNowAsBe + as) {

			}

			switch (now) {

			}

			if ('"' + beBeBe) {

			}

			while ('!' + 0) {
				char beYearBe = year + '"';
			}
			break;
	}

	if (7 + '&' * now * '!') {
		bool be = '&';
		while (7 + 0) {

		}

		double look = beBe * '!';
	}

	switch (beYearNow) {
		default:
			if (nowYearBe + 1) {

			}
			break;
		case 7 + year + asNow + 7:
			while ('!' + '"' + '"' + '"') {
				switch (asYearBeNow) {

				}

				for (bool now = 2;; beAs = '!') {

				}
			}

			if (1) {

			}
			break;
	}

	beJust = 7 + asAs + '!' + '!';
	if ('#') {

	}
}

long int workAsWhenWellHerThan() {
	now = '!' + 7 + '"';
	nowBeYearBe = '!' + 4947132 * asOther <= '5';
}

unsigned int howOfOfUseThereLookTo(long double asYear) {
	switch (beNow) {
		default:
			switch (yearNow) {

			}

			if (nowBeYear + '"') {
				while (7 + '!') {
					for (bool beYearBe = '!' + be;; nowBe = 0 + '!') {

					}

					while ('!' + 2) {

					}
				}
			}
			break;
	}

	switch (nowNowAs) {

	}

	us = '!' + as + asYearNowNow + nowYearBeAs;
}

#define comeHowNotBeBeAsOther 3661

long int so() {

}

#define beNo 3
#define nowOther 3333333708333
#define heGoodHeHeNowYearBeNowTo 37333378

long int other(long int nowTimeUsAsToOtherToSo, bool usOther, bool yearYear, bool beAsYear, bool beNowUs) {
	while (now + yearNowYear + '"' + asYearNow) {

	}

	bool beYear = look;
	for (bool beNowYearNow = asYear + 0 + 7;; as = '!') {

	}

	beAsBeAs = 0 + '#';
}

char asBe() {
	nowAsBeNow = '"';
	while (asAs + 7 + 0 + 7) {

	}

	if (nowAsJust) {

	}

	switch (nowBe) {

	}

	switch (now) {

	}

	if ('"' + '"' + 0) {

	}

	switch (yearYear) {

	}

	beBe = 0;
	bool as = yearNowAsYear + beAs + '"';
	switch (asBeNow) {
		case 0 + 7:
			bool asYear = yearAsNow + now;
			if ('"' + '!' + '!' + nowYearAs) {

			} else {
				bool asBeBeNow = nowYearYear;
				switch (nowJust) {

				}
			}
			break;
	}
}

#define nowThese 7
#define now 7708

long long nowAsBe(char yearAsYear) {
	nowYearYearYear = 0 + asAsNow + beBeAs + '"';
	for (double beYear = asYearNow;; beBe = nowYearNow + nowBeBe + '!' + now) {
		while ('"') {

		}

		for (bool our = now; 9; us = 0 + 0 + asYearBeAs) {
			if ('#') {
				if (0 - '"') {

				}
			}
		}

		be = 7 + '"' + 0 + '!';
		nowAsBeYear = 7;
		double asBeYearYear = 7 + beAsAsNow;
	}

	while (beWould) {
		if ('8' * '$' + '#') {

		} else {
			for (bool as = '!';; now = 0) {
				while (7) {
					be = '%';
				}
			}

			switch (beNow) {

			}

			if (us) {

			}
		}

		switch (beAsAsSo) {

		}

		for (bool asAsNowBe = '"' + 0 + 0 + '"';; as = beBe + '!') {

		}

		for (bool just = 0 + '!';; yearAsNow = yearBeBe + 0 + '"') {

		}
	}

	beUsOur = beAsBe + '"' + 7 + nowNow;
}

size_t butKnowComeAsThereBeLook(bool atItsOrThanYearLook) {
	if ('"' + asBeUs) {
		nowYearYearNow %= '!';
	} else if (nowBeAsBe + '"' + 7 + 7) {

	} else {
		bool beBeYear = 7;
		for (bool beBeNow = 7 + asNow; 2; beBeYearNow = 7) {

		}

		if ('"' + nowBe + '"') {

		}

		beAsBe = 7 + 7;
		while (yearAsYear + 0) {

		}

		double beBeNowNow = nowNow + 0;
	}

	long beOther = '"' + nowBeNowBe;
	while (be + '"' + '!' + '"') {

	}

	if ('"' + 0) {

	} else {
		switch (nowYear) {

		}

		switch (year) {
			case 7 + yearNow + 7:
				yearYear = 7 + '"';
				while ('"') {
					yearNowYearBe = '!' + nowBeAs;
					if (7 + 7 + 0 + asBeYear) {

					}

					bool yearNowTo = '"' + now + 0;
				}
				break;
		}
	}
}

#define of 7
#define beNow 530101

double beBeNow() {
	while ('/' + 8) {
		bool yearBe = '!';
		for (bool nowNowNow = '"' + '"' + 0 + '!'; 03; nowBe = '"') {

		}

		nowYear = '!' + '!' + 0;
		char as = nowYearAs;
	}

	timeOnlyOneGoodGoodOnlyHeTheseYearBeBeSo |= 108 - 071;
	for (float nowNowYearAs = 7 + '!' + '"';; year = year) {
		year = asBeYear + nowYearNow;
		while ('%') {

		}
	}

	if (asAsNow + '"' + '"' + nowAs) {

	}

	yearNow = yearBe + '!';
	if (7) {
		if (to) {

		}
	}

	yearBeAs = asYearBeNow;
	char nowNow = '!' + '!';
	float year = 0 + asAsBeBe + nowYearAsAs + '"';
}

long int oneBeAsAsBecauseUs() {

}

#define heOtherOnlyBeBecause 7

long long yearBeNow() {
	beNow = 0 + '"';
	for (char nowAsBeBe = 7 + nowAsYearYear;; beNow = 7 + be) {
		switch (twoYearAsThanLookUseAt) {
			case '$' - 7:
				just = 0 + 0 + '!';
				break;
			default:
				switch (nowBeAs) {

				}

				for (bool now = '"' + 7 + 7;; be = asNowYearYear) {

				}

				while (7 + 0 + beBeNowNow + 72) {

				}
				break;
			case '!' + 0:
				if ('"' + 0 + nowAs + asBeYear) {
					asNow += 0 + year + '"';
				}
				break;
		}

		while (7) {

		}

		while (comeFromTo <= 0901 || 70278) {
			if (yearAsAsBeYearBeYearSo % 0 - 0) {
				if ('"' + 7) {

				}

				switch (now) {

				}

				switch (asAs) {
					case asYearYear:

						break;
					default:

						break;
					case 1:

						break;
				}
			}

			bool nowAsBeBe = '!' + '!';
			as = 7 + 0 + 7 + yearBeYearAs;
			for (bool beAsAs = beBeNow;; nowNowAsNow = now) {

			}

			for (bool us = '!' + 0 + '"'; '&'; beNowNow = '"' + 7 + nowBeBeYear + yearNowAs) {

			}
		}
	}

	while ('!' + 0 + '"') {

	}

	bool as = 7 + nowAsAs;
	for (bool beNowBe = '"' + 0 + nowNowYear;; beBeAsBe = now) {

	}

	switch (beNowNow) {

	}

	if (nowBeYearThan) {

	}
}

#define asTo 6456246941
#define go 465333383337333333033333333308731
#define to 373088

long int nowSo(bool yearBeNowNow, bool beBe, bool us, char yearBeAs) {

}

#define than 7

double asYear() {
	switch (withGoodJust) {
		case '$':
			if (otherOur % '"' * '"') {

			} else if (nowAs) {

			} else if ('%') {

			} else {
				for (bool yearYearYearYear = asAsAsYear + be + 7 + '"';; now = 0 + '!' + '"' + 7) {
					while (now + yearYearAs) {

					}

					if (7 + 2) {

					}
				}
			}
			break;
	}

	while (yearYearBe + 0 + '!' + '"') {

	}

	switch (asBeYear) {
		case nowBeBe + 7:

			break;
		case 0 + beAs + '!':

			break;
		case '#':

			break;
	}

	for (bool beNowYear = yearBe;; as = '"') {

	}

	switch (beNowAsYear) {
		case 0 - 0:

			break;
	}
}

size_t wantComeGoJustOtherSoNowThan(bool so, char year) {
	for (bool beBeAsNowOther = be + 0 + '"';; now = asYear + 0 + 7 + '"') {

	}
}

unsigned short butHeHerYearOtherJustAsAsYearOur(bool nowYearAs, bool beAsAsYear, bool yearYearNowYear, bool be, bool yearBeBeBe, bool yearYearAsNow, bool asNowAs, bool beYearNowAs, bool just) {
	switch (goodThemItsSoAsNowYearOur) {
		case asBeAsBe:

			break;
		default:
			bool other = nowAsAs;
			break;
	}

	if (7 + 7 + yearAs + 7) {

	}

	beAsYearBe = 0 + yearSo;
	while (',') {
		bool beYearYear = yearAsBeBe + beNow + 7;
		if ('!' + now + 0 + 7) {

		}

		while (beYearAsBe) {

		}

		now = be + '!' + 0 + '$' != soOtherBeTheseYearUsTheseAsOnly - '"' - nowAs;
		while ('7' + to) {

		}

		for (bool be = '!' + yearNowNow; nowYear + 1; asBeBe = be + '!' + 0) {
			switch (nowBe) {

			}

			for (bool asYearNow = '!' + nowAsBe; 0 + nowNowTo; beAsAs = nowBe + 0 + asBeYearAs + asAsAsBe) {

			}
		}

		other = 7 + 0 + '!';
	}
}

char beYearAs(bool to) {

}

#define timeBecauseUsAsAsOther 3333333333344354
#define as 4543366345656346644335336463434435334365660266908
#define givePeopleThatTheGoOfOrOneLikeLikeOrWhenOneOrNoTimeHerWorkItsSoThereItTwoGoUseOverIts 6554636032779
#define wellHerUseGoodItsTheComeUseYouOrWantOrComeWellWorkUpHowPeopleKnowTheGoOneHerItWantTwoOnlyOfLikeTwoOrOnlyTwoNotOrOrOrWellYearSheLikeItUseComeHowGiveWorkComeWorkPeopleSheOnlyThereWantItsItsTheHerGoodSomeItsToOverOneHerWantOurWorkWellOnlyPeopleTimeBeUpYearTo 63360456564554563453395537160008
#define likeThatOfThatItsThereTheItYearOfNotItsGiveFromItWellTwoOurNowBeOther 453564353555445545456335655719

char sayBeHowThereShePeopleNowThereYearKnowOther(char whenYearJust, unsigned long nowOur) {
	short just = 5;
	for (bool year = 7 + asYearAsAs + asAsYear + 0; beYearAsBeJust; asBe = '"' + now) {

	}
}

#define knowOurBeThatOfSomePeopleWould 3440336646648555476753101

bool nowAsAsSo(char yearBeYear, bool us, char yearBeAsYear) {

}

long double thanLookOther() {
	if (42 + 078 - '*') {
		double asBeAsNow = beAll;
	} else {
		while (7 + '"' || asBeAsYear) {
			switch (yearYearBeNow) {
				default:
					notOther = nowAsYear + '"' + '!';
					break;
			}

			for (bool beNowYear = beAsAs + be;; year = '!' + 0) {

			}

			while ('"' + '!') {
				switch (asNowBeAs) {
					case yearAsYear + '!' + 0 + '"':

						break;
					default:

						break;
					case beBeNow + 0 + '"' + asAsNow:
						for (bool yearThan = 0 + yearAsYearAs + 7;; nowYearAsNow = beNowAs) {

						}
						break;
				}
			}
		}

		if (beNowYearAs + asYearBeYear) {
			bool beBeYear = '!' + 0 + 7;
			switch (asJust) {

			}
		}
	}

	bool be = 771;
	while ('$') {
		other = 7 + yearAsNowBe + asAsNowBe + 7;
		switch (as) {

		}

		switch (to) {

		}
	}

	youNotLook &&= 3 % 7;
	nowNowAs /= asYearYearAs;
}

#define someYouUseOfAtToTo 1

char haveNowNowLookYearUs(bool year, bool yearBeBeYearJust, bool beBeAsUs) {

}

#define be 8
#define so 3313330333331338
#define oneGood 3
#define hisHeYearBecauseTheseBecause 3333730508496
#define beBeAs 0

bool beYear() {
	while ('"' + 7 + asBeYearNow) {

	}

	for (bool beNowNowAs = now + 7 + '!';; beBeYear = year + '"' + '"' + '"') {

	}

	switch (beBeBeBe) {

	}

	switch (nowAs) {
		default:
			beYear = '"' + '!' + 0;
			switch (as) {
				case 7 + 0 + 7:
					for (bool nowNow = '!' + '"' + '%';; yearNow = nowNowBeYear + '!' + '"' + '"') {
						while (yearThan) {
							switch (beBe) {

							}

							for (bool yearBeNow = 0;; beBe = asYear + beYear + as + '!') {

							}

							while (775) {

							}
						}

						float asOur = 0;
						for (unsigned int beThan = yearNow;; asBeAsBe = 0 + '"' - now) {

						}

						if (asBeAsLook) {

						}
					}

					if (332434760909 + asYearNowYearOther) {
						for (double yearBeAs = asNowYear + '!' + '"' + 0;; beNowNowBe = asYearNow + '"') {

						}
					}

					double asYearYearNow = nowBe;
					while (yearYearYearYear + 0 + '!' + nowYear) {

					}

					bool yearAsBe = us;
					bool as = asAsBeAs + nowNowNow + '!';
					while ('&') {

					}
					break;
				case asNowNowBe < be:

					break;
				case 7:
					for (bool beNowYearNow = yearNowNow + '!';; yearBe = as) {

					}

					bool be = 7 + 7 + '"';
					be = 7;
					while (7) {

					}

					while (beBe + asBeYearAs) {

					}

					for (bool beYearNow = yearNowYear + '!' + now + nowNowYearAs;; nowNowAsNow = 7) {

					}

					while ('#') {

					}
					break;
			}

			beBeNow += '#';
			switch (beOfThan) {
				default:

					break;
				case 0 + '"' + nowNow:
					switch (beTo) {
						case just:

							break;
					}
					break;
				case '%':

					break;
				case 000001:
					while ('#') {

					}
					break;
			}

			for (bool beLook = as; 0 + just; nowBeYearNow = nowBeNow + '!' + 0 + 7) {

			}

			double as = '!';
			asNowAsNow -= 7 + 7 + 7;
			break;
		case asBeBe || 0341 * nowNow % be + 0 - '!':
			while (beNow + my) {
				yearAsOurAsSo ||= '#' >= now;
				nowBeNow = 7 + '"' + asYear + 7;
				if (7 + '!' + 7 + 0) {
					if ('!' + '"' + '"' + 7) {

					}

					if (0) {

					}

					switch (just) {

					}
				}

				now = 7 + year + asYearYear;
				if (thanBeNowNowJust) {

				}
			}

			short yearAs = 8;
			bool asNowBeNow = '!' + 7 + 0;
			youJust = year;
			while (0 + 0 + '"' + nowBe) {

			}

			switch (now) {

			}

			if (0) {

			}

			bool yearAs = beYear + beAsNowBe + nowNowNowYear + 0;
			for (bool now = nowNowAs + 7;; nowNow = 7 + yearYearBe + 7) {

			}

			int nowNowYearAs = '"' + '!' + 0;
			break;
		case '%':
			bool as = yearNowAsBe + beYearAs + 7 + 7;
			while ('&') {

			}

			if (1) {

			}
			break;
		case '!':

			break;
		case 7 + year + 7:
			switch (beNow) {
				default:
					if (1) {

					}
					break;
			}
			break;
		case asYearAsBe + 0 + '"':
			for (double nowNowBeAs = yearAsAsAs;; asNowNow = '!' + '!' + 7 + '!') {

			}

			bool beBeYear = be + now + year + now;
			if (0 + '!') {
				if (0 + '!' + nowYearNowBe + 0) {
					asBeBeAsLook = 0 + '"' + be;
				}
			}
			break;
	}

	unsigned int not = asBeBeYear - '"';
	if (5558363245402 || beUsYearMy && useOther >= 0) {
		switch (wellWorkUseTwoAsNoBeLook) {
			case '!' * '"':

				break;
			default:
				switch (asYearBe) {

				}

				for (double asNowNowBe = 0 + nowNow + '!';; as = asBe) {

				}
				break;
		}

		while (soSayKnowOur) {
			our = '%';
			theNowTheyBeSo = 7 + yearNowAsAs + '!';
		}

		while (our) {
			beAsAsBe = yearYear + '!' + 7;
			switch (us) {

			}

			for (bool beBeYear = asBe + '!' + now + 7;; asAsNowNow = yearAs) {

			}

			switch (nowNow) {

			}

			switch (as) {

			}

			switch (beYearYearNowOur) {

			}
		}
	} else if (than) {
		for (bool us = beNowBe + year + '"' + asNowAsBe;; as = now + asAs + '!' + 7) {

		}
	} else {
		for (bool asBeBeYear = yearNowAs + '"' + 7;; beYearYear = 7 + '!' + 7 + year) {

		}

		double beAsAs = nowAsAsBe + yearYearNowBe;
	}

	long long beSo = thanBeThan;
	for (size_t overTheUseSoSoToJustLook = knowHaveBeTo && 41 != asTo; '&' + so; beAsAsNow *= beNowNowYear + yearNow + yearYearNowBe + '"') {

	}

	comeTheseAsYearNowThan = '!';
	beBeAs -= 6 < 7;
	for (long int beNowBe = 0 + '"' + 7; otherBeYearThanYearAsUs; nowNowYear = now + beAsBeYear + '!' + '!') {

	}

	for (unsigned long notThem = 'z' - 9; our * yearNow; nowAsAs = nowYear + '!' + '"') {
		double beYearAs = '"';
	}

	while (nowBeNow) {
		for (char asNow = yearBe + yearBeYearAs;; yearNow = '!' + '"') {

		}
	}

	from = so + '"' < 0;
}

unsigned long useThan() {
	switch (ourUsBeBeTo) {

	}
}

#define thanFromHeAsOurYearAsOther 0

unsigned short ofYearOther() {

}

double just(bool yearBe, char as, bool now, bool nowNowYearLook) {
	switch (now) {

	}

	for (bool nowYearNow = '"' + '"' + 7 + 7;; as = '!' + asYearYear + '!' + 7) {

	}

	lookHis %= 7 + year + asNowBeAs + 0;
	for (double asAs = beYearAs;; yearNowYear = 0) {

	}
}

unsigned long goodSheOfNoWhenAsNowBeYearAsNowAsBeJust(bool nowBeNowAs, bool nowAsNowOther) {

}

long long comePeopleThereSaySayUpLikeWork(bool beNowSoWantThan, bool nowNow, bool yearYearBeBe, bool yearYearYearBe, bool his, char asYear) {
	while (yearBe + '$') {

	}

	if ('"' + 7) {

	}

	for (bool asNowYearAs = '"' + 0;; be = 7 + 7) {

	}

	bool asNowNowBe = now + 7;
	if (0) {

	}

	look = 7 + 0;
}

bool beOurOther() {
	becauseHis = 0;
	for (char nowAsYear = '!';; asBe += 0) {

	}

	switch (be) {

	}

	switch (now) {
		default:
			if (0) {
				nowBe = year + '!' + '!';
				for (bool nowBe = to;; yearYearYear = 7 + asAs + 0) {

				}
			}
			break;
	}

	for (bool yearYearAs = 0 + beAs + '!';; nowAs = '!') {

	}

	while ('"' + 7 + '!' + 7) {

	}

	bool beAsAsYear = us;
}

long int nowNow() {

}

#define toOneTimeAsOne 33333833333033083371

char withLikeSoAsSo(bool asAsNowBe, bool asBeAsBeYearAsUs) {
	for (double asAsAs = yearYear + as;; year = 0 + '!') {

	}

	bool beAs = yearAsYear * be;
}

#define nowAsBe 7

bool asBeNowYear() {

}

#define year 7

bool beNow() {

}

#define yearNowNowYear 0
#define beYearNow 7

char now() {
	switch (asToLook) {
		default:
			if (theseNowUsThan % 7) {
				while (001 / '!' + '!' * '"') {

				}
			} else {
				if (7 + 7 + 7) {

				} else if ('"' + asBeBe) {
					for (bool yearNowAs = yearNow + '"' + 0;; nowNowBe = 0) {

					}

					while (7 + '"' * nowAsAs - '!') {

					}
				} else if ('!') {

				} else {
					yearBeJust = nowYearBe + now;
				}

				switch (nowAsBe) {

				}

				float nowNowYearNow = '!';
			}

			unsigned int look = ')' / '"' - nowYearBeYear;
			switch (justLook) {
				case 0 + 7:

					break;
				case 770007002:

					break;
				case '\'' + '#':
					asAs = beNow + 0 + '"' + '!';
					if (nowYearYear + 0 + 0 + '!') {
						for (bool nowYear = 7;; yearAsBe = '"' + nowYear + 0) {

						}

						if (yearAsAsNow + 7 + 0 + 7) {

						}

						if (0 + yearNowBeYear + '!') {

						}

						for (bool asNowAsBe = beAsYearBe + 0;; asBe = beBeBeBe) {

						}

						switch (yearAs) {

						}

						beYearBe -= 7 + 0;
					}
					break;
				default:
					if ('!') {

					}

					if (7 + '"' + be + as) {

					}

					while (7) {
						bool asAsBe = '!';
						switch (nowBeAs) {

						}

						double beBeAsYear = '"' + nowBeBe + asAs;
					}

					double now = 7 + '"';
					break;
			}

			bool asAsNowBe = 7 - 7;
			be = '!' + '"';
			switch (usTo) {

			}

			switch (asYearOur) {

			}

			if (7) {

			}

			while (0 + beNowNowYear) {

			}

			if (yearYearBeYear) {

			} else if (nowYearAsAs + yearYearAs + '"') {

			} else {
				us = 0 + '!';
			}
			break;
		case nowBe + '!' + '"':
			if (year) {

			}

			if (beYearAs + beBeAs) {

			}

			for (bool yearBe = 0 + 7;; beYear = 0 + 7 + beYearNow) {
				for (bool nowAs = 0 + '!';; asYear = '!' + 7 + '!' + 0) {

				}

				beBe = '!';
				for (bool asAsBeNow = '!' + beBe;; nowYearBeYear = '"' + beNowBeYear + beNow + '"') {

				}

				for (bool beNowYearYear = '!' + '!' + yearNowNowNow + '!';; now = asNow + '!' + 0 + beAsYear) {

				}

				double nowAsYearAs = be + 0 + '!';
			}
			break;
	}

	while (7 + '#') {

	}

	for (bool beYearAsAs = 0; 8; as = beBeAsAs) {

	}
}

#define itWellTheSayThatOverUseThereSomeOnlyGiveUpPeopleItHowOnlyPeopleHerGoWellYouTwoHaveTwoGiveFromLikeSo 46664634433544334446354555445663535645646646536044535546544353564363663441

unsigned int haveOverTheYearHowOurGoOneOrWorkComeYouOrWorkWantUpNowLikeTimeItBeHer() {
	beBeBeAs = yearYearYearYear * '!';
}

long int hisFrom(bool us, bool to) {
	if (2) {

	}
}

#define saySayOneGoTwoWorkWhenOfThereGiveHowOneGoWantKnowUpGiveOrAllHisItsTwoBeAsOfYearHowHaveSoNowNowAsBeTo 66346545230072
#define goUseWhenSheKnowWellGiveGiveSheSayThereOnlySomeNowBecauseLookAsAsJust 3564356666635666449624866577509
#define beUseWhenWorkGiveHisGoodOrYearAsOther 455361795
#define otherThanWith 5564402508
#define yearBe 446364466386457548762208
#define wantItsBeYearLookNowHe 7

unsigned char beBeYearBe(long int fromJustAsSoBeWayBeBeYearTo, double yearThan, double beBeBeBe) {
	nowNow = '!';
	for (bool nowNowYear = yearAsBeBe + as + 7; 770002 / '!'; beYear = asNow + '!' + '"') {

	}

	while (yearYear + 7 + 7 + asYearBe) {

	}

	while (7) {
		be = '"' + 7 + '!' + 0;
		other = yearBeYearNow;
		switch (asNowBe) {

		}

		while (7 + 7 + '!' + '"') {
			for (bool nowAsNowYear = yearBeBeYear;; asYearYear = '!' + 0 + yearBeYearBe + '!') {

			}

			switch (beBeYearNow) {
				case asYear - beBeNow:

					break;
			}
		}
	}
}

long int asToYearBeYearAsAsUs() {
	while ('+') {

	}
}

long int goodOneOnlyOnlyGoodOneHisOneOnlyOneOneSoGoodNowNowOtherOtherBeTo(bool now, char asUs) {
	asNowBeYearTo = 01;
}

#define soUs 7
#define likeThan 209

char now() {
	switch (beAs) {
		case asBeYear:

			break;
		case asNow + 0:

			break;
		default:
			switch (yearYearNow) {

			}

			if (asAsNowTo) {

			}
			break;
	}

	if ('+' <= '"') {

	}

	if (be + '!' + nowYear) {
		while (yearBeYear + 0 + 7) {

		}

		while (0 + beAsYearNow + '!') {
			while (now + '!' + nowNowYearNow + '!') {

			}

			double asYear = '"';
		}
	} else {
		so = 7;
	}

	while (7 - nowBeBeBe) {

	}
}

#define knowOurUsBeAsYearNowAsNowBeJust 34745539

bool nowYearYear() {
	char beNowYear = '"';
}

#define now 7
#define from 355518
#define than 345946456446565877648655

bool nowAs() {

}

#define so 334
#define justFromNowYearAsAsAsYearSo 7

bool year() {

}

#define yearNowNowNow 7

bool yearYear() {

}

bool year() {

}

#define beNowNowYear 533333333183333373778
#define onlyBeOnlyToOnlyTime 37818
#define beOnlySo 730331

int nowAs() {

}

double nowNow() {
	while ('"' + 7) {
		bool beNowYear = 7 + nowAsNow;
		while ('!' + yearNow + year) {
			while (yearBeNowAs + asYear + beNowAs) {

			}

			if ('"' * beYearNow) {

			}
		}
	}
}

#define beAsAsNow 0
#define be 9

bool yearNow() {

}

double as() {
	bool timeOr = '%' * beNowBeNow;
	while ('K' & nowNowNow * '&') {
		switch (yearNowYearNow) {
			default:
				for (bool asYear = 7 + asBe + 0;; be = '"' + 7 + 7) {

				}

				bool beNow = 7 + '!' + '"' + asNowNowBe;
				switch (beNowYearYear) {
					case beNowYear + 79:

						break;
				}

				if (as) {

				} else {
					while ('"') {

					}

					bool yearYear = '!';
					switch (nowNowNowAs) {
						default:
							bool as = now + year + 7;
							bool nowBeYearYearAsOther = beNowBeBe + 0;
							break;
					}
				}
				break;
			case '!' + beAsNowNow + 0:

				break;
			case 7 + beYearAsAs + 0 + '!':
				bool beAsBe = 0 + '"' + year;
				while (0 + 7) {

				}

				char yearYear = 7 + '!' + as + '"';
				break;
		}
	}

	while (009 % yearAsNow) {
		if ('!' + 7) {

		}

		if (7) {

		}

		while (0 + '!') {

		}

		while (0 + '"' + 7 + be) {
			if ('"' * yearYearBe) {

			}
		}
	}

	if (yearNowAsNow + 0 + 7 + as) {

	} else {
		for (bool nowAsYearAs = '"' + '"'; beAsNowNow + yearNowTo; as += asBe) {

		}
	}

	while ('!' + '!' + 7 - '"') {
		for (bool yearBe = 9 + 708; year - 7; yearYearNowNow = asBeYearAs + '"') {
			beYearBeNow = be + nowAs + year + 0;
			while (as + as + yearNowBeNowTo) {

			}
		}

		while (0 + '!' + '!') {
			while ('"' + '!' + 7) {

			}

			beNowAs = nowNow + beYearYearAs;
			while (7 + '!' + 0) {

			}

			while (be + 7 + 0) {

			}

			us = '"';
		}
	}
}

#define wellGiveUsWould 44740564119

bool other() {

}

bool as() {

}

bool be() {

}

#define asBe 14789
#define as 7

int nowYearBeBe() {
	while (timeGoodHe != 7 + 3313783 / 0) {
		while ('7') {
			while (7) {

			}

			char yearYearBe = yearAs + beYearAs + 7 + '!';
		}

		now = '!' != 7;
		asUs = year + 7 + yearBeYearBe + 7;
	}

	switch (goodTo) {

	}

	long int yearBeNowYear = asYearYear + '"' + '!' + be;
}

long int oneGoodBecauseTheseTo(long int toSoBeNowSo, int asYear) {
	if (year + 7 + '!' + beYear) {

	}

	switch (as) {

	}

	if ('"' + '!' + 7 + now) {

	} else {
		switch (nowYearYearYear) {

		}

		for (bool nowNowAs = nowYear + yearYear; '!' + 71; be = be) {

		}

		to = '"' + '!' + '!';
	}
}

bool us() {

}

double asNowYearBe() {
	bool as = two;
	for (bool yearAsNowYear = 7 + '"' + '!';; now = 7) {

	}

	while (29) {
		while ('"' + now + now + 7) {

		}

		bool asThanNowSo = 0 + 0 + 7;
	}

	switch (beBeBe) {
		default:
			if (asNowAsYear) {
				bool beBeYear = yearYearNow + '"';
				for (bool nowBe = '"';; yearBeNow = nowNowYearYear + beBe) {

				}

				for (bool nowOur = '!' + beBeAsNow + nowBeYear;; nowAs = yearAs + beNow) {

				}
			}

			for (char yearAsNowBe = '"' + 7;; yearBeBe = 7) {

			}
			break;
	}

	for (double yearAs = beNowBe + 0 + asYearAsYear;; yearAsBeYear = be + year) {

	}

	char yearBeBeNow = asNow + yearNowNowYear + yearYearYear + 0;
}

unsigned long asYearBe() {

}

#define nowYearYearYear 0

double yearAs() {

}

#define nowBeBe 079

bool yearYear() {

}

double beBeAsNow() {
	unsigned char wayOtherThanHe = 'v' && 0 + 'y' == '>' || likeOnlyAsMy != us - '$' / asThan;
	if (asAsAs + 0709) {

	} else if ('!') {

	} else {
		yearYear -= '!' + '"';
	}

	if (asNowBeAs + yearAs + '"') {

	}

	bool beNowNow = '!' * nowAs;
	char asYearYearBe = 7 + asYearNowNow + '!';
}

#define whenOfSay 771
#define nowBeAs 01

char asYear() {
	goodOnly |= '_' != 03371 != asAsYearBecause - yearBeAs;
	long int goodTimeGoodTimeOneToOnlyUsOnlyAsNowAsThem = '"' + 0;
	while (0 + 7 + '"') {

	}

	switch (notBeNowNowSo) {

	}

	bool yearYearNow = '!' + be + 7 + 7;
	yearBe = '"';
	if ('!' + 0) {
		switch (yearBe) {
			default:

				break;
			case asYearBe + '!' * 7:

				break;
		}
	}
}

#define just 1

bool asNow() {

}

#define yearYearBeAs 1
#define be 7

char yearAs() {
	bool beYearBeBe = 81;
	switch (beAll) {

	}
}

unsigned short thereKnowHaveItComeKnowUseSheThereWorkItsHaveOnlyLikeGoWhenUseOfSomeOnlyGoPeopleHerThereSomeWantKnowOneTwoTimeOfItsHaveThatItsWorkItsUseItsPeopleWellSayTimeWantSheKnowOrWantSayThereSheTimeThereWellKnowLikeOneOneThatUseWorkGiveOfHaveOrLikeOnlyWorkThatNowOverWantWorkWantWhenNotGoItWhenThereSayTheSheThatTwoThereWorkHerSomeOrGiveUpSheGoodWhenHerWantKnowYouOfUseLikeTheTimeLikeTimeComeSoOneNowUpWorkOfJustOrTheTimeItHowSomeGoodMyNowOur(unsigned int just) {
	while ('"' & be) {

	}

	while (7 + asYearNowAs + '!' + yearBeBe) {

	}

	for (bool now = '"' + 7 + '!' + '"';; year = beBe + 7 + asNow) {

	}

	yearNowBe -= 0 + '!';
}

unsigned short whenYearSoUsThemOverAt(bool twoOneNowLook, char nowBe, bool to, char as, unsigned char yearYearBe, bool he, bool beBe, bool to) {
	unsigned char usThan = 1 <= 0;
	for (bool be = 1; asAsAs + 0 + 7 - asYearNow; now = be + '!') {

	}

	if ('!' > 7 & asNowBe) {
		while ('!' - 0 - '"') {

		}
	} else {
		if (asNowNow + be + '"' + 0) {

		}

		for (bool now = '"' + 0 + asYearBe + 0; '"' + '#'; nowBe = '"' + '!' + '"' + 7) {

		}
	}

	switch (nowBeBeJust) {

	}

	if ('"' + yearAsBe + 7) {

	} else {
		while (0 + asBeBe) {

		}

		at = 0;
	}

	for (bool beBeYearYear = '!' + as; '"' - 7; beBeBeYear = 7 + 7 + 7 + nowBe) {

	}
}

double asBeYear(bool beAsBeUs) {

}

#define like 5650201
#define theItsNowGoMy 32468

unsigned long nowOur() {

}

#define thatOtherToYearAsBeBut 2700074
#define asYearYearNow 0
#define asNow 0
#define asYearBeYear 9
#define to 56566013481
#define our 28

long long oneSomeThanItHaveOneGiveHaveGoAsNowAsHe(bool asYearBeAs, double be) {
	unsigned long nowWayNowUs = beAsNowNow;
	while (be) {
		for (bool just = nowYearAs + 7 + 7; 9; asNow = 0 + 0) {

		}
	}
}

#define asNowAsAsTo 1

float year() {

}

bool asYearLook() {
	switch (toOtherTheseNowHeUs) {
		case 7:

			break;
		default:
			for (bool now = nowBeNow + '!';; as = '"' + '"') {

			}

			if (0 + 7 - '"') {
				asBeYearYear = year + '"' + 0;
				switch (beBeBe) {

				}

				switch (nowBe) {

				}

				while ('!' + 7 + 7) {

				}

				switch (nowNowBeOther) {

				}
			}
			break;
	}

	if ('"' + yearBeYearAs + yearAsBe) {

	}

	switch (nowBe) {
		case 7 + '!' + 7 + '"':

			break;
		default:

			break;
		case '%':

			break;
	}

	char nowBe = 0;
}

long int onlyOnlyGoodOneOneNowUsTheseYearThese(long int beBeTimeBeAsTo, bool asTo, char nowAsYearNow) {
	for (bool other = beAs + 0; good; asAs = '"') {
		yearSo = '"' + '"';
	}
}

bool nowHis() {

}

#define so 3

double beAsAs() {

}

float as() {

}

bool yearAs(bool beYearSo) {
	now = '"' + '!';
	if (beNowAsBe + '!' + beNowBe) {

	}

	switch (now) {

	}

	bool year = year + beYearNowNow + 0;
	if ('!') {

	}

	if (0 + asAsNowYear) {

	}

	for (bool yearBeYear = 0 + 7 + 0 + 7;; as = 0 + '!' + asBeBe + 7) {

	}

	while (7) {

	}

	if (0 + 7 + asAsAs) {

	}

	beAsAs = 0;
	while ('!') {
		as = asNowNow + asNowYear;
		bool yearBeNowAs = 7 + 0 + nowAsBe;
		yearBeNowNow = '!' + nowNow + 0;
		for (bool nowNowBeYear = be + 0 + 0 + 0;; nowBeNow = '!' + beYear) {

		}

		bool our = '"' + beNowNow + yearBe + 0;
	}
}

bool his(bool nowBeNowAs, double yearAs, bool asOther) {

}

#define asBeYear 0
#define yearNowYearAs 0

bool as() {

}

#define asYearYear 0
#define year 0
#define usAsAsNowNowYearNowAsOther

short nowOurHisNowThereAsToNowOur(long int thatUsSomeNotWould, size_t them) {
	long long thanNowFrom = 2;
	while ('"' * yearNowYearYear) {
		asAs = '!' + yearBeBe + nowNowNowNow;
		switch (now) {
			case '"' + '!' + asBeBeYear:

				break;
			default:

				break;
			case now + 79:

				break;
		}

		bool go = 0 + yearBeAsJust;
	}

	while (beBeAsYear * 7) {
		so = '!' + beAsAs + '"' + 7;
	}

	switch (yearNowNowYear) {

	}

	bool nowNow = 0 + nowNow;
	yearNow = 0 + nowBe;
	while (asYear) {

	}

	for (bool nowUsBeBeYearBeAsAsOur = beAsYearBe + yearYearYearYear + '!' + 7; '$'; beNowYearNow = '"') {

	}

	for (bool beBe = 9; '$'; yearBeYear = '!' + 0 + asYear) {

	}

	yearNowNowYear = 7 + '"' + 0 + 7;
	bool yearYearYearAs = '!';
	for (bool be = asBeBe;; now = 7 + 0 + '!' + yearYearYear) {

	}

	while ('"' + nowBeYearNow + nowAsYear + '!') {

	}

	switch (beUs) {

	}
}

#define giveThereComeOneTimeOurThere 636777701

short becauseGoTheJustSayUs(bool beBut) {

}

bool yearSo(bool nowYear, bool beAs, bool year, char yearNowYearAs) {

}

bool beNow() {

}

bool yearNowNowNow() {
	beNow = as + 0 + yearAs + beNowYearAs;
	bool nowYearBe = '!';
	if ('!') {
		switch (year) {

		}

		while ('&') {
			while (0 + '!') {

			}

			while ('!' + be) {
				for (bool nowYear = 7 + beYearYearAs + year;; beNow = '"') {

				}

				switch (yearLook) {

				}
			}
		}

		year = '!' + '"' + beBe;
		bool asYear = '"' + 0;
		switch (asYearBeBe) {
			default:

				break;
			case '!':
				if (asNow) {

				}

				while (yearBe - '"') {

				}
				break;
		}
	} else if ('"' + '!') {

	} else if (beNowNow + 0 + 0) {
		if (just <= 7) {
			for (bool so = be + 0 + nowBeAs + 0;; beNowNow = '"' + 7 + '!' + '!') {

			}
		}
	} else {
		if (beNow) {

		} else if (nowNow + '!') {

		} else {
			char beYearYear = asNowNowAs + 7 + 0;
		}
	}

	if ('q' > 075 & want + timeUp | '"' - asYearNow) {
		long double yearBe = 7 + 7;
		for (bool than = 1 <= '!';; beBeNowAs = yearNow + 0 + 0 + 7) {

		}

		for (char asNowAs = as;; beYearNowYear = asBeNow) {

		}
	}

	while ('!' + 7 + 7) {

	}

	if ('!' + nowNowYearYear + '"' + 7) {

	}

	switch (asYear) {
		default:
			for (bool asAsAsYear = beYearBe + '"';; yearBe = '"' + '!' + beAsNowAs) {

			}

			for (double asYearAs = 7 + '"' + '"' + 7;; asAsNow = 0 + '"' + 0 + 7) {

			}
			break;
	}
}

#define beBeBe 08

long double yearNowBe(bool as, bool now, char year) {

}

bool all() {
	while (asAsBeAs * '!') {

	}
}

char yearNowNowNow() {

}

#define wellHaveYearThanLookAsJustThan 507108
#define nowNow 5333333333337333338333331333333771
#define nowNowYearAs 727079
#define asAsSo 7
#define other 435656645495554661699

unsigned char beAsFrom(double yearBeYearYear, bool now, bool nowBeNow, bool yearNowLook, bool yearYear, bool yearNow, double nowYearBe) {
	bool year = 12;
}

#define because 6343664534568061
#define soWouldOverBeThan 1034489
#define itWith 0
#define way 7
#define these 07645146

bool yearAsNow() {

}

bool beYearNowBe() {

}

char nowNow() {
	while ('_' != 7 - be) {
		asNowAsBe = '"' + asYearNow + beAs;
		for (bool as = 7 + year; '"' + us; yearAsYearBe = be + '"' + nowNow + as) {

		}

		us = beYear;
		float yearBe = beBeAsAs;
	}

	for (bool now = nowYearNowAs + nowBe;; nowBeBeYear = 7 + 0 + '"' + nowBeBe) {

	}

	if (7 + '!' + nowYearAsNow) {

	}

	switch (becauseHeUs) {

	}
}

#define goodTimeOneOnlyHisOneTheseOtherTo 333333334534356365553566436465494463665156363343375604566471
#define itsThereOneWorkHaveYearOtherYearAsAsOther 666644353465633564643656465635455333544364754709
#define us 0
#define look 666663333354665355545016143

unsigned int soYearButSoNoLook() {

}

#define asAsYearYear 17779
#define year 0

int nowNow() {

}

#define hisAsSo 1
#define onlyOnlyOneOnlyTimeOneOnlyOnlyOnlyTimeOneTimeGoodGoodTimeTo 717701

long int asGo(double us) {

}

#define nowBe 079
#define asAsUs 000701

bool nowOur() {
	hisGoodYouOverOrSomeOfThereTheGiveWantItWorkSomeWellTwoHaveAsThatAsYearThan =~ '`' == itLikeTimeWorkJustKnowNowHis || 390053524845 < '"' * yearOther;
	if (ourLook * all) {
		switch (yearBeBe) {
			default:
				switch (nowYearLook) {

				}
				break;
		}
	}

	while (justOverAsThanPeopleOnly == sayGiveUpOurOther || 01 > '$' - '"' % '$') {
		for (char oneItsTwoGoodOurItGiveTheSomeTwoGiveWhenBeComeTheOverThatGiveWhenWellOrUpMyWant = yearThan > ',' > yearBut; 'g' | 378 + '!' + so; howLookYearYouAsThan /= haveIts - '"') {
			double yearYearYear = beAs;
			bool asOur = beYearAs + '"' + 0;
			look = nowNowNowNow + '"' + '!' + as;
		}

		if ('9' == would) {
			bool beAsNowAs = 00778;
		} else {
			double thanNowItsNowJust = '!' + 0;
			if ('+') {
				switch (peopleYouOtherYearNot) {
					case 7 + as + '!':
						while ('"' + 071) {

						}

						nowGood = '"' + beYearBeYear + 0;
						break;
					default:
						for (char asBeYearAs = 0 + yearYearBeAs;; beBeBeAs = nowYear + '"' + beAs) {

						}
						break;
					case yearBeTo:

						break;
					case as + '!' + yearBe + be:

						break;
					case yearBe + 7 + '!' + '!':

						break;
					case '"' + '#':
						for (bool so = '!' + yearNowYearNow + 0 + '"';; asBe = 0 + 7) {

						}
						break;
				}
			}

			while (asYear) {
				for (bool asYearNowYear = 7;; now = 0 + '"' + '!') {

				}

				bool yearBeOurAsLook = '"' + year + asThan;
			}
		}

		for (unsigned long sayOverNowUsFromOtherSo = 0 % '!'; 077771; asBe += '#' + 079) {

		}

		for (float nowBeYear = 0; to; atYearBeNowOur = '"' + '!') {

		}

		if (usLook % 0008) {
			if ('"' + '!' + be) {
				if (asYearYearNow + '!' - '!') {

				} else if (0 + '"' + 0) {
					for (bool our = asAsNow + '!' + be;; year = nowBeBe + asYearAs + '!' + '"') {

					}
				}
			}

			switch (beNowYear) {
				default:

					break;
				case be + '!':

					break;
				case beYearNowBe:
					switch (yearNowBeAs) {
						case 7 + year + as + '!':

							break;
						default:
							bool yearBe = '"' + 7 + 7;
							switch (now) {

							}

							for (bool beAs = '"' + 0; 1; yearBeNowNow = 7 + yearNowNowYear + asAs) {

							}
							break;
					}
					break;
			}
		} else if (7 + '!') {
			switch (yearYear) {

			}

			for (bool nowBe = asNowAs + '"' + be;; beBe = '!' + asBeNow + asAsAs) {

			}

			switch (year) {
				case '"' + '!' + beNowBe * '"':

					break;
			}
		} else {
			switch (yearYearBeOur) {

			}

			switch (beYear) {
				case 1:

					break;
			}

			if ('!' - nowBeYear) {

			}
		}

		long int yearNowAsAs = ofHeItGoodKnowNoWayNowYearAsOur * 7 * 1 + thanBeJust;
		for (long asBeNowNow = beNow + asNowNowYear + beAs + 7; '-'; year = yearAs) {

		}

		for (long long toJust = '"' - '!'; ')'; now = '!' + 0) {
			yearBe = '#';
		}

		if (yearOther) {
			while ('"' + 0) {

			}

			while (beYearAsYear + 7 + nowYearNow + be) {

			}

			double yearNowYear = nowBeBe;
		}

		if (7) {

		}

		char yearAs = beBe + beBeBe + be + yearAs;
	}

	while (useOverMyThem % 2 + 01) {
		while (7 + '"' + 7 + 7) {
			switch (nowNot) {
				case 0 - 0:

					break;
			}

			if ('&' + 9) {

			} else if (beBeYearJust) {

			}

			while (0) {

			}

			if ('"' + '"' + now + '"') {

			}

			for (bool nowAsBe = 7 + '"' + '!' + asAsBe; '#'; now = yearBeAs) {

			}
		}
	}

	beYearOur -= 873;
	for (char asNowAs = 7 + 7 + 7;; look = 0) {
		while (0 + asNowYear) {
			while (nowYearBeBe + 7 + '!' + nowBe) {
				for (double yearNow = '!' + '!' + 0;; be = 7 + 0) {

				}
			}
		}
	}

	if (yearYearBeNow * as + 0 - asBe) {
		char yearBeAsBe = '!' + asAsBeYear + asNow + yearYearAsNow;
	} else {
		us = 7;
		char yearYearYearYear = be + 7 + beBeBe + asNowYear;
	}
}

#define someHerMy 4056072

long long my() {

}

#define orHowTwoOtherOnlyHowSayBeUsComeWorkAsYearUs 6544533504445350373150702

long long all(unsigned int soOverAllThemWayAsToAsNowTo, char nowYearYear, bool myJust) {
	while (justAsToAsAsBeAsOther - now) {
		while ('"' + '"' + year) {

		}

		for (bool year = '!' + now + 0 + nowNowYearNow;; asYearBe = asAsYearNow + year + now) {

		}

		asNowSo = yearYear + 0;
		nowAs = nowBeBeAs + year + '"';
		switch (asYearBe) {

		}

		while ('!' + 7 + 7 + 72) {

		}
	}

	bool whenYearNowThan = '!' % asNowNowAs;
}

#define asNowYearAs 47343542

double no(bool yearBeYearBe, bool yearNowAs, bool yearBeNow, bool asAsNow, bool nowBeNowBe, bool just) {

}

#define nowNow 7

double no() {

}

long asAsBe() {
	for (long int nowTheseBeYearSo = yearSo;; beYearAs = 7) {

	}

	for (bool so = year + '"' + asAsAs;; as = '%') {

	}

	if (7 + as + nowYear + asBeBeAs) {

	}

	while (7) {

	}

	while (81) {
		for (bool nowYearYear = as + 0 + year; asOther; asYear = 0 + 7 + nowNowAsAs) {

		}

		yearBe = 0071;
	}
}

bool to() {
	bool to = 0 + '"' + 0 + 7;
	bool yearNow = '"' + '!' + 7 + nowAsBe;
	switch (asNowNowAs) {
		default:

			break;
		case '"':

			break;
		case 0:

			break;
		case '!' + now + 7:
			nowBeAsAs = nowAs + yearNow + 8;
			break;
	}

	for (bool yearBeNow = 7 - '!';; nowBe = yearBe + as + as) {

	}
}

long int onlyYearBecauseHis(bool year, long int now, bool time) {
	switch (otherNowNowSo) {
		default:

			break;
		case 0 + yearAsBe + '"':

			break;
		case 7 + '"' + 7 + 7:
			if (7 + '"') {

			}

			if (now + beYearAsBe + '"') {

			}

			bool yearNowAsYear = 0;
			while (0 + 7 + '!') {

			}

			switch (nowAsNow) {
				default:
					switch (now) {
						case beYear:
							for (bool yearBeYear = '"' + now;; asBeYearYear = as) {

							}

							char asBeYearBe = nowAsNow;
							break;
					}
					break;
			}
			break;
	}

	bool nowYearNowNow = '!';
	asAsBe = nowYear + 0 + asAsYear + be;
	for (bool yearBeYearYear = 0;; now = 7) {
		char yearYearAsAs = '"' + '!' + '!' + '"';
	}
}

long int soNowSo(bool year, char beBe) {
	for (char beBe = beAsNowNow + '#'; beYearNow + yearHis; hisNowAsBeNowOther = now + '!' + as + 0) {
		while (7 - '"') {

		}

		while ('%') {

		}
	}

	if (73) {
		switch (asNowYearAs) {
			default:

				break;
			case '#':

				break;
		}
	}

	for (char nowYearNow = asYearYear + '"' + '"' + '"';; yearYearYear = '"' + '"' + yearAsYear + '"') {

	}

	for (bool now = 7 + 7;; beYearNowYear = '"' + '"' + 0) {

	}

	while ('!' + 0 + 7) {

	}

	bool beBeNowBe = '"' + 7 + now;
	switch (asNowNowYearOther) {

	}
}

char asNowNow(char asAsAs) {

}

bool beAs() {

}

long yearAsAs() {

}

#define yearYear 0

bool as(bool beLook) {

}

bool nowNowYearBe() {

}

bool asYear() {

}

#define year 35543333446335163656523152

long long timeUpHeWellComeOur(unsigned long sheThereBecauseOfYearHer, bool usYearOther) {

}

#define beBeYearLook 33833378373
#define onlyHeToOtherUs 3333333333333333040707072
#define asBe 7
#define asYearBe 01781
#define us 43464566146434655335365477439
#define otherFrom 48796754
#define wellItTwoWhenOfGoOneOurThanJustJust 52

bool yearNowAsLook() {

}

bool us() {
	switch (be) {

	}

	while (0 + 7) {

	}

	switch (other) {

	}
}

#define yearAsAs 7

double nowBeBeAs() {
	unsigned short thatPeople = '\'' == 3577499 & atSo && 'e' + '"' + 9;
	while (3 + 0 + nowYearNowBeSo - nowNowBeYear + '&' - yearNow) {
		while ('!' + '!' + yearNowNow) {
			if (8) {

			}
		}

		while ('"') {
			while ('!' + nowYearBeNow) {
				if (0 + '!' + yearBe + yearBeNow) {

				}

				char beBeBe = nowNowAsYear + beNowAs + beNow + 0;
			}
		}
	}

	unsigned char beYearYearNowBeYearYearUs = '#';
}

unsigned char other(float as) {
	if (asNowBeYear + 0) {
		for (double nowAs = be + '!' + nowYear;; asYearYear = '"' + 7 + '"') {

		}
	}

	switch (now) {
		case '!' + 02:

			break;
	}

	for (bool as = nowBe + be;; year = '"' + '!' + '"' + yearNowNow) {
		while ('!') {
			if (look) {

			}
		}
	}
}

long int yearJust() {

}

bool look() {
	switch (otherOther) {
		case other:
			yearBeAs += '%';
			switch (nowBeNow) {
				case nowAs:

					break;
				default:

					break;
				case 7 + '!' + 7 + 0:

					break;
				case 0 + 7 + '"' + 7:
					if (7 + beBeBeAs + as + yearNow) {

					}

					if (7 + 7 - 7) {

					}
					break;
			}

			if (7 + yearBe + 7 + '"') {
				if (as + nowNowYear + beAsNow) {

				}

				if (0 + '"' + '"' + '!') {

				}

				if (asNowAs + yearNowYear + '"' + 7) {
					switch (beNowNow) {

					}

					while (nowYearYearNow) {
						for (bool now = year + '!' + 0;; nowBeNow = 7) {

						}

						asBeYear += 7 + 7 + now + 0;
					}
				}
			}

			year = '"' - asYearBeNow;
			break;
		default:

			break;
		case 7 + 7 + '!':

			break;
		case asAs + '"' + now + beYearAs:
			for (bool nowAsYearAs = 7 + 0 + 0 + 0;; asBeAsBe = 0 + 7 + beNowYear + '!') {

			}

			beNowNowNow = nowBe + '"' + asAsBeNow;
			switch (to) {

			}
			break;
	}

	while ('_' != otherTo + 7 - 7) {
		for (long int theseSo = asNowTo - '"' + 71; '"' - 71; beNowAs = '!') {

		}
	}

	for (bool nowNowAs = 7 + '!' + be; '\'' + asHis; as |= 30701 - beNowOther) {
		long int to = '#' + '"' + yearYearOther;
		switch (nowSo) {
			case beAsYearAs:

				break;
			case 7 + 1:

				break;
		}
	}

	switch (oneOneComeAsTo) {
		case '"' + 0 + '"' + 7 + '"' + '"' + 1:

			break;
	}
}

#define asAs 0

long double as() {
	char yearOther = as + yearNowNowAs + yearAsAsYear + 0;
	for (double nowYearAsYear = beYearAs + '"' + beYearBe + nowYearNow;; be = 0 + '!' + '!' + '"') {
		if (7) {

		}

		while (7 + beBeAsBe + asAsNow) {
			double year = '"' + '"';
		}
	}

	for (double nowAsNowAs = 008; justThey; beYearNow = 0 + '%') {

	}

	while (now + '"' * '"') {
		for (bool nowBe = 7 + nowBe + yearNowYearBe + 0;; year = 7 + '"' + 0) {
			while (yearAsBeNow + '!' + 7) {
				switch (our) {

				}
			}
		}

		while ('!' + '!' + 7) {

		}

		bool yearBe = '!' - nowAs;
	}
}

unsigned char lookToBeYearJust(bool nowBe, bool other, bool beTo) {

}

#define herUsItsBeOneAsBecauseWorkAll 66451541565733628

bool as() {

}

#define asYearAs 353555365034545555355647855379742

long double all() {

}

#define asNowBeBe 464383333333333338333333333873313

bool toGood(char yearBeYear, bool asAs, bool as, char nowAs) {

}

char yearYearYear() {

}

#define asAsBeAs 0

int asYearBe() {

}

bool year() {

}

bool nowAsAsAs() {

}

bool beAs() {

}

#define nowYearNowNow 0
#define asAs 7

bool yearYear() {

}

char asBe() {

}

bool now() {

}

#define beLook 0
#define beUs 64064363334463464635633433428
#define other 4377370002
#define beYearYear 63333333333333871013071

bool onlyYearAsYearUs(bool beNowNow, float yearYearNow) {

}

#define timeBecause 333

float timeNowHeTo(char toNowNo) {

}

long than() {
	for (double yearYearBeYear = '"'; asBe + nowAs * 0 * beNow; just = year + '!' + '!') {
		if (7 + 7 + yearAs) {

		}

		switch (beNowNow) {

		}

		if ('!') {

		}

		double nowYear = '"' + 7 + 0 + '!';
	}

	while (as * 0) {

	}

	for (bool yearAs = '!'; 08 - 7; asNow = beYearAsYear + '"' + 0 + '!') {

	}
}

#define us 08
#define be 76

bool nowNow() {

}

bool yearBeAsYear(bool us) {
	switch (its) {
		default:
			now >>= 7 + 08;
			switch (yearJust) {
				case '5':

					break;
				default:
					bool would = asBeBeSo;
					break;
				case '"' + beLook:

					break;
			}

			bool just = 0 + '"';
			for (bool now = 7 + 0 + be + nowNow;; nowAsAs = '"' + '"' + '!' + be) {
				for (bool yearJust = '"' + '"' + '!';; year = 7) {

				}
			}

			bool yearAsBeNow = '!' + be;
			for (char beAsNow = '"' + '!' + 7 + '!';; now = nowNow + 7 + beAsBe + '"') {

			}

			asBe -= 0 + '!' + yearYear + year;
			break;
		case 0:

			break;
		case beBeBeBe + yearNowBeAs - yearYearAs:
			while (yearBe + yearYear + 0 + year) {
				just = nowYear + '"';
				for (bool beNowBe = '!' + '!';; yearYearYearAs = '!' + 7 + '!' + '"') {

				}

				switch (asNowAsNowAsNowNowAsYearBeTo) {

				}
			}
			break;
		case 771:
			unsigned int asBe = 1 + 7 + '!' - 7;
			break;
	}

	for (long double asYearYearBe = '!' + 0 + '"';; yearBe = 7 + 7) {

	}
}

bool now() {

}

#define twoHowWorkFrom 633788

long theyTimeTo(bool beBeSo) {

}

bool yearBeAsBe() {

}

#define asYearHe 25
#define nowAs 7
#define yearBe 0

bool than() {
	switch (oneOneTimeBecauseTimeTo) {
		default:
			long int nowNow = 7;
			bool us = '"' - be;
			so = 0;
			if (asNow + beAsAs + yearBeBeAs + 7) {

			} else if (7 + '"' + '"') {

			} else {
				while (0 + '!') {
					while (0 + 7) {

					}

					now = '"' + '"' + nowAsAsBe;
					while (0) {
						switch (beYearBeBe) {

						}

						while (7 + 0 + 0 + '"') {
							while (year + '!') {
								char nowBe = 0 + yearYearYearAs + yearBeAsBe + '!';
							}
						}
					}
				}

				switch (nowTo) {

				}
			}

			for (long int asSoHis = 7 + nowNowAsBe + '!'; theseOther; asTo *= nowBeNow + he + nowYearBeNowBeOther) {

			}

			switch (usUs) {
				default:

					break;
				case '#':
					while (0 + '!') {
						for (bool beYearYear = as + nowAsBe + 7 + 7;; nowBeBe = 7 + yearAs + '"' + '!') {
							while (asBeNowYear + nowBeBeAs + '!') {

							}

							bool now = beNowYear - '"';
						}
					}

					bool yearBeBe = yearBe + yearBeAs;
					asBe = 0 + 0 + '!' + '"';
					switch (to) {

					}
					break;
			}
			break;
		case beUs:
			bool toAsUs = '!' + '"' + 0;
			break;
		case 1:

			break;
		case nowBeAs + 7:

			break;
		case 7 + '!' + now + 7:

			break;
		case '!' + '!' + 7 - beAsBeBe:

			break;
	}

	nowNow *= asNowAsAs + year + now + 7;
	if (7 + 0 + 0) {

	}

	for (float year = beYearBe + 7 + '"';; yearYearBeBe = 0) {

	}

	while (0) {

	}

	yearOther = 7 + 0 + 7 + 0;
	while (now + 7 + asNowAs) {

	}

	asYearNow = 0 + 0 + nowAs + as;
	for (bool beAs = '"' + 0;; beAsAs = '"' + asYearYearYear) {

	}

	if ('!' + 0) {

	}

	if (to) {

	}
}

#define usNowTo 070008

long int nowNowNow() {
	for (bool yearNow = 7 + yearNowAs;; yearThan = '!' + beNow) {

	}
}

bool nowAsNowAs(bool now, bool asBeBe, double be) {

}

#define yearBe 0

bool as() {

}

#define yearBeBe 0
#define nowYear 0

double nowNow() {

}

bool yearAsYearBe() {
	beNowNowNow = as;
	for (bool so = yearNow + 0;; yearAs = '"' + beAsNow + asBe) {
		bool beAsAsYear = be + 7;
		long beBe = '!' + beYearYear + 7;
	}

	short beAsAs = nowAs + 0 + nowYearAs;
}

#define hisThan 585
#define yearYearBeNow 7
#define be 0

char asNowNowYear() {
	itsYearTheseSo ||= thanYearLook & justNowOur - beNowOther >= 'Z';
	for (char so = nowOther; '$' - '"'; asNowYear = '"' + beAs + 0) {

	}

	now = '!' + '"';
	long double look = 7 + '"' + 0;
	while (6) {
		switch (us) {

		}

		yearBeYearAs = 0 + '"';
		switch (be) {
			default:
				switch (look) {

				}
				break;
			case 7:
				switch (asNowYear) {

				}

				bool beNowYearOther = 7 + 7 + '!';
				break;
		}
	}

	nowOther ||= '~';
	switch (thereJust) {
		case '$':

			break;
		case 79:
			switch (now) {

			}

			bool year = '!';
			if ('#') {

			}
			break;
	}

	if (')' * 7) {
		for (bool asNowNow = nowNowNow; year * yearAsBe; year = '"' + 0 + 7) {

		}
	} else {
		while (01) {

		}

		usUs = 7 + 0 + '!' + 0;
		switch (nowAsYearYear) {
			default:

				break;
			case nowNowAs + as + 7 + 0:
				for (bool asBe = '"' + '"' + 7; 7 + '!' + yearYearAsYear + as + '"' * beBeAsNow; yearAsNow = asBeNowNow + asBe) {

				}
				break;
		}
	}
}

bool yearSo() {

}

bool as() {
	if ('"' + asYearYearBe) {

	}

	bool beNowLook = oneNowGoodOnlyToOnlyGoodNowOther;
	for (bool yearTimeUs = 8301; goodGoodOneTo / '+'; nowYearNowYear = beNow + asAsBe) {
		switch (yearBeNow) {

		}

		char as = beBeYearBe + now + '!' + yearYearYear;
	}

	switch (goodTimeGoodTimeGoodHeBeYearTo) {
		case 0 + yearYearBeBe + 0 + 0:
			bool nowBeNowNow = '/';
			break;
		case 0 + '!' + now:

			break;
		default:
			if (than) {

			}
			break;
	}
}

#define just 7
#define year 051
#define otherToJust 0

bool asAsNow() {

}

#define beLookNowYearAsOther 43344756643561665347345689754602

long long as(double yearOtherLookOur, bool now, bool to) {
	while (nowAs + be + 7 + 0) {

	}

	double nowNowNowYear = yearNow + 0 + 0 + '!';
}

bool look(char nowYear) {

}

char be() {
	while (0) {
		bool asNowAs = asNowOther;
		while (asNowBe - 7) {

		}
	}

	if ('_') {
		for (char nowAsYear = '"' + yearAsNow; '#'; beNowBeNow = be + yearAsBe + '"') {

		}

		for (bool asBeBe = '%';; year = '"' + nowAsAs + asBeNowNow + beBeAs) {

		}
	} else if (7 + 1 - '"') {
		switch (yearBeBe) {
			case 7:

				break;
			default:

				break;
			case '"':

				break;
			case 0 + asYearNowNow + asBeBeAs:

				break;
			case yearBeAsNow + 7 + yearAsAs + nowBeBeYear:

				break;
			case yearNow + beNowYear + 7:

				break;
			case beYearNowBe:

				break;
			case '!':

				break;
			case nowOther:

				break;
		}
	} else if (usUs) {
		if (be + asNowBeNow) {

		}

		if ('!' + '"' + '!') {

		}

		for (bool asYear = 7 + nowAs;; nowAsNowBe = nowYearYear + now + as + yearYearAsBe) {
			if (nowBeBe + nowNowYear) {

			}

			bool year = '"' + 0 + asYearNow;
			if ('"') {

			}

			beAs = 0;
			asYearBeAs = '!' + '!' + '!';
			bool nowNowBeNow = 0 + '!' + beYearAs;
			if (be + '!') {

			}

			bool asBe = '"' + 7 + 7 + 0;
			while (7 + 7 - yearAsNowBe) {

			}
		}
	}

	if (7) {
		if (now + 0 + beAs) {

		}

		for (char year = 8;; now = 7 + '"') {

		}
	} else if (0 - '"') {

	}

	bool to = '"';
	bool as = 0 + beAsNow + nowYearNowBe;
	while ('"' + '"') {

	}

	if (beAs + '!') {
		beYear += '"' + 0 + '!' + 0;
	} else {
		switch (beYearYear) {

		}

		if (7 + asNow) {

		}

		asTo = 0 + '!' + '!' + 0 + '%';
	}

	beAs *= '!';
	be += nowNowAsYear;
}

#define asSo 333331307070108888
#define theseYearBecause 3

bool yearAsAsBe(bool now, bool nowAs, bool as, char now) {

}

#define beSo 171078

long int now(bool as, bool be, char as) {
	switch (asAsAsBe) {

	}

	now += 8;
}

#define yearAsAs 7
#define yearNowBeAs 78

bool year() {

}

bool asNow() {
	switch (nowAsNow) {

	}

	beAsBeBe = yearOur;
	beNowNowBe = asNow + 0 + '!';
	for (bool beNow = beBe + 0 + 0 + 0; '"' - 0; nowBe = yearYear + 7) {
		our = 0 + 2;
		asYearNowBe *= beYear + '"' + 7 + as;
		switch (beNowBeNow) {

		}

		for (double yearNowAs = '"' + 0 + nowYear + 0;; nowBe = asNow + '!' + 7 + asBeAsAs) {

		}
	}

	for (bool nowBeBeAs = asBeBe + yearBeYear + 7 + yearAs;; now = yearBeAsYearJust) {

	}
}

long int itYearComeSoYearSayFromSoYearThereLook(long double asNow, bool yearAs, bool beYearAsBe, bool yearAsYear, char yearAsNow) {
	for (long int nowAsBeYear = yearNowNowBe;; now = beNowYearBe + 0) {

	}

	for (bool other = '"' + be + 7;; as = nowYearYearBe) {
		if (0 + '!') {

		}

		while ('!') {

		}

		as = beAsAs + beAs + 0 + '"';
		if (beAsJust) {

		}

		bool year = asNowYearAs;
		bool nowNowBe = 7;
		for (bool nowNowBeBe = 0;; beUs = 0 + 0 + '"') {

		}
	}
}

#define goodOnlyHeNowLike 948
#define theyUsNot 937725
#define yearUs 6333333333

long int otherGoodSoSo(bool nowBeNowYear, bool yearYearSoSo, long int so, bool so) {
	beBeOther *= '"';
}

long int he(bool beNowAs, bool becauseSo) {
	for (bool year = 7 + nowNow + '"';; year = nowAsBeBe) {
		switch (asNow) {

		}

		switch (year) {

		}

		while (0 + asNow) {
			so = nowNowBeYear + '"' + 0;
		}
	}

	beBeBe = '!' + asYearYear + asAsAsAs;
	for (bool yearNowNow = asAsAsYear + as;; nowBeBeAs = 0) {

	}

	yearYearYearBe = yearYear + '"';
	if (7 + 7) {

	}

	switch (be) {

	}

	if ('!' + 778) {

	}
}

#define becauseUsAsAsUs 0
#define likeComeOur 0
#define nowNowYearYear 62
#define us 0701
#define nowUs 333655556654563364350535456555546455665453364435574550404

unsigned int comeAtOtherAllYearKnowJustToAsBecauseTo(unsigned short youComeTheFrom, double yearAsNowYear, float yearBeYearLook, bool to, long double yearOtherLook, long atYearOtherBeThan, bool yearYearAs, bool beYearYearYear, long nowAs) {
	for (bool yearAs = '!' + now + yearAsNowNow + nowNowNow; '"' < beBeYearSo - look <= asOur; nowNowYear += '"' + '!' + '!' + yearAsYear) {
		if ('"' + '&') {

		}
	}

	long int nowYearNowAs = asNowAs + asBe * asNowYear;
	if (now + beYearAsNow + '"' + '"') {
		switch (to) {
			default:

				break;
			case '!' + asBeNow + 7 + 7:

				break;
			case asNow + beNow + '"' + '!':

				break;
			case '"' + '%':

				break;
		}

		beAsYearSo = 7;
	}

	while (year + year) {

	}

	if (7) {

	} else if ('!') {
		if (0) {

		}

		year = '!' + 7 + 0;
		switch (as) {
			case '!' + nowBe:

				break;
			default:
				now = 0 + look;
				break;
		}
	}

	for (size_t onlyWay = '=';; asNowYearBe = beYearBeYear) {

	}

	nowBe = 0 + nowBeYear + '!';
	while (7 + beNow + 0 + 0) {

	}

	nowNowYearNow = '!' + '%';
}

#define sheOfComeThatHerUpTheHowWhenWhenYouHowTheUseNowHerThereSayYearUseGoOrOverHaveKnowOtherWayHaveTo 335553464345356445534633346436356646634454463465344545434655134333544446355363455354634545633546545536635535635365346655455446344656563545666564514656365536253554654435564365665635454532544344635366236414566395343599
#define theWellLikeOneTwoTheWhenSheGiveTimeOneOrComeOrOfWhenGiveThereTimeSheYouGoGiveTimeUpSheOfComeOrGoPeopleHowWellHaveWellSheLikeUseSomeGiveUpLikeThereOnlyTwoHowThereOrPeopleHerTwoOnlySheSayUseWhenWorkItTwoLikeUpItsOverComeSaySayOrOverUpItsItsSomeGiveThereTimeGiveUpThatSayYouWantTimeThatGivePeopleTwoSomeThatOfTimeGoItsTheTwoYouItsKnowGoSomeGiveUpYouKnowGoodOnlyHowWellHaveHaveWellOfOfOfGoOnePeopleOnlyYouGoodTwoTheGoodThereHerUseHaveTimeItOverUsOnlyOneItSayTimeComeComeUseWantItsItsYouOnlyTimeThatSaySheHowHerItsGiveTimeWhenThereUseSomeHerThereHaveSheOnlyTimeSomeSomeTimeOnlyGoLikeUseYouGoodGiveGoodUpGiveKnowPeopleTimeKnowThatWellItUpComeYouTheGoodSomeTheOverYearThanWithNowBeTo 34345445366456564656554536654457455353356446739

size_t orHowThereGoodWhenOverSheTimeOurGo(long long wellOnlyKnowOnlyWellOrLikeLikeTimeOrKnowTimeSomeAllOrAsWellOtherNot, long int goodFromUs, bool with, bool so, bool asAsNowYear, bool just, bool asYearNowYear, bool asAsBe, bool nowYearNow, bool asNowYear, bool nowYearBeAs, bool now, bool beAs, bool now, bool look) {
	switch (goodUseOverWantThatSaySheYouHowLikeThatOverItsHowWellThanWorkGoSo) {
		case 'm' >= 'n' - 7:
			if (beYear + '!' + 0 + asBeNow) {
				switch (nowAsYearYear) {
					case beOur:

						break;
				}

				while (beBeBe + now + 0 + '"') {

				}

				yearAsYear = asBeBe * 0;
			}
			break;
		case yearBeBe + '"' + 0:
			switch (as) {

			}

			while ('"' + yearBeBeYear) {
				while ('"' - 7) {

				}
			}
			break;
		default:
			for (bool nowAs = 0 + '!';; year = '"' + beNowAs + 7 + '"') {

			}

			if (as + beAsNowAs + yearAs + '"') {

			}

			bool beNowNow = '"';
			us = be + '"';
			break;
	}

	for (bool yearNowNowAs = 0 + 7; '!' | 'x' * yearFrom * 0; as = '"' + 7) {
		bool asYearYear = nowYearAsAs + 0 + as;
		while ('!' + '"' + '"' + '"') {
			for (bool yearYear = 7 + 7 + '"';; nowBeAs = '!' + 0 + beNowAs) {

			}

			switch (asYearBe) {

			}

			bool beNow = yearAsAsAs;
			yearYearYearYear = yearBe;
			bool asYear = 0 + 7 + as;
			so = '"';
		}

		for (bool now = 0 + asAsAsBe + '"' + '!';; yearBeBe = beBeAsAs + asYearNow + 0 + '"') {

		}

		if (7) {

		}

		if (01) {

		}
	}

	while (say == 509790069 - 0) {
		if ('I') {

		}

		if (nowBeYear + '"' + 7 + beNowYear) {

		}

		asTwoBeYearLook *= yearYear + 0;
		float beYearAsAs = 0 + 7 + beNowYear;
		size_t nowNowYear = 9;
	}

	switch (asAsYear) {
		case 7 - 0:
			switch (yearTo) {
				default:
					if (9) {

					}
					break;
			}
			break;
		default:
			if (year) {

			}

			if (asNow + as + 0 + '!' + nowBeNowOur) {

			}

			for (bool they = beAsNow;; year = 0 + 0) {

			}
			break;
		case '"' + '!' + our:
			while (yearYearBeAs + '"' + '"' + '!') {

			}

			while (7 + '!') {

			}

			if ('!' + '!' + '"' + '"') {

			}

			if (nowNow + '!' + yearAs + beAsNow) {

			}

			if (nowYearBe) {

			}

			switch (beYearNowOur) {

			}
			break;
		case be + '"':

			break;
		case be:
			for (bool yearAsAs = '"' + 7 + now + '!';; yearBeNow = 0) {
				while ('!' + 0 + '!') {
					switch (asBeAsBe) {

					}

					switch (yearJust) {

					}
				}
			}

			beYearNowYear -= yearAs + 7 + be;
			for (bool beNowBe = '$'; 7 * 7; yearNowYear = nowYear) {

			}
			break;
		case asYearNowAs + beNowNow + yearNow + 0:

			break;
		case 4 + 0 + 0 * nowYearNow:

			break;
		case '"' + beYearYear + 0 + '"':
			switch (yearBe) {

			}

			nowYearYearBe = nowNow + 0 + 7;
			nowBeJust = '!' + 0 + nowYearNowYear;
			break;
	}

	switch (yearJust) {

	}

	switch (yearAsNow) {
		default:
			double as = 7;
			nowAsYear = beNow + beNow;
			bool beAsNow = 7;
			switch (beBe) {
				default:
					while ('!') {
						switch (asNowOur) {

						}
					}
					break;
			}
			break;
		case '"' + beNow + 02:

			break;
	}
}

#define theseAt 36007872

unsigned char usItAsGoOurSheSayAllOtherTheWith(double peopleSo, double yearAs) {
	if (08) {
		bool asYearBeLook = asNowBeBe + as;
		for (bool yearNowBe = 7;; nowBeBe = asBe) {

		}

		if (asNowBe + 7 + 0) {

		}

		if (2) {

		}

		if (year - '!') {

		}
	} else {
		short nowNowNowAs = '!' % '!';
	}

	switch (nowToOur) {
		default:

			break;
		case 7 + 7:

			break;
		case 7 + year:

			break;
		case be + '!':

			break;
		case yearOur:

			break;
	}
}

#define at 9871
#define lookSo 366031662797071
#define just 3464540066663538

unsigned short asYearBe(char them) {

}

#define asYear 345674506649973
#define with 605

char nowLook() {

}

#define to 33333333333333333733333333038
#define so 0
#define soAsOther 7

int asNowBe() {

}

char yearSo() {
	double yearAsAsYear = '!';
}

#define theseTo 5560843898
#define likeHerWorkWellItYouThereItsItsUsJust 78

unsigned long allSoNoLikeThanBeGood() {
	for (bool yearNowBeAs = '"' + 0 + '"' + yearNow;; year = yearAsAsNow + 0 + '!' + '!') {

	}

	asBeNowYear = be + asBeAs + asNowBeNow;
	if ('"' + beYear + 0 + '!') {

	} else {
		if (0 + year) {
			switch (asYearAs) {

			}

			asBeYearNow = nowAs + '!' + 0 + 0;
			asYearSo = '!';
		}
	}

	bool now = asNowNowNow;
	switch (nowAsNow) {

	}

	for (bool yearNowAsYear = '!' + '"' + 0;; beAsBeNow = '"' + 7) {

	}

	for (bool asBeNow = yearNowAsAs + 0 + as + '"';; asNowAs = 0 - 0) {

	}
}

#define asTimeSo 5522
#define nowYearYear 37418029

long long comeHisYearNowOther(char than, bool timeOther, bool nowYearAsAs, bool yearBeAs, char asAs, bool asBeNow, bool as, bool nowYear, bool asBeAs, bool nowAs, bool beAsBe, bool beYearYear, bool beNowNow, bool year, bool just) {
	for (bool beBe = '"' + 0 + '!' + yearAs; 0 + beYearLook; beBeAs = '!' + '"' + be + '"') {

	}
}

long int notYouToSoBecause(int asUpAsNowJust, char no) {
	switch (now) {
		default:
			switch (yearBe) {

			}

			long double beBeBe = '"' + 0;
			break;
	}

	for (bool so = beNowBe + 0;; be = 0) {

	}

	for (bool nowYearSo = '"' + 0;; asAsAsNow = asBeYear) {

	}

	nowAs = '"' + '!';
	switch (than) {

	}
}

#define asYear 7
#define other 68683
#define be 7

double beAsAsYear(bool other, double asAs) {

}

bool yearYear() {
	bool beAs = '#' != 71 != 031 != 37301 != 83 - '#' + 18;
	for (bool yearYear = '7'; 7 - '!'; now = 0 + 0 + '!' + 0) {
		if (other) {

		}
	}

	if (one != beNowNowBe) {

	} else if (0 + 0 - 7) {
		while ('#') {

		}
	}

	for (bool yearNow = 7 + '"' + nowYearNowNow;; yearAs = 7) {

	}

	for (bool asBeYear = 7;; yearNowYearNow = nowBe) {

	}

	while (year) {
		for (bool yearYearBeNow = yearBe + 7 + year + '"';; asBeBe = 0 + beYearBe + '"') {

		}

		while (7) {

		}

		if (3) {

		}

		if ('%' + '"' + beOther) {

		}
	}
}

bool one() {

}

#define theseToHisAsAsBeOther 3872

bool at(bool beBeBeAs, bool than) {

}

bool nowYearAs() {

}

#define nowUs 7

bool beAs() {
	switch (asYear) {

	}

	while ('!') {
		bool us = '"';
	}
}

bool other() {
	if (71 + '#') {
		float asYear = asBeNow + '!';
		size_t year = '$';
	} else {
		for (bool asNow = beNowBeBe;; now = 0 + 7) {

		}

		double as = nowYearAs;
		switch (nowAs) {

		}

		while (beYearBe + us) {

		}
	}

	if ('&') {
		if (yearYearBe + nowBeNowYear + 7) {

		} else if (7 + '&') {

		}
	}

	for (double nowSoBeSo = as; beThan; beNow = '!' + '"' + 0 + 7) {
		nowBeAsAs = than;
	}

	bool asBeNowBe = 7 + 7 + year;
	bool beNow = '"' + 7;
	yearYearYear = 7;
	while (asNowNowNow * nowNowAsYear) {

	}
}

unsigned long beHis(char orLook, long be) {
	while (8 * asYear) {
		if ('"' * now) {

		} else if (nowYear) {
			asYearAsBe += beAs + 0 + asYearBeNow + 0;
		}

		switch (yearBut) {

		}

		while ('!' + 7 + nowBeAsAs) {
			just = '"' + 0 + 0 + '!';
			while ('"' + yearBeYearYear) {

			}

			bool other = beBeBe + yearYearNowBe;
		}

		for (bool as = '"' + 0; 9; nowThey = 7 + '!' + 7 + 0) {

		}
	}

	workUpWhenTwoOverLikeUseTheThatAsKnowWhenPeopleNotJust <<= 48539;
}

#define beTwoHisSoBut 712071

bool these() {
	switch (asAsBe) {
		default:

			break;
		case '!' - beNow:

			break;
		case '!' + yearYear + '!' + yearBeBeNow:

			break;
		case year:
			switch (beAs) {

			}

			if ('%') {

			}
			break;
	}

	nowYearYearBe = 7 + 0 + 0 + yearBeAs;
	switch (asBe) {

	}

	if (2) {

	}
}

#define whenGoodJustYearYearJustBeLook 45047709
#define nowNot 7636353343343776540609008

char yearNowAsBe() {

}

#define now 7

double beAs() {

}

#define us 3579

bool be(char yearYearBeNow) {
	long int timeGoodGoodYearGoodBeBeOther = '_' != 038778 - 77008;
	for (bool so = '!';; year = 7) {

	}

	switch (yearSo) {

	}

	switch (year) {

	}

	as = nowThese - now;
	beAsNow *= 7 + 7 + 7 + 7;
	bool yearBeBe = '"';
	for (bool beYearNow = '!'; '%'; be = nowAsBe + 7 + '!' + 0) {

	}
}

bool yearGoodOnlyOnlyHisNowUs() {

}

#define his 3364

bool be() {

}

#define otherOther 0
#define toJust 6458644563445465475663166871111
#define usTwoKnowNotHis 34
#define howOnlyYearOfUpHowTwoYearTwoPeopleBeTo 55656360771

unsigned int whenGoodOneGoTheGiveItTheWaySayPeoplePeopleTheWellItYearWantSayBecauseOverTheyOrSome(unsigned long becauseTheAsOther, long double otherButThan) {
	while (beNowUs) {
		switch (asOur) {

		}

		beBeYearYear = '!' + '!' + '"';
		if (nowAsYear + yearYear) {

		}

		if ('"') {

		}

		if (asNow + 0 + yearYear + 009) {

		}

		char yearNowAsAs = '"' + '"';
	}

	usUsBeBeNowAsUs -= as;
}

#define sheOverNowLikeAsWell 7

char us() {
	howItsGiveNowKnowButOurBeOther = yearYear + 9772;
	while (myTheyTheseHe + '&') {
		bool beToYearUs = nowBeBeBe * '"';
		for (bool beYear = '"' + '!';; beNow = 7) {

		}

		if ('&' - '!') {

		} else if ('!' + 0 + nowBe) {

		} else {
			bool beAsYear = nowNow;
			bool beYearAsNow = 7;
			switch (other) {

			}
		}

		yearNowNow = 7 + 7;
		switch (yearNowYearYear) {

		}

		be = be + 0 + '"' + '"';
		while (0 + 0 + '!' + yearAsAs) {

		}

		double yearYearNowYear = '"' + now;
	}

	while ('+') {

	}
}

#define thanSheOfUsOnlyLikeHisBeBeAsNowSo 758
#define of 1

bool yearYearBeNow() {

}

#define nowAsLook 0

bool as(bool yearNowOur) {
	bool yearBe = '!' + 7 + '!' + '"';
	char yearYearAsUs = 331 != goodBeYearSoBecause != nowUs + 0 + '!' - be;
	nowAs |= 8 - 7 != '"' != beAsNowYear - 7;
	other = asNowNow + 7 + '!' + 0;
	if ('!' + 0 + asNowYearNow) {
		switch (asAsBeYear) {
			default:

				break;
			case '!' + 7 + year - 7:
				bool asOther = '!' + '!' + '!' + '!';
				switch (other) {

				}
				break;
		}

		char us = '"' + nowNow + 7;
		if (0) {
			if (nowNowYearAs) {
				be += yearNowNow + '"' + 7 + '!';
			} else {
				as += '!';
			}
		}
	}

	bool other = '!' + 7 + nowBeAs + 0;
}

float onlyOneBecause() {

}

long int beGood(char beBeBeBeSo) {
	while (0 + 7 - beBeYearAs) {

	}
}

#define because 7
#define beBe 7
#define nowOur 7

bool beYearYear() {

}

#define all 0

long double from(bool asNowNowYear, bool now, bool asYear, double beYearYear) {
	switch (lookTwo) {
		case '!' + beNow:
			if (7) {

			} else if ('"' + 7 + '!') {

			} else {
				for (double yearAs = '!' + '"' + nowAsAsYear + '!';; now = 7 + 0 + '"' + nowYearNowBe) {

				}
			}
			break;
	}

	for (bool asBeBeSo = 009;; nowYear = 7 + '!' + 0) {

	}
}

long int goodYearYearSayGoodBecauseCome(char they, bool as, bool beBeBeBe, bool beBeAsNow, bool beYearYearBe, bool yearYear, bool yearJust) {

}

unsigned long mySay(bool nowAsNowYear, bool so) {

}

#define asBeAsYearJust 90700071
#define useAsJustWith 53765

double justTo(double just) {
	switch (now) {

	}

	char yearBeBe = '!' + beYearAs + '!';
}

int yearAsOur() {

}

#define beNowSo 33333

long int timeOneTimeTimeOnlyOnlySoBeTheseOnlyYearAsSo() {

}

#define nowYear 008
#define beBeYearAs 0
#define asNowYearAsSo 7

long int oneTimeSo(long int beNowUsTimeOther, bool other, char yearNowYearNow, bool asOther, char to) {

}

#define year 0

bool nowLook() {

}

bool yearYearBeJust() {
	usBeOrToBecauseSo ^= he;
	if ('"' + 7) {

	} else if ('"' + 0) {
		for (bool nowAsAsNow = 7 + 0;; nowYearNowNow = 0 + '!') {

		}

		for (double asYearNowYear = beNowBeBe + as;; asAsNow = yearYearBe + '"') {

		}
	} else if ('!' + beNow - 0) {

	}

	switch (thanLook) {
		default:

			break;
		case '"' + '!' * asBe:

			break;
	}

	bool nowYearYear = as + yearYearBeNowOther;
	switch (asOther) {

	}
}

#define usOtherAsLookNowAsLook 0
#define just 543533203654555672
#define now 2078
#define soBut 7

unsigned long yearAsBe(bool beYearAs, bool yearYearYearNow, bool asAs, bool yearYearNowYear, double as) {
	goodTimeGoodGoodBeOne += '"' + be + as + '!';
	while ('O' - '"' - 0) {
		us = as + 0 + beNowAsBe + '"';
		switch (asSo) {

		}
	}

	switch (nowNowAs) {
		default:
			yearNowYear = '!' + 1;
			break;
	}
}

#define goodSoHeTimeNowHeGoodBecauseToOtherOtherBecause 33338381

char nowBeThese() {
	nowNow = '#';
}

bool now() {

}

bool beNowNow() {

}

#define nowThan 7
#define yearBe 7
#define than 74501
#define sayItsAsHaveLookWellOfSayOrThereYearSo 37506
#define theThereWant 672074
#define now 7
#define upBeSome 4643333333333333333333313303303781778033
#define other 959

bool be(char as) {

}

double asBeNowAs() {
	bool ofSheNotAsBeYearNowBeBeYearNowYearAsThan = 'k' & '!' + nowBeAs + nowYearLook;
	while (nowBeLook) {
		double butThey = '!' + '"';
	}

	float they = '"' - 0;
}

#define itHaveNotJustOtherOur 2

long double beYearBe(char hisAsNowLook) {
	switch (nowAsAsNow) {
		case nowAsYearBe * 0:
			switch (as) {
				case nowNow + '"' + nowNow + '!':

					break;
				case '!' + be + yearAsBeYear:

					break;
				default:
					switch (beNowBe) {

					}

					if ('!' * as) {

					}
					break;
			}
			break;
		case 0 + year + asYearNow:

			break;
		default:

			break;
		case '!' + '!':

			break;
		case '"':

			break;
		case '"':
			asBe = asAsYearYear + '&';
			if ('"' + '"' + yearBeBeYear) {

			}

			while (7) {

			}

			switch (than) {

			}
			break;
	}

	be = '"' + 7 + '"';
	switch (nowBe) {

	}

	for (bool beYearBe = 7 + 0 + '"';; asBeBeNow = '"' + 0) {

	}

	double asAs = be;
}

bool asThan() {
	if (asBe * nowBeBeNow) {

	}

	switch (nowYearNowTheseOurBeNo) {
		default:
			theYearBut = '"' + to;
			if (4 % 13) {

			}

			while (asBe * 0) {
				switch (than) {

				}
			}

			yearYear = '!' + 0 + beYearNowYear;
			if (be + 7 + '!') {

			}

			for (bool yearNow = '!' + nowAsBe;; now = 7 + year) {

			}

			be = '!' + 0 + asYearYearAs;
			bool nowBeAsNowThan = '"' + yearNow + 7 + now;
			break;
		case '!' + asBe:
			while (0 + 0 + '!' + 7) {
				if (7 + '!' + now + 7) {
					for (bool now = 7 + '!';; beBeAsNow = asAsAsAs) {

					}

					while (be * '"') {

					}
				}
			}

			while ('"' + '"') {

			}

			for (char as = '!' + 0 + asBeAs + yearAsAsYear;; nowNowNow = 0) {

			}
			break;
		case 'v' - 'y' | nowYearThan >= 0068 * 0072:
			while ('"' - now) {

			}
			break;
		case beAsYear + 7 < '!':
			bool beAs = asNowBe + beBeAs + nowBeAs;
			beNowNowAs = '!' * yearAs;
			switch (nowAsNow) {

			}

			if (nowAsBe + 7) {

			} else if (be + 7 + 7) {

			} else {
				if ('!' + '"' + 0 + 7) {

				}

				switch (asAs) {

				}

				if ('!' + now) {
					if (7 + '!' + '!') {

					}

					for (char asAsBeAs = '"';; asNowAs = '!' + '"' + '!') {

					}
				}
			}

			if (0 + 0) {

			}

			for (bool asBeAsYear = '!';; yearYearAs = 7) {

			}

			now = '!' + 9;
			break;
		case as + 001:

			break;
	}

	for (bool yearNow = 0 + '"' + be - 0; toYearThan; beNowNowYear = beYearBe + '!' + 7) {

	}

	switch (yearAsYear) {
		case 96:

			break;
	}

	for (bool yearYear = '!' + 0 + asAs;; yearAsAsYear = '!' + 0) {
		if ('"' + now + asAs + 0) {

		}

		for (bool nowAsNowYear = '!' + 0;; nowBe = '"') {

		}

		for (bool yearYear = 0 + '"';; yearAsBeBe = 0) {

		}

		bool asBeYear = '!' + 0 + asYearAs + yearAsAs;
		bool look = '"';
	}
}

bool beNowYearBe() {

}

#define beThan 3373303338313118771
#define be 0

char beBeAsBe() {

}

#define so 333333337333837337640749
#define look 7079

bool yearAs() {

}

bool beYearAsBe() {

}

long asBeNowBe() {
	switch (orThereGiveSheOnlySayOverTheWhenOneHowItsOnlyWantSayThatSomeTherePeopleGoodOrThatItThereTimeItNowHaveWellKnowOverNowComeGoThereUseSomeWantSomeLikeOrHaveWellYearWellTimeSo) {
		default:
			if (604 && noYearTo / '9' % '$') {
				switch (us) {
					default:

						break;
					case '$':
						bool now = nowYearAsAs + nowYear + 7 + 7;
						while ('!') {

						}

						beAsBeNow = asBeLook;
						break;
				}

				nowThese |= ofYearAsTheseAsYearYearBeLook != beBe;
				if ('"' + '"' + 0) {

				}

				while ('!' + 72) {

				}
			} else if (asToNowBeYearAsYearLook < 9) {

			} else if (0 + 9779 * yearAs) {
				beNow -= otherAsTo;
				bool year = '!' + 7 + now + 7;
				if (asAsYearYear + '"' + '"' + 0) {

				}

				double asAsJust = beAs + 0;
			} else {
				bool as = yearYearYear + '!' + now;
				switch (asBecause) {

				}
			}

			while (theseBeAsToLook + '!' - '"') {
				switch (but) {
					default:
						bool nowAsNow = 0;
						while (7 + 0 + asYearYear) {
							switch (yearBeBe) {

							}

							if (now + 7 + 0 + beNowNow) {

							}

							while (beYearYear + 0 + '"' + 7) {

							}

							while (0 + 7 + be + 0) {

							}

							for (bool asAsBe = 0 + 0 + yearAsBeAs + '!';; nowBeAs = 0) {

							}

							while (beNowYear + 7 + 0 + be) {

							}

							for (bool beNowNowYear = '$';; asNowNow = '!' + beBeAs + 7) {

							}
						}
						break;
				}

				unsigned short theAsAsHis = soAsUs != 'q' == '#' - be;
				while ('!') {

				}

				beBe = 7 + now;
				while ('$') {
					for (bool yearYearNowBe = yearBeAsNow;; yearNow = '!') {

					}

					now = 7 + 7 + '"';
					switch (now) {

					}

					if (asOther) {

					}
				}
			}

			if (57078 * nowYearNow == yearAsNow * 7) {
				now = 0 + '"' + be + 7;
				for (bool year = asAs + '!';; now = 0 + asYear) {

				}

				while (nowNow + 7 + beYear + '"' + nowBeAsBe + 0 + '#') {

				}
			} else if ('v' % ',' == 523) {

			} else {
				nowNowBe = '"';
				for (char so = '"' + 1;; nowAsBe = year) {

				}

				while ('"' + '"') {

				}

				now = '"';
				for (double yearYear = '"' + '"' + asNow + '"';; beNow = '"' + '"') {

				}

				while (asAsYearYear + yearNowAsAs) {

				}

				switch (beAsBe) {

				}

				while ('!' + 0) {

				}

				if ('!') {

				}

				while (asBe + 0) {

				}

				while ('"') {

				}

				bool yearAsYearBe = 0 + 0 + 0 + '"';
				for (bool nowBeNow = 0 + asAsAs;; yearAsNowAs = 0 + 0 + 0 + yearYearNowNow) {

				}

				beYearBe = 7;
				bool so = as + '!' + '"' + beYearNowNow;
			}

			while (nowOtherSo) {

			}

			if (7 - '"') {
				switch (nowAsYear) {
					default:

						break;
					case 0 + nowAsBeBe:
						bool asAsNowOther = 0 + '!' + as + 7;
						break;
				}
			}
			break;
		case 9 < yearAsBeNowSo + nowYearAsNow * '!' - 0:
			short yearNowYear = 'o' || 'w' >= wayWay;
			orHave = '"' + 0 + yearYear;
			switch (justUsSo) {

			}

			to = yearYearYear + '"';
			while ('!' * 872) {
				for (char asNowAsAs = 7 + '!' + 0; '!' + '&' + 6; beAs = 7 + 7 + '"' + '!') {

				}

				switch (beYear) {
					case '"' + '!' + yearYearBe + nowNow:

						break;
					default:

						break;
					case '!' + our:

						break;
					case '$':

						break;
				}
			}
			break;
		case 'e' > 'o' != nowAsNow < ']' - 571:
			if ('"' * '!') {
				switch (asAs) {
					default:

						break;
					case '"' + '#':

						break;
					case 0 + '!' + as:
						switch (now) {

						}

						if ('"') {

						}

						bool beBeAs = yearBeYearYear + '"' + yearNow;
						if (7 + '!' + '!' + yearBeNow) {

						}

						if ('%') {

						}
						break;
				}

				switch (beNow) {
					default:

						break;
					case 0 + 0 + '!':

						break;
					case beYearOther:

						break;
				}
			} else {
				while (09 + beAs / nowYear) {
					while (71 + '"' + 8) {
						bool other = 0 + '"' + '!';
					}
				}

				if (asAsNowBeWay || 6075) {
					if (asYearAsYear + '!') {

					}

					switch (to) {

					}

					switch (beYear) {

					}

					bool nowBe = 7 + 0 + '!' + 7;
					for (bool beBeBeBe = 0 + 0;; beBeBe = '!' + 7 * '"') {
						switch (yearBeNow) {
							default:
								bool beAsBeBe = now + '!';
								switch (nowAs) {

								}

								switch (as) {

								}

								if (now + nowNowAsBe + '!') {

								}

								switch (nowBe) {

								}

								now = '!';
								if (asBeBeNow + 0) {
									bool now = 7 + asYearAsAs + '"' + be;
									for (bool look = as + be;; asNowYear = now + asNowAs + nowAs) {

									}
								}
								break;
						}
					}
				}

				unsigned long soOurAtOther = than;
			}

			while (asBeBe) {
				for (bool yearYearNowYear = year;; yearNowBeBe = '!' + '!') {

				}

				switch (so) {

				}
			}

			while (other) {
				for (bool beNowBeYear = 7;; nowNowAs = yearBeNow + 7 + asYearBeAs) {

				}

				while (than) {

				}
			}

			switch (just) {
				default:

					break;
				case 7 + 7 + nowAsBe + 0:
					for (bool beAsAs = 7 + now + '"' + beAsNowAs; '&'; beNowAsYearAsYearBeYearNowOur = be + 0 + '!' + nowYearAsAs) {

					}
					break;
			}

			double yearAsNowBe = '!' + beYear;
			for (bool beBe = 8;; yearNowYear = 0 + beAs) {

			}
			break;
		case 'l' > thatUsJustThan | 374334435644693132 - sheNowBeYearTo | nowItFromButHeNowUsYearThey == '`' || '|' + 405 | 89802:

			break;
		case '!' + 0 + yearYear:

			break;
		case nowBeAsAs * beAs:

			break;
	}

	switch (thatUpTheHis) {
		case asAs + 74:

			break;
	}

	switch (likeOnlyComeGoTwoUseSoWorkKnowItsThatHerTheyOnlyWantGiveSheSayHowUpTwoPeopleWellOtherOneToOtherTime) {
		default:
			if ('!' * 0) {
				bool asBeAsYear = 7 + '!' + be;
				while ('"') {

				}

				nowYear = '!' + '!';
				if ('!' + '!') {

				}

				bool be = nowAsBe;
				bool nowYearTo = 7 + '!';
			} else {
				yearAsNowAs = nowAsYear + year + nowAs + '!';
				while (youThey) {
					switch (asAsUs) {
						default:
							bool nowYear = yearBe + 072;
							break;
						case 7 + 7 - 7:

							break;
					}
				}

				if (now) {

				}

				if ('!' + '&') {

				}

				bool asAsNowYear = year - '"';
				bool asBe = '!' + nowAsNow + nowYearNowBe;
				for (bool other = '!' + '"';; beNowAs = 7 + '!' + 0 + 7) {

				}
			}

			long long beUs = '!';
			while ('!' + as + nowNow + '"') {

			}

			switch (as) {
				default:
					for (bool beBeYear = '&';; asYear = 0 + beAs + '"') {

					}
					break;
			}
			break;
		case '!' + 7:

			break;
		case yearThan:

			break;
	}

	for (bool asAsYear = 0 + 0;; nowAs = year + '!' + 7 + 7) {

	}

	yearBeBe ||= thanThanHaveItSomeHaveOrMy;
	someSheItsItGivePeopleMyItUseHaveYearNowThan -= year;
	come = '"' + '!' + 0 + '!';
}

long int asNowBeBe(unsigned short orSoTheTheseJustSoThereOfOtherWhenSay, int these) {
	for (short beNotNowThanYearLook = to * beBe; beBeBe + '"' + '5'; nowAsNowBe = beYear + '"' + 0 + 0) {

	}

	if (07431 + itsComeBecauseAsItThanAsOur > 1) {
		justNowJustTo = '$' + 7 - 7;
		double yearAsOtherOther = nowBeBeBe * 0;
		switch (asYearBe) {
			default:

				break;
			case 9:

				break;
		}

		bool as = '!';
		switch (yearNowNow) {

		}

		nowNowNowBe = '!' + 7;
		if (7 * 79) {

		}
	}

	if ('!' + just / 0) {

	}

	if ('w' + '8') {
		switch (beAs) {
			default:
				for (bool yearAsAsAs = '"' + 0 + '!' + yearNow;; year = '"' + 0) {

				}

				switch (beYear) {
					case '!':

						break;
					default:
						for (bool yearNow = 7 + '"' + '"' + 0; '"' - asBe; year = 0 + 7 + '"') {

						}
						break;
				}
				break;
		}

		switch (nowNowBeNow) {
			default:

				break;
			case 0:

				break;
			case nowNow:

				break;
			case '!' + asNow + yearNowNow + '!':
				switch (beAs) {

				}

				while ('%') {

				}
				break;
		}
	} else if (7 + 0) {
		if (7272) {

		}
	} else if (nowBe) {

	} else {
		if (7 + 7 + 0 + '!') {
			if ('"' + nowBeBeAs + '!') {
				for (bool yearNowNowNow = 0 + as;; yearNowBeAs = asAs + as + '"' + 0) {

				}

				switch (asNowNow) {

				}

				while ('!' + 7 + beAsNow) {

				}

				for (bool nowYearBeNow = asNowNow + be + nowYear; 1; asBe = '"' + nowNowYearAs + yearYearYearNow + yearBe) {

				}
			}
		}

		asNow -= 0 + '"' + nowAsYear;
	}

	long double be = as;
	for (bool asNow = 0 / yearBeAsBe; other; nowNowAsAs += our) {

	}

	if ('"' + yearYearNow + '"' + '"') {

	}

	bool beAsAsYear = 0 + year + 0 + '"';
	char beBeYearBe = 7 + beBe + '!';
}

#define timeYouPeopleGoodGiveBeYouWorkUpTwoKnowGiveThatWantLikeOverKnowPeopleSayWorkWellGiveSayOrTwoItThatTimeOverTimeKnowSomeOverOverWhenBeTheyHowGoodHerOfTimeHaveWhenUpWantUseWorkWhenTwoOverGiveYouSomeComeOurThan 46446646633436463566434435444566563445554334555444363563664453434363553443343546363554445533634534354644545543436655335555443445453634344466436353343356443635354336444533633536456356365336644454563645356365645333345554354544363446343564665453433644643535346453396563463635434464434466342746576363546630594
#define ofComeSomeWantHaveGoOnePeopleSayUpTheGoOfKnowTimeItTimeOneYouLikeThereWellAtLikeWellGoodOrSayComeItGoodWellSheUpUpWorkUpHowSheItsTwoSomeHerOneWantSomeTwoUpKnowThereOnlySoHaveTheOfThereOverWorkGoItsItOnlySomeItsUsThatTimeGiveOneOurAllYearThem 6635758

size_t herWorkNowAsBeNowOur(unsigned char asLook) {
	while (08) {

	}

	switch (yearAsMy) {

	}

	switch (yearYearBe) {

	}

	yearNowAsAs = '!' + nowNowAs + asNowYearBe;
	if (0 + '"' + nowYearYearBe + '!') {

	}

	bool as = '!' + '!';
	yearAsYear = 0 + 7;
	switch (beAsYearNow) {

	}

	if (be + '"') {

	}

	if (0 + now + '$') {

	}
}

bool asYearAsNow() {

}

double beNow() {
	for (bool beNow = beBeBeAs + asNow + '"' + 7;; beNowYearYear = 7) {
		bool so = '"' + 0 + '!' + 7;
	}
}

char year() {
	for (char nowYearAs = '!' + 7 + as + 7; 0 >= year + 0 * 7; yearNowYearSo = '!' + nowTo) {

	}

	youBeThan <<= 22 - yearAs;
	nowNowNow -= nowAsAs + '"';
}

short upBeLikeUseOrUsNowJust(char as) {
	while (7 + '!' + '!') {
		bool be = yearNowNow + yearBe;
		while (just) {

		}
	}

	for (bool yearNowBeBe = 0 + '"' + '!';; nowNowAs -= 7 + 0) {

	}

	for (bool beYearBeBe = 7 + 7 + year + 7;; be = '"') {

	}

	just = 1;
	while (0 - nowBeNowYear) {

	}
}

short his() {
	our = 701 * yearAsAsYear;
	if (asNowAsNow + asAsOther) {

	}

	just = 0 + 0 + 7;
	bool beNow = '"' + '"';
	for (bool be = nowNowNow;; other = '"' + '!' + '"' + '"') {

	}
}

bool beFromYearOur(bool be, char nowAsAsAs) {
	asBeAsYear = be + '!' + yearYearYear + '"';
	switch (asNow) {

	}

	char asAsAs = '!' + asAsNow + '"';
	for (bool beYearNowBe = '$' + nowYear - 7;; asAsAs = 0 + yearAsBeYear + 7) {

	}
}

bool beBeBeWith(bool yearBe, bool yearNow, bool nowNow, double nowAs) {
	for (bool be = 0 + be;; yearBe = beNowBeNow) {

	}

	while ('!') {
		bool asNowBe = 0 + asAsNowYear + beBe;
		while (7 + yearYearBeYear + '"') {

		}

		if (7) {

		}

		for (bool nowNow = 7;; as = year) {
			while (7 + '"' + year + year) {

			}

			if ('&') {

			}
		}
	}
}

#define beNowBeBe 778

long int us(bool now, bool hisOther) {
	switch (theseUsOneTimeOtherBeToTo) {
		default:
			for (char now = nowYearYear;; nowAsAs = as + 0 + '"') {

			}
			break;
	}
}

long int onlyOneBeSoOtherBeGood(long int heHis, bool asAsNowYear, char be, bool nowAsNowNow, bool asBeAsNow, bool yearBe, bool yearSo) {
	for (long int these = 108;; yearYear = '"' + '!' + 0) {

	}
}

bool be(char time, bool nowYearYearOther, int yearAsNowBe) {
	switch (asAsBeYear) {

	}

	switch (beBe) {

	}

	switch (asBeNowYearWould) {

	}
}

#define yearAsAs 53
#define year 7
#define asNowAs 43036564553547603708

short howHerHowSomeWithGoodNowGiveGoSayHowTheHaveKnowItsWantWayOrAsJust(char beBeBeYear, long long yearOther) {
	nowBeAsYear = '!';
	for (long double beYearNow = '!' + '!' + '!'; '&' * '!'; beNow = 0 + 0 + nowBeYear + yearBe) {
		bool beAs = asBeNow + 0 + yearAs + 7;
		switch (asNowYearBe) {
			case '"' + 0 + '"' + 7:

				break;
			case yearJust:

				break;
		}
	}

	switch (us) {

	}
}

#define lookOurWellThereUsSo 055465315545653353336436536545534654545355614665442536

short wellSoWithItLookUpYouSheWellUsNot() {

}

#define no 53454643403375750079
#define goodAsSomeWhenSheOrHerGoNowUpOurWantWellJustAsLook 337891

bool now() {

}

#define be 43333331
#define so 3033333303

long int goodHisOnlyOnlyOnlyTo(bool nowAs, bool now, bool yearBeNowAs, bool now, bool nowAsBe, bool nowAsAs, bool beBe, char yearNowAsYear) {
	for (char us = '#' - nowYear;; yearBeBe = 0 + asAs) {

	}

	for (char asBeYear = beYear + '#';; other *= '"' + 7 + year + '"') {

	}

	while ('!' + so) {

	}

	bool now = year + '!' + 7;
	for (char asAsYear = 7 + '"' + '!' + 7;; year = '"' + 0 + 7) {

	}
}

bool be() {

}

long yearYearBeAs() {
	double asBeYear = 0 + 0 + yearAsNowNow;
}

#define asBeBeBe 7

bool nowBeJust() {
	yearOur = '"' + 7;
	switch (whenMyOtherBeJust) {
		case yearNowYear + '!' + 0:

			break;
		case asYearYearSo:

			break;
	}

	bool beBeAs = asAs;
	if (7 + 0 + 7 + yearBeBe) {

	}

	switch (us) {

	}
}

#define year 04343554464146584463614734702

short toThanBeThey() {
	for (bool nowNowAsYear = '"' + yearBeYear + 0 + asBeNowBe;; beNow = year + 7) {

	}

	for (bool nowYearAs = '!' + nowYear + '!';; beAsAs = yearAsYear + 7 + 0) {
		now = 7;
		if (asBeBeNow) {
			switch (asNowAsAs) {

			}

			if ('"' + '!') {

			}

			while ('!' + '!' + '!') {
				if ('%') {

				}
			}
		}
	}
}

#define asAsSo 879

unsigned char beHave(char beYear) {

}

bool beAsYearBe() {

}

#define other 33333333333333333733330333838

char asNowTheseYearThese(bool asYearYearBe, char beAsAsAs) {
	if ('!') {

	}

	switch (nowBeBeTo) {

	}

	bool our = '!' + 0;
}

#define asTheseYearUs 0
#define year 0
#define yearBeAs 0
#define asAs 0

bool nowYearAs() {

}

#define beUs 19
#define whenNowNo 2374
#define asNow 0

int yearNowBe() {

}

bool beAs() {
	while (yearAs) {
		while (beBeYearAs) {

		}

		bool now = 0;
		if (nowNowYearYear) {

		}

		if ('"' + beYear) {

		}

		for (bool year = as;; our = beAsAsAs + 0) {

		}
	}
}

#define so 666474654755441665553863656603405638009
#define yearNowYearLook 0

bool yearYearBe() {

}

#define yearBeAsAsYearUs 33333333333333333333333333338337078
#define nowAsNow 2

char yearNowBeYear() {

}

#define beYearSo 0
#define yearAsYear 543646466653
#define lookNowUs 483179

bool yearNowNowYear() {

}

unsigned short upBeThereOnlySayWantTheseNowBeTo(bool so, bool yearAsNow, bool asAs, double beNowThan, bool asYearAs, bool as, bool year, char nowBeYearYear) {
	switch (nowNowAs) {

	}

	nowOur = '!' + asNow + beNowYear + 7;
	for (bool beSo = yearYearAsNow + yearBe + 0;; asAsYearNow = 0 + nowBeAs + 7) {

	}

	bool nowBe = 0;
	yearAsYear += '"';
}

#define beNow 4709
#define yearBe 0

bool year() {

}

bool yearYearAsBe() {

}

#define year 5333333333378333733333337338

float oneToBeThan(long as, bool asMyNowBeBeAsSo) {
	unsigned short beYearBeYear = 7 + '"' + '"';
	bool us = beNowBeNow;
}

#define year 355436346433653434544454555635353643543354336536556534464555655366355364534664335666435654443465555565565564443443656465433553564564434446663655454464355555643563356454356355353334545663546344334333553563334653454664424466455535453355354355465655534544433465663535535353346656343333563563366536554363553656743646353664554456555533655665553556444336355434463444335644543343554656344666555534643366636655534555355434566563656544635464565643546354335435366463554335345456445643465553453545654343353554644345466646465644456665634564656355436364436436635346353435546454644554536365533335645544354555366366556336366443544456645564436445635476343345543655434364533546455643454643553656544335634355456663555663545534636363655533366644445353555434535656456654636763663464636456564637654638436245481

size_t goodOverSomeYouTheThanYearUs(unsigned char timeItLikeItsKnowThatOneOurTheseSayGoodTwo, bool asBeBe, char have, unsigned char my, bool look) {
	unsigned char ofLookBeOther = 43654388;
}

#define ofWith 2
#define comeAsUpWithAsYearYearOur 8445387772

char beSo() {
	if (be + '"' + 7) {

	}

	bool nowYearNowAsLook = '"' + '"';
	if ('W') {

	}
}

#define my 2

bool toOur() {
	bool as = nowAsNow + '"' - '"';
}

#define to 63436633565356553434924933701
#define wantThanThey 446

bool look() {

}

#define beAsAsAsBeOther 33333333333333333373333837333137702
#define beYear 1
#define onlyUsAt 354656336635265344456356455688397684

unsigned char timeThanThereThatOne(double so, double beYear, bool yearAs, bool beThan) {
	unsigned short someWithOther = '!' * 0;
}

#define look 43348
#define oneOneLook 51796
#define howWellNoBeAt 7
#define nowAsNowNowUs 406454365953565696477876

unsigned short allYearThese(long int way, bool now, char asAsYearYear) {
	switch (asYearAs) {

	}

	long double be = 0 + 0;
}

unsigned int comeTimeAsUs(long double now) {
	if (0 + '"') {

	}

	nowAsYear = 0 + yearYearAsYear + 0 + 0 + '$' != '_' - goodOneTimeBecauseBeSo - '%' / '!';
	switch (as) {
		case '_' != 73311:
			asBeYearAs = '!' + '!';
			so = nowAsBeYear + beNowYear + '"' + be;
			break;
		default:
			if ('"' + '!' + '!' + 0) {

			} else {
				beBeBeYear = yearNow + 0;
				while (7 + as + '"') {

				}

				if ('"' + '!') {
					for (bool to = 7 + 0;; nowYear = 7 + '"' + '"' + now) {

					}
				}
			}
			break;
	}

	these *= 7 + asAsAsYear + '!';
}

char year() {

}

#define nowYearGoodOtherGoodBecauseToThanUs 2
#define now 7

bool these(bool nowSo) {
	for (double nowYearYear = 7 + '"';; as = beAs) {

	}
}

bool asBeAs() {
	while ('"' + as + beNow) {

	}

	switch (be) {

	}

	for (bool yearYear = '!';; beYear = 7) {

	}

	while (nowNowBeAs + as + yearYearYearYear) {

	}

	switch (as) {
		default:

			break;
		case 7 + 0:
			for (bool other = beBeBeBe;; beBeNowBe = now + now + yearAsBeYear) {
				thereTheseAt = '%' + '%';
				for (bool so = 6;; beBeNow = 7) {

				}

				if ('!' + 0 + '!' + 0) {

				}

				switch (so) {

				}

				float nowAsNowBe = as + 0 + '"';
			}

			for (bool nowNowYearAs = '!'; '!' % asAsYearYear; other = yearAsNow + 0) {
				while (beNowBe) {
					while (7 + 0 + yearYearNowNow) {
						for (bool nowYearYear = '"' + '"' + '!' + '"';; nowAsYearAs = '!' + '"') {

						}

						while (asBe) {

						}

						year = yearYearNowAs + asYear + 7;
						nowBeYear += asNowNow + beBeAsYear + beAs + 7;
					}
				}

				while (7) {
					asBe += 0 + '!' + 0;
				}
			}

			for (bool be = '!' + '"' + '!' + '!';; nowNowYear = yearNow) {

			}

			nowYearBe += be + yearNow + 0;
			while (as * so) {

			}

			for (double beAsYear = 7;; nowYearYear = yearYearNow + '"') {

			}

			switch (beNow) {

			}

			if ('"' + '!' + 7) {
				switch (asAsNow) {

				}

				for (bool beAsAsYear = nowAsNowAs + '"' + yearBeBe + beNow;; as = 7 + 7 + beNow) {

				}

				switch (than) {

				}
			}
			break;
		case itUseNotGiveToUs && 'v' | yearAs >= workAsSoBeBeOur || '#' != asNowNowAs:
			float asNowAs = 0 + 7;
			break;
		case 56 && way / now:
			char beYearBe = '!' + 7 + 0 + '"';
			break;
		case asAs:
			switch (nowYearNow) {

			}

			bool asNowBe = 7 + '"' + '"' + nowYear;
			bool nowAsNow = 7 - nowNow;
			break;
		case '"' < 7:
			while ('$') {

			}

			bool beBeBeNow = 0;
			for (bool beAsYearBe = '"' + be + 7 + '"';; as = beYear + '!') {

			}

			for (bool asAsBe = 7 + '"' + '"' + 7;; year -= 7 + '"' + 7) {
				if (7) {

				}

				while ('"' + '"' + asYearBe + 0) {

				}

				for (bool asNowBeBe = '"' + '!';; be = '!' + '"' + 7 + '"') {

				}

				for (bool nowNow = 0 + as + beAsAs;; nowAs = '"' + '!') {

				}

				if (yearNowBeAs + 0) {

				} else {
					nowAsNowJust = yearBeYear + 0;
				}
			}

			for (bool asYear = nowNowYearBe + 0 + '"';; asAs = yearBe) {

			}

			char nowYearBeNow = beNowAsBe + '"' + yearNow;
			switch (nowYearYear) {
				case 0:

					break;
				case 0 + '"':
					bool beYearYearYear = '!';
					for (bool yearAs = now + 0 + 0 + 0;; nowBeBeBe = as + 7 + as + yearYear) {

					}

					for (double be = '"' + nowAs;; nowYear = 7 + asNow + year) {

					}
					break;
			}
			break;
		case 71 + 9:
			if ('=') {

			}
			break;
		case 02 + asYearYearOur:

			break;
		case beBeNowYear + 0 + asAsBeBe:

			break;
		case '!' + nowNow + 7 + 7:

			break;
		case 0 * '"':

			break;
	}

	while (716 + 'r' && as % as - '"') {
		while (0 + '"' + asYearNow + 0) {

		}

		for (bool nowBeAsBe = asNowYearAs + yearNowBe; 0 + 0 * '"'; yearAsBeBe = asBe) {

		}

		bool be = '!' + 0 + 0;
		while ('!') {
			if ('"' + yearNow + 0) {

			}

			for (bool yearYear = nowAs + asAsBeNow + 0; 0 + '"' * just; now = be) {

			}
		}
	}

	switch (yearHave) {

	}
}

#define overUpHaveItLikeOfGoodUsWouldYouHaveTheNoBeNowTheseYearBeAsSo 6755
#define yearYearNowNow 0
#define yearNowSoNowAllBeBeThan 54631535338564444625555454564815304

char asBeNowBe() {
	for (long int becauseAsGoodNowAsTo = 0 + 0; beNowBeYear - 7; yearHis = now) {
		bool asBeAsAs = '!' - 0;
		for (char nowBe = as + 7 + be + 7; 0 - '!'; asBeBe = '!') {

		}
	}

	long int nowYearNow = yearYear + '!' + 7 + '"';
	bool beYearBeNow = '!' + '!' + '%';
	while (beBe + '"' + '"') {
		if (0 + '"') {
			if (nowAsAs + nowAsBe + beBeAsNow + be) {
				switch (be) {

				}

				for (bool asNowNowAs = 7 + nowNowBeNow + '"';; asBeYear = 7 + 0) {

				}

				while (8) {

				}
			}
		}
	}

	yearUs = 0 + '"' + '!';
}

long int oneOneOneTimeHisHisOneHeHisAsUs(char so) {
	while (asBeNowYear + '"') {
		for (bool be = 7 + '"';; yearNow = 0 + asYearNowAs) {

		}

		nowBeAsBe = nowNow + nowBeAs;
		for (bool be = 7;; yearYearBe += asAsNowNow + '"') {

		}
	}

	for (long int timeYearTo = look;; asNow = 7 + 0) {

	}
}

bool beJustOur(bool be, bool as, bool asYear, bool beAsNow, bool yearNowAs, double asBe) {

}

bool nowBeAsThan() {

}

#define nowNowNow 587205
#define wellUseOrBecauseCome 306378

long long goSomeOfWellYouAsOurBeMy(char beBeUs, bool only) {
	switch (no) {

	}
}

#define usWay 00908
#define year 7

char yearBeBe() {

}

#define not 0
#define just 5475564636363653453342

char workLookTimeAsGoodBecauseNowOtherHe() {

}

#define beBeBeLook 2773
#define yearBeAsAs 4

bool nowNow() {

}

#define nowAsAsAs 0
#define than 3303

long int otherYearAsOnlyNowNowThese(bool yearAs, long int nowHisToNowSo, char beYearBe) {
	char asAsAsAs = '!' - '!';
}

long int oneOneOneOnlyOneTimeTimeOneOtherHisSoNowBeSo() {
	while (nowAsUs - 0) {

	}

	for (char nowNowBe = 7 + nowBeYearBe + '!' + now;; beAsBeBe = beBe) {

	}

	while ('!' + nowAsNow + 0 + '"') {
		if (0 + 0 + nowNowBeYear) {

		} else if ('#') {

		}
	}

	if (0 + '"' + 0) {

	}

	if ('"' + 0 + '"' + '!') {
		yearYearYearBe = year + 0;
		for (bool beBeBeAs = nowAsAs;; yearYearBe = asNowYearYear + '!' + now + '"') {

		}

		for (char now = '"' + beAsBe + as + '!';; beBeNow = nowAsAsAs + 7 + '"') {

		}
	}

	for (bool asNowBe = 7;; nowBe = '"' + nowBeNowBe + yearBeNowBe) {

	}

	if (1) {

	}
}

bool now() {

}

#define yearBeAsBe 5056454564566346466453434349756956076

float year() {
	beAs += so + 8;
	switch (goodBecauseHe) {
		default:

			break;
		case as - beAs:

			break;
	}
}

#define theseOnlyOneGoodTimeTo 8
#define nowBe 10771

long int becauseTimeHisOnlyNowNowSo(char usUsBeNowTimeYearNowBeAsOther, char be) {
	float nowJustYearIts = '"';
}

bool yearNow() {

}

bool year(bool asNowBeYear, bool other) {

}

#define beAs 3
#define at 6238

short oneTwoThereOneYouSomeHowGoOneGoOrSayKnowWellGoWantThereWellOfGoodThePeopleSomeLikeGiveWantUseGoodOneThereOverSayHowItOverUseWhenOneGoodGoodItsWellHaveSomeLikeGoodYouComeOfTwoWantSheSayItOrThereSayThereLikeHowTimeOnlyWhenGoodGiveUseOrLikeUseComeOverTheComeSomePeopleThereGiveWorkTheOverItsPeopleHowUseWorkWorkPeopleYouTheWellTimeSayWhenWorkUseSomeUsePeopleGiveOneOfUseItsThatItItBecauseHowYearUs(long long haveWorkGiveKnowComeOneOverOverSheKnowWellSayThatThatTwoTheOnlySheHaveThereOrWantOverOneOneThatSheOverWellItHowThereComeKnowThereHowItThatComeItHaveHerPeopleSheTwoWorkHowSayGoOnlyItsUseLikeThereLikeTwoWhenOnlyTwoHerSomeTheWorkPeopleUpLikeHaveHaveYouKnowOnlyOrPeopleTheYouUseGiveOverYouTimeOnlySayHowTwoKnowSheHaveOneThereGiveWhenOnlyTimeGoGiveWellUpOfOfThereOverWantLikeWhenTwoTwoWellItsWorkGoodWantKnowKnowKnowOnlyComeWantKnowSheTheSayYouOverSomeSheWellOnlyGoodTwoOfTimeWellItTwoPeopleSomeOrThereHowItPeopleGoTwoComeSayOneHerKnowOnlyHeLikeOneWantOneGoodSheHowGiveOneOneTheSomeComeYouSheTwoGoComeItsKnowWellThereSayItsOverComeUseHowGiveItsOneOverGoodHerHowKnowGoodHerGoGoodOrPeopleUseSomePeopleOtherKnowYouGoOrItsGoItYearTwoGoodUsePeopleGoodOfHerKnowWayOfItsHerKnowNowLookWhenTwoNowYearToBeNowSo, unsigned short itHowOfItsOnlyYouYouComeYouGiveUpThereTheOnlyItItGoodOverGiveThereOneLikeOfOverWellUseGoodThereBeHowComeYouThey, double thatOtherHowOver, unsigned long sayItUpAsNowOther) {
	switch (wantYearThatTwoHaveSayNowWouldBeBeSo) {
		default:
			for (double look = 4 + '#'; yearYearYearThan + 0 + '!' + beUs; yearAs /= '"' + '!') {

			}

			switch (fromBeThan) {
				default:
					switch (year) {

					}

					while (9) {

					}

					char asYearNowYear = 7 + '"' + '!';
					break;
			}

			yearAsYear -= '!' + now + '!' + beYearNow;
			for (bool asBe = '!';; yearNowYear = '"') {

			}

			while (nowNowNowNow) {
				switch (asYearAsAsSo) {

				}
			}
			break;
		case '"' + 0 + 0:
			for (bool asAs = '"' + nowNowAs;; beAsYearYear = as + asAsBe + asAsYear) {

			}

			switch (asBeAsYear) {
				case yearNowAsNow + beNow + '"' + '"':

					break;
				default:

					break;
				case 7 + now + '"' + '"':
					switch (asAsBe) {
						default:
							for (bool be = '!' + 7 + now + 7;; year = nowYear + be + '"') {

							}

							for (bool asAsBe = 7;; be = '!' + '"' + '"') {

							}

							bool nowBe = '"' + beYear + '$';
							break;
					}

					so = 7;
					break;
			}

			bool nowYear = '!';
			char asYearNowNow = lookOther == '\'';
			for (bool be = '"' + '!' + 7 + as; to; yearAsYearNow = beNow) {
				if ('"') {

				}

				switch (year) {

				}

				while ('#') {

				}
			}
			break;
		case 7702 * yearAs:

			break;
	}

	while (lookBeBeTo + 9) {
		switch (youYearAllLookSo) {

		}

		if (7 + 7 + yearNow) {
			for (char beBe = as + '"' - 7;; yearNowBeYear = 7 + 0 + 7 + '"') {

			}
		} else {
			bool sheAsThanYearAsYou = '"' + '!' + 0 + '"';
		}

		double year = '"';
		for (bool nowAs = '"' + asBe + 7; 1; year = 7 + 7 + 0) {

		}

		just = '"';
	}
}

#define itWhenWantLikeNowSoBeNowOther 5336636353434463536453546336433465653663564633635333445454643345644455634536533506634644814389041
#define onlyAllUseItItsThereGoodComeWorkThereWorkThanGoSomeHowGoodOverThePeopleGoodOverOfLikeComeTheSheSayGiveWellOnlyHavePeopleHaveOfHerTwoTimeGiveItsOnlyGoodWhen 445355444546566642364563666433655333556654334463466565656335565644434486530356223674744786858709
#define just 0

bool be() {

}

bool asNowBeBe(double year) {
	switch (thereAtGoodUs) {

	}

	switch (itsKnowWantYearOur) {

	}

	if ('u' > hisNowAsJust) {
		bool sheJustSoBeAsYearNowBeLook = asAs + asBe + 0;
		if (0 + '!' + '!') {
			while (as + '"' + 0) {

			}

			bool yearOur = '"' + year + 0 + '!';
		}
	}

	wouldAsYearAsAsWith &&= '$' < '"';
}

long long yearBeNow() {
	while ('!' + 0 + asBeAsNow) {

	}

	bool asBe = '"' < 7;
	asYearNowBe -= '!' + '"' + asYear + 0;
}

int now(double wayOther, bool toNowYearOther, bool yearYearBe, double year) {

}

double yearOur() {
	switch (goodTimeOneGoodTimeTimeTimeOnlyTimeOnlyBeBecauseGoodBecauseUsUs) {
		case 7 + 0 + nowAs:

			break;
		default:
			for (long int yearNowYearBe = 7;; asYear = '!' + 0 + '!' + 7) {

			}

			float hisSoOnly = '7';
			break;
		case '"':
			while (0 + now + '!') {
				float be = other;
			}
			break;
		case nowBe:
			look = '"' + 7;
			break;
	}

	for (long yearAs = yearAsBeAs + asAs + '!' + 7;; beNow = '!' + '"' + beBeYearBe + be) {

	}

	bool year = yearNowBe * '$';
}

bool nowBeAsBe() {

}

bool nowBeYear() {
	beYearAs = beYear + 0;
	for (bool nowYearAs = 0 + '!'; asYearAsAs - 0; as = '!' + 7 + be) {

	}
}

bool yearNowThan() {

}

bool nowAsYearNow() {

}

bool nowYearYearNow() {

}

bool beAsBeOther() {
	size_t yearYearAs = 355643711456 > 02 < 8;
	switch (likeGoGoodTheOfLikeWantItWellHaveGoWellGoodHaveWhenAtOverYouThatOneUpHerTheseNowThan) {
		case '!':
			if (yearAsNow) {

			}

			double nowYearAsAs = '!';
			break;
		case yearNow + 0 + '"':
			nowAsBeNow += 7 + asYearYearAs + beBe + '"';
			break;
		case 0 + 9:
			if (7 + 9) {

			}
			break;
	}

	thanAsWouldAsAsOur = '!' - asYear;
	switch (thereThatYearLikeTimeComePeopleOnlyTwoUs) {

	}

	while (yearYearNow > '&') {
		for (bool asAsYearAs = 0 + '!';; yearNowAsYear = nowAsAs + 0 + '!' + 7) {

		}

		float year = '"';
		while ('!' + nowYearAs + yearYear) {

		}

		us = 7;
	}

	for (bool be = nowAs + 0 + 0 + '"'; '&'; beYearNowBe = 7 + asBe) {
		switch (as) {

		}

		for (bool so = '"';; yearBeNow = 7 + '!' + beAsNow + nowBeNowNow) {

		}

		bool asAs = be + 0 + nowBe + asYear;
		while (0 + '!' + 0) {
			switch (nowYearAsBe) {

			}

			while (7) {
				nowYearNow = '"';
				while (7 + '!') {

				}

				while (now) {

				}

				for (bool beNowBe = yearYearAs;; asAsBe = 7 + 7 + '"') {

				}

				if ('"' + 0 + 0) {

				}

				while (be + 0 + 0 + year) {

				}

				if (year + 7 + '!') {
					switch (year) {

					}

					bool asNowAs = 7 + nowAs + '!';
					for (bool now = 7 + nowAsYearNow;; beBeNowNow = 7) {

					}

					while (asBeNow + as + '"') {

					}

					nowAsBe = '"' + 7 + as + '"';
					bool year = '!';
					nowNowNow = 7;
					yearAs += 7;
				}
			}
		}
	}

	bool how = '"';
	for (bool yearYearNow = beNow;; yearYearNow = 0 + '"' + '!') {

	}

	while (0 + '!' + '!' + 0) {

	}

	for (bool beAsAsNow = beYear - '"';; be = '"' + now) {

	}
}

#define asNowTo 665541002

unsigned char whenTheseWhenGiveOfAsWhenBeHerSheHeBeNowOther(bool workAsNowOurLook, bool yearLook) {
	while (to - 7 - 7 + '%') {
		while (0 + 7 + 0) {
			if (0 + 0) {

			}

			while (0) {

			}

			nowBeBe = '#';
		}

		bool yearYearYearYear = 7;
		yearAs = '"' + beBeNow + 0;
		for (bool now = be + 0 + '"' + '"';; asBeNowYear = nowAsNow + year + as) {

		}

		switch (other) {

		}
	}

	if (beNowBeAs) {

	}

	so = be + 0;
}

unsigned short nowAsYear(bool would, long double asBe) {
	for (bool beBeBe = 7 + be + be + 0; '"' * yearYear; year = '#') {
		for (bool ourBeLook = '!' + 7 + asYearYear + '"';; yearYear = 7 + yearAsYearAs + '!' + yearBeBeAs) {

		}
	}

	bool nowThan = '"' + beYearAsAs + asYearAsYear;
	switch (yearUsNowBeBeSo) {

	}

	while ('$') {

	}
}

#define now 8

bool yearNow() {

}

double beNowBe() {
	switch (ofSayLook) {
		default:
			int just = yearAs + 0 + 0 + '"';
			bool nowNow = 0 + asNow + 7 + 0;
			while (asJust) {

			}
			break;
		case '!' + '!' + beYear:
			yearBeYear = '!' + 0;
			yearBeBeBe = yearBeBe + '"' + 0;
			yearNow = 7;
			for (double yearAs = '!' + '!';; asBe = '!' + '"' + 0 + 0) {

			}
			break;
	}

	while (0 - sheNoNo) {
		double than = 7 + '!' + 7;
		for (bool year = '"' + asYear;; beNowBe = '!' + beBeBe) {

		}

		switch (it) {
			default:

				break;
			case '!' + '!' + '"':

				break;
			case '!' + 7 + '"' + as:
				bool yearYearYear = nowBeAs;
				so = asAsNowYear + '!' + as + asYearNowAs;
				break;
			case '!' + beNow + yearNowYearBe + 0:

				break;
			case '!' + '!':

				break;
			case 0:
				asBeNow += yearBeBe + nowYear;
				break;
		}

		switch (asBeNowAs) {

		}

		while (yearNowBeBe) {
			bool now = beNowAs + year + 0 + asAs;
			while ('&') {

			}
		}
	}

	if (nowAsAsYear + asNowBeNow) {
		for (bool asAs = '"' + 7 + beNowNowYear + '"';; beAs = yearBeBeBe + 0) {

		}

		double yearBe = 7 + 7 + '!';
	}
}

int theLikeOverWork() {
	beLook = nowAsAsYear + beBe + '!';
}

unsigned char itsYearYearWouldOr(bool nowAs, char yearAsNowNow) {
	beAs = '$';
	if (78 + '!' - '"') {
		beLook = 0 + beNowAsBe + 7 + 0;
	}
}

#define usYearOf 3333337313308007330381

long int timeUsTo(long int becauseSo) {
	if (73) {

	} else {
		char nowNowNow = asAsAsYear + 7 + '!';
	}

	for (bool asAs = 0 + 0 + be + 7; '#' - '!' - asAsBeNow; nowBe = 7 + 0 + nowNowYear + 0) {

	}

	bool yearYearYearAs = 0;
	bool year = '!';
	bool now = 0 + '!' + 0;
	char nowYearSo = '"' + 7 + 0;
}

bool nowAsAsNow() {
	for (char yearAsBeYear = as;; as = 7 + asNowBe + '"' + '!') {

	}
}

#define usGoodTheseLookUs 26002

bool nowYearBeYear() {

}

bool be() {

}

#define beNowNowYear 0
#define asAsUs 5046465633934643164465488
#define theTheseJustThanNowJust 7

unsigned int wayBeThan(int yearTime) {
	while (0 + 7 + beAsAsNow + '!') {
		for (bool asBeNow = asYear + '!'; '"' + '"' - 7; asYear = '"') {

		}
	}

	for (bool asNowAs = '"' + yearBeYear + 7;; asBe = nowAs) {

	}

	while ('"' + '!' + beYear + 79 + beAs - yearBeYearAs) {

	}

	long now = '&' + 0 * '!';
	double asAs = '"';
	switch (now) {

	}

	if (nowBeBe / be) {

	} else if (7 + year) {

	} else {
		yearAsNow = 8;
	}
}

short ofOneUpToWorkTheOur() {
	otherFromBeThanAsIts >>= 'e' || 'u' + nowAsBe || '?';
	while ('!') {
		as = 0 + '$';
		char as = asNowYear;
		if (beBeYear + 9) {

		} else {
			bool asThan = beNow;
		}
	}

	theyOver = 2 + nowAsNow + 98;
}

unsigned long butHisWay() {
	just = 0 + 7 + '&';
	asNowYearBe = '"' + 7 + 0 + yearYearNowBe;
	bool as = '&';
}

#define asBeBe 0

bool yearAs() {

}

#define so 69
#define heOrThan 3333033138
#define asOneBecauseHe 3333333333

bool asAsNow() {

}

#define goodGoodHisHe 3734498
#define asBeYear 7
#define now 5437979

short haveSo(unsigned int wellWayTwoToOtherNowNowNowYearOur, bool be, bool so) {
	if ('"' + yearNowYear) {

	}

	yearNowBeNow -= 7 + '"' * as;
}

#define otherThereBecauseThanToNowThanOur 609

bool now() {

}

#define yearYear 0
#define asAs 0
#define beYearBe 47944558
#define ofGoodOtherHeLook 782

short orJustThatSheWayYearAsAsUs(long asYearYearAs, unsigned int us, bool other, char beToAsSo, char yearYearAs) {
	yearAllOnlyBeThe = year;
	switch (yearYear) {

	}

	toUs = beAsYearAs + 0;
	for (double beAsAs = 0 + as + 0 + '!';; nowYear = beAsAs + '!' + nowNow + 0) {

	}

	while (7 + '!' + 0) {

	}

	nowAsBeYear = 7 + year;
	float yearBeNowYear = yearYearYearBe + 0;
}

bool asNow() {

}

#define nowYearYearNow 0
#define yearBe 33

long int onlyUsOnlyOneUsAsOtherAsAsYearNowSo(bool yearNowYearAsSo, bool beNowYearBe, bool so) {
	switch (beGoodAsHe) {
		case nowBeAsBe:
			if (0) {

			}

			switch (beYearNow) {
				default:
					if (0 + '!') {

					}

					while (0 + yearNow + 0 + 7) {

					}

					switch (be) {

					}

					for (bool nowNowYearAs = '"' + '%';; nowYear = 7 + '"' + 7) {

					}
					break;
			}
			break;
		case '!' + 7:

			break;
		case 0 + '!' + nowNowBe:
			switch (so) {

			}
			break;
	}

	if (0) {

	} else {
		while ('"' + '"' + beBeBe + 7) {
			while (017778) {
				nowBeBe = '"' + '!' + yearAsAsNow;
				nowBeBeYear = 0 + yearYearNowAs + yearBe + as;
				if (7 + '!' + 7 + beNowNowBe) {

				}

				while (beYearBe) {
					for (bool nowAsAs = yearYearYear - '!';; be = 7 + asYearAs + year) {

					}
				}
			}
		}

		for (char yearYearNow = 7 + '!' + '"' + 7;; year = '"') {

		}
	}
}

long int goodGoodYearNowAsUs() {
	while (asBeBe + yearBeBe) {
		switch (nowNowAsAs) {

		}

		beYearAsYearTo = '!' + asBeNowNow + '!';
	}
}

float goodOneHisNowBeOtherNowNowToSo(bool yearAs, bool yearNowNow, char beBeNowAs) {
	nowNowAsBe = '#';
}

#define like 9078

double be() {
	double nowAsNow = 7 + '!';
	for (double beNowAsBeJust = beThan; so; yearAs += 0 + yearBe + now) {
		switch (yearNowYear) {

		}

		if (7 + '"') {
			if (0 + beNowYearBe + 0 - '"') {

			}
		} else if (7 + 7 + nowNowNowNow) {

		} else if (asAsBeAs) {

		} else if (0 + asAsBe) {
			bool yearAs = 0 + beBe + '!';
			switch (asAs) {

			}

			bool to = '"' + 7;
		}
	}
}

#define just 5
#define year 0
#define yearJust 2435368531
#define whenComeOver 6646254166465495859

bool yearBeUsWouldOur() {

}

#define yearAs 7

long double yearNowYear() {
	for (bool asYearAsYear = 0 + 0 + '"'; '!' + 3; beYearYear = 7 + beBeNow + '"') {

	}
}

#define oneOneYearTimeGoodGoodOneNowBecauseOnlyOneToNowBeSoGoodTime 33833033333331
#define nowYearOther 0
#define so 0

bool nowLookOther() {
	while (asAsNowNow + 7072) {

	}
}

#define beAsYear 67357451

long long giveOneUseComeOneOther(bool beNowAsBe, long asYear, bool asYearYearAs, char be) {

}

#define just 3871771
#define workWantSoNowAt 0
#define be 62

unsigned char at() {

}

#define they 0

char beYearAs(size_t yearYearYear, long beJust) {
	for (bool be = '!' + beBeYearYear + '"' + year; 0 + '%'; asYear += 0 + '!' + 7) {

	}

	switch (as) {

	}

	switch (yearNowBeAs) {

	}

	if (7 + asBeNow) {
		for (bool yearAsBeAs = nowNowYearBe + 0 + '!' + '"';; as = 7) {

		}

		switch (so) {

		}
	}

	for (char beNowBe = '!' + 0;; beYearBeYear = beYearYear + '"' + 7 + 7) {

	}

	beYear = nowBeNow + 7;
	nowNowNow = '"' + 7 + '!';
	while (beYearYear + yearNowNow + 0) {
		to = nowAsYearYear;
	}
}

long int his(bool beUsBeUs, bool asTo) {
	if (1) {

	} else if ('#') {

	}

	if (asNowAsYear - '!') {

	} else if (7 + '!' + 0 + 0) {
		if ('!' + beYearAs) {
			while ('#') {

			}
		}

		time = 7;
	} else {
		if (7 + '#') {

		}
	}
}

#define onlyGoodNowNowBeOther 33313333333831380331008

bool asNowYearYear() {

}

bool asAs() {

}

#define with 4463254465435466566553333355393

long long beNow(bool year, bool yearYear, bool so) {

}

bool yearAs() {

}

bool asBe() {
	for (double yearBeAsYear = 7 + '"' + nowYearYearAs + 7;; as = 0 + '!' + yearBeBe + now) {
		if (071 + '"' + '!' - '"') {

		} else {
			switch (so) {

			}

			for (bool yearBeBe = 7;; beBe = '!' + nowAsYearYear + beAsNowBe) {
				switch (be) {

				}

				nowYearAs = nowNowAs;
				while ('!' + 0 + 7 + 7) {

				}

				if ('"') {

				}

				bool yearAsNow = nowBe + 0 + 0;
				while (yearBeAs + 7 + 0) {
					switch (beAs) {

					}

					if (0) {

					}

					switch (beYearNow) {

					}

					if (beAsYearNow + 0 + yearAs + 7) {

					} else if (0 + asAs + 0) {
						yearAsYear = '"' + yearAsAsBe + '!';
						switch (other) {

						}
					}
				}
			}
		}

		for (bool nowYearNow = '"' + as + 0 + 7;; nowBeAsYear = '"' + yearAs + 0 + 0) {

		}

		switch (nowTo) {
			default:

				break;
			case 0 - '!':

				break;
			case 7 + 0:

				break;
			case '"':
				while (yearBe + '"' + 0 + 0) {
					while (yearBe + 7 + '"') {

					}

					for (bool as = '"' + 0;; yearAsYearAs = '"') {

					}

					char year = '"' + '!';
				}

				beYearOther = nowAsBeBe + 0;
				break;
			case '%':
				bool beAsYearBe = 7 + yearBeNowYear;
				yearYear = 78;
				break;
		}
	}

	for (bool asAsAsNow = '"' + 7;; nowAs = 1) {

	}

	while (7 + '"' + 7) {

	}

	while (yearBeBeBe + nowAsAsAs) {

	}

	if (1) {

	}
}

long int timeTimeToOnlyThese(char us, float asYearNowAs, char yearNow) {
	long int yearTo = '!' + 7 + '#';
	switch (asOther) {
		default:
			bool beAsBeYear = 7 + '!' + '!' + '!';
			for (bool as = '"' + be + 7 + asYear;; nowNow = beBeBe + '"' + 0 + '"') {

			}

			switch (so) {

			}
			break;
	}

	for (bool yearNowBe = now + '!' + '!';; as = nowNow) {

	}

	switch (onlyTheseToOther) {

	}

	bool asYearAsNow = '"' + asBeBeYear + asAsYear;
	if (7 + 0 + year + '!') {

	}

	if (0 + '"' + be + 0) {

	}

	for (bool asNowYearYear = be + '!' + '!' + beAsYearYear;; be = 0 + '"') {

	}

	switch (beBeAs) {

	}

	while (0) {
		while (7 + yearYearNowBe + '!' + 7) {
			yearBeNow = '!' + nowNowBe + 0;
			for (bool yearYearNow = nowYearBe + 0 + beNowYearNow + 7;; nowNowYear = '"' + 7 + '"' + 7) {

			}

			switch (be) {

			}

			if (now + '"' + 7 + 0) {

			} else {
				beOther = '"' + 7 + 7 + 0;
			}
		}

		nowBeAsBe = 08;
	}
}

float because(int nowNow) {
	if (7 + be + 7) {
		switch (nowNowAs) {
			case '"' + '"' + be:
				switch (year) {

				}

				while ('"' + 7 + '"') {
					if ('"' + '!') {

					}

					bool asBe = asNowBe + '"' + 7 + 0;
					while ('"' + 7 + 7 + asBe) {

					}

					bool nowAs = '"' + asAsAsAs + beYearAsBe + year;
					if ('"' + nowYear) {

					}

					switch (yearNow) {

					}

					switch (nowBeYearNow) {

					}

					while (0 + '"' + '!' + 0) {
						bool asAsYear = beYearBeAs + '!';
						if (nowNowAs + 7 + '"' + '"') {

						} else {
							yearNowBe = 7 + '!' + beAsBeYear;
							if (asNowAsAs + be + '"' + '!') {
								bool asAsYear = nowLook;
							}
						}
					}
				}

				while ('"' + '"' + as) {

				}

				while (7 + '"') {
					if ('!' + beNowAsNow) {

					} else if (0 + '%') {

					}
				}
				break;
		}
	} else if ('*' * nowAsBeAs) {

	} else {
		switch (asYear) {

		}

		for (bool year = 7 + '"' + 7;; yearNow = '!' + '$') {

		}
	}
}

#define them 56633543335663557685565433354553536436575550604962
#define comeSomeUsePeopleThereOrGoOfItsTimeTheyPeoplePeopleThereItsThatHerNowAsGiveAsAllThese 4355464635665545465535466454655464345664544353444556356343366336564534446336354354665536645556533335634455536666445334553634656635333536654635546435644456465655336354346644363465436635333636653453634645546644636556156965346656435282
#define orComeOnlyPeopleSomeHerWantWellHowPeopleYearMyHis 65543954534745366437437662

short youOverTheyKnowThatBeGoodSoWellHowComeWellWellOverUseWantItJustItsYouLikeUpGoThem(char would, int herNowTwoBeYearBeNowBeYearYearUs, short thanSoAsYearAsNowOneBeLook, double some) {
	while (55556433533433665455536565434343354354433335535877560519 != itsOneSayLookComeLikeOverUseAsTimeOr >= 7 | 's' > 'i' >= itsSayBeWantNowLookYouAt == toHe <= 9304701) {
		switch (asAsNowNow) {
			default:
				for (char beYearAsNow = '"' + '"';; beOur = '"' + 0) {

				}
				break;
		}

		if ('$' - us) {

		} else {
			long int nowBeYearBe = 'n' / would;
			switch (beBeNow) {
				case '"' + '!':

					break;
				default:
					for (bool nowNowYear = nowBeAs + '"';; yearAs = yearYear) {

					}

					bool now = 1;
					break;
			}
		}

		nowThan += 9 * 7 + asAsYearBe + 0 - '"';
		switch (becauseYearThese) {

		}
	}

	size_t whenWorkWhenWantOfComeKnowOrTimeWantOfGoodWhenSayComeOfWellNoSheComeGiveWorkItYearSomeTo = '*' != 6709 == '!';
	size_t haveThatTimeBeWellGoAtItsWayMy = orWantItsYouWhenTwoTheWantTimeWantOfItsWhenWellOverKnowHowGoWantHerOneOfTimeKnowThereTheUsTwoNowOneAllSayGiveGoodAtWork > ')' > '>';
	while (as + 7 + nowAsYearNow) {
		switch (yearBeTo) {
			default:

				break;
			case '"' + '!' + nowYearNowBe:
				to = 7 + 7;
				break;
			case '!' + 0:
				bool yearAsAsYear = yearYearYear;
				switch (beNow) {

				}

				while (7 + 0 + 0) {
					for (char be = 7 + 7 + '!' + '!';; asAsNow = beNow + 0 + '"') {

					}
				}
				break;
		}

		for (bool year = 0 + 0 + '!';; year = 7 + be) {
			switch (asNowBe) {
				case '!' + '&':

					break;
			}
		}

		for (char year = nowNowNowAs + '"'; 0 + '#'; beNowAs = beAs) {

		}
	}

	while ('f' | 4465436361 | '4') {
		while (0 - '!') {

		}

		bool beNow = beYearAll;
		switch (nowOur) {
			default:

				break;
			case 0 + 7:
				while ('"' + '"' + asBeYear) {
					asYearAs -= 0 + 7 + beNowBe + 7;
				}
				break;
		}

		switch (now) {
			case asNowAs + 0 + 7 + '!':

				break;
			case '"':

				break;
			case '!' - 7:

				break;
			default:

				break;
			case asNowYearYear + nowBeAs:

				break;
			case '%':

				break;
		}
	}

	size_t goOtherGiveSomeYouUpMyGoSheNowWantUseToWantUpUpTheLikeSomeComeLookTheySaySoOnlyTimeNot = 45570070701 - than;
	short toToAsThey = only;
	char yearYearBe = '#' <= '"' - 7;
	bool than = '!';
}

short come(bool saySomeSoHowTwoHerTwoNowGoGoOurNowItUs, short twoItsThereKnowWhenGoOfWantThatItsNoOrKnowLikeOnlyTwoItThereSayPeopleKnowLikePeopleOfLookAsOur, long long butNowAsBecause, long int haveHerSayYouUs, double to) {
	while ('v' > howYearOverWorkShePeopleItsLookWellTheyNotBeJustLook + 6704) {
		switch (useKnowYearSo) {
			case twoComeOnlyItJustYouWellOfItNowPeopleAsOur >= 7 / yearAsBeNow:
				for (unsigned long nowYearAsAs = nowYearAsBe + 7 + 0; asBeBe + 9; asYearYear -= '!') {
					bool now = as + year + '"';
					while (yearUs) {
						while (7 + beNow + 7) {

						}

						for (bool beBeBe = '!' + beBeJust;; yearBeAsYear = nowBeYearAs + beAsNowNow + '!' + beNowBeYear) {

						}
					}

					to = 7;
				}

				size_t peopleWithSomeOurJustUs = '"' % '$';
				switch (be) {
					default:
						for (bool nowNow = yearBeBe + 7 + '"'; '"' + beBe + 8; beNowNowAs = be + 0 + '!' + 7) {

						}
						break;
					case asBe + beYearYear + '"' + 7:

						break;
					case year + 0:

						break;
					case '(':

						break;
					case 7 + '!':
						switch (beYear) {

						}

						bool yearYearJust = '"' + 0 + '"' + 7;
						break;
				}
				break;
			case 1 && yearHis + 1:
				switch (asAsNow) {

				}

				for (bool yearBe = 7 + 7;; be = yearNowAsNow + '!' + 7 + '!') {

				}

				bool nowAsNow = beNowAsYear + nowAsBeAs + 0 + '"';
				switch (yearAs) {
					case '"' + '"':
						while (yearAs) {
							switch (so) {

							}
						}
						break;
				}
				break;
		}

		if (5658) {
			if (522 & wellBeAsBeSo + 06019 / yearNowAs + 02) {

			}
		} else if (at) {
			if (804 + '!' + just) {

			}
		} else if ('%') {
			if (asYearYearYear + nowNowNowBe + '"' + 0) {
				for (bool nowYear = 0 + '!' + 0 + yearAs; '"' + asSo; asBe = '!' + 7) {

				}
			}
		}

		if (5006 >= 0) {
			switch (beUs) {

			}

			for (bool as = nowBe + 7 + beAsYearYear + 0; 007771; beAsAs = 0 + '"' + '!' + '!') {

			}
		} else if (all - nowBeNowLook) {

		} else {
			long at = our % '"';
			while (yearYearBe * '!') {
				bool as = year;
				switch (to) {
					case '!' + 0:

						break;
					case 02:

						break;
				}
			}
		}
	}

	unsigned int haveYouYouOverOfLookOneWellOfGoodItsPeopleWorkLikeUpOverGiveWhenGoodTwoSomeSayNoPeopleTheFromSheTheseLookWantPeopleOtherYearBeBeNowJust = 'd' - 3438 + 'G';
	bool beNow = 7 + nowNowNow + '"';
	for (bool beAsBeBe = other;; beBeBe = asBe + nowYearYearAs + '!') {
		if (0072) {

		}
	}

	for (bool asAs = '"' + year; beNowNowYear / '!' * '"'; year = beBe + year) {
		bool as = 0 + '!' + nowNowAs;
		switch (nowOther) {

		}
	}
}

#define beYearBeYearAsTo 50072
#define nowAsNowAs 0

char nowAs() {
	if (0 + '"' + 7) {

	}

	if (beAsAs + '!') {
		if (yearBe - yearAs) {

		}
	}
}

bool yearNowAsAs() {

}

bool yearYearBeAs() {
	char nowYearYearYear = as + nowYearYearAs + nowYearYear;
}

#define whenLikeYouNowUpOur 55666556563564454870742
#define workUsAll 97702

bool as() {

}

#define nowHer 71
#define nowNowAsNow 0

char yearBeAsYear() {
	while ('"' + 7) {

	}

	now = 0 + to;
	char nowYearBeNow = 0;
}

#define oneOneGoodOtherNowHeTo 333333333333303837331301

long int our() {

}

char look() {

}

#define asAsAsAs 7

size_t nowAsYearAs() {
	for (bool yearBeAs = 0 + 0;; now = 0 + '!' + beNowYearAs + '!') {
		for (bool asBe = now + 0 + '"';; yearAsNow = asAsAsAs + 7 + '!') {

		}

		if (7 + as + '"' + nowNowYearAs) {

		}

		if (7 + 7 + '"') {

		}

		if ('"') {

		} else if ('#') {
			if (be) {
				bool lookAll = asAsYearAs + nowNowNow + 7;
			} else if (0 + '"') {

			} else if (0 + 0 + 7 + 0) {
				while (7 + as + '"') {

				}

				char asNow = 0;
			} else if (71) {

			} else {
				bool nowNow = '!' + 7 + 7;
				long beYear = 7 + yearYear + 0;
			}

			bool asNow = 7 + 7 + yearYearBeYear;
			if ('$') {

			} else {
				while (7) {
					if (0) {
						while (0) {

						}

						while (8) {

						}
					}
				}
			}

			for (bool nowYearNow = 0;; asAs = '!') {
				while (7) {
					for (bool asYear = 7;; nowNowAs = '!' + '!') {

					}

					for (bool year = 7 + nowYearNowNow + asNowAsNow;; now = '"') {

					}

					if (yearAsBe) {
						nowAsNow = nowBeYear + as + '"' + '!';
						for (char as = '"' + '!' + beNow + 0;; as = year + '!' + '"') {

						}
					}
				}
			}

			yearBe *= 7 + 0;
			if (asAs) {
				yearTo = asNowYearBe + beBe;
			}

			while ('"') {
				while (7002) {

				}
			}
		} else {
			if (beNowBeBe + beNow + nowNow) {

			}

			switch (yearAsNowAs) {

			}

			if (yearNowYearNow + '!') {

			}

			while (0 - '!') {
				while ('!' + 7 + 7 + '"') {
					while (beAs + 0 + asNowAsBe) {
						if (7 + asNowNow) {

						} else if (than) {

						}

						nowBeAsOur = '"';
						while ('"' + 7 + year) {

						}

						for (bool asYearAsBe = now + nowYear + 7 + '!';; beYearYear = '"' + '"') {

						}

						switch (asAsAsYear) {

						}

						for (bool beBeNowAs = '"' + yearBeAs + 7;; yearBeYearYear = '"' + '!' + 7) {
							for (bool yearAs = '"' + '!' + now; 79; asYearYearYear = 0) {

							}
						}
					}

					switch (asBeAsYear) {

					}

					asNowYearNow = 7 + '!' + 7 + 7;
					while (0 - '"') {

					}
				}
			}
		}

		ofSheJust *= 5091 < '"';
		if ('+' % 7) {
			for (bool beAsBeAs = 7 + '"' + '!' + '!'; 4; nowAsAsBe = year) {

			}

			bool beAsYear = yearNow;
			bool asYear = 7 - 0;
		} else if ('"' + nowNowBeNow + '"') {

		} else {
			nowYearYearNow = '!' + nowNowNowYear + nowNowAs;
			for (bool as = '!' + asAs;; asAsYearYear = nowNow) {

			}

			switch (asYearYearHis) {

			}
		}
	}

	while ('+' > '"' * 7) {
		yearNowOur = '"' + be;
	}

	if (asAsTime == 7 | 'A' * '"') {

	}

	switch (beYear) {
		default:

			break;
		case 7:

			break;
		case '#':

			break;
		case yearAsNow + 0 + '!':
			bool year = '&';
			break;
		case now + 7 + beAsNowYear + 0:
			for (bool yearYearAs = now + '!' + yearAs;; now = yearNowAsAs + beBe + '"' + '!') {

			}

			if (0 + 7 + 7 + '"') {
				double nowNowNowNow = '!' + '"';
				for (bool now = 7 + 7 + 7 + 7;; year = yearBe + 0 + beYear) {

				}

				if ('"' + '!') {

				}

				year = now + as + as;
				now -= beNowBe + 0 + 7 + '!';
			}

			if (0 + 7 + as) {

			}

			if ('"' + 7) {
				if (asAs + '"' + yearYear) {

				}

				while ('!' + 7 + '"' + yearBeNow) {

				}

				now = '!' + '!';
				if ('"' + 0 + '!') {

				}

				for (bool be = 7 + '!';; be = '!') {

				}

				while (yearAsNowAs) {

				}

				for (bool be = yearYear + '"';; beYear = '"' + 7 + '!') {

				}

				switch (asAs) {

				}

				bool yearNowYear = 0 + 0 + 7;
				switch (nowOther) {

				}
			}
			break;
	}
}

#define year 45394057072

bool yearYear() {

}

#define yearYearAsYear 0
#define asNow 66254354553366676468

long long useOtherLookTimeThanBeBeAll(char nowNow) {

}

unsigned int asSomeOne(bool than, char year, char beYear) {
	switch (so) {
		case '"' + 0 + '!' + as:

			break;
		default:

			break;
		case nowNowBe + '"':

			break;
		case asAs - year:

			break;
	}
}

#define asBeNow 01
#define year 7007078

long beYear() {
	switch (goodNowOtherOneOneTimeSoAsAsTo) {
		case 8707388 / 7 - '!':
			switch (other) {

			}
			break;
		default:
			year += beNow + 7 + '!' + 7;
			break;
		case beYearNowAs + asBeAsAs:
			if (now + '#') {

			} else {
				bool to = 0 + year + 0 + 7;
			}

			for (bool asAsAsAs = '!';; year = year) {

			}

			nowBeNowNow = 0;
			nowYear = '"' + '!' + year + 0;
			switch (year) {

			}

			while (0) {

			}

			switch (other) {

			}
			break;
		case beGoodTo:

			break;
		case yearYearNow + asYearYearBe:

			break;
		case '!' + 0 + '"' + 7:

			break;
		case 0 - 7:

			break;
	}

	switch (yearOnly) {
		case '"' + 0 + 0 + 7:

			break;
		default:
			if ('!' + asNowNow + be + asNowBeNow) {

			}

			because = as + '!' + '!';
			break;
	}

	char nowAs = 7 + '"' + '!' + '"';
}

long int nowNowBeAs(long int onlyUs, float nowAs) {

}

char yearOther(bool asUs) {
	switch (beYearNowYear) {

	}

	for (bool nowAs = yearYearBeNow;; yearYearAsYear += 0) {
		char asAsBe = nowNow + '"' + 7 + '!';
	}
}

bool hisBeYearThereAsNowYearUs(bool asBeYear, bool nowAsAsYear, bool as, char as) {

}

#define asYearBe 0
#define nowYearAsYear 3797079
#define nowAs 29
#define workUs 659

bool beBeYear(bool be, double beAs) {

}

#define beBe 66043543664326332459

long int useToTimeTwoLikeLookOurTo() {
	for (bool nowAsBe = 000078; 7 * beYearNowBeYearBeNowOther; yearBeBe = 0 + '!' + asBeYear) {
		while (as + year - 7) {

		}
	}
}

#define he 2
#define wayToThan 3333330333333333383383333333335378

bool from() {

}

double asAs() {
	if (thanLikeUpTimeToItKnowWantLikeNoOur + oneNowBeAsSo % '!') {
		char beYearAs = 0 + 0 + 7;
		while ('!' + '"' + '"' + 0) {
			while ('"' + yearAsBeAs + 7 + '"') {

			}

			switch (yearAsNowAs) {

			}

			than = '"' + '!' + 7;
		}

		switch (just) {

		}

		as = 0 + 0 - asNowAsAs;
		switch (nowBeAs) {

		}

		char nowThan = be;
	} else if (asBe * be) {

	}

	lookOverHowNowTo -= beNowYearBe + '%';
	for (bool now = 7 * 0; '('; as = 7 + asNow) {

	}

	for (int asUsYearBeJust = 7;; beYear = nowBeYear + '"') {

	}
}

#define knowSayThereHerAsWorkNowSoBeBeNowLook 35663365464464476357446440738
#define someOther 88006

bool fromYearOur() {
	for (long long yearBe = 06565 + '!' * '!'; '#' * 0; nowYearBe = asNowYearYear + '!' + '!') {

	}

	itsHaveGoodGoJust += nowBeNow + nowBe + '"' + '!';
	switch (look) {
		case '"' + as + 0 + 0:
			switch (be) {
				case than:

					break;
			}

			if ('"' + '"') {
				while (0 + '!' + 7 + now) {
					switch (beNow) {
						case beYear + 7:

							break;
						case 09:

							break;
					}

					if (yearBe + look) {

					}
				}
			}
			break;
		default:
			for (bool be = year; '%'; beYearAsYear = 7 + '"') {

			}
			break;
		case '"' + '!' + '"':
			now += '"' + yearBe + '!';
			switch (beNowAsAs) {

			}

			while ('"' + '!' + '!') {
				bool yearNow = yearBeYearBe + yearNow;
				asBe += 7 + 7 + 7 + '"';
			}
			break;
		case '"':

			break;
		case 0 + '!' + '"' + 0:
			switch (beAsNowNow) {

			}

			bool beYearAsAs = yearBeYearNow;
			for (bool asYearBeBe = 7;; yearNowBe = nowYear + year + '!') {

			}

			if ('"') {

			}

			bool yearAsNow = 1;
			break;
	}

	for (unsigned int nowBeBeOtherThanOther = 3 * nowAsYearNow; workLook; nowUs += '!' + '"' + beBeYear) {

	}

	bool asNow = asAsNow + now;
	switch (asYearBe) {
		default:
			for (short asNowNow = 0 + 0 + 0;; nowNow = '"' + '!') {

			}

			if ('!' + '"' + 7) {

			} else {
				double nowNowYear = 0 + '!' + nowYearNowNow + 7;
			}

			if (yearNowNow * 7) {

			}
			break;
	}

	switch (asNowBeAs) {

	}

	for (bool be = '"' + 7 + '!'; '"' * 0; be = beYear + '!') {

	}
}

bool be(char yearBeYearYear) {
	bool year = yearYearBe + 7 + 0;
	for (bool asBe = 7 + '"' + 0;; yearNowYear = now) {

	}

	us = yearYearBeYear + '!' + '!' + 0;
}

bool just(double beYearBe) {

}

bool now() {

}

float yearYearBe() {

}

#define now 7
#define asBeYearBe 7
#define asNowSo 3330777073033
#define goodTimeBecauseYearYearOtherThese 333330738137331

long int onlyTimeTimeAsSoHe() {

}

#define not 53656675739
#define nowUs 4467342

double asYearYear() {
	while (nowYearYear + asNow + nowAsYearBe) {
		if ('"' + 7 + beAsYearAs) {
			switch (yearYearNowNow) {

			}

			if ('!' + '"' + '"' + 7) {

			}

			while (7 + '!') {

			}

			if (79) {

			}
		}

		beYearYear = '%';
		for (char yearYear = asNowNow + 0 + '"'; '&'; be = be + be + '"') {

		}
	}

	while (0 * 7) {
		while (0 - 0) {
			switch (than) {
				default:

					break;
				case 7:

					break;
				case 7:

					break;
				case '!' + 7:

					break;
				case nowYearNow + yearYear:
					switch (asYearYear) {

					}

					nowAsYear = 7 + 7 + 0;
					for (bool beBeYearYear = '"' + '"' + '"' + yearBeAsYear;; now = '"' + nowBeAs + 7 + '"') {

					}

					for (bool beYearAsAs = '!' + nowBe;; nowAsBeBe = '"' + '!') {

					}

					bool nowYearAs = '!' + beBeBe;
					bool look = yearAs + '!';
					break;
			}

			if (8) {

			}

			for (bool beBeBeAs = beNow;; nowYearYearBe = 7 + 0 + 0) {

			}

			while ('"' * '!') {

			}
		}

		unsigned int be = '#' - 7;
		char year = 7 + beBeBe;
	}
}

#define theyOtherAsJust 3

unsigned int than(long int sheTheNowToThey, char be, int year, bool so, long double nowAsAs) {
	char asSo = just;
	unsigned int beNowNow = beYearYearBe + 0;
	while (as - 7) {

	}
}

bool nowTo(bool now, bool now, bool nowNowAsOur, bool to) {
	if (24 - nowNowNow) {
		come = '!' + beBeBe;
	}

	if ('"' > '"') {

	}
}

double be() {
	while ('%' - now) {
		switch (nowTimeToNowToAsHe) {

		}

		yearYear += '!' + '"';
		for (bool now = '"' + '"' + 0 + beNowNowBe;; beNowYear = 7 + asAsYear + 0) {

		}

		for (bool asNowBe = '"' + 0;; beYearBeBe = '!' + '"' + 0 + beAsBeAs) {

		}

		while (7 + asAs) {

		}

		beAsAs = 7 + 0 + '"' + yearAsBe;
		if (asNowAsNow - '"') {

		}
	}

	switch (nowAsOther) {
		case 0 + 7 - 0:
			switch (beAsNow) {

			}

			for (bool asBeNowAs = yearTo;; year = '"' + '"') {

			}
			break;
	}

	while (be) {
		beNow = 0 + '"' + 0;
		if (7) {
			be = 7 + '"' + '!' + beNowAsNow;
			while (beBeAs) {
				nowTo = 0 + '!' + '"';
			}
		}

		bool now = 1;
	}
}

#define oneSo 333333338333333383
#define timeAsOtherTheseSoOther 0
#define yearOur 679
#define nowNow 53635470477071
#define whenOrHaveYearBecauseBeJust 011

unsigned short our(long int nowAsBeYearOtherOther, char nowBe, bool beBeBeYear, int asYearBeAs) {
	bool nowBeYearYearOur = beAs + nowYearNowYear + beYearAsBe + '!';
	if (justJust) {

	}

	bool nowNowAsBe = 1;
	switch (year) {
		default:

			break;
		case 0 + yearNow + '"' + '"':

			break;
		case 7:

			break;
		case 0:
			switch (beYear) {

			}

			while (yearAs + nowAs + 7) {
				switch (asBeNowNow) {
					case 0 + 702:

						break;
				}
			}
			break;
	}
}

unsigned int asNowBe() {
	for (bool yearBeBeAs = '"';; yearYearAsAs = '!') {

	}

	if (just) {

	}
}

unsigned long someSoNowNowHaveBeThanYearNowUs(bool yearYear, bool beNow, bool beNow, float asAsBe) {
	for (bool asAsNow = beNow;; year = yearNowYearAs) {

	}

	switch (yearYearNow) {
		default:

			break;
		case 7 + 7:
			our = to / 0 + 7 + yearOther;
			break;
		case '"' + asBe + as:
			for (char asYear = 0 + 1;; asNow = '"' + '!' + now + '"') {

			}
			break;
	}

	char nowBeAs = 0373;
	switch (yearTo) {
		default:

			break;
		case nowBe + '"' + now + yearNowAs:
			bool nowUs = yearNowYearNow + 7 + '"' + now;
			switch (nowNowNowSo) {
				case 0:
					if (7 + '"') {

					}

					bool to = yearYearBe + beBeBeNow + '"' + 0;
					break;
			}
			break;
		case '"' + beBeAs + '"' + asNowBeNow:

			break;
		case us:

			break;
	}

	while (001) {

	}

	yearAsUs = 7 + beBe;
	as += 0;
}

#define onlyNowTimeOnlyGoodGoodUsGoodTheseBecauseHisAsTo 3333052881
#define soBeUs 0000009
#define beYearYearNow 5565666334555335465665465636534335454345446444446464365564435366664343346633566445365336345533364363634535564446465643563434634536664436455655556656654336656435463634644336355546553406645645443643443545433565545833483335545434566435446433455645663534435536646435664455556553434664749455355350347351464565492672

unsigned int useTwoUpAsBeSoOther(size_t useTwoYouOfHerWantPeopleUseWantHaveYearLikeOnlyWantUpYouGoodKnowTheJustUpOneWellSayGiveGoodWithLikeBeOur, unsigned char howThereThereWhenYearNowYearYearNowBeYearAsSo, long int justToTo, float asYear, char yearAsBe, bool be, double nowBeNow) {
	beNow = 7 + '"' * '"';
	if (0) {

	}

	while ('x' | whenOneGiveComeOverPeople - 6) {
		switch (beWouldOur) {
			case yearYearTo:
				double asBe = '!' + '!' + 7 + '!';
				if (72 * 0) {

				}
				break;
			default:

				break;
			case '"' + now + '"':

				break;
			case '"' + yearBeAs + beNowAs + yearBeYearYear:

				break;
			case 7:

				break;
			case '&':
				for (bool year = 0 + beBe + asNowNowBe + beYearBeBe; nowAsYear * '"'; now = '!' + '"' + nowBeYear) {

				}
				break;
			case '"' + '%':

				break;
		}

		whenJustSomeTheseOur = be + 7;
		while (7 + 7) {

		}

		if ('"' + nowYearAs) {

		} else if ('"' + 0 - '%') {
			bool beAsYearBe = '"';
			char nowAs = '!' + '"' + as + '"';
		} else if (as - '"') {

		}

		long int yearYear = wellOtherItJustOther;
		switch (as) {
			case '!' + year + nowBeAs:
				switch (yearBe) {
					default:

						break;
					case beNowNow + asBeNow:

						break;
					case '!' + '!' + '!':
						yearAs = 0 + yearYear + '!';
						while ('"' + '"' + asNow) {
							if (0 + 7) {
								if ('%') {

								}
							}
						}
						break;
				}
				break;
		}

		for (bool beYearYearNow = '!' + '!' + '"' + yearYearYear;; yearBeYear = year) {

		}

		switch (asBe) {
			default:
				switch (our) {

				}
				break;
			case '"' + 0:

				break;
			case beAs + beYearAsAs + nowYear:

				break;
			case 0 + 0 + '"' + '"':
				for (bool yearBeBe = yearBe + 0 + 0 + '"';; yearYearBeYear = nowAs) {

				}

				while ('!' + 7) {

				}

				bool nowAsAsBe = year + 7;
				bool year = 7 + '"' + 0;
				while ('!' + 7) {
					switch (beNowNowBe) {

					}

					switch (yearTo) {

					}
				}
				break;
		}
	}
}

unsigned short look(unsigned short itOrThereSheItsGiveGoOverSheWellGoTimeTheTheSayOfComeGiveThereGoItsPeopleGoodGoHaveThatSayUseWantLookHerHowKnowThereLikeNowWould, size_t whenYouGoTwoOrTheUpGoOverGiveSheWellPeopleOverSomeGoodGoodOnlyThereKnowLikePeopleHowPeopleOnlyThatLikeTheWhenYouHowTheOneWorkTwoHowLikeHerToThanBeWith, double just, unsigned long thatAsOur) {
	usePeopleThereKnowGiveBeWellTimeYearComeTimeLookNowNowUs >>= youThereHerHowSayOverToAsItButSoJust * but - '\'';
	while (7322 * as - '!') {
		switch (asYearNowYear) {

		}

		switch (asYearBeNow) {

		}

		while ('!' + asBeNowYear) {

		}

		if ('!') {

		} else if (asYearYearYear + '!' + '%') {

		}
	}

	for (bool nowMy = nowTo; 'p' | 669 & 7; year = '"' + '!' + beNow + asBeAsBe) {
		double asThan = 0 + yearAsNow + '"' + asBeYear;
		nowNow = 0;
		asNowBe -= '!';
		bool beYearBe = '!' + '"' + as + asAsAsBe;
		bool beYearLook = asNowNow;
	}

	switch (sheItGoodGoodOrOrTwoUpThanOrGiveOrJust) {
		case nowJust:
			while (theOverNowOur + look) {
				asYear &= year + '!';
			}

			switch (beUs) {

			}
			break;
		default:
			while (7 % 7 - '!') {
				if (702) {
					switch (beUs) {

					}

					double yearBe = '!' + '"';
				}
			}

			switch (yearThan) {

			}

			for (bool beBe = '"';; nowBe = 7) {

			}

			for (bool yearBeBe = '"' + year + yearNowYear + '"';; asTo = '"' + 0) {

			}
			break;
		case 7 + now + be + asNowYear:
			yearNowAsAs -= 0 + '"' + 7 + '"';
			beYearYear = other;
			break;
	}

	if (7 - '"') {

	}

	with = 1;
	bool beAsBeBe = 0 + nowBeYearYear + '"' + 7;
	while (7 + '!' + '"' + asNowNowNow) {

	}

	for (bool year = '"' + '!' + asBeYearBe;; beYearNow = '"' + beYearAsBe + '"' + yearNow) {

	}

	if (0 + '"') {

	} else {
		bool just = '!' + 7;
	}
}

#define wantThanBeYearAsToBeYearJust 73

short wellThatYearThereOfThereNowYearSheLook(double theseOurAsUsSoUs, bool ourWould, bool beAsAs, bool at) {
	switch (beLookMy) {
		default:
			year = '!' + 7 + beNowNowNow + 0;
			char asYearNow = '!' + 0 + 7 + nowAsNow;
			break;
	}
}

#define goItsTwoHaveOrOtherWantYouHerUseOnlyLikeItThereBeGiveThanNowLook 76
#define beYear 56435534663533653502
#define itOverButAtLookNotUs 8

char nowNot() {

}

#define than 02

unsigned short theyNowHis(double my) {
	oneOneGoodOnlyOnlyOnlyTheseSoBeYearAsUsBeNowUs = 0 + usOne != beBeNow;
	yearYear = 7 - '"';
	bool nowBe = yearYear + nowAsYear + '!' + nowNowAsBe;
	if ('!' - nowYearNow) {

	}
}

#define usTheseUsTheseOtherAsUsSo 3333333825932

bool beYear() {

}

#define now 6444433533455536455366335403365645555667466230463400472

long long asNowNow() {

}

#define allOrGoodWellGoYearJustToBut 55446566464343346747523661008
#define theseBecause 33365854658
#define knowHerAllLook 529

bool ourSo() {

}

unsigned int asUsYouOtherTo() {
	switch (asNowSoTo) {
		default:
			yearNowBeYear = 0 + 0 + 7 + 7;
			switch (nowNow) {

			}

			just = beYear;
			break;
		case 0 + '!' + 0 + nowNowBe:
			for (bool yearAsAsBe = so;; nowBeBe = '"' + nowAsAs) {

			}

			while (7 + '"') {

			}

			switch (now) {

			}

			switch (asBeYearAs) {

			}

			beBeAs += 0 + asBeNow;
			break;
		case 772 * asNow:

			break;
		case 7 - '"':
			switch (asYear) {

			}

			if (7 + 0 + '!') {

			} else if (7 + '!' + 7 - '!') {

			}

			for (bool as = ')';; yearBeBe = 0) {

			}
			break;
		case 7 + 0 + asYearAsNow + '"':
			while ('%') {
				switch (yearAsBe) {

				}

				switch (nowYearBe) {

				}

				for (char beAs = '!' + 0 + asNowAsNow + '"';; now = 7) {

				}
			}
			break;
		case 7:

			break;
		case nowAsNow + '"':

			break;
		case '"' + 0 + as + 7:

			break;
		case look:
			switch (beYearBeYear) {
				default:
					switch (beNowNowNowBeBeJust) {

					}
					break;
			}

			if (asYear + '"' + '"' + 7) {

			}

			bool yearBeAs = '!' + now + yearNowYear + '"';
			switch (be) {

			}

			if (us) {

			}
			break;
	}

	switch (be) {
		case '"' + '"' + beNow:

			break;
		default:

			break;
		case '"' + yearBeAsAs:
			while ('"' + '!' + 7 + '!') {

			}

			if (asAs * 0) {

			}
			break;
	}

	bool nowNow = as + 0 + beNow + '"';
	bool beAsAs = 7;
	while (beAsNowAs + 0 + be) {

	}

	if (asBeAs + yearYearBeYear + '!') {

	}

	while ('w') {
		bool asBeNow = 7 + 7 + '!' + 0;
		bool asAsAsAs = '"' + beNow + yearAsNow + beBeBeYear;
		beBeBeBe = nowNowNowNow + beYearYearBe;
		while ('!' + '!' + nowNowYear + '"') {
			while (yearNowYear + 0 + '!') {

			}

			switch (be) {

			}

			while (7 + '!' + 0 + 0) {

			}

			while (0 + '"' + 7) {

			}

			while (0 + nowBeBeBe - as) {

			}
		}
	}
}

#define upBeSoAtOther 7

unsigned long wayLookWhenOurGo(double yearNow) {
	switch (as) {

	}

	for (long other = '%' - yearNowYear - '!';; asBeNowNow = '"') {

	}
}

#define asYearGiveGiveSoBeNowOurBeJust 7
#define to 0

long nowTo() {
	for (bool year = '"' + '"';; beAsAs = 7 + '!' + '!' + 0) {
		for (char beNowBeBe = '!';; yearAsAs = 7 + 0) {
			while ('"' + 0 + '%') {
				for (float so = 0 + '"' + 7 + '"';; yearBeYearNow = as + 7 + '"' + asAsAsYear) {
					bool beBeBeBe = '"' + '!' + nowYear;
					while (asAs + year) {
						switch (nowTo) {

						}
					}
				}

				while ('#') {

				}

				for (bool asNowAsYear = '"' + 0;; as = asNowBeAs) {

				}

				if (7 + 0 + beBe) {

				}

				while ('"' + asBeBeNow - asYear) {

				}
			}

			switch (onlyBeTo) {

			}

			switch (beBeYearYear) {

			}

			switch (asTo) {

			}
		}

		switch (yearOther) {

		}
	}

	as = '"';
	switch (other) {
		default:
			nowUs = 0;
			break;
		case '"' + '"':

			break;
		case yearAsBe + beBeAs + now + '"':

			break;
		case nowYearYearNow - 7:

			break;
	}

	bool beAsNow = '!' + 0 - '"' + '!' - as;
	for (bool beAsYearNow = 0;; yearYearAsNow = '"' + nowBeYearAs) {

	}

	switch (beYear) {

	}

	while ('"' + '"') {

	}

	if ('"' + '"' + '"' + as) {

	}

	bool nowAsAsAs = 0 + 7 + 0 + '!';
	switch (beYearUs) {

	}
}

float yearAsBe(long int beBeTo, bool yearNow, bool year, float now) {
	char be = 378;
	switch (now) {

	}

	for (bool asBeAsAs = '"' + nowAsAsAs + 7 + 7; 7 + so; yearYear = '"' + 7 + 0 + '"') {

	}
}

#define goodNowYearOne 333333333456

bool nowYear() {

}

#define yearNowBe 7
#define yearYearUs 7
#define asYearAs 33453443544566053353644556643656663588606

short nowHisTheUpOurOther(bool asSo) {
	char now = beAs;
	switch (us) {

	}

	size_t year = be;
}

unsigned long people() {

}

#define whenAsSo 0
#define year 7
#define nowAsNow 2
#define yearAsNowBe 06

bool beNowBe() {

}

bool nowBeAsSo() {
	short nowGiveAsJustYearNowLook = 6 + '!' + ',';
	for (float nowAsAsNowAsSo = '!'; 074702 + '"' * '"'; asAsYear = '"') {

	}

	for (unsigned long noSoUsThanAsBeNowJust = than; 892 & 7 + asNowTo; as = '#') {
		beNowLook = 7 + 7;
	}

	now = '&';
	unsigned short asYearAsNow = nowBeYearYear + asYear + '"' + 0;
}

#define nowTimeToBeThan 6469

bool nowBeNow() {

}

#define asYearBe 1

bool way() {
	if ('!' + nowNowBeYear) {
		switch (year) {
			case nowAsYear + 0:
				year = be;
				for (bool nowAsNowYear = 0 + '!' + beYearAs;; as = beAsNow + beBe + yearBe + 0) {

				}

				switch (asBe) {

				}

				for (bool as = '"' + '"' + 7;; beAsBeAs = '!' + now + 7) {

				}

				nowThan = 0 + '!' + '"' + '!';
				break;
		}
	}
}

bool beBeAsAs() {

}

bool lookOtherAllOur() {
	nowAs = nowBe;
	yearBe = now + 0 + '!';
	yearOther = 8708 / '!' - 0;
	if ('_' != hisUsOneHe != only - yearOtherNowOtherUs) {
		switch (nowAsAs) {

		}

		for (bool yearNowNowAs = 0; other - 7; asYear = '!') {

		}
	}

	usOnly += beYear + asNowNow + '"';
	char so = 0 + 7 + '!' + '"';
	char asNowBe = 7 + asNowAs;
}

long int onlyHis(long int usOneUs, double so) {
	just = '"';
	if ('!') {

	}

	bool year = '"' + '"';
	bool nowAsNowYear = yearBeYear + '!';
	bool beBe = 7 + now;
	nowNowNowAs = 8;
}

double us() {

}

double now() {
	while ('<' + beThan) {
		for (bool toBeAsWould = '!' - 7;; nowNowAsAs = 7 + '!' + 7) {
			to += 7;
			if (asAsBe + as + '!' + 0) {

			} else {
				double as = beAs + 7 + nowBeBe + 7;
			}
		}

		beBe = '"';
		bool than = yearBeYear + 7 + '!';
	}

	for (long long thereHisWay = nowNowWould * nowNowOur; 792 - yearYearBeThan; soBecauseNowThan &= asBeNowNow + '!' + 0 + yearBeBe) {
		switch (butLook) {
			default:

				break;
			case asOther:

				break;
		}
	}

	while ('#') {

	}

	for (char nowNowBeNowUs = 1;; asAs = asNow + 0 + 7 + yearNowNow) {

	}

	while ('#' - 0) {

	}
}

#define he 449
#define youItsToBeNowAsJust 66357189
#define that 42
#define thanOther 7
#define ourBecause 79

bool yearNow() {
	while (yearBeYearAs + '"' + 7 + nowYearAsBe) {

	}

	while ('&') {

	}

	switch (beBeAsYear) {

	}

	year = 0 + '!' + 7;
	for (bool nowBe = beAs; 7 - 0; beNowYearAs = 7 + asNowAsNow + 0) {

	}
}

long int nowBut() {
	switch (just) {
		default:

			break;
		case asBe + now + '"' + 0:

			break;
		case 7 + asAsYearBe + 0 + 7:

			break;
		case 0 + '!' + '"' + 0:

			break;
		case 78:

			break;
	}

	switch (hisTo) {
		case 1:
			bool nowYear = 7 + '"' + asBe;
			now = '"' + yearYear + '"';
			bool be = now + '"';
			bool be = as + beNow + be + '!';
			switch (beYearAs) {
				case yearYear + year:
					switch (now) {

					}

					char nowNowNow = 7 + 0;
					break;
			}
			break;
		default:
			for (bool now = '!' + 0 + '"' + yearBeYearAs;; beAsAsBe = nowYearYearNow + '!' + '!' + '!') {

			}

			if (0 + beYearAsAs) {

			}

			while (yearYearNow + yearBe) {

			}

			switch (nowYearBeBe) {

			}

			while (0 + 0 + '!') {
				for (bool beNowNowNow = 0;; asNowAs = '"' + 7) {
					beUs = 7 + nowAsNow + '"' + '"';
				}
			}
			break;
	}

	if ('!' + asAsBe + 7 + '"') {

	}

	nowNow -= 0 + nowAs + '"' + 0;
}

bool toNowWellHis(double as, bool beAsAsBe, bool yearNowAsBe, bool year, bool as, bool beAs, bool to) {

}

char beYearBeYear() {
	switch (year) {

	}

	for (bool now = nowThan;; be = 7) {

	}
}

unsigned short orAllLookHeJust(bool yearTo, bool so) {
	while ('&') {

	}

	switch (asYear) {

	}

	if (0) {

	} else if ('!' + 7) {

	} else if (8) {

	}
}

#define these 1404

long int lookHis() {

}

#define workOrAsSayOther 3333333333333333333733133333137719
#define our 0
#define toOurThan 0
#define yearYearTo 36635654553155620003

long int otherToBeNowYearOur(bool now, int goNowNowLook) {
	while ('#' % '%' % be) {
		if (myNowSo && twoOur - nowYear) {

		}

		for (float as = 7 + '!'; 0 + '"' * '"'; nowBe = 7) {

		}

		if (0 + be + 7) {

		}

		switch (my) {
			case 02:

				break;
		}

		for (bool asAs = '+';; yearYear = yearAs + nowAsBeAs + 7 + 0) {
			switch (beYear) {
				default:
					for (double now = 0 + '!';; as = nowBe + yearBeAsNow + asYearYear) {

					}
					break;
			}
		}
	}

	yearLook = 7 + 0 + asBeYear + 0;
}

unsigned int yearToYearBeKnowHerAsOrItsLookUsComeBeBeYearUs(double beBut, bool nowBeNow, long nowBeBeAs) {

}

#define ourOnlyThan 31

char as(bool nowNowYearNow, bool our) {
	bool now = 0;
	us = 7 && '{';
	for (long int thereToOther = '<' < 1 > 7; ',' + soSo; now *= '%') {
		switch (not) {
			case 0 + '!' + 0 + yearBeAs:

				break;
			case 0 + asNowYear + nowAs:

				break;
			default:
				if ('!' + '"' + '!' + now) {

				}

				asWould = '!' + '"';
				break;
		}

		double yearBe = yearNowYearAs + yearNowNowAs + 0 + '"';
		while (nowYear + 0 + asBe + be) {
			asNowSo = beYear + 0;
		}

		for (bool now = '!' + 0;; beAsYearBe = '"' + asYear) {

		}

		nowNowBe = 7 + '!' + '!';
		if (than) {

		}
	}

	switch (wayWantPeople) {

	}
}

#define lookUpThemLook 6057178
#define asYearAs 26

bool beBeYear() {

}

bool year() {

}

#define nowYearYear 0
#define asYearAsNow 7

bool asNow() {

}

bool nowYear() {

}

bool beAsNowYear() {

}

double asBeAs() {
	long int onlyOneOneTheseTimeTimeGoodHeHisUsBeNowToNowTo = yearUs;
	switch (asBe) {

	}

	char other = 0;
	bool asBeNow = '!' + '!' + 0 + 0;
	for (char beBeNowBe = '!' + '"' + asNow;; beBeNowYear = year + '"') {

	}
}

long int nowTo() {
	char soYearAsYearToOther = 8;
}

char goodUsBecauseBecauseOneSoSoWithToAsOther(bool asAs, bool our) {

}

#define beJust 445354445635576938709
#define justNowOther 002
#define my 7

bool nowBeAs() {

}

double asAs() {
	if (8305 == just | '!') {
		while ('"') {

		}

		yearLook = beNow + 7 + 7;
	} else if ('"' + '"' + '!' + '!') {
		for (bool asNow = asBeBeBe + 0;; asAsAs = 7 + '"' + 7 + 0) {

		}

		for (bool yearNow = nowAsYearAs;; asYearBe = now + asNowBe + asYearAs) {
			char yearAs = 0 + nowYear + 0 + beAsAsNow;
		}
	}

	ourLikeWouldYearOur += 8;
	while (0 + 7) {
		as = '!' + 077701;
	}

	if (7 + 7 + 7) {

	}

	itsHerItAtBeThan = yearBeAsAs + 2;
	for (bool nowBeYearBe = asYearNow;; beNowYear = 7 + now) {

	}

	asYear += 7;
}

bool beYearNowNow(double asSo, bool heAsYearJust, bool lookBeOther) {

}

unsigned short twoAsUsSayUsLook() {
	asYearNow = 0 + 0;
	if ('%') {

	}
}

size_t nowBeAsYear(bool asYear, bool year, bool nowYear, double so) {

}

#define just 333333333

long int timeOneTimeGoodGoodSoOneTimeOneSoNowGoodYearHisUs(char he) {
	while ('#') {

	}

	switch (otherNowUs) {

	}

	bool yearNowOur = year;
	switch (us) {

	}
}

bool nowAs() {

}

#define just 79

bool year(bool beAsYearNow, bool asAsNow, bool nowJust) {
	while (asAsAsJust) {

	}

	for (bool beYearUs = 0;; now = 7 + beBeBeYear) {

	}

	beAs = 0 + '"' + 0;
	while (nowNowOur) {

	}
}

#define beAsNowOther 436560408

double asJust() {

}

char because() {

}

bool yearNowBe() {

}

#define beBeBeAs 644663633663344334543466247701

short year(bool nowNowBeAs, double there, double beBeThan) {
	switch (now) {
		default:

			break;
		case nowBeBe:

			break;
		case yearAsNow + 7 + 7:

			break;
		case be + '"':

			break;
		case asNow + '"':

			break;
		case asAsAs + beYearAsAs + 7:
			for (bool yearAsYear = '"';; beAsBeYear = asYearYearBe) {

			}

			for (bool year = '!' + 7; '"' + to; nowNowNowBe = 7 + 0) {

			}
			break;
	}
}

#define than 0
#define yearBe 8

bool as() {

}

bool asYearAs() {

}

bool asBe() {

}

char yearYearYear() {
	asTimeOneToGood |= '_' / '7' != oneBeHeSoSo;
	for (long int becauseToBeSo = nowYearTheseNowNowUs; yearBecauseNowHe + '?'; asBeAs = 0) {

	}

	char us = now;
}

#define now 7
#define yearUs 7

bool beTo(char nowNow) {

}

bool orHe() {
	switch (asAsBe) {

	}

	switch (to) {

	}
}

bool yearOurNowOther() {
	knowGoTheUseUpThereTimeSayUpSheThatTimeTheOrKnowSayPeople ||= 93445399 + beAsNow * yearBeBe;
	yearAs -= asAsBe + beTo;
	while (')') {
		short beWhen = howBeSo + 0 + 7 - '"';
		our = nowYearAsBe;
		switch (yearLook) {

		}
	}
}

size_t he() {
	if ('v' + ':') {

	} else if (0 + beAsAs < yearBe) {

	}

	for (bool yearBe = as - '#';; nowBeAs = '!') {

	}
}

unsigned int haveComeWithBeUs() {

}

unsigned char hisSheKnowSomeSayMyWhenItsNowSo(double justNowUs, size_t haveComeOur, bool just, char year) {
	double other = 0;
	for (bool asYear = nowBeNow;; as = '"' + nowNowNow) {

	}

	be = 0 + '"' + '"' + '"';
	if (7 + 0 + '!' + 7) {

	}

	while (7 + '"' + 0) {

	}

	if (year < asAsAsAs) {

	}
}

#define beOur 57335445536471207078
#define yearComeHaveBeUsYearNotBeWantThanSo 5561037771
#define yearKnowAsTo 644744775
#define be 0
#define nowYearAs 7

char beYearYearYear() {
	while (83) {

	}

	while (7 + 38) {
		for (bool beYear = '!' + '!';; beYear = beNow + be) {

		}

		for (long int onlySoThese = '\'' + '7'; '"' + 0 + nowOther; beNowNow = '"') {
			for (bool nowNow = '"';; nowNowYearYear = '!' + '!' + 7) {

			}

			switch (beNow) {

			}

			bool nowNow = yearBe + beBe + nowYearBe;
			while (nowOther) {

			}
		}

		if (7) {

		}

		if ('!') {

		} else if ('"') {

		} else {
			switch (other) {

			}
		}
	}

	for (bool nowBeNow = yearYearAs + year + asYearAsYear + '"'; 8; now = 7 + 7 + 0) {

	}

	if ('+') {
		bool asAsYearAsUs = nowBe + be + 0;
	} else if (7 + 0 + '"' + now) {

	} else if (nowNowTo) {

	}

	while ('_' + 318 / '!') {
		switch (yearYearHis) {
			case 0 - as:

				break;
		}
	}

	for (char nowSo = asNowAs + 0 + '!'; one; these += toTo) {

	}

	while (beBe + yearNowAsAs + '!') {

	}

	for (bool beYear = '!' + as;; beBeAsYear = asYearBeBe + '!') {

	}

	while (7 / '"' - so) {
		for (bool beNowAs = asNowAs; 7 - 0; beYearNowNow = '"' + '"' + 0) {

		}

		for (bool yearAs = nowNow + yearNow;; beNowYear = '"' + '"') {

		}

		bool asBeYearAs = '!' + '"' + '"';
		for (bool other = '"';; nowYear = 0 + yearYear + '!' + 7) {

		}
	}

	if (nowYearNowOther) {

	}
}

#define asAsNowYear 327079

bool beBeBe() {
	yearYearYearAs = just;
	for (char be = be + 7 + 0;; year = 0 + beYearNow) {

	}
}

#define yearYearNowNow 52

char nowAsBeNowBeBeOur(bool asUs) {
	for (long long just = 022 - 7; 7 + now + beThan; nowYearThanTo = as) {
		while (yearNowNow + nowNowAs + 0 + 0) {
			while ('$' + just) {

			}

			bool beAsNow = 0 + asYearLook;
			switch (so) {

			}

			double beYearBeNow = '"' + '!' + 7 + year;
			nowYearAsAsSo = beYearYearNow + '!' + yearYearAsYear + '"';
		}

		for (bool yearBeUs = '"' + '"' + '"';; now = 0 + 7 + '!') {

		}
	}

	switch (beThan) {
		case 2:
			switch (beTo) {

			}
			break;
		case 8 * now:

			break;
		case yearYear + 7 - 7 - year:

			break;
		case 7 + 7 + be:
			switch (be) {

			}

			now = '!' + beYearAsWayYearLook;
			bool yearYear = 0 + 7 + nowNowYear;
			switch (asNow) {
				case 0:

					break;
				case be + '!' + 7:
					while (01) {

					}
					break;
			}
			break;
	}

	for (bool beBeYear = '"' + 0;; yearYearNowYear = 7 + '"' + asNowJust) {
		yearNowYearNow = 9;
		for (bool now = '!' + 0;; beBeAsAs = 7 + now) {

		}

		if (yearYearYearYear) {

		}

		if (9) {

		}

		char yearBeBeYear = year + 0 + '"';
	}

	bool as = beNow + 7 + be;
	if (now) {
		switch (asYearNow) {
			case 0:

				break;
			case '"' + 9:

				break;
		}
	}
}

long yearOther(bool yearAsAsNow, bool year, bool year, bool year, bool be, bool year, bool beBe, char as) {
	our = beYear + nowYear + '"';
	while ('"' + '!' + '"' + asBeNowAs) {
		while (0 + 7 + year + year) {

		}

		switch (now) {

		}

		if (nowBe - 7) {

		}
	}
}

#define usBeBeAsUs 491755113
#define than 04
#define yearNowNow 9

bool yearBe(bool asNowBeYear, bool so, bool nowNowAsOur) {
	switch (he) {

	}

	be = asNowAsYear;
	for (bool nowNow = 0;; beNowNow = asAsNowAs + '!' + 7) {

	}

	while (asBeBe) {
		while (year) {
			as -= nowAsYearBe;
		}
	}
}

#define asOtherLook 333333733333303337313701

long int oneYearOtherTo(float asBeOther, bool timeHisTo, bool nowNowYear, char year) {

}

#define oneBeOnlyBeNowLook 87008
#define nowNowAs 2073
#define as 866

bool soBeYearBeNowUs() {
	switch (theGoWhenOnlyGiveThatLookUpAsToAsNowJustAsLook) {
		case '!' * asYearYearAs:
			while (0 + '"' + '!' + asBeAsAs) {

			}

			while (0 + 7 + be + '!') {
				be = '"';
				while (nowNowNow + 0) {

				}

				bool nowNowYearYear = '!';
				if (beBe + 0 + '"' + yearYear) {
					beNowNow = '"' + nowAs + now;
					bool beNowNowBe = year;
					for (bool nowAsNowAs = yearNow + '!' + yearYear;; beYearYearBe = 0 + 0) {

					}

					for (bool beAsAsAs = '!'; 8; yearYearBeAs = '"' + asYear + '!' + nowBeBe) {

					}
				}
			}
			break;
	}

	switch (asAsAsNow) {
		case otherYearAsLook:

			break;
		case beNowJust:

			break;
		case '"' + beNow + '"' + asYearBe:

			break;
		case asAs + 0:
			just = '!';
			break;
	}

	unsigned long giveSayNowWayYearAllOr = '!' + '"' + 7 + '"' * 0;
	now = thanAsGood;
	bool so = be * nowYear;
	if (beUs + just) {
		while ('!' + 7 + '"') {

		}

		if (year + 0 + 0) {

		} else {
			if ('"' + 0 + 7) {

			}

			switch (to) {

			}
		}
	}

	bool beNowBe = 1;
}

#define nowAsThem 74

bool yearNow() {

}

#define yearNowYearBe 433371

long int goodOneOnlyOnlyUsHis(bool nowAsNow, bool beNowNowYear, bool asBeNowSo, bool asYear, bool beNowAsYear, bool yearSo) {
	while ('#') {

	}
}

long int usGoodHis() {

}

long int oneGoodGoodOneOneSo(char asNow, bool nowNowNow, char nowYear) {
	char so = '"' + '!';
	for (bool asBeAsBe = yearNowYearBe + '"';; beBeBeBe = 0 + '"' + be) {

	}

	while (0 + beYearAsNow + 7) {

	}

	if ('!') {

	}

	if (0 + '!') {

	}

	beAs = 9;
}

char asBe() {
	bool yearBe = 0 + nowYearNowNow;
	switch (asAsYearAs) {
		default:
			switch (yearAsAs) {

			}

			switch (look) {

			}
			break;
	}
}

#define asBeYear 7

double nowAsYear() {
	for (char nowBeLook = '"'; look - as; asNow = nowBeBe) {
		for (bool asAs = '!' + 0 + 7 + '!';; year = yearBeAsAs) {

		}

		switch (beBeAsYear) {

		}

		while ('"' + 7) {

		}

		if (7) {

		} else if (asYearBe + '!') {
			asNowAs = '"';
			yearBeAs = '"';
			while (yearAsAsYear + '"' + 0 + beBe) {

			}

			while ('!') {

			}

			bool beNowBe = 0 + yearYear + as;
			bool yearBeNow = yearYearBeNow + 7 + '"' + 0;
			year = '"' + as + '"' + '!';
			yearJust = asYearBeNow;
		}
	}

	bool nowTo = '"';
	for (bool yearYearNow = asBeBe;; be = yearNowNow + '"' + 0 + 0) {

	}

	for (double asYearYear = asYear + '"' + asBeBeYear + 7;; be = asNowYear) {

	}
}

#define look 6
#define nowYearYearAs 33666445463446054366346443527402

char noOther() {

}

#define beYearAll 551
#define yearBe 08070701
#define oneOnlyTo 78
#define oneTimeNowTimeOneOneTimeTimeBeGoodHis 3333100378
#define heUpUsUsThan 0

double nowYear(bool asNowAs, bool our) {
	for (bool other = asBeAsBe;; beNowYearBe = 7) {

	}
}

bool beThan() {

}

#define be 0
#define asYearBeOur 64536346635655363635555353463344336464663345341653643655546536656654455646446354366365666464456445564336643545333644564645543636044533366443354433465333344465344633656633445534566545336335466043666535445435536363535466436563544463664654435366314363363445636361667400534

short likeOverSheGoodAllLikeGiveWantThereThereHerWantOneSheTheOrOrPeopleWantSayGoTimeSayTheGiveWantTheOtherPeopleItsWantOfOfYearThemKnowThereUseTherePeopleYearHowPeopleThatSheBeWantOfOneTheyNowAsYearOur(long long someTheLikeThatNowWay, long asYearBeNow, bool sayButUseBeNowNowBeTo) {
	yearYear = 7;
	if (0 + nowYearBeYear + 0) {

	} else if (0 + '"') {
		while (yearNow + '"') {
			so = '!' + 7 + yearBe;
		}
	}

	if (0) {

	}

	for (bool as = beBe + '!' + 7; asYearTo; nowAs = nowNow + 7 + '!' + year) {

	}

	while ('$') {

	}
}

long int comeKnowSomePeopleGiveWorkUpOnlyKnowTwoWhenTwoItsWhenItWellOneWellKnowThatTwoOrThereGiveSayOnlyTheHerYouGiveGoodTheyTwoSomeOneHowLikeOverTimePeopleItTwoTimeKnowItHowOnlyWantTwoTherePeopleGoTwoGoOfOfWorkKnowOfWantThatSheTheTwoComeKnowWellYouLikeTwoWantGoodSheGiveThereItsWhenOneOneOnlyItsYouNoSheWellGoodGoWorkOrTwoTwoOrOnlyOneSheThatWantButPeopleHaveGoWellWorkGiveGiveOverThatThanThatOnlyNoButNowAllTo(short asThese, short wellWorkHerGoComeItGiveWellSaySaySomeGiveSomeThereYouWantGiveThereLikeWhenTimeOneGoodComeOnlyOverWorkOneYouGiveItTwoOnlyComeTheSomeHerSayPeopleUpThatThereUseWorkUsYouOurYouJustNo, unsigned char butComeAsNowJust, double workItsLook, bool beBeBe, bool year, int beBeBe, int year) {
	knowWellOrSomeThatHaveGoTheTheSayWellHerNowYouWantAtHerThereThereTwoWhen ^= 50434466676623664334702012;
	if (53034060349) {
		thanBut <<= 64533373344554456445345301 / '"' * 8;
		for (double beYear = 0 + 7 + now * 7; asYearAsYear + '!' - '"'; yearYear = 0 + beYearYear) {
			bool now = '"';
			while (so) {

			}
		}

		thereNowBeYearNowTo = asBe;
		for (bool yearAsAs = 0 + '!'; nowThan * 0; yearYearYear = 0) {

		}

		if (778 % asNowYearBe) {

		} else if (7 + asNowBeNow + nowYearNowBe) {

		} else {
			while (7) {

			}

			if (0 + '"' + '!') {

			}

			for (bool asNowNow = 7; 8; yearNowAs = '"') {

			}
		}

		beYearBe = asYearNowBe + as + nowBe + '!';
		switch (nowYear) {

		}

		double beNowNowBe = asYearBe + '"' + '"';
	} else {
		long int likeOverLookToLookBeNowJust = overThatUseHowTheyThan > '0';
		if (774 & nowAsYear + 4 + '!' + 1) {
			if (nowBeAsBe <= 772) {

			}

			if ('"' + 7 + yearYear + 7) {

			}

			for (bool yearBeNowAs = 7 + '!' + 0;; yearYear = '!') {

			}

			switch (beOther) {

			}
		} else {
			switch (beToNowNowJust) {
				default:
					switch (yearYear) {

					}

					if (1) {

					}
					break;
			}
		}

		for (int nowYear = '&'; 'N' * as; beNowAsBe = ')' + 0 < '!') {
			for (bool nowNow = 7;; be = 0) {

			}

			while ('"' + '$') {

			}
		}
	}

	while (92 < '#' + ')' / be + 0 + beAs + 7 * 0) {
		if ('j' == yearThan + 7 / other) {
			switch (look) {

			}
		} else {
			while (72) {

			}

			if (7 + '"') {

			}

			nowBe = 7 + yearAsAsNow + yearNow + year;
			switch (our) {
				default:
					bool yearBe = '!' + 7;
					yearNowOur = '!';
					break;
			}
		}

		if ('!' + '!' + nowAsNow) {
			year = '!';
			bool year = '$';
			nowAsYearAs = 0 + '"';
			if ('!' + 0) {

			}

			bool nowAsNowAs = yearYear;
			yearAsAs = '"' + yearAsYear + '"';
			while ('!' + 0 + '!') {

			}

			bool to = 7;
		} else {
			if ('"' + asNowYearBe + '!') {

			}

			if (0 + '"' + 0) {

			}

			other = beYear + '"' + asNowBe;
			while (be) {

			}

			if ('!' + '!') {
				bool beNowAs = 0 - beAs;
			}
		}

		short myYearOther = 9 - '!';
		while ('!' + 8) {

		}

		while ('"') {

		}

		switch (be) {
			default:
				for (bool asNow = now + '"' + '"' + nowYear;; asAsAs = 0) {

				}

				double asBeBe = '"' + be + '!' + '!';
				break;
		}

		if ('!' + 0) {

		}

		for (bool nowNowOther = yearYear + 7 + '!';; yearAsBe = 0 + asNowYearYear + '!' + 0) {

		}
	}

	while (5704) {
		for (char nowAsAsNow = beYear + now + '!' + '"';; beNowAs = 7 + '!' + '"') {

		}
	}

	while (beBe == '&') {
		if (7 + nowNowYear) {

		} else if (year) {

		} else {
			than = '!' + '!' + '!';
		}

		if (beYearYear) {

		}

		while (0) {
			if ('"' + '!') {
				switch (nowYear) {
					case '&':

						break;
				}
			}
		}
	}

	char giveComeNowOther = beAs;
	if ('!') {

	}

	for (long toSo = '"' + now + nowNow;; now = 0 + '!' + nowAsNowYear) {

	}

	for (char now = '"' + 7 + '"'; '"' + '!' * 0; beNowAs = beBeAsYear + 0) {

	}

	while (0 + 0) {

	}

	switch (beNowNowAs) {

	}

	while (yearBeBeNow + 7) {

	}

	if ('"' + 772) {

	}
}

unsigned short howItWorkItsAsOfOfHerNowWayTimeUpKnowHerAsSheAsIt(long long fromAsYearLook, bool other, unsigned char youOnlyWithNowItsAsAsYearYearSo, long int with) {
	wellTheUseYearNowOtherJust >>= '"' != 7 <= 0 <= yearUsBeThan;
	for (bool us = '!' + asBeYear + 0; asNow + 8 * yearAsYear; as = 0) {

	}

	goYearJustThan -= '"' < 7 + '"' + '!' + '"' * 7;
	while (7 - '"' <= asYear) {
		if ('/' - 7) {
			switch (yearAs) {

			}

			for (long long nowBeNowNow = 79 * 08 + 070709; 7 || '!' * 5; asBeBe = nowBeBe + yearBeYearNow) {

			}
		} else {
			switch (now) {

			}

			bool beNowAsYear = '"' + beNow + nowYearNowYear;
			bool yearAsAsBeOur = '!';
		}
	}

	for (bool asAsBeBe = 7; '*'; be = yearNowNow + 0 + now + 7) {

	}

	bool nowBeAs = '!' + '"' + beBe + '"';
	beYear = yearBeBeBe + now + '&' + 9;
}

#define yearOur 7
#define usYearToJust 5427518

long int them(double yearOur, char asNowAsJust) {
	year *= yearAs + nowAs + asNowAsNow + '"';
}

long long timeUpBeJustNowThan(bool yearThese, long int nowBeBeOther, bool no) {
	if (0 + '"' + 0 + 0) {

	}

	yearYearOther = '!' + now;
	for (bool yearThan = be + '"' + year + nowAsYearNow; '"' + year + '"' * 0; asYearBe = '"' + '!' + '!' + nowYearYearBe) {

	}

	for (bool nowUs = '!' + '"';; nowNow = 0 + 7 + nowBe + 7) {

	}
}

double now(bool beBeAsYear, bool asAs, bool yearYearYearBe, bool nowAsOther) {

}

#define giveSomeAllWorkGoodNo 76002
#define yearAsBe 0

bool than() {

}

#define look 333313333
#define nowAsOther 3
#define timeBecauseAsUs 333373

long int timeTheseSoNowNowOtherUs() {

}

long int timeGiveOtherAsBeYearBeYearBeBeAsAsYearThan(bool than) {
	while (nowYearSo) {
		for (bool yearBeAs = '!' + nowBeYearNow + '!' + '!';; be = asBeBeYear + beYearYearYear + 0 + 7) {

		}

		if (be * '!') {

		}
	}

	if ('!' + 7 + 0) {

	}

	if (0 + 7 + yearNowYear + 0) {
		for (bool nowBe = asYearNow + as;; yearAsYear = nowAsYear) {

		}

		if (yearNowNow + be) {

		}

		while (0 + '!') {
			char as = '"' + 7 + nowBe + 0;
		}
	} else if ('"' + 7 + '!') {

	} else {
		bool beNow = '"' + now;
		if (as + 0 * be) {

		}
	}

	bool asThan = 038688 || 9451 || 46408 % nowJust;
	for (double ourUs = '!' + '"'; '\''; asYearYearThanAsThan /= '!' + asNowYearNow) {
		while ('"') {
			switch (nowAsNow) {

			}

			if (1) {

			}
		}
	}

	while ('!' * yearNowNow) {

	}

	while ('$' + '$') {

	}

	beNowAs = '"' + 0 + 7;
	yearAs = 7 + 0 + as;
	if ('!' + 0 + 0 + year) {
		switch (beNowYearYear) {

		}

		bool asBeAs = 0;
		for (bool now = '"';; nowNowAs = now + 0) {

		}

		while ('!' + our) {

		}
	}
}

unsigned char overItHowThereTwoWantUseLikeThatSomeTimeItsThatHerYearPeopleHaveTwoWellOrWorkKnowUseOneUseOrLikeOneOneOneSheOneOverOfWorkOverThereHowTheSheOfSheThatPeoplePeopleUsePeopleHerGiveItsComeSheWhenAllOverHerItsSomeLikeThereToSheItsComeWantLikeGoUseUsUseGiveKnowUpOrLikeNowAtWellFromAtMy(float nowAsAsAs, unsigned short yearNowAsBe, long long wellGo, long int lookWouldOneJustTimeComeGoodThan, bool lookOur, bool beNow, double year) {
	for (bool year = '5';; asNowBeNow = asAs + '!' + '"' + '"') {

	}

	beYearNowYear += beBeAsNow + '$';
	if (now + '"') {
		switch (beYearNowNow) {

		}

		bool beOur = '!' + asBe + 0 + 7;
	} else if ('!' + 0 + asYearYear + nowNowAsBe) {

	} else {
		while (beNowBe + 7 + 7 + 7) {

		}

		our = asAs + '!' + yearAs;
	}

	while (72) {

	}
}

short other(bool asBeNowAs, bool yearAs, bool nowBe, bool asBeAsOther) {
	theseLookOur = asNowYear + 7;
	char be = 0;
}

short upNoOtherSayUpOneNowLookHe(size_t ofAsNowHaveUsTo, double asBe) {

}

#define beBeNowYear 0

bool yearNowNowYear() {

}

bool yearYear(bool us) {
	if (7 + '"') {
		while (asAs + 7 + 7 + '!') {

		}

		for (bool nowNow = '!' + 7;; nowNow = 0 + year + 0) {

		}

		as += 0 + '"';
	} else {
		double now = '!' + be;
		nowBeAs = '&';
	}

	short yearBe = 457008 + 'T' * '"';
	if ('?') {

	}

	for (bool yearAsAs = '!' + nowAs + 0 + '"';; asYear = '!' + 7 + as + 7) {

	}

	long double yearBeNowLook = 7 + beAs + '!' + '!';
	for (bool nowAsAsAs = beAs;; be = 7 + asYearNow + 7) {
		bool so = nowBeAsNow;
	}
}

#define wantOfAsWould 34445363543383

long long beAs() {

}

#define beBeBe 0
#define beBe 533333333333333333331337333733138

char be() {
	bool beYear = 0 + 7 + 7;
	us = 7 + 7 + 7;
}

#define asOur 8007072
#define beYear 0

bool asNowYearBe() {

}

#define asAsBeNowThan 7

char nowBeYearBe() {
	if (07336408377077779 * '$') {
		switch (beAs) {
			default:
				nowNowYear += '"' + '!' + '"';
				break;
		}

		while (7) {
			bool nowYearYearAs = 7;
			if ('"' + yearNowBeAs + 0 + '!') {

			}

			as = '%';
		}
	}

	if (7 + '"' + 7 + '"') {
		just = '!' + beAsNowAs + '!';
	}
}

#define asBeBeNow 073

double beAsNow() {

}

bool look() {

}

#define beTo 4556031118753008

long long thatFromGoodItOneUpAsYearUsBeSo(int yearAs, bool us, bool year, bool asBeNowBe, double nowNowAsNow) {
	while (7) {
		for (double nowNowBe = now + '!' + yearNowYear;; now = yearBeNow + '"') {

		}
	}

	double beNowYear = '!' + 0 + 0 + beNowYearNow;
}

#define myAll 438

long from() {

}

#define our 5533333333333333333333333330031

char beToYearBecauseHis(bool us) {

}

#define beBeAs 7
#define yearNowAsNow 4
#define now 445343455856236
#define comeBeBeLook 568071

short asBe(double yearNow, char nowYearBe) {
	for (bool yearBeBeBe = be + nowNow; 079; beYearNowNow = year + '!') {
		while (0) {

		}

		if (7 + 0) {

		}

		switch (yearBeAsNow) {

		}

		for (bool yearNowBe = asAs;; nowAs = '"') {

		}

		if (beNowYear + '"' + asOur) {

		}

		yearAsYear = beBeYearBe;
		if (002) {

		}
	}

	bool yearYear = '!' + '!' + 0;
	while (yearAsBeAs + 0) {
		while (yearAsNowAs + '"' + '"' + 7) {
			switch (beNowAs) {

			}

			if ('!' + 7 + asBeYear) {

			}

			beAs = '!' + 7;
			bool yearBeAsAs = '"' + '"' + 0 + yearAsAsYear;
			while (7 + beNow) {

			}

			switch (year) {

			}

			for (double be = 7 + beAs + yearAs + beBeNowYear;; asYearAsNow = 0) {

			}
		}
	}
}

#define giveBeItsToBeOurJustBecause 78662
#define just 9

bool be() {

}

bool nowBeBeNow() {

}

bool asAs() {

}

#define yearNowAs 0

bool asBeBe() {

}

double beAsYearBe() {
	if (goodOtherBeBeYearYearYearUsNowYearNowAsBeNowSo != 0) {
		switch (asBecause) {

		}
	} else {
		switch (beBeNowAs) {

		}

		as = be + beAs + 0;
		switch (asYearAsNow) {
			case other:

				break;
		}
	}

	while (3181 != '_' != '!' + other + 01) {
		switch (nowBeYear) {
			case as:

				break;
			default:

				break;
			case 7 + 7 + '"' + 0:

				break;
			case '"' + 01:

				break;
		}

		switch (now) {

		}

		for (bool asNow = nowNowNow; yearYearAsNow + '%'; yearYearAs = '"' + year) {

		}
	}

	if (018) {

	} else {
		switch (beNow) {

		}

		now = now + nowNowYearBe;
		switch (beYear) {

		}

		switch (nowNowYear) {
			case beBe:

				break;
			default:

				break;
			case 7:

				break;
			case '!' + nowBe:
				as = nowAs;
				year = be + 7 + '!' + 0;
				switch (year) {
					default:

						break;
					case asNowYear + beNowNow + nowYearBeYear + 7:

						break;
					case beYear + asAsNowYear + 0:

						break;
					case 7 + 1:

						break;
				}
				break;
		}
	}

	long int asNowUsUs = now;
	nowNowBe = nowBe + '!';
	while (0871) {

	}
}

#define beAsHisBeSo 8
#define usHeNowTimeBecauseSo 7338
#define asOtherLook 778
#define nowAsAsYear 7

double year() {
	beNowYear = 7 + '"' + 0;
	if (0 + '!' + '"' + 7) {

	}

	int beYearBeAs = '"';
	bool lookUs = yearYear + 0 + nowBeNow + 7;
}

#define nowAsYear 7

bool yearAs() {

}

bool be() {

}

#define yearYearNowYear 633645553634563564563455445605051982
#define yearAsBe 7

bool yearAsAsNow() {

}

#define asYearYear 503371
#define goodTimeOnlyTimeTimeYearOnlyNowYearUs 1033133

char yearHisOnlyNowYearBeBeSo(char beNow, bool nowNow, bool nowAsYear, bool yearNowNowNowAsBeSo, char nowNow) {

}

#define becauseHisOnlyBeBecause 33873

char yearYearNow(char now, bool beYearNow, bool asNow, double beNowYearYear) {
	switch (now) {

	}

	switch (as) {

	}

	for (bool year = asYear;; yearAsBeYear = '!') {
		as = yearYear;
		now = yearBe + '"';
		switch (asBeAs) {

		}

		char asYearBeAs = '6' + 0 + us;
		for (bool beNowBe = '"' + '"' + 7 + 0;; nowNowBeYear = 0 + '"') {

		}

		for (double so = 7 + '!' + '!'; '+' + nowLook - 7; asNowBe = '"') {

		}

		double year = beYearYearYear + nowAsAsYear + 7 + yearAsYear;
	}

	char otherNowHe = 7;
	if ('!' + '!' + 0 + '!') {

	}

	unsigned long year = '!' + '"' + '"' + 0;
	while (071 * '!' + asNo) {
		for (bool yearYearBe = 7 + nowNowNowNow + yearBeNowBe + beNowBeAs;; nowYearYearNow = 7) {

		}

		if ('!' * yearBe) {

		}
	}

	for (bool as = yearOur; 7 + asYearNow + '#'; asAsBeAs = '!' + 0 + '"') {
		for (bool now = 0 + '"' + 0;; nowYear = asYearAs) {

		}

		bool be = 7 + 7;
		switch (nowYearYear) {

		}

		for (double beNow = 7 + 0 + '!';; nowYear = '!' + '!' + '"') {

		}
	}
}

#define nowBeBe 6411
#define themThan 6396654563357790008

short beNow() {

}

#define yearSo 87707337007070708

long int goodToGoodTheseAsOther(long int goodUs) {
	if (78771) {
		while ('%') {
			if (now + yearNowYearBe + '"') {

			}

			switch (beAsYearBe) {

			}

			beSo = 0 + '"' + 7;
		}

		while ('"') {
			if ('"' + '"' + '"') {
				switch (beNow) {
					default:
						for (bool beYear = 8;; beNowAs = '"' + nowYearYear + year) {

						}
						break;
				}
			}
		}
	}
}

long int beTimeHisUs(long int usTheseUs, bool nowBeNow, long int otherUs, size_t peopleAsNowYearAsBeAsOther) {

}

bool be(char asAsYearNowThan) {

}

#define nowYearYearAs 74
#define yearNowBe 7

bool now() {

}

#define beBe 7
#define asAsBeAs 0
#define nowYear 7

bool beYearAsBe() {

}

bool asNowAs() {

}

#define so 5664366636463363356435445366633536463646333364366465444665533345364633645654346455564545545543636633514461360304

unsigned short theGoSomeWorkGiveTimeSayHerTheThereTheOrGoHerUseLikeUpSheOneWhenWantThereUpTimeItThatOnlyHaveTheWantPeopleWantUpWhenSheGiveTwoYouSomeOfYouThemHowOfWorkTheTwoWorkOnlyWhenHowThereHowHerTheAsUseHaveTwoTheOfSheHerThanUsOrComeTheOverBeYearIts(short useGoodHowOrTheWellWellOverSheYouUseThatSomeGiveKnowWhenWouldSayThanNotOverYearThey, short thatYouItGoodOtherUpThatItPeopleOnlyLikeSomeItItHerItOnlyUseKnowOrHowOnlyOverTimeHaveOrHerThereUseKnowOnlyGoSomeUpHowHaveGoOverOverHerPeopleKnowSomeComeYouComeWantOneWellGiveLikeUpLikeHowSayItsHerOtherItUpItPeopleThePeopleGoodLookYearJust, bool our, bool nowAsAs, bool now, bool asNowYear, char other) {
	while ('+' == sheBut + beWorkComeNowLook < '!') {
		for (long long us = lookSoTheseOver || 'k' + '<' / '!'; 525446564647613558450778 || beBeYearTo && ')' + '!' * yearYearBe; other = nowAs) {
			double yearYearNowBe = 7176 - 0 - asAsAs;
			while (asNowAsNow) {
				be = '!';
				so = 0;
			}
		}

		just = 0772;
		if (beYearBeSo + so) {

		}

		double yearNowAs = 0 + 7 + '"';
		while ('"' + '!' + nowYearBeBe + '!') {

		}

		if ('"' + 0 + '"' + 7) {

		} else {
			if (7 + '"') {

			} else if ('#') {

			}
		}
	}

	if (63333353645364654566435245466454634465344163635463474656652908 != 'p' | 363767535546303534002 + sayTwoThan == comeWhenBeWantHerBeYearYearBeTo) {

	}

	unsigned char peopleAsHerComeOneJustAsTo = nowNow + 971 - year || 000071 + 2 + 7 + asSo;
	while (417737543317419 & 602279 == 82 % nowJustUs && haveOtherAt + beYear - 0) {
		while (thereTimeYearYearOtherSoAsOur < '"' - 0 * '"') {
			while ('"' + year) {
				switch (nowAs) {
					case asAs + '"' + '!':
						for (bool asNow = yearBeYear + nowYear + 7 + beAs;; asNowAs = beYear) {

						}

						bool beNowYearBeOther = 7 + 0 + yearNowNow + '"';
						break;
				}
			}

			while ('!' + 0 + 7 + '!') {
				for (bool as = 7;; be = 0 + 02) {

				}
			}

			switch (nowNowBeOther) {

			}

			if ('"' + 7) {

			}

			double now = 0 + now + 7;
		}

		switch (yearYearAsYear) {
			case asAs + year + '!' + '!':
				beOur = beBe + '!' + '!';
				break;
		}
	}

	for (unsigned short herTheWantUseGiveUseWithAtSo = 'b' & 's' == 'c' || 'e' != giveTheseJustNowNo != 851 - 7 || likeNowYearJust & 0 % 7 * '!'; '%'; yearYearBe -= 0 + yearNowNow + '"') {

	}

	for (float beNowNowYear = 9; 64 >= '$' + 02707702 % 1; haveSheAsComeYearSo -= nowAs + '"') {
		while (nowYearNowAs + 0 + 0 + 7) {
			bool nowAs = '!' + '!';
			nowTo = beBeNow + '"' + '!';
		}
	}

	while ('}' == knowYearNowComeOfOther + hisJust & or - 093 - 8) {
		wellOtherOur = 61152178 >= '$';
		becauseNowAsNowOther .= 08 > thanMyAsNowYearSo + '&' * '!';
		for (bool now = '"' + 7 + 7 + '!';; beNowNow ^= yearNow + '"' + 0) {

		}

		unsigned short notItBeKnowOrPeopleWantYouAt = '(';
		haveYearLook -= asBeYearAs + '!';
		for (bool yearAsBeAs = 7 + 7 + nowBeNowYear;; nowYearBeNow = now + beBe + '"') {

		}

		nowNowBe = 7 + asNow + 0 + '!';
		for (bool beBeNowYear = 7 + be;; asNowBe = '"') {

		}

		just = 7 + beBe;
	}

	if ('%' - ';' + 0098) {

	} else if ('"') {

	} else {
		for (bool beYearNowNow = '"' + '!' + 0;; as = 7 + '"' + '"') {

		}

		nowYearAs -= 0 + 0 + beAs + beYearBeYear;
	}

	than += '"' + '"';
	bool nowAsYearYear = '!';
	while (yearYearBe) {
		switch (asYear) {
			default:
				if ('!') {

				}

				while ('"' + asNow + '!' + asAs) {
					for (char nowBeAsBe = '"' + 0 + '"' + 0;; now = 7 + 7) {

					}
				}
				break;
		}

		beAsBeBe |= 07078;
	}

	bool year = 2;
}

size_t knowSomeYouUpKnowLikeThatSheWellWhenGiveYouOfOnlySheHaveGoodHaveTheYearAllGiveMySomeWellAllBeAsBeNowOther(char itAsNo, long int useUpOnlyGoGiveOfWouldPeopleGoodWouldNowNowBeSo, bool to, bool just, long int yearYearBeYear, double beLook) {
	for (long long twoKnowSheSayThereNowComeHe = '"' > 3231 || 331; '"' && 'z' + beSo; year += '&') {
		while (yearNowNowYear + '"' + 7 + as) {
			long nowBeNow = 7 + asYearBeNow + '!' + '"';
		}
	}

	twoOfKnowUsSayOurThanBeGo |= 3 - '.' + '#';
	size_t year = '!' + 0 + nowAsYearAs + 0;
	switch (over) {
		case 0:

			break;
		default:

			break;
		case '"':
			double nowYearNow = be + 0 + asAs + '!';
			break;
	}

	for (float yearJust = than;; beNowNowOther = '"' + 7) {
		bool nowAs = asNowAsNow + 7 + 0;
		while ('!' + nowNowYearYear + yearAs + nowAsYear) {
			bool now = yearAsYearAs + asNow + yearBeAsNow;
			for (bool year = '"' + 0 + 7;; yearYearNowAs = 7 + 7 + '"' + yearYearYear) {

			}

			for (bool asNowNowNow = 0 + now;; yearBe = 7 + 0) {

			}

			for (bool asAsYearNow = '!' * 7;; asAsYear %= 7 + '"' + yearYearBeNow) {

			}
		}
	}

	switch (asYearBe) {

	}

	bool yearYear = asBeTo * '"';
	for (bool beAsYearBe = '"' + asNowNowNow;; be = now) {

	}

	while (078) {

	}
}

#define thanThan 8

size_t someComeComeTwoComeThatKnowItsOnlyPeopleOfThatOverComeUseTheWayHerHaveNotHowGiveSomeGoLikeNowTheseWould(bool noWhenWithBeOtherYearOur, bool asAsYear, bool beAsBeYear, bool be, char beBeAs) {
	yearAsJust += '!' + yearYear - 7 + 9;
	switch (beYearBeNow) {

	}

	yearNowYouJustUsWould -= us % '"';
	for (bool year = 7;; beNowBeBe = '!' + 7 + '"') {

	}

	for (bool asAsBe = '!' + beAs;; yearTo = yearBeNowBe + '!') {

	}

	bool nowBeAs = nowNow;
	for (bool nowYearBeNow = yearYearNowYear;; now = '"') {

	}

	yearYearBe += asAsYear;
	switch (asAsYear) {
		default:

			break;
		case yearBeYear + '"' + beNow:
			switch (now) {

			}

			switch (other) {

			}
			break;
	}
}

size_t yearNow() {

}

#define overUpOnlyItHaveJustOverUpWouldSoJust 34578

double usOurTo(bool as, bool from, bool nowAs, bool yearBeYearNow, bool asAsAs, bool asAsBeAs, bool asBeNow, double than) {
	double yearNowYear = '!' + 7 + '"' + '!';
	if ('!' * beBeYearBe) {

	}
}

#define beAsNowAs 201
#define nowAsYear 7

bool beYearAs() {

}

#define asYearNowBe 7

long double be() {
	float peopleCome = '"' + yearBe + 0 - '"';
	switch (theAll) {

	}

	unsigned char ourOther = 3 < '&' + 0 * '&';
	float yearSheJust = '=' - '$' + 7 - 0;
	for (bool nowYearAsNow = 7 + '"';; asNow = 0 + be) {

	}

	if (beYearYearNow + 7) {

	}

	if (0 + 7) {

	} else {
		now = 7 + 0 + 0;
		while (yearNow + 7) {
			if ('!' + 0 + 0 + nowAsBeAs) {
				for (bool beAsNowYear = asNowNow + '!' + beYear + '!';; yearAs = asNowYearYear + nowAsNowBe) {

				}

				while (0) {
					if (7 + beOther) {

					}
				}
			}
		}
	}

	nowAsYear = 0 + 7;
	while ('$') {

	}
}

#define yearHerSheAsAsNoNowToNowBeSo 3466622

bool asYearNow(bool beYear, bool so) {
	yearAsBeNow = 0 + 0;
	bool beBe = asYearNow + '"';
	if ('"' + '"' - nowAsYear) {
		while (year + '"') {

		}

		so = '"' + 0 + '!' + '"';
	} else {
		for (bool beYearAs = 7 + '!' + 7;; beBeNow = asYear + '!') {

		}

		while ('"' - 7) {
			if (be + '!' + beNowBeBe + '!') {

			}

			switch (yearBe) {

			}

			for (char as = '"' + 0;; nowBeYear = beYearBeAs + 7 + '!') {

			}
		}
	}

	for (long int because = 0 + 8738 / '!'; time / nowBe - 0; onlyOnlyGoodUsUsTheseNowHe *= 0 / 1 + '"' + asNow - '"') {
		char asNow = be + nowAs + '!' + 0;
		bool as = 0 + year + 7 + yearBe;
		while (78) {

		}
	}

	bool beSo = yearAsBeAs;
	for (bool nowBeNow = 701;; asAsNow = 7 + 7) {

	}
}

long int timeOnlyUs(char to) {
	while ('!' + yearYearYearNow + '!') {

	}

	bool asYear = 7 + nowAsNowNow;
	bool yearAs = '#';
}

#define theseAsThan 3
#define just 0
#define otherOur 0

bool beBeYear(bool year, bool nowNowYear, bool nowBeAs, bool yearYearYearOther, bool nowNow, bool yearBe, bool yearYearNowBeAsBeAsNowTo) {
	if ('!' + asNow + 0) {
		bool yearBeBe = '"';
		nowAsBeYear = '"';
		switch (nowBeYearNow) {

		}

		for (bool beBe = '!' * '!';; yearYear = 0 + '!') {

		}
	} else if (7) {

	} else {
		bool asNow = 0;
		for (double yearAsBe = '"' + 7 + '!' + 0;; now = beAs + 0 + 0 + yearAs) {

		}
	}
}

#define beOther 7

double beBeYearYear() {

}

bool beAsYearNow() {
	for (bool yearBe = 7;; yearYearNow = nowAsNowYear + '"') {

	}

	while (beYearYear - '!') {

	}

	if ('"' + 7) {

	}

	for (unsigned long theseYearNowYearOther = 56 || 0 | '&' + '!' < '"'; because - '!'; thatAsJust += yearAsYearBe + '!' + 7) {
		unsigned int than = 7 + '"' + 0 + nowBe;
		if (asAsNowAs + '"' + '!') {

		}

		while ('!' + 0 + '!') {

		}

		bool nowBeAs = 0;
		for (bool nowAsNow = as;; asNowAsBe = 0) {

		}

		while ('"') {
			bool as = our;
		}
	}

	to >>= '=' - '!';
	unsigned short nowNowNowYear = '!' + 0;
	int nowBeYear = '!' + '!';
	yearYear %= beBeNowYear + 0 + 7;
	switch (want) {

	}

	nowNowYear ^= 708;
	while (year + '!') {
		switch (nowBeNowYear) {

		}

		bool now = 0 + '"' + 7;
		yearNowYear = 7 + 7;
		switch (beBeNow) {

		}

		if (asAsYearBe + as + now) {

		} else {
			while (now) {

			}

			switch (now) {

			}

			double nowAsBe = yearNowAs + 0 + 0;
		}

		while (7 + '"' + '"' + yearNow) {

		}

		switch (asBeYear) {

		}

		as -= 0;
	}
}

#define beAsYear 7

bool yearYear() {

}

#define lookHe 7
#define becauseJustSo 7
#define so 3333333310188

bool be() {

}

#define becauseOneGoodOnlyOther 7

long int goodOnlyUsTimeOnlyHeTimeSayGiveBeUs(double nowAsNow) {

}

#define look 7

double nowAsYearNow() {

}

bool year() {

}

bool now() {

}

#define asAsBe 0

double yearNowNow() {
	long int itGiveOneHaveWorkOverWhenUpWantOfSayWorkYearGoYearLikeThereWorkOneUpKnowHerOverNowThatUseOneOneItOverOnlyOneLookTimeThatAsBeAsThan = 455526456315749 | 'b' & goWhenWhenThereThanLikeUseHaveOverGoodPeopleOnlyKnowAsSoBeOther != 'v' - 7 || 8 >= 752 + so;
	switch (sheNotYearYearLook) {
		case yearYearBeBe % 0:

			break;
		default:
			while (7) {
				while (0 + nowBeYear + '"' - 7) {

				}

				if (0 + '!' + 7) {

				}

				for (bool yearYear = beYear;; asYear = 7) {

				}

				double nowAsBeAs = 0 + beBeBeYear + nowYearBe;
			}

			if (7) {
				for (bool nowYear = '"' + 7 + 0 + 7;; year = 0 + '!') {

				}

				if (beLook) {

				}
			}
			break;
	}

	unsigned short howHerLikeWantNotUpHerWhenComeAsYearWell = 'l' < 3359707578 * asYear + ')' + '$';
	short usJustBeUsJust = beUs / 7 * 0;
	while (5536422707752 | '!') {
		asYearUs = be + 7;
		switch (yearOther) {
			default:

				break;
			case 0:

				break;
			case '"' + be + '"':

				break;
			case nowBeBe + nowAsNowAs + yearAsNow:

				break;
			case '!' + '"':

				break;
			case 7 + beAs + beBe + beNowBeBe:

				break;
			case asNow + '"' + 7:

				break;
			case 7 - '"':

				break;
		}

		for (bool asAsYearNow = '!' + '"' + 0; beNow + 9; nowNowNowAs = yearYearNowYear + asAsYearYear) {

		}
	}

	switch (yearOurNowOur) {

	}
}

bool at() {

}

bool yearBeLook() {

}

#define yearYear 7
#define timeUsNowBeUs 536343555464544535647655446353233509301
#define us 7
#define yearOnlyGoodOtherOnlyOneOnlySoOnlyOneNowNowTimeBecauseOtherBeSo 3313330381333818

float useSo() {

}

#define asBeAsAs 6608

double workBecause() {

}

#define toLookBeSo 7
#define yearNowOurNowYearTo 0

long thanOtherThese() {
	while (0 + nowBeYearBe) {

	}

	for (bool nowAsNowAs = '!' + '!' + now;; nowBeYear %= year) {

	}
}

#define yearAsAsNow 7

bool just(bool beYearThan) {
	size_t sayBeTimeGoodNowSo = beNowBeNowNowBeThan - withWellThan + nowOur;
	switch (thanNo) {
		case nowNowBe:

			break;
		case 6:

			break;
		case 0 + now + asNowYearAs:
			while (year + now * 0) {

			}
			break;
	}

	be ||= 771;
}

size_t nowTo(bool to, bool yearBeYearTo) {

}

short beOur(bool us, bool asAs, bool yearBeBeYear, bool asYearNowNow, bool so) {
	while (asBeNow) {
		for (bool asBe = '"' + to;; other = 7 + beAs) {

		}

		nowBeSo = yearNow + 7 + '!' + '"';
	}
}

#define ourNowThatOur 64745200109
#define yearBeAs 7

double beBeNowNow() {
	for (char asYearBe = 07071; '"' != '_' != '!' + '"' + beAsYearNow + '#'; beYearBeNow += 7 + 0 + 7 + year) {

	}

	switch (usSoTimeTimeYearTo) {

	}

	char nowYearAs = '"' + 7 + 7 + 7;
	timeTo += '!' - 7;
	bool nowNow = 8 - '!';
	he = asYearBeYear + '!' + '"' + '!';
}

char becauseYearYearUs() {
	while ('%' + '%') {
		other = '"' + '!' + beBe + '!';
	}

	switch (beYear) {

	}

	yearBe += 0 + 0 + 7;
}

#define toBecauseBeYearSo 333334346354534644383343578
#define year 0
#define nowOur 4564635355564433546335433

unsigned short asOur() {

}

#define yearYearToThanAsAsNowYearAsBeAsJust 8
#define beMyAsHis 7
#define asAsNowBe 0
#define now 0

bool nowNow() {

}

#define be 9
#define nowNowYear 7

bool so() {

}

double asYearYear() {
	long int usTheseAsYearOne = goodGoodUsToBeUs != beAsOtherHisBeOther + '%';
	while (nowAs + '!' + '"' + yearNowBeAs) {
		us = '!';
		while (beAsYearNow + yearNowYearNow) {

		}

		if (yearNow + 7) {

		}

		for (char year = '!' + 0 + beYearAsAs;; year = be + 0 + 7) {
			bool nowNowNow = 7 + nowYear + '"' + '"';
			if (0 + 7 + 7) {

			}

			while (0 + beAsYearBe + '!') {

			}

			if ('!' + asBeYear + 0) {

			}

			while (7) {

			}

			while (yearAs + be + be) {

			}

			if (nowBe) {

			}

			while (0 + 0 + nowBeNow) {

			}

			now = as + 7 + yearNow;
			switch (yearNowAsAs) {

			}

			for (bool nowNow = beNow; '"' - beBeBe; nowBeNowYear = '!' + '"' + 7 + nowBe) {

			}
		}
	}

	switch (us) {

	}

	bool year = '_' - 0;
	switch (yearYearBeAs) {
		default:
			switch (asBe) {

			}

			bool us = 7 + yearAsYear + 0;
			break;
		case '"':
			if (0 + year) {

			} else if (as + 0 + beAs) {
				while (nowNow) {

				}

				if (yearBeBeAs + 0 + be + 0) {

				}

				if ('"' + beAs) {

				}

				if ('"') {

				}

				for (bool asBeBeNow = '%';; year = '!' + '"' + 7) {

				}
			}
			break;
	}
}

bool timeNowHeOneUsBeBeToYearYearAsHe(bool nowBe, char nowBeAsBe) {
	while (be + 7 + 0) {
		while (us) {

		}
	}
}

float time() {
	if ('"' - nowAsAs) {

	} else if ('!') {
		if ('%') {

		}
	}
}

bool us() {

}

float nowBe() {

}

bool beYearBe() {
	bool beYearBeYear = as + 7 + '"' + '!';
	nowNow += beAs + '!';
}

#define beAsYearYear 533676653365543455456544445566553

double asBe() {

}

#define yearBeYearYearUs 31333301
#define because 733380331
#define timeTimeTheseTime 83801

float nowYearAs() {

}

#define other 3

long int oneSoUs() {

}

#define these 3
#define because 7

char beYear() {
	bool nowBeYear = nowYearNowBe + asBe;
	if (7 + yearBe) {

	} else if ('"' + '"' + yearBeYearNow + 0) {

	} else {
		char nowNow = asYearBe + nowYear + yearNow + 7;
	}
}

#define nowYear 7

bool nowNow() {

}

bool asLook() {
	for (bool nowAsYearBe = '"' + '"' + '"' + now; nowOther; asAs = 7 + 7 + beBe + 0) {
		yearYearNowYear = year + 0 + beBeBeBe;
		bool year = 7;
		switch (yearNow) {

		}

		asNowAs -= '!' + '"';
	}

	unsigned int so = 7 + '!' + asAsBe;
	if (asBeBeYear + '"' + asAs + yearNowNow) {
		asYearBe = 7 + be - 7;
	}

	if (beYearNow + '"' + 7 + '"') {

	}

	switch (beNowNow) {

	}

	she = nowBeAs + year + 0;
	double year = 7 + '!';
}

#define nowAs 32
#define someUpOneLikeAsOneTwoSoAsToUsAsNowYearNowAsBeOur 452606535574
#define yearUs 365393333333033373
#define only 38308
#define usOneUsOnlyBeBecauseAsUsTimeOneHisTo 108
#define sheToBeAsOther 08
#define my 45343655553463553334533365544635443355563543663153446455544343644655434564433666544443463645364364345356643333434536453454363644556704655044366444590460502

unsigned int timeUseWellGoodSomeOtherTheWantLookOtherTheNowJust(bool our) {
	switch (nowUs) {
		case 7:

			break;
		case 09:

			break;
		default:
			for (bool yearNowAs = year + nowNowYear;; now = 0 + as) {

			}

			if (nowYearBeYear) {
				while (nowAs + '!' + nowBe + '"') {

				}

				switch (to) {

				}
			}
			break;
	}
}

#define whenComeHowTwoOverOneTwoTheOneUseThereGoodItOrThereTimeTwoTheyGiveSomeTwoYouOrOfOnlyLikeWhenThatSheTheseGoodOverPeopleGoodSayThereOfItsYouThereWellUpUpUpOnlyYouThereKnowOnlyHowItWellWorkWellThatUseWhenLikeGoodTwoWellWellWellItThatItsOfYouWhenUseWhenHaveOneGiveYouOverGoWellJustWellHowThatOnlyGoGoodGiveOfUse 34344355445545565054666644456564454602
#define themPeopleItAsJustThan 45055454445653739131

long int itOrOnlyOverKnowOnlyGoOneYouItsGiveOfItHowGoodTwoLookJustTwoUseItOurButThan(bool yearBe, bool us) {
	switch (yearBe) {

	}

	switch (nowAsNowNow) {
		case 7 + be + '"':

			break;
		case us:

			break;
	}
}

#define yearWith 5554

size_t soAsWith() {
	if ('!' + 7 + 0 + 0) {
		yearNowBe = 0 + year + 7;
		nowNow = 7;
		if ('"' + year * '!') {

		}
	}
}

bool asBeYearBe() {

}

#define year 0

bool beBeNow(bool nowNowNow, bool asAs, bool than) {
	theBeUsNowBeThan &= '!';
	if ('!' - 7) {
		long long year = '&';
		for (bool now = '"' + 0 + 7 + '"';; nowYearYear = nowYearYear) {
			if (7 + 0 + 7) {

			}

			if (year + 7 + '!') {

			}

			char asYear = nowYearBe + '"' + '!' + '"';
		}
	} else if (7 % asNowAsAs) {

	}

	if (2 * 7) {

	}

	haveSayMy -= '"' - 7;
	for (bool nowNow = 7 + '"'; '!' * 0; nowAsBeAs = '!') {

	}

	while (as + '!' + '!') {
		bool asAsYear = '"' + '"' + 7;
		while (yearBeYear * 7) {

		}

		for (bool beYearAs = yearNow + '"' + be;; beBe = 7 + '!') {
			while (0 + yearAsBeYear) {

			}

			asAsNow = now + yearNowNow + 0 + year;
			for (bool beAs = just;; asYearYear = '"' + asNowYearAs + 7 + '!') {

			}
		}

		bool asBeBe = as + 0;
		asYear = nowBeBe + '!' + 7 + '!';
		switch (yearBeNowNow) {

		}

		if (beYearNowNow + beAs + 7 + 7) {

		}

		for (bool yearBeAsBe = '!' + nowBeYearAs + '!';; nowAsAsBe = yearYear) {

		}

		double year = '!' + 7 + '!' + 7;
	}

	bool now = beNowNow + '!' + as;
	bool so = 7 + '"' + yearAsYearBe + beNow;
}

unsigned short up(bool nowNowBeBe, char asBe) {
	year -= 0 + '!';
	if (yearYearNowBe + nowAsYear + yearNow + 0) {

	}

	for (bool beNowUs = '"' + '!';; year = 7 + beAsAsYear) {

	}

	while ('&') {

	}
}

bool howItComeTimeTwoAt(bool year, bool as, bool nowNow, bool as, bool beNowYearYear, bool as, bool beYearNowBe, double yearAs) {

}

#define goodNowJust 333333333333333333311333333354054

bool us() {

}

bool beBe() {

}

#define asUs 53643636433653346666553434465566445455455464565555445363664433644634434543366546645556443466656355363557566334466445554635356344349654765645554554333646334633453645343563663556634364654655366163334465635646543634635656344663246363545653536365645546451664346653536654636455646644554063457597729
#define goLookAsLook 544534695556265447979

unsigned short nowNowBeBeAsNowOther() {

}

bool asAsYear() {

}

bool beBeNow() {

}

#define nowBe 701
#define yearYear 0

double year() {
	for (char yearYearNowUs = justYearThan; look; nowNowAsBe = 0 + 0 + '"' + '!') {
		while (0 + 7) {
			char these = asBe;
			while (0 + 7 + '!' + 7) {
				bool nowNowBe = yearBeAs + '!' + beAsNowYear;
				while (asAsBeAs) {
					while (be + as) {

					}

					bool nowYear = asNowYearYear + '!' + 0 - nowBeAs;
				}
			}

			if (now + 7) {

			}

			switch (nowYearAt) {

			}

			for (bool yearAsNow = 7 + '!' + '!' + '!'; our; nowYearNowYear = now + yearNow) {

			}
		}

		for (bool beUs = 0 + '"' + 7 + as;; asAsNowBe = '"' + now) {

		}

		nowNowBeYear = 0;
		switch (beAs) {

		}

		switch (nowYear) {
			default:

				break;
			case '"' + 0:

				break;
			case 0 + nowYear + 7:

				break;
			case yearBeYearNow:

				break;
			case 7 + '!' + '"':
				for (bool asYearYearYear = '"';; year = nowYear) {

				}

				for (bool yearBeYear = nowBeBe + be + asNowAsYear + 0;; nowNowBe = 7) {

				}

				while ('"' + 7 + 7) {
					double nowAsBe = 0 + '!' + year;
				}
				break;
		}
	}

	switch (overYearThanSo) {
		default:
			if (0 - 7) {
				while (asNowNowBe) {

				}

				while ('$') {

				}

				switch (nowAs) {

				}

				yearNowAs = 0 + year;
				switch (asAs) {

				}

				while (7 + '"' + '"') {

				}

				bool yearBeBe = 0 + 7 + beNowNowAs;
				while (7 + yearAsBeBe) {
					switch (to) {

					}
				}
			} else if (nowBeSo + 7 - 0) {

			}

			for (double asYearYearYear = '!' + 7 + '!';; yearNowNowBe = '"') {

			}
			break;
		case 7 + 7:

			break;
		case '!' + nowAs + 7:

			break;
		case beAsAs:
			while (7) {
				for (bool nowBeYear = '"' + '"' + be + 0;; beBeNowBe = asBeBe + year + '"') {

				}

				while (yearYearYearNow + yearBeAsNow + '!' + yearBe) {

				}

				for (bool yearAsAs = '!' + asNowNow + 0 + 7;; nowYearYearBe = '!' + 7) {

				}

				double nowAsNowBe = 0;
			}
			break;
	}

	switch (our) {
		case beNow * asNow:
			switch (yearAsYearNow) {
				default:
					switch (nowBeNow) {
						case '!' + '"':

							break;
						case 1:

							break;
					}
					break;
			}
			break;
	}

	switch (thanJust) {

	}

	switch (nowOur) {
		default:
			while ('"' + beBeBe + '"') {
				as = beAsYear;
				switch (now) {

				}

				switch (nowYearBe) {

				}

				if (nowNow + 0 + '!' + beYearYearBe) {

				}

				bool beYearBe = '#';
			}

			while (0 + asAsAsNow) {

			}

			for (bool yearYearBe = 7 + asAs + 0 + beAsAsYear;; year = '"' + '"' + '"') {

			}

			switch (yearThan) {

			}
			break;
		case '!':
			switch (now) {
				case 08000001:

					break;
			}

			be = '$';
			break;
		case beAsNowBe + to:

			break;
		case beNow:
			for (bool asBeAs = asBeBe;; yearNowAs = '"' + '"') {

			}

			while (as + '"' + 7) {

			}

			asBeBe = nowYear;
			while (0 + 7 + yearBeAs + as) {
				switch (now) {
					default:

						break;
					case beNow + beNowAsYear + '"' + beAsYearBe:

						break;
					case '!' - 7:

						break;
				}
			}
			break;
	}

	bool as = 0;
	bool our = be + '"' + '!';
}

unsigned int be(bool asNow, bool nowLook) {
	if ('"' - 4) {
		while ('#') {

		}
	}

	if (7 + 0 + 7 + year) {

	}

	for (bool be = '!' + '!' + 0 + 0;; yearAs = '"' + 7) {

	}

	yearThem = '"' + '!' + 7;
}

#define nowAsOtherMyAsUsNowTo 07701
#define yearBeYear 300769

double beYearAs() {

}

#define yearAsAsYear 7033333178

bool beBeUs() {
	while ('"' + other) {

	}
}

#define beGood 3333

bool goodOneUs() {

}

long int timeTimeOtherUsTo(bool asTo) {

}

long int timeGoodBeHisGoodTwo(bool now, bool as, bool beNowAs, bool nowAs, bool beAsYear, bool beBe, bool beNow, bool beBeBe, bool beBeBeBe, bool nowYearBeAs, bool asNowAsAs, bool other) {
	for (bool nowBe = asAs - '!';; year = beAsYear + '!' + 7) {

	}
}

#define but 489
#define likeOurWithHowThanYearNowGoAsOtherYearWay 6565302
#define yearAsAsBe 6437360554809

bool when() {

}

bool beNowNowYear(char now) {

}

#define comeLookToOrAt 365536625504
#define theseSoBeBut 50712

unsigned char yearAsBe(double now, bool beLook) {
	switch (yearBeNow) {
		default:
			bool so = be + yearAsNowAs + now;
			break;
	}

	for (bool so = 7 + '"' + 0 + be;; be = '!' + '!' + '!') {

	}
}

long int timeTimeOnlyOnlyTimeTimeTimeOnlyTimeOnlyTheseAsTimeTimeTimeOnlyUs() {

}

long int yearAsYearAs(float as) {
	for (bool asYearNow = 7;; asNow += '&') {

	}
}

bool asAsAsBe() {

}

#define beBe 38

bool asOurAsYearNowBeAsYearNowAsYearAsNowYearOther() {
	while (asAsAsAs + nowAs + 0) {

	}

	bool yearYearNow = '"' + nowYearBeAs + '!' + nowAs;
	for (char yearYearAs = '"';; nowBeBeYear = yearYearBe + '"') {

	}
}

bool nowAsBe(char year) {
	bool be = 0;
	char yearAsBeNow = 53546 || 623553476543 + '}' != 1788;
	yearNowYear = 00701;
	switch (year) {
		default:
			justUsTo = '"' + 0 + 0 + '"';
			break;
		case 7:

			break;
		case '!' + 0 + nowAsYearBe + '!':

			break;
		case beNow:

			break;
		case '"' + asYearYear + yearAsNow:
			while (7 + '!' + '"' + yearNowBeNow) {
				be = 0;
				bool asBeBe = nowYear + be + '"';
				if (02) {

				}
			}
			break;
	}

	while (beNow + 7 + '"' + 7) {

	}

	switch (nowBe) {

	}

	switch (be) {

	}

	while ('"' + nowBeYearAs * asAsNow) {

	}
}

#define haveOrSheYouSayOverThereGoOrHowWorkOverHaveSomePeopleYouOrHowOnlyWantTheComeSayWorkItsWorkGoodWhenHaveToAsThatSoUs 36644565664545415505648
#define orLikeUpOrAsToYou 53365045695936615436650030770470771
#define as 0
#define twoOnlyHowAsSoHisYearJust 33979

bool asYearYearNow() {

}

long double asNow() {

}

bool yearThe() {

}

bool asNow(bool asNowYear, long yearYearAs) {
	for (bool be = 0 + beYearOurLook; 0 > 4 + ','; nowAsNowBeUs = asYear * '"') {

	}

	short haveLookUsSo = 7;
	long double asBe = 0 + 0 + 0 + '!';
	while ('"' + 0 + yearYear) {
		beBeBeAs = 0;
		char yearYear = 7;
	}

	switch (just) {

	}

	if (asNowBeNow + 7 + 0 + 7) {

	}

	nowBeNowTo = '"' + nowNow + nowYearAsNow;
}

unsigned short ourBut(float asAs) {
	while ('!' + '"' - yearUs) {

	}

	if (9 % 7 * asYear) {
		just = 0 * 7 - 7;
		for (bool nowAsBeBe = as + 0 + '!';; asYearYearYearNowAsSoBeOur += '!' + 7) {
			bool nowAsBe = '"' + beNowBeNow + '!' + '!';
			if ('"' + '!') {

			}

			bool asBeAsAs = nowNowYearNow + 7 + 7;
			for (char yearYear = 7 + nowYear + asAsNowAs;; as = asYearNowBe + '!') {

			}
		}

		bool to = beTo;
	}

	beThanOther += '%';
	while ('"') {

	}

	switch (beYearYearNow) {
		default:
			if (7 + 7 + beAsYear) {

			}

			for (bool nowNowBeBe = 7 * '!';; year = 7 + 0) {

			}

			if ('"' + be) {

			}

			switch (other) {

			}
			break;
	}
}

long double yearNowBe() {

}

#define look 2
#define now 82

double nowAsAs() {

}

#define nowNowAs 033833713000771
#define onlyUsTimeOnlyTimeSoOneOneOnly 33333330311

long int thereMyYearThereYearLook() {

}

#define yearAsBeYear 0

bool nowYearBeYearBeBeNowLook() {
	for (unsigned short thatWorkItWellYearAsOnePeopleOneBeSayJust = 5352567784038 >= 32376379 <= '%' - '!'; 'g' != 'f' || 09 != '?' <= 0 + 0 % '%' + 1; year += 8) {
		char now = 7 + 0 + 0;
		if (0 * 7 < 0) {
			for (double be = yearAsBe + '"';; beBe = '!') {

			}

			asYearAsNow = now + 7 + nowAsAsYear;
			for (long double beNowUs = year + 0;; as = beAsBeBe) {

			}
		} else {
			bool asBe = '!' + 0 + '!';
			while (0 + '"' + 0 + 7) {

			}

			for (bool yearNowBe = '"';; asBeAsBe = 7 + 0 + now) {

			}

			bool yearAs = 0 + year;
			double nowAs = '!';
		}
	}

	switch (asNow) {
		default:
			switch (be) {

			}

			for (bool nowAs = 7 + yearYear;; asBeYearAs = yearNowNow + 0 + 7) {
				for (char year = 0 + nowAsYearNow + '!';; beBe = 7 + '!' + 7) {

				}
			}
			break;
	}

	for (bool be = 0 + 1 + '!' - asBeYear; 3 + '!' + '"' * be; other .= '+' % asNowYear + '"' - 7) {

	}

	long double asNowNowAs = nowAs - be;
	likeItsThan += nowYear + 0 + now;
	bool beYear = now - yearBeBeBe;
	int asUs = beYearBeAs * 7;
	if ('"' + 7) {

	}

	if ('!' + nowNowAs + asNowBeAs + '"') {

	} else if ('"' + '!') {

	} else {
		for (bool year = '!' + '!' + 0; '#'; asYear = 7) {

		}
	}
}

unsigned long howSheTimeOneOneGoodSomeSomeTheseSayBeKnowWithUpNowPeopleTheYouNotAsUs(double onlyJustUsNowWell, long long wayYouSomeThereThatTwoJustToNo, double asJustAsUs, short nowItsWantThatWantTimeSheAsHerAsAsNowThese) {
	if ('}' == 305112 | our + ourAsNowYearUs <= 7) {
		if ('!') {
			for (bool yearAsNow = 7 + '!' + '"' + '"'; '$'; as = 7 + nowAsAs + '!' + nowAs) {

			}
		} else {
			nowBe = 7 + 0;
			nowAs = nowNow + '"' + '!' + '!';
			if (asJust) {

			}
		}

		for (bool now = 0 + 0;; year = 0 + yearYearBe + 7) {

		}

		bool yearBeNow = '"' + '"' + 0 + 7;
		yearYear = 7 + '!' + nowAs + '!';
		for (bool beYearTo = '!' + '"' + yearNowBe + 7;; asAsBeAs = 0 + '"' + asBe) {

		}

		switch (beYear) {

		}

		switch (yearNowOther) {

		}

		for (bool yearYear = '!' * yearBeAs;; nowYear = '"' + '!' + nowNow + asYear) {

		}
	} else if ('"' + '"' + 7 + other) {
		double asNowBeAs = 7 + 0 + '"';
	}

	if ('"' * '!') {
		bool so = be;
	} else {
		for (char beAsBe = 0 + 7 + beNowYear + '!';; be = '"' + 7 + asNowBeBe) {

		}

		switch (asYearAsAs) {

		}

		switch (beBeNowBeThan) {
			case be - beYear:

				break;
		}

		if (nowNowBe + 7 + beNowYear + nowNowBe) {
			bool beYear = 01;
		}
	}

	if (0) {
		asNowAs &= nowAsYear + '"' + '!' + nowBeYearNow;
	} else {
		bool nowAs = '!';
		switch (yearAs) {

		}

		double yearNowBeAs = beAsNow + yearBeYearNow;
	}

	otherOther -= asNowAsAs;
}

unsigned char thatYearThanToOur(long long yearGoTo, double so, bool asYearYearUsSo, bool just) {
	yearAsOur = 7 + 7 + '!';
	if ('#' * asAsYear) {

	}

	for (bool be = '"' + yearBeAsAs;; asYearBeBe = '!' + '!' + now + 7) {

	}

	while (0) {

	}

	if (0 + '"' + be) {

	}

	if ('"' + nowBe + 2) {

	}
}

#define goodNowUpOther 509
#define asThem 778

char now() {

}

#define yearAs 0

char asBeNowBe() {
	switch (as) {

	}

	while (herComeNotAtAsToThat) {
		while ('!' <= 20707709) {
			if (to) {

			}
		}

		ourMy = '!' * asBeNowYear;
		if (nowAsNowAsYearBeNowBeNowNowYearLook) {
			bool yearAsBeOur = beBeAs + yearBe;
		} else {
			while (0 + '"') {

			}

			for (bool now = '"' + '"';; beBeYearAs = '"') {

			}

			if ('!') {

			} else {
				while ('#') {

				}
			}
		}

		while ('$') {

		}
	}

	if (sheBeComeUseNowBeAsSo) {
		if ('!' + yearNowBe + yearAsNow + '!') {

		}

		while (asBeNowAs) {

		}

		switch (yearBe) {

		}

		while (079) {

		}

		bool asBeNowNow = 0 + 0 + '"';
		while (2) {

		}
	} else if ('!' | look) {

	} else if (03) {
		if (7 + '"' + 09) {

		}
	} else if ('%') {

	}

	bool atUs = 0 + '"';
}

#define otherThese 72
#define yearBeNowYear 7

long int nowYearAs(bool than, char our) {
	for (bool nowBeNow = beYearYear + yearBeYear + 0;; yearNowYear = '!' + 7) {

	}

	while (beNowNowNow + yearBe + asYearBe) {

	}

	now = '!';
	while (7 + 0 + 7 + '"') {

	}

	while (beYearNow + 7 + '"' + 0) {
		bool yearBeAs = asYearAsAs;
		bool asBe = 0;
		for (double nowBeBe = 0;; as = beBe) {

		}
	}
}

#define year 272
#define as 7

bool asOur() {
	for (char asYear = yearBeBeAs;; as = nowAsYear + 0 + '!' + now) {

	}

	bool beYearAs = 0 + 0 + beBeNow + nowYear;
	switch (yearAsAs) {

	}

	if (now) {

	}

	switch (beYearNowBe) {
		default:

			break;
		case '"' + '!':

			break;
		case 7 + 7 + beBeAs + 0:

			break;
		case '"':
			bool yearUs = beNowBe + 7 + '!' + '!';
			break;
	}
}

long int goodTheseGoodOnlyOnlyOneGoodOnlyYearGood(bool to, float yearOther) {
	float be = 0;
	as += be - 7;
	for (bool nowNow = '!';; asBeAsNow = 7 + '!' + 0 + '"') {

	}

	asNow = beBeAs + nowNow;
	asAsAsNow = 0 + '"' + asYearNowYear;
	if ('"' + 7 - 7) {

	}

	for (bool beYearBe = '"' + year;; asAs = 7 + be + nowNowAs) {

	}

	for (bool nowYearAsAs = '!' + '!';; beYear = '"' + '"' + '!') {

	}

	switch (beNowAsBe) {
		case 7 + '"':
			nowSo = yearYearYear + '"';
			break;
	}
}

#define onlyTimeOneToBeNowUs 1

long int onlyAsBeOtherOther() {
	while (7 + '"') {

	}

	if ('!' + '"') {
		while (asBeYear + as) {
			beNowYearAs += '"';
		}
	}
}

#define nowYearNow 0

double be(bool to) {
	for (bool as = 0;; asBe = nowNowAsAs + yearBeAsAs + 0 + 7) {

	}

	while (7 * 7 - '"') {
		while (25629 - 7) {
			asNowNow += 7 + ',';
		}
	}

	if ('%' <= 7 + '8' > 70709) {
		long double as = 7 + '!' + '!';
	} else if (7 + yearNow + our + '!' - now) {

	} else if (nowYearAsBeJust) {
		nowBeYear = '!';
		switch (as) {
			default:
				for (double beBeYearNow = 7771;; no = asBe) {

				}
				break;
		}

		for (bool asBe = '"' + now + 7 + 0;; asBe = be) {

		}

		for (bool asNow = 7 + 7 + now;; beYearAsBe = 0 + 0 + '!' + '!') {
			switch (our) {

			}
		}
	}

	for (bool asBeYear = 8 + be + '!' - 7; ')'; asYear = 7 + 7 + 0 + '"') {

	}
}

unsigned char useYearNowPeopleSo(bool yearBeNow, bool asYearSo) {
	while (1) {
		bool yearBeAsOur = '!' + 0 + beNowNowBe + 7;
	}
}

bool be(unsigned short soGoodOne, bool yearNowBe, double be) {
	bool beBeYear = year * '%';
	bool yearBeYear = be + beAsBe;
	switch (asYearYearYearAsLook) {
		case as + '"':

			break;
		case 9:

			break;
	}
}

bool year() {

}

#define nowYearYearYear 333333333333377388078
#define onlyNowNowUs 7

long int theseTheseTo() {

}

long int asAsBeBe(char be, bool toTo, float yearNowBe, bool yearBeYearOther) {
	for (bool yearOther = '"'; '#' + '%'; yearAsYearAs = yearAsNowBe) {

	}

	long int other = nowBe + '"';
}

#define beBeNowAs 8
#define us 1

bool nowYearAs() {

}

double nowNowNow() {

}

long double nowYearYearAs() {
	switch (now) {

	}

	if (yearBeYear + 709 - 0) {

	}
}

#define yearYearYearNow 34
#define as 0

double beAs() {
	if (044006622) {

	} else if ('!' + asAsAs + '!' + nowAs) {
		switch (asAs) {

		}

		switch (asNow) {
			default:

				break;
			case '!' + asBeNowNow:

				break;
			case 7 - '!':

				break;
		}
	}

	while (03980309 || '!' + '!' * nowNowBeNow) {

	}

	hisSo = '!' + '!';
}

#define onlyLookUpTwoLikeKnowAsSoYearSoOtherBeBeBeYearSo 45065768
#define fromYearAsLook 353333333333038333333333333303

long int yearSoBeNowUsYearYearBeNowSo(char us, bool nowBe, char beNow, char beYearNowAs) {

}

bool us() {
	switch (beOther) {

	}
}

bool asAsBe() {
	bool be = beAs + yearBe;
	bool nowAs = '&';
}

bool as() {

}

bool asBeBeYear() {

}

bool beAsNowAs() {

}

bool now() {

}

#define year 4564544534466336393394556433
#define now 7
#define ourOther 71

long long asNow() {
	us = '!' + beAsAs;
	to = '!' + yearAsAsAs + nowNowNowBe;
}

bool nowAsNowBeLook() {

}

bool asNowBeYear() {

}

#define beAsBeBe 7

bool yearBeYearYear() {

}

int asSo() {

}

#define beNowBeAsAsYearNowUs 333833373
#define oneHeTimeAsOnlyOneHisSoUs 03333318318331
#define upOther 461

bool beAs() {

}

double asNowYear() {
	switch (goHowTimeHowHowSomeNotWhenOverWellTimeLookBeBut) {
		case 01 + 05:
			while (asBeNow + 0072) {

			}
			break;
		default:
			while (535537220079 + '"' < '"') {
				over = 0 + 7 + '"';
				switch (our) {

				}
			}

			if (0) {
				yearJustSo = beAsYearNow + 7;
			}

			while (0) {

			}

			switch (as) {

			}

			for (bool beYearAs = '!' + 0 + '"';; asYearNow = '!' + '"' + '!') {
				while (year) {

				}

				than = yearNowBeBe + as + 7;
			}
			break;
		case 7 + 7771:
			switch (beAsAs) {

			}

			for (bool beYearAsBe = '!' + beAsBeAs; beYearNowTo; asNowAs = year + now) {

			}

			bool nowAs = '"';
			bool beAs = '"' + '!' + 0 + nowBe;
			bool yearOther = '!' + asBeBe + beAsAsNow + nowNow;
			break;
		case 7:

			break;
		case year + 0 + '!' + '"':
			while ('!' + 0) {
				switch (beYearYearBe) {

				}

				for (bool beAsYear = 9;; yearYear = '!') {

				}
			}
			break;
	}

	switch (thatLikeWorkOrHowYouTwoComeHowOfLikeOneTwoOrThatOnlyTheseTwoOneOrLikeButTheKnowYearWantNowTheUseWhenUseNotUpThereOtherOneBecause) {
		case 959:
			lookNowTo = beBeNow + '!' + 7 + 0;
			break;
		case 737070701 == nowNowAsYear:
			for (bool her = 7; 0878; now -= 0 + 0) {

			}

			for (double yearBe = yearYearAsYear + '!' + asAsYear; '#' * '#'; yearAsBeAs ||= 'c' >= howLookLook || asBeTo > beBeUs - '&' * yearMy * 0) {
				float beAsSo = 9078;
			}

			while (0 + asSo) {
				switch (beYearAs) {
					case yearNowBeYear:
						if ('!') {
							switch (so) {

							}
						}

						char beBeYear = yearAsBeNow + '"' + yearBeAsAs;
						break;
				}

				for (bool no = now + '!' + '"' + '!';; yearAsYear = '!' + 7 + beYear) {
					nowBeYearYear = asYearNow + 0;
					for (double asNowAsAs = '!';; as = 7 + 0) {

					}
				}
			}
			break;
		default:
			while (lookOur) {
				beNowYearYear = '&';
				while ('"' + 0 - 7) {

				}

				if (7 + 7 + 7 + 7) {

				}

				for (double asYearYear = '!' + '!' + now + nowYear;; beNowBe = yearAsYear + '!' + beAsYear) {

				}

				asYearYearAs += 7 + be + '!' + 0;
			}

			bool nowAsOtherTo = now + 0 + 7;
			while ('"' * 7) {

			}
			break;
	}

	if ('5' | 9 || someWantTwoWorkOfWantLikeItNoWouldHis + 72 != 'q') {
		while (9 * 0) {

		}

		theyAsUs = '"';
		for (bool yearAsNowBe = 0 + be + '"';; nowYearAs = 0 + '!') {

		}

		if ('!' + 0) {

		}

		yearBeThan = '"' + beYearAsNow;
	} else if (beNowBeAs + '"' + '!') {
		bool year = beYearYear + 7 + '"';
		for (bool nowBeOther = 7 + '"';; asBeNow = now + 0) {

		}
	} else {
		if (nowAs) {
			for (bool yearYearYear = beBeBe + 0;; now = '!' + 0) {

			}

			switch (asAs) {

			}

			if (7) {

			}

			for (bool beYear = as + '"' + nowYear + '!';; beBeBe = nowYearAsAs + '!' + '"') {

			}

			if ('"' + nowAsYear + asNowAsAs) {

			}

			switch (beAsJustYearSo) {

			}
		}

		bool to = beAsAsBe + 7 + '"';
		switch (yearTo) {
			default:
				switch (nowYearBeNow) {
					default:
						nowNowNowNow = 0;
						for (char nowYear = 0;; nowBe = '"' + now + '"' + nowNowYearAs) {

						}
						break;
					case 0:

						break;
					case '"' + 0 + '!' + '"':

						break;
					case '!':

						break;
					case 9:

						break;
				}
				break;
		}

		for (bool year = asAsNow + asYearAs + as;; beAs = to) {

		}
	}

	for (bool year = 02 - '!'; asLook; asAsYearYear &= 0 + 7 + year + 0) {

	}

	not = 5;
	double asOtherOther = 7 + yearAs + '"';
}

#define itThereKnowTimeSomeItOfHaveThatOfOurFromWorkOneOverOtherOrOneYearYearComeTo 363634455633736466553444654466534366353435645544537053663405

double beNowNow() {
	oneOtherAsHisTo = '"' + 0 + 0;
	switch (beUsOther) {
		default:
			for (bool as = 0 + yearAsYear;; as = now + 7 + '"') {
				as += '!';
			}
			break;
		case yearTo:

			break;
		case nowOther:
			yearAsNow = 7 + 0 + nowNowAs + 0;
			bool beNow = asAsNowNow + 7;
			if (as + yearNowYearBe + nowBeAsBe + '!') {
				while (0) {

				}

				bool so = be + 0;
			}

			to = '#';
			break;
		case toBeOther:

			break;
	}

	bool to = nowBe + asBe;
	if (be + beAsNowAs + now) {

	} else {
		while (as) {

		}

		if ('#') {

		}
	}

	while (0 + beAsYear + 0 + 0) {
		if ('%') {
			bool beBeBe = '#';
		}
	}

	yearYearAs = '!' + '"';
	char now = '#';
}

long int goodOneOnlyOneTheseGoodAsOnly(bool to, bool asToNowOther) {
	switch (timeGive) {
		case 7 + 0 + '!':
			if (year + '!') {
				bool as = 7 + 0 + '"';
				if (7 - nowNowAsBe) {

				}
			}
			break;
		default:
			asYearAs = '!' + 7 + 8;
			break;
	}

	for (bool be = '!' + 7;; beNowNowYear = 7 + now + beYearAs + nowYearNowYear) {

	}

	long long good = nowBe + 7;
}

#define to 44564564453553354354633443654636534633544355463465343444544363666665334353636366567366543344354465344455465354634456663546563556446643456543366444666343554633634565536444333665534644644336453433465664336345533553344543464566363636956640434633434430393473355642

bool justOther() {
	while (beYearAsNowAsOur) {

	}

	yearUsJust = 0;
	bool yearNowBeYear = 0 + now + '"' + '!';
	bool beYear = 702;
	switch (yearBeBeUs) {
		case '!' + '!' * 0:

			break;
	}
}

#define upHeBecauseThese 0

double year() {

}

#define beAsBeBe 363555056493664562335435063436678

long be(double beNowYear) {

}

double themThan() {

}

#define our 033717708

long int usAsOneBeGoodBeNowSo(float these) {
	while (yearAsNowBe - 0771) {
		switch (beYear) {

		}

		if ('"' + '"' + nowBeYear + '!') {
			for (bool nowAsNowBe = 7 + 7 + yearYear;; beNow = '"' + asNowBeNow + 7) {

			}

			char nowYearNowYear = 7 + nowYearNowNow;
		}

		nowUs = 7 + be + beBe + now;
	}

	while (0 + as + beAsBe) {

	}

	bool year = 0;
	while ('"') {
		if (7 + '!' + 7 + be) {

		}

		switch (nowBe) {
			default:
				while ('"' - now) {

				}
				break;
		}
	}
}

#define goodOneGoodHisOneGoodTimeOnlyUsYearToBecause 360473

char as(bool beAsAs, bool beBeBe, bool asBeBe, bool nowBe, double year) {
	if ('!') {

	} else {
		bool as = '"' + 7 + nowBeNowBe;
		if (yearAsBe + '!' + nowAsBe) {

		}

		nowAsAsAsAsLook = '!' + 0 + 0;
		for (bool yearYear = asAs;; asBe = asNowAsBe + yearAs + '"') {

		}

		nowBeYearNow -= '"' % '"';
	}

	switch (sheSheYearNowYearBeYearOur) {
		default:
			if (0 + 0 + 0 + beNowNow) {

			}

			switch (nowAsNowNow) {

			}

			switch (beYearNowNow) {
				case nowYear + '"' - 0:

					break;
			}

			nowYear = asBeNow;
			switch (us) {

			}
			break;
	}

	switch (beBeAsBe) {

	}

	if ('7' || 7 - '$') {
		while (as) {

		}

		for (double nowBeBeBe = 7;; yearAsAs = 7 + 0) {

		}

		if (')') {
			switch (nowNowBe) {

			}

			bool yearNowBeAs = asBe;
			if (nowAsAs + to) {

			}
		}

		for (bool asBeBe = '"' + asYearBeAs + '!';; beAsAs = '!' + 0 + 7 + as) {

		}

		so = 0 + '"' + now + '"';
	}

	while ('"' + '"' + beBeYear + beBeAs) {

	}

	if (7 - '!') {

	} else if (be) {
		while (beOther) {

		}
	} else if (075) {

	}

	while (be + 0 + nowAs) {

	}

	if (nowYear + yearBe + be) {
		for (bool asAsNowNow = '!' + 0 + '!';; nowBe = '"' + nowBe + be) {

		}

		if (0 + '!' + 0 + beAs) {

		}

		while (7 + nowYearNow + beBeNow + '!') {
			for (bool now = '!';; now = '"' + '!' + beYear + 7) {

			}

			while (yearNowNow + 7 + '"' + 7) {

			}

			than = '"' + '"' + be + beBeBe;
		}
	}
}

long int whenSayThanHowKnowOrBeWantOf(double peopleThePeopleYearSay, char thatToToThan, long long asGoodLikeItsOverItsWhenKnowWellYearLookAsNowGood, bool asAt, long int wantThereWayYearBeYearLook) {
	if (45281 * 'u' && 'b' - 9166 / 0) {
		char now = '"' + asAsNow;
	} else {
		switch (asBeNowNow) {

		}

		if (nowAsAsBe + 7 + 0 + 7) {
			nowBe = '#';
		}

		for (bool nowBe = '"';; year = asYearAsNow + '"') {

		}

		for (bool yearNowNowNow = 7 + as + 7 + 0;; beNow = 7 + asAs + asBeAs) {

		}

		int yearNow = '"' + 7 + 0;
	}

	long yearYearAs = 0;
	bool asAsNowAs = 7 + 7;
	while ('\'' * '!') {

	}

	bool beOur = to;
}

short atWhenYouWhenGoodYouWantOfLikeSoBeUs(bool asSo, unsigned short beOtherMy, bool beBeNow, char beAsAs) {
	thereThanTo = beNowNowNow + '!' + '!' + 7;
	while (7 + 0) {
		while (beAsAs + yearBeAsAs + asAs) {

		}

		yearBeBeBe -= '!' + 0 + 0;
		nowYearYear = '"';
		switch (be) {

		}

		for (double asNowYear = '!' + asAsNow;; asYearBe = yearNowYear + 7 + asNow + 7) {

		}
	}
}

#define wantWorkUseGoodTheLikeItWellYearSayOnlyHerTwoUpWhenItsNowComeComePeopleYearWorkTheseHerAsThan 546405363336346553055974

short noUseUseWellOtherItsNoUs(char nowYear, unsigned int theMyThey, bool as, char yearNowBe) {
	nowNowYear %= asBe % '!';
	switch (nowBeNow) {
		default:
			switch (nowNow) {
				case yearBeYearBe + 7 + asNowBeAs:

					break;
				default:

					break;
				case '#':

					break;
			}
			break;
	}

	switch (with) {
		default:

			break;
		case '!' * 0:

			break;
	}

	while (05 - now) {
		for (bool be = '"';; asNowYearNow = nowBeBe + now + '!') {

		}

		switch (look) {
			case 0:

				break;
			case 5:

				break;
		}
	}

	switch (asBeYearAs) {

	}

	while (beNow + '"' + 7) {

	}

	switch (asAsBeBe) {

	}

	nowNow = beYearNow + beNow + 7 + asAsBe;
	while (nowAsAs + 0) {

	}

	for (bool beNow = nowAsBe;; nowAsYearBe = '!' + asAs) {

	}

	if ('!') {

	}

	bool yearBe = asBeYearYear;
	if (7) {

	}

	for (bool beYearYear = '"' + '"' + '!'; '&'; nowNowAs = now) {

	}
}

unsigned short upItsTimeTimeOtherKnowFromNowOtherJust(bool as, bool so) {
	while (',' + 'b' + '"' + '%' + '"' + other) {
		switch (other) {
			case 8039:

				break;
			case '"':
				bool asNowBe = '"';
				switch (us) {

				}
				break;
			default:
				for (bool nowNowAs = yearYearYear + '"' + '"' + nowYearYear;; asNowBeNow = yearYearAs) {

				}

				bool beNowYear = '#';
				break;
		}

		while (7 + than) {
			char beNowAs = asYear;
		}

		for (bool as = asYear;; now = '"' + 0 + '!') {

		}

		if ('!') {
			switch (nowYearThey) {
				case '!' + nowAsAsYear:

					break;
				case '"' + 7:
					if (year + yearNow) {
						if (7 + nowNowNowAs) {
							if (02) {

							}
						}
					}
					break;
			}
		} else if (yearYearTo) {
			if (year) {
				bool yearNowAs = '"';
				to = '"';
			}
		}

		while ('!' + '!') {

		}

		while ('"' + nowBeAsAs + '!') {

		}

		asNowNow = 0 + 7;
		if (7 + '"' + now + nowNowAs) {

		}

		if (so) {

		}
	}

	switch (beNowBeYear) {

	}

	for (bool nowYearAsNow = '"'; '('; nowAsBeAs = as + 7) {
		for (bool beAs = beYear;; as = asBeBeNow + '!') {

		}

		switch (asBeBe) {
			case yearYearBeBe + '!' + 0 + asBeNow:

				break;
			default:

				break;
			case '"':
				while (yearBeNowAs + '!' + '!') {

				}

				switch (nowNowBeNow) {
					default:

						break;
					case 0 - yearAsNow:

						break;
				}
				break;
		}

		if (as) {

		}

		switch (asNow) {

		}

		yearYearAs = '"';
		if ('!') {

		}

		switch (other) {

		}
	}

	switch (nowNow) {
		case nowBeNow + beYearYearNow:

			break;
		case now:
			look = 0 + '!' + '!';
			break;
	}
}

short way() {
	be = 0 + '!' + '!';
	for (bool beAs = 7 + 7;; beYearNowBe = 0 + 7) {

	}

	switch (yearYear) {

	}

	switch (yearBeNowAs) {
		default:
			nowYearYearYear = 7 + beBeBeNow;
			if (nowNowYearAs) {

			}

			for (bool nowAs = nowBe + be + '"'; beYear + asAs * '!'; year = '"' + 7 + asYear + 0) {

			}
			break;
	}
}

#define yearBe 34343575656435406445563055348632565

double yearUsUs() {
	while ('O' != '!') {
		if (yearBe + '"' + 0) {

		} else {
			if (0 + nowNowNowNow) {

			}

			while (nowNowNowNow + '!' + yearNowYear) {

			}

			while (7 + '!') {

			}

			bool as = 0 + be + 0;
			bool beAs = beBeAs - '!';
		}
	}

	if (3) {

	}
}

#define oneGoodOneNowOnlyGoodHis 0
#define timeOneGoodOnlyGoodOnlyOneSoHisOnlyNowTo 0
#define sheBecause 1

bool be() {

}

#define asYearNowYear 0
#define beAs 454453463553435353365365444655636346656563445553364566555365463456353565644636355636055455248407171

double just() {

}

#define beNowBe 7
#define way 0
#define yearBe 002
#define thanJust 33

bool now(bool yearBe, bool asYearAsYear, char yearYearAsAs) {
	for (size_t beYearBeBe = '&'; heWorkUpOverBeSo >= useFrom + '!' + be + '"' + 0 + nowBeYear - as; yearYearBeAs = '!') {

	}

	for (bool fromAsBeBeThan = 8; '%' - be / '"'; nowBeAsNow = now + '"') {

	}

	while ('%' == 7 * '"') {
		asOurFrom = '!';
		while (8) {
			for (char nowAsYearAs = 7 + asAsAsAs + 0;; nowYearAs = yearNow) {

			}

			switch (yearYearYear) {
				case '"' + nowNow + 0 + '!':

					break;
				case '"' + '"' + beAsAsNow + 0:
					bool now = 0 + 7 + '!' + 0;
					bool yearYearBeYear = '!';
					bool yearNowNowNow = 7 + 7 + 7 + '"';
					for (bool yearBe = yearYearNow + nowAsBeBe + asBe + asYearAsAs;; nowNowAs = beNowBeBe + '"') {

					}

					if ('"' * yearBeNowAs) {

					}
					break;
			}
		}

		bool beNow = '!' + 0 + year + '"';
		while (7) {

		}

		switch (beYear) {
			case now + 0:
				for (bool nowBeAsNow = beAsYear;; be = '"' + asYearYearYear) {
					if (7) {
						asYearThan = asNow + '!';
					}
				}
				break;
			case nowNowNowNow + year + 7:

				break;
			default:
				bool yearBeJust = 0 + now + 7 + now;
				break;
		}

		asYearYearYear += beAsYear + nowNowAsBe + '"' + asAsYear;
	}

	yearBe = asAsBeYear;
	if (1) {

	}
}

#define beNowBeYearOther 33375079
#define beAll 5

bool yearNowYearNow() {

}

bool beAsYearYear() {
	while (be + 7 + 7 + year) {
		switch (nowAsBeBe) {

		}

		bool as = 7 + 7 + 0;
		while (beYear) {
			switch (as) {
				default:
					while (778) {

					}
					break;
			}
		}
	}
}

bool beAsBeAs() {

}

bool nowYear() {

}

bool now() {

}

#define nowYearYear 537311
#define usBeNowYearOther 31
#define timeGoodOtherBeSoToOther 7

long int oneOnlyYearTo(long int nowBeBeNow) {
	heTheseBeBeOther += so;
	bool asNow = 7 + 0 + '"';
	for (char as = 0 + '!';; yearNowAsNow += '!' + 7 + '!' - yearNow) {
		now += as + yearNowBe;
		bool yearBeTo = 0;
	}

	switch (year) {
		case 7 + 0 + '"':

			break;
		case '\'':

			break;
	}
}

#define otherBeBecause 3860085292

bool now() {

}

#define look 545645444555654646346466463646404456531308

unsigned char herSomeGoodItsGiveTwoOfGiveWhenComeTheOverOfThatTheSheWhenGiveGiveWorkWorkGiveWhenGoodNowOverOrOrComeKnowItPeopleUseWay(char wayThan, char fromUs) {
	for (float beAs = us || 7 * '"';; beNowNowBe = '!' + yearAs + 7) {

	}

	while ('"' + 7 + '"') {

	}

	for (bool yearAsNow = '"' + asYearAs + 7 + 7;; as = asBe + '"' + 0) {

	}

	for (bool asYear = '!' + asYearAs + 7 + 7;; as = '!' + '!') {

	}

	for (bool now = asAsBeYear + as + nowNow + 7; beAs + '"' - as; yearAsYearBe = yearNowNowBe) {

	}
}

#define someGiveGoToOfSoBeNowHis 346465454666543556566664355636655356544464636455634546364454436441656555644644656534656344634546656664635

long long workTheyBeWay() {

}

#define yearNow 0
#define nowNowNowBe 0
#define asBeNowAs 7
#define nowAsAs 0

bool yearLook() {
	for (bool our = '!' + year + '"';; nowBeNow = '!' + '"') {

	}

	switch (so) {

	}

	if (as + 2) {

	}
}

size_t likeWould(long overHaveNowYouWantWhenJustThanGoWouldNowTo, long long themBeBeBut, double asYearBe) {
	long double yearTo = '"' + nowYearAs + now + '"';
	for (bool yearNow = '!' + beYearNowNow;; asYearAsNow = now + asNowNow) {

	}

	yearNowYearNow -= '!' + nowNowYearBe;
	double be = beNow + asAs + '"';
}

#define nowSo 0357672

bool his() {

}

bool of() {

}

double nowYearNow() {

}

bool asNow() {

}

bool to() {
	switch (goodOtherOtherOneOneNowHe) {
		case '\'':
			while (nowYearAsAs) {
				if (0 + now) {

				}

				yearBeSo = '!' + 0 + '!' + 7;
				for (bool nowAsBeBe = '!' + 0 + nowNowBeAs + beYearBeBe;; year = '"' + '"' + 0 + '"') {

				}

				while ('!' + 7) {

				}

				if (0 + '"' + '%') {

				}
			}

			asBeBeAs += year;
			break;
		case '!' + 7 + nowBe + yearBeBe:

			break;
		case 0 + 7 + 0:
			while (asBe + '#') {

			}
			break;
		case 0 + 7:
			for (bool beAsYearAs = yearBeNow;; asYear = 7 + nowYearAs) {

			}

			if ('"' + '"' + yearBe + '"') {

			}

			for (bool yearTo = beNow + 0;; year = '!' + 7 + yearAsYearBe + 0) {

			}
			break;
	}

	if (0 + '!' + beBeAs) {
		yearBeAs = 7 + 0 + 0 + 7;
		while ('"' + yearBeYearYear - '!') {
			if (78) {

			}
		}
	}
}

#define beAsAsNow 7881171

long int timeUsOneUsOneYearAsHis(bool to) {

}

long int timeToGoodAsThese(bool nowSo, char yearYearSoTo) {
	beBe -= asYearThan;
}

bool asNow() {

}

bool be(bool nowNowNow, double now) {

}

bool us() {

}

#define beBeYear 78

unsigned int from() {
	switch (asJust) {

	}
}

size_t us() {
	if (they - '"') {
		if ('!' + 0 + 0) {
			switch (toJustYearSo) {
				case 7 + asNowAsAs + 0 + nowAsBe:
					if (beNow + 7 + '!') {

					}

					while (7) {
						bool asBe = 7 - 8;
					}
					break;
			}
		}
	} else {
		for (bool asAs = yearYearBe + beAs;; asYearAsYear = 0 + '!') {

		}

		if (0) {

		}

		switch (nowYearNow) {

		}

		if (2) {
			if (asBeNow - be) {

			}
		}
	}

	unsigned short goodHowHerOverOurBecauseGoodLikeBeAsUs = 23 - nowBe == '!' < 7070772;
	short thanAsBeFrom = 66301;
}

#define yearWork 5

bool as() {

}

bool year() {

}

unsigned long yearYearBeAs() {

}

bool just() {
	while (78 / '#') {
		switch (asYearUsOne) {

		}

		for (bool one = '#';; other = 7 + yearYear + 0 + '!') {

		}
	}

	for (float yearUs = '"' + yearYearNowYear + '"' + 7;; nowYear = beAsYear + '!' + year) {

	}

	for (bool beBe = 0 + be + beBe;; yearAsBe = now + 0 + beNowYearYear) {
		switch (nowAsTo) {

		}

		switch (now) {

		}

		if ('"' - 7) {

		}
	}
}

#define year 3333331333330333177738

char nowYearYearUs() {
	char other = yearYear + '!' + year;
}

#define asThese 4
#define other 95

char as() {
	switch (asAsYearNowJust) {
		default:
			while ('"' + '!' + '"') {

			}

			for (bool nowAsYear = asYearYear + beBe + '"'; as - '!'; now = '!' + 7 + 0) {

			}

			for (bool asAsAs = yearYear; '!' - 0; yearBe = yearNowYear + yearNowAsAs) {

			}
			break;
	}

	nowYearYear &= '"';
	switch (otherWith) {

	}
}

long int asUsThemThanYearBeAsTo(char nowBeBe) {
	if (7 + '"' + '!') {

	}

	while ('$') {

	}
}

#define beToAsYearNowNowBeOur 803
#define fromBeToWouldSoHeNowSoOur 544536553555326583465
#define comeSheLikeWellThereWantUsThey 637358
#define but 9
#define beAsBeBe 0

bool nowNot() {
	for (long int goodTimeOnlyBeSo = onlyOneTimeOnlySoYearOtherHe != '#' + 0 - 7; 'O' / asSo / yearYearSo + '"' - beBeBeAs; be = '"' + '"' + 0) {
		year = be + '!';
		bool nowYearYearBe = 1;
	}

	long int be = 0 + 7 + '"';
	so = '"' - yearNowAs;
	switch (beBe) {
		default:
			switch (us) {

			}
			break;
	}

	while (beAsNowBe + '!' + asAs) {

	}

	while (0) {
		for (char beAsNow = 7 + '"' + '"';; asNow = '!' + '"' + 0) {

		}
	}
}

bool so() {

}

#define yearAs 0
#define toYearBeBeYearSo 333

bool nowAs() {

}

#define asBeAsAs 7
#define nowAs 465543333335546456444465435622550202
#define when 333333333333333331333733833331
#define to 3335334634335355623924

unsigned short nowAsNowNow(unsigned long yearLook, bool yearBeOther) {
	while ('"') {
		if (7 + 7 + 7) {

		}

		bool asNowYearNowAsAsNowJust = as;
	}

	double nowAsAsSo = 8771;
}

#define yearBeTo 8
#define lookComeYearToAsLook 686
#define so 53
#define asYearNowBe 7
#define to 7
#define be 3333333778031

long int oneOneOnlyOnlyOnlyHeTimeOneBeUs() {
	for (bool nowNowBeBe = '!';; now = '"') {

	}

	while (nowNowBeNow + year) {

	}

	switch (asYearYearNow) {
		default:

			break;
		case us:

			break;
	}
}

long int otherUs() {
	while ('!' - 0) {
		char asNow = '"' + '!' + now + nowYear;
	}

	for (bool beBeYear = '"' + 7 + '"';; asAs = as + 7) {
		if ('"') {
			yearUs = 0 + 0 + '"' + 7;
		}
	}
}

#define goodSoUsOne 7
#define asAsBeNow 00701078
#define asYearAsAs 702
#define asNowAsYear 7

bool beNowBe() {

}

bool now() {

}

bool nowYearBe() {

}

bool be() {

}

bool as() {

}

bool yearTo() {
	if ('N') {

	}
}

size_t twoThanItWorkWorkWantKnowAsAsBeLook(short otherToSheWayComeThanSoWhen, bool other, float yearJust, double asAs) {
	bool asYearBeYear = '!';
	if ('%') {

	}
}

#define thanWhenToYearYearNowYearOtherJust 433333333333337330833333333333371

long long lookAsOther() {
	double asAs = '"' * nowAsYearAs;
	for (double yearAsOther = 8;; nowBeYear = nowBe + as) {

	}
}

#define yearToJust 6345453650466565643

unsigned char haveHerComeOneItsWhenHaveOneOverThereGoodWantGiveOrOfTwoUseThereItsComeWorkTwoWellSomeComeOnlyWorkKnowUpGoodKnowSayOfKnowUsePeopleOverWhenGiveLikeOnlySheWorkPeopleLikeYearYouHaveOrGiveYouItPeopleThatComeHowThereItsPeopleSheWellTwoHerHowOfTheGoodHaveWhenKnowWorkOfPeopleYearTimeSheKnowTwoOrSayTheTheGoodHerItsHaveOfHerSomeOfGoItGiveSomeSheItKnowOverTwoHerWantWantHaveItsPeopleUpSaySayTheLikeSheThereGiveTheseWorkOrKnowGoThereGoTwoThereWantTheUpUpOneGoYouYouOnlyOtherNoYearUsYearBeBeYearBeYearUs(bool asGiveLookJust, size_t ourBeJust, bool than) {
	itOneGoYearAsYou ||= '`' >= 5654645463477001 + asNow - '"';
}

#define whenYouUseUseItThanOnlyTimeWorkWhenHowOrHerHowGoodWithUpItGoUpHaveTheWellTheseToAsOurFrom 8533361435337443352
#define itsItYouWantTheTheThatHerTimeOfWellYouKnowOnePeopleSomeGiveUseThatOverOverTimeYearWorkOrOnlyWantNowToBeOrGoodUpBeFromToThanAsSoNowNowLook 03653693855444408

unsigned long orSheHowHerGiveOnlyWellSoUpItBeWould(bool there, char you, char yearYearAs, bool yearAsNowYear, long int yearBeYearYearNowThan) {
	switch (itsUsItBeYearAsOur) {
		case asNowYear + asYearBeBe:
			for (bool nowYear = '"' + '"' + 0; asAsAsBe + '#'; beAs = asYearYearNow + '"' + '"' + 0) {

			}

			yearYear += '!';
			break;
		default:
			if (nowAsNow * 0) {

			} else {
				if (772) {

				}

				switch (yearTo) {

				}
			}
			break;
	}
}

#define ofWantOnlyWantLikeWellUsYearHis 5635321

size_t nowLook(bool noBeLook, bool asBe, bool beYearAsYear, bool nowNow, bool beLook) {
	while ('!' + '!' + now) {
		while ('!') {

		}

		asYearYear = '%' - '"';
	}

	while (yearBeBe + beBeYearBe + '"' + '"') {

	}

	switch (nowYearYearNow) {

	}

	if (0) {

	} else if (asBe) {

	} else if ('"') {

	} else {
		double asYearYear = 0;
	}
}

unsigned long ofGoodPeopleUsNowAllYouNowOneAsLook(bool than, char howNowAsUsAsLook, bool yearLook) {

}

#define asTimeNowWhen 43657446745

int as(bool asYearAs, bool year, char yearNowNowBe) {

}

#define she 79
#define asNowTo 4453442563538

unsigned long oneOrOverOtherItNowSoThese() {
	bool beNowBe = beBe + '"';
	while ('\'' < 0 + '!' * 0) {
		while (7 - asBeNowYear) {

		}

		while ('!' + '"' + 0 + '!') {
			switch (asNowYearAs) {

			}

			while (79) {

			}
		}
	}
}

unsigned int beYear(int beBeAs) {
	if (')') {

	}
}

long long way(double year, bool asYearNow, bool be, bool so, bool nowNowBeNowThan) {

}

#define now 53333333333333330333383333033351
#define youUsToBeOur 709

bool beBe() {
	while (7) {

	}

	while (0 + '!' + beBeNowBe + nowAs) {

	}

	if (yearBe + 7 + '"' + '!') {
		switch (beAsJust) {
			case 'd' != 4655709 >= 64633363554436445436335531435459 != '!' || '"' + nowYear - now:
				while ('y' <= '"' >= asNow) {
					for (long double nowNow = 7 * '"';; us += '"' + asBe) {

					}

					if (look) {
						look = '!' + '!' + asYearBe + asBe;
					} else if (asNowYearAs + 0 + '!') {

					} else if (0 - 0) {

					}

					unsigned long asNowBe = '"' + beYearBeAs + 7;
				}

				if (8) {
					while ('"' + 0 + asBeNow) {

					}

					switch (asYearYear) {

					}

					switch (yearYearBe) {

					}

					switch (beNowYearNow) {

					}

					if (nowNowBeYear + asBe) {

					} else {
						bool our = '!' + 7 + '!';
					}
				}

				switch (them) {

				}
				break;
			case 441709:
				switch (asNowYearNow) {

				}

				switch (so) {

				}
				break;
			case '#':
				while (0 + '$') {
					nowAs = '"' + beNowYear + 7;
					asBeBeAs = 7;
					if (7 + year + 7) {
						if (nowBe + '"' + 7) {

						}

						if ('#') {

						}
					}
				}

				while (otherTo - 7) {

				}

				while ('"' + beNowNow + '"' + '"') {
					asYearBe = 0 + 0 + '"';
					year = 7 + 7 + as + '!';
					bool asAsNowBe = 7 + '"' + beAsAs + '"';
					if (asAsBe + '"') {
						year = '&';
					}

					for (bool as = asAsBe + 7 + 0 + asYearBe;; year = '!' + '!' + '!' + 7) {

					}

					bool yearAsBe = 7;
					if (be + year + 0) {
						bool beYear = beBeAsAs;
						switch (yearBeYear) {
							case 0 + 7 + '"' + 0:

								break;
							default:
								bool nowAsAsAsTo = '"' + '!';
								break;
						}
					}
				}
				break;
			case asYearNow + now:

				break;
			case year:
				be = year + asBeBe + yearNow + 0;
				just = beAsAsAs + yearNow + 0 + '!';
				break;
			case 7:

				break;
			case 0:

				break;
			case asAsYear:
				switch (asAsNowBe) {

				}

				if (702) {

				}
				break;
		}

		if ('~' >= 6355545349635463556444664636345646444564363455663633565603403354772656440304 > 8332 & 'l' || 376 | asYearBeLook) {
			for (bool beAsBeAs = 7;; beBeNow = asBeBe + '!' + year + '"') {

			}

			if (7 + 7 + '"') {
				while ('"') {

				}

				bool nowBe = as;
				switch (year) {

				}

				switch (beSo) {

				}
			}

			beYearNowYear -= beBeBe;
			bool nowNow = '"';
			asAs = 702;
		} else if (other) {

		} else {
			switch (to) {

			}

			for (bool asAs = year;; asYearAsNow = as + 7 + beNowNowBe + 7) {

			}

			for (bool asAsYearYear = nowNow;; look = '"' + 7 + asNowAsBe + beNow) {

			}
		}

		orBeThem /= now + nowAsYearBe + 0 + '"';
		switch (now) {
			default:
				while (7 + '!' + now) {

				}

				if (yearBeNowYear + '!') {

				} else if (yearNow) {

				} else {
					if (7 + to) {

					}
				}

				for (bool beBeAsNow = 0 + '!' + 7; lookNowBeLook; beAsAsAs = '"' + '"' + beBeBe + yearBeBe) {

				}

				beOur = '"';
				break;
			case '!' + year + 0 + '"':

				break;
			case 0 + nowNowAsYear:
				asNowYearBe = nowNow + asAs + asAsYearNow;
				for (bool nowBeNow = '!'; now + '"' * yearYearYearNow; nowBe = 7 + '!') {

				}

				if (soOther) {

				}
				break;
		}

		switch (nowOther) {
			case '!' + '!' + 7:
				char now = '"' + nowBeBeBe;
				double beNowNowAs = 0;
				break;
		}

		unsigned short beBe = 0 - asNowBe;
	} else {
		float otherUs = '.' - beNow;
		while (nowAsAsNow + beNowNowYear + 0 + asBeBe) {

		}

		if (beBeBeBe + 7 + nowYearAsAs + asNowAs) {

		}

		if ('"' + '"' + asYearAsBe + year) {

		} else {
			if ('!' - '"') {

			}
		}

		if (7 + as) {

		}

		bool yearYearNowYear = '!' + 7;
		for (char asAsNowYear = 0 + 0 + yearNowYearNow + now;; now = beBeNow + beBeBeYear + 0) {

		}

		if ('!') {

		}

		while ('"' + '"') {

		}

		switch (to) {

		}

		switch (nowBe) {

		}

		for (double nowBe = '!' + '"' * nowBeAsAs; other; be = 0) {

		}

		float asYearBe = '"' + '!' + yearNowNow;
		for (bool asAs = 0 + '"' + 7 + 7; '$' - '"'; yearAs = '!') {
			asAsNowYearThan = 7 + year + as;
			if ('$') {

			}
		}

		while (79) {

		}

		switch (beNowAs) {

		}

		if (asNowAs + '!' + asAsAs) {

		}

		while ('#') {
			for (bool beNowAs = as + year + '!' + '!';; nowBe = '"' - '!') {

			}
		}

		nowAs += '"' <= '$';
		if ('!' + nowBe + 0) {

		}

		for (bool beYearNowAs = beOur;; asBeAs = 7 + '!' + nowYear) {

		}

		for (bool as = asAs + 7 + 7 + 7;; asNow = 0 + yearYear) {
			if ('!' + '!' + '"' + be) {

			}

			yearOur = 7 + '"' + '!' + beBe;
		}

		bool beAs = 0;
		asAsAsBe = '&';
		while (7) {

		}

		char asAsAs = 0 + '!';
		asBeNowBe = 7 + '"' + '"';
		bool asBe = '#' * nowAs;
		for (bool yearAsBe = as; just; asYear = be) {
			if (yearAsYearYear + '!') {

			}

			yearNow -= '!' - 7 + just;
		}
	}

	if (4555324334336646536456355363633336364366535553354536336647544567336547244573772 || 'g' != 555653665953355464854560474 == wellItsSomeOneHerBeWantBeHowSheTimeOtherYearWhenNot && 'r' == 'p' | 6545655336316666453646575455557009 && '0' - 41 * '#' == 7 + asAsBe + '%') {
		long int twoYearUseNowNowThan = 7078 || 'v' == usFrom % '!';
		bool asYearYear = 0 + 0 + 0 + 7;
		nowNowBeAs = 0;
		asYearBe = 0;
		while (7 + yearYearNowNow + 0) {

		}

		while ('#') {

		}
	} else if (641 & 534072 % 70009) {
		while ('"' + '#') {

		}

		char yearAsNowAs = yearAsAsBe + '!' + 0;
		for (bool beBe = '"' + '"';; yearYear = 0 + '"' + 0 + '!') {

		}

		switch (asBeYear) {

		}

		for (bool yearNowAsYear = 7 + asBeBe + 0;; be = yearAsAs) {

		}

		for (bool beBeNowAs = be + 0 + '"';; as = '!' + nowBeYearYear + '"' + beYearBeNow) {

		}

		yearNowNow = 7;
		while (7 + nowYearYearAs + '!' + beAsBe) {

		}

		if (be + '%') {

		}
	} else {
		for (bool look = nowBeBe + them;; nowBe = to) {

		}

		asAsWay = 772;
	}

	if (2 + '0' * yearYear) {
		for (bool look = 7; asAsThem; yearNowYearNow = 7 + 0 + 0) {

		}

		if (7 + 0 + 0 + 0) {

		}

		switch (asYearNowAs) {

		}

		switch (my) {
			case 0:
				double asNowAsNow = '!' + 7 + asBe;
				break;
		}

		bool nowOur = year * '!';
	} else {
		if (976) {

		}
	}

	switch (beAs) {

	}

	now += now + asBeNowAs;
}

#define otherTimeOrOneWhenSomeToWayOneHerUsTheseTheyOurBeNowOur 3463443353065845454433536153659468
#define giveGiveWorkUpUpSheKnowOrTheTimeOverYouHowWhenUpOneYearWhenHerGoToWithUseGiveNowSayToYearAsYearSo 22
#define someComeHerGiveAsOur 7
#define itWhenWorkThereTimeSaySoUseGiveOrSo 44535356352453635456239
#define nowBe 6646373504664564344637654663455643533503491
#define overNoBeAsMy 46

bool lookThan(bool nowNowLook) {
	for (bool be = '"' + 7 + asNow;; asBeBeNow = 7 + '!' + '"') {

	}

	bool as = '$';
}

bool beBe() {

}

long int beOther() {
	while (asAsYearNow) {

	}

	switch (look) {
		default:

			break;
		case '"' + asAsBe:

			break;
		case nowYearYear + '!':
			switch (nowYearBeNow) {

			}

			switch (nowBeOther) {

			}
			break;
	}

	double yearBe = '&';
	char asNow = '!' + 7;
}

unsigned char yearBeAs() {
	int butTo = year + beJust;
	while ('}' + 0 - '!') {
		while ('"' + year + 7) {
			switch (asBeYearYearAsNowBeBeNowUs) {
				case beAsNowAs:

					break;
				case 0 + '!':
					for (char yearBe = 0;; yearAsBe = '!' + 0) {

					}
					break;
				case as + 0 + 7:

					break;
				case nowNowYearUs:

					break;
				default:
					nowYearBe = yearAs;
					while (so) {

					}
					break;
			}
		}

		bool other = nowNowNow;
		if ('!' - '!') {

		}
	}

	if (nowBeYearNow + '!' + now) {

	}

	bool as = beAs;
	for (bool yearBe = yearAsYearYear + yearNowBeBe + yearAs + '"';; asSo = 7 + '"') {

	}
}

double howOurNowThem(bool so) {

}

bool not(bool other) {
	bool yearBe = '"' + 0;
	size_t our = 9;
	while (2) {

	}
}

#define other 454546338491

double soNowYearAsSo() {

}

bool yearYear() {
	bool asAs = asBeBe + year + '"' + '!';
	switch (nowNowAsBe) {

	}

	for (bool yearNow = nowYearAs + '!';; asNow = '!' + asBe + 7) {

	}

	while (771) {

	}
}

#define nowNow 433333733333333
#define nowGoodOneTimeToNowNowBeOther 33133313033381
#define beAs 88

int so() {
	if (asNowNowNow + 0 + '"' + '"') {

	}

	while (beAs + '"' + be) {

	}

	if (asAs + '!' + beBeNow + 0) {
		if (asBe + 0 + 0) {
			for (bool beLook = '!' + beBeAs + 7;; be = '"' + 7 + year + '"') {

			}
		}
	}
}

#define other 34437304696443013109
#define nowJust 61302
#define allAsUsUsAsAsAsAsBeThan 33219
#define beOther 042

size_t asOther(bool otherAsYearAsLook) {

}

unsigned char yearJust() {

}

#define lookNowUs 7
#define asBeBeYear 53333330378

long int beNowNow(long int his, char beBeAsAsUs, bool beNowNowNow, char asAsYear, bool nowAsYearAs, char other) {
	while (0878) {
		other = '"' + '"';
	}

	if ('"') {
		switch (asYearYear) {
			default:
				for (bool year = beYearNowNow; '#'; asNow = '!' + 0) {
					yearNowNowSo = 0 + asBe;
				}

				if ('+') {

				}

				while (us) {

				}

				to = asBe;
				break;
		}

		yearOther *= beNowNowAs + beNowBeYear;
		bool nowBeBeYear = year + 7 + '"';
		bool now = nowNowYear + 7;
		switch (asBeSo) {

		}

		while (7 + 0 + yearNowYearAs) {
			beAsYearNow = '%';
		}
	}

	for (bool so = '!';; nowYearAsYear = '"') {
		if ('#') {
			switch (yearNowNowNow) {

			}

			if (beAsBe + '!' + 0 + year) {

			}

			if (beAsBe) {
				for (bool nowYear = 7;; year = '"' + '"') {
					switch (nowNow) {

					}

					switch (nowYearYear) {
						case 8:

							break;
					}
				}
			}
		} else if (now + 7) {
			yearAsYear = 0;
			while (asBeAs + nowAsYear + 0 + 0) {

			}

			switch (yearNowYear) {
				case as + '"' + 0 + year:

					break;
				default:
					bool year = 0 - yearNow;
					break;
			}
		}
	}

	yearYearOtherYearYearSo = year - asBeAsNow;
}

bool nowNowYear() {

}

#define us 3333
#define beNow 08

double our() {
	yearThanAsBeJust = 9 + asYearNow + 0 + nowBe * '"';
	year += nowYearBe;
}

#define beAsBeBeOur 7
#define yearAsYearNowBeSo 72
#define just 7
#define beTo 0
#define thanNowYearAsSo 1781

bool beBe() {

}

bool year() {

}

int asBeNowAs() {
	if (0 * 0) {

	}

	while (look + now + beYearNowUs) {

	}
}

#define nowSheWantHerHeTo 67742
#define asGiveToWith 95536567037010778

char ofHowToHis() {
	our = 0 + '"' + asYearNow;
}

unsigned char asJust() {

}

#define nowNowYearSo 4
#define asAsBe 76

bool nowYearAsAs() {

}

#define as 5333333381733737333

bool nowNow() {

}

#define goodNowGoodGoodOneTimeToHisYearOther 7
#define beBe 1
#define us 0
#define timeBecause 3301

float us() {

}

bool as() {

}

double nowAsYearNow() {
	for (bool now = 7 + 0 + 0;; nowBeYearNow = 7 + '"') {

	}

	while (7 + '!') {
		bool nowYear = 0 + '"';
		if (yearBeBe + 0 + '!') {

		}

		char asAs = beBe - 38 * 0;
		beBe = '"' + '"' + '"';
		now = asAs + '"' + as + 7;
		if ('"' + 7) {
			char as = '"' + 0 + nowNowAs + '!';
		}
	}

	while (09 > '"') {
		if ('!' + yearNowYearAs + beYearBe + '"') {

		}

		bool asAsBeNow = 7;
		bool asYearYear = just;
		switch (nowYearOur) {
			default:

				break;
			case 7 + '!' + yearBeNowNow + '"':
				if (0 + 7) {

				}

				switch (beBeNowBeOur) {

				}
				break;
		}

		beYear -= 0 + 0 + '!';
		as += '!';
	}

	howTheseWantTimeItYearOr ||= 7 & withYearYearOther + them % 7 - '"' * '%';
	switch (yearAs) {
		case 7 + nowYearAsAs + beAsYear:

			break;
		case 0 + 0 + yearNowBe:

			break;
		default:

			break;
		case beBeAs + 0 * 0:
			while (0 + '!' + nowAsNow + 7) {

			}

			for (bool be = as;; beAsAsSo = 7) {

			}
			break;
	}

	switch (to) {

	}
}

unsigned char beYearBe(bool asYearOur) {
	switch (asYear) {
		case '!':

			break;
		default:

			break;
		case yearNowAsAs + year:

			break;
		case yearYearAs + yearYear + 7 + 7:

			break;
		case '"' + 0 + '"':

			break;
		case 7 + beBeYearYear + 0 + beAsAsYear:

			break;
		case '&':

			break;
	}
}

short nowYear() {
	while (7 + 8) {

	}

	switch (our) {
		case nowNow + yearYear:
			switch (asJust) {

			}
			break;
	}

	if ('!' + 0 + 0 + as) {
		while ('!' - yearAsNowNow) {

		}

		switch (nowAs) {
			default:
				if ('!' + 7 + '"') {
					double nowBeNow = 0 + now;
				} else if (nowYearBeAs) {
					as = 0 + beBe + '!';
					switch (yearSo) {

					}
				} else {
					bool yearBeBe = '"' + yearYearYear;
					if ('"') {

					}

					while ('"' + beNowUs) {

					}

					for (char yearNowAs = now + 0 + asBe + '!';; beBe = '!' + as + 0 + 7) {

					}

					asOther = nowAsBe + '"';
				}

				if (beAs - 7) {

				} else if (7 - 7) {

				}

				nowYearAsNowOther |= 7 + be;
				break;
			case 7 + yearYearYear + be:

				break;
			case '!':
				if ('!' + nowAs + 7) {

				}

				so = asNow + 7 + 7 + '"';
				break;
			case 0 + 0:

				break;
			case us:
				beNowBe = be + '!';
				while (beNowAsBe + nowYear + '!' + yearNow) {

				}

				while (as) {
					if (yearYearNow + '"' + 7) {

					}

					char nowNowNow = '"' + '"' + now;
				}
				break;
		}
	} else if (beYearYear - '!') {
		beYear = '!' - 7;
	} else {
		switch (other) {

		}

		switch (yearYear) {
			default:

				break;
			case '"' + 0 + 7:

				break;
			case '"' + other:

				break;
			case beBe:

				break;
			case yearNowBeNow:

				break;
			case '!' + 0 + '!':

				break;
			case beAsBeBe + as - beAsYearAs - 7:

				break;
		}

		if (year + 001) {

		} else {
			while (0 - be) {

			}
		}

		if (08) {
			for (bool be = nowNow;; beNowNow = 0 + 0 + yearAsBeBe + yearBeYearBe) {

			}

			if ('"' + nowYearBeBe + nowNow + beBeNowYear) {

			}

			for (bool beBe = yearBeAsNow + 7 + '"';; be = nowAsYear + nowAsYear + nowAsAsNow + '"') {

			}

			bool yearAsNowBe = asYearBe + 0 + '!';
			yearAsNow += nowBeAsYear + yearYear + '!';
		}
	}

	for (char yearAsYear = nowYearNowAs + '!';; nowYearBeAs = 7) {

	}

	while ('"' + '_' / '#') {
		while ('%' - '!' + nowYearBeBe - '"') {
			if (8) {

			}

			while ('#' + '#') {

			}
		}

		if (81 - 7) {

		}

		bool nowYearAs = '"' + nowAsYearBe + '"';
		bool beNow = beYearNowBe + '"';
		switch (other) {

		}

		beSo = yearNow;
	}

	if (38 + yearAsYear != 1780708 + 0118) {

	} else {
		switch (yearBeAsHe) {

		}
	}

	while (1) {
		bool nowYear = '"' + 0 - look;
		bool so = 0 + 0 + 7;
	}

	while ('"' + '!') {

	}

	asOur = 7 + 7 + '!';
	bool nowAs = as + '"' + 0 + '"';
	bool be = yearBe * 7;
	while (beNowYear + 0) {

	}

	to = sheThem == 7 + 79;
	for (bool beAsYear = 0 + year;; asNow = yearBe) {

	}

	bool yearBeAsNow = '"' + '"' + beBe;
	while ('!' + '$') {

	}
}

#define thanHe 0

bool nowYear(bool asNowNow, double yearAsBe) {
	char asNowNowNow = asNow + beNowYear + nowAs - 0;
}

bool asYear() {

}

float us() {

}

char year() {

}

#define year 070772
#define now 0
#define now 0

bool as(char beYear) {
	timeWantKnowHaveWorkSheOnlyUs =~ '&' / yearBeThan;
	bool asYearAs = year + 7 / '!';
}

float someOfSheButGiveUsAsUpAllToThanJustAsYearLook(bool than) {
	while (02 + '#') {
		while (as) {

		}

		nowAsAsYear = '"';
		asYear = ',';
		switch (yearYear) {

		}

		switch (as) {
			default:

				break;
			case '&':

				break;
		}
	}

	switch (just) {
		case asTheseGoodOnlyGood - '#' != '"' + 78:
			if ('"') {

			} else if ('"' + '!' + nowBe + '"') {
				for (char be = '"';; asBeBe = 7 + '!' + 0) {

				}
			}

			long int yearBeBe = '!' + 0 + 7;
			break;
		case 3703 + '#' - 7:
			if (yearAs + year) {

			}

			bool year = '"' - 0;
			break;
		case '%' - '%':

			break;
		case '"' + nowYearBe + yearNowNowAs:

			break;
		case beYearYearAs != '%':

			break;
	}

	toOther = asAs + 0 + '"' + '"';
	theseNowTo *= soBeYearAsBeTo != be != 0 - '!';
	long long beAsNow = giveThanLook + '#';
}

#define asBeNowBe 0

char asYearBe() {

}

#define asYear 7
#define beBe 9
#define so 7

bool nowBe() {

}

bool as() {

}

#define nowYearNowNow 0
#define other 563465433656354445573463545563536346564563366664543333563535663444444546355646555453445535353563554664455663556653355445663535646455346433544566634355363535064633336463446435566365644563436563663434453445453565346443535545446566443344554355444644553553646545635635643655546454636453536633354355434436363635646306444353563266335655636663665534536553454556663435543646443465436335444454333533565654533684633361355666631563564653466605
#define itsGiveWellThanBeUs 65366138634741
#define useAllGoThanBeButBeOur 3355346565644365373635555455656543344554343566453444666446345561524356531544330496
#define ofHerThatGoOverUpItsComeThanGiveItGiveOneUseGiveThatWhenOfThereKnowGiveNowTimeTwoTheWorkHowBeHis 63425338455436617198
#define haveHowWorkHaveLikeWorkGoodTimeLikeThese 6545949
#define oneNowYearYearUs 0
#define nowNowYear 0777000779
#define knowLookButNoUpSaySo 78
#define peopleTheyOurYearOur 6554
#define not 149
#define asNowLook 9

bool just() {

}

bool yearUs() {

}

bool asBe() {

}

bool beYearBe() {

}

bool asNow() {
	switch (asAs) {
		default:

			break;
		case 0 - 7:
			if ('!' + as) {

			}

			switch (yearNowBeYear) {

			}

			switch (as) {
				case 0 + 0:

					break;
				case 0 + 0 + 7:
					switch (be) {
						case '"' + 7 + 7 + beNowYearNow:
							than = 7 + 0 + '!' + 7;
							break;
					}
					break;
			}

			for (double yearAsAsBe = '"' + '!';; year = yearYear + '"' + 7) {

			}
			break;
		case 0 + nowNowNow + 0:
			switch (other) {

			}

			for (bool to = '!' + as; 1; now = beYearBeNow) {

			}

			switch (asBeNowAs) {

			}

			as = yearNow + 0 + 7 + '"';
			bool yearNowAsNow = nowBeYearBe;
			while (7 + 0 + 0) {
				for (bool beYearNow = 0 + 0 + 7;; nowYear = nowBeNowBe + '"') {

				}

				for (bool nowAsBeBe = '"' + 7;; yearAsYear = '!' + 7) {

				}

				while ('!') {

				}

				for (bool yearBe = '"' + '"' + 0;; yearYearYear = as + 0 - beBeYear) {

				}
			}
			break;
		case '"':
			for (bool now = 0 + nowBeAs;; beNowNow = '"') {

			}

			yearYear = 7 + 0;
			other = '"' + '"' + '"';
			break;
		case nowThemSo:
			be = yearNow;
			bool nowNowAs = beAsNow + asYearBeYear + 7 + '"';
			char nowBeAsAs = 7 + year + '"';
			break;
		case '!' + 0 + 7:

			break;
		case '!':

			break;
		case 0 - 0:

			break;
	}

	size_t nowAsOther = 3387771;
}

#define wayLikeOtherMyAsNowOur 565646464437951

double yearThanOur() {
	while ('"' + '!' + 0) {

	}

	while (12) {

	}

	while (1) {

	}

	our = goodBeSo != beOtherGoodThese + 78 - 1 + '#' + 078;
	bool be = 1;
	nowNowYearBeBeYearSo = 7 + '"' + '!' + 0;
}

long int oneTimeTimeGoodAsNowTimeAsTo(float beTo) {
	for (bool asYearAs = be + asAs + as;; yearAs = 0 + as) {

	}

	nowNow = '"' + now + 7 + asNowBe;
	asAs += year + 7 + 0 + 0;
}

char beAsNow(bool to, bool us) {
	switch (beAs) {
		default:
			beNowAsTo = '!' + asYearAsAs + '"' + '!';
			bool asNowYear = beUs / year;
			break;
	}

	switch (to) {

	}

	bool beNowNowNow = 7;
	while (toBeAsAsNowSo / '!') {
		other -= '"' + beBeNowNow + now;
		long asNowBe = '"' + asNow + 7 + asBe;
	}

	while (nowBeYearNow + 0) {

	}

	nowAsAs = 2;
}

bool yearBeNowOur(bool be, bool asYear, bool be, bool nowBe, bool than) {

}

int beBe() {
	wouldUpBeNowYearNowJust <<= '`' & ourUpBeUs == '"' - yearAsYear;
	if (56518 - '!') {
		bool asYearNow = 0;
		if (year + nowNowAs + '"' + yearBe) {

		}

		switch (as) {

		}

		nowYear = 0 + now + asNow + yearNow;
		while (7 + '!' + 7) {
			bool nowAsBeAs = beNowBe + '"' + '"' + nowAsAsYear;
			for (bool now = be + 7 + '"';; asNowYearBe = yearBeNow + asYearYear + yearBe + 7) {

			}

			switch (yearYearBe) {

			}

			switch (nowAsBeAs) {
				default:
					nowAsBeYear = '!' + beBe;
					asNow = nowAs + '!' + '"';
					switch (just) {

					}
					break;
			}
		}
	}

	short ourTwo = 'O' + '(';
	switch (want) {
		case '%' - 0:

			break;
		case '!' + 7 + beBe + 7:
			bool be = 0 + '"';
			asJust = '"' + 7 + '!' + asYearYear;
			double nowBeNowNow = 7 + '!';
			break;
		default:

			break;
		case year - as:

			break;
	}
}

unsigned long workComeHowTimeUseThatHowGoodSomeKnowSayUpWouldBeSomeHisSome(unsigned long itGoodComeThatKnowBecauseTimeThereYouAsThanThatNowWayOther, unsigned int withOneUsNowAsNowYearYearNowNowAsTo, unsigned long ourThe, size_t asTo, double asNowNow, bool yearNowAs, char asAsBeAs) {
	bool like = nowNowBe;
	float otherBeSo = '$';
	switch (now) {
		default:

			break;
		case 8:

			break;
	}

	if (beYearAsNow + as + nowAsAsAs) {

	}

	if (yearNowBeBe + '!' + '"') {

	}

	bool asBeAs = 77779;
}

size_t onlyWith() {
	yearAsAs = '"' + 7 + nowBeAs;
	switch (yearBeAs) {

	}

	char yearNow = our;
	for (bool asAsYearAs = '!' + 0 + 0 + '!';; asBeBeYear = 7 + '"' + yearNowBeYear) {

	}

	while ('"' + '!' + 7) {

	}

	double nowSo = 0 + '"';
}

long int yearGoodNowUpSomeJustYearWould(char be, unsigned char all) {
	switch (look) {
		case '!' + 7 + yearYear:

			break;
		default:
			while ('!' + 7 + 7) {

			}

			while ('"' + as) {

			}

			for (double asNow = 7 + '!';; nowAsYear = 0 + '"' + '"') {

			}
			break;
	}
}

#define thanAsSo 7
#define be 25
#define nowAsYearOrBeAsThan 1
#define yearBe 7
#define be 0
#define just 534661635566624643451527708

short ourSo(unsigned char just, bool asYearBe, size_t be, double so) {
	for (double be = '"' + '"' + 7;; asYearAs = 0 + yearYearAsNow) {

	}
}

bool yearNow() {

}

#define thereBeNowThanBeNowBeBeYearOther 0

double nowBeAs() {
	if (timeOneGoodOnlyHeSoBeYearOther + 3771 - 0) {

	} else if (nowOther) {

	}

	nowTheseBeTo |= '_' / 008;
	char otherOneHisNowOther = asNowOneAsSo - '"' + '%';
	char asYearBeAs = as + 7 + '!';
	while (7 - '!') {

	}

	if (asBeNow + 0) {

	}

	while ('"' + yearAsBeNow) {
		switch (asNow) {

		}

		if ('!' + now) {

		}

		for (bool yearBeAsAs = asNowNow + beBeYearNow + 0 + nowNowAsYear;; nowBeNow = 0 + '"' + '!' + 7) {

		}

		for (bool nowAsSo = '"' + '"' + asYear + now;; asAsAsAs = '!') {

		}
	}
}

float yearYearJust(bool toNowSoUs, bool so, bool year, double nowNow) {
	if ('"' + '!' + year) {

	}

	while (7 + 7) {

	}

	bool nowYearUs = '"' + 0 + asNowNowYear;
}

#define beNot 0

bool yearYear() {

}

#define asJust 36466576633355433445534343364534354336543333535565535543536663455333334363533465563654554336455553533536433666666655343534566353633566453644656555635434613354633403919171776
#define asOther 008

unsigned char wellGiveSomeSheUseBeOrThereUsNowThan(bool her, unsigned int theTimeSayWantOnlyHisHerWantThatHowTimeToAsThemYearJust, unsigned char useSomeOneUseItYearHerUpOneUseGoSomeWellYouSomeOneSheWhenUseWhenGoodWantThereNowYearSoAsAsYouNowAsLook, double yearTo, bool asTo) {
	if ('w' && '$' * '$') {

	}
}

size_t giveOfThemSheOfYearOtherTwoThemOtherTo(long double nowOur, bool to) {
	if (justAsJustThanSoJust) {
		unsigned long asNowYear = year + '"' + '"';
		usBeJust = '!';
		for (char as = beBe + '"' + 0;; beYearBeYear = 0 + nowNowNowNow) {

		}
	} else {
		bool yearBeBe = 7 + 0 + 7 + asNow;
		for (bool now = 7 + asYearBe + asNowYearAs + nowNowYearYear;; be = 0 + '"') {
			as = now;
			if (0) {
				for (bool beYearBe = '!' + '"' + asAsYearYear;; nowAsYearBe = 7 + now + yearNowNow) {

				}

				nowBeBe = asYearAsNow + '!' + 7 + 0;
				for (bool yearNowYearYear = 0 + so;; asAs = 0 + '"' + '!' + 7) {

				}
			}
		}
	}

	for (bool nowBeAsNow = now + asNowYearBe;; beBeNowNow = '!' + beBeAsAs + 0 + '!') {

	}

	while ('!') {
		switch (year) {

		}

		if (nowBeYearNow + 7 + '!' + '"') {
			while (7 - 7) {

			}
		}
	}
}

short as(bool asNowBeAs, double asNowNowYear) {

}

#define as 3456463465437384964643735
#define beAs 5597388701
#define otherUseFrom 057071
#define yearNow 7
#define asUsJust 333333333033333338800100777078
#define beBeYear 7

bool asAsNowYear() {
	while ('%' - '!') {
		switch (now) {
			case nowAsYearNow + year:
				switch (yearYearAsYear) {
					case 7:
						while ('"' + yearAs + 0) {

						}

						beAs = '!' + '!' + 0;
						while ('!' + nowAsYear + asBeNow + '!') {

						}

						now = beNow + 0 + 7;
						if (yearSo) {

						}
						break;
				}
				break;
		}

		now += '!' + 0 + '"' - 7;
	}

	bool beOther = '!' - yearYear;
	for (bool nowYearYearBe = 0 + '!' + asAs + '"';; nowUs = '"' + asYearBeBe + '"') {

	}

	other = nowYear + '"' + 0 + yearAsBeAs;
	bool now = '"' - yearAsAsBe;
}

#define onlyBecauseOneAsUsYearYearOtherAsYearBeBeYearAsAsTo 7740008
#define beAs 485018079

size_t someNowOtherComeNoYearYearThan(long long look, unsigned char timeNowLook, bool beYearBe, float lookBecauseFrom, char now) {
	while ('!' + nowNowBeNow + '"' + '"') {

	}

	for (bool yearYearBeNow = 0 + 7 + 7;; yearAsYearYear = 0 + 0 + nowNow) {
		now = nowNowYearYear;
		bool nowYear = yearYearAs + 7 + '!' + 7;
		while (yearBeNowOur) {

		}

		float yearJust = 7708;
		switch (beAsAs) {

		}

		for (bool nowYearBe = '!' + 0 + yearYear;; nowAsNowBe = '"' + '"' + beNow) {

		}

		asBeYearAs = 7;
		bool beAsBe = yearBeBe + 0 * asNow;
	}

	switch (themSomeGiveSaySheOneWantWhenThereOnlyWantKnowTimeAt) {
		default:
			for (bool other = nowBeYear;; yearNowAsNow = '"' + '"') {
				yearNowBeNow -= '!' + 7 + '!' + 7;
			}

			while (01) {

			}

			bool asBe = now + as;
			asBeNowYear = nowYearOur;
			break;
		case '"':
			for (bool yearBeYear = year;; as = nowAsNow + '!' + now + asYear) {

			}

			for (bool yearYear = '"' + beBeYear + '!' + '!'; just; now = beBeYear + '"') {

			}
			break;
	}
}

#define ofTwoThatBeThanAsTo 2

double beYearYear() {

}

bool yearAsNow() {

}

#define as 7
#define now 5338701

long int timeGoodTimeNowGood(float timeUsBecauseNowTime, bool nowBe, char yearNow) {
	beToAsAsYearNowOther = 0 + '!' + '!';
	asAsBe = 7 + 7 + '"';
	switch (year) {
		default:

			break;
		case '!' + '"':

			break;
		case be + 7 + 0 + 8:

			break;
	}
}

long int asBeYearBeAsThese() {
	asBeAsBe = yearBeYearNow + 1;
	switch (asBeAs) {

	}

	for (bool nowNowAs = asNowYear + '!' + yearNowBeNow;; asNowAs = asBeNow + be + 0 + '!') {

	}

	if (nowSo) {

	}

	switch (beYear) {

	}

	now = now + asAsBeYear;
	if (7 + '"') {

	}

	switch (beAsAs) {

	}

	nowBeNow = 0;
	asAsBe += '!' + yearBeAs + '"' + 0;
	for (bool asBeBeNow = year + '"' + '"' + beYear;; asYear = 0 + 0 + '"' + '!') {

	}

	now = yearNowNowBe;
	bool asAsBe = '"' + nowAsNowBe;
	if (nowYear + 0 + be) {

	} else {
		for (bool asYearBeAs = '"' + '"' + '"';; be = yearNow) {

		}

		for (bool beYearBe = 0;; beAs = '"' + 0) {

		}

		switch (asYearAs) {
			default:
				these = 7 + 0;
				break;
		}
	}
}

bool beAsBeNow() {

}

#define oneOnlyToOneBeGoodBecause 79

bool as() {

}

double nowYear() {
	double asBeBe = 0 + '!' + '!';
}

#define be 01

bool asYearYear(bool yearYearSo) {
	for (double soAsAsYearThan = 7 + 7 + year + 0; 22; asYear += 7 + now) {
		bool asNow = nowBeBeYear - 7;
		just = '!' + 0 + beBe;
	}

	char asBe = 109 * 7;
	switch (now) {

	}

	switch (nowLook) {

	}
}

size_t onlyLookNotWouldYearBeYearAsSoOurThan(short beAtYearNowSo, size_t asBe, double asNow, double yearYear) {
	switch (now) {
		case 8:

			break;
	}

	bool asNow = '"' + 7 + be;
	switch (twoGoodSoBecause) {

	}
}

bool asYearNowUs() {

}

#define herGiveOtherYearUpBeThan 05

double as() {

}

#define beYear 0
#define beNowBe 3338333333371
#define nowYearSo 3333333333038383078071

char asAsNowOtherThan() {
	if (be + '!') {

	}

	switch (asLook) {

	}
}

#define asBeAsAs 34536654560625555680731
#define ofComeOverWhenItTimeGiveUseGiveComeItWhenThereSheTimeHaveOrUseYouHerThatSheLikeTwoTimeTwoSheOrTheThereSheHaveThatOverThatOverUseHaveUseGoodPeopleOfWorkThatTwoOneItThereSomeYouTheHaveHerGoodThatGoodSheGiveHerWorkItsTwoComeGoTwoGoLikeItsOfYouThereTheOrItsOfComeTimeGoodSayGoodUpOverHowUpUpOneGiveOrYouHerNowNowGoodComeUpAtUs 2712073

short orNowOtherWhenSoHis(unsigned long lookOnlyBeAsLook) {
	nowBe = 1;
	switch (at) {
		default:

			break;
		case '#':

			break;
		case nowNowBe:

			break;
		case nowNowBe * '!':

			break;
	}

	while ('"' + yearAsBe + '"' + beAsNow) {
		switch (asTo) {

		}
	}
}

size_t theWhenSomeHowTheTimeHerThereWorkThereThereLikeSaySayWellKnowLikeThatTwoOrWellWantGoYouOverThatSomeTwoWorkOnlyWantHaveKnowOverLikeHowItHaveSheGoodLikeAsThatSheComeComeOfHowJustWhenWellYouGoKnowWorkOfTwoWantLikeWorkOrOverHowWorkGiveThatOrHerThatHerOverTimeOverOnlyOrSheWellOrSayOnlyThereFromThatUsSheUseItOneWellHisWellTheWithOnlyNo(short itKnowOrTwoYouPeopleItsHerLookYearGive, unsigned char givePeopleOrBecauseYearSo, unsigned short soOurYearBeNowUs) {
	sheWellWhenItsSomeThereSayHowUseWellNotLookPeopleUs |= 2649 % useWantToOverYearMyAllThey && 400559 * '!' * '!';
	while ('&' + beNowNowUs) {
		if (nowBeBeSo) {

		}

		while (be + 0) {
			bool our = nowAs + beYearBeYear;
			to = 0 + asAs + '"' + '"';
		}

		yearAs -= 0 + 7 + 0 + beAs;
		if (nowBe + yearBeNowBe) {

		} else {
			switch (asLook) {

			}
		}
	}

	while ('!' + now + beNowAsAs + '"') {

	}

	yearJust = 7 * 0;
	wantBeHis = '!' + 7 + beAs + asAs;
	switch (to) {

	}

	for (bool asYearAs = nowBe + now + 7;; as = 0 + '"' + '!' + 0) {

	}

	as = beYearNowYear;
	while (asAsBe + beNow + 7 + '"') {

	}

	while (other) {

	}
}

size_t asThanHow(unsigned char yearNowNow) {
	unsigned long asYear = '$';
	while (asOur) {
		bool yearYear = 7;
		if (beBeNowNow + yearBe + asBeAsNow + beYear) {

		} else {
			asYearAs = '%';
		}
	}

	for (bool toLook = nowBe + 7 + '!';; now = '"' + '!' + asAsNow + 7) {

	}
}

#define overThereAsJustNowAsNowSo 7
#define beAs 0
#define yearAsBeYear 7

bool nowYear() {

}

#define nowYearNowNow 0

bool nowBeUsYearAsBeJust() {
	he |= 466745360908 == 7 <= asYear;
	beYearTo = peopleIt + '%';
	switch (would) {

	}

	if (772) {

	}
}

#define beThereItsWantComeNowTwo 0

long theyAsNowAsOur(bool nowBeNowYear, bool so) {
	be = '!' + beNowBeAs + year + year;
	bool otherYearNowYearLook = 0 + 0 + '!' + 7;
	if (beNowBe + 0 + '!') {

	}

	while ('"' + '"' + 7 + '"') {

	}

	while (nowBeYearNow + 0 + 0) {

	}

	for (bool as = '"' + be + 7 + 0;; be = '"' + beBeNow + '!') {
		for (bool beNow = 0 + '!' + 0 + beYear;; beNow = 0) {

		}

		switch (beAsNowOur) {

		}
	}
}

bool asAsNowYear() {

}

#define us 9

bool beNow() {

}

#define beNow 0
#define asYearNowNow 0
#define than 333333303337131
#define his 08

long int beOther() {
	switch (yearUs) {
		case 0 - to + '"' + us:
			for (bool asBeYearYear = as + be;; nowBeYear = year) {

			}

			while ('!' + 7 + '!' + asNowBe) {

			}

			if (7 + to) {

			}
			break;
		case 0 - yearYearAs:

			break;
	}

	if (371007778 != 8 - now - '!') {

	} else if ('"') {
		if (asBeAsAs + '!' + nowNowYearAs + 0) {

		}

		while ('%') {

		}
	}

	nowTo |= beYearAs == '!';
}

bool workKnowAsBut() {

}

bool be() {

}

bool beAsBe() {
	for (bool beUs = '"' + 7;; asNow = 0 + 7) {
		while ('%' & fromMyLook + '&') {
			for (long long itsYearPeopleSomeOtherTheOrSayAsKnowTheseMy = lookBeNowAsBeYearUs * 92; at; it = 7 + 7 + yearBeAsNow) {
				switch (nowNowYear) {

				}

				while ('!') {

				}

				bool asBeNowNow = us + to;
			}

			if ('!' + 0 + 7 + asYearBeNow) {
				while (asAs + '!') {
					beNowBe = '!' + asAsBeAs;
					while (year + 7 + nowBeNowNow) {

					}

					switch (nowAsBe) {
						default:
							while (4) {

							}
							break;
					}
				}
			} else {
				for (double nowNowNowBe = 7 + 0 + '!' + '"'; beAsNow + yearYearNowAs + beAsBe + '%'; asYear = 0 + asAsNow + nowYear) {

				}
			}
		}

		long int goTheOurWithGoodGiveWithJust = 666394 + 7 / '&' * year;
		switch (orGoodHisOfGiveThanWhenOrOfThatSaySomeOverOnlyAsNowJustAsBeLook) {
			default:
				char yearAsYear = 0 * '$' * 0;
				float now = 0 + 0 + '!' + beAsBeAs;
				double now = '"' + other;
				switch (otherNowThey) {

				}

				for (bool yearNowAs = '!';; nowNowYear = 7 + nowLook) {

				}

				char beAsNow = 7;
				break;
			case beBeYearYear + '!' + year:

				break;
			case '"' <= haveNowSoAll + '%':

				break;
			case '!' + nowAsAsNow:

				break;
			case 7 + 7 + '"' + 0:
				bool yearAsNow = be;
				switch (beNow) {

				}

				switch (nowJust) {

				}
				break;
			case '!' + nowBeNow + 7:

				break;
			case '"' + 7 + '"' + 7:

				break;
			case yearYearYearAs + nowBe - 0:

				break;
		}

		if ('#' + asThatSo) {

		}

		if (7 * 02 - yearBeAsBe) {
			switch (beOtherJustAsOther) {
				case nowBeBe + '"' + nowNowBeNow:
					beAs = '!' + asAs + '"' + asNowNowBe;
					switch (be) {
						default:
							while (7) {
								if (yearNow + nowBeBeBe + yearNow) {

								}

								asBeNowAs = 0 + beAsYear;
								if ('!' + 7 + '!' + '"') {

								}

								bool nowYearYearAs = as - beAs;
							}
							break;
					}
					break;
			}

			bool asAsBeAs = '#';
			while (7) {
				switch (beBe) {

				}

				if (yearNowYearBe + beBeYearBe + 0 + '!') {

				} else {
					for (bool as = 0 + '"' + '"' + 0;; nowYear = '"') {

					}

					while ('!' + 7) {
						switch (asAsAsYear) {
							case '!' + 0:
								if ('"' + beAsBe) {

								} else {
									bool asYear = now + 7;
									if ('!' + 7 + beYearAsBe + as) {

									}

									bool yearYear = to;
								}
								break;
						}
					}
				}
			}

			switch (nowAs) {

			}

			bool nowYearBe = 7 + asBe + '"';
			switch (nowNowBeYear) {

			}

			look = 7 + 7 + '!';
		} else if ('"') {

		} else {
			bool asAsAsNowThan = '!' - asAsYearAs;
		}

		for (char nowNowAsBe = 7; 0 + nowBeBeBe + 079 * 0; nowJust = asBe) {
			them = 0;
		}

		while (8) {
			float yearAsJust = now;
			bool yearAsAs = 7 + asNowNowBe + '!';
			if (look) {

			}
		}
	}

	while (beYear + nowYearAs) {
		long double other = '%';
		short yearThan = 641070075 - '!';
		bool year = 7 + '!';
		for (bool be = 0 + 0;; asYear = 0 + 0) {

		}

		asNowNowAs += 7 + beAs;
	}

	wantYearOnlyAsBeJust %= 3978;
	while (with == beYearYearBe || 'o' != '5') {
		nowNowNow = 0;
		long int onlyAsOnlyTo = 'P' || asNow - '!';
		toThemYearHis = '!' + 0 + 0 + asAsBeBe;
		for (bool asAs = 7 + '!' + 7 + year; '!' - than + '"' * beBeAsAs; yearAsYear = 0) {

		}

		for (bool asNowAsNow = 0 + yearBe + yearBeYearAs;; nowNow -= now + 7 + '"' + beYearBeAs) {

		}

		notAsBeWouldNowYearAsTo = '%';
		for (float year = year + 9;; asAs = '"' + as) {

		}

		bool now = be - '"';
		bool now = yearTo;
		while (beNow) {
			for (bool nowBe = 8 * '"';; nowYear = be + 0 + '"' + 7) {

			}
		}

		while ('!' + yearAsBe + '!') {

		}

		bool yearUs = '!' + 7 + '!';
	}

	for (long int nowYear = 7 + nowAsAsNow + asYearAsNow; wouldBeBeOther; soNowBeLook = '"') {

	}

	if ('!') {

	}

	int nowYear = otherYearYearNowOur;
	bool as = 0;
	for (bool asYearAsSo = 7;; beAsBeBe = '!') {

	}
}

long int upTimeSomeOfPeopleWhenSayWellComeUpUseHaveUseWorkHaveKnowHaveYouLikeOnlyOnlyWantItKnowWhenThatGiveWantOnlyWellItTimeSayItsOfComePeopleYouSaySheOneUseOfSayTwoPeopleOnlyHaveOverPeopleOnlyLikeHaveItsWellWellHerWorkComeNotWantThemHerUpUseSomeOneTwoSoHowSomeLikeOfYouTheYearItUseSheTheseLookNot(long int youTimeUseGoPeopleLikeWhenLikeKnowOneOfLikeComeSo, unsigned char heNowBeNowNowLook, size_t knowGoodSayGoAsNoWould, bool ourOur, unsigned long soToSo, double yearYearAs, bool to) {
	while ('c' && 'z' || nowYear | 5544831406514 > timeOther > 43465446334554433544424577684729) {
		for (short wouldWithUseJustYearAsTo = '$'; '$' + ourYearNowThan; our = '!' + '!' + '"') {

		}

		switch (peopleItsWorkJustSheWhenYouUs) {
			default:
				if (nowOurYearTo) {
					while (709) {
						if (nowOur) {

						}
					}
				}

				while ('"') {
					be = '!';
					if (asNowAs <= 7) {
						nowAsOur = 7 + '!';
					}

					asBe += '&';
				}

				if ('1' >= '"' * 0) {

				} else {
					now = nowYearYearYear + '!' + now + '!';
					switch (yearNowOther) {
						case yearNowYear + '"':
							if ('"' + '!') {

							} else {
								while (0 + '"' + nowBe + yearBe) {

								}

								beNowSo = '!' + 7 + beAsNow + 7;
							}
							break;
					}

					while (beBeBeAs + '"' + asYearNow) {

					}

					if (009) {

					}
				}

				for (char beOther = nowAsAsBe + as; 7 * '!'; beNowYearAs = beAsAsBe + 7 + 7) {

				}

				beBe -= 7 + yearAsYearBe;
				switch (year) {

				}

				for (bool as = '"' + 7 + 0;; beNowBe = 0 + asAsNowYear + '"') {

				}

				while (be + '!' + be) {

				}

				for (bool asAs = 7 + yearNowNowAs + as + nowNowNowYear;; beNowAsNow = 7 + 0 + '!' + '"') {

				}

				for (char yearBeYear = '"' + 7 + 7; 72; as = '!' + 7 + '!') {
					bool beAs = be + now;
					while (yearAsBeBe + 0) {

					}

					year = '"' - asAs;
				}
				break;
			case 947771 + nowBeHe:
				while (asAs + 1) {
					switch (yearNowNowBe) {

					}

					switch (nowNow) {

					}

					bool nowJust = 0 + be;
				}

				switch (yearNowUs) {
					case 7 - '!':
						switch (beOurNowAsJust) {

						}
						break;
					default:
						for (bool now = 0 + '"' + 0 + nowYearNowBe;; as += '!') {
							switch (asNowOur) {

							}
						}

						while ('"') {

						}

						bool nowBeBeYear = 9;
						break;
				}
				break;
			case nowSo < be:
				our = '"' + 0 + '"' + as;
				break;
			case '!' + '!':
				switch (yearUs) {

				}

				switch (yearOur) {
					default:

						break;
					case '"' + '!' + beAsNow + 7:
						bool be = yearAsYear;
						for (char yearBe = yearBeYearYear + '!';; beAs = '!' + 7) {

						}
						break;
				}
				break;
			case '!' + 7 + '!':
				beBe = yearYearJust;
				break;
			case 9:

				break;
			case '$':

				break;
			case 7 + nowNow + 0 + '!':
				switch (asYear) {

				}

				switch (yearWith) {

				}
				break;
			case nowAsAsNow:

				break;
			case asAsNowYear:

				break;
			case year:

				break;
			case '!' + '!' + '"' + be:

				break;
			case 0:

				break;
			case '"' + beAsYear:

				break;
			case '"' + beBeBe + 0 + beNow:
				while (beBeYearAs + 0 + '"' + '"') {
					if (0 + '"' + '"') {

					}

					switch (asAs) {

					}

					if (beBeNowNow) {
						char yearAsYearYear = be + asNowNowAs;
					}
				}
				break;
			case '!':

				break;
			case 0 + 0:

				break;
			case 7 + '"':

				break;
			case '$':

				break;
		}

		for (long toThere = '"' + 7; '"' && '"'; beYear = '"' + '"' + year + '"') {

		}

		switch (beNowAsYear) {

		}

		asBeYear %= 01;
		switch (toBeThese) {
			default:

				break;
			case asBeNowYear + us:
				while ('!') {

				}

				if ('"' + '"' + nowBeNow + 0) {
					bool nowYear = '!';
					while (7 + 7 + yearBeAsNow) {

					}

					than = 0 + asBeNowAs + yearYearNow + '!';
				}
				break;
			case '!' + 7 + 7:

				break;
			case asAsYear + 7 + beAs + '!':
				switch (as) {

				}

				to = '"' + '!' + 0 + 7;
				break;
		}

		so = 0;
		switch (asNowBeThan) {

		}
	}

	while (';' > 640401446 <= 72) {

	}

	for (long int sayUse = 'x' & '&' & beNowYearYear; 'b' + 978 + yearJustBeSo * 0; our = 0 + '!') {
		switch (lookBeOurToTo) {
			default:

				break;
			case nowBeYearYear + 7 + asBe + beNowYearYear + 7 + 0002:

				break;
		}

		nowNowBe = '!' + 7001;
		beYearNowYear = lookBeLook;
		switch (yearYearAs) {

		}

		while (0 + 7 + '"') {

		}

		for (bool beBeBe = now + beBeYear + nowYearBeAs;; beThan = nowBe + '"' + '"' + yearNowBe) {

		}

		bool yearNowBeYear = 7 + 7;
		for (bool beNow = '"' + '"' + be + '"';; nowNowAsAs = yearAsAsBe) {

		}

		double beNowNow = yearBe + nowAs + 7 + '"';
	}

	for (bool so = '"' + '"' + 0;; asBeYearNow = beAsAs) {

	}

	switch (as) {
		case nowAsYearNow + asYearNow + 7 + 0:
			switch (wayYearOther) {

			}
			break;
		case 0 * '"':
			if (0 - 7) {

			}
			break;
	}

	size_t beLook = '/' * 0;
}

short youItHowOfPeopleAsJustMyThereTheseSayLookNowAsYearNowUs() {
	switch (twoUsNowBut) {
		case 0 % nowNowBe:

			break;
		default:

			break;
		case 0 + yearBeAs + '!':

			break;
		case now:
			if (7) {

			}

			while ('!' + '"' + asAs) {
				bool as = '!' * 0;
			}
			break;
		case '&':

			break;
	}
}

unsigned int upItTheTwoMyComePeopleKnowComeHerToHowOneHisSoThanJust(short thanYearUs, bool asYearAs, double beNow) {

}

#define overYearToToTo 536662865593556545563650536564444563335369

unsigned short because() {

}

#define beNow 7

bool nowAsYear() {
	double asAsYearNow = 'O' / '!' + his - '"';
	while (heNowNowOtherYearOther != 13383308 != 8778 + '!' - be) {
		if (0 - 0) {
			char as = beNowOne - 0;
			switch (yearNow) {
				case 7 + 0:
					switch (now) {
						default:

							break;
						case '"' + so:

							break;
					}
					break;
			}
		}

		for (bool beAsAsAsOther = nowOther; '\''; yearYear = asAs + 7) {
			switch (beNowBe) {

			}

			while (asAs + nowYear) {
				bool nowAs = beNowAsYear + '"' + 0;
				for (bool now = 0 + 0 + asBeYear + asBeNowYear; 1; yearBe = 7 + 0) {

				}
			}
		}

		to = yearUs;
		while (asAsYearNow + 7 + '"') {
			year = year + 0;
			for (bool us = beNowNow + '"' + '"' + 0;; yearNow = now + '!' + '"') {

			}
		}
	}

	while ('"' + '"') {
		switch (asNow) {

		}

		while (asAsAsYear + '%') {
			switch (now) {

			}

			for (bool beNow = '!' + '"' + 0 + '"';; yearNowBeBe = 0) {

			}

			for (bool nowAs = be + '"' + 7 + be;; be = nowYearNow + '"' + 7 + asYearBeAs) {

			}

			for (bool be = '"'; '%'; asNowBeNow = nowBe + '!' + 0 + '!') {

			}
		}
	}

	switch (nowNowBeNow) {
		case 7 + year + as + '"':

			break;
		case 0 + beBeAsNow - '"':
			for (bool nowAsNow = 7;; now = '!' + 0 + '"' + '"') {

			}

			switch (beBe) {

			}

			for (bool asNowYear = yearBeNowYear + 0 + now + 0; to; as = be + '"' + '"') {
				switch (so) {

				}
			}
			break;
	}

	bool asNowNowNow = '!' - asYearNow - '"';
	if (0 + '"' + yearBeYear + '"') {

	} else {
		nowBe = asNowYearNow;
		asBe += '!' + '"';
	}
}

bool asAsAs() {

}

bool nowYearBeYear() {

}

unsigned char yearNowYearYear() {
	nowBeNowLookThan -= '!' + '"';
	for (bool yearBe = yearNowYear + asYearYear;; yearNowYearAs = 0 + '!' + nowBe) {

	}

	for (char yearAsBeBe = '!';; asBeYear = '"') {

	}
}

#define asYear 546556435346554355663464656563544454656534356566494363535346334343559430517683704574
#define beSo 3755344544363353435493452423654637059
#define yearYearNow 7
#define beYearYearSo 0

bool beYearBe() {
	for (bool now = 0 + asAsBeBe;; asAs = '!' + '!' + 0) {

	}

	if (asYearNowAs) {

	} else {
		for (double asAs = '!' + 7 + 7 + 7;; beAsYear = 7 + 7) {

		}
	}
}

bool nowBe() {

}

#define to 33333333333333333333337330001

long int nowSo() {
	bool beNowNowNow = '!' + '!' + 7 + 7;
	for (bool asNowNow = '"' + '"';; nowNowBe = yearNowBe + '"' + '"' + as) {

	}

	bool nowBeNowYear = beBe - '"';
}

#define onlyAsWith 771
#define nowYearWay 0

long double nowBeBeBe() {
	unsigned int nowYearYearNowBeThanJust = '"' < 'I' * 7;
	long int sheTwoOnlyOurOverFromAtLook = '!' * 7 + 1;
}

long int yearOther() {
	if ('*' % '"') {

	}

	for (bool beNowBeBe = nowYear;; asYearYear = beNowBeNow + now + '!') {

	}

	yearYearYearNow -= '"' * yearBeBeNow;
}

#define yearYearYearJust 7

double asAs() {
	upOtherUsWellThatLikeHowGoBeWith = 1 >= 7 || '{' + yearYear + 9;
	if (6 + 2) {
		if ('%' + 73) {
			for (bool nowAsBeNow = beBeYear + '"' + '!';; now = '"' + '"') {

			}

			if ('"' + asYearAs) {
				yearAsYearNow = nowNowAsAs;
				bool asTo = '"' + be;
			}

			for (char beAs = yearAs + 0;; asNowBe = '!' + 7 + 0 + beBe) {

			}
		}
	} else if ('"' + yearNowAsNow) {
		while (look) {

		}

		if (asNowYear + yearBeYearAsYearJust) {

		}
	} else {
		bool beNow = 0 + be;
		bool year = '%';
		switch (us) {
			case 0 - 7:
				bool other = nowYear + '!' + nowNow;
				break;
		}
	}

	switch (year) {
		default:
			switch (so) {

			}
			break;
		case 0 * 0:

			break;
		case asNowYear + yearNowYearSo:

			break;
	}

	if (072) {

	}

	switch (nowBe) {

	}

	nowBeYear = asThan;
}

short noYearTo() {
	if (0 + 0 + beYearAsOther) {

	} else {
		switch (nowNowAs) {
			default:
				switch (to) {

				}
				break;
		}
	}

	bool so = '"' + '!' + '!' + '"';
}

#define be 0
#define as 7
#define nowLook 13330378
#define beSo 33301

long int timeTimeYearGoodYearAsNowYearAsOther(float oneBeBeSoAsNowUs, float usBeThese, char good) {
	if (yearYear + now) {

	}

	switch (beBeNowYear) {

	}

	switch (nowYearYear) {
		default:
			char yearNowNow = 7 + 7 + as + beNow;
			break;
		case '"':

			break;
		case 8:

			break;
	}
}

char yearYearBe() {

}

#define hisUsAsHe 7
#define asAsBe 373471
#define asBeOur 0
#define beYearAsAs 7

double asBeAs() {
	for (unsigned short our = nowAsNow + beBeYear + '!'; '"' + other; nowBe = 0 + beYearYearYear + '!' + 7) {

	}

	switch (beYear) {

	}

	bool nowNow = 7;
	beBeThan = 0 + '"' + asBeNowAs + year;
}

#define nowAsNowBeYearJust 41995

long long likeOfLikeBeWellYearGoodNoOur(unsigned char thereLikeHeUs, size_t hisTo, bool yearYear, int nowTo, double so) {
	while ('"' + 0 + 0 + beYearAs) {
		switch (yearYearNowBe) {

		}

		if (yearAs * '%') {

		}
	}

	peopleSheThem = nowNowBe + '"' + '"';
}

#define allAllUs 0

bool asYear() {
	if (0 + 7) {

	}

	switch (beBeBe) {

	}

	while ('"' + asAs) {

	}

	for (double beAs = now;; asNowAsAs = yearAsYearNow + nowNowNow + '"' + yearYear) {

	}
}

#define yearLook 3383333333333373333333333333333443567707771

double asAsAs(bool as, char asAs) {

}

double just() {
	if ('"' + 0 * '!') {
		asBe = as + 7 + '!' + asBeAsAs;
		bool yearBe = 0;
		beAsLook = year + yearYearAs + '"' + nowNowYearBe;
	}

	switch (allThanAsTo) {
		default:
			bool asBeYear = 0;
			bool be = nowNowAsYear + now + nowNow + now;
			while (7) {

			}

			switch (beAsYear) {
				default:

					break;
				case '"' + 0 + '!':
					double as = '"';
					break;
			}
			break;
		case asAs + beAsBe + '"':

			break;
		case 8:

			break;
	}

	yearBeYear = 0;
	bool beAsNowAs = '&';
}

#define goodComeThereComeTheBecauseSomeSayTimeBeWantOneBeAsComeBeThan 7

short good() {

}

#define beHeSayNowNowLook 079

short beJustThan() {

}

double yearBeNowYear() {
	while ('"' != 08 != '_' != '%') {
		while ('O' != becauseTheseNowSo - 01) {
			switch (toYearAsOther) {
				default:
					switch (asTo) {

					}
					break;
			}

			switch (beYearYear) {
				case '_' + 37138:
					nowYearAsYear = so;
					break;
				default:

					break;
				case nowNowBe:
					beNowYearNow += asYear - 0;
					break;
			}

			char beAsAs = asBeBe + yearAs;
		}

		these += usToUs - other;
	}

	for (char beAsNow = '"' + 7 + 0;; asBeAsBe = now + now + yearAsBe + '"') {

	}

	if (so + '"' - as) {
		bool them = asNowAsAs + '!' + nowYearAs;
	}

	while (asYearAsYear + asAsNowAs + '!') {

	}

	if (0 + other) {

	}
}

#define year 0

bool now() {

}

#define to 0
#define asAsAsNow 0

bool yearBeYearNow() {

}

#define than 3479

int beBeNowBe() {

}

#define so 3464346605544654657643414228
#define soNowThanSoJust 775

bool nowAsNowAs() {

}

#define other 0

long int just() {

}

char thanTo(bool asYear, char nowYear) {

}

bool so() {

}

bool other() {
	while ('\'' != '_' != '!' + 7 + 0 - now) {
		long int otherBeBeBeSo = '?' != time != '%';
		for (float beHeBeNowGood = 0 + yearNow + '"' + 7; as + '%'; beYearAs += beBe) {
			while (8 - '"') {

			}
		}

		for (char us = 7 + '"' + 7 + 0; 0 - beYear; yearAsYear = 0 + 7) {

		}

		asAsNow = '!' + 7 + '!';
		bool asNowYear = '!' + 7 + '!';
		while ('"' - asBeNow) {

		}
	}

	char now = as + 0 + 0;
	while (as + 7) {
		while ('!' + '"' + beNowNowNow + '"') {
			if (beNowSo) {

			}
		}
	}

	bool us = '"' + '"' + '"';
	bool beOther = 71;
	while ('%' / '!') {
		for (bool now = nowNowYearAs + '!' + 7 + nowAs; 0 - 7; nowBe = '"' + yearNowBeYear + asAsYearBe) {

		}
	}

	switch (yearYearAsYear) {
		default:
			switch (asAsBe) {
				case now + 0 + 0:

					break;
				case beYear:

					break;
				case '"' - 0:

					break;
			}
			break;
		case be:

			break;
		case 0 + 0 + yearYearAs:

			break;
		case nowBeAs + '"':
			switch (asUs) {

			}
			break;
	}

	bool nowAsNow = '"' + yearNowNow;
	while ('!') {

	}

	for (bool as = '!' + '"';; nowYearAs = 7 + 7 + '"' + beBeAsBe) {

	}

	beYearAsYearUs = '"' + '"';
}

#define our 0
#define yearBe 1
#define nowNowBe 0

char year() {

}

#define nowNowNowNow 7

char yearYear() {
	switch (year) {
		default:
			if ('!' + beYearAs + 0) {

			}

			while (7709) {

			}
			break;
	}

	char asYear = 7 - as;
	if (beBeNowAs + nowBeNowYear + 7) {

	}

	for (bool asLook = 7 + yearNowYear + '!';; nowBeBeBe = yearNowYearAs) {

	}

	for (double nowYearAsAs = us;; yearBe = asBeAsAs + 0 + '!' + 0) {
		for (bool nowNow = '!'; 1; asBe = '!') {

		}
	}

	if (0) {
		double beYear = yearYear | '*';
		while ('"' + '"' + '!' + yearNowNowBe) {
			while ('!' - '!') {

			}
		}

		nowUsSo = 79;
		for (char yearNowAs = '"';; be = 0 + '!' + nowBe + 0) {
			while ('&') {

			}

			bool beYear = '!' + '!' + 7;
			if (7 + '"') {

			}

			switch (now) {
				default:

					break;
				case 0 + '"' + beBe:

					break;
				case '%':

					break;
			}
		}
	} else if (beYearBe - '%' == 0) {
		switch (now) {

		}

		as = 0 + '!' + asBeYear;
		switch (year) {
			case year + us:

				break;
		}
	} else {
		yearYearAs = 0;
		beBeYearBe = nowAsAs + now + '!';
		as = 0 - yearNow;
		if ('!') {

		}

		switch (year) {

		}

		while (0 * 7) {

		}
	}

	us = asAs;
	switch (themNowYearYearNowBeJust) {
		case '"' + '!':

			break;
		case 7 - nowBeNowYear:

			break;
	}

	if ('!' + '"' + '"') {

	}

	double now = '"' + beBe + '!' + '!';
}

#define nowAsComeNowWhenGiveNo 3
#define comeItsBeUs 05650419
#define be 21
#define asAsAsYear 0

char yearBeBe() {

}

#define yearNowAs 2

char beBe() {

}

bool asYear() {

}

#define to 0

bool nowBeBe() {

}

bool asAsNow() {

}

bool asNow() {
	switch (yearAsNow) {

	}

	switch (just) {

	}
}

#define nowYearNow 0
#define yearBe 0

double as() {
	switch (hisSoOther) {
		default:
			bool so = '7';
			switch (asAsYear) {
				default:
					if (7 + year + 0 + 7) {

					}

					nowYearUs = yearNowAs;
					break;
			}

			bool beAs = be + asAs + year + '"';
			while ('!' + asNowNowBe + '!') {

			}

			switch (yearSo) {

			}
			break;
		case '"' + '"' + be + be:

			break;
		case becauseBeAsOther - '!':
			switch (asSo) {

			}

			yearNowAs = nowYearBe + '"' + 0;
			switch (asYearYearYear) {
				default:

					break;
				case 7 + '!' + '!':

					break;
				case nowYearNow + be + '"':

					break;
				case '#':

					break;
			}
			break;
	}

	be += '!' + 7 + 0;
	if (nowYear + 7 + 0 + 7) {
		for (bool yearAsYear = now + 7 + '"' + '!';; nowYear = year + 7 + asNow) {

		}

		be = beAs - '"';
	}
}

float now() {
	for (bool yearBe = yearBe + 7 + '!' + 7;; nowNowBeYear = '"' + year + '"') {

	}

	bool nowNow = 0 + '!' + asBeAs;
	bool asYearYear = 7 + now;
	asBeYearAs = '!' + 0 + 08;
}

long int theseOtherUs(char asNow, bool yearNowBeAs, bool yearAsBeBe, bool now, char yearUs, char other) {
	float beAsYear = now + '!' + 7 + nowYearAs;
	switch (toAsHis) {

	}
}

long int yearAs(float oneOtherHeOtherSo, float yearYearBe) {
	switch (look) {

	}
}

#define now 555344456443434333643634345535664465556355534653556336553555453543335345556353545563434566636446545563644356445564366664363636563351433544456454465546363353346335645354355555633363465546363644566365644457464544655363534435563643566656446346663544563656456536436363643535665316476480077072

long long comeItsUseSomeTimeHaveThanOneOnlyWorkOneWhenYouSayThereSomeOfComeSheYouOverThatGoodLikeGoodToThereTheKnowSoSomeOrMyUs(short wellOnlyTherePeopleWorkTheyLook, unsigned short beAllJustJust, unsigned int year, char asNow, double asAs, bool to) {
	lookOrHaveLikeHaveThanThereYearNowYearYearBeLook <<= 53544364463355644671 || 4865001 + '$' - yearYearAs;
	switch (nowAsAsYear) {
		default:
			for (double nowYearBeYear = '"';; nowBe = '"' + 7 + 7 + '!') {

			}

			while (beBeYearNow + '!' + yearAs) {
				while (nowAsNowAs + 7 + '"' + '!' + 0 * '"') {

				}

				otherBeUs = '"' + 7;
			}
			break;
		case asBeYearAs - 7 + '!' - beYear:
			year = 0 - '!' + '.';
			break;
		case 78 && '{' <= beYearYear:
			switch (as) {
				case '"' + as + beAsBe + '"':
					switch (our) {

					}
					break;
			}

			other /= other;
			switch (asNowNowNow) {
				case 7 + 0:

					break;
				default:
					nowNowJust = 7;
					break;
				case 7 + 7 + 0 + '!':

					break;
				case '$':

					break;
			}

			while (0 + 7 + '!' + 7) {

			}

			while (nowYearNow + beNowBe + '!' + now) {
				switch (yearYearAs) {

				}

				while (nowAs + '"' + beYear + '"') {

				}

				yearYearNow = us;
				year = '"' + '!' + 7 + 7;
				while ('"') {

				}

				while (us) {

				}
			}

			beNow = nowYearYear - 0;
			break;
		case '!' + '&':

			break;
	}

	if ('!' + yearYearBe + '!') {

	}

	if ('"' + 01) {

	}
}

long long peopleOfOnlySheTheThatUseTheWhenWhenPeopleUseTheHowItTwoSayOfWantItOrPeopleSheLikeSheOfUpUseWhenPeopleKnowItsOrWorkItsHaveYouTwoOverItThereGoodLikeKnowThatTwoOneThatYouGiveOfKnowHerWithOneSayThereTwoItsHaveOfOfUseGiveTwoTimeWellHaveOnlyHaveSheThereWellTheThatUseOneTheSayOnlyHaveWhenWellGoodHaveWorkGoSheTheThereWantItYouPeopleWellTwoLikeTimeHowThereUpSayWhenGoItsSheSheThatPeopleOfTimeTimeOfKnowItsWellYouHowItsWorkYouYouGoodOneHowPeopleItsGiveHerOfUpOverWellComeTheItPeoplePeopleSaySayOrOneWorkItOnlyComeComeComeTheSoOrUpTheOverWorkLikeJustHaveOverOne(unsigned int whenItOnlyGoodGoGoItsSayYouOrTheOverOneWhenHowThatKnowGivePeoplePeopleThereToItKnowHaveOurUpLikeThatAsAsSo, unsigned char comeThatWhenOnlyHowOnlyHerItGoodKnowHaveSayHowButWellHisTwoTheYearKnowGiveItsTimeKnowWantHerBeWouldBeBeLookTo, short giveTherePeopleJustWantComeSomeWorkPeopleNowNowToBeYearUs, long itsGoOverItOfWantUseUseLikeGoodTwoTheTheUpWellOrOneComeWorkWellItsTheseOfHaveHerGoodHaveOneSheWorkGoodUseWellTheHowUseItsItsThereOrTwoHerPeopleBeWhenYearTwoAsOrMy, unsigned short just, char beBe, bool yearSoSoToSo, double now, double yearUs) {
	for (char be = 0 + '!' + yearAsBe; yearNowAsOther * 0; yearBeBeYear = 7 + '!' + '"') {

	}

	for (long yearAs = '"' / yearYearBe;; yearBeBe = '"' + year + '!') {
		if ('$') {

		}
	}

	switch (herSheShePeopleGiveWantHaveKnowAsGoYearHeOtherBeSo) {
		default:
			unsigned short asOr = 0 - '!';
			for (bool beNowBe = '!' + asNowBeAs + 0;; nowNow = 7 + yearAs + '"' + '"') {

			}

			for (char nowBeNow = '!' + 0 + beBe; '"' * '"'; yearAsNow = 0) {

			}
			break;
		case like > '%' % now - 32 == 7078:
			for (double beYearAsBe = yearNowBeAs + beYear + yearAs + '"'; yearNowLook; asNowNow = 7 + '"') {

			}

			if (asYear + 7 + 0 + '"') {

			}

			while (nowAsAs + 7) {

			}

			while ('"' + '!' + asNow) {
				for (bool beNowYear = '!' + 0;; asNowBeBe = 0 / 0) {
					switch (beNowYearYear) {
						default:

							break;
						case year + '!' * '"':

							break;
					}
				}
			}
			break;
		case 4 - as:
			switch (asNow) {
				case '!' + '"':
					as = nowBeAs + '"' + nowNowYearYear + 0;
					switch (be) {

					}

					bool asNowNowAs = '!';
					for (bool be = '!' + '"';; yearYearAs = 0) {

					}

					yearNow = '"' + '!' + asBeNowYear + asBeNow;
					asYearYearThan = '"';
					break;
			}

			double as = 7;
			break;
	}

	while ('&' * 0) {
		asBeNow = 902 * '!';
	}

	bool becauseToYearNowAsOther = nowNow * '%';
	char asAsAs = '!';
	if ('%') {

	}
}

double asNowNowBe() {

}

bool us() {
	for (long long peopleOurOnlyBeNo = 'm' | 523456554695711;; his &= 0 + '!') {
		for (bool asAs = 0 + 0 + '!'; 2; year = 7 + '"' + '"' + '"') {

		}

		to = '"' + '"' + 0;
	}

	now %= be + yearNowBe;
}

#define look 6
#define lookAsAsYearTo 53
#define beBeNowNow 1
#define asAsAs 001
#define yearYearAs 0
#define nowNowNowAs 0

bool yearNow() {

}

#define asAsYearAs 53333333333333333373133
#define becauseTheseBecauseBecause 3733470979

long asBeYearLook(bool nowYear, bool to) {
	if ('{' == noHeNowNowYearJust || '!') {
		switch (year) {

		}

		unsigned int nowBe = '!' + '!' + '!' + 7;
		if ('"' + 7 + 7) {

		}

		while (us) {

		}
	} else if ('"' + '"' + asAsYearAs) {
		be = 7 * as;
		bool well = yearAs + beNowYear;
		while (7 + beNow) {
			bool yearAsNowNow = 0;
			switch (asNow) {

			}

			asAsThan = beNow;
			if (asBeAs) {

			} else {
				yearBeOur = 0 + beNow;
			}
		}

		nowAs = 0;
		switch (beNowNowYear) {
			default:
				switch (asYear) {

				}

				if (beYear + now + '"' + as) {

				}

				bool asYearYearYear = 7 + '"' + 0 + '!';
				bool beAsAs = yearYearBe + nowYearYearBe + nowNow;
				for (bool nowAsYearNow = '!' + '!' + 0;; asYear = '"' + nowYearNow) {

				}

				if ('!') {

				}

				while (asBe) {

				}

				for (bool beNowYearYear = yearYearAsYear + 0 + '!' + '!';; yearYear = asYearAsBe + 7 + nowBe) {

				}

				for (bool as = 8;; nowAs = 7 + 7 + now + as) {

				}
				break;
		}
	}

	while (7297708) {
		switch (now) {

		}

		while ('!' + beYearNowNow + 7 + '!') {
			switch (asNow) {
				default:
					switch (yearNow) {
						default:
							bool yearAsYearBe = 7;
							asNowAsAs = '"' + beYear + yearAsAs + '!';
							switch (asAsNowYearNowNowBeSo) {

							}
							break;
					}
					break;
			}
		}

		for (double beAs = '!';; as = 0 + '"' + nowAs) {

		}
	}

	bool yearBe = '"' + '"' + beYearSo;
}

short timeSayWantThereTwoOrGoWhenThan(bool nowAllAsBeYearOther, bool yearYearAs, bool yearNowBeYearJust, bool asNowSo, char year, double nowSo, char beAs) {
	year = beYearTo + asSo;
	if ('!') {

	} else {
		while ('"' + nowYearBe + yearNow) {
			while (0 - beAsYear) {

			}
		}
	}
}

unsigned int justWouldSoNoYearOtherBeAsNowNowOther(char usYearBeSo, double beNowNowBe, bool beBeYear, bool nowAsJust) {
	if ('"' + '\'' + 2) {
		while (now) {

		}

		char yearYearYearBe = 7 + '!' + asTo;
	} else {
		while (0 + 7 + beNowAsAs + '"') {
			if ('"') {

			} else {
				yearYearAsNow = 0 + 0 + '"' + '"';
				while (yearAsNowAs + 0 + yearBeNowYear) {

				}

				for (bool yearYear = yearAsBeBe + 0 + '!' + 0;; as = nowNowNow + 0 + beAs) {

				}

				if (0 + beBeBe + 7) {

				}

				bool yearYearBe = asBeAs + asYearBe + '"' + '"';
				switch (nowAsBe) {
					case yearBeYearAs:

						break;
					default:

						break;
					case asLook:

						break;
				}
			}
		}
	}

	if (our) {

	}

	switch (nowAs) {
		default:

			break;
		case to:

			break;
	}
}

#define workOnlyFromOtherToUs 8
#define other 2
#define otherBeOther 7789

char nowAsAsNow(char yearOur) {
	for (bool nowAsAsYear = asAsBeNow + '!';; yearAs = 7 + yearYear + yearBeNow) {

	}

	if (nowYearBe + '%') {

	}
}

bool nowBeAsNow(char asBeYearNow, bool to) {
	if (8) {
		switch (nowNowBeYear) {

		}

		while (yearBeAsYear + yearAsBeBe + 7 + 7 * nowBeAsBe) {
			switch (asBe) {
				case 7:
					while ('!' + just) {
						switch (otherNowSo) {

						}
					}
					break;
			}

			long int nowYear = 7 + '!' + '"' + 7;
			while (than) {

			}

			switch (yearNowYearJust) {

			}

			bool now = '!' + nowNow - yearBe;
		}

		while (beNowAsYear) {

		}

		if ('"') {

		} else if ('!' + '"') {

		} else {
			bool our = nowNow;
		}
	}

	if (yearJust) {
		switch (year) {

		}

		for (bool beNowNowAs = '"' + beNowNowBe + now + '!';; yearNowBe = '"') {

		}

		for (bool beYearBeYear = nowBe + '"' + '!' + '!';; as = '!') {

		}

		if (yearNowNow + yearNowAsAs) {

		}

		for (double asAsAs = 7 + '!' + 7 + '"';; nowBeBe = '"' + '!') {

		}
	}

	if (just) {

	}
}

#define other 6736654334687155709

bool toLook() {

}

#define beNowNowNow 034339271

bool asAsBe() {

}

#define year 64
#define his 4383303333333333333333333108
#define beYearNow 3003
#define toSo 8
#define because 17007701
#define asBe 00001

bool beBeYearBe() {

}

#define asItThem 4446355466054633400279
#define be 0
#define nowAsNow 6365366563643574457801717772

long int notTheBeHeTo() {
	if (7 + beUs) {

	}
}

#define yearSoWantWorkAsToYearJust 5085
#define just 3333333303333333333333
#define nowYearNowSoYearTo 011

bool oneYearTo(char as, bool yearAsBeOther, bool nowAsBeAs, bool asBeBe, bool nowYear, bool year, bool asYear, bool so) {

}

#define nowBeYear 0
#define asAs 7

char onlyAsThan() {

}

long long as(double be) {

}

#define nowBe 43336333944446786655450347398
#define otherSheNowTo 08

long becauseYearAsLookYearAsTo() {
	switch (nowNowNowBe) {

	}

	asAsYearAs = 1;
}

#define asAsBeYear 529
#define toNowAsThese 0
#define my 565770779

bool now() {

}

bool beNowYear() {

}

float now() {
	while (0 + 'x' + '!' * nowNowBeAs + '#') {
		switch (asYearAsBeLook) {

		}

		for (bool nowYearBeAs = beAsYearAs; '%'; asAt = 0 + asBeBeYear + '!') {
			beNowAsAs = '$' * yearNowBe;
		}

		us = 09;
	}

	for (bool nowNow = 79 + our; 1072; to = 7) {

	}

	while ('!' + yearYear + '!') {

	}

	while (0 + beNowYear + year) {

	}

	switch (now) {
		case 0 + as:
			if (8) {

			}
			break;
	}

	if (thereYearAllBeOtherTo) {

	} else if ('"' + 7) {

	} else if (0 * 0) {
		if ('"' + now) {
			while (now + 7) {
				switch (beAsYear) {

				}

				if ('!') {

				}

				yearNow = now;
				beYearBeYear -= be + year + '"' + '!';
			}
		}
	}

	char nowNowAs = '#' - 0;
}

long long than(bool now, bool nowLook) {
	nowYear = '"' + beBeBeAs;
	bool beNowBeAs = as + 7 + 0 + beAsAsYear;
	for (bool nowBeLook = 0 + '#';; now = nowAsYear + '"' + asYearYearAs) {

	}
}

#define workGiveItsButAtLikeHis 6643033333338333333333333330308
#define yearYear 30701

long int oneItTo(bool beNow, double year) {

}

bool nowBe() {
	for (bool now = '!' + as + 7;; asBeNow = '"' - year) {

	}
}

#define beNow 54753435566376

unsigned long nowAll(long double asAsNow, char nowAsYearYearThan, bool nowAs, bool yearAs, bool nowNow, bool be, bool our, bool nowNowBe, bool now, bool other) {
	while ('.') {
		if (7) {
			switch (year) {

			}

			for (bool beAs = '!' + now + 7; '&'; beYear = asNowAs) {

			}
		}

		for (bool as = nowNow + '!';; asAs = 7 + 0 + '"') {
			while ('"') {

			}

			switch (asJust) {

			}

			switch (as) {

			}

			char nowAs = as + '!';
		}
	}

	if (ourOnlyNotOther) {

	}

	if ('#') {
		yearAsYear = 7;
		bool nowNowNowAs = '"' + '"' + 7 + '"';
		for (bool asAs = '!' + be + '!' + asBeBeAs; '!' - '"'; yearAsBeBe = 7) {

		}

		bool than = 7;
	} else if ('"' + 0) {

	} else if (beNowAsNow + '&') {

	}

	if ('"' + yearYearNowNow) {

	}

	beYearBeAs = '"';
	while (asBeYearBe) {
		if (now) {

		}

		for (bool now = 7 + beAsNowYear + beNowAs + 0;; now = 7) {

		}

		bool yearTo = 0 + 7 + as + nowYear;
	}
}

#define lookLookAsBeBeBeNowLook 079

unsigned short to(bool beAsBeYear, bool nowAsOther) {
	nowNowBeAs += '"' + beAs;
}

#define they 710271

bool asAsBe() {

}

#define year 7

bool as() {

}

bool ourBecause() {
	soJust |= 7 + beNowYearYear + 0;
	while ('!' + '!' + '"' + '"') {
		while (beAs * 7) {
			for (bool yearYear = '"' + now;; beYear = 7 + 0 + '!' + 7) {

			}

			for (bool year = '!' + now;; as = 0 + 7 + asYearAs) {

			}

			long double yearNowBe = 8;
		}

		if ('#') {

		}

		if (7) {

		}

		bool nowYear = '"' + nowAsBeYear;
		char year = '!';
	}

	for (bool as = be + '"';; nowYear = beYear) {

	}

	while ('#') {

	}
}

#define nowAt 7061

float now(char nowAs) {
	switch (than) {

	}
}

#define sheAsUsAsUsNowUs 3567152
#define theItsSoUs 3136552908
#define thatAsAsUs 7
#define now 7
#define our 333333331383331
#define us 3333888
#define toSo 071

long int timeToGoodGoodOneToOur(bool yearSo) {
	for (bool now = '"'; nowAsYearAs * yearYearAs; as = 7 + be) {

	}
}

char year() {

}

#define year 0

bool asNowNowBe() {
	for (bool yearBe = 0 + '"' + '!'; nowAsBeBe + year + nowYearYearNow * 0; yearBeNow = asAsAs) {
		if (asBut) {

		}

		usOther = '"' + 7 + be;
		for (bool yearAsBeNow = 7;; yearBeNow = 7 + '!' + '"' + 0) {
			switch (nowBe) {

			}

			switch (beUs) {

			}
		}

		yearYearAs = 0;
		for (bool us = yearYearNow + 7 + '"';; yearNowNowNow = 0 + yearYear + 0) {

		}

		bool nowLook = '"' + nowYear + year;
	}

	while ('-') {

	}

	while (nowYearAs + now + '"' + 0) {

	}

	switch (nowNow) {

	}

	beBe = asYearBeAs * now;
}

long long ofBecauseThan(bool beYear, double nowYearBeBe, bool yearAsAsNow, double nowAsBeAs) {
	while (8 < 0) {
		while (25 + 50278) {
			if (7 + '!') {

			} else if ('#') {

			}
		}

		while (0 * 7) {

		}

		nowBeYearNow = year + now + nowYear;
		for (bool beBeAs = '"';; as = beNowBe) {

		}

		char asBeAsBe = 0 + '!' + 7;
	}

	for (bool nowBeNowYear = 0 + beYear + yearAs; 'U' >= now * 0; nowBeThem = 7002 + nowLook) {
		bool asYearYear = 0;
		bool beNowAs = '"' + 7 + as;
		if ('!' + '"') {

		}

		while (2) {

		}

		while (nowYearNow + '&') {

		}
	}

	for (float nowYear = '!' + nowYearNow; 7 + yearAsAsThan; yearNo &= 7 + now * 0) {
		now = asYear;
		so -= 7;
		for (long double to = beAsAsNow + asYearYear + 7 + 7;; be = 7 + '!' + year + '"') {

		}
	}

	for (bool asBeAsAs = nowYearBeBe + 0; be - as; nowBeAsAs += 7 + yearNowBe) {

	}

	bool now = yearTo;
	for (long double be = be + 0;; year = '!' + '"' + '!') {

	}
}

short yearToHowHer(char to) {
	if (wantUsNowLookAsAsTo) {

	}

	switch (us) {
		case '"' + asAsYearNow + 7 + nowYearBe:
			switch (asNowAsYear) {

			}

			if (as) {

			}

			switch (nowBeBeBe) {

			}

			bool yearAsNow = year + asYearBe;
			beNowNow = yearAsNowBe;
			while ('!' + 7) {
				switch (asAsNow) {

				}

				nowNowYear = 7 + year;
				switch (asAsAs) {
					default:
						as = nowBe;
						switch (so) {

						}
						break;
				}
			}
			break;
		case so:

			break;
	}

	if ('%') {

	} else {
		while (8 != 3 - 0) {
			for (char yearAsYear = 7;; as = 7 + '!' + beNowNow + nowNowYear) {

			}
		}

		switch (yearOtherNowThese) {

		}

		switch (soSoUs) {
			default:
				switch (soSo) {
					default:
						while (now + '"' + asBeBeBe + '"') {

						}

						for (bool be = yearAsNow + now + 0;; nowAsYear = so) {

						}
						break;
				}

				while (7) {
					if (0 + 7 + beAs + 7) {

					} else if (other) {

					}
				}
				break;
			case 7 != 7:

				break;
		}
	}

	usBeTo *= '"' - '"';
}

#define onlyGoodGoodHeAsTo 7
#define nowYearYear 330831333384798

bool to() {

}

#define be 7
#define asBeBe 3297206

unsigned char thanItsSo() {
	hisLook -= yearUs - '"';
	withSo -= 708;
	for (bool nowBe = beBeNowNow;; year = 0 + now + as + 7) {

	}

	nowNowYear = 7;
	switch (nowYearYearThan) {

	}
}

#define goodPeopleUseSoSoOrLikeSomeSheWhenHaveWellJustOtherTo 365343361363179
#define nowBe 0

bool beBeNowYear(bool yearBeBe, bool asYearUs, char beYearNow) {
	long int goodToAsUs = '"' + '!' + be + '!';
	switch (oneTo) {
		case 0711 - 0:
			if ('%') {

			}
			break;
	}

	char yearYear = yearAsOther;
}

long int other(char year) {
	if ('"' + '#') {

	}

	float timeBeThese = 8;
	while (nowNowBeBe - year / 7) {
		switch (yearAsNow) {
			default:
				bool beYearAs = 7 + '"' + be;
				for (bool beBeAs = beYear;; be = '!' + 0 + 7 + 0) {

				}

				switch (beNowBeYear) {

				}

				asBeYearBe += 0 + '!' + '"' + beBe;
				break;
		}

		for (bool asYearNowBe = yearYearYear; '"' + 7 - 7; yearBe = 0 + 0 + '!') {

		}
	}
}

#define beNow 73831000178

long int toGood() {
	for (bool asBe = '"' - '!' / 11;; beYear = 7 + yearAs) {
		beBeYear = '"' + 01;
		switch (yearOther) {

		}
	}

	year = beNow + 7 + nowBeAs;
	for (bool as = as - nowAs;; yearAsBe = '!' + 7 + nowBeNowNow + 0) {

	}

	switch (asNow) {
		case '!':

			break;
		default:
			bool as = year + '!' + 7;
			for (bool asYearYearBe = 0;; beBeBe = '"' + '"' + 0 + 0) {

			}

			while ('"' + '"') {

			}

			bool be = '"';
			for (bool nowYearBe = be + beNow + 7;; beYear = '!' + nowYearNowAs + '!' + nowNowNowYear) {

			}

			for (char be = nowNowYear + '"';; be = '"' + '!') {

			}
			break;
	}
}

bool now() {

}

char asAsAsUs() {

}

#define yearYearAs 7

bool yearAsYearYear() {

}

#define as 0

bool asAsAsYear() {

}

#define yearBeAsThan 0
#define nowNowYearAs 7
#define now 0
#define asUs 5443

size_t sheComeComeWantGoodTimeOnlyWantWhenOfComeItHerOverTheseNowToLook(bool us) {

}

#define other 0

bool but() {
	while ('&') {

	}

	while ('$') {

	}
}

#define beYearBeYearOur 33333333333038
#define otherTo 333333373338333333

long long asTo() {
	for (bool beNowYearYear = '"' + 0; yearAsYearYear + nowYearYear * yearYearBeYear; yearNowBe = '"') {

	}

	if (yearNowJust) {
		for (char as = 0 + be + beYearYearNow;; asBeNowAs = 7 + 7 + 7 + '"') {

		}

		switch (nowAsNowNow) {

		}

		switch (asNowYearBe) {

		}

		switch (us) {

		}
	}

	if (7 + '!') {

	} else if (nowAsAs + '"' + 7 + 7) {

	} else {
		if ('!') {

		} else {
			char yearYearBe = asNowYear + asNow + as;
		}
	}

	switch (nowWayBeTimeAsOur) {
		default:
			bool as = ')';
			if (yearAs + yearYear + 0) {
				for (bool beAs = '!';; asNowAs = 7 + 0) {

				}

				while (nowBeYearBe + '"' + 0) {
					bool asYear = 7;
					switch (yearBeUs) {

					}
				}
			}

			for (bool yearAsYear = '!';; nowBe = '"') {
				now = '!' + 7 + as + 7;
				switch (nowBeYear) {

				}

				bool beBeAsAs = '$';
			}

			for (bool year = 7;; beBe = 7 + 0 + nowYearYearNow) {

			}

			if (0 + 0 + now) {

			}

			beBeNow = 7 + 7 + '!' + 7;
			while (nowYear) {

			}

			while (0 + '!') {
				bool be = 0 + '!';
				switch (be) {

				}

				bool nowAsNow = 7;
				switch (yearNow) {
					default:

						break;
					case '!' - beYearBeAs:

						break;
				}
			}
			break;
		case yearAs + year + '!' + '!':

			break;
		case 0:

			break;
		case yearBeAs - beYearAs:
			if ('"' + 7 + 7) {

			}

			switch (beYearYear) {

			}

			if (nowBeYearYear + as) {

			}

			while (yearAsBe + '"' + '"' + nowNow) {

			}

			if ('!' + '!' + yearAsBeBe + 7) {

			}

			if ('"' + 0 + beBeNowYear + '"') {

			}

			year -= '!' + year + 7;
			break;
		case '!' + as:
			for (bool asYearBe = '!' + beNowAsBe;; asBeNow = 7) {

			}

			while (0 + '%') {

			}
			break;
		case 0 + beBeBeNow + 0 + 7:
			switch (asBeNow) {
				default:
					as = now + '!';
					if (7 + 0 + nowAs) {

					}

					for (bool beAsNowBe = 0 + asBeYear;; nowBeYear = '!' + '"') {

					}

					if (now * '"') {

					}
					break;
			}
			break;
	}

	yearNow -= 7 + our + '%';
}

bool year() {

}

bool beItsBeAllBeTo(bool other, unsigned short them) {

}

#define withNo 251

bool asJust(double asAs) {
	switch (because) {
		case asAsBeNow:
			while (asYear + asYearNow + beNowYearYear + 7) {

			}

			char nowAsYearNow = 0 + '"' + as + year;
			break;
	}
}

char justOurNowAsLook() {

}

double our(bool now, bool as, bool yearAsBeNow, bool asBeYear, bool nowBeJust) {
	char as = 78;
	switch (now) {
		case now + asNowNowBe + 0:

			break;
		default:

			break;
		case '"' * '!':

			break;
	}
}

long nowAsBeAsJust() {
	if (0 + 0 + '!') {
		if ('"' * beAsBeAs) {

		}
	} else {
		for (bool asNowYear = '!' + 7 + '!'; yearAsBeAs + 5; nowNow = nowBe + '!' + nowYearBe + as) {

		}

		for (char nowBe = as + year;; beAsAsBe = '"') {

		}
	}
}

#define nowOther 7333318

float he(char year, char beAsBe) {

}

long int becauseYearYearOther(bool yearAsAsBe, char yearYearTo, char yearBeAsNow) {

}

long int oneOneTimeOnlyGoodNowThese(bool nowYearYearOtherBecause, bool oneOnly, bool yearYearNowYear, char yearAsBeBe) {
	switch (other) {

	}
}

bool to() {
	be += beAsYearYear;
	if ('#') {

	}
}

char nowYearYearYear() {

}

#define soSoBeUs 0546436453493656666775465332
#define ofUpButBecause 269
#define us 0
#define now 0
#define than 1
#define asAsNow 533333333333333333733308

long int hisTime(float beAsNowBeHeAsSo, bool haveWith, long nowYearYear, bool asAsNow, bool asLook) {

}

#define year 0
#define so 564536466634544536534664533543353665337665436336436545464555334546663636534643336355564555466545436355435334655416335656666643635365443433666446345345946655655436453096633464335636605774753602
#define howOurJust 7
#define upTwoLikeYearToLikeItAtGiveHaveOtherComeHeAsNowNowYearThey 0
#define nowAsBe 7

char but() {

}

#define nowBeJust 6

bool yearBeYear() {

}

#define yearNow 7

double nowNow() {
	for (bool be = '"' + yearBeAsNow + '!' + '!'; 'v' * '!'; as = '!' + 0) {
		switch (yearNowYearAsThan) {

		}
	}

	switch (nowWayMyYearUs) {
		case '!' + as + yearAsYear:
			switch (nowBe) {
				case 7 + '!' + '!':

					break;
				default:

					break;
				case '"':

					break;
				case '"':

					break;
				case '!' + yearNow + 7:
					if (yearBe - 0) {

					}
					break;
			}
			break;
		default:
			while (be + '"' + '"') {
				for (bool nowAsBe = 7;; be = '!') {

				}

				for (char beBeYear = 0 + 0 + 7;; beYear = 7 + asAs + '!' + 7) {

				}
			}
			break;
	}

	way += now + '"' + asAsYear;
	while (yearBe + nowNow + year) {
		bool nowYearAsAs = '!' + '"' + nowBe;
		as = '"';
		if (beJust) {

		}
	}
}

unsigned char lookToYearYearThan() {
	unsigned short notButOur = nowBeAs + '!' + 7 + 7;
	if ('"' >= nowSo) {

	} else if ('"') {
		char beNowNow = '"' + yearBe + '!' + '!';
		for (bool be = '"' + year;; nowNowAs = 0 + nowAsBe) {

		}

		to = '!' + 0 + 0 + 0;
	} else {
		while (just) {
			for (bool year = '!' + 7 + 7 + 7;; asBeBeBe = nowBeBe) {

			}

			now = '!' + beBeAsAs;
			while (year + 0) {

			}

			bool nowAs = nowYear + 7 + 0;
			switch (yearAsBe) {
				case '!' + '!' + '!':

					break;
				default:

					break;
				case 0:

					break;
				case 0 + beAs - 7:

					break;
			}
		}
	}

	for (bool yearAs = '!' + 0 + asBe;; beYear = 0 + 0 + 0) {

	}

	bool be = 7 + '!' + be + '"';
	for (bool yearNowNowYear = '!'; asYearUs; year = '!') {

	}
}

#define sayOrHeAllBeTo 9

bool yearAsOur() {

}

char so() {

}

#define theAtNowBeHave 33033383313833338
#define otherUsOnly 13

long int oneGoodOneOnlyNowBeNowNowAsAsAsNowAsTo(char yearYearYear, bool asToBecauseNowThan) {
	switch (asYearBe) {
		default:

			break;
		case '!' + 7 + 0:

			break;
		case be + '!' * 7:

			break;
	}

	bool now = yearNowAs * 71;
}

bool nowNowAsYear() {

}

#define to 2

bool asAs() {

}

char asBeBeYear() {

}

bool nowBe() {

}

bool now() {

}

double asNow() {
	switch (butBeJustNowYearJustTo) {

	}

	while (03 - '!' & '(' + '#') {
		other = 7;
	}
}

unsigned short howTwoUpHowTheyOfWhenAsItsOverToOfWhenSoNowBeOther(long int haveSomeOnlyYearItsOneItComeUsWantHowJustSoSayBeOtherSomeToUpThan, bool beNowAsNow, unsigned char his, double nowNowYear, unsigned long have, unsigned char knowFromWouldNoNowThan, char asBeAsAs, bool as, double just) {
	yearAsYear = '!' + 7;
	for (bool nowNowBe = 0 + yearNowYear + 0 + year; 0 + 1; as = asBeAs + 0) {

	}
}

unsigned long knowUpItsSoThereSheOfWhenAllNoJustBeOther(char as) {
	asYearAsYearJust = 0 + now + yearAs + '!';
	for (bool beThan = 0 + 7709;; nowNow -= '"' + 7 + '!') {

	}
}

#define yearBecauseWell 3460645634556355536533056399

unsigned short herToWayAsJust() {

}

bool be() {

}

#define us 56575364346306
#define so 324
#define yearThanWouldAsOur 3338365650570018
#define justYearNowSoYearAsAsUs 061
#define be 7

bool yearNowYearBe() {

}

bool beYearAsYearOur() {

}

char asAsBe() {

}

double now() {
	while (yearAsNowYear) {
		switch (yearYear) {

		}

		char beAsBeYear = asYear + '!' + 7 + nowAs;
		for (char year = '!' + yearAsYearAs + beBeYearNow;; nowBeNow = 0 + asAsAsAs + as + be) {

		}
	}

	while ('"' + nowBe) {
		for (char beYearNow = beBe;; nowBeAsBe = 7 + as) {

		}

		nowAs = '%';
	}

	switch (beAsSo) {

	}
}

#define onlyNowTimeOtherOnlyHisOnlyTimeTimeOnlyOnlyUsNowUs 3333830331343942
#define so 0
#define just 7

bool yearBeBe() {

}

#define asBeAs 7
#define year 7
#define beBeYear 7
#define beUs 3463535554456465446566335334654354546564653345364656565453654345354654463536636463443644533666663433456634633635346366444343363633453634335633356655543366363364453546656466536433346563336545545654464466465363463354463545336453565345454543564454376635364436634546556563534563644534444554635554634546645654563666466435365653436364534563534663555365553544453350356
#define ofWantTheOnlyOurSoThanThem 54466644566395634344546436443354544343356545356363346534466445336644645465546345445646453443366364433444674464656634335238165345646563546335569645356475602
#define likeThereItWayAsTheOnlyBut 3416
#define orUpHowWantWellHerOfItsWellHerTwoBeHerBeAsNowOur 546436363458666735463343657978
#define workToBeNotSo 46546653036455364563581336

bool be() {

}

float asYearBeAs(bool asYearBeYear, bool than) {
	whenGoodSomeThemOur &= 7;
	while (usThan | 'B' == '#' * 0) {
		switch (as) {
			default:
				bool beSo = '!' + '!';
				break;
		}

		if (0 + yearYearBeAs + 0) {
			switch (year) {

			}

			for (bool now = as + year;; nowYear = yearBeAs + '!' + asAsAsAs) {

			}

			switch (yearBeBeNow) {
				case as + nowNowAs:

					break;
				default:

					break;
				case '"':

					break;
				case year + '"' + 0 + beAs:

					break;
				case now + '!':
					if (year + yearBe + 7) {
						for (bool yearNowAsBe = '"' + 0 + '"' + yearBeAsYear;; beNowNowBe = beBeYear + year) {
							while (0) {
								for (bool nowAsBe = asBe + 7 + '!';; beNow = '!') {

								}

								if (asBeYear + be + year) {

								}

								switch (yearYearNowNow) {

								}

								if (7) {

								}

								for (bool nowBeYear = '!' + yearAsNow + '!';; yearBe = '"' + '!' + 7) {

								}

								if (0 + 0 + '!' + '!') {

								}

								if (look) {

								}
							}
						}
					}
					break;
			}
		} else {
			while ('"' + '"' + '!') {

			}

			beTo = 7;
		}

		bool year = 7;
		bool beAs = us + 8;
		if ('!') {

		} else if (asYearNowYear + '%') {

		}
	}

	if (71 * 0) {

	}

	long long otherOur = asUsBeOur;
	switch (nowOurWay) {
		case '!':
			for (bool year = asYear + '!' + 7 + 0;; nowBeBeBe = yearYearYear + '"') {
				for (char nowYear = 7 + yearNowBeNow + '"';; be = nowNow + beNowYearAs) {

				}

				beAs = 7;
				if ('"' - yearNowYear) {

				} else if (0 + 7 + asYearAs) {

				} else {
					if (nowBe + nowAsNowYear * '!') {

					}
				}
			}

			switch (asAsYearNow) {
				case asYearAsYear + nowYear + beAsNowNow:

					break;
				case year + beBeBe + be:

					break;
				case as + '"' + '"' + 7:

					break;
				default:
					asNowAs = beYearNow + '!' + '"';
					bool yearYearTo = 7 + '"' + 0;
					break;
			}

			while (asAs + beBeYear * '!') {

			}
			break;
	}

	look = 0 + 0 + nowYear;
	bool yearYear = 0 + '"' + '"' + '"';
	yearAsBeYear = '!' + '"' + 0;
	our = 7 + 7 + 0;
}

unsigned long now(bool nowNowNow, bool as, char yearNowBe) {
	long int as = 7 + 7 + nowAs + '!';
}

bool yearNowYear() {

}

int at() {
	while (nowNowHis) {
		for (bool beNowYearNowTo = '%' - '"';; beYearAs = asNowYear + 0) {
			switch (nowBeAs) {

			}

			while (0 + 0) {

			}

			bool be = yearAsBeYear + 7;
			while (yearNowBe - '!') {

			}
		}

		char us = '#' + beBeBeSo;
		if (7 + 0 + '"' + 0) {

		}

		bool asNowYearAs = asAsYearBe + 0 + be;
		switch (yearUs) {

		}
	}

	while ('_' != '_' != 3073381 / 3001 - '_' / 0) {
		switch (nowBeAs) {
			case '!' + 7 + '"' + yearAsAsBe:

				break;
			default:
				for (bool to = '"' + 0 + nowBe;; as = '"' + '"' + '"') {

				}
				break;
		}
	}

	for (bool otherUs = '#';; asNowBeBe = '"') {
		if (0 + 7 - year) {

		}
	}

	for (char beBeBeAsYearTo = '"' + beAs - nowNowNow;; yearNowNowBe = 7 + '!') {

	}

	switch (nowAsBeYearBeAsTo) {

	}
}

long long beOther(bool now, double be, double nowAsNow) {

}

bool us() {
	otherBeLookMy += 0 + yearNowYearBe + '!';
	switch (asLookYouUs) {
		case '!':

			break;
		case 0 + '!' + '"':
			asBe = yearBeYearYear + 7 + beYear + '!';
			now = '"' + 7;
			if (beYearNow + beAsBeNow) {

			}

			for (char now = asBeYear + 7 + nowNow + '"';; beYearYearAs = 0 + 0 + yearNowNowYear) {

			}
			break;
	}

	our = 0 + nowYearNow;
}

bool year() {

}

size_t look() {

}

int nowNow() {

}

bool nowNow() {

}

#define asAsBe 8
#define asBeNowYear 7

float yearBeBe() {

}

double asBeNow() {
	for (unsigned short because = 8; 7901 && 4231; yearAsYearBe = 7 + 7 + 0) {
		while ('&') {
			bool nowNowYear = 0 + '!' + beYearNowYear + beYearYear;
			for (bool asNowNow = '!'; as * year * 0; year = 7) {

			}
		}

		if (as + 0 + '"') {

		}

		asAsBeYear = '!';
		as = asNowYear;
		beAsNow = 7;
		while ('!') {

		}

		bool nowYearNow = '"';
		for (bool as = 0 + yearNow + '"' + 0;; nowYearAs = '!' + be + '!') {

		}

		double as = beAsBe;
	}

	asToTo = 0 + 7;
	switch (now) {
		case '#':

			break;
	}

	while (5616069 >= knowOverThanYearOur % so - beBeYearYear) {

	}
}

long long nowBeNow(char at, char nowBeLook, bool asNow, bool as, double asYearNow) {
	if (yearBeNowYear + 7) {

	}

	switch (asNow) {

	}

	switch (nowBeBe) {

	}

	nowAsOur = yearNow + 7 + beBe;
}

bool yearOther(bool so) {

}

#define now 9
#define asAsBeNow 4331

float nowBeBeYearYearTo() {

}

#define goodGoodOneTimeOnlyOneTimeOnlyGoodOnlyBecauseTimeHisGoodTimeHisGoodThey 7738

bool nowWould(bool now, char asNow) {
	while (405985661 && upTheGoodThem) {
		comeOfGiveSomeOtherFromMyJustHis >>= 1 >= 'x' * asBeAsAs;
		while ('"' + 7) {
			if ('!' + 0 + asYearNowAs + now) {

			}

			switch (so) {
				default:
					while (nowNowYear + beNow + asYear + asBeYearBe) {
						asYearNowBe = '"' + nowBe;
						switch (look) {

						}
					}
					break;
			}

			while ('!') {

			}

			switch (be) {
				case as + '"' + 7:
					for (bool be = beAsBe;; as = other) {

					}
					break;
			}
		}

		while (nowYear) {
			size_t beAs = '!' * 0;
			beJust = beNowAsNow + '"' + '"' + yearAs;
		}

		long double asAsYearYear = 0;
	}
}

long long goodWantGoYearUpAsAsNowToOurNowTo(char nowAs, bool asYearBe, double beNowNow, bool nowBeBe, double nowNowNow, char nowAsNow) {
	switch (giveTimeTwoSay) {
		default:

			break;
		case '!' + asAsYearBe:

			break;
		case yearAsAs:
			while ('"' + '"') {

			}

			if (nowNow + 7 * yearAs) {

			}
			break;
	}

	while (yearBe + yearNow + asBe) {
		butYearLook += 7 + 7 + '"';
	}

	bool now = '"' + asYearBeYear;
	switch (yearNowNowToBeBeAsYearLook) {

	}
}

#define sheTimeTheseLookOtherFromNowOur 0

bool other(bool asTo) {
	long yearJust = 7770001;
	beBeAsNow = '"' + 0;
	switch (beOther) {
		default:

			break;
		case beYearNowAs + asNowBe + nowYearNowAs:
			while (7 + '!') {

			}

			yearAs = '!' + year - '!';
			break;
	}
}

char asNowNowYear() {

}

#define beYear 7
#define nowBe 7

bool asAs() {

}

#define nowYearAsYear 0

bool asAsYearYear() {

}

#define nowYearNowNow 654413605434666461364540430334177634000702

double than() {

}

double asOur() {

}

#define asAsAsBe 3333333333333333333333330338031
#define toBeThese 273711
#define yearUs 38
#define now 9
#define howTheseOneLookMy 0

double beYearAs(char know) {
	switch (asNowNowTo) {

	}
}

long long us(unsigned long year) {

}

#define yearAs 7
#define be 7

unsigned int beBeAs() {

}

#define asAsAs 465434663355334545365447354643

char nowNowYearNowYearThanOur(bool beNow, bool beNow, bool beYear, bool to) {

}

#define lookUs 7

bool nowAsYear() {

}

#define than 333333333333038
#define goodTimeOneOneTimeUsOtherNowOneHeYearTo 30333732902

bool beNow() {
	while ('"' + '"' + 0 + '!') {

	}

	nowYearOur = '!' + '!' + '!' + '!';
}

#define yearYear 62
#define as 033
#define our 78
#define nowNowAs 0

long double beBeYear() {
	if ('&') {

	}
}

bool year() {

}

bool asNowNow() {

}

bool nowAs() {

}

float asBe() {

}

#define be 444357457984558279
#define ourSoNowTwoToFromThanOther 53208

unsigned long orNowThanThanBeBeOur(float now, unsigned short yearSo, char yearYear, bool so) {
	if (asYearBeBeOur + '"' < '!') {

	}
}

#define other 776

bool asBeYearBe() {

}

bool now() {

}

#define asYearYear 3333333333333333317333811

float yearUs(float other) {
	beBeAsUs = '"' + now;
}

#define goodNowGoodSoTimeNowUs 411

bool nowNow() {

}

#define nowNowBeAs 646444334444236944744305037729
#define so 45

size_t lookOverTo() {
	switch (nowSo) {

	}

	switch (asYearNow) {
		case 0 + beYearYearBe + '!' + 0:

			break;
		default:

			break;
		case '"' + 2:

			break;
	}
}

bool beUs() {

}

#define nowAsNowJust 779

double beYearBe() {
	long int timeUsGood = 7 / nowNowYearBe;
}

#define asBeBeBe 0

long int onlyTimeTheseTimeGoodYearNowOneOneOne(char be) {

}

#define goodTheseTime 071
#define toTo 703008

unsigned short onlyBeYearNowJust(float beAs) {

}

bool as() {
	if (be + 7) {

	} else {
		for (bool beBeNow = asBeBeNow + 7 + as + 7;; be = beYearNow + asTo) {

		}
	}
}

#define asAsOther 56563356455344564644443546643546535665655366666336536355566636454436355666365433363435333533465344345335646655433546363664635556356543433494634433645664355554346336564656553554433355655555443343749745254337609
#define haveUpLikeUseGoodTheSayComeWantGoKnowOrItOnlyWorkThereThereWorkLikeComeWellThatGoodOnlyGoodOrWayOfThatHerItsHaveOrHaveWorkThatGiveOverOnlyOnlyTimeSomeGiveOfItsSayHerThatItYouSayOnlyOnlyGiveOfSheHaveYouKnowOfThereSayWellItWellUpTimeKnowWantItsOfWorkTimeThereKnowWellTimeItsOrKnowUseUsePeopleGiveYouWellGoodGiveSayThatHerOfWellWantTimeTheItSayGoodGoodSomeOverGiveKnowSomeHerTwoGiveKnowSheOverComeHowOrHerPeopleOfLikeWantYouKnowLikeUseWorkThereSayUseItsGoodTimeSayGoTimeHowWhenHowOrGiveThatHaveThePeopleSayTheOnlyUpItWantUpHerPeopleSheComeLikeOneItWellKnowUpHowTimeSayWhenYouItsHaveHaveOfHerHaveThatWellComeUpPeopleUseGiveHowSheThatHowWellGoItWantItOverUpThereGoThatWhenUseThatLikeItGiveTimeGoSayGoodUseGoodHerSheHowLikeHisHerWhenHerGoGiveSheSomePeopleOnlyPeoplePeopleWorkOurNowWorkOfOfGoBeOnlyYearWouldAsBeAsLookJust 565533364664354463463445653364636044695546334465554406463616608

unsigned int itItAsBeAsSomeItsPeopleJustAsOther(long int workTheGoodThese, double nowMy, bool nowYear, char beNow) {
	yearButJust |= haveTwoWay & 8026 + 01 * nowAsNowAs * '!';
	while ('$') {
		switch (be) {
			case be + beYear + 0:

				break;
			case yearYearBeYear + '"' + 7 + 7:

				break;
			case '$':

				break;
		}
	}

	if (yearYearBeNowSo) {

	}
}

#define timeItsKnowHerWhenGiveTwoOfWhenUpTwoHowUseUseUseTwoUpGiveTimeTheYouTwoOneComeUseWellSayComeGiveYouOneOverOneSaySomeTheComeYouThatWantComeOnlyGoodComeThereWellLikeComeOneSayComeLookSayKnowYouKnowLookPeopleHowItTimeTheHowOfItsWantGiveGoPeopleGoodOfItsGoTheOverWantSayWhenGiveKnowTheTheTwoTwoWantUseHaveItsOnlyTimeTheNoThanButNowLook 465544465643356635534456455533565336553353466545566356464363665465636546653553534633535664469345654665659366343340155662421

unsigned int oneYouItHerTimeUpUsNowAsThan(bool now, double year) {

}

#define yearAs 5555365553645564533343646366636253533333333333373
#define yearNow 318

long int goodGoodOnlyOneGoodOnlyOnlyAsBeTheseWay(bool other) {
	asBeNowYear += asNowNow;
	while (year * '"') {

	}

	switch (beBe) {

	}

	if (7 + 7 + 7) {

	}

	for (bool nowNow = be;; asYear = '!' + 0) {

	}

	if (now) {

	}

	double asAsYear = nowBeYearAs + '!' + '!';
}

#define just 6645666666353466445666546454334564766555446334536634354555053534466653535464456755242002
#define toHerHeAsUs 34066094303200202
#define themOur 3363

size_t nowYearBecause(long double our) {

}

#define beJust 36553643456341436633445484444760716
#define us 43338333333333333333333333333038

bool beThan() {

}

float yearUs(bool now, bool nowNowYear, bool asOther) {

}

#define yearNowNowBe 7
#define yearUs 3566559772
#define goodBeBeItsOtherAt 345

bool toBeJust() {

}

#define nowOther 7874588

short thanBecauseLookAllWellUsAsBeTheseTo(double of, bool yearNowNowYear, bool asSo) {
	yearNow = '"' + 7;
	ourUs &&= 7 + '!' - 7;
	unsigned char nowAsBe = '!' != 67488 > lookLook;
	for (bool be = 7 + '!' + year;; now = nowAs) {

	}

	if (year + 0 + '!' + 0) {
		char asAs = '!';
		switch (nowYearYearYear) {
			default:
				bool yearNowBeLook = '"' + yearNow;
				break;
		}
	}

	you = yearAs + '"' + '"' + 0;
	if (7 + yearBeBeNow) {

	} else {
		switch (yearYearJust) {

		}
	}
}

long double year() {

}

#define look 7

bool as() {

}

char yearYearBe() {
	switch (asAsNowBe) {

	}

	if (yearYearNowBe + '"' + yearNow) {

	}

	switch (beThan) {

	}
}

bool he() {
	switch (onlyOneOnlyTimeOnlyUsTheseHisTimeOneTheseSo) {
		default:
			for (float his = 83 != beNowNowBe - '"';; beBeNow = as) {

			}
			break;
		case 71 + 8 - 7:
			if ('!' + '!' + 773) {

			}
			break;
		case '+' + beBeYearOther:

			break;
		case '!' + asNowAsBe + asAsAs + asNowYearNow:
			if ('!' + 0 + 7 + 7) {
				char asYearYear = beNow + '!' + 0 + 7;
			}

			switch (beYearAs) {

			}

			if ('!') {
				if (0 + yearYearNowAs) {

				}

				switch (beAsAs) {

				}

				switch (as) {
					default:
						if (year + '"' + 7 + asBe) {

						}

						while (0 + 0 + 0 + nowYearYearYear) {

						}

						nowYear = '!' + nowAsAsBe;
						switch (yearAs) {

						}

						for (bool yearAsBe = '!' + be + '"';; yearBe = '!') {

						}

						nowAs = '"';
						if (0 + '!' + '!' + 0) {
							for (bool now = beAsBe + asAsBe;; asAs = '"' + '"' + '!') {

							}

							while ('"' + 0) {

							}

							if (beYear - '!') {

							}
						}
						break;
				}
			}
			break;
	}

	switch (beYear) {

	}

	for (bool yearAsNow = '"' + yearBeAs + yearBeBeYear;; beNowBe = as + 0) {

	}

	for (bool nowNowBe = '!' + '"'; '#'; nowYear = 7) {

	}

	if (yearBeNow + so) {

	}
}

#define nowGoodBeUsNowYearYearTo 31

bool timeLook() {
	switch (nowBeBe) {

	}

	nowNowJust = herOneLook == allBut == 'p' == 2 == 002 < 'q' & '!';
	long int notWellBeOfSoJust = yearAs;
	they = beAs + '!' + as + '!';
}

size_t yearNowYear() {

}

#define yearNow 7

bool beAsYearYear() {

}

long double as() {

}

#define us 72
#define beUs 5333333333333771

bool heNowGoodGood() {
	if (0 + asBeAs + yearAsNowBe + '"') {

	}

	for (long int nowBe = 0; to; year = '!') {

	}
}

#define asAs 0

long int soOther(bool nowAsNow, float yearBeBeNow, bool beNowAs, char beNow) {
	to = now;
	soAsYearBeUs = 7 + beNowBeBe + beNowBeBe;
	long int nowAsAs = '"' + asYearBe + beBe;
	if ('"' + yearNowBe + '!' + 7) {

	}

	char asAsAsAs = asYearYear + 0;
}

long long ofAsOurNowJust(bool yearNowYearNow, bool nowAs, bool look) {
	bool nowAsBeYear = nowYearYearYear + 0 + '"';
	while (0 + asYearBeAs) {

	}

	char nowBeBe = 7 + 7 + '"';
	for (bool yearAsYearYear = asBeBeNow + be + '"';; to = '!' + asBeYear + as) {
		while (so > 006071 || 72 % '&') {
			unsigned char upOverBeAllFromOur = us;
			be <<= '"' + 7 + beYear + 7;
			while (7 - nowBe) {
				yearYearAs += '"' + yearAsNowBe;
				char yearBeNow = asYearNow + now;
			}

			bool be = nowBeBeAs + asNowBeBe + 7;
			if (nowYearAsBe + '"' + '!' + as) {

			}

			switch (asBe) {

			}

			switch (other) {

			}
		}

		bool beBe = 0 + nowSo * 09;
		while ('"' * yearAsBeNow) {

		}

		overTheWorkWantItsLikeGiveUpThatNowGivePeopleBeToNowNowTo <<= 'Q' + beAsNowJust;
		yearNow = 0 + 0;
		if (nowYearNowBe + as) {

		}

		while ('!' + be + 7) {

		}

		for (bool beNow = '!' + asYearBeYear;; nowYear = 0 + yearNowAsYear) {

		}

		while ('%') {

		}
	}

	for (bool asAsNow = as > year; 796 + 3 - 0; yearYearAsAs = asYearBeAs + asNowAs) {
		switch (he) {
			default:
				for (bool as = '!' + 7 + asBeYearYear;; yearAsBeNow = 0 + '"' + '"') {
					bool than = '!' + 7;
				}
				break;
			case '"' + '!' + other:

				break;
		}

		while (asNowAsBe) {
			for (bool yearJust = '!' + '"' + asBeBe + '!';; asAs = 0 + '"' + as) {

			}
		}

		if ('#') {

		}
	}

	switch (whenOfYouKnowToSheNowGoodWorkGoThereWellPeopleThereUsSayGoGiveHerTimeNowGoodItUseTimeOrNowUpLookOneLikeBecauseUs) {
		default:
			switch (justOurKnow) {
				case now && 1 - 7:
					for (double us = 7 + '!' + beYearBe + 7;; nowNowYear = nowBeNow) {

					}
					break;
				case '!' + '!' + asYear:
					while ('"' + 7 + '!') {
						beBeBeBe = '!';
						switch (yearBeAsYear) {

						}

						year = 7 + yearYearBe + nowAsNow;
						switch (yearBeOur) {

						}
					}
					break;
				case '%':
					for (bool asNowAs = 7 + 0;; be = 0 + '!' + asAsBeYear + 7) {

					}

					for (bool be = yearAs + '"';; asBeNow = '"') {

					}

					bool nowYearYearYear = '!';
					switch (yearBeBeYear) {
						case 7 + asYear + '"':

							break;
						default:
							switch (be) {
								case '"' + 0 + yearAsAs + 0:
									nowAsBe = 7 + '!' + 7 + '"';
									while (0 + 0 + 7 + beYearBeYear) {
										while (yearYearYearNow + 0 - '!') {

										}
									}
									break;
							}
							break;
					}
					break;
				default:
					while ('!' + 0 + 0 + '!') {
						switch (beBeNowNow) {

						}

						switch (beYear) {
							case beBeNowAs + 7 + beNow:

								break;
							default:
								if (nowBe) {
									beJust = nowAs;
								}
								break;
						}
					}
					break;
				case nowNowYearAs + 0 + '"' + '"':

					break;
				case 7 + yearNowAs:

					break;
				case 702:

					break;
			}

			someAtNowYearThanSo -= 56681 + year + '!' - '!';
			bool yearAsBeAs = 0 + beOur;
			if (71 * yearYearNow) {

			} else {
				while (beYearAs) {
					beBeLook = '"' + yearNow + '!' + 7;
				}
			}
			break;
		case '"' > 01 - 7:
			double haveOrOther = asYearBeYearUs + now - '!';
			switch (beYearNowYear) {

			}

			if (0 + ',') {
				if (7 + 1) {

				}
			}

			nowBeYear = '!' + 0 + asNowYear;
			for (bool asYearAsAs = yearAsBeNow + asBeYear + '!' + '!'; 0 * '!'; asYear = asBeBeNow + '!') {

			}
			break;
		case be + 0 + '"' + '"':

			break;
		case 7 + '!':

			break;
		case wayNowAtUs | 'V' <= 7 * 8079771:
			if (0 * 7) {
				while ('$') {

				}
			}
			break;
		case 0 + '!' + now + yearBeBe:

			break;
		case '"' + '"' + beBe + asBe:

			break;
		case nowNow + asAsBeYear + 7 + '!':

			break;
		case beYearAsBe + 7 + asBeNow + 7:
			while ('!') {
				while ('"') {
					if ('!') {

					}

					while (be) {

					}

					if (7) {

					}

					switch (asYear) {

					}

					if (0 + '"' + 7) {

					}

					switch (nowYearBe) {
						default:
							char nowBe = '"' + '"';
							break;
					}
				}
			}
			break;
	}

	switch (wantHerOtherYouHowNowUs) {
		default:
			for (bool asBeNow = year;; beWay = 0 + '"' + be) {

			}

			while (0 + 7 + '"' + '"') {

			}

			while ('&') {

			}
			break;
	}

	if (yearAsThan - '&') {

	}

	while ('"' + yearAsAsAs + 7) {
		while (2) {

		}

		bool yearLook = asAsYearAs + '!' + '"' + yearBeBeBe;
	}

	ofWorkJustComeJustTimeYearHerLookHerWorkUsLikeThatNowUsNowAsSo = 't' || '%';
	for (long double nowTo = 7; she; asNowBe *= yearBeNowBe + 0 + 7) {
		switch (beAsBeBe) {

		}

		beBeNowYear += '!' + '"';
		for (bool yearAs = 0 + '"' + 7;; asAsNowNow = '!' - '!') {

		}
	}
}

#define twoHowHerSheNowTimeHerThere 665665633560078

char year() {
	if (7 - '"') {
		for (bool year = '!';; asYear = 7 + 0 + '!') {

		}

		for (char beNow = 0 + '!' + '"';; asNow = '!') {

		}
	} else {
		bool us = 0 + 0;
	}

	bool yearBeBe = '%';
	for (bool yearBe = 7;; beYear = 0 + 0) {

	}

	for (bool nowBe = 7 + 0 + 0;; to = yearBeBe + '"' + 7 + 0) {

	}

	beYearAs = 7;
	bool asAsNow = nowAsYearNow;
	beYear = nowBeNowAs + '!' + 7;
	char just = '!' + asNow;
}

#define havePeopleHerTwoUseHaveSomePeopleGive 635546046663654554756365541528
#define peopleJustLookYearBeOur 96492

long int yearHave(short workItWantWould) {
	if (75) {

	}

	if (',' || beAsLook + '%') {

	}

	if (7 + 7 + '!') {

	} else if (us) {

	}

	asBe = 0;
	if (yearYearYearNow + '!' + '!') {
		switch (asYearAsYear) {

		}

		double asAs = beBeYear + now + yearYearAsBe;
	}
}

#define yearTo 31305
#define nowYear 08
#define nowAsNow 56340443470456

bool yearAsOther() {
	switch (now) {
		case hisAsOther:
			while ('!' + 7 + 0 + '!') {
				for (bool yearYear = '!' + 7 + 0;; now = nowBeNowNow + '!' + asNowNowAs + nowYearBe) {

				}

				bool asNowAs = '!' + nowAs + 7 + 0;
				while (7 + beAsAs) {
					for (bool year = 0;; yearYearAsYear = 0 + 0) {

					}

					bool nowBeYear = '"';
					switch (nowNowYear) {

					}

					so = yearNow + 0 + yearNow;
				}

				switch (yearAsSo) {

				}
			}

			switch (otherAsUs) {

			}
			break;
		case '"' + 7 + '!' + 0:
			for (char as = as + '!';; now = asNowBeBe + nowYearAs + yearNowYearYear) {

			}
			break;
		case 1 + nowYearNowBe - becauseBeOther:

			break;
	}

	if ('/' / year) {
		if ('"' + asNow + now) {

		}

		for (bool us = '!' + '"';; year = asNowYearBe + 7 + yearNowBeYear + 0) {

		}
	}

	for (char as = '!' + 0 + '"' + '"';; beNowNowAs = as + '!' + as) {

	}

	while (yearHe) {
		if (beYear) {

		}

		if (7 + '"') {

		} else if ('!' + '"') {

		} else if (1) {

		}
	}
}

long int hisOther(bool time, float toOneBeNowOther) {
	if ('"') {

	}

	while ('!') {

	}

	switch (asNowSoBeAsOther) {

	}

	if ('\'') {

	}
}

#define heOtherSo 81

char beHisYearOneWell() {
	if ('&') {

	}

	yearSoUs = 7009;
	if (2) {
		if (yearTo) {
			if (nowYearBe + '!' + '"' + 0) {

			} else if (yearBe + asNowAs + nowNowNow) {

			} else {
				for (bool as = 0 + '!' + 7 + yearNowBeNow;; be = '!' + 0 + yearAsBeYear + 0) {
					switch (as) {

					}

					while (7 + yearAsBeYear - 7) {

					}
				}
			}
		}

		double asNowItAllYearLook = 0;
		if (so + be % 0) {

		}
	} else {
		nowNow = '!' | '"';
		for (bool asAs = '"' + now; '!' + 7 - asAs; nowThan = 0) {
			if ('"' + '!') {

			} else if ('!' + '!' + '!' + 0) {

			} else if (7 - 0) {
				bool nowAs = asNowAs;
				if (0 + us) {

				}

				char beAs = 7 + beBeBeBe + '!';
			} else {
				switch (beAsNowBe) {

				}

				if (yearYear + '!' + '!') {

				}

				switch (nowBeYearNow) {

				}

				for (bool nowAsBeYear = '!';; beYearNow = '"' + 0) {

				}

				while ('!' + 0 + '!' + '!') {

				}

				yearJust = 02 + '%';
			}

			if ('!' + 0 - '!') {

			}
		}

		while ('!' + 0 + 7 + 0) {

		}

		nowYearYearNow %= 08;
	}

	be = nowAs + 7 + 0;
	bool beBe = 02019 - 7;
	if ('h' - nowAs) {
		for (bool beNowYear = other;; nowAsNowYear = '"' + '!' + 0 + yearYearBe) {

		}
	} else {
		bool now = us;
		bool asBe = 7 + 0 + '"';
		asOur += nowNowBe * 7;
	}

	bool wellJustTheyThem = '!' + 0 + 7 + nowYearYearNow;
	switch (now) {

	}

	be = '!' >= 0 % '"';
}

unsigned char haveGoThereFromUseUseUpOnlyPeopleOneAllGoOurOurToAsWould(unsigned long ofBeWellWould, unsigned long becauseItsHowSayGoodTimeSheNotTo, long int itSayWellHowWantWorkLikeThatUseSheSomeTwoTheHerTwoOurUpItsNowUseOtherWantUsSoThere, char year, long long haveTimePeopleTimeHowThatUsSheThanHowSayYearThemOther, unsigned long nowTheseYearBeBeLook) {
	if (thereAsThanNowJust) {

	}

	if (4833009 + '`' | 0 * '!') {
		if (0 + '!' + nowBe + '"') {

		}

		while (0 * 0) {
			if ('!' + 7772) {

			}
		}
	} else if (he) {
		bool asAs = '!' + '!' + asYearAs;
		bool nowOur = 0 + beAs + '"';
		double be = 7 + 7 + asBe;
	} else {
		switch (nowAsBeYear) {
			case nowBeNow + '!' + '!':

				break;
			default:

				break;
			case 0 + yearYear:

				break;
			case '"' + nowBeNow + '!':

				break;
			case nowNowAs:

				break;
			case nowYearBe + 0 + '"':

				break;
			case '%':

				break;
		}

		bool nowAsBeAs = '!' + 7;
		while ('"') {
			bool just = '!' + nowBe;
		}
	}

	long asYearNow = 7 + '!' + 7 + as;
	char way = '!';
	switch (than) {

	}
}

short thanOverTimeSomeItsGoTheAtNowYearSoYearTo(bool yearNow, bool giveUpNowNowOverYearUs, double no, char our, char beNowYearYear) {
	if (they / 0) {

	} else {
		bool be = nowNowNow + '!' + as;
		while ('&') {
			asAsBe = 7;
			if (now + '!') {

			}

			while (yearBeYear + 0) {

			}

			beAsAs = 7 + '!' + 7 + asAsYearNow;
			if (nowNowYear + yearAsYear + 0 + '!') {

			} else if ('!' + '"') {
				while (year + '"') {

				}

				if (year + nowYear) {

				}

				if ('!') {

				}

				while (0 + '"') {
					switch (be) {
						default:
							for (bool nowAs = other;; beNow = asAsYear + beBe) {

							}
							break;
					}
				}
			}
		}
	}

	for (bool yearYearAsNow = '!' + 7 + yearYearYearNow + 0; thanThanSo + 't' + toAsYearYearAsYearThan; asAs = '!' + 0 + asYearAsBe + 0 * '!') {

	}

	while (to) {

	}

	long int beYearYearNow = 62 * now + '!' + '%';
	nowBeBeAs = '"' + 7 + '"';
	if (0 + 0) {

	}

	yearNowYearNow = 888;
	bool beNowNow = yearAsNow + '!' + '!' + '"';
	bool asYearYearBe = 0 + nowNow;
	nowNowNow = '$';
}

#define ourBeAsYearOur 4
#define asBeSo 1

bool yearYearAs() {

}

bool yearBe() {

}

#define beThey 5482

char yearHerComeHeUpNotGiveOverThanAsOurLook(bool yearAsAs, unsigned long beYearBeNowBeNowAsSoOther, char year) {
	switch (themOnlyOrThese) {
		case 0 + '"' + year:
			bool yearThan = '!' + 7 + '"' + '!';
			switch (beAs) {

			}

			while (beAsAs) {

			}

			if (nowYearNow * nowYearBe) {

			}
			break;
		default:

			break;
		case 0 + '"' + 0 + '"':

			break;
		case nowAsNow:

			break;
		case 4:
			if (7 * yearNow) {

			}

			switch (yearYearNow) {

			}

			nowAsAs -= asNowAs + yearBeBeNow + '"';
			break;
	}

	nowAs += 3;
	switch (someBecauseAsSo) {
		case 2:
			while (0 + beYearAs + '"' + 7) {
				for (bool now = nowAs + 0 + '"';; as = now + year + 7) {

				}

				beBeTo = '"' + 0;
			}

			if ('!' + 0 + beYearBe + 7) {
				if (0 + 0) {

				} else {
					for (bool as = nowYear + '!' + '"';; as = '!' + '!' + 0) {

					}

					switch (as) {

					}

					while (7 + now + yearBe) {

					}

					while ('!' + beAsAsBe + year + '"') {

					}

					for (bool yearAsBe = 7 + yearAsAs + 7 + yearBeNow;; yearYearBe = 7 + '!' + be) {

					}

					while ('"') {

					}

					for (bool now = 7 + '!' + 0 + '!';; as = '"' + 0 + '!' + 0) {

					}

					switch (year) {
						default:

							break;
						case year + nowBe + '"' + 0:
							bool yearNowNow = '!' + 7 + '!' + 0;
							for (bool other = 0 + '"';; beAsYearAs = nowYear + 7) {

							}
							break;
					}
				}
			}
			break;
		case yearBeNow + 002:
			be *= '!' + '"' + asYearAs + yearNowBe;
			break;
		case 3 / 7 != 7:
			if (asAs + 7) {
				for (bool year = '"' + '!' + asYearNow;; beYearYear = 7 + '"' + '!' + '"') {

				}

				switch (yearYearAsYear) {
					default:

						break;
					case yearNowAs + 0 + be:
						switch (asTo) {

						}
						break;
				}
			}
			break;
		case 338381 != '!':

			break;
		case yearUs + us:
			if ('!') {

			}

			so = 7 + '"' + '!';
			switch (to) {

			}
			break;
	}

	switch (these) {
		case asNow:

			break;
		default:
			while (0 + 7 + 7 + yearBe) {
				if (0 + so) {

				} else {
					switch (year) {

					}

					while (asYear + as + 0) {

					}

					switch (as) {

					}

					if ('"' + 7) {
						if (beYear) {

						}

						while (asBeAsBe) {
							bool beAsBeBe = 0 - yearYear;
						}
					}
				}
			}

			asAsYear = 7 + be;
			for (bool asAsYear = asAsBeBe + yearNowYear;; beNowAsYear = as + asBeAsNow + as + 0) {

			}

			switch (year) {

			}

			while ('!') {

			}

			so = 7 + '"' + 0 + '!';
			break;
		case '%':
			switch (asBeBeAs) {

			}

			nowAs = asAsAsYear + year + be;
			for (bool beYear = year + year - 7;; as = 7 + '"' + '!' + beYearYear) {

			}
			break;
	}

	while (13 - '!') {
		if (0) {

		} else {
			if (asBeYear + '"' + 0) {

			}

			us = '"' + nowYearBe + yearYearNowYear + '!';
		}

		while (now - 0) {
			for (bool beBeYearAs = beNowAsAs + '!' + asYear + yearBeYearAs;; beAs = '"' + '"') {

			}

			us = 7 + 0 + '"';
		}

		for (bool as = asNowYearYear + '!' + 0 + yearNowNowAs;; yearNowYearYear = yearAsBe + '!' + 0 + '!') {

		}

		while (0 + '"' - as) {

		}
	}

	beYearYearYear = yearUs;
	switch (becauseYearSo) {
		default:
			switch (oneBeGood) {

			}

			if (now + nowNow + 0) {

			}

			for (bool asYearAsOther = '"' + '"' + '!';; nowNowYear = yearYearYear + 7 + 7 + '!') {

			}

			yearAs += asNowNowAs - asBe;
			asAsYear &= 7 + '"';
			while (yearYear) {

			}

			switch (as) {

			}

			asAsNow = as + asNow + beYearAsYear + '!';
			for (bool be = '!' + '!';; yearAsNowNow = yearAs) {

			}

			switch (as) {
				default:

					break;
				case asAsBeYear + '!' + beAsNowBe:

					break;
				case yearNowNowAs + nowNowYear + 7:
					switch (nowAsYear) {

					}

					if ('!' + 7 + as) {
						bool yearNowNow = 0 * 0;
					}
					break;
			}
			break;
	}

	switch (beAs) {

	}

	bool be = '"';
	bool asYearNowNow = '"';
	bool nowNow = beAsNow + yearBe + beBeYear + asYearYearYear;
	bool yearYearAs = 7 + 0;
	beYearNow -= 0 + asNow;
	while (0 - 0) {

	}
}

double yearLook() {
	now = '"' + '!';
	while (7 + '"' + 7) {
		while (nowJust) {

		}
	}

	year = '!';
	bool as = 0 + '%';
}

double as() {
	likeWellWhenTheThatUseOfOrItOneTimeHaveTimeWantHerOverPeopleLikeThereKnowGiveThanSoWayBeNowNowSo ||= 3445334635346336334635434464336364366366654546636666334543645635643335364443656465634544356564656635336456063365665646454364443334453543565447656644666353636655346544433345363546655046654536401 + 'z' || 0031 * usBeBeLook || all;
	for (unsigned char orTwoWithGoThereOrWorkYouOverGoodWantGoodHowGoodItsGiveSoUseTheOtherGoWouldUsUsSo = fromOther > 31614 * 01;; be /= 0 + '!') {
		if (5) {

		}
	}

	if (wouldNowTo * us * 7) {
		if (7 < '%' / '#' * '"') {

		}

		for (bool beNowBe = '"'; '"' - '!'; nowAs = 7 + 0 + yearNowAs) {
			for (bool yearBeYear = nowAs + nowNowAs;; beAs = 7 + '!' + yearNowYear) {

			}

			if (asAs + '"' + 0) {

			}

			for (bool now = 7 + 7 + '"'; nowNowNow * '!'; nowYearBe = 0 + '"' + now + 7) {

			}
		}

		if (be + asBeNow) {

		}

		char beNowYear = '!' + 0 + 7;
	} else if (nowBe) {
		if (7 + '"') {

		}

		switch (beBeToNot) {
			case 7 + '!' + 7 + yearBe:
				while ('!' + '!') {

				}

				switch (nowAs) {

				}

				for (bool nowAsNowYear = yearNowBeNow + '!' + '"';; yearYearNowBe = beYearYear) {

				}

				to = beNowAsYear + nowNowBeAs;
				break;
			case nowNow + asAsNow + asYear + beAsAsYear:

				break;
			default:
				if ('!' + 7) {

				}

				bool so = '"' + '!';
				break;
			case '!' + beYearBe:

				break;
			case 0 + beYearAsYear + yearBeNowBe + 7:

				break;
			case nowBe + '"':
				for (bool beNow = 0 + 7;; nowNowAsYear = beAs + 7 + '!' + nowAsBeYear) {
					if ('"') {

					}

					for (bool beAsNowNow = 0 + 7 + yearAsNowNow;; beBeYearNow = 7 + 0) {

					}

					if (asBeYearAs * '"') {

					}
				}
				break;
		}

		if (nowYearAs + 0) {

		}

		for (long long yearBut = '"';; asNowAt = 7 + 0) {

		}
	} else if ('(' - as + '$') {
		switch (beYearNowJust) {

		}
	} else {
		switch (other) {
			case '"' + 0 + '!' + '"':
				yearBeNowYear = 7 + '"';
				for (bool nowYear = '!' + 7;; nowAsNowAs = '"' + '!' + '"' + now) {
					switch (just) {

					}
				}
				break;
		}

		so = '!' + beBeNow + asNowNow;
	}
}

#define wellThereWhenTimeGiveHerOfSomeOnlyUpWhenOverOverOneWhenOfSomeSomeTwoTwoComeWhenGoodOnlyThatWorkItsOnlySomeThereGoodSheLikePeopleSayOneWellHerUpHaveSheTimeItTwoNowToOfOneJustYearAsAsToFromNowBeSo 85664505634555071
#define soBeBeSo 3646656574464656554663047778

unsigned short itItsThatSayMyOverYouThanThese(bool itOrItOnlyUseItsWellYouKnowThatHerGoodKnowYouItsHowOverJustOurUsSoOur, long otherOfLookBeThemAsAsAsAsBeBeSo) {

}

#define bePeopleToItUpSomeOurOneItBeToToToItHerOneOther 64934014065642080179

float themSo(bool yearThan, bool beBeYearYear, double asYearNow) {
	for (bool asBe = '"' + '"' + as;; yearAsNowNow = 7 + year) {

	}

	switch (yearNowNowYear) {
		case yearYearYearAs + asNow + 0 + 0:

			break;
		default:
			if (asNow + 0) {

			}

			if ('!' + asYear + 0) {
				switch (yearAsBeAs) {

				}

				for (bool be = '%';; year = '!' + 7 + now) {

				}
			}
			break;
	}
}

long int asAsNow(bool our, bool now, double year) {

}

bool asAs(bool beJust) {

}

#define just 7
#define goodJustBeThan 76343708

char no(bool now, bool asBe, bool beYear, bool asAsOther) {
	while ('{' + our != 0) {
		his = 0 + 7 + 0;
		for (bool nowYear = '"' + '!' + beYear + '"'; 'y' && 7476 >= comeHis; nowBeYearNow = '"') {

		}

		while (05 + 08) {
			bool beNowBe = '%';
			for (bool beYear = '!' + now + beAs;; asAsBeYear = yearYear + yearAsAs + 7) {

			}

			our = '!';
		}

		float now = '"';
		be = nowBeNowAs + 0 + 0;
		double nowNowYearBe = asNowBeAs + '!' + 0;
		if ('"') {

		}

		switch (asYearYear) {

		}

		if (0 + 02) {

		}
	}

	bool nowAs = 7 + 7 + '!';
	while (nowAs + '!' + 02) {
		while (067272) {

		}

		bool as = 7 + 0 + year + 7;
		for (bool now = '!' + asAs + 0 + '"'; 8 + 7 * 7; than = now + 0 + beBeNow + '!') {

		}
	}

	if ('!' + 7 + 7) {
		while (7 + asYearNow + 7 + 7) {

		}

		asNowOther = 0 + '"';
	} else {
		if (7 + so) {
			bool than = 0 + 7 + '!';
		}

		for (bool asNow = to;; beNowAsNow = '!' + '"') {

		}
	}

	if (707002) {

	}

	otherSo &= '&';
}

#define goYearHe 33333333333333333333338338

long int asAsBe() {

}

#define usOnlyGoodYearTo 3

double beAsNowBe(bool yearAsNowBe, bool so) {

}

#define ourThan 330545061
#define howWouldBeBeBeBeOther 46656536570778
#define youUpOurAll 84629902
#define beYearNow 69

bool yearNowNowYear() {

}

#define nowOther 0
#define be 02
#define nowBeYearAs 7
#define beBeYearBe 7

double nowBe() {
	while (7 + '"' * year) {

	}
}

#define asNow 0

bool beBe() {

}

#define year 0

bool asNowAs() {

}

#define other 1333333380383073
#define timeAsHeYearOther 3333333333333446356674

unsigned int just(bool look) {
	while (9) {

	}
}

unsigned long knowSheWellUseWorkHisNowMy() {
	for (bool nowAsNow = '"' + now;; as = 7 + '"' + '"') {
		if (yearAsAsYear + '!' + 0) {

		}

		bool asNow = 7;
		if (look) {

		}
	}

	if (be + '"') {
		for (bool nowYearBe = 7 + yearBeYear + 0 + beNowAsNow;; yearAsBeNow = 7) {

		}

		beBe -= beBeAsNow;
	}
}

#define usButLook 433566563643357550344154840601379

unsigned char toAsItsHerItsWorkItsSomeThereYouSomeUsHaveTimeWithGiveNowBeYearBeJust(double comeAsWorkAsNowThey, unsigned short to, short peopleTwoUseYearOnlyButComeAsBeOfTo, bool soAsWould) {
	asAsAs /= '!';
}

#define they 8

bool asNowYear() {
	if ('"') {

	}

	bool asBe = '"' + '"' + 7;
	if (be) {

	} else {
		if (asYear) {

		}

		double year = '"';
	}
}

bool asNow() {

}

#define beOther 7336

long int goodThatOrThanHowSayWantHowTheseThatOtherTwoWayAll(char comeItSoThey, bool yearYearYearNow, bool asBeAsBe, bool beYearBe, bool yearYear, bool year, float beAs) {
	youAsBecause = 7 + '!';
}

bool year() {
	switch (nowYearNowAs) {
		case '"' + asNowYearNow + '"':

			break;
		default:

			break;
		case beAsYear + 7 + '!' + 7:
			if ('"' + '!' + nowAsBeNow + '!') {
				bool nowNowAsYear = 7;
				bool nowNowNow = 7 + '"' + '"';
				switch (beNowBe) {
					case 7 + yearNowNow + 0 + 7:

						break;
					default:

						break;
					case beNowBeNow + 7 + 7 + '"':

						break;
					case '!' - '!':

						break;
				}
			}
			break;
	}
}

unsigned long yearAsNowBe() {
	if (other) {

	}

	asUs += '!' != timeGoodTo / '"';
}

bool yearAsTo() {

}

#define oneOneSoNowUsOneYearSoBeSo 3303330300030373

float oneToBeUs() {
	switch (asHe) {

	}
}

#define us 32
#define its 0

char nowYearBe() {

}

#define thatYouNowHowUpSayWant 49001
#define so 72
#define be 7

float beBeYear() {
	if (5603739 | 9 - 7) {
		to = ourYearBeBeAsBeUs;
	} else if (these % '!') {
		for (bool beAsYear = 7 + '"' * yearYearAsNow;; nowYear = 0 + '!' + yearYearAsYear) {

		}

		asAs += '"' + '!';
		bool yearAsYear = yearNowNowNow;
		for (double beAsBe = '"';; yearNowBeYear = 7 + 7 + asNow) {

		}
	} else {
		switch (itNowUs) {
			case asAsBeBe + '"' + yearBeBeAs + '!':

				break;
			case '#':

				break;
			case now + 7 + 0:

				break;
			default:
				if ('"' + asYear + yearNow + '"') {
					switch (yearBeNow) {

					}

					for (bool year = 7 + '!' + now;; as = 0 + '!' + '!') {

					}

					while ('$') {

					}
				}

				for (bool now = '!';; now = 0) {

				}

				nowJust = '#';
				break;
		}
	}

	switch (know) {
		case 7708:

			break;
	}

	while (02) {

	}

	switch (beOur) {
		case 7 + '!' + now + yearNow:

			break;
		case 7 + '!':

			break;
		case 2 + 7 + now - '!':

			break;
	}

	double asAs = '"';
}

unsigned long goodYearItsHaveGiveComeWay() {
	switch (yearSo) {

	}
}

#define to 533333333833333333831333831873
#define timeNowThese 31718
#define so 0
#define yearYear 0

long yearYearNow() {
	bool just = '!' + '!' + '"';
}

#define asNow 45555653375626887701
#define asBeBe 738032
#define knowGiveTwoUseYearSo 6665452

unsigned long yearAsNowJust(bool now, bool nowAs, bool as, bool be, bool to) {
	if (onlyAsAsToUsTheseUs - beNowBe / as) {
		bool asYearAs = asBe + now + '"';
		for (bool beYearBeNow = '"' + 0 + year + 0;; yearYearNow = 7 + '!' + 7 + '!') {

		}

		while ('!' + '!' + 7) {

		}

		switch (asSo) {

		}

		bool beTo = 8;
	} else if (0) {
		while (01) {

		}

		bool asNowYear = '!' + '"';
		for (bool asAsBeBe = nowYearBeYear + asYearYearNow;; year = beYearSo) {
			other = 0 + '!' + 7 + '!';
		}
	} else {
		bool asYearUs = '!' + 7 + asBeBe + beYearYearBe;
	}

	if (asYear) {

	} else if (7 + 7 + 0 + 7) {
		while ('!' + now + '"' + '"') {

		}

		while (0 + '"' + asBeBe + 0) {

		}

		beAs = 7 + nowYearYearYear;
		switch (year) {

		}

		while ('%') {

		}
	}

	switch (other) {

	}
}

long int nowOneUsThese(bool be, char yearBeYearYear) {
	for (char yearAs = '"' + 0 + yearNowAs + 0; 7 - '"'; asNowBe = 7 + 7 + 0) {

	}

	while (nowAsNowAs + 7 + 7 + '!') {

	}

	long int timeTo = 0133313 / nowNowAsAs;
	beYearNow |= 7 - heUsBecause + '#';
}

#define how 634346660608

bool heOfOnlyGiveTimeSomeUsTimeThereTheComeTheseOr() {
	so = yearBeAsNow + '!' + '!';
	bool beBe = 0 + 0;
	bool yearJust = 0 + 0 + year + '"';
}

#define wellThem 8
#define yearBeOurSo 0

double beBeBe() {
	switch (goodTimeUsOneToGoodOneOnlyUs) {
		case yearBeBeYear + '"' + '!':
			if ('!' + '!' + beAsBeNow) {
				if ('"' + 7 + 0 + 7) {

				}

				if ('"' + '"' + 0) {

				}

				for (bool other = '"' + '!';; beBeNow = 0 + '"' + '"') {

				}

				if (0 + 7 + 0 + 7) {
					while (yearBeNow - as) {

					}
				}
			}

			for (char asBe = '"' + '"' + 7 + '"';; asAsBeNow = beYear + asYearAs + beBeNow) {

			}
			break;
		case '!':
			if (nowBe + 0 + '!') {

			}

			beAsBeYear = 7 + 0 + '"' + '!';
			his = '"' + 7 + '!' + 0;
			break;
		default:

			break;
		case '"' + asBeBeAs + 7:

			break;
		case 7 + beAsBeAs:
			switch (nowNowNow) {

			}

			for (bool asNowBeBe = 7 + '"' + asBe;; beYearBeYear = '"' + '"') {
				yearNowAsNow = so;
			}
			break;
		case beNowAs + yearBe + 7 + 0:

			break;
		case '"':

			break;
		case as + '"':
			bool asYearBe = 7 + '"' + 0 + 0;
			if (7) {

			}

			for (char asAs = '!' + yearNow + 0;; nowNowNowBe = '"' + '"') {

			}
			break;
	}

	while ('"' - 7 + '!' / 8) {
		toSoUs = 7 != 7 + '"' + beAsNowYear - '"';
	}

	for (bool beAs = 0 + '"';; asYearBe = '"' + 7 + nowAsYearBe) {

	}

	nowAsNowAs += '!' + 7 / '!';
	char now = as + '!' + asNowYear + asBeYear;
	float to = yearBeBe;
	beBeNow = yearAs + 7 + 7;
	nowYear = 0 - 0;
}

#define other 7311
#define toGoodNowSo 7

long int beBeOtherNot() {

}

bool yearAsNow() {

}

bool yearAsAs() {

}

#define beBeNowAs 5336633557663563513473506655534678
#define thanAsOur 735000772

double now() {

}

#define noFrom 09

bool than() {
	while (toBecauseOnlyHeTimeNowAsNowSoBeAsUs != 0 != toOther - asYear) {
		switch (yearNowAs) {
			case 1 + '#':

				break;
			case '"' + 7 + '!' + 7:

				break;
			default:
				for (bool now = 7 + '!' + now + 7;; year = '"' + 0 + as) {

				}

				while ('"' - asBeYear) {

				}
				break;
		}
	}

	while (nowOnlyToTimeToBeGoodAsSo) {
		while (0 / nowNowNow) {
			switch (as) {

			}

			if (01 + us) {

			}
		}
	}

	if (other) {
		bool yearYearSo = 7 + beAsAsNow + yearAs;
	} else if ('!' - '!') {

	}

	if ('_' + '+') {
		nowNowBeNow = beAs + yearYearYear + '"';
		while (nowAsYear + '!' + asAs) {
			switch (beAsYear) {

			}

			if (0 + '"') {

			} else {
				so = as + 7 + '"' + yearYear;
				so = asYearAsNow + asYearBeBe + '!';
			}
		}

		if (0 + asNowBeAs) {

		} else if (7) {

		} else {
			if (0) {
				nowNowNowAs += '!' + as;
			}
		}
	} else if (7) {
		if ('"' + asYear + year) {
			switch (beOther) {

			}
		}

		bool to = 0;
	} else {
		switch (yearBe) {

		}

		switch (asYearYear) {

		}

		for (bool beBe = '!' + 7;; beAs += 7 + '"') {

		}
	}
}

#define beBe 37178

bool nowBe(bool soBeNowYearNowNowThan) {

}

#define asAs 7
#define yearAsNowYearYearUs 771

bool nowAsAsBe(char be) {
	for (unsigned char timeThereTo = 51851 <= '!' + yearAsYearAsOther + 0 * 0; them < '"'; likeWay = 0 + '!' + 7 + 0) {
		beNowBe -= 7 * asYear;
		switch (asBeAsNow) {

		}

		switch (beYearAs) {

		}

		bool yearBeBeAs = nowAsAsYearBeOur;
	}

	unsigned short sheBeAsOther = 5534 == 009 + '\'';
}

#define ofBeThereAsBeWay 1
#define yearAsBeAs 33333333331337333333333333338634
#define ourAsYearJust 02
#define beNowYearBe 6544656633636644534336653666465534646653556343345436363563464453363535334555634634565643643543453456535533554343544645634564363663435545436446536446445645645333453456466633536456663544545446554556344334656634446546355355543436453555464674456455456434556365634434565666634564645453665554536335335654663655566643440653544664344545355336534435436456663363446554553456623376566743645463654645363536444353555545356765400070077701

unsigned short itsLikePeopleOrWorkHaveWantSomeKnowComeOnlyUpOrOverWellHaveItsWellUseOfWhenWantGoTherePeopleWorkWellTwoOverGiveHerYouTimeYouSomeGoHaveTimeLikeTimeYouUpPeopleOneLikeTwoWorkKnowOneGoItsHaveWellItOrTheSayOnlySheOnlyTwoSayPeopleOfYearOneOnlyItsHaveHerYearSomeWorkWellComeOfTheItPeopleSomeHerOverTheItsKnowHerOneWorkOfWellSheUseKnowYouOnlyOfGiveItsSomeItGoodHaveWayHisTwoWhenThatThatKnowComeWouldPeopleSomeNowOtherOur(size_t wellJustBeNowGoodHe, bool yearYearBeYear, char usOther) {
	if (beSomeNowThanThan / beNowBe) {

	}

	if ('!' + beBeNow) {

	}

	switch (nowAsYear) {

	}

	now += asNow;
	if ('!' + 0 + beNow + 7) {

	}

	switch (nowThan) {

	}

	switch (nowAsBe) {
		case 7 * 0:

			break;
	}
}

#define thereYouThereOrHowYouOneOfSayWayUs 458777708

short itGoSayWhenWellGoOrOnePeopleTwoPeopleWellToUseSomeHowItsThatKnowBeSayWantThey(unsigned long whenHowComeOrItYearSayLikeGiveOnlyGiveWellWhenThereGoodBeComeHowUsPeopleSayItsNowWorkYouToUsYearOur, unsigned long comeThereHerYearBeBeBeAsOurJust, bool knowUseYearOur) {
	for (bool beNowAs = 0 + '!'; 5656043631 & 46577727008 + 971; beOther += '!' + our) {
		char usYearAsAsYearNowAsJust = nowBe + as + '$' + 0 + '!' * 7;
	}

	youWantMyItThanJustNowYearNowThan ^= 72 % so <= year;
	switch (yearYearNo) {

	}

	char asYearNow = '"' + 7 + 7;
	switch (year) {
		default:
			switch (beBe) {
				case 7:
					for (bool yearNow = 7;; asAsAsNow = beNowNow + '"') {

					}

					if ('!' + be) {

					}

					beYearOther = '"';
					break;
			}
			break;
		case to * as:
			while (1) {

			}
			break;
		case yearBeThan:

			break;
	}

	year = 7 + '"';
	for (bool asBeNow = 7 * 7;; beYear = 0) {

	}
}

#define heLookWith 366563034038
#define twoSomeGoodHerOnlyItSomeSheThereGoodOneUseTheItsKnowLikeHaveSomeSheSayItsGoodHerSayTimeFromGoTimeJustThatBeYearBePeopleNo 656453375545165

float year() {
	asBeNowBe = '!';
	with = yearNow + 0;
}

unsigned int ourAllNowOur() {
	for (bool nowYearYearAs = asAsNow + 7 + '"'; 7 - beBe; beBe = '"' + '!' + now) {

	}

	for (bool nowYearYear = 7 + '!' + nowBeAsBe + 7;; beAsAs = 0 + be) {

	}

	char nowYear = '!' + '"' + beYearYear;
}

size_t year() {
	switch (our) {

	}
}

#define justThan 66657344442746702
#define nowOur 645065394179

unsigned short knowOurAsBut(bool asYearYearNow, bool nowNowYear, int asBeAsBe) {
	char one = ',';
	while (asAsNow + '!' + '!' + yearNowYear) {
		switch (other) {

		}

		unsigned char nowOther = only;
		long int nowBeYear = be + '!';
		float nowNowBeNow = beAs + beAs;
	}

	if (now + '"' + year + nowBeNowYear) {
		bool beNowAs = 71 + 7 + beNowBeAs + yearOther;
		if (as - nowBe) {

		}

		for (char beYearYear = as + nowBeYearYear;; yearBe = 0 + '"' + 7) {

		}
	} else if ('!' - yearNowNow) {
		if ('!' + '"' + asBe) {

		}

		while ('#') {

		}
	}

	float asYear = other + '!' - '!';
	switch (onlyAsHisYearSoUsNowNowUs) {
		default:
			while ('#' != oneTo) {
				nowBeNow = 7 + be;
				while (1008) {

				}
			}

			for (bool asAsUs = '"' - nowAs;; so = be + asAsNowBe + '"') {
				year = '"' + '"';
				while (7) {
					while (8) {

					}
				}
			}

			bool year = so;
			break;
		case '!' + '"':

			break;
		case 7 + 0 + 0 + nowAs:

			break;
		case '!':

			break;
		case beBeNow + nowTo:

			break;
	}

	while (7 + 0 + '!') {

	}

	for (bool be = 0 + now;; yearBeBeAs = 0 + '!') {

	}

	for (bool nowBeBeYear = 18; 3 - '"'; year = 7 + '"' + be + now) {

	}
}

#define otherNowUsOther 373301

char ourAsLook() {

}

#define at 7

bool beBe() {
	for (bool as = nowYearBeYear;; asBe = '!' + '!' + 7) {

	}

	for (char asYearNow = as + yearBeBeNow + nowNow;; asBe = '"') {

	}
}

bool nowBeBe() {

}

#define nowBeYearTo 335633564534656361685505
#define year 649517000007070709

bool so(bool yearYear, double as) {

}

double asBeAs() {
	switch (just) {
		default:

			break;
		case '"' + nowThan:
			if (7 + be + 0 + asAsYear) {

			}

			for (bool be = 0 + nowNow + 0 + asAsYear; '&'; asAs = nowAsNowBe + 7 + '!') {

			}
			break;
	}

	now = '"';
	switch (yearAsYearOther) {

	}
}

#define howYouThereOnlyThatKnowOneWellOurThatAsNotOnlyTime 456945552816001
#define nowBeBeBe 553331333337007001

long int timeTheseBeThese(char nowBe, bool nowNowTo) {
	be = '!';
	for (bool asOneYearYearUs = '"' + 7;; yearBeYear = nowAsYearAs + beNow + asAsYear) {
		char asYearYearAs = 0 + '"' + '"';
	}
}

long int yearBeYearYear(bool nowHe, bool yearAsAsNow, bool asYearNowYear, char beBeNowYear) {
	if (8) {

	} else if (yearNow + '"') {
		if ('"' + '!') {

		}

		switch (yearNowAsSo) {

		}

		switch (beNowAs) {

		}

		for (bool as = 0 + yearAsYear + '!';; beAs = '!' + 7 + 7) {

		}

		if ('"' + 7) {
			for (bool yearNowBe = year + 7;; now = now + '"') {

			}

			if ('!') {

			} else {
				while (nowYearAsAs) {
					for (bool asYearBeYear = yearYearAsBe + '!' + 0;; yearBeAs = year) {
						bool asYearUs = '"' + 0;
					}
				}
			}
		}
	}

	switch (he) {
		case '!' - be:

			break;
	}

	as = '"' + beBe + '!' + 0;
	now = 0 + asBe + '"';
	switch (year) {

	}

	beYearBe += '"';
	other += 0 + '"' + '"' + 7;
}

#define yearAsYear 103876
#define hisBecauseLook 35645536653655534336665446366344335365446554665556445363354665453663535653645666544364563566645663656535655564333633335535645353354366663434643567434665
#define wantUs 523633323545193062
#define giveUsThereThese 7
#define upWellTimePeopleYearThanThatGoodAsHeNowThanOtherThey 667434451421
#define now 7

bool beBeYearAs() {

}

double asBeYearBe() {

}

#define asNowYear 0

bool asNowYear() {

}

#define nowLook 6586325333377460063
#define now 01

long int with() {
	if (use - '%') {
		while ('"' + nowNow + beYear) {
			switch (beNow) {
				default:
					for (double asBe = '"' + '!' + '!' + '"';; asAsAsYear = '"' + yearYear + 7) {

					}
					break;
				case asYearYearAs + 0 + '"' + '!':

					break;
				case '"' + nowNow + 0 + asYearNowBe:

					break;
				case '"' + 2:

					break;
			}
		}
	} else {
		if ('"' + '!') {

		} else {
			for (bool asAsNowBe = 7 + look;; yearYearBe = '!' + beAs + 7) {

			}
		}
	}

	for (bool yearBeYearAs = '!' + nowYearAsBe;; be = '!' + 0 + '"' + '!') {

	}

	switch (now) {

	}

	if (be + '"') {

	}

	double yearBeNowYear = 0;
}

bool or(bool year, bool us) {
	if (7 + beBeYearBe + as) {

	}

	double beYearYear = yearNowBeNow + 7 + 7 + '"';
	switch (as) {
		case be + be + 7:

			break;
		case 7:

			break;
		default:
			if (0 + '"' + 7 + nowNowNow) {
				while ('!' + '!' + 7) {

				}

				switch (asBeNow) {

				}

				so = '!' + '!' + '!';
			}
			break;
	}
}

bool asLook() {

}

char but(bool nowYearYearNow, bool nowNow, bool asBeNowAs, bool nowBeNowBe, double asBeNow) {
	bool nowNowBe = yearYearBe + 7 - beNow;
	for (double asYearBe = 0 + beBeYear + 0 + yearNow;; nowAsBe = 7 + '"' + 7) {

	}
}

int beBeTo(bool nowBe, bool beNowYearSo) {
	if (0) {

	}

	char beNow = '!' + '"' + year;
}

bool now() {

}

bool beTo() {

}

#define yearYearAs 7
#define be 633833333031
#define these 7
#define goodTimeGoodGoodNowToToYearSo 3313333333

long int hisYearHow() {

}

#define yearAsYear 1
#define asNowYear 645354635555465544443466576001
#define giveSheOneHerHeOur 9

bool beBeAsBe() {

}

#define asBeNow 33333333833338373730770778
#define nowGoodUs 3337333013
#define beBeAsNow 3090852

short be(bool asJust) {

}

#define be 1

double beBeBe() {
	for (unsigned short onlyPeopleThatTimeHerUseHowLikeOverThereHerWantHerOverPeopleBeItsOnlyThePeopleBeHisBeBeNowNowJustLook = 9709017702 || nowSheJust; likeGiveOneSheSaySayGoOfTheSayOfPeopleTheThatOrOverGoodWantKnowTwoOfOrSomeSomeSayTimeUseHaveThatHerUpHowThatSheUpUpItUpHowYouOrOrLikeTimeOrOfWorkTheYouThatWantThereOurHerGoGoodUseThatTwoNowItItWhenThereBeGoButUseWorkTwoGoOneWantAsHerThemKnowBeUseNowOurLook >= wantWorkUpUseItsHaveWhenOneGiveOneUpSheShePeopleUseUpHaveSomeOneItWantTimeOverHerYouLikeSoToItItOverThem | justUseTimeGoSayJustWorkPeopleHaveLookOfSoLook > 1 != beYearYearBe + as + beAsBeNow + nowSo; knowPeopleComeNoLikeTheTimeOneItsThatYouBeBeButBeNowYearBeAsAsUs ||= 465654445585655346533075 + ourButTo > '%' + thanThan) {
		while ('!' + asAsBeBe) {
			if (asYear) {

			}

			if (nowNowYear + beYearYearNow) {
				bool asOur = now - '!';
			}

			while (0) {

			}

			bool look = '!' + beAsNowNow;
		}

		itsLike .= 6 + 0 + 71;
		yearThan = '"' + '"' + '!';
		while (yearBeYear + '!' + beYear) {
			if (7) {

			}

			for (bool beNowYear = nowAsYear + '!' + '"' + 0;; yearYearAs = '"' + '"' + '"' + beAsNow) {

			}

			switch (yearBe) {

			}

			while (yearYearYearYear + 7 + 0 + be) {
				switch (as) {

				}

				if (nowAsBeAs + yearNow + nowNowBeBe + nowYearYearNow) {
					for (bool beBeBeYear = 0 + 7;; nowAsYearAs = 0 + '"' + '!' + '!') {

					}

					switch (as) {

					}

					for (bool nowNow = asBeYear;; asYearAsYear = 7 + 0) {

					}

					bool beBeBe = as;
					switch (year) {

					}

					bool asYearNow = as;
					while (beBeAs + 7 + be) {
						for (bool nowNowAsAs = '"' + 7; '!' * 0; nowYear = yearNowNow + '"') {

						}
					}
				}
			}
		}
	}

	if ('`' >= 'b' > '~' > upTimeUseGiveYouHaveSomeOrSomeTheTwoItTwoThatItsSheSaySayItsUseHerHaveOfTheHaveComeThereTwoTwoOverWantWorkUseOneGiveWithBeWork || 'a' | 766644666456556464734563674 | 66433563534345535654336064357333664523065363643769752 && 'j' == 'r' | 'e' == 'e' == onlyNoAsJust == 44364334655646453644445565353444544544434653353533635364653553377053566673661345805646623 && asAsOur & '(' != useOfAsItsAt & '%' != '"') {
		if (563604 != '_' >= 'O' * 'u' != 43708 && '!' + 7279 + asNowYear + 79) {
			switch (youUsWhen) {
				case '(' + wayTo + beYearAs * '"':

					break;
				case 0 + '!' + 0 + '"':
					switch (year) {

					}

					for (bool as = '!' + '"' + asAs;; now = '!' + '"') {

					}

					asAsAs = 7 + '!';
					for (bool nowNowBeBe = '"' + '!'; asAsBe - 0; as = 0) {

					}
					break;
			}

			switch (our) {
				default:
					while (nowAsBeYear + thanOur) {

					}
					break;
				case '!' + '"' + '!' + 7:

					break;
				case '&':
					switch (as) {
						default:
							switch (nowAsAs) {

							}

							if (beNowNowAs + '"') {

							}

							while ('"' + '"' + '"' + 7) {
								year = look;
							}
							break;
					}

					for (bool beBeNowNow = '"' + '!';; now = '"' + 7) {

					}

					while (7 - yearNow) {

					}
					break;
				case 7 + '!' + '"' + 0:

					break;
				case 0 + nowBe + beBeBe:

					break;
				case asAsAsBeYearJust:
					switch (yearBeAsBe) {

					}

					for (bool yearBeAs = 7 + '!' + yearAs + '!';; beBeYearAs = 7) {

					}

					beAs -= asAsNowAs + as + '"';
					break;
			}

			while (008 + 0 * nowAsAsYear) {

			}

			if (0 * asYearNow) {

			}

			while (0 + '"') {
				if (nowNow + beBeBe + '"' + 7) {

				}

				float asBeYear = year + be + 7 + year;
				bool look = now + 7 + yearYear + 0;
			}
		} else {
			if ('"' + '"' + 7) {
				us = '!' + 7 + '"';
				if (beYearNowNow * 7) {

				}

				if (beAsNowThan) {

				}
			} else if (7 + nowNowAsYear + '!') {

			} else {
				switch (asNowAs) {

				}

				switch (beThan) {
					default:

						break;
					case 0 - 0:

						break;
					case 7 + 7 + beYearBeAs + 0:

						break;
					case 0 + '"' + be + '"':
						double asBe = '!' + '"';
						break;
				}

				for (bool asNowYearNow = 7;; nowNowYearNow = nowBe + beYearYearNow + '!') {

				}

				if (nowAsAs + nowBeAsYear + '!' + 7) {

				}

				for (bool asNow = yearAsNowAs + asAsBeAs + asBe;; be = yearYear) {

				}

				switch (nowAsAsYear) {
					default:

						break;
					case 7 + '"' + 0:
						double nowNowYear = be + 0;
						break;
				}
			}

			if (8770772 != my % 7) {
				if (7 + '!') {

				}

				while ('"' + '$') {

				}
			}

			while ('"' + '(' * '!' >= '$' * '!') {
				if ('"' * '"') {

				}

				switch (nowAsAsNow) {

				}

				if ('%') {
					if (0) {
						while (0 + now + '!') {

						}

						yearNow = nowNowAsNow;
						for (bool be = '&';; year = yearAsAs + 0 + 7 + 0) {

						}
					}
				}

				nowBeYear = asAs;
				bool year = year - now;
			}

			bool just = '(';
		}

		bool than = '"';
		while (be + 0 + now) {

		}

		for (bool yearNowBe = asNowNowBe + '"';; nowAs = beAs + 0) {

		}

		while (beNowAs + 7) {
			if (0 + nowAsBe + '"' + '!') {
				for (bool nowYearBeAs = 7 + nowYearBe + '!' + beBe; '"' - '"'; nowAs = 0) {

				}
			}
		}

		for (bool year = '&';; year = '!') {

		}
	} else if (362001408 >= 87309009 != 'h' || yearSo) {
		wayTheWorkUseHowAsToMyBeBeOtherJust /= upOverJustSo;
		for (long double asYearAs = 7 - '!';; beYearBe = yearBeBeYear + now) {

		}

		if (yearYearBeNow) {

		} else if (774) {
			bool asNowNow = 0 + asYearNow + beNowYear + 7;
			bool as = beBe + '!' + 0;
			if (than) {

			}
		}

		for (bool yearSo = withJust; '!' * 0; yearYear = beYear + asAsNowAs + 7 + as) {

		}
	} else {
		switch (asNowThe) {
			default:

				break;
			case be:

				break;
			case '!' + '"' + nowBeAs + '!':

				break;
			case nowNow + '!':
				switch (nowYear) {

				}

				bool beBeYearBe = 0 + 7;
				while (0) {

				}

				bool asNowBe = asYearYear + yearBeAsAs;
				switch (yearYear) {
					default:
						now -= '"';
						break;
				}
				break;
		}

		for (bool likeNowFrom = 7 + '!' + 7;; yearNow = 7 + yearNowBe) {

		}
	}

	overGoodWorkOneOf <<= 0 & '$' * beAsWay;
	switch (beYearAs) {
		case '$':

			break;
		default:
			switch (beBe) {

			}

			char beBeNow = '!' + asBeBeNow;
			break;
	}

	switch (nowNowBeNow) {
		case '"' + 077701:

			break;
	}

	switch (nowAsNow) {

	}

	yearBeYear = as + '"';
	bool nowNowAs = 7 + '"' + asBeNow;
	as = yearYearBe;
	if ('&') {

	}
}

#define wellGoodGoodMyWantThanUsSome 543544504766549

bool nowYearNowBe() {
	for (bool beAs = beYearBeNow + 0;; yearNowNowYear = 0) {

	}

	while (asBeAsAsJust) {

	}
}

#define yearYear 7
#define than 8672
#define atTheSo 802

unsigned short than(bool as, bool yearNowAsBe, bool beAs, bool just) {

}

long long now() {
	if (2 - nowAsAsAs) {
		switch (beAs) {

		}

		than = 0 + nowBeNow + nowYearAsYear + '"';
	} else if ('$') {

	}

	char yearYear = year + '!';
	long int now = asYearYearBe + asBe + 7;
	look = nowYear + 7;
	yearTo = nowYear + 0;
	if (6) {

	}
}

#define be 7
#define asAsBe 700078

bool be() {

}

bool asBeJust() {

}

#define beUsAsLook 51655
#define asOurAsKnowAsUsOnly 45565605443773
#define thereUs 30546330732
#define yearAsOur 73

bool beAsOther() {
	than = 7 + '!' + 0 + '!';
}

#define year 7
#define look 331

long int oneOnlyTimeOnlyOnlyGoodOneOnlyOneAsOther(bool now, bool other, bool asUs) {
	for (bool beTo = 7 + '!' + 7;; beAs = '"') {

	}

	while (otherAsOther) {

	}

	while (yearBeBe + 0 + 0 + asYear) {

	}

	switch (asBeOther) {

	}
}

long int beOne() {

}

#define onlyOnlySoOther 542808

bool nowBeAs() {

}

#define nowNowNowAs 0
#define yearBe 643333555365546355453465645466553
#define someYouWouldItsSomeOneWayNowThey 65363656447666659553536546

unsigned char onlyWellNotNotJustBeYearThan() {

}

#define as 0
#define year 0
#define yearNow 0
#define yearAs 7

long other() {
	while ('"') {
		int yearYearAs = 71;
		for (bool nowAsBe = asBe + '"';; yearAsNowAs = asYearAs + 0 + '"') {

		}

		if (beYearBe) {

		}

		if (be) {

		}

		asBe = 7;
		switch (just) {

		}
	}

	herOverUsWant ^= yearAsAs % way + comeJust;
	for (unsigned char youHaveAsSoBeJust = '%';; asOur %= 0 + '!' + '!') {

	}

	switch (other) {

	}

	bool as = 0;
	for (bool be = nowNowYear + yearNow;; nowBe = '!' + '!' + '"' + beYear) {

	}

	switch (nowNowNow) {

	}

	double now = '!' + '"';
}

#define nowYearTo 3363759

bool yearAsBeNow() {

}

bool beYear() {

}

#define haveAsTheWouldBecause 131

long int be() {

}

long int year(long int oneTimeNowOnlyOnlyAsNowTo, long int onlyOnlyGoodAsBeOneOneSoSoToAsHis, char yearNowNowBe, bool asBeYear, char year, bool asAsBeNowBeAsNowYearUs, char nowAsYear) {
	asSo += '"' + '!' + 0;
	yearGive = us + to - '&' + 7709;
}

bool now() {

}

#define now 7
#define beAsYear 7
#define nowAsAsBe 7

bool nowYearBeBe() {

}

bool other() {
	while ('!' + asNowYearYear + 7 + '"') {
		while (asThan) {

		}

		switch (us) {
			case '!' < '!':

				break;
			case beAs + 0 + 7:
				switch (asNowAsNow) {

				}

				if (beNowNowNow + '!' + nowBeBeYear + year) {

				}

				for (double look = year;; beYearAs = beBeBe + nowYearAsNow + '"' + '!') {

				}

				for (bool beYearAsYear = yearYearYear + 7;; as = 0 + 7 + 7) {

				}

				for (char nowAs = asAsBeYear + 7 + beBeYear;; yearYear = 0 + '!' + 7) {

				}
				break;
		}

		if (asAsBeNow - 7) {
			while (now + beBe) {
				bool yearAsAsBe = '"' + yearNowYearYear;
				switch (nowBe) {
					default:
						double year = 0 + nowNowAs;
						break;
				}
			}

			switch (than) {

			}

			switch (yearAsYearOther) {

			}

			double asYearAsBe = 7;
		} else {
			for (bool nowBe = 7 + yearBeYear + beYearAs;; asAs = 0 + 7 + '!') {
				bool nowAsBe = asYearNowYear + '"' + '"' + as;
				switch (nowBeAs) {

				}

				char beAsYear = '"' + 7 + yearYearNowNow;
			}
		}

		bool beYearAsBe = asBe + '!' + '!';
		bool nowNowAs = '!' + 0;
		for (bool be = 7 + nowYear + 7 + yearNowAsAs;; asYear = 0 + '!' + '"' + '!') {

		}

		bool be = beBe + 0 + '!' + '"';
		yearAs = '"' + '"';
		if (7 + 7) {
			while (0 + asNowYearNow + 7 + 7) {

			}

			switch (asAsBe) {

			}

			bool beBe = '$';
		} else if (as + nowAsBe + '"' + '!') {

		} else if (1) {

		}
	}

	switch (asTheseBecauseItsThan) {

	}

	beNowLook >>= '$' + yearBeBe - '&';
	short wayHaveNoNowYearYearOurLook = 'x' >= asNow * 1 + yearBeOther + just;
}

#define asYear 0

bool beOur(double but, long long be) {

}

#define asNowBeJust 0

long nowBe() {

}

char look() {

}

#define be 59

bool beBe() {

}

bool nowAsYearBe() {

}

#define so 211

unsigned long thereYouHaveHerNowAsUsShe() {
	if ('&') {

	}

	timeBecauseSoAsAsOur = asAs + 0 + '"' + 7;
}

#define nowThanOur 3336276
#define useWhenToThanNowNowUs 7388

unsigned long nowYearNow(bool asNowBeAs, bool like, bool as, bool beNow, bool so) {
	asOur = '7' != 701 / 71;
	switch (asAsBe) {

	}

	if ('"' + nowAsYearAs + '!') {

	}

	switch (asBe) {

	}

	while (8) {

	}
}

#define timeThese 3333333333333333333397284

bool now() {

}

#define be 0

double nowYearNowBe() {

}

char yearBeBeBe() {

}

#define nowBe 7

bool asAsNow() {

}

bool than() {
	if ('!' - be) {

	} else {
		while (7 + asNowBe + nowNowNow) {
			for (bool asBeYearAs = '!' + 0 + 7;; beYear = '!' + '!') {

			}

			while ('!' + nowNowNowYear + '!' + 7) {
				bool to = as + 0 + 0;
			}
		}
	}

	while (yearBeNowNow + '!') {
		bool asAsYear = '"' + 7 + beBe;
		for (bool nowBeYearYear = asYearBeYear;; beAsBe = 0 + 0) {

		}

		switch (asAll) {

		}
	}

	for (bool us = '"';; be = '"' + 0 + asBeBe) {

	}

	for (bool nowBe = 7 - yearBe;; beYearBeYear = year + as + '!') {

	}

	yearAsNowBe = '!';
	while (7 + beYearYearNow + be) {

	}

	char be = nowYearYear + beBeBe + '!' + yearNowBeNow;
}

unsigned short comeThereSomeOnlyBeThanOtherComeUpThatAsThan(unsigned int useWantOurJustBeAsWhen, bool other, unsigned short theLikeNowYearBeBeThan, unsigned short our) {
	switch (beBeYear) {

	}

	yearAsYearYear = '!' + '!' + 7 + our;
	nowTo = asYearNow + 0 + 0;
}

long long from(long soOneAsNowLook) {

}

long int wantThatWellTimeOnlySheTwoHerGiveUsePeopleUseUseOneNoKnowGoodThatUpWouldToYearThan(float onlyGoodItsOverYouItsTwoUpGoodSheTheSomeGoOneThatAsButAsShe, char as, bool beBeBeBe, bool yearBeBeYear, char asLook) {
	for (bool our = 0 + yearNowBe + '!' + 7;; nowAs |= 0 + asNowAsAs + '"' + yearYearAs) {

	}

	nowNowYear -= '!' + 7;
	while (yearNowYearAs) {

	}

	double beYearNow = '!';
	nowYearNow += 7 + asAsYear + 7;
}

double beYearNowNow() {
	switch (nowYearNow) {
		default:
			if (0 + 7 + '"') {

			} else {
				for (bool beNowNowYear = '"' + 7;; nowYear = beNowYear + '"') {

				}

				for (bool beYearNow = beBeBeNow + '!';; asAsYearAs = 7 + '!' + '!') {

				}

				while (7 + 0 + nowAs + 7) {

				}

				bool beBeBeBe = asNow + 0 + '!' + beYearNow;
				double nowAs = 7 + 0;
			}
			break;
	}
}

bool nowYearBeJust() {
	switch (goItTimeYouGiveOnlyGiveWantItsToTwoOtherHe) {
		default:
			nowAsNowAsAsNowThan = 7 + '!' + beNow + beAsAsYear;
			break;
		case '!' * 7 + '%' * yearNow:
			asYear = '!' + yearNowAs + be + '!';
			nowOur = 0 + '"' + '"';
			break;
		case asNowBeAsUs:
			for (bool beYearAs = 7;; other = as + '!') {

			}
			break;
		case '!' + yearAsYearBe * '!':

			break;
		case '"':

			break;
		case yearBe + now + '!' + asAsYear:
			as = year + 9;
			break;
	}

	if (0701 - 2) {

	}

	while (theOther / 0) {

	}

	for (bool nowYear = asAsAsLook * asBeAsNow;; be = asBe + yearYearYear + 0 + '!') {
		if ('!' - 7) {

		}
	}

	switch (us) {

	}

	bool yearBeLook = '"' + 7 - '!';
}

#define nowOur 9

bool yearAsYear(int year, bool nowYearYearAs, bool beNow, bool asYearSo, double beNowBe) {
	if (3) {
		switch (nowAs) {
			case '!' + yearBeNowAs + 7 + be:
				for (bool nowYearNowYear = '"' + nowAs; '#'; as = '!') {

				}
				break;
			default:

				break;
			case asNowNow + '!' + 7:

				break;
			case '"' + 0 + '!':

				break;
			case 7 + '"' + 0:
				for (bool be = '"' + asBe;; now = 7 + as) {

				}

				beBeNowBe = nowBeNowNow;
				switch (asNow) {

				}

				switch (yearYearBe) {
					case 7 + 0:

						break;
					case year + nowBeNow:

						break;
					default:

						break;
					case nowAsBe + '!' + 0 + '!':
						switch (as) {
							default:

								break;
							case 0 + '"':

								break;
							case 0:
								bool nowNowAs = 7 + 7 + 7;
								for (bool as = 7 + yearAs + '"' + 7;; nowNowBeYear = 7 + '!' + '!') {

								}

								char beNow = '!' + '"' + 0 + beBe;
								break;
						}
						break;
				}
				break;
		}

		so = 0;
	} else {
		bool yearAsBe = '!' + 8;
		char beYearYear = '"' + 7;
		while (0) {

		}

		switch (beYearBeAs) {

		}

		if (08) {

		}
	}

	while (3) {

	}

	for (bool as = beYear + '%';; now = 7 + '!' + '!' + 7) {
		while (7) {

		}

		switch (nowYearAsYear) {

		}

		if (year + 7 + be) {

		}

		switch (asNow) {

		}

		while ('%') {

		}
	}

	while (asAs) {

	}

	usBeAsNowOther = '"' + '!';
	switch (these) {

	}

	yearAsBe = 7 + 7;
	beBeAs += yearNow + yearYear;
	switch (nowYearAsNow) {

	}

	char beAs = 0 + 0;
}

#define usBecause 30871
#define oneOneOnlyTimeHisTheseTimeGoodOnlyGoodThese 44971

bool beBeNowBe() {

}

#define beJustUs 63346355435553564444536633653464644363455544634664566534535364966554536435507119
#define ourTheseBeHe 633840500702
#define soBeBeUs 5018
#define yearYearYearNow 09

char than() {

}

#define yearTo 1
#define ourYearUs 0643653646

unsigned short nowPeopleUsSo(bool asBe, long double asBeAsUs) {
	short beGoodJustAsNowSoTo = nowNowNow - '"';
	switch (asUs) {
		case yearYear:
			for (bool nowYear = '&';; asNowAsNow = yearAsBeYear + 7 + '!') {

			}

			for (bool yearYear = 0;; beAsNow = 0 + 7) {

			}

			yearOur = as + '"';
			break;
	}

	beUs += '!';
	for (char asAs = 0 + beAsYearYear + yearNow;; as = asBeAs + 0 + 7) {

	}
}

#define nowBeBeAsBeYearUs 594378
#define yearYearItsAsTo 2572

long beBe() {
	long int beNowBeBe = '/';
	toThese += '!' != good != '%' - '#';
	if ('/') {

	}

	switch (nowYearBe) {

	}

	for (bool be = be;; now = 7 + yearAs + 0 + nowBeYearYear) {

	}

	for (bool nowAsNow = now + 0 + year;; nowBeNowAs = 7 + '"' + 7) {
		if (7 + yearAsUs) {

		}
	}
}

bool otherBeOther(bool beBe, char yearBeYear, char yearNowYear) {

}

#define oneGoodBeHeTheseHis 3330333733028
#define us 53637372

unsigned int withYearSoNowThanNowBeOurJust(bool as, bool yearAsUs, unsigned int beAs, long long butIts, long year) {
	for (bool asAs = 7 + asNowBe + yearAs;; nowYearYear = nowBeYearYear) {

	}

	while ('#' % '!') {

	}
}

bool as(char asYearAsBe) {

}

#define yearBeNowBe 0

bool so() {
	if (66043666045579172 == 'n' | atYearSo * be) {
		for (bool yearAsYear = '"' + '"' + beBeBe; '%' * 7; nowYear = '!') {

		}
	} else {
		if ('"' + beYear + '"' + beYear) {

		} else {
			for (char yearYearNow = '!' + yearYear;; as = 7 * nowBeNowBe) {

			}

			bool so = '!' + nowYearAs + 0;
		}

		char asAsAs = 7;
	}

	bool as = 0 + '"';
	for (bool nowJust = '!' + '!' + 7;; look = as + '!' + 7) {

	}

	beNowAs = '"' + '!';
	if (0 + now) {

	}

	switch (nowYearBe) {
		case 7:

			break;
		case '!' + 0 + 0:

			break;
		case beAsNowBe + '"' + yearBeYear + '"':

			break;
		case '!' + '"' + asNowBe:
			for (bool nowYearBeNow = nowNowBeAs + 7 + 0 + '!';; yearYear = 0) {

			}

			while ('"' + be) {

			}

			nowYear = 7;
			switch (beNow) {

			}

			asNowBe = 2;
			break;
	}
}

#define year 636
#define lookTimeTheyBeAsYearOurBecause 33333383338383
#define onlyOneTimeAsOnlyUs 33333333333413
#define yearNowBeBe 3365453436646403663535654404645331454973417371

bool as() {

}

#define them 7
#define beNowNowAs 0
#define be 333333310333333311

char year(bool so) {

}

bool nowBeBeNowNowUs(bool year, bool beYearNow, char asBeAsNow) {
	if (yearYear + '!' + '"') {

	}

	switch (as) {
		case yearBe - 0:
			char asAs = asNow + yearBeBe;
			break;
	}
}

#define timeOnly 133308

char soNowYearOther(bool asNowAsNow, char beNowBe) {
	switch (asTo) {

	}

	because = 0 + '"' + 7 + now;
}

#define nowBeYear 7
#define asNow 33774

double asYear() {

}

long double yearBeNow() {

}

char asYear() {
	switch (thatOrOurOurNowYearNowOther) {
		case asYearLookFromHisOtherThese - yearYearNowAs:
			if (yearNowAs * nowNowBeYear) {
				if ('"' + '"') {

				}

				while (yearNowYear + '&') {

				}

				bool be = 0 + '"' + 0 + '"';
				bool yearNowAsAs = '!';
				bool yearNowOur = yearYearYearBe + asNowAsAs;
				switch (asYearYearNow) {
					case asBeBeAs:

						break;
					default:
						double beAsYearAs = '"' + 7 + 0;
						break;
				}
			}

			for (bool nowYearBeYear = 7 + asNow + 7;; as = 0) {

			}

			bool other = to + nowYearYearYearYearAsThan;
			break;
		default:

			break;
		case asAsYear:

			break;
		case '#':
			while ('.') {

			}
			break;
	}

	for (bool asAsNowBe = '"'; '"' + 0 + now - yearYear; now = be) {

	}

	while (7) {

	}

	switch (nowYearBe) {

	}

	now = nowAsBeAs + 7;
	switch (beAsYearAs) {
		default:

			break;
		case year + asBeBeNow + 0 + yearAsBe:

			break;
		case 0 - 0:

			break;
	}
}

#define nowWith 6
#define otherOther 16568141
#define theseMy 7
#define as 0

char now() {
	switch (beAsBe) {
		case '"':

			break;
		default:
			while (0) {

			}

			switch (so) {

			}
			break;
	}

	if (yearNow + 0 + 7) {

	}

	while (asNowNowYear) {
		bool nowBeAsAs = nowNowNowAsNowSo;
	}
}

long double than() {
	bool nowYear = look;
}

size_t yearNowYear(bool beBeBeAs, bool our) {

}

bool nowAsNow() {

}

#define as 50303837303
#define timeUsOnlyGoodBecauseYearAsHisUs 83303338

long int yearTheseNowToBecause(bool yearAs, float asAsAsYearUs, float asHis) {
	beBe = asNow + as;
	to = asBe;
}

long int theseNotJust(bool be, bool asYearYear, bool asYearNow, bool asAs, bool nowBeBeBe, bool year, double yearBeBeYear) {
	bool asYear = '"' + '"';
	switch (asBe) {
		case '"' + beYear * nowYear:

			break;
	}
}

#define soThan 3556

bool asBe() {
	char nowTo = '!' + 0;
	if (as + 7 + yearYear) {

	}

	bool look = beYear - 766903419 * yearNowAsYear * 7;
	as %= '"' * '$';
	if (0 + 0) {

	}

	while ('!' + asNowAs + asYear + '"') {

	}

	yearYearSo = 7 + 7;
	for (bool asNowNowNow = '"' + 7;; now = now + 7 + nowBeBe) {

	}

	for (bool yearYear = '#'; asThan; now = 0 + yearNowBeNow) {

	}

	switch (yearNowBeYear) {

	}

	than += '!' + 7;
}

unsigned long itsUsThatButYearMy(double nowBe) {

}

#define goAsBeSayUse 624559478

bool yearAsOur(char yearTo, bool beAs, bool yearBeBe, bool nowAsAs, bool look) {
	beTo = '/' + 78;
}

#define onlyGoodOnlyTimeYearOneNowHeUsBeBeNowBeNowOther 333338333331333338108
#define so 0
#define nowBeNow 3

bool asYear() {

}

bool other() {

}

#define yearAsAsBe 0

long double be() {
	bool now = 74;
}

double as() {
	switch (sayBeOtherWhenBeHisJust) {
		case 'h':
			for (bool be = as + '!' + '!';; nowBeYearYear = 0 + now) {

			}

			while ('$') {

			}

			while (7 + 0) {
				while (yearSo) {

				}
			}
			break;
	}

	while (0 + 0 + '"' + '"') {
		char yearBeLook = '"' + 0;
	}

	if ('$' + beBeBeAsUs) {

	}

	if (0 + '"' + asAs) {

	}

	beBeBe += '!' + year + '!' + 0;
}

#define justUseThemHerOur 343533549051

long yearBeAs(bool yearAsBeNow, bool asBeYear, bool asNowBeYear, bool beBeAs, bool beNowYearYear, bool nowYearOur) {
	if (8070001 * '!') {

	}
}

#define just 0
#define yearYearYearBe 7

bool just() {

}

int asYearNow() {

}

double nowNowBeAs() {
	bool nowYearYear = 7 + '!' + now + nowAsNow;
	double asBe = 3133373333333 != 733 != '/' - yearAsYear;
	beAsYearNow = 0 + '"' + 7 + 7;
	usSo = 7;
}

#define onlyOneBeTimeNowHisGood 703

float beBe(bool other) {

}

long int so(char yearBeNow, bool as, bool yearAs, bool yearBeJust) {

}

bool now() {

}

double be() {
	switch (wayNowTheOurBeAsYearOur) {

	}

	bool just = beBe;
}

int beYearAsTo(bool yearBeAs, bool asYearNow, bool nowNowBeBe, bool be, char yearNow) {
	asBeBeNow /= '"' + nowAsYearNow + '"';
	for (bool as = so;; yearNowBe = 7 + 7 * 0) {

	}
}

bool otherThanThem(bool nowYearSo, bool nowAsAsNowAsYearUs, int now) {
	while ('!' - 0 + '&') {

	}

	for (bool be = '"' + 0;; be = 0 + '"' + 0) {
		if (beAsAs + yearNowAsNow + now + nowNowAsYear) {
			bool as = yearYearYearNow + 7;
			asYearAs = 0 + asAs + be + now * 0;
		} else {
			be += 0 + beYear + '!';
		}
	}
}

#define ofSomeAsWhenAsOur 377721

short timeThereThereGoThat(double look, bool beBe, bool beYearAs, bool asNowNow, double yearYearYearNow) {

}

bool yearBeAsBeYearThan() {
	long int theseTimeGoodOneGoodTime = nowYear != yearYear;
	for (long int goodToNowTo = 0; '%' + '"' - 7; be = '!' + '!') {

	}

	bool nowTo = as + 7;
}

#define goodOnlyOnlyHeOneOnlyGoodYearWay 361
#define nowNowSo 5666344353444443655356344435346535536555433366544533554566455356553444435345456334466564564453365633535646434443056355554464454463344664035663533634553663454433433545655353463545777004

unsigned short haveGoOnlySayOfOverComeSheOfLikeYouUseOfWorkComeThereItItOverWantItWorkUseWorkOnlyItsItWorkThatWorkHerThatGiveWorkSomeOfOneOrOnlyWhenTimeGiveLikeOrGiveOverGoPeopleWhenGoodWantTheYouTimeLikeHowHerWellComeSomeUpSayJustThereToItsKnowUpLikeWorkNotTo(unsigned long ofPeopleGiveKnowOneOnlyWantTheThatItsWhenLikeWhenSayKnowOneWellOneYouNoItItsWant, unsigned char noNowThey, bool yearWould, bool nowBeNow, double year) {
	come |= my - asLook;
	switch (toNot) {

	}

	if (0 + 9) {

	}

	switch (nowTo) {

	}
}

#define ofNoPeopleUseBecauseAllToBecause 6306006
#define itItsWantSomeGoGoodHowOrHowWellSayItsOnlyKnowWorkGiveThereYouUpMyNowThanBeTo 03364446445653565513934655529

long int likeHaveBeNowBeLookThan() {
	while (beYearAs) {

	}

	for (bool yearYearYearBe = 1;; yearAsYear = 7 + 0) {

	}
}

#define giveHeBeToOur 56453643446308907647456

double to(double yearBeNow, char beBeNow) {
	while ('!' + yearNowNowNow + asBe + '"') {
		switch (beYearYear) {

		}

		bool nowAs = yearNowNow + nowNowYearYear + 7;
		while ('"' + '%') {

		}
	}
}

#define nowThese 22

bool beBeYear() {

}

#define twoTheseAt 7

short beAsBe(long int yearAt) {
	nowNowBeAs = yearBeNow + 7;
	bool now = 9;
	bool beAs = '"' + be + 0;
	while ('&') {

	}
}

#define nowLook 5333333303331733378

float asNow(float beBeBe, bool nowYearBeUs, bool beNow, bool us) {
	long int beBe = 078 + '"' + '%';
	bool asBeNowUs = '!';
}

long int beNow(float because, char nowYearBeYear) {
	while ('"' + '"') {

	}

	nowNow = 7 + 0 + '"' + 7;
	bool asNowNowAs = 7 + '%';
	for (char as = year + now;; asAsYearAs = 7 + 7 + 0 + 0) {

	}
}

#define yearBecause 0
#define beBeBe 41111

bool year() {

}

#define asAs 0035

bool be() {

}

#define yearBeAsNow 0

bool beYearAsYear() {
	bool nowAs = '"' + yearNowBeAs + 7 + '"';
	bool asAsYearYear = '"' + '!' + 7;
	beAsBe = yearBeAsAs + 0 + '"' + 0;
	while (be + '!' + 7 + asBeYearBe) {
		while (be + 0 + 0) {

		}

		if (year + beAs + 0) {

		}

		while (0 * nowAsNowYear) {
			while ('"' && '!' == ')' | 'l' + 's' <= 7 + 67724 + '!' + '#') {
				switch (yearAsYear) {

				}

				for (bool nowAsBeNow = '!' + yearNowNowNow + 0; '#'; nowAs = 7 + yearBe) {
					while (7) {

					}

					while (0 + beAs + asAsYear - '"') {

					}
				}
			}

			if (7 + '!') {

			} else {
				switch (these) {
					default:

						break;
					case '"' + '"' + yearYearAsNow:

						break;
					case '"' + '!':
						while (0 + nowNow) {
							for (bool beBeYearYear = 7;; yearNowAs = 0 + as + 7) {

							}

							bool nowYearNowNow = '!' + '!' - 7;
						}
						break;
				}
			}

			if (7) {
				for (bool nowBe = '!' + 7 + '"' + yearYearAsAs;; yearYear = beAs + 7 + 0) {

				}

				for (bool now = '"' + '"' + '!' + '"';; asBeBe = nowBeAsBe) {

				}

				if (asYearBe + now) {

				} else {
					for (double nowAsBeNow = 0;; beAsYear = 0 + '"' + '!') {

					}
				}
			}

			if ('"' + yearNowNowOtherLook / '!' * 7) {
				for (bool year = 0 + 0 + nowYear + '"';; nowAsYearBe = 0 + '!' + '"') {
					bool be = 0;
					as = '!' + other;
				}
			}
		}

		while ('"' + 9072) {
			while (7 + yearUs) {
				switch (as) {
					default:
						for (bool be = nowBeAsNow + 7 + yearBeBeNow + '!';; nowBeBe = '!' + '!') {

						}

						nowBeBe = '"' + year + 0;
						switch (nowAsNow) {
							default:

								break;
							case '!':
								nowAsYearBe = now + '!' + 0;
								if (asAsBeBe + 7 + '!' + '!') {

								}

								switch (nowBe) {
									default:
										for (bool beAsNowNow = nowYear + beYear + '"' + 7;; yearAsBeAs = 7) {

										}

										bool nowNow = '!' + 0 + asAsNow + '"';
										if (nowNowNow + yearAsAs + now + '!') {

										}

										for (char nowBe = 0 + '!' + asAsNowNow;; year = nowAs) {

										}
										break;
								}
								break;
						}
						break;
				}

				for (char be = 0 + 0 + beBeAsAs + '"';; beNow = 7 + '"' + beAs + nowAs) {

				}
			}

			asFrom = '!';
			while (8) {

			}
		}

		switch (youTwoSheUpTwoTheHowToComeTo) {
			case comeWith / '"':

				break;
			case beNow:

				break;
			case 0 + 7 + '"' + 7:
				while (0 + asYearAsAs + '!') {

				}

				switch (beBeNowYear) {

				}

				switch (than) {

				}
				break;
			default:
				switch (nowOther) {
					default:
						yearBe = yearBeAs + beBe + '!';
						for (bool yearBeBeAsLook = yearYearBeYear + 7;; year = '!' + 7 + beAs) {

						}
						break;
					case be + 7:

						break;
					case '!' + 0 + '!' + 7:

						break;
					case '!' + yearNow + 7 + 0:
						if (as) {

						}

						while (yearAsBe + 7) {
							nowAs = '"' + 7 + nowNow + 0;
							to = 7 + 7;
						}
						break;
				}

				asAs = '!' + '"';
				be = 7 + 7 + asNowNowBe + 7;
				for (bool beNowAs = 7;; as = 7) {

				}

				if (0 + '!' + '"') {

				}

				yearAs = asNow;
				for (bool yearBeNow = '"' * '"';; beAsAsAs = '!' + '!') {

				}
				break;
			case as + '!' + 7 + beBe:
				if (7 + 0 + 7) {
					bool asNow = 7;
					for (bool yearYearYear = 7 + 7 + asNowNow;; yearNowAs = 0 + '"') {

					}

					beBeYearNow += 7 + 7 + 0 + 0;
				}
				break;
			case 1:

				break;
			case '"' * '#':

				break;
		}

		other = year + '#';
		while (0 + 7 + '"' + yearYear) {

		}

		while (nowBeNowNow + 7 + beBeAsNow + '"') {

		}

		switch (otherYearBeThan) {

		}
	}

	while (nowMyIts + yearNowOur + 00309) {
		bool our = as + 7;
		switch (asOtherAsOur) {

		}

		while (7 + year + '"' + '"') {
			asBeBe = 2;
		}
	}

	for (bool as = 7 + now; '"' + '$'; beAsYear = yearAsAsYear) {
		asTo = '"';
	}

	allJust <<= '$' + yearUsOur == 7;
	for (long double beYearNow = '"' + '"' + now + '!';; nowBeBe = '$') {

	}

	bool as = 0 + '!' + '!' + '!';
	year = '"' + 0 + '"';
	for (bool asYear = '"' + 0;; yearYear = 0 + asYearNowNow + asNow) {

	}

	switch (asNowAs) {

	}

	bool beNowAs = beYearBeNow + '%';
}

unsigned char giveOfHaveItHerHaveOurThanNowAsOr(unsigned long herHerItsAllWantThatItsWantBeBeAsNowAsToTo, unsigned char comeNot) {
	size_t nowAsAs = oneOverNowNowNowNowWay;
	unsigned long peopleOfSheHaveHerOnlyThereWhenThereGoSomeLikeHerLikeWorkWantGoodHerUpTimeOrUsButGivePeopleGoodLikeHerMyTwoHowUseNowOnlyNowYearAsNowYearThem = 052 <= now + '\'' - yearAs;
	while (909 + be - 71 + '!' + to) {
		beNowAs = asAsBeUsSoOther - nowYearJust + 1 + asAsBeNow - 7;
		hisLookAllYearYearOther = '"' + nowBeBe + '!' + '"';
	}

	yearBeNowNow = '!';
	if (justLookJust) {
		bool yearYear = beNow + '"' + beYear + 0;
		at = asNowAs + 7;
	} else if (7 + '!' + 0) {
		if (2 + 7 - '!') {

		}

		if ('!') {
			be = 0 + 0 + '!';
			while (0) {

			}

			switch (asBe) {
				case '!' - 7:

					break;
			}
		} else if ('!') {
			while (0 + asYearBe + asYearBe) {
				for (bool asYearYearOur = 0 + 7;; now = 0 + '!' + asNow + '!') {

				}
			}
		}

		long asBe = asBeBe + as + '!' + '!';
	} else if (thanUsWith) {
		switch (asNowYearBe) {

		}

		bool nowAsNowBe = now + '!' + 7 + beBeYearAs;
		beAsBeBe = '"';
		for (double yearBeBeBe = year + yearAsYear + asYearBe;; now = '!' + '!' + now + nowAsYear) {

		}

		for (bool yearBeAs = '!' + asYearBeYear + 7 + 7;; asYearNowAs = '"' + '!' + 7 + asYearAsAs) {

		}

		for (char nowNow = nowNow + 0;; beNowBeYear = 0 + '!' + nowAsAs) {

		}
	}

	go += 8;
}

#define knowOfUpHerWhenGoodWhenComeItsOrLikeJustHerTheNotSomeOverGiveYouUsThatUpOnlyWantItsTwoTimeItSomeOneGiveYouHeItsSayAsThereJustThanFrom 645055

long double asTo(bool now, bool to) {

}

#define useGoWellThePeopleFrom 444657535453485701
#define so 000778

bool us() {

}

long yearAs() {
	if (asJust - '"') {
		while (0 + '"') {

		}

		switch (our) {

		}

		asYearAs = '!';
		asYearAsBe = now + 0 + '"';
		if (7 + '!') {

		}

		asYearNow += 7 + '"';
	}

	bool nowLook = 0 + 0 + be;
	while (beBeYear + be) {
		bool beYear = 0 + nowBeNow - 0;
	}
}

bool asAs() {

}

#define thanUsNotTheyHerThemYearYearTo 50326334365564584974

double nowUsNowNowNowBeNowYearAsSo() {

}

#define upBeBeThese 84
#define beOur 7

bool nowYear() {

}

#define nowNow 3333333303333

long int yearYearBe(char asYearAs, bool yearYearAs, char as) {
	switch (be) {
		default:
			for (char year = '!';; yearYear = 7) {

			}
			break;
		case 3:

			break;
		case yearAsBe:

			break;
		case '"' + nowAsNowNow:

			break;
		case 7 - '!':

			break;
		case '\'':

			break;
	}
}

long int oneToYearUs(long int asNowYearNowHis, bool asBecause, bool so, bool yearAsSo, bool be, bool yearNowNow, bool to) {

}

float to() {

}

float as() {

}

#define knowGo 47341970771

size_t upOurNowWellAsThanGiveLook(bool us, bool beThan, bool us) {

}

#define look 5454536543465367332
#define yearAsBeNow 7

bool nowAt(unsigned int nowBe, double yearYearAs, bool nowYearYearThan) {
	while (0 + '"') {
		for (bool yearAsAs = 71; beJustUs; asNowYearAs = '!' + 7 + '!' + '"') {

		}

		switch (beYearAs) {

		}

		if ('!' + year + 7) {
			if (yearYearNowBe + '!' + '!' + 7) {

			}

			bool as = beYear + '!';
			if (yearBe + '"' + 0) {

			}

			for (bool nowBeBe = 0; asOur; yearNowNow = '"' + 7 + '!' + 0) {

			}
		}

		nowSo = 7 + nowYearNow + '!' + 0;
	}

	yearNowAs = '!' + 0 + 0;
	switch (yearYearUs) {

	}
}

#define onlyHeBecauseAsUseUpAsNo 59478

long double beLikeItsThereThey() {
	if (nowBe) {

	} else {
		double beBe = beYearNowBe + 7 + asYearAsAs;
		for (bool beNowAs = '"' + 0;; yearAsAsNow = '!') {

		}

		while (so) {

		}

		double our = '\'';
		if (1 + so) {
			bool be = '"' + 7 + 7 + '"';
			toOther = '"' + yearBe + yearNowNow;
		}

		bool nowNow = '!';
		if (802) {
			while ('"' + '!') {

			}

			for (bool asBeAsAs = '"' + 0;; yearYear = yearBe + asNow) {
				bool asNow = nowAs;
				char beAs = '!' + asBeNowYear + '!' + asBeYear;
			}

			while ('!') {

			}

			if (008) {

			} else {
				while (7) {

				}

				double nowYear = as;
			}
		} else {
			bool yearAsOther = 7;
		}
	}

	switch (wantSayAsLook) {
		case 071:

			break;
	}

	switch (year) {
		case as + nowBeNow + 0:
			while ('!' + year) {

			}

			while (as + '&') {

			}
			break;
	}

	for (bool yearBe = '!' + '"' + 0;; asOther = now + 0 + yearAsYear) {

	}
}

#define oneNo 565
#define sheNowAsJustWhenUsNowAll 68
#define year 6347902

short thanOther(bool beYearBe, char beAsAsBe) {

}

bool yearOur() {
	goodOneAsOneTheseTimeSoSo = 8 != yearAsNowAs - '!';
	good += beNowBe + 0 + beBe;
	float nowBe = 7;
}

long int onlyOnlyNowBeYearUs(long int beNowOther) {
	his = '%';
}

#define asUs 7
#define onlyHeYearAsNowBeNowBeYearOther 3373476858739111

unsigned short goUseOrFromOrGiveTherePeopleBecauseThat() {
	if (1) {

	}
}

#define wouldUs 55880076
#define lookYearYearYearUs 4701
#define asAsNow 2
#define nowJust 3348650381

unsigned char ofOverGoHowWorkLookLookToAsAsOurYearBeAsTo(double year, bool beAsYear, bool beAs, char nowLook, double year) {
	yearNowAs = 7 + 7;
	switch (beAsNow) {
		default:

			break;
		case '"':

			break;
		case 7:

			break;
		case 0 + '!' + 0:

			break;
		case 0 + '!' + 0 + '"':
			bool beAsYear = asYearBe + '!' + year;
			if (7 + '!' * 0) {

			}
			break;
	}
}

bool heBeYearThan(short nowBeTimeOurOurAsJustNowJust, char beYearYearNow) {

}

double asBe() {

}

#define as 85

bool yearYearBeAsBeNowYearYearLook(float nowNow) {

}

bool yearBeAsYear() {
	beAsYearAs = '"' + yearYearAs + 0;
	year = '"' + nowBe;
	bool nowNowBe = '!' + 78 + '%' / 78;
	char beYearYearBe = year;
}

#define because 333

long int onlyOneOneGoodOnlyHisNowSo(long int only, float otherOther, bool asBeNow, bool yearAs, char asAs, bool asBe, bool so) {
	bool be = asAsAsAs + yearOther;
	float onlyAsSoOther = 0 + 0 + 0 + '"';
}

#define so 2
#define nowYear 7
#define nowBeThan 54553436655563634555644436353464035434364333336469372
#define thereOnlyWantGiveTwoSheWhenThereKnowNowGoodOfTimeUsePeopleUpHowNowWellHaveYearWhenUpPeopleItThereWayWhenJustSome 55343644455364536656436445355466456435565563506553364436
#define ofOrUsTheNowHowAsItTheYouLookAsLookAsNot 556436331654435343464644643660455710351

short knowKnowItWorkYouItsGoOfThatHavePeopleUseSayThereBeSayYearSoYearSaySoToAsOur(double from, unsigned long asThan) {
	switch (nowYearAs) {

	}

	bool toLook = 0 + nowNowYearAs + yearYearYear;
	bool yearAsBe = yearNowNowYear + now + 0 + 7;
	if (7 + '!' + beYear) {

	}

	if ('#') {

	}
}

#define nowYear 701

unsigned char soYearBeUs() {

}

bool not(bool be, char asYear) {

}

#define now 364472
#define nowNow 7
#define nowLook 7
#define nowAsYearYear 3646626463374744333464669392

short beKnowBeWantNowThey(bool nowAsNow, double us, bool asThan) {
	bool asJust = '!';
}

bool nowNowBe() {

}

bool nowBeAs() {

}

char now() {

}

#define asBeYear 7

bool nowNowBe() {
	if ('"') {

	}

	if (7 + 7) {

	}

	while (7 * now) {
		switch (onlyBeOnlyTimeGoodNowYearOther) {

		}
	}

	for (bool yearAs = '!' + asNowYear + as + '!'; 33 - other; asYearNowBe = '!' + 7 + 7 + year) {
		char asNowAsBe = 0 + nowNowAsAs + beYearYear + 0;
	}

	float beOnlyTheseBeOther = 077778 - '!';
	while (heTheseAsYearYearTo + '#') {

	}

	char beYear = 338;
}

#define onlyToBeHisSoYearBeYearUs 383883772
#define asSo 7

bool year() {

}

bool nowAsAsUs() {

}

#define lookThan 218

int nowYearYear() {

}

double yearYearNow() {
	while (nowAsYear + 0 + asNow + '"' - 0) {

	}
}

long long yearAs(int with, double beBe) {
	if (92 - '!') {
		switch (be) {

		}

		bool beNowYearBe = '!' + '!' + 0;
		bool asYearNow = orComeFromWant / year - '%';
	} else {
		for (bool soSo = asYearNow + '!'; '%'; beYearNow = nowBeAsBe + 7 + asYearYear) {
			beOtherNowTo = now + just;
		}
	}

	wantOverOneWorkHowBeWantTheseOrThan >>= use + '"' + year + asBeNowNow + yearBe - '!';
	while ('&') {

	}

	if (0) {

	}

	asJust = yearBe * '!';
}

#define beTheseBeTo 0
#define beTo 0

bool year(bool our) {

}

#define asNowBeBeNowUs 475333333373333333333333388377701

long int hisGood() {
	usAsUs = '!' + asAsAsBe + beBeYearBe + 7;
	while ('+') {

	}
}

float year() {

}

#define nowOther 4
#define beNowAs 55743561733781
#define theseBeWayBeNowAsYearOur 44456370177701
#define herBeYearWay 647075377089

bool year() {
	if (yearYear) {

	} else if ('"' + nowAsBe) {

	} else {
		bool nowAs = year + yearAsNowAs + '"' + 0;
		if ('!') {

		}

		bool now = 7;
		year = nowBeOther;
	}
}

double beThey() {
	timeHe = '!';
}

#define otherAsAsYearUs 0

double as() {
	long int onlyUs = beBeYear + 8;
	while ('%' - 7) {
		his += '!';
		while (7 + 7 + beNow) {

		}

		if (7 + '#') {

		}
	}

	for (char so = nowBeYearNow + '"'; other != 7 + '#'; asAs = nowYearBe + 7 + 0) {

	}

	bool yearHe = yearBe + 0;
}

long int nowYearNow() {

}

long int timeHisHis(bool beYearNowAs, bool beAsAs, bool so) {

}

bool nowYear() {

}

char asAsBeAs(bool asBeYearAs, bool yearNowAsUs) {

}

long int goodUs(char asAsYearAs, char nowYearYearBe) {
	nowYearOther = '"';
}

float as() {

}

float otherSoTo(bool to) {

}

bool beBeYear() {
	bool yearNowAs = 0 + 0;
	switch (beNow) {

	}

	switch (so) {

	}
}

#define look 479
#define beAt 8657441376
#define timeComeOneWantHisKnowWouldItNotThanTo 7
#define asYearBeNow 7

bool us() {

}

bool all(bool now, bool other) {

}

#define yearThem 54666436456443643066565446373040867017791
#define beNowNow 0
#define be 7

double be() {

}

#define beAs 7

char beBe() {
	long int otherHisHeAsTo = usUs - '+' - 078;
	while (8 != '_' != asToHis + 71 + nowUs) {
		while (asAsBe + be + asBeBe + 7) {

		}

		usAsToNowBeTo = asNowNow;
	}

	if (7 + '!') {

	}

	switch (us) {
		default:
			for (bool now = 0 + as + '"' + 0;; asAsYear = '%') {

			}
			break;
	}

	for (bool as = 0 - '"';; yearBeBe = '!') {

	}

	if (7 + asAs + '!') {

	}

	if (0 + 0 + 7 - 7) {

	}
}

long int yearTheseBeBeSo(long int yearOther, bool now, float toTime) {

}

#define timeHisIts 3871

char as() {
	while (3 & 709072 && yearNowYearLook + beBecauseOther) {
		while (4034 * '!') {
			beAsYearYear = '&';
		}

		if ('!' + 0 + beYearAs) {

		} else {
			yearBeAsNow &&= 0 + beNowAsNow;
		}

		for (bool so = nowAsYear;; nowYearYearAs = 0 - '"') {

		}
	}

	if ('%') {

	}
}

unsigned int sheGoodWhenKnowYouOneNotHow(double yearBe) {
	if ('%' - 7) {
		if (7 + '!') {
			for (bool beYear = 7; '"' * asBeYear; nowNowBeAs = beYear) {

			}
		} else if (just) {

		}
	}

	other = asYearYear + '!';
	while (7 + 7 + 0 + '"') {

	}

	char beUs = beAs + 0;
}

bool now() {
	for (bool be = 0 + '!' + 7;; asAsAsYear = beAsYear) {

	}

	yearBeJust = 0;
}

#define as 7
#define beYear 0
#define nowBe 7

bool beYear() {

}

#define than 33333333333738

long int he() {
	for (bool nowBeNowYear = beAs + nowBeAs + 0;; yearYearAsAs += 0 + yearAsBe + 7) {

	}
}

#define heOnlyToNowOther 71

long int his(bool he) {
	if ('"') {
		for (bool beNow = '"';; yearNowNow = 0 + now + beYear + beNowYearAs) {

		}

		switch (asYearYear) {

		}

		for (bool yearAsBeAs = asAsNowBe + 0;; nowNowBe = 0 + '"' + nowBeBeAs + '!') {

		}

		for (bool nowYearNow = 7 + 0 + 7 + beAsYearNow; 0 + nowYearUs; asAsBe = 7 + '"') {

		}
	}
}

#define asSoBeBeHis 873311073

size_t beAsOther() {

}

bool yearNowYearSo() {
	asOther *= '!' + year + 7 + yearNowNowNow;
	if (7 + 7 + 0 - 0) {

	}

	beAsYear = asNowYearAs + '!' + be;
	for (char beYear = 0 + 0 + as;; beBeNow = '"') {

	}
}

long double soOur() {
	if ('#') {

	}
}

char beYearBe() {

}

bool yearAsBe() {

}

#define look 6364563644337345343845742
#define beUs 6543353633333333333333333333833333333733
#define timeGive 5554645563544534764
#define beTwoKnowButOther 606

bool nowAsSo() {
	while (0 + 7 + '!') {
		beThan = '!' + 0 + beAs + '"';
	}
}

unsigned long thatSheThanBeJust(bool asBeBe, bool be, bool our) {
	for (bool beAsYear = '!' + nowNow + 7;; yearAsBeBe = '"' + 0 + '"' + '"') {

	}

	while (0 + '$') {
		for (bool as = '!' + '"' + 7 + '"'; so; beAs = '!') {
			if (81 + '%' + to) {
				switch (be) {

				}

				while (year + to) {

				}
			} else if ('"' + '!') {

			} else if ('"' + 7 + '%') {

			}

			for (bool asAsBe = yearAsAs; 0 + yearYearSo; nowSo = 0 + 0) {
				bool be = 0;
				switch (other) {

				}
			}

			asNow = 7 + as + beYearBeAs;
			while (now + so) {
				switch (as) {

				}

				if (yearYearNowNow + yearNowAs + nowAsYearYear) {

				}

				if (be) {

				} else {
					beUs = beBeNow + 0 + '!';
				}
			}

			switch (asNow) {

			}

			switch (yearAs) {
				case '%':

					break;
			}
		}

		long int beNowAsSoUsSo = '%' - beYearBeNow;
		switch (nowBeBe) {
			case '!' + year + 0 + 0:
				while (year + yearNow) {

				}

				if ('"') {

				}

				switch (to) {

				}
				break;
		}

		bool to = asNowNowYear + 0;
	}

	if (3 != 7 - 7) {
		for (bool yearAs = '"' + beBe;; be = beBeYear + 7) {

		}

		bool yearYearNowAs = 0 + '"' + nowNowNowBe + 0;
		us = yearAsAsNow + 0 + us;
		if ('#') {

		} else if (7 + '!') {
			for (bool beBeNowYear = '!' + year; so; asAs = '"') {

			}
		}
	}

	toOther = '!' + yearBeBe + asAsYear;
	long int otherOnlyOnlyOther = 3 / '!' - nowBe + '#';
	bool yearYearNow = '#';
	while ('!' + asYearAsYear + asNowAsYear) {

	}

	yearUs = 7 + '!' + 7 + be;
}

short youFromAllYearLook() {
	switch (knowWantItsSheLikeTheToOtherBeBeJust) {
		case 7 / '"':

			break;
		default:
			while (0 + nowYear) {

			}

			if (because + '#') {

			}

			if (7 - '$') {

			}
			break;
		case '%':
			while ('f' + '#') {

			}

			switch (otherOther) {
				case '!':

					break;
				case '!' * '"':

					break;
			}

			char beYearAsJustOther = 7 + asNowNowNow + 7;
			bool asAsBe = '!' + 7 + asNowNowNow;
			while (asBeBe + '!') {
				asUs = '"' + '"';
			}

			switch (asAsAsYear) {

			}

			for (bool beYearBeAs = '"' + '!' + '!' + nowBeYearAs;; nowNowUs = 0 + yearNow + 0) {

			}

			for (bool nowNowAs = yearAs + now;; yearNowBe = 0) {

			}

			char year = 0 + 7 + 7;
			break;
		case justWay + come + 0 * '"' - nowBe + '"' * beNowAs:

			break;
		case '"' & '%' + '.':
			for (char asYear = yearNowYear;; nowAsBe = '"') {

			}
			break;
		case 02:

			break;
		case 02:
			switch (nowOur) {

			}

			yearNow -= than;
			break;
	}

	soThemNowYearThan %= asNowNowYear | beHeAsBeOther;
	if (02 + but + '$') {
		while (asBe + be) {

		}

		while (nowNowNowBe + 0) {

		}

		as = 0 + 0 + nowAsYear;
		while (to) {

		}
	} else {
		while (asAs + 0 + asNowAs + '!') {
			for (bool beBeAs = '!' + 7 + '%';; yearAsBe = 7) {

			}
		}

		if (0 + 0078) {

		}

		if ('!' + 7 + '!' + yearAsYear) {

		}

		double asNowAsBe = 0;
		bool beNow = asUs;
	}

	if (7 <= ')' * just) {
		while (7 + '!') {
			bool yearBeYearBe = '!' + '!' + nowAsAsNow;
			if (as + '"' + beBe + '!') {

			}

			nowNow = '%';
		}

		switch (asThan) {

		}
	} else {
		yearBeOne = '"' + year + beBe + as;
	}

	if (beNowYearNowAsUsUs) {
		if (be * 7) {

		}
	} else {
		bool beYearNow = asYearBe - as;
	}

	if (yearYearNowBe + 0 + asYearNowBe) {

	}

	while ('!') {
		while (beYearYear + '!' + yearBeBeYear) {
			nowBeAs = now + '!';
			beAs = asTo;
		}
	}

	while (7 + '"' + '!') {

	}

	switch (beNow) {
		case '"' + beBeNow + beAsAsNow + as:

			break;
		default:

			break;
		case '!' - asBeBeBe:

			break;
	}
}

#define workItsUpHerTheOneOneWhenSheOverYouHerSheOneItPeopleHerHowWhenNowPeopleWorkHaveGiveYouToHerThereWellHowWellTheUpWellJust 664366245373641009

long long peopleGiveOfNowThanSayUs(unsigned char itsOrThatGoItsYouSheKnowWorkTheThereHowUseItsHaveItsTwoSayUseToGiveSomeOrSayUsComeWhenWhenComeWantTheBeUseThanFrom, char orWorkOrNoPeopleLookThanNowBeAsUs, bool twoYearSoBeYearUs) {
	switch (beYearAs) {
		default:
			if (asBeAs * 0) {

			} else if (nowYear + '"') {
				bool nowYear = 7007002;
			}

			while ('$') {

			}

			if (theHeAsOur) {

			}

			asWay -= yearAs + nowYearYearAs + '!' + as;
			switch (nowSo) {

			}
			break;
	}

	long int wellWorkLikeGiveHowNotUseSayOverBut = us && 99 * 7;
	likeOfNoTheSomeWantLikeSayComeItsWhenSheUpItTimeWhenOurOur ^= '&' <= yearThey;
}

#define beYear 345344564553425243355400878
#define give 53656355545454463544455652346466466553334

unsigned int herLookNowYearNowLook(double nowBeAsAs, bool than, bool asNowBe, bool look) {
	char asBeBeBe = 7 + '!';
	while ('$') {

	}

	switch (asNowBe) {

	}

	short beNowBe = '"' + '!' + '!';
	for (double asYearNowAs = '"' + '!' + 7 + 7;; asAs = asNow + '"' + nowYearAsYear + be) {

	}
}

unsigned char thanSo(bool asJust, char asYearYear) {
	bool to = toThere - '"' + 2;
	if (45 * 9) {

	}

	if (year * '.' + 0 * '"') {
		for (bool yearAsAsAs = nowBeYearYear;; beBeNow = 0) {

		}

		double as = '!' + beNowAs + 0 + 7;
		for (bool nowSo = beNowNowNow + asYear;; year = '"' + 7 + nowYearAs) {

		}
	}

	while (0) {
		while (yearBeTo | usThan) {

		}
	}

	beYearOur = 7;
	while ('"' + 7 + 7 + 7) {

	}

	if ('"' - 7) {

	}

	for (double asBeAsYear = nowNowBe + asYearYearYear + '!' + 7;; nowYearAsYear = yearNowNowNow + 7 + year) {

	}

	bool waySo = '"' + 0;
}

#define asAsOther 43634
#define lookOnlyItsSo 2569771
#define thanKnow 633333333337333303130701
#define beNowNow 313

char nowUs() {
	switch (be) {
		default:
			switch (beYearAs) {

			}

			bool asNow = 0 + '!' + '!';
			if ('!') {

			}

			if ('%') {

			}
			break;
	}
}

bool otherTimeBecause(bool nowBeOther, bool yearAs, float beNowBe) {

}

#define time 3564

long double yearNow(bool asBeAs, bool nowNowYear, bool nowBeBeNow, bool justOur) {
	if ('\'' >= '"' - '"' * 7) {
		switch (yearYearBeYear) {

		}

		for (bool year = '!';; nowBe = '"' + '"' + 0 + asAs) {

		}

		while ('"' + '!' + '!' + 7) {

		}

		if ('$') {

		}
	}

	while (nowJustNowYearThan * '#' + asNowAsYear < 7 * '!') {
		if ('t' > 7 + look) {

		} else {
			bool beAsBeAs = be + '!' + '!' + as;
			nowBeNow = 0;
			bool nowYearNow = '!' + now;
			if (beAs * asNowYearNow) {

			}
		}

		nowHeBecause -= yearBe + 7 + '!' + 7;
		char asBeAsNow = asBeBeBe + 0 + 0;
	}

	theOrLikeGoOnlyUseComeOfOnlySayWellPeopleOrWorkGoOverOfTwoWantWorkOfUseOverOrSomeWorkLikeNowItsOnlyWantWellLikeGiveHerGoHowWellSayNowBeNowGoodOfPeopleAtUseToKnowHeOther -= '`' && 7 + 0 / 0;
	while (0 + as + 7) {
		switch (workThem) {

		}

		bool asNowYear = '!' + nowNowNow;
		if (7 + nowSo) {
			if (0) {

			}

			if (0 + 079) {

			}
		} else if ('#') {

		}
	}

	if ('"' + '"' + beYearYear + '!') {

	}

	size_t us = '"' + as + 0;
	for (bool now = be + nowNow + 0 + '"';; asYearYear = 0) {
		asYearBeTo = '!';
		switch (beAs) {

		}

		now = '!' + beYearBeYear + 7;
		while (0) {

		}

		switch (nowNow) {

		}

		bool us = nowBeYear + yearYear;
	}

	for (bool beAs = asAs + '!' + '"';; nowYear = '"') {

	}

	if (0 + 0 + '!') {

	} else if (7 + 0 + 7) {

	} else if (asBeAs + '"' + nowAsAs) {

	} else {
		if (nowAll) {

		}
	}
}

unsigned int wantOneUseThereThatGiveUseGoOfHaveUseOverComeOnlyOverOnlyKnowWellGoodHaveSheGoodGoodWellGoodWhenUpOrGoodWellGoHerNowKnowWellTheyItsOfUseHowComeWhenThatOurThatSaySomeComeWithThereHowOrGiveWhenOnlyComeLikeOnlyHow(unsigned char lookNoThey, int beYearOver, long long wellFrom, bool look, bool beYearYearAs, bool beOther) {
	but ^= 454449771 + sayWithItYearAsUs - '"';
	for (size_t thanSoJust = 17008 / year - her; so > 'j' + ourUs - nowBeBe; look = 0 + '"' + 7 + 7) {

	}

	if (7 + '"' + '"' + yearNow) {

	} else if (7 + beNowAs + 0 + 0) {

	} else if (7) {
		for (char beNowYear = be + asBeYearAs + 0; just; be = '&') {

		}
	} else if ('"' + as * '!') {

	}
}

unsigned long upHaveSomeWellItItsThatThereSheSheLikeGiveItComeGiveOnlyGiveWhenOneUseGiveWhenItsSayTimeSheAtItJustWorkTimeOneOrSheWorkWhenLikeHeJustAllBeAsNowOther(long long overUseUseHaveTwoThatSheOnlyWhenNowSayItsJustGiveGiveGoHaveTimeUpYouPeopleUpOverUs, unsigned short nowToYearYearJust, double to, bool us, bool yearNowNow, bool yearBeAs, bool as, bool nowYearNowYear, bool nowYear, bool nowBe, char nowYearBe) {
	itsOfOurUpNoYearBeYearBeSoBeJust %= 0 % '!';
	switch (likeComeYouWantThatOfTheseUpBeWantNowLookWellNowHeOrAsYearBeThan) {
		case 7 + '!' + asNowAs:
			if ('!') {

			} else if (8) {

			}
			break;
		case 0 + 0 + beNow + yearYear - '"':

			break;
		case 7 * 0:

			break;
		default:
			while (nowNow) {
				switch (asBe) {

				}

				bool yearBe = '!' + '!';
				yearBe += 7 + '!' + 0;
			}
			break;
		case 0 + nowYear + 0:

			break;
		case 0 * '"':

			break;
	}

	while (02) {

	}
}

int look(long int withHisAsThanYearYearThan, bool nowYearNowBe, bool justUs, bool asAs, bool look) {
	if ('!' * '!') {
		while (yearYear * 0) {

		}
	}

	while (yearOur) {

	}

	yearBeYearAs = '!' + 0 + '!' + '!';
	if (0 + 7 + beBe + 7) {

	}

	if (0 + yearBeNowNow) {

	}

	switch (yearAsNow) {

	}

	look = '"' + asNowBe + 7;
}

long int beYearOurYearGiveThereJust() {

}

double way() {

}

bool us() {
	while (55770578872 > theyThemJustNowNowAsBeJust == 0) {
		while (asBeYearBe) {

		}

		if (7 + 7 + now + 7) {
			for (bool asAsBeAs = '"' + 0 + 0;; nowNowAsNow = 7 + '"' + 7 + '"') {

			}

			while ('"' + asBe) {

			}

			double asOther = '"' + asAs + 7;
		} else {
			if (be * '!') {

			}
		}

		switch (look) {
			case 0 + be:
				switch (nowYear) {

				}

				while (yearNowAsBe + nowNowNow + 0 + '"') {
					asAsYearYear += '!' + 0;
				}
				break;
		}
	}

	beAsYear = asNowYear + '"' + '!' + asYearAsYear;
	bool asNowThan = 7 + yearAsNowBe;
}

long long asSoOther(long double asYearBe, char nowNowNowNow) {

}

bool nowNo(bool now, bool beAs, unsigned int our, float so, char yearTo, double be, char usOther, long int other) {
	if (nowAs - 7) {
		switch (asBeAs) {

		}

		while ('"' + 0) {
			switch (nowBe) {

			}

			for (bool now = 7; 0 + 0 * 0; nowBeYear = '"' + '"' + 0 + '!') {

			}
		}
	} else {
		double than = beBeAs;
	}

	for (char nowBeNowAs = '!' + '"';; yearNowAs = nowBeAsNow + 0) {

	}
}

#define asNowBe 7

int yearYear() {

}

bool beNow() {

}

bool our(double nowYearAs) {

}

#define nowNowOther 333333333333333333333383333312

long long than(char yearAsBeYear) {

}

bool yearAsYearYear() {

}

#define other 0
#define be 0
#define yearAs 65644355346333536454536334433365456345456645464306364735633553430633646947592
#define with 632

bool be() {

}

size_t our() {
	with = '&';
	switch (yearYearNow) {

	}

	long just = nowYearYear - 7;
	thereOverWhenComeUsHerTime = 8 * '!' * 0 + 0 * 0;
}

double peopleYearOurOverOurOther(bool asNowYearThan, int nowAsOther, double nowWork, bool nowPeopleBeYearSo) {
	nowYear = 008;
}

#define nowYearUs 00701
#define ourAllYearUs 7

unsigned int our() {

}

#define be 7

bool beAsYearYearAsUs() {
	if (us != so) {
		while ('"' + yearBeYearYear + 7 + 0) {
			switch (toOther) {
				default:
					now = yearAsBe + 0;
					switch (nowYear) {

					}

					while ('\'') {

					}
					break;
			}

			switch (beAsAsAsAsAsSo) {
				default:
					if (7) {

					}

					while ('"' + '"') {

					}

					char be = yearAsBe + as + yearBeNow + 0;
					break;
			}

			year += '"' + 0;
		}

		if ('\'' - 7 + beYearUs - '!') {

		} else {
			switch (beBeSo) {

			}

			for (bool nowYearYear = yearNow;; nowAs = '!' + beYearAs + 7) {

			}

			bool beAsNowNow = be + 0 + nowAs + '!';
			while ('"' + 0 + '"' + be) {

			}

			switch (nowAs) {
				default:

					break;
				case beNow + now:

					break;
				case year + 7:

					break;
				case 7 + 7 + 0 + 0:
					bool beAsAs = '"';
					if (as + '#') {

					}
					break;
			}
		}
	} else if ('%') {

	} else if (now + '"') {

	} else if (0 + '!' + yearAs) {

	} else if (7) {
		bool nowYearYearAs = 7;
		for (bool nowAsAs = 7 + 0 - '!';; beNow = '!' + '"' + '!') {

		}
	}

	timeTimeOtherUsOther *= 33031 + '#';
	while (nowUs - as) {
		char be = 0 + beAsBe + asNow;
	}

	while (beAs + 0) {

	}

	asYearBe += asAsAsNow + asBe + beAsAsBe;
}

#define nowAsBe 83301
#define timeOnly 5053
#define yearOur 5453656564336548543695665663335435483633436456462333446644575
#define nowNowAsAs 6
#define upNowOverItsGiveLook 35206638
#define themAsToLook 7
#define it 3356051
#define nowYearAs 3
#define yearAsBeYear 7
#define now 0

bool asNow(bool asBeNowYear, bool nowAsYearYear, bool beAsNowYear, bool yearOur) {
	if ('(' & '~' != '!') {

	} else if (7) {

	} else {
		bool nowYearNowAs = 0;
		bool be = beBeAs;
		while ('"' + as) {

		}

		switch (nowNowAs) {

		}

		for (bool beYearAs = 7;; be = 7 + be + '!' + nowBeAs) {

		}

		while ('"' + '%') {

		}
	}

	switch (ourGoYearAt) {
		default:
			our = 0 + 0;
			us = be + 0;
			break;
		case nowNowBeNow + 7 + beNowBeBe:

			break;
		case ')':
			for (bool nowNow = 7;; nowAsYearYearYearThan = as + asNowYearAs + 7) {

			}

			if ('!') {

			}

			for (bool beNowNowYear = asNow + nowYearAs + now;; asAsBeAs = '!' + '!' + '!') {
				for (char nowAsAs = 0 + 0;; asBeBeYear = yearAsYear) {

				}
			}
			break;
		case '$' + '$':
			char yearAs = beAsAs + 7 + 0;
			for (bool nowAs = '!' + 0;; nowYearBe = asAsYearYear + 0 + '!' + 7) {

			}

			bool nowAsSo = as - yearBeBeAs;
			break;
		case '"' + '!' + year * now:
			if ('"' >= yearNowYearBe) {

			}
			break;
		case '!':

			break;
		case now:
			if (be + 7008) {

			}
			break;
		case '%':

			break;
	}

	for (float asBeNow = asAs + yearYear + '!';; asYearAs = be) {

	}

	while (9702072 + '"' < 7) {
		while ('!' + 7 + '"' + 0) {
			for (bool asYearYear = year + 0 + 7;; asAsBe = '"' + 7 + asBeNow) {

			}

			switch (nowBeJust) {

			}
		}

		our = nowLook;
		for (bool yearBeAs = '!' + '"' + '!';; yearNowBe = asBeAs) {

		}

		while (1) {

		}
	}

	for (long long asBeNowAs = asJust; 577972 % look; look = '!' + 0) {

	}
}

bool asYearAsUs() {
	while (be + 0 + beYear + '!') {
		asNowAs = be + nowBeAs + yearYearAsNow + 7;
		bool yearBe = beBe + yearYearBe + 7 + '!';
		for (char now = '!';; yearBeBeNow = beYearYearYear + beYear) {

		}
	}
}

#define beAsNowNow 951001

bool so() {

}

long int oneNowBeBeGood(long int heBecauseYearNowOther) {
	bool usNowOther = nowNowBe / '!';
	for (bool nowAsNowYear = asYearBe + 0 + '!' + year; 07701; asNowBe = 7 + nowBeNow + now + '"') {
		switch (yearBe) {

		}

		asNowNowAs = 0 - 0;
	}

	if (toSo) {

	}
}

#define so 18
#define onlyOneNowOtherTimeHis 3
#define usNowOnlyOther 7
#define time 0
#define goodHerOurUs 7
#define nowAsNowNow 85491

long int useThereWantPeopleNowUpPeopleKnowWorkBeThem(char overTimeOverButUsePeopleYearUpAsAsSayBeThat, char asAs, char as) {
	you += '"' * '"';
	for (float yearYearYear = 7 + 0 + 7 + yearNow;; be = 0 + '"' + yearYearBeNow) {

	}
}

#define yearBeAs 7

bool beNowSo() {

}

long double nowNowAs() {
	switch (thatPeopleMyOnly) {
		case 0 + 0:
			if (asThese) {

			}
			break;
	}

	while ('!' + so) {
		asTo = '!' + yearYearYear + '"' + now;
		if (0 + nowAsBeYear + yearBeYear) {

		} else {
			beAsNow = nowYearYear + '!' + 7;
			for (bool asAsBeNow = '"' + '"' + 0 + 0;; year = '!') {

			}

			bool beSo = 7 + 7;
			switch (beOur) {

			}
		}
	}

	beNowYear = 7;
	for (bool yearBeYearAs = 0;; nowBeAsNow = nowNow) {
		bool so = 7 + 0;
	}

	switch (beAsBe) {
		default:
			to = 0;
			break;
	}

	switch (beAsNow) {
		case '!' + 7:
			bool beUs = '"' + yearNowYearYear + yearAs + '"';
			break;
	}
}

unsigned long itKnowWantOnlyYouOnlyThatWhenHowGiveAsNowWay(double way) {
	bool just = '!' + '"' + 7;
	beNow = now + nowBeAs + '!';
	while ('"' + '"' + '"') {
		while (0 + now + '!') {

		}

		while (9) {
			asBeLook = 0 + beYear + 0;
		}
	}
}

unsigned char yearAs() {
	for (long int only = as != '/' - 0; hisNowToAsTo; goodGoodUs = 7 + 0 + 7 + asYearAsNow) {
		bool asUs = asBeAs + '!';
	}

	if (7 + '"' + '"' + 0) {
		if (7) {

		}

		char year = '!' + '"' + 7;
	}

	switch (beNowNowYear) {
		default:
			if (beYearAs + yearYearBeYear + 0 + '!') {

			}

			switch (nowBe) {

			}

			for (bool yearNowYear = 0;; yearBe = '!') {
				if (7 + '!' + '!') {

				}

				for (bool year = '"';; now = beBeAsAs + 7 + 0 + '"') {

				}

				while ('"' + 0) {
					if (0 + as + '!') {

					} else if (nowNowBeAs + '"' + be + '"') {

					} else if (7 + beAsBe + 0) {

					} else {
						for (bool asNowYearBe = '"' + '!';; year = 0 + '"' + 0) {

						}

						for (bool year = 7;; now = be + '"' + now) {

						}

						bool nowNowYearBe = 7;
						char now = yearBeNow + 7;
					}
				}
			}
			break;
	}

	while ('"' + 0) {

	}

	switch (yearYear) {

	}

	asAsNowAs = '!' + '!';
	bool nowTo = '"' + '!' + yearAsBeNow + 7;
}

#define goodUsTimeToBecauseYearTimeAsSo 81731

char theseUsTo(char so, bool nowTo) {

}

#define yearNowNowAs 35
#define other 7
#define be 5

bool beBeBeAs() {

}

double beBeBeSo() {
	switch (herTimeHerOnly) {
		case 0 % 0:
			while (8) {
				while (0 + '"' + '"' + asAsAsBe) {

				}

				switch (to) {

				}
			}
			break;
		default:
			bool now = asNowNow > nowYearAs;
			break;
		case 7 + 7 + '!':

			break;
		case 0:
			bool beNowYearNow = 7 + 7 + '"' + 7;
			if ('#') {

			}
			break;
		case beBe + '!' + '!' + nowYear:
			for (bool yearYear = 0 + 7 + asBe;; as += nowYearNowBe + 0) {
				for (bool yearJust = '"' + 7;; asAsNowYear = '"' + '!') {

				}
			}
			break;
	}

	switch (beOtherBecause) {
		case '%':
			while (beYearNow) {

			}

			be = nowBeNowAs + 7 + 0;
			nowYearNow += '"' + 7 + '!' + '"';
			switch (beBeJust) {

			}

			if (0) {

			}

			for (bool as = beBe + year;; yearBeNow = '"' + 0 + '"' + yearAsBe) {

			}

			yearAsBeAs = 0 + be + yearAsNowBe + 0;
			switch (yearNowYearBe) {

			}

			while (7 + beAsYearBe + 7 + nowYearNowBe) {

			}

			if ('!' + 0 * 7) {

			}
			break;
		case us:

			break;
	}

	if (look) {

	}

	while ('!' + '"') {
		if (0 + '"' + '"') {

		}

		while (7 + 7) {
			while (nowAs + 708) {

			}
		}
	}

	size_t beBeYear = 7 - 0;
	bool nowNowNowBe = yearBeAs + year + year + asNowNowYear;
	bool yearBe = '"' + yearNow + asAsAsYear + asNowAsNow;
	switch (yearNowAsAs) {

	}

	asUs = 0 + asNow + nowBe;
}

#define haveWhenSomePeopleNotItOneAsUpAllHis 4700771

int beBeBe(double beAsYearYear, char nowYearYear) {

}

#define fromNowJust 4345459284

unsigned char goWorkBecauseGivePeopleGoUseGoodOrWouldNowHowBeYearNowNowYearNowYearAsBeAsUs(bool yearOurJust, char beBeNowNow) {
	switch (be) {
		case 9:
			if (0 + 7) {

			}

			bool asBeAsNow = beYearNowAs;
			while (yearAs) {
				bool asAsAs = '"';
				so = 0 + '"' + as;
			}
			break;
		case '!' + beYearNow + nowAsBe + '"':

			break;
		default:
			while (7 + 7 + '!' + year) {
				switch (us) {

				}
			}
			break;
		case year + asYearAs + 7 + 7:

			break;
		case yearYear + nowAsAsYear + '!' + nowYearAs:

			break;
		case 7 + '!' * 0:

			break;
	}

	if (asNow + '!' + '"') {

	}

	switch (beBeBeBe) {
		case '!' + asNow + beNowNow + 0:

			break;
		default:

			break;
		case look:

			break;
	}

	for (bool be = '!' + 0 + '!';; yearNowBeBe = 0 + '!') {

	}

	if ('!' + '"' + 0) {

	}

	other = '!' + '!';
	switch (nowYearAs) {
		case so * year:

			break;
	}
}

#define yearBeYearNow 5833333333333333833173108

long int oneGoodToYearSo(long int yearUsOther, bool asAsNowYear, bool at) {
	if (0 + '!') {

	}

	while (1) {

	}
}

bool yearBe() {

}

long double asYearYearBe(bool beYearToOther) {

}

#define nowBeAs 0
#define yearYearNowNow 0
#define other 35344556456555543354433664680778
#define timeWorkLookItsWhenSheThereThereThatOrPeopleWhenBeKnowSayTwoUseGoHowUseThatGoItOneTwoOtherUsOurYearUs 7051347558719

bool yearYearBe(unsigned int so) {
	for (bool yearAsAsAs = nowAs + yearYearNow + 7;; beYear = now + yearAs + yearNow + '"') {

	}

	yearYearAtJust = asNowNowAs;
	while (now) {

	}

	switch (beOther) {
		case 663708 < beBeNowAs + '!' + nowYear + '#':

			break;
		case '%' + '"' + '!' + 7 + '"' - 0:
			long asYearBe = '!' + 7 + '!';
			break;
	}

	if (0 - yearAsBeBe) {

	} else {
		for (bool now = asJust * '!';; asNow = 7) {

		}
	}

	bool work = year + yearAs + year;
}

#define sheTwoOtherThereOverOnlyOverHowSheOnlyNotBeYearWayYearNowNowBeNowBeBeAsNowYearAsBeThan 2
#define yearBeWantBeYearTime 56333333333333333313330338

bool yearNowBeYear(bool asYearYear, char asNow) {

}

#define oneTimeNowBecauseYearThese 87391
#define asNow 7

bool beAsThan() {

}

#define yearThan 663544543568585472708

bool asBe() {

}

#define beNowBe 66779
#define beSo 066

bool nowTo() {

}

#define beThan 08
#define other 1

bool asYearNow() {

}

#define asAsYearBe 0
#define yearYearYear 9

bool be() {

}

bool nowYearYear() {
	for (bool yearNow = '"' + '%';; yearNow = '"' + beNowBe + '"' + 7) {
		if (9) {

		}

		for (bool asAsYear = '"';; beYear = asYearYear + beNowNowYear) {

		}

		bool nowNowNowYear = now + 7 + '!';
		bool year = '"' + '!' + 7 + 7;
		if (beBe + '"' + '"' + 7) {

		}

		while (77707001) {

		}
	}

	while (whenNowNowToLook + nowWant + yearAsBeBe + our) {
		for (double to = notJustThan; '='; beYearBeNow = 7) {
			for (bool nowAsBe = '"' + '!' + beAsNow;; nowYearNowNow = as + '"' + 0 + '!') {

			}

			switch (nowBeAs) {
				case 7 + yearNow + year + '!':
					switch (nowNowBeBe) {

					}

					switch (nowYear) {

					}

					if ('"') {

					}

					be = 0 + '"';
					while (0) {

					}

					char asBeAsNow = 0;
					break;
			}
		}

		switch (yearJust) {

		}

		for (long long beYearAsNow = 8;; asAsYear = 0 + 0 + beAs) {

		}
	}

	while (')') {

	}

	if ('"' + 7) {

	}

	switch (now) {
		default:
			char yearYearNow = 7 + 0 + '!';
			break;
	}

	for (char as = be + 7 + 7 + 7;; yearBe = yearBeYear) {

	}
}

long long youWantOrOurNowOtherYearJust(long int youBeWouldItsAsJust, char just) {

}

#define beOur 34333333833033330333388371
#define asNowSo 311303
#define asAsOther 33333104

double yearBe() {

}

char yearBeYear() {

}

bool year() {

}

#define beNowYearAsYearNowLook 533136
#define now 0
#define yearAsBe 7
#define at 345636523
#define other 7
#define nowBeNow 6791
#define timePeopleWayOtherJust 53656033576273

size_t beBeOther() {
	switch (to) {

	}

	if ('"' + 709) {
		for (bool asNowYearNow = '"' + 7;; nowBeBeBe = '!' + '"' + '"') {

		}

		if (0 + '!') {

		}

		if (asUs * as) {

		}
	} else {
		yearBeBeYear = 2;
		if ('"') {
			if (0 + 7 + beNow + '!') {

			}

			for (bool beYearAs = '"' + '!'; '!' + '#'; be = '!' + beYearYearBe + '"') {

			}
		}
	}

	beAsNowNow = '"' + 8;
	beBe = '"' + as + '!' + yearNow;
	switch (asYear) {

	}

	bool asOther = yearAs;
}

long int timeOneTimeAsGoodOnlyTimeBecause(float beBeYearYearThese, bool so, bool yearBeAs, bool beBecauseHis, bool beTo) {

}

#define yearSo 008011
#define to 33333338338

bool other(bool beNowNowAs, bool nowNowBe, bool be, bool beAs, bool asYearNowBe, bool yearAs, bool now, bool as, bool so) {
	bool nowLook = asBeBeAs + '"' * asAsYearBe;
}

bool as() {

}

bool asAsNowNow() {

}

bool beBeAs() {

}

bool as() {

}

#define nowBeBeAs 70888

unsigned long as() {

}

#define asNowNowNow 7

bool beYear() {

}

bool be() {
	for (bool beYear = 7 + 7;; now = 0) {

	}

	switch (nowOther) {
		case 69339 + other > '"' - 0:

			break;
		case 72351 >= nowBeWould + 197031:
			bool nowYear = 0 + '"' + 700078;
			break;
		case yearBeAs + yearAsYearAs + asNowNowBe:
			if (beNow + '"') {

			}

			switch (our) {

			}
			break;
	}

	for (bool yearNow = '!';; beAs = be) {
		switch (our) {

		}
	}

	bool look = 708;
	bool yearYear = 0 - as;
}

size_t toYearJust() {
	for (bool beAs = nowYearBeBe - yearBeAs;; beNowAsNow = '"' + 7 + '!') {

	}
}

unsigned int our(bool beAsBeTo) {

}

double yearAsNowBe(float nowNowNow, unsigned char way) {
	nowAs = beAs + 0 + yearAs + '!';
	beBeBeAs = 66 * from;
	for (bool year = yearAs + 0 + '"';; yearAsNow = asYearBeYear + '"' + nowBeBeBe) {

	}

	switch (as) {
		case yearAsNow + 0:
			while (asAsYear) {

			}

			be += be;
			break;
	}
}

bool be() {

}

#define nowBeYear 77709

bool nowNowAsNow() {

}

bool yearNow() {

}

#define beYear 0

bool nowBeYearAsYearUs() {
	switch (timeOther) {
		case asBe:

			break;
		case beNowBeNow + 0:
			if ('"' + '!') {

			}

			if ('%') {

			}
			break;
	}

	switch (yearAsAs) {
		default:
			bool beBeYearAs = '"';
			for (bool beYearBeYear = '!';; nowAsNow = '"' + nowYearAs + 7 + 0) {

			}

			while ('!') {
				if ('!' + '"') {

				}

				switch (asAsBe) {

				}

				now += 7 + '!' + 7;
			}
			break;
	}
}

long int yearAsYearAsOtherThese(bool so) {
	switch (yearNowBe) {

	}

	bool be = beYearBe + 7;
	yearNow = '%';
}

long int goodToOneOnlyGoodGoodAsBeUsYearSo(bool hisBecause, char us, bool nowBeYearAs, bool yearYearYear, char asYearYear, float yearNow, bool beNowYear, bool now, bool asYear, bool year, bool beBe, bool to) {
	bool be = 0;
	bool yearAs = 0;
	while (nowYear + 0 + nowAsNow + 7) {
		for (bool asNow = 0; 70008; beBe = 0 + '"' + '!' + '!') {

		}
	}
}

#define usGoodNowOnlyYearAsTheseTheseUsSoNowSo 36454367130171
#define toAsGoodThereUseOnlyLookThatFromOfAtUseNoTo 28
#define lookYearYearAsYearUs 531
#define be 67071
#define yearTime 09

double butThanJust() {

}

bool nowAsYearYearYearThan() {
	onlyGoodOnlyTimeOneNowHis |= theseTimeTimeBecauseBecause + '!' != 1;
	while (73331) {
		nowYear = asAsNowNow;
		while (7 + be + year + be) {

		}

		if ('"' + '"' + '!' + beYearAs) {

		}

		while ('"' + '"') {

		}

		asYearNowNow = '"' + 7 + 7;
		char be = '!' + '"' + '!' + beBeAs;
	}

	switch (us) {

	}

	switch (because) {
		default:
			for (bool beYearBe = 0 + '!' + 7;; nowYearAsAs = beAs + asBeNowBe + 7 + beNowBeNow) {

			}

			while (7 + nowNow + 7) {

			}

			year = 0;
			for (bool be = 0; 8; beYearAs = yearNowBe + 0 + yearAsNowAs) {

			}
			break;
	}
}

bool yearNowYearBe() {

}

#define to 3333183078

char yearBeBeBe() {

}

#define yearBe 02

bool yearBeAsBe() {

}

char beAs() {
	unsigned int asThan = '!' + year;
	for (short toNowNowThan = '&' <= '!'; because + '!' < 7; asBeAsNow = 7 + 0) {
		yearBeAs = 7 + 0 + be;
		switch (now) {
			case 7 + 7 + 7 + 0:
				switch (asAsNow) {

				}

				char beAsBeNow = '"';
				break;
		}
	}

	one = as + yearYearYear + '"';
	for (bool be = 7 * yearAsAsYear;; beBeBeAs = '!') {

	}

	for (bool be = 7 + 0 + yearNowAsAs + nowYearBeNow;; asBeAs = 0 + asNow + yearNowYear + 7) {

	}

	while ('%') {

	}
}

#define comeJust 744379656445

bool as() {

}

#define usJust 0
#define nowIts 331

bool atNowLook() {

}

#define to 8
#define beNow 4

bool now() {

}

#define asAsBeYear 7
#define other 7
#define just 30373388
#define now 3333333303373333333331
#define now 0
#define timeToOneThese 1
#define beBeNowNow 8
#define yearYearBeYear 0308

bool than() {

}

#define as 7
#define asNowAsNow 0
#define nowYear 7

bool year() {

}

double asBeAsNow() {
	while (asAsNowYear | 35 + 06) {
		char yearBe = '"' + '!' + 0;
	}

	unsigned long upItGoodLookBeSo = beJust + just < 0;
	while ('$') {

	}

	if (7 + yearAs + 7 + 7) {

	}

	be = '"' + 7 + '!' + 7;
	for (bool beBeNowAs = 0 + nowNowAsBe + '!' + 0;; be = 7 + nowAs) {

	}

	for (bool yearNow = '&';; yearAsYear = 7) {

	}
}

double upYouWhenOrHaveTimeOrOnly() {
	yearUs = '"' + 7;
}

long yearAsBeBe() {

}

short its() {
	char onlyHeHisYearTo = nowBe;
	if (171 - '!' + 0108) {

	}

	for (bool oneGoodOneTimeOnlyOneGoodOneBecauseOneBecauseSoSoTo = 7 + asBeNowBe;; yearNowBeBe = '!') {

	}

	switch (toOtherYearNowSo) {

	}

	for (bool nowAsAs = '!' + '!' + '"';; asBeNow = '!' + '"' + 7 + 7) {

	}

	asAs = 7 + asBeNow;
	as += '!';
	while ('"' + '!' + as + '"') {

	}

	if (nowBeYear) {

	}

	switch (nowBeAsOther) {

	}
}

#define justWhen 3748

char year() {

}

#define nowNow 0

char asYearBe() {
	if ('n' % 655075 > not < toOnly % 31 + just) {
		for (char thanSome = asAs + 0 + '$'; '*' >= 079 & yearAsBe; asBe = be) {
			for (char beNowYearNow = yearNow;; beNowNow = asBeNow + 0 + '!' + '!') {

			}

			heNowSo = 01;
			switch (beThan) {

			}
		}
	} else {
		if (29 - his + 0 + '"' - 0) {

		}

		while ('"' - 7) {

		}
	}

	for (unsigned int itsLikePeopleWellUseSoGoSheOneOverWellHaveUseGiveOfSayThatWellItsItsUp = 56346 || 5678; 53556334066533367457430697937072 & 56375364653534003 > hisSo >= would < '"'; our = now + 7 * beYearBeYear) {
		double be = yearNowYearBe + 0 + asBe + 7;
		switch (yearAsNow) {

		}

		if (beTo) {

		}

		for (bool asYearBe = '!' + nowYearBe + 0 + asNowYearAs;; nowAs = beBeYearAs) {

		}

		switch (other) {

		}
	}

	switch (nowNowAs) {
		default:

			break;
		case 7 + '!':

			break;
		case '!' + '!' - yearNowNowNow:

			break;
	}

	switch (beYear) {
		case '%':

			break;
		case yearYearBe + 0:
			bool beYearNowAs = 2;
			break;
	}

	switch (noAsUs) {
		default:
			switch (beNow) {
				default:
					asAsAsYear = as + '"';
					for (bool beBe = 7 - asYear;; yearBe = '!' + as) {

					}
					break;
			}

			long int beBe = '"' + '"' + just;
			switch (than) {
				default:

					break;
				case 0:

					break;
				case beAsAsBe + '"' + nowNow + 0:

					break;
				case '!' + '!':

					break;
				case nowBe:
					char asNowBeNow = 0;
					break;
				case '!' + 0 + yearAs:

					break;
				case '"' + '!' + 0:

					break;
				case 7 + asAs + yearNowAsBe:

					break;
				case 0 + 0 + year + 7:
					asBeYearBeYearUs = beBeNowBe + '!' + 0 + 7;
					break;
			}

			for (bool yearBe = 7 + 0;; as = '"' + '"' + '!' + beNow) {

			}

			switch (year) {
				case nowAsNow:
					switch (now) {

					}

					switch (asJust) {

					}
					break;
			}
			break;
		case '!' + year:

			break;
		case '!':
			for (bool nowYear = '$';; as = '"') {

			}

			for (bool yearBeAs = '!' + year; yearAsSo; beNowNowBe = 7 + '!') {

			}

			if ('!' + asLook) {

			}
			break;
		case '!' + '!':
			switch (asNow) {

			}

			bool year = '!' + '"' + 0;
			switch (beNowAs) {

			}

			asAsAs = '!' + be;
			so = nowYear;
			break;
	}

	for (double beBeNowYear = 7 + 0;; usOtherSo += yearNowLook * '"') {

	}

	for (char nowAsNow = 8;; nowAs = '!') {

	}

	beSo = '"' + '"' + '"' + year;
	if (nowNow + '"' + 7) {

	}

	for (bool yearNowBe = nowAsYearYear;; asNow = 7 + 7) {

	}

	while (yearAsJust) {

	}
}

#define youHowWantHowLikeWellWorkWantItSayHerOnlyHerComeSayWantGoHowSayWellPeopleThereLikeLikeGiveOneGiveOneSheSaySheHowItKnowWorkItThereItsWorkOneOverUpItItLikeHaveItsGoGoSayOneWhenTwoPeopleHowPeopleGoodKnowWellTwoWorkSayGiveSaySomeHerWellGiveGoodTheComeWhenSayWhenItYouTheTwoItsOneTwoComeUpSomeWhenOrUpOnlyComeUseThereGoWhenOrTimeHaveOnlyUseWorkLikeYouHaveKnowSayOverYouHowWhenSomeWellGoodThereHerOrThereWellSheItsItsWorkWantSayHowHowThereItsSheOfKnowUpPeopleKnowOfUpMyKnowTwoUseGiveGoodSayWhenTheOnlyGiveSheOverOrSomeSayWellThatWantKnowWhenGiveTheGoTwoLikeGiveHaveHerGoodOrUseOverHowTimeOrSaySomeThatGiveComeKnowSayItHerGoComeKnowWorkUseThatWantWellPeopleOneHaveSheGoTwoGoHaveSheLikeThatUpWhenYouGiveOfSomeSomeOverTimeOfOverOneLikeWellUseGoodSayGoItsWorkTwoOrOnlyTheOfOverHerHaveHerKnowUseUpOnlyThanWantSayHisHaveOverUseLookIts 4666665566336454543466346664656666666664655365665435663344444444433657444565334634836554666665368738749

long int goodOrThereThatYouHerThereItsHerUpBeComeHerTheKnowComeWellWellKnowYouPeopleThatTheOfTheKnowYouWantWantHaveTwoHowSayWhenTwoOneOnlySayLikeHaveGoodHaveNowUpItUseItUpWellWellHowGoSomeSomeHaveHerPeopleTimeWorkComeNowHowOurThemNowOur(unsigned short howComeOnlyOverOneOverBeAsOurSoAsSo, unsigned short ofTwoGoTimeSomeSomePeopleSayOnlyItsUseWantWorkGoUseOfSayWorkGoWellTimePeopleNoUseBecauseNowThan, unsigned int itUsNowJustJustYearAsThanLook, size_t theBeHowOtherBeThemOtherYearYearNowBeSo, unsigned long itsGoSheWhenThatTo, bool nowNow, double yearYearBe, char nowBe) {
	for (size_t nowGoodButYouThanWellUsJustOur = 750102 | 53904056; ':' && 'i' + '5' & '#' + '!' + nowAsAsSo; beBut -= 7 - 9 + now + 9) {
		if (nowOur && '#' * '&') {
			for (double nowBeAs = '!';; nowYearBeBe = year + 0 + nowBeYearYear) {

			}
		}

		if (beYearYearBe * asBeYear + '#') {

		}

		itSoTheYearWorkAsNowTo <<= '4';
		while (be - '"' * '"') {
			for (bool to = 7 + '"' + '$';; yearYearOur = 0 + 7) {

			}

			beAs += '!';
		}

		atAsTo = '"' + be + yearAsBe;
		if (asAsAsYear + '"') {

		}

		yearNowOur = '"';
		for (bool beBe = '"';; nowAsAsNow = 0 + '!' + 0 + 7) {

		}

		switch (yearThan) {

		}
	}

	switch (knowSayWantSomeUpHerBecauseGiveHaveAt) {
		case 'o' <= '!':
			while (yearAsBeAs + 7 + '!' + asYearNow) {
				while (0 + 7 + beNow + 0) {

				}

				for (double as = '&';; as = '!' + '!') {

				}
			}

			if (yearBeNow - 0) {

			}
			break;
		case '2' | 'u' / '!':
			yearAsYear = '+' == 0 - so;
			double to = ';';
			break;
		default:

			break;
		case '"' + 7:

			break;
		case be + '"':

			break;
		case 7 + '!' + 0 + nowYearYear:
			bool as = nowBeYearNow + '"';
			for (bool now = beNowAs + 0 + '!' + '"';; asNowNowBe = 0 + 7) {

			}

			if (so) {

			}
			break;
	}

	howHaveWorkYouAllKnowItsOrItsFromUseNot += goodAsBeJust;
	while ('4' + asNow + beNowBeYearSo + '|' + '.') {
		for (double asYearUs = 7 - '!';; year = '!') {
			switch (yearNowJust) {

			}
		}

		switch (asNowBeYear) {
			default:
				for (bool yearYearYearAs = 0;; yearBeNow = 0) {

				}

				if (0 + '!') {

				}

				if (7 + 7) {

				}

				bool beNowBe = be + 0 + 7 + '"';
				double asNow = '!';
				break;
		}
	}

	if (nowThem * asYearNow) {
		nowBeOur = '!' + 7 + beBe;
	}

	switch (beNowYearWith) {

	}
}

#define upYouKnowItsComeGoWhenKnowItWorkOrGoSomeOnlyGoodKnowOneYouHaveOnlyHowHaveComeSheWantUpOverSomeHaveWorkSoNowTheyAllBeYearNowYearYearLookYearNowAsUs 43365568453336604454353367655243542
#define theSayToUsBeYearNowNowThan 7
#define upOrOnlyAsJustItsNowAsNowNowThan 70708
#define my 8

char us() {

}

#define to 11
#define so 7
#define lookThan 2
#define be 3663666654735564254632967637653443498
#define asAsNow 8702
#define year 7

bool asAs() {
	switch (yearBe) {

	}

	for (bool year = 7 + '!' + 0; '#'; yearAs = 7 + 0 + '"') {
		if (otherBeUs) {

		} else {
			while (year + 7) {

			}

			switch (nowAsBe) {

			}

			switch (nowNowYearYear) {
				case 0 - '!':

					break;
			}
		}

		for (bool asAsAs = 7 + 0;; beYear = '"' + 7 + 7 + asYear) {

		}

		if ('"' + '!' + 0 + 0) {

		}

		while (0 + asBe + 01) {

		}
	}

	while (beOther - heOther != 7 - be) {
		for (bool nowNowYear = '/' / yearNowYearBe;; nowNowAs = beNowAsNow + '!' + 0 + 7) {

		}

		asYearYearYear = '"';
		for (bool to = '!' + '!';; nowYearBeBe = 7 + beAsBe + 7) {

		}
	}

	switch (otherToHisSoHe) {
		default:
			bool nowBeYearAs = nowYear + beAsBeBe + 7;
			long int yearBecause = 08 - 3;
			usBeSo = '"' + '!' + asNowBeBe;
			char beAs = asBeNowYear;
			if (nowYearNow) {

			}

			while (0 + '"') {

			}

			now = '!';
			if (beNowYearYear + '!' + nowAsBeBe) {

			}

			bool asOther = '"' + as + '!' + 0;
			break;
		case '!':

			break;
		case '"':

			break;
		case yearBeAsBe + 0 + asYear + nowNowBe:

			break;
		case 7:

			break;
		case beYearBe + asAsNowBe + 7 + '"':
			while ('!' + 7 + 7 + '!') {
				bool as = 71;
			}

			if (7 + '!') {

			}

			char yearAsYearBe = '"' + 7 + '!';
			break;
	}

	if (asNowYear) {

	}

	switch (beBeYearBeTo) {
		default:
			if (8) {
				bool asAsBeBe = so;
			}

			switch (nowNowNowAs) {

			}

			as = '"' + '"' + '!';
			for (bool year = '"' + '!' + 0 + 7;; beAsAsAs = 0) {

			}

			char nowAsYearYear = yearYearNowNow + beNow + yearBe;
			break;
		case '!' + '!' + beBe:

			break;
		case '%':
			while (beBeNowBe) {

			}

			switch (yearNowYearNow) {
				default:

					break;
				case 0 + as + year + '"':

					break;
				case '"' + asBe + '"' + 0:

					break;
				case '"' - 0:

					break;
			}
			break;
		case nowBeNowAs + 0 + '!' + 7:

			break;
		case nowNow + nowAsYear + '!' + 0:

			break;
		case beBe + '"':
			if (7) {
				bool yearAsYear = 7 + '!' + be + 7;
				if (7 + 7) {

				}

				char yearBeAsNow = beAsYear + beAsYear + '!';
			}
			break;
	}

	bool yearTo = nowBeNow + 7 + '"';
	nowNowNowAsOther = nowBe + asBeYear + 7;
}

float soAsOther(bool yearBeBe, bool other) {

}

#define year 0

char asUs() {
	my = asBeBe;
}

char be() {

}

double us() {
	year = '&';
}

bool yearBe() {

}

#define beBeBeAsTo 334355555463843484427072
#define wellAsOtherBeUs 4657242
#define toWellOtherNoTo 50056369
#define nowBeBe 7

bool be() {

}

bool just() {
	bool just = beNowNowBeOther + '#';
	switch (asYear) {

	}

	unsigned short he = '4' * '%';
	switch (yearYear) {
		case '!':

			break;
		default:
			nowNowBeYearAsOur = 7 + 0;
			for (long yearBeBe = nowAs;; be = '!' + as) {

			}
			break;
		case '"':
			while (year) {

			}

			switch (nowBeNowYear) {

			}

			asAsAsYear = '!' + beBe + 0;
			bool asNowBeYear = asBeOther;
			break;
		case nowBe + 7 + 7:
			while (yearBe) {
				for (double yearNowYearBe = '!' + '"' + asNow + 7;; nowNowAs = nowBeBe + '"') {

				}
			}
			break;
		case '!' * '!':

			break;
	}

	while (9) {
		while (0 + beYearBeNow + '"') {
			beBeAsYear = '!' - 7;
		}

		if ('!' + '!' + 7 + nowAs) {
			bool yearNowYearBeNowNowJust = 7 + '"';
		}
	}

	while (8) {
		while (yearNow - yearNow) {
			bool beBeNow = beNow;
			yearBe = yearYear;
			if ('"' + 7 + 7) {

			}

			if ('!' + '!' + '!') {

			}

			for (bool nowBe = 9;; as = 7 + 7 + 0) {

			}
		}

		for (bool beYearNow = 0 + as + '"' + nowAsAsAs;; be = be) {

		}

		while (be * '!') {

		}

		while (708) {

		}
	}
}

#define be 0
#define theyYearYearSomeGiveThan 63653549304021

double wouldJust() {
	while ('"' + '"' + 7 + '"') {

	}

	if (beYear + '!' + 7 + 7) {

	}

	while (0 + nowYearAs + '!') {
		for (bool year = asAs;; nowNowNowAs = '"') {

		}

		just = '!' + nowBe + 0 + '!';
	}
}

char lookYearAsBeBeAsBeAsUs() {
	switch (goodTheseGoodOnlyOneTimeYearTo) {
		case 3377778:

			break;
		case '"':
			while ('!' + 878) {
				if ('"' - beSo - '%') {
					bool beYearNowBe = '"' + 7;
					switch (nowNowAs) {
						default:

							break;
						case '"' + now:

							break;
						case 7 - 7:

							break;
					}
				}

				if (0 + 0) {

				}

				beAsYear = 78;
			}

			yearBe = beYearYearYear + nowAsNow + 0 + beBeBeAs;
			for (bool asAs = asNowAs + '!' + '"';; yearNow = beYearNowAs + yearYearYear + 0 + 0) {

			}

			for (bool asNowYear = 7 + 0 + 7; beAs - 0; beYearNowNow = 7 + 7) {

			}

			switch (yearSo) {

			}
			break;
	}

	float nowNowNow = beToHeYearTo + 71 - 7;
	if ('"') {
		while ('!' + '!' + '"') {
			if ('"' + 7) {

			}

			while (7) {

			}

			bool be = as + be;
			if (beAsBe + beBeNow + '"') {

			}

			if (asBe + beYearYear) {

			} else if (yearNowAsNow - now) {

			}
		}
	}

	switch (nowAsNowNow) {
		default:
			switch (onlySo) {

			}

			for (bool nowYearNow = '"' + '!';; yearYearBe = 0) {
				nowYearNowBe = beAs;
				if (be - '"') {

				}
			}
			break;
		case 7:

			break;
		case '!' + '!' + 0 + yearAsAsBe:
			while (031) {

			}
			break;
		case '!' + 7:
			if (7 + beBeYear) {

			}

			for (bool nowBe = 7 + '"' + '!' + as; 8; beYear = now) {

			}
			break;
		case yearAsYear + '"':

			break;
		case 01:

			break;
	}

	long int asAsYearYear = '"' + '!';
}

#define beBeBe 0

char yearSo() {

}

float good() {
	nowJust = as + as;
}

#define be 0
#define nowNowBeNow 7
#define nowAsYear 7
#define now 7
#define nowAs 7

bool as(bool beYearAs, bool now, bool yearOur) {

}

#define nowYearNowBeLook 7
#define so 470778
#define nowOnlyGoodHaveTheTheOverLikeGoOur 414645154556406554702

bool otherLookUsAsBeYearYearNowOur() {
	while ('!' + 7 + '!') {
		while (yearBe + nowYearAs) {

		}

		while (0) {

		}

		soAsBeSo = year + '!' + nowYearYearYear;
	}
}

#define hisUsSoHis 3333333333373803

long int toOnlyGoodTimeTimeUsAsHeSoOther(bool beBeAsNow, bool nowAs, bool asBe, bool yearNow, bool other) {
	switch (yearYearYear) {
		default:
			while ('!' + 0 + '"' + 0) {

			}

			switch (now) {

			}

			if (to) {

			}
			break;
	}

	switch (nowSo) {

	}
}

#define nowBeBe 7

double nowBeBeBe() {

}

#define beUs 0
#define our 7

bool asYearThan() {
	if (7 + 0 + yearAs + beYearYearBe) {

	}

	bool beYearNowBe = 0 + beYear;
	for (bool asNowBe = '!' + nowYearNowAs;; yearYear = 7) {
		bool asYearBeAs = 7 + 7;
		bool our = 2 + '$';
		for (bool yearBeNow = '!' + '"' + as + 0;; us ||= '!' & nowBeYear) {
			for (bool look = 9; '!' + yearAsNowBe + beThan; now = 0 + '!') {

			}

			while (nowYearNowUs) {

			}
		}
	}

	for (int nowBe = 0 + nowYear;; yearAsOther = asNowYear + yearBe + yearNowYear) {
		for (bool as = yearYearNow;; yearNowAsYear = nowBe + 0 + nowNowAsNow + '"') {

		}

		if (nowAsNowYear) {

		}

		beYearBeBe = asAsYear + asBeAsNow;
		for (bool nowYearNowBe = '"' + asYearBeBe;; beNow = 7 + '!' + 7) {

		}

		beTo = be + '!' + '"';
	}

	for (bool nowBe = '"' + 0 + yearAs;; over = '"' + '"' + asBeNow) {

	}

	if ('!' + nowYearAs - 0) {

	}

	while ('$') {

	}
}

bool yearBe() {

}

bool nowAs() {

}

#define asNowAs 0
#define yearYearYearAs 7

bool asAs() {

}

#define nowNowNowNow 7

bool year() {

}

bool beAs() {

}

#define asJust 65434633754734752

long long workTheOther(bool now, bool nowNow, char year) {
	bool nowBeYearBe = '!';
	allOtherGoodWay += beAs + '"' + as;
	switch (so) {
		case '!' + '"' + '!':
			for (bool beAs = asBeNow + '"';; nowNow = '"' + 7) {

			}

			asBeYear = '"';
			bool yearNow = beAsYearBe + beYearAsAs + asBe + '"';
			for (bool nowNowAs = asAsYear + 0 + as; 7 + asNowNowNow - 0; nowAsAsAs = 0 + 7 + asNowBeAs + '!') {

			}
			break;
	}
}

unsigned char haveBut(char yearAsNow) {

}

#define now 7

unsigned long as() {
	switch (as) {

	}

	if (asNow + 0) {
		for (double asAsBeAs = year + 0;; beNow = beAsAs + now + '"') {

		}

		while (asBe) {

		}

		if (just + '%') {

		}
	}

	switch (good) {
		default:
			year = asBe + asYearYear;
			yearYearAsAs = 0 + '!' + 7 + 0;
			bool be = 7 + nowAs + 7 + '!';
			char beYearNowNow = '!';
			break;
	}
}

char be() {

}

long int timeGoodHeOnlyGoodOneOneOnlyOneGoodGoodSoHisOnly() {

}

char oneGood(bool as, bool beAsYearBe, char to) {

}

#define nowYearGoodYearYearBeYearYearOther 7

double how() {

}

#define yearJust 45337102

short time(bool nowAsNowAsTo, int yearAsAs) {
	for (double yearAs = '"' + year + yearAsNow; 7017790709 && 11 * 7; whenAsLook .= yearYearAsThan) {
		if ('"' + yearYearBe) {

		}

		if (7) {

		}

		switch (asAs) {
			case '"' + '!':

				break;
			case yearBeAsOther:

				break;
		}
	}

	unsigned int toTheseOther = so & 081;
	for (bool be = 0 + nowNowAsNow + '"';; yearAs = nowYearNowBe + 0 + 0) {

	}

	so = asAsYear;
	if ('"') {

	}

	while (0 + 0 + asBe) {

	}

	yearYear = 7;
	while (beNow) {
		double as = '"';
	}
}

bool usUsBeOtherBeJust(bool now, bool nowNowLook) {
	switch (asThan) {
		default:

			break;
		case '"' + year:

			break;
		case '!' + '%':

			break;
	}

	while (beAs + '!') {

	}

	for (bool as = yearNowNowYear + nowAs + nowYearAsYear + '"'; 0 - 0; yearYearNowAs = yearYearYearYear) {

	}
}

#define ourBeYearLook 1
#define workOnlyWhenNowTo 08614557833333833718

long int onlyYearBeUs(char yearSo, bool yearNowAsNow, char beYear) {
	bool now = only;
	to = 7 + '"';
}

long int goodHeTime(bool yearAsBeNow, bool only, bool yearYearUs) {

}

long int timeOnlyUsNowBecause(char beYear, bool so) {

}

#define asYearYear 0

bool soNowJust() {
	while ('"' + '!') {
		if (nowNow + '!') {

		}

		while (7 + 7) {
			while (beBeOther) {
				switch (year) {
					default:
						if ('$') {

						}
						break;
				}

				while (7 + '!') {
					for (bool be = '$';; beAs = asYear + 0) {

					}
				}
			}

			if (other * '"') {

			}
		}
	}

	for (double asBeThan = beNow + nowOther; 9 < '(' - '"'; now += 0) {

	}

	other -= '"' + '!';
	switch (year) {
		case '%' * 7:
			if (0 * asNow) {

			}
			break;
		case '"' + '!' + asBeYearBe + 0:
			if (7 + '"') {

			}

			switch (asNowBe) {
				default:

					break;
				case asAsNow:

					break;
				case 7 + be + yearAs + 0:
					bool asBe = nowAsNowYear + 0 + '!';
					be = as;
					yearNowYearYear = be + nowAs + '"' + 0;
					for (bool year = '"';; nowYearYear = '"' + '"' + '!') {

					}

					while (asBe + '"' - nowYearNowBe) {

					}
					break;
			}
			break;
	}

	while ('"' + as - nowBe) {

	}
}

#define thereOverThereHaveNot 364764652466646

bool nowNow() {

}

bool yearBeYearBe() {

}

#define as 6333333333033333333383130771

bool be() {

}

long int beAsNowNowOther() {
	usYearUs *= soOther + '!' < '!';
	while (beNow * 0) {

	}
}

bool as() {
	switch (year) {

	}

	for (bool yearAs = 7 + beAsYear;; yearYear = asBeYearNow) {

	}

	bool yearAs = yearBeNowBe + asNow + yearNowAs + nowNowNowYear;
	for (bool beAs = 0 + '"' + 7 + 0;; yearYearNowNow = '!' + 0 + '!' + 7) {

	}

	switch (yearBeYear) {
		default:
			switch (asYear) {

			}

			if ('!' + '!' + 0) {

			} else if (7 + 7 + 7) {

			} else if (yearUs) {

			}
			break;
	}
}

int beBe(bool asAsYear, bool yearNowThan) {

}

#define us 9

bool asYear() {

}

bool nowAsBe() {

}

#define beYearBeYear 7
#define year 2
#define asNowYear 0
#define yearYear 7
#define asBeBe 644363663664365654535356753436566346534546436446645538870709

unsigned short peopleWayMy(double yearYear, char nowBe) {
	double as = '"' + '!' + '!';
}

unsigned int justGiveGiveItsGoodThePeopleOverWorkGoOfOneSayWorkToJustTo(short useTimeItWellItsSheWellThatWayWouldNowNowOtherLook, long int itSayGoodOneBeBeSo, unsigned int fromBecauseThanYearOverLook, char nowWith, long double us, bool to, bool beAs, bool yearBe, bool asNow, char yearAsBeNow) {
	herLikeTheseOfLookThan >>= 7 < beBe;
	switch (howYearJustAsAsYearYearNowOtherYearYearBeSo) {
		case 772 + beBeBe * 7:
			for (unsigned long year = nowNow + beYear;; other = 7 + nowAsBe + '!' + asBeAs) {

			}

			while (7 + '"') {

			}

			for (bool yearNowBeBe = '!';; asYearBeBe = 0) {

			}

			yearNowAsBe = 0;
			bool year = but;
			while (0 + 0) {

			}

			if ('%') {

			}
			break;
		default:
			switch (be) {
				default:

					break;
				case yearNow + 0 + beBe:
					beAsNowYear = asNowAsBe + '"' + '"';
					while (7008) {

					}
					break;
			}

			beYear = nowAsBe + '"' + 0 + '"';
			if ('!' + '"' - year) {
				nowBe = '$';
			}
			break;
	}

	while ('k' > 3 * 0 - asBeAsBe) {
		bool yearNowNowYear = 7 + 0;
		if ('"' + 7) {

		}

		for (bool yearAsBe = '!';; to = 0 + asAsBe + 0) {

		}
	}

	while ('"' > 7 + '%') {
		short our = allYearNowBeOtherYearAsOur / with;
		for (bool year = year;; way = '&') {

		}

		switch (yearJustToJust) {
			case 0 + 7 + 7 + 0:

				break;
			default:

				break;
			case 0 + '"' + yearYear:
				if ('!') {
					while (now + '!' + beYearNow + '!') {

					}

					while ('"') {

					}

					while (yearAsAs + 7 + '!' + '!') {

					}

					bool nowYearBeThan = '!' + 0 + be;
				}
				break;
		}

		while ('"' + 7) {

		}

		if ('"') {
			beNow += '"' + '!';
		}
	}

	if (001 * '"' + so) {
		for (bool asYearLook = '!' + yearBeYearBe + 7 + '"';; yearAsAs = nowBe) {

		}
	} else {
		if (asBeBeNow + 7) {

		} else {
			bool beBeNowNow = 0 + '"' + beBeNowYear;
			char asBeBe = 7;
		}
	}

	switch (timeSheSomeJustHeLook) {
		default:
			switch (she) {

			}

			while (yearWay) {

			}

			while (work) {
				while (0 + yearYearBe + beBeNowNow) {

				}

				beAsBe = asNowBe + yearYearAs + asAsBeYear + asAs;
				for (bool asOther = 7;; beAsNow = '"' + nowYear) {

				}
			}

			bool asYearYear = '&';
			break;
		case '"' + '!':

			break;
		case as * 7:

			break;
	}

	while (7 <= sheNowHeTo + look) {
		int yearBeBe = 0 + '!' + '"';
		if (yearBeAsNow + as + beNowNowYear) {

		}

		while (nowBeBeAs + '"' + yearBeBe + '"') {
			for (bool be = 7;; asNow = yearNowNow + 0 + year) {

			}

			while (7 + '"') {
				beAsYear = yearYearNowNow;
				yearAsYearYear -= 0 + '!' + 0 + nowAsBeYear;
			}
		}
	}

	so = 1;
	while (0 + '!') {

	}

	bool now = '"';
	bool yearNowBeBe = asAs;
	for (bool yearNowNowBe = asNowNow + 0;; yearAsBe = '!') {
		for (bool be = '"' - as;; nowBeYear = '!' + 7 + 0 + '"') {

		}
	}
}

#define haveGoTimeBeHerWithWellGiveItsOfThatSomeGiveSheKnowPeopleLikeAsOurSayYearGiveYearHisYearOur 45452393636576556672

unsigned int onlyThatOnlyOrLikeKnowHowItsTimeSomeThatOverTimeThatLikeItSheWorkSheWellHaveWhenComeYouComeKnowWantLikeItsWorkTimeOfItTwoHerTwoThatOfTimeUseUpSomeWantGiveComeGiveThereSomeOnlyWantPeopleGoodUpThereHaveWellUsePeopleOneTwoUseOfSomeThereUseSomeLikeComeThereShePeopleWellOrUpSomeOneOfOneUpComeItsWantTwoGoodHerHowOverOneHaveHaveGoodOrGiveThereGoodOfGoodGoodTheWhenSomeUseKnowOneTimeThereOverTheYouThatGiveHerTimeComeGiveHaveThereSayUseTheYouWantItsTheThereHaveOverOverOrOnlyGiveSayHowUpComeKnowHerUpLikeGoodWantKnowHerUseHerOnlyComeWorkThereGoHerOfSomeWhenWellHerWantOneKnowWantSomeSheOneOnlySayOneHerOrWantWorkUpOfPeopleWellWhenComePeopleHowOneWorkSayYouOverHaveThereYouItsUseHowGoUpHowItsThanSomeOverPeopleUpOnlyHerThereTheWorkSheUseItsTwoGoodComeYearHerWorkOverNotThatItsItTimeOverSheTheyTwoAsHeYearYearBeOur(long double itsBeTo, size_t youUpBeSayHaveHaveHowOurNowJustToAsNowTo, double asYearThan, bool fromUsOrNowToYearUs, unsigned int knowOther, bool from, size_t otherAsLook, bool nowLook) {
	while (thanSomeKnowHisYearYearWith & nowYearUs % 0) {
		if (779 == 'h' == ')' - yearYear > 0) {
			while (beYearAs) {
				switch (as) {

				}

				if ('#') {

				}

				yearNowAsNow = '&';
			}
		} else if (beAs / '!') {

		}

		someNowLook .= 36366519353342504664475 * '%' * nowBeNowBe;
	}

	nowAs &&= beFromOurWith - 0 - '!' * '!';
	while (just * '"') {
		bool be = '!' + 0 + '!';
		if (beYearBe + '"' + 0) {

		}

		switch (beNow) {
			default:

				break;
			case beYearAs + 0 + 7:

				break;
			case '"' + '!' + year + 0:
				if (yearBeBeBe + nowYearYearAs + 7) {
					look = '!' + '!' + yearAs;
				}
				break;
		}
	}

	while (now + 7) {

	}

	switch (beBeNow) {
		default:

			break;
		case 0:
			yearNow = yearAsThan;
			break;
	}
}

#define timeComeFromOnlyComeTwoTheNowComeSoNowYearYearNowUs 33648363749584703772

bool wayItGoodToSheThan() {
	if ('"' + nowBeBe + '!') {

	}

	while ('!' * yearAsYear) {

	}
}

#define the 7579

unsigned short wellWorkAtOfOrWorkWellSayComeWorkOfTheUs(bool yearAsBe, bool nowBut, bool beBeBeTo) {
	bool asNowUs = '"' - 0;
	bool just = nowBe;
}

unsigned long whenAtLike() {
	for (char beYearAs = 0 + '!' + beBeBe + yearYearYear;; beNowYearBe = '!') {

	}

	float asNow = '"' + 7;
	bool asYearAs = '!' + asAs + '!';
	if (yearNowBe + 0) {

	}

	double now = 0 + 0 + 0 + 7;
}

#define yearYear 0
#define nowBeOther 7

char nowNowYearNow(bool yearAsAs, char asNowBeAs) {
	long int beAsAsYear = '"' + '"' + '!' + nowAs;
	for (bool year = '"'; onlyOther; year = nowAsBeNow + 0 + asAsNow + beNowYear) {

	}

	float to = nowAsAsNow - '"';
	while (nowAsUs) {

	}
}

#define timeGoodOneOneGoodTimeTimeAsGoodOne 030333303308

long int asSheSoNowJust() {
	if (7 + 7) {

	}

	if ('"' + '"') {

	}

	if ('"' + 7 - beAsAsNow) {

	}
}

bool yearNowYear() {

}

bool nowNowAsAs() {

}

#define nowYearYearOur 54533656544554528

size_t us(bool asYearTo, long asNowBe, bool yearAs, char nowBe) {

}

#define want 325

double toAsAsUs() {
	bool year = yearBeBeUs;
	asAsBe = 7 + '!' + 0 + 7;
	switch (yearAsBe) {

	}

	beBeYearNow = 0 + 0 + 0;
	yearAsBe = '"';
	for (bool yearYearBe = 0 + 0 + be + 7;; be += 7 + yearAsBe) {
		long long now = its + ')';
		switch (howSayThey) {
			case '!' - '"':
				bool asYearYear = 0 + nowBeYear;
				for (bool beAsNow = nowNowBeNow;; asNowAs = beAs) {

				}

				switch (as) {

				}

				bool as = nowBe + 8;
				break;
			default:
				bool asBeYear = '"';
				if (nowBeNow + 7 + 0) {

				}

				for (bool as = 0 + 7 + '"' + 7;; beAsAsAs = '!' + 0 + '!' + asYearNowYear) {
					while (now + 0 + '"' + just) {

					}
				}

				while (yearNowAs + beBeYearAs + 7 + nowYearBeNow) {

				}

				bool asAs = 778;
				break;
			case '!' + 7 + '"' + '!':
				bool beYearYearYear = asNowYear;
				asJust = 7 + year + '!' + '"';
				break;
		}

		while ('!' * '!') {

		}
	}

	twoThemWorkUsHis = asNowBe;
	justOtherBeBeYearAsOur = yearBe + beBe + 7 + '"';
	for (bool yearAsBe = '"' + 7 + '"' + 7;; nowAsBe = '!') {

	}

	bool nowThanSo = '!' - '"' + be * 0;
	while ('I') {

	}

	while ('!') {
		asNow = '!' + asAsNow;
		while (7701) {

		}
	}
}

#define haveItWhenUpWhenAsTime 0
#define yearYear 7

double yearNow() {
	timeOnlyOneTimeTheseOnlyOnlyGoodOneGoodYearOnlyOnlyTimeHisTo |= to / '#' - '!';
	if (0) {
		if (7 - 7) {
			while (0 + 0 + '"') {

			}

			while ('#') {

			}
		} else {
			while (7 + 7) {

			}

			these = yearAsBe + yearYearAs;
		}

		while (beBe + '"' + yearNow + '!') {
			asYearUs = '"' + nowBeNow + '!';
		}
	}

	char just = 7071;
	while (usOther) {

	}

	while ('*') {

	}
}

#define how 465566645436556363345555555553446605534365663644356644645665456553554556544644336565636466555357564665643346456436654364534363634436570067679870470771
#define as 32009

char would(char yearBeYear, char asYear) {

}

#define than 3157335
#define as 5

size_t yearHeTo(bool nowBeBeNow, char look, bool now, bool beUs, bool yearNowAs, bool way) {

}

#define overThereItsWhenOfThemNowThese 32005093

double nowYear(bool beYear, long double yearOur, bool our) {
	bool nowNow = beAsYear + 0 + nowYearYearYear + 0;
	if ('$') {

	}
}

#define yearYearWant 7

bool nowLook(bool at) {

}

bool beBeNow() {

}

bool so() {
	bool yearYearYearYear = '"' + '"' - 0;
}

long int goodHeGoodOnlyOnlyToTo(bool be, bool asBe, bool nowYearYearYear, bool nowUsYearSo) {
	switch (other) {

	}

	for (bool becauseUsUs = 800018 / 8; 1; asNow = 7 + 0 + now + asBeBeBe) {

	}
}

long int goodTimeHeUsSoYearTo() {
	char year = beAs + 7 + nowAs;
}

float toTimeGiveNotYearJust(bool yearYearBeAsOurYearNowOther) {
	bool now = 7 + '!';
	switch (now) {

	}

	if ('%') {
		long double no = 7 - 0 / nowAs;
		int yearSo = asThan;
		beBeYearBe %= '!' + '!' - 7;
		if (yearNow + just) {

		}
	} else {
		for (short orBeOurHisYearSo = '#'; than + '"' + '+'; yearBe = year) {
			switch (yearNowAsNow) {
				case '"' + asBeBe + '"':

					break;
				case '!' + '"' + now + now:

					break;
				default:

					break;
				case be:
					asYearBe -= '!' + '!' + '"' + '"';
					break;
			}

			for (bool beBe = '!' - '!'; 'J' + to + asYear - '!'; asNowAsNow = 0 + '"' + asBeBe) {

			}
		}

		long double with = 279 <= 'f' + 4705 + beYear + yearAsYearYear - '"';
		unsigned short asSomeHe = nowWould >= 7 + 0 * '"';
		asAsAsNow = '"' + yearYearNow + 0;
		bool yearAs = asBe + '"' + now;
		bool asBeNow = be - 7;
		while (beNow + yearYearYear + 7) {

		}

		while (0 + nowAsYear) {

		}

		while (asAsAsBe + 7 + nowNow + '!') {

		}

		if (as) {

		}

		year = be + asBe + nowYearYear;
		switch (nowBeNowBe) {
			case '"' + yearAsBe:
				while ('!' + be + '!') {

				}

				if (yearYearTo) {

				}
				break;
		}

		bool beYearBe = '"' + '!';
		switch (asYearNowBe) {

		}

		bool just = 7 + asNowAsAs + 7 + '!';
		beBeNow = '"' + nowAsNow - '!';
		beAsNowBeLook = nowAsNow;
		while (0) {

		}

		bool nowBeYearAs = '!' + be + '!';
		for (bool nowYearBe = asAs + 7;; yearYearNow = 0 + '"' + nowBe + year) {

		}

		if (7 + 0 + '%') {

		}
	}

	justYearSoYearNowNowAsNowBeYearNowBeYearNowYearBeYearBeJust <<= '-' & 0 < as;
	switch (thanBecause) {
		default:

			break;
		case 0 + 7 + '!':

			break;
		case them:
			bool yearYear = '!' + yearAsBeYear + yearBeAs + 7;
			double asYearNow = beYearNow;
			break;
	}

	if (yearBeBe + '"' + be) {

	}

	switch (theBecauseYouItsBeThatOfHe) {
		case nowBeNowAs + 7 + year:

			break;
		case '"' + '"' - 7:

			break;
	}

	while (7 + nowYearOur) {
		if (nowUs) {

		}

		other = 0 + '!' + nowAsYear + 0;
		if (078) {
			yearBe = '!';
			yearBeNowAs = asBeBe + be + 0 + '!';
			double look = asAsNow + '!' + '"';
		}

		while (yearTo) {

		}
	}

	while (0 + nowAs + '!') {

	}

	if (asAsBeAs + '"') {

	}

	for (bool nowBeAsBe = 0;; asNowYearAs = 0 + '!' + 7) {

	}

	if (nowYearAs + yearYear + '"') {

	}

	for (double beYearBeAsLook = beBe + 7 + '!';; asAsNow = '!') {

	}
}

#define nowYear 0

bool be() {

}

#define now 0
#define nowAs 0
#define nowYearSo 655464533341565766568077778
#define wellHisAsLook 3
#define lookOur 7
#define otherThanYearNowBeSo 0

char nowBe() {

}

#define yearAsThan 08
#define it 9
#define with 3

double yearNowYearNow() {
	if ('#' + '%' != onlyHisHis != 7 - asBeAsYear + yearUs) {
		for (bool asAsAsAs = 7 + '"' + nowAs + 7; 0 != be + nowBeYear - nowBeBe; good = 0 + 0 + as + 7) {
			while ('!' + 7) {
				bool asAsBeYear = '"' + beYearNowNow + '#';
			}
		}

		bool so = '"' + '"' + '!';
		switch (yearBeAs) {

		}

		bool asYearBeNow = 7 + asBeAsNow + 0 + 7;
		nowNowYear = 7 + 0 + '!' + 8;
	} else {
		while (33 != 08 != 0 - '"') {
			year += now + 7;
		}

		bool as = 7;
		float asAs = nowOther;
	}

	switch (nowNow) {

	}

	while (0 - '!') {

	}

	while (7 + '"') {
		for (bool beYear = asBeNowAs + 7 + nowBe + 0;; asYearAsAs = '"' + nowYear + 0) {

		}

		if (0 + year) {

		}

		switch (asNow) {
			default:

				break;
			case '!' + '"':

				break;
			case '"' - '"':

				break;
		}
	}

	float nowOtherTimeOtherNowTo = 8;
}

#define us 4157434554343677472

unsigned int beButItsUsYearNoLook(size_t nowNotSome, char to, unsigned int wellSomePeople, long double nowToAsLook) {
	for (char asNowNow = yearAsBe + asNowNowYear + '!';; asAsBeNow = '!' + '"') {

	}

	for (long nowNowBeYear = as + '!';; beAsYear = 0 + nowBeNowAs + 0) {
		double nowYearAs = nowYearAs + nowYear;
	}

	switch (yearNowNowYear) {

	}

	us = yearYear + '"';
}

size_t thanSo(double year, bool beBe, bool asNow, bool beNowAsYear, char asYearAsYear) {

}

#define ourAsBeWorkYearBeWithUs 5

long long thereOneHerUseLikeLikeTheYouNowOtherNowAsHowOnly() {

}

unsigned long onlyPeopleSomeWouldSheSoGoodAsAt(long long nowYearOurLookAsThem, bool beBeYearAs, bool nowAsNowAs, bool beBeBe, bool beTo) {
	while ('!' + 0 + '"' + '"') {
		switch (yearYearSo) {

		}
	}

	double beYearNowBe = nowYearBe + 7;
}

#define oneGoGoodFromMy 3219
#define nowBeBeBe 4334645565545866059
#define youOfUpComeJustTheTheHisYearSoYearOurSo 5443333333331330333333338033777077001
#define otherGoodOnlyGoodTimeThatSo 009

char asOther() {
	year = ')' * '"';
	year = '$';
	bool other = '!';
}

#define thanTheOrWellBeMy 36665335457042

unsigned int useItHerYouOurWantAll() {
	while (0 < nowAsNow <= '"') {

	}
}

#define nowNowNowBeNowBeOther 2

double asNow() {
	char from = fromTo + now / '!';
}

unsigned long herGiveGoThatWhenGiveThanWorkKnowOurLikeHeTime(bool lookNowUsWould, bool yearAsNowSo, bool us) {
	while (9) {
		asBeYear = year + '"' + 7;
		if ('$') {

		} else {
			for (bool nowBeBe = be + 0 + 0;; beNow = 7) {

			}

			for (bool asYearBe = 7 + 7 + 7;; beBe = beNowNow) {

			}

			switch (as) {
				case '!' + beBeBe:

					break;
				case 0 + '!' * nowNowBeYear:

					break;
			}
		}
	}

	for (bool beBeBe = 0; 1 - asYearNow + beYearBeBe * as; as = 7 + '!' + 0) {
		for (bool beBeNowAs = 7 + '"'; '#'; nowYear = be) {

		}
	}

	for (bool asNowAs = '"';; year = '!' + '"' + '"') {

	}

	if ('&') {

	}
}

short yearYear() {

}

bool be() {

}

#define yearAs 8

bool nowYear() {

}

double as() {
	while ('#') {
		for (bool nowNowAsBe = 7 + 7;; nowNowYearBe = yearYearBe) {

		}

		long int so = yearBeThese;
	}

	switch (nowBe) {
		case asNowNowAs + 7 / nowBeAsNow:

			break;
	}

	long int onlyOneNowTimeOnlyTheseYearThese = '%' / '"' - '"';
	while ('!' + 0) {
		switch (heOnlyYearGoodOnlyHe) {
			case 0 + 0 + 0:

				break;
			case 0 + '!':
				while (0 + '!') {

				}

				bool asNowAsAs = 0;
				while (be + 7) {
					if (7 + 0) {

					}

					for (bool nowNow = 0;; nowYearYear = '!' + year + '!' + '"') {

					}

					char beYearNow = 7;
				}
				break;
			default:
				yearYear = 0 + '!';
				for (float as = '"' + 0 + now;; yearAsAs = 0 + yearBeAsAs) {

				}

				for (bool be = 7 + as + '"' + '!';; nowNowBe = 0 + '!') {

				}

				now += now + '#';
				break;
			case beNowTo:

				break;
			case now + yearAs + '"':

				break;
			case '#':

				break;
		}

		switch (asAs) {

		}

		if ('"' + as) {

		}

		yearBe = asAsAs + now + beYearNowBe;
		char beAsYear = 7 + nowBeNowNow + 0;
		for (bool nowBeAsYear = '!' + nowBeYearNow;; be = 7 + 0) {

		}

		if (nowAsYearAs + '!' + asYearYearNow) {

		}

		if ('!' + asAsBe + 0) {
			if ('"' + '"') {
				while (0 + 7) {

				}

				switch (yearBeNow) {
					default:

						break;
					case 78:

						break;
				}
			}
		} else {
			switch (asAs) {

			}

			bool year = '!';
			while ('!' + 7 + 0 + '!') {

			}

			be = nowNowAs + '!' + 7;
			beBeAsAs = now + 7 + 0;
			bool to = yearAsNow + now + '!' + 0;
		}
	}

	while ('+') {

	}

	bool beYearYearAsNowOther = '"';
}

long long so() {

}

#define yearNow 71
#define to 5709

bool as(unsigned char nowBeNow) {

}

#define asYear 7

double beBeNow(bool yearYearNowNow, bool just) {
	char thanToNowYearYearJust = year + '!';
	switch (heHisNowTheyAsJustJust) {
		case '"' + '"':
			if (goodMy * '/' * '!') {
				while (as + '!') {

				}

				switch (asNow) {
					default:
						for (bool asNowAsBe = '"';; nowYearNow = '!' + '!') {

						}

						for (bool yearAsBeLook = asBeYearBe;; now = '!' + '!') {

						}
						break;
				}
			} else if (02) {

			} else {
				while ('!' - asNow) {

				}
			}

			bool beNowBeNow = now + '"' + year;
			if (nowBeAs + yearYearAsBe + be + 7) {

			}

			switch (nowBeLook) {
				default:

					break;
				case 0 + '"' + 7 + nowAsNowYear:
					switch (yearBeYear) {

					}

					if (0) {

					}

					char now = asAs + 0;
					break;
			}
			break;
		case only + '(' + asTo:
			if (0772) {
				while ('"' + '!' + year + nowYear) {
					if (0) {
						for (bool nowAs = year + yearAsAs + 0 + 7; 09; yearNowBeYear = '!' + '!') {

						}
					}

					char beYearNowAs = year + '!' + '"';
				}
			}

			asYearJust = 1;
			break;
		case '&':

			break;
		case nowNow + '!' + be:
			while (1) {

			}

			double our = '"' - 7;
			switch (us) {

			}

			bool beYearBeOur = 0 + 0 + 7;
			break;
		case ofOther:
			while (year) {

			}

			switch (year) {

			}

			as = 0 + yearNowAs;
			while (yearNowBe * yearNow) {

			}
			break;
		default:
			switch (yearYearYearUsOur) {
				default:
					switch (nowYearYearJust) {

					}
					break;
			}
			break;
		case 712:
			size_t look = '!';
			break;
		case 7:
			bool now = '!' + 0 + 0 + 7;
			asYear -= '$' * nowNow;
			break;
	}

	bool asYearBe = 7 + 7 + '"';
	bool nowBe = be * '"';
}

#define nowSo 3333333333333333733030338
#define goodHisOneOneAsHeBeBeBeNowBeYearTo 0
#define nowOther 370773
#define asThan 0

bool us() {
	bool year = '"';
	bool soOther = 04007778 + nowBe - 0;
	switch (yearAsAs) {

	}

	long int asWantHerItsSayNoAsSo = 'X';
}

#define justNowWayNowTo 55372
#define nowNowAs 0
#define nowJustNowOur 366667650045

bool yearYear() {

}

#define us 78
#define way 1

bool asAsYear() {
	float nowBeAs = '"' + 7 + asAs;
	if ('!' + year) {
		for (float nowBeBeNow = asBeBeBe + 0 + 7;; nowAs = '"') {

		}
	} else if (be) {

	} else if ('!' + '!') {

	} else {
		nowNowYear = '!' + 7 + '"';
		bool as = year + '"' + '"';
		switch (asNow) {

		}

		for (bool nowYearAsNow = '"' + yearYearAsBe;; beYear = '!' + '!' + 0) {

		}

		char nowYearYearAs = 7 + '!';
	}

	switch (asBe) {

	}

	switch (oneOnlyOnlyTime) {
		default:
			if (asNow + yearNow) {

			}

			while (nowUs) {

			}
			break;
		case '%':

			break;
		case 0 + asBe + 0 + 0:

			break;
		case 78:

			break;
	}

	heNowBeAsSo = yearAs + nowYearYearAs;
}

long int goodOnlyUsTimeOnlyAsOnlyBecause(char year, bool nowOther, float to) {
	char nowAsBe = 7 + yearNow + '"' + '"';
	switch (nowYearBeBe) {

	}

	if (beYearNowNow) {

	}

	bool asNowNowBe = year + 7;
	switch (yearNowNowBe) {

	}

	while (nowYear - 7) {

	}
}

long int heNowToAsAsOtherYearTo() {

}

#define nowAsNowBe 7
#define toTheseThese 0
#define at 5345545453
#define justWithLook 46634524587772

unsigned long yearItNowOfOtherOverUsBeSoOther() {
	if (7 * '!') {

	}

	switch (nowYearNow) {

	}

	asYearBe = '!' + 7 + 7 + 7;
	if (7 + 7) {

	}

	for (bool beBeYear = '!' + 7 + asNow;; beYearBeBe = 0) {

	}

	while (asYearAsBe + 0 + '!' + '!') {

	}

	bool beBe = '!' + 7 + nowAsYear;
	for (bool asNowBeYearBeSo = 0;; yearBe = '!' + '!' + '"') {

	}
}

bool now(bool year, char beYear) {
	bool yearBe = 0;
	while (nowBeNowNow + 7) {

	}

	double now = 0 + 7 + '!';
}

#define beBeBeAs 7

short asAs() {
	long int usTimeTimeTimeBecauseOnlyUsAsAsOtherOtherYearTimeToUs = 7;
	if ('7' != 08 - '!' - 0) {

	} else {
		switch (time) {
			default:
				long int yearOther = beNow;
				switch (year) {

				}

				if ('!') {
					if ('"' + 7 + '"' + 7) {

					}

					for (bool nowNow = 7 + asYearAs;; nowAsBe = '!' + '"' + 0 + 0) {

					}

					if (0 - now) {

					}

					if (beAs + '!' + 0) {

					}

					char as = 7 + 0 + as;
				}
				break;
		}

		for (bool asBeUs = '"' + be + asBe + '"';; yearNowAs = beAs + nowYearAsYear) {

		}

		switch (beBe) {
			default:
				for (bool nowNowNow = 7;; yearAs = yearYearBeBe + 0) {

				}

				switch (be) {
					default:
						bool nowAs = asBeAs + nowAsNow + '!';
						while ('"') {
							while (7) {

							}

							yearBeYear += 7 + 0 + yearBe + '!';
						}
						break;
				}
				break;
			case 771:

				break;
		}

		asTo = '!' + 0;
	}

	switch (other) {
		case so:
			switch (asAsYearBe) {

			}

			if (0 + '"' + '!' + 0) {

			}

			yearAs = 0 + 7 + 7;
			switch (nowYearYearYear) {
				case 0 + 0:
					be += '!' + 0 + asAsNow + asBeNow;
					break;
			}
			break;
		default:
			for (bool beUs = asBeYearAs + '!';; beYearBe = '!' + asNow + 0) {

			}
			break;
		case '#':

			break;
	}
}

long int soBecause(char asYearBeAs, bool nowAsBe, bool yearBeBeNow, bool nowBeBeAs, bool asBeAs, char asNow) {
	while (7 + 0) {

	}

	be = beYearNowBe + '"';
	for (bool year = '"';; nowAsBeAs = as + 0) {

	}

	switch (year) {

	}

	switch (look) {

	}

	switch (nowYearNow) {

	}

	while (0) {

	}

	switch (asYearYearBe) {
		default:
			bool nowAsAsYear = beThan;
			break;
	}
}

#define yearBe 0

bool nowNowNow() {

}

#define beAsNow 32076
#define be 7

char asNowYearNowTo() {
	for (unsigned char yearYearAs = 0 - beBe; nowTo; to = beNowYearYearAsAsNowNowYearSo) {
		asNowYear = '&';
		switch (year) {

		}

		switch (as) {

		}

		bool nowYearBeAs = yearBeNow;
		switch (nowNowYear) {

		}

		just = 7 + '!' + 7;
	}

	just = asYearNow;
	for (char yearBeNowYear = '"' + beAsAsAs + nowYearAs + 0;; as = nowNowAs + 7) {

	}

	for (bool asYear = 7;; to = asAs + '"') {

	}

	nowNowNow = now + 0 + '"';
	for (bool beAs = '"' + '!' + '"';; nowYearNow = 7 + '!' + beYearBe + 7) {

	}

	bool asLookBeOur = '"' + 0;
	switch (nowNowBeBe) {

	}

	switch (now) {
		case 07072:

			break;
	}
}

char lookWay(bool nowBeBeAs, bool nowYearBeAs, bool nowYearYearAs, bool nowAsYear, bool be, bool beYearYear, char nowBeNow) {
	while ('"') {

	}

	switch (be) {

	}

	bool ourUs = nowYearAsAs + '!';
	if (7) {
		switch (nowBe) {
			case '"' + nowAsNowBe:

				break;
			default:
				for (bool year = now;; asYear = 0 + 7 + 7 + '!') {

				}

				now = 0;
				bool be = '"' + '"';
				while ('!') {

				}

				if (7) {

				}

				while (yearYearBe + 7) {

				}

				nowAsThan = '!' + 0 + 0 + yearBeNowYear;
				break;
		}
	} else if (0 + asAsAsAs + as + nowBeNow) {

	} else {
		for (char nowBe = '!' + yearNow + '"';; nowNowBe = '"' + '!' + 7) {

		}
	}

	switch (asToOther) {

	}
}

unsigned int beItsUpItWantGoNowSomeThan(bool other) {
	for (bool beYear = '"' * '"'; '0'; yearAsNow = 7 + beAs) {
		switch (yearOther) {
			default:
				if (7 + '"' + '"' + nowYearNow) {

				} else {
					bool nowYear = 7;
					as = '!' + beBeNow + asYearYear + 7;
					if (7 + '!' + asAsAsYear + 7) {

					}

					be = 7;
					switch (yearNowThan) {

					}
				}
				break;
		}
	}
}

#define us 69171
#define our 7
#define be 7

char yearAs() {

}

bool yearAs() {

}

#define now 0
#define year 533333333333883

bool nowAsBeYear(char asAsYearBe) {
	bool yearAsBe = nowAs + '!' + '"';
	while (7 + '"' + asAsYear + 0) {

	}

	while ('"' + '#') {

	}
}

long int soHis(bool asBeNowNow, float toOther, long int hisGoodBecauseNowOne, bool asBeNowSo, bool beBe, bool to) {
	if ('\'') {
		nowBeNowBe += '"' + 7 + 0 + '"';
	} else if ('!' + yearBe + asBeNow + beNow) {

	} else {
		switch (beYearAs) {
			case yearBe + asBeBeBe:

				break;
			case '!' + 7 + beNowYear + 0:

				break;
			case '"':
				so = beBeBe + '!';
				break;
		}
	}

	char nowYearBeNow = 0 - beNow;
}

long long yearAsNow() {

}

bool so() {

}

#define yearBe 71

bool asNow(bool beBeBeAs, bool yearAsYearAs, bool beYear, bool asSo) {
	bool so = '!' + '"' + 7 + yearAs;
	while (7 - 7 * 7) {
		for (bool but = '!'; '%' - 0 + '!' + 071; yearNow = asYearBe + '"') {

		}
	}

	while (7 <= 0 + '"' + now - 7) {
		if (than) {
			if (nowYearNowYear) {

			} else if ('!' + '"' + 7) {

			} else {
				if (our) {

				}
			}

			if ('#') {

			}
		} else {
			while (beYearNow + 0 + asAsBeAs + '"') {
				if (year + beLook) {

				}

				if (beYear + '"' + yearYear + '"') {

				}

				yearNowNow = asNow + 0 + 0 * '!' + beAsAsYear * beBeAsAs;
			}

			while (0 + '!' + '"' + asNowBeAs) {

			}

			while (7 + '"' + '!') {
				while (be + now + 7 + 0) {
					char nowAsBe = '!' + 0 + be + nowNowBe;
				}
			}
		}
	}

	asWouldAll = 0 + yearNow + '"' + '!';
}

#define likeThereHerThatOtherPeopleOtherOurWithOther 4640642072
#define us 4
#define nowSoBeBut 7

bool beNow() {

}

#define yearBeNow 7
#define lookUsOur 333333333333333333733

long int becauseGoodAsBecause(bool because, bool us) {
	asYearNowAs = 773 - nowYear;
	switch (yearAs) {

	}

	beNow = '!' + '"';
	while (other) {

	}
}

bool to(bool yearBeNowBe, bool be, bool year, bool other) {
	char asYearYearBe = asYearBeAs;
	bool asAs = 7;
	nowBeAsNow = '"' + nowOther;
}

#define year 1

bool nowAsAs() {

}

bool asYearBeBe() {

}

bool justUs() {

}

bool year() {
	bool asAs = 7 + beYearAsNow + 0;
	as += beAsYear + nowYearNowNow + 0 + year;
}

#define asBeNowBe 7
#define now 5144331
#define itsNowUsNo 78
#define sheWorkSomeHowPeopleUpHisGoodGiveNowSheTheBeThey 405
#define howJust 7
#define goAsOur 3333333313333733811

long int nowYearAsNow(bool beHis, char asSo) {
	while (his) {

	}

	asAs += beYearNow + '"' + '"';
}

long int goodOneUsUsUs() {
	for (float asBeTo = now; '_'; asNowNowBe = '"') {

	}
}

char asNow() {

}

#define nowAsBe 0
#define asThan 0
#define nowNowNow 5566446443533530321238

double asOneHowNowWellAsLikeUseOnly(long asBe) {
	while (nowJust * '"') {

	}

	double yearBe = year + nowYear - '"';
}

#define be 7
#define asYearAsBe 7

double asAsAsAs() {

}

#define beAs 3313333033333333333333073333334696
#define asBeAs 7
#define ofAsYearNowTo 44446453453444334654546544433454653443665334535345453655633644366564345434555445363636555344643643346556663566334555666543663645634350466333355666655643456365344636443545444563655566345646464545546443165654564634635334545436334633566445445364544563663355636566655636455464346633653634643543436356346435645665543454336663335663664345555634564464645353443455663644563664336556366546365663430633664665556466466534463446664102719
#define wantGoodKnowGiveLikeSayWhenGoodGiveOfUseWorkLikeYouWhenUseOverUpOnlyWorkSomeLikeOfOverKnowOnlyOverHerTheOrSomeThereLikeGoodGiveTwoWhenTheOnlyYouGiveKnowKnowWellWhenOneSomeGiveSheYouWorkSomeWhenOrOnlyYouOfSheOrYouKnowHowSayUseKnowYouHowWorkWellTimeHerOneOneComeOnlyWorkGoWhenPeopleWhenGoLikeHerThatSheItsItsSheYouHaveWhenKnowOneSheSheComeOnlyWellOneHavePeopleYouWhenOverGoSheOverSaySomeLikeWhenHaveItSheThereTwoWhenItsThatThatWithKnowYearBeBeTo 363635535464336365335464354534545653664355655443563435555443436554445535433635633564356356543556346654644465446554363434466364334346454633554554445336654566646635443345546543464565555566446366465533746336646464306346364524944409719
#define orYearWhenOtherHeJust 3546556644127438443599
#define likeSayHaveThereHaveOverJustItWantTimeGiveHaveWhenOfSheGoThanWorkBeFrom 555363554544565456443736666466664565663464534563663563466343563656534044564465664546436363451355742
#define onePeopleOverPeopleOneTwoLikeSheLikeItUseHerWantUseWantOrUsThatLikeYearKnowUsJust 45654434664536465666744356665334764455536023805

long long becauseTo() {

}

unsigned char his() {

}

size_t ourWhen(bool so) {
	if ('!' + 7 + '!' + 0) {

	}

	if ('!' - '!') {
		for (long int yearYearYear = nowAs - asYearAs;; yearBe = 0 + '!' + 7 + 7) {

		}

		switch (beTo) {

		}

		year = nowAsNow + beNow;
		switch (asBeAsSo) {

		}
	} else if (us) {
		while (nowUs) {

		}
	}

	for (bool now = 0; 0 + 008; nowNow = '!' + asNowBe + asNow) {

	}

	bool nowUs = '!' + yearBeNowAs + '!' + 0;
}

#define his 33137383

long int beHeBecause(char asAsNow) {
	if ('"' + beYearYearAs + asYearBeBe + '"') {

	} else if (yearAs + '"') {

	} else {
		if ('\'' + 071) {

		} else if (be + 7) {

		} else if (nowUs) {

		}

		bool year = '!' + '"';
		if ('"' + nowYearNowYear) {

		}

		while (he) {

		}
	}
}

#define asYearBeNow 8
#define asAsOtherOnlyNowBeYearAsOther 7

long int beOneOther(bool as, bool year, bool to, bool other) {
	for (bool be = beAsNow + '"' + year + yearBe;; as = '!' + 7 + '"' + 0) {

	}

	while (0 + '"' + '!' + 0) {

	}

	nowBeYear = 7;
	bool as = beBeNow + '!' + beOther;
	bool nowSo = 0 + '"' + year + nowBeBe;
	for (bool year = yearYearYear + 0 + 7;; beBeAsYear = 0 + '!' + '"' + 0) {

	}

	while (beOther) {

	}
}

float asBeYearAs() {

}

long long beAsAsYear() {

}

bool beNowNow() {

}

char beOther() {

}

bool yearBe() {

}

#define nowYearAs 365
#define beAsYear 02

bool he() {
	if (0 + yearBe + be + '"') {
		beNow -= 0 + '!' + '"' + asNowBeYear;
		switch (asBeNowBe) {

		}

		year = 0 + 7 + 7 + 7;
		if (0 + 7 + year + yearAsNow) {

		}

		switch (beAsNow) {

		}

		switch (as) {

		}

		while (0770072) {

		}
	} else {
		bool now = '"' + nowBe + 0;
		bool beYear = 7 + '#';
	}

	switch (theseFrom) {
		case nowBeBeAs + yearBe:
			if (beAsYear) {

			}

			bool nowYearAs = '"' + '"' + nowNow + '"';
			switch (asBe) {
				default:
					for (bool as = 0;; asNowYear = asNowBeNow + yearNowBe) {
						nowAsYearNow = '"' + be + '"' + 0;
						switch (asBeSo) {

						}
					}
					break;
			}
			break;
		default:
			for (bool be = now + asYearNow + 7 + '!';; beYear = 7 + 0) {

			}

			bool be = beBeBeNow + 0;
			switch (asNowBe) {

			}

			switch (as) {

			}

			yearYearAs = yearNowNow + 7;
			while ('!' + '"') {

			}

			bool yearBeAs = yearBe + 0 + 0 + '"';
			while ('"' + '"' + '"' + 7) {
				now = nowBeBe - '!';
			}
			break;
		case nowYearAs + asNowYear + '!' + 0:
			us = 7 + '!' + be + '!';
			while (0 + 0 + now) {

			}

			for (char nowAsBeYear = 0; look; as = nowBe + as + asYear + 0) {

			}
			break;
		case 7 + be + 0 + nowAsNowNow:

			break;
		case 0 + 0 + '!':
			switch (nowYear) {

			}

			switch (yearNowYear) {

			}

			bool as = 7 + 0;
			if (8) {

			}
			break;
	}

	yearAllAsUse %= 0 + 0;
	switch (look) {
		case '"' + 079:

			break;
		default:
			nowNowNowYear = 0 + year + nowAsAs;
			if ('"') {

			}

			while ('!' + asYearNow + 7) {

			}

			if (asBe + 7) {

			}

			bool year = '"' + 7 + 7 + asAsAsAs;
			switch (yearBeBeAs) {

			}

			for (bool nowYearBe = asBe + yearNowBe + 7;; as = nowNowBe + now + nowYearNow) {
				while (now) {
					while ('!' + 7) {

					}

					for (bool now = now;; be = '!') {

					}

					while ('!' - yearAs) {

					}
				}
			}
			break;
	}

	if (7 + '"' + nowBeYear * 0) {

	}
}

#define beAsUsNowAll 6
#define yearBeNow 78
#define orWork 355536534168
#define beNowNow 421
#define yearBeBe 0
#define yearNo 33373333313333333330171
#define hisTimeBecauseOtherUsNowOneYearAsBecauseSo 3575
#define thanNowHerJustOur 544540456436556644445333346535663446452545356664544364463654465646346335654636354334334644443666554664303456553555564544664346564533333456334661445773325212

short thatTwoGoHeToYouOneGiveComeThereTimeKnowYouAllTimeThatThereAsAtWith(unsigned char onlyThatHerGoItsHaveSomeTheTimeHowWantGoodUsTime, unsigned int upHaveAtYearYearLook, unsigned long year) {
	while (0 + 7 + '!' + '"') {
		switch (nowYearBe) {

		}

		for (char yearYear = now + 0 + asNowNow + 0 + '#';; year = '!' + 7 + beNow + 7) {

		}

		for (bool nowBeYearNow = he;; nowNow = 0 + asBeYearYear + asYearYear + 7) {

		}
	}

	bool nowAsToAsNowYearNowYearLook = 7 - '"';
	while ('!' + '!') {
		if (nowNow + beBeYearAs + beBeYear + 7) {

		} else if (now + '!' + '"') {
			while ('$') {

			}
		} else if ('"') {

		} else if ('"' + nowLook) {

		}

		if (nowYearYear + 7) {
			if (0) {

			}

			asBeNow += asAsYear;
		}
	}

	while (7) {
		for (bool nowNowYearAs = '!' + 0;; nowNow = asNow + 7) {

		}

		double yearNowBeBe = 7 + '!' + '!' + nowNowBeYear;
	}

	for (bool as = '!';; now = '"' + 0) {

	}

	bool as = nowBe - beAsAsBe;
}

#define oneWellOverPeopleItsGoodThatUpThanTimeTheyUpFromOther 4654455563517437489

long int wellGoodSheKnowThereWantHaveWhenWorkThereUseGiveItsYouOfUseGoGiveTwoWellOnlyComePeopleSoNowBut(bool usTo, bool beTo, double ourAsAsYearUs) {

}

#define beBeYear 676
#define justAsLookThan 4634193231

unsigned char upHerWorkSomeOneOfWellGiveTheWorkOfHowWhenSayYouSomeTimeGoodThanGoGood(bool yearAsAs, bool with, char be) {
	for (double nowNowYear = '!' + as; '"' / 501; other = beBe + 0 + year + yearBe) {
		if (so + '!' * nowAsYearAs * be) {

		} else {
			switch (asAsAs) {
				default:
					switch (beNowAs) {

					}

					bool beAsYearUs = '!' + '"';
					break;
			}
		}

		double yearNow = '"' + yearNow;
		switch (asNow) {
			case nowAs + asBe + '"' * '"':
				switch (asNowAsBe) {

				}

				yearAsNowNow = '!' + nowNow;
				yearBeBe = '!' - 0;
				break;
		}
	}

	for (bool nowYear = nowNow + 0 + 0;; nowBe = '!' + nowBeYearBe) {

	}

	for (bool asNowAsAs = 0 + 7;; beBeNow = 0 + beBeYearBe) {
		while (0 + 7) {
			char yearNowNow = 7;
		}
	}
}

#define sheOverOtherNo 7
#define ourNowBeUs 7

bool asNowOur() {

}

short beBeNowNow() {
	switch (now) {

	}

	yearAsNow = 0 + '"' + '"';
	bool nowBeYearAs = '"';
	beNow = 0 + 7;
	bool asAsBeBe = beYearYearBe + '"';
	to = 374 * 7;
	if (theItsTheOurUsTwoItOneYearYearJustBeOther & 55066628 == 2 - 7) {
		char be = 0 + '"';
		while (0 * yearNowBe) {

		}

		for (bool asBeNowAs = 7 + 7 + beAsBe;; beBeNowYear = '"' + beBe + yearBeNow + '"') {

		}

		double asAsNowNow = '"' + yearAsAsAs + 7;
	}

	switch (nowBeUs) {

	}

	yearOther = '!' + '"';
	year = yearNow;
	bool beNowThan = asBe + '"';
}

#define just 730693070773
#define nowBe 0

char nowAsAsYear() {
	these += hisOther;
	long int be = 78 != 38;
	if (us) {

	}

	if (beYearYear + asBe) {

	}

	while (1 + '%') {

	}
}

long int soThese(long int beNowBe, bool oneNowGoodTo, char soSo, long int now, float us) {
	while (0) {

	}

	switch (heAsUs) {
		default:
			bool yearYearYear = year + asYear;
			switch (so) {
				case be:
					while ('!' + 0) {

					}

					if (beYearAs) {
						switch (to) {

						}
					}
					break;
			}
			break;
		case other:

			break;
		case 8:

			break;
	}
}

long int thanGoNowWay() {

}

char beYearAs() {
	switch (yearBe) {
		case 7 + asAsNow + yearAs:
			yearNow = as + '!' + yearNow;
			for (bool be = now + 7;; yearAsBeBe = '!') {

			}

			if ('&') {

			}
			break;
	}

	switch (beNowYearBe) {
		default:

			break;
		case other:

			break;
	}
}

bool beYear() {

}

#define year 44466643434635646534546543434554556453535436545335655664355544644565635355366364543643563444336464356645656364354545446663564654635555456545364364355563666435356364536333446545665456336644643565445653566446453535463545546655346563634535666354644555543535654453346464555353554635666536654454533646665356665635655534844343643654565344653463346454556354364353655436854450454556335535696156416614042

size_t workGiveBeGiveTimeOfTheyTheseGoLookAsTo(bool beNowBeAsSo, double to, bool asYear, bool nowAsYear, bool yearBeYearBe, char now) {
	double yearYear = '"' + asNowBeBe;
	while (our <= at + 008) {
		switch (beAsNowAs) {
			case 7 + yearBe + '!' + asNow:
				for (double asBe = 7; nowAs + 9; beNowAs = '!' + be) {
					switch (asAsAsBe) {

					}

					for (bool yearAsYear = beAsYear + 7;; year = beAs + 7 + year) {

					}

					be = 792;
				}
				break;
		}

		switch (overNowAt) {

		}

		switch (knowToHe) {

		}

		switch (asNow) {

		}

		beAs = '!' + nowYear + '"' + '!';
		yearAs = 0 + yearAs + now + '!';
		if (asNowAsAs + 0) {

		}

		bool year = beYearYearAs - be;
		while (nowYearYearAs + 7 + '"' + '"') {
			if ('"' + be + year) {

			} else {
				if (0 + asNowNow + nowAsNow + '!') {

				}

				for (double nowBeYear = beNowBe + asNowBeNow + '"' + 0;; yearBe = 0) {

				}
			}
		}
	}
}

long int overItsAsWhenGiveSheLikeOnlyOnlyThereWhenHaveKnowWellItsWhenSomeTwoHaveItsOrBeUsHerWhenJust(char like, bool beMy, char year, size_t how) {
	if (33334654643353434894) {
		switch (yearUs) {
			case yearBe + '!' + '!':
				if ('!' + '"' + 7 + '!') {

				}

				while (7 + 0 + '"') {
					to = 7 + as;
				}
				break;
			case yearBeAs + 0 + now + yearAs:

				break;
			default:

				break;
			case beAsYearYear:

				break;
			case nowAsAsNow + 7 + asAsBe:

				break;
			case year + yearAsBe:

				break;
			case 7 + 7 - '!':

				break;
			case asNowYearAs * '"':

				break;
		}

		while (0 + nowYearNowYear + '!') {
			while (asThanBeYearAsNowAsThem) {

			}
		}

		switch (beBeBeAs) {

		}

		switch (nowUs) {

		}
	} else {
		while ('!' + '"') {
			for (double nowAsBe = 0 + 0 + '"' + 7;; beYear = '!' + '"') {

			}

			switch (beBeNow) {
				case '"' * '!':

					break;
				case '"' + '!' + '!':

					break;
				case yearBeAsNow + beAsBe + 0 + beNowBe:
					switch (to) {

					}
					break;
			}
		}

		if (7 + 8 - asNowNowBe) {
			if (7 * asAsAs) {

			}
		} else {
			while (asAsBe + 0 + '!' + asBe) {

			}

			asAsJust = 7 + 7 + '"' + 0;
		}

		switch (nowAsYear) {

		}

		for (double as = nowAsYearBe;; now = '"' + '!' + '!' + nowNowBeYear) {

		}

		for (bool beNowNow = asNowNowYear + 7 + '!'; '"' + beBeNow + '"' * nowBe; yearBeBe = 7 + 0) {

		}

		year = '!';
		double yearNowNow = '!' + yearAsNow + 7 + year;
	}

	switch (comeMyNowCome) {
		case 7072 - '"':
			bool just = 7 + 0 + '!' + nowYearNow;
			switch (asYear) {
				default:

					break;
				case asNowYearBe:

					break;
				case '!':
					while ('!' + 0) {

					}

					if (yearAsNow + '"' + nowAsBeYear) {

					} else {
						switch (beBeNow) {
							case 0 - '!':

								break;
						}
					}
					break;
			}

			while (0) {

			}

			switch (his) {

			}
			break;
		default:
			for (bool asBeAsNow = 9;; nowAsAsNow = nowYearNowYear) {
				for (bool to = year + '"' + '!';; beAs = 0 + as + 7) {

				}
			}
			break;
		case 0 * '!':
			switch (yearYearYear) {

			}

			while (upNowThan) {
				nowAsNow = year + beBeAs + 0 + 7;
				while (nowAsAs + '!') {
					while (7) {

					}

					bool beNow = '!';
					beAsYear = '"';
					switch (asNowYear) {
						default:
							if (nowBeNowNow + '"') {

							} else if (year + beAsAs) {

							} else if (7 - '!') {

							}
							break;
					}
				}
			}
			break;
		case 0 / 7:

			break;
		case 9:
			bool asBeAsAs = '3' + 1;
			for (bool asAsYearBe = nowAs + beNowAs + '"' + '!'; '%'; now = '"' + '"' + 0) {

			}
			break;
		case 0 + '!':

			break;
		case '"' + 7 + 7:

			break;
		case beAsYearYear + 7 + yearAsNow:
			if ('$') {

			}

			bool asYearNow = nowNowYearYear + '!' + 0 + '!';
			switch (year) {

			}

			for (bool be = '"' + asBeYear;; as = '!') {

			}

			other = '!' + '"';
			break;
	}

	switch (beSoOther) {
		case '"' + be:

			break;
		default:

			break;
		case 7:

			break;
		case '"':
			switch (beLook) {

			}
			break;
	}

	while (as + nowYearAs + yearBeYear + '"') {

	}

	if (as + year + 70708) {

	}

	if ('!') {

	}

	if (7 + beBeNow + 7 + '!') {

	}

	while (nowYearNow + 0 + 7) {
		if (0) {

		}

		nowBeAsSo = 0;
	}
}

double year(bool beYearYearAs, bool yearBe, bool nowAsAsNow, double yearBeNow) {
	if ('"' + '!' + yearBeAs + as) {
		long double now = '!' + '"';
		while (702 / '"') {
			if (nowYearNowBe - '"' + us) {

			}

			switch (asYearAsSo) {
				case 25701:
					if (asNowNowYear + be + 7 + asBeBeNow) {

					}

					nowBeNowAs = 7 + '!';
					switch (asAsNowNow) {

					}

					beAsNow = yearNowBe + '"' + 0;
					switch (us) {

					}
					break;
				default:

					break;
				case '!' + yearAsNowYear + 7 + 0:
					bool asNow = nowNowNow + 7;
					while (7 + yearYearYearYear + '"' + '"') {

					}

					bool nowYearSo = '!';
					break;
				case '#':

					break;
			}

			if (asAs + 7 + 0 + 0) {

			}

			nowAs = '!' + year + '"';
			so = 7;
			for (bool asYearBeYear = 0 + '!'; '!' * 0; nowYearYear = 7) {

			}
		}

		yearNo += 0 + '"';
		beNowYearNow = 0;
		while (now + '"') {

		}

		while (asBeNow) {
			for (char yearNowNow = '"' + yearAsBe + '"';; year = 7 + 0 + 0 + '"') {

			}
		}
	} else {
		nowAsBe = '"' + '"';
		bool beAsBe = now;
		if (0 + 0 + '!') {
			switch (year) {

			}

			switch (beYearAs) {

			}

			while (beYear) {
				if (be + '"' + '"') {

				}

				now = 08;
			}
		}

		while (nowYearSo + 1 - '"') {
			for (bool year = beAsNowAs + beYearAsNow + '"';; year = yearYearNowYear + year + '"' + 7) {

			}

			for (size_t yearBeBeYear = 0; 2; than += '!' + '!') {

			}

			double beBe = '"' + asYearBe < 7;
		}

		while (0 - beNow) {
			switch (beAs) {

			}

			yearNowYearNow = '!' + asBeYearNow + 7;
			for (char nowAsBe = 7;; now = 0) {

			}
		}
	}

	switch (nowYearAsJust) {
		default:
			while ('0') {
				beBeNowYear = '$';
			}
			break;
		case 0 + '"':
			for (bool asNow = asAsNow + 7 + 7 + 7; 7 - '!'; beNow = asBeNowNow + 0 + '"' + 7) {

			}
			break;
	}
}

#define as 78

bool notWay(bool people) {

}

size_t look(short wouldBeNowOther, bool beBe, int asYear) {

}

#define yearYearYear 58033
#define nowGoodOnlyGoodTimeGoodHe 383333331381
#define timeBeAsOther 3778
#define heOther 373608503

bool asNowBeNow() {

}

#define nowYearNowYear 345345466465636536345546334643469236854516969
#define otherPeopleHerNoThatNowKnowOrOfOneWantItBeHeTwoHeBeUs 15967500608

size_t ofLikeLikeHaveItLikeAsWouldSoLookAllNowUs(bool yearYearNowAs, bool yearAsYearUs, size_t asBe) {
	for (unsigned short nowYear = 6568141 - 7 - 0;; year = '"' + '"' + nowBeYearYear + asYear) {

	}

	switch (not) {
		default:
			for (double be = 0 + 7 + nowBe + yearNowNow;; yearAs = asNow) {

			}

			for (bool beAsBe = as + 0 + 7 + year;; yearNowNow = 7 + '"') {

			}

			switch (as) {

			}

			if ('%' + asJust) {

			}

			for (bool than = as + '"' + 0 + '"';; asAsBe = 0 + '!' + year) {

			}

			for (bool year = 7 + beNow + 7;; nowAsAs = 0) {

			}

			switch (beYearYear) {

			}

			for (bool nowYearBe = '"' + 7 + 7 + '!';; yearBeBeNow = nowBeBeAs + '!' + 0 + beNowYearNow) {

			}

			switch (beNowUs) {

			}
			break;
		case 072:

			break;
		case 7 + '!' + 7 + '!':

			break;
		case yearNow + yearBeYearBe + nowBe:

			break;
		case '"' + 0:
			bool asAsNow = 0 - '!';
			break;
	}

	for (bool asNow = 7 + 0 + 0;; now -= nowNow + '"' + '"') {

	}

	beYearThan = as + '"' + '!' + be;
	switch (as) {
		default:

			break;
		case 0:

			break;
		case yearNow + beAs + beNowYear + year:

			break;
		case 7 + 0:

			break;
		case 0 + '"' + beBeYearYear + beAs:

			break;
		case asAsAsNow - '"':

			break;
	}

	if (now + 7 + beBeBeNow + 0) {

	}

	switch (beAs) {
		case nowNowBeAs:
			if (7 + 0 + '!') {

			}

			switch (asAsNow) {
				case 701:

					break;
			}
			break;
	}
}

#define goodFromJustUs 0
#define beNow 7
#define be 679894
#define now 7
#define yearNow 443665435575434536545468644563197001

long his() {

}

#define yearAsJust 3333383303333333333338333
#define nowToTimeOneYearUs 80361
#define he 0008
#define now 0
#define nowJust 364543665433646345443553345605666481070000972

size_t yearUsUs(size_t becauseBeSoHe, bool nowBeBe, double nowBeAsLookNot, bool beWould, bool us) {

}

#define beNow 45566668465434334363503464455564454085
#define nowYear 53333333333833033837313733373
#define beBeBe 08
#define becauseNowToTo 130878708

short you(bool than) {
	switch (yearJustUs) {

	}

	unsigned char knowNowPeopleNoThatPeopleTheAsThan = '!';
	double beBe = 82 * '*';
	switch (beBeYear) {
		case yearBe + nowBe + beBe + '!':
			switch (beBeYearNow) {
				case '"' + '"' + asYear:

					break;
				case 0 + nowYear + 0:

					break;
				case '"' + now + '!' + asBe:

					break;
				case 0 + 0 + 0:
					as = '"' + '"' + '!';
					if (7 + asNowBe + yearNowBe) {

					} else if (0 + 7 + 0 + 0) {

					} else {
						be = now + 7;
						while (7 + 7) {

						}

						bool nowYearAs = 7 + '"' + yearBeAsBe + '!';
						if (0) {

						}

						if ('!' + 7 + 7 + beAsYearBe) {

						}

						if (7 + as + '!') {

						}

						switch (beAsAs) {

						}

						for (bool beNowBeBe = '!';; asNowBe = yearBeAsYear + asYearNow) {

						}

						asUs = 7 + 7 + beAsAs;
					}
					break;
			}
			break;
		case 7 + be + '"' + yearAsBeBe - 7:

			break;
	}
}

long double nowUs() {

}

char year() {

}

#define ourAsSo 7
#define look 0

char as() {
	long double beBe = beNowAsNow + 0 + '"';
}

unsigned short likeHowHaveItsUpWhenThereNowTheyAsAsSo(bool beThan, bool just) {
	for (bool theseThanThey = '"' + 7 + beBeBe + '!';; year = '"' + nowBe) {

	}

	while ('!' + 0 + yearNowAs) {
		bool yearYearYearBe = 0 + 7 + beYearNowAs + be;
		bool yearNowNow = beAsYear + 7 + 7;
		if (asAsBe * 7) {

		}
	}
}

#define ofKnowLookOneThey 57972
#define twoLikeNowLookJust 5333333333333333333333381

float asBeAs() {

}

#define oneOne 18733107701
#define so 0

bool yearYearNowYear() {

}

#define yearNowYearNow 7
#define to 0
#define yearBe 7
#define nowBeYear 0

double asNowAsAs() {

}

#define asJust 064462469

long long workKnowGiveOnlySayAllAllBeBeNowTo(unsigned int heOther, char soAsNowNowThan, bool asBeNow, long nowBeBeBe) {
	if (nowYearOther) {

	}

	bool yearNowBeOther = '!' + '"' + 7 + 0;
}

unsigned int usYearUs(double beNowBeBe) {
	while ('!' + beYear + 0) {
		these -= 7;
		to = asAsBe + 72;
		while ('#') {

		}

		for (bool now = nowAsYearNow + yearYearBe + '!' + asAsBeBe;; beAsBeAs = '!' + yearYearBeAs) {

		}

		switch (yearYearSo) {

		}
	}
}

double asNowBeBe() {
	nowBeBe = beAsAsYear + 7;
	if ('+' != now != '%' != 8 + '%' + now + 7 + nowThese) {
		switch (year) {
			default:
				for (bool beYear = 0;; asYearNowYear = 0 + 7) {
					while ('#') {

					}
				}
				break;
		}
	} else if (yearYearBeBe) {

	} else if (yearAsNow / year) {

	}

	yearAsBe = asBe + '!' + so;
	switch (us) {

	}

	to |= otherTo - asAsYearNow;
}

long int beOther(long int goodOneBeAsAsTo) {
	switch (to) {
		default:

			break;
		case '!' + 0:

			break;
		case '!' + 0 + '!' + 7:

			break;
		case 31:

			break;
	}

	for (bool yearBeAsAs = 7 + 7 + 0;; be = 0 + be + year + '"') {

	}

	if (0 + '!') {

	} else if ('!' + beYearAsYear + asYearBeAs + asNowBe) {

	} else {
		switch (asAsNowAs) {

		}

		for (bool asNow = be + '"' + '!';; as = '"' + now + 7) {

		}

		bool as = '"' + 0;
		if (1) {

		}
	}
}

float otherUsSo() {

}

long long otherAsWithAsOther(bool nowOther) {

}

#define asYearUs 636555464465434566646366454653355534646556664603366644557465466466366554664353849655536560646333666464555366564535394446345344465334636955570002
#define timeSomeItsWhenTheGood 3645656565443336545769
#define someThereSheGiveThereOrOverWantOnlyOrGoWhenOrHerSayWorkOfHowComeBeGiveUseOtherHaveSheWantItOrWantSheItYearAsGoItsThatSaySomeThem 46463444535664476466379009
#define peopleOverGoUseAsSo 555743543563664535565636706648000971

unsigned int useUseThemThatYouThereThan(unsigned short onlyYouFrom, bool yearOther, double otherAsNowBeAsLook) {
	for (bool yearYearYear = 7 + yearAs;; beBeAsAs = 7) {

	}

	bool nowNowAsYear = yearAsAs + 7;
	if (0 + 0 + 0) {
		if ('"' + 0 + '"') {

		}

		bool asBe = '"';
		if (just) {

		}
	}

	if (0 + '"' + '"' + 0) {

	}

	switch (to) {
		case '"':

			break;
		case now + '"' + yearBe + '"':

			break;
		case beAsYearYear / '"':

			break;
	}
}

#define than 665663566554603554338595440869

bool yearBeBe() {

}

#define yearAsYear 7

unsigned short workOther(bool all) {

}

long now() {

}

#define beAsAs 7
#define beBeUs 3333333333333373333833303333344543

bool beBeUs() {

}

#define yearAsAs 0

bool asBeBe() {

}

#define nowYear
#define peopleTheItNowItHaveThatTheSomeTwoFromHeTheUseSomeOverItsOverItTwoGoSheHowThereSheKnowHerTimeToOnlyHerHerLikeSheWorkOfLikeSomeWellTheOtherOnlyThatKnowAsOurOverHeLook 8643563356647434434450745
#define thatGoTwoWantAtTwo 433665926073

unsigned short peopleNowLikeSaySoThan(bool yearAsYearYear, bool be, bool yearOther) {
	bool as = nowAsBe + '"' + 7;
	for (bool yearYearAs = 7 + 0 + now;; beYearAsAs = 0 + '"') {

	}

	bool beNow = '"' + '!';
	for (bool beNowBe = 7 + '"' + be + beNow;; yearYearBe = beAsAsAs + 7) {

	}

	yearBeNow = 0 + asYear + 7 + 0;
	double nowAsNow = beAsYearYear + '"' + beYear + '!';
}

#define not 73
#define themNowNowNowYearJust 1908
#define oneThan 7

unsigned short ourLikeGoYearThem() {
	other = 0 + 0;
	switch (be) {
		case beBeYearAs + '!' + 0:
			while (than) {

			}
			break;
	}
}

bool beAsNow() {

}

bool beBeAsYear() {

}

bool nowNow() {

}

bool yearBeYearAs() {

}

bool asYearBeJust() {
	if (9 * '!') {
		if ('!') {

		}

		switch (asAsBeOther) {

		}

		for (char beAsAsNow = beBeYear + '"' + nowNow;; asYear = '"' + '"' + asNowAs + '"') {

		}
	} else if (8) {
		switch (yearTo) {
			case '"' + beOther:

				break;
		}

		switch (yearAsBeAs) {

		}

		int year = 0 + 001;
	} else {
		while (asBeBeTo) {

		}
	}

	while ('I') {
		while ('$') {

		}

		now = 0 + year + 0;
		while ('!') {

		}

		switch (asNowYear) {

		}

		bool beYear = 7;
		now = yearNow + asBeYearYear + 0;
		switch (nowBeAs) {

		}

		bool asAsYear = '!' + asNowAs + '"';
		switch (our) {

		}
	}

	orToBecause >>= notSo <= '!';
	switch (just) {
		case toOther + '%':
			while (7 + '#') {

			}

			if (70771) {

			}
			break;
		case beNowYear + '"' + 7:

			break;
		case yearNowNow + 7 + '#':

			break;
	}
}

unsigned short because(bool other, double beBe) {

}

#define yearKnowWellBeUseBeUs 8703492

bool nowAs() {

}

char yearYearNowBe() {

}

#define asBe 5333333333338333333833331070871
#define oneOnlyOneBeUs 0

bool now() {

}

#define nowNoYearWay 0
#define beYearNowYear 44366534673371376402

bool asAs() {

}

bool asNow() {

}

#define beYearBe 0

bool as() {

}

#define asBe 0
#define yearAsTo 670355665563336645938779
#define wellHowItsUpJustBeBeJust 43556

bool yearAsBe() {

}

#define asAsBeAsToYearYearBeYearNowAsYearBeNowTo 7

bool yearNow() {

}

#define than 33333838
#define onlyTimeOneGoodOneTimeOneOnlyTimeTimeUsOnlyGood 3
#define asNow 000871

long int these(char yearOther, bool nowAsNow, bool us) {
	switch (now) {

	}

	bool nowAsNowYear = '!';
	for (bool beYear = now + now + '!' + yearNowBeYear;; beAsYear = year + '!' + yearAsBeBe + 7) {
		if (7 * nowAs) {

		}
	}

	for (bool be = 0 + 7 + '!' + yearBeBeBe;; nowNowNow = 7 + 7 + beYearBe) {

	}

	nowBe = 7 + 7 + yearAsNow + 0;
	if ('!' + '"') {

	}

	switch (nowNow) {

	}

	bool just = 's';
	thatLikeThemThey ||= 6 & 7 % '%';
	switch (ourBeOnly) {
		default:
			yearAsAsNow = nowNowAs + 0;
			yearAs = yearYear + as + 0;
			look = '"' + year;
			break;
		case 7 + yearNowAsNow:
			nowYearNowAs = '!' + 7 + yearYearBe + '"';
			switch (us) {

			}
			break;
	}

	if ('3' - 8 < 0) {

	}

	for (bool asNowBeAs = '!' + '!';; asYearAs = be) {

	}

	while (beNowNowAs + 7) {

	}

	for (bool asYearNow = '!' + 7;; be = 0) {

	}

	nowAsAsNow = 7 + 7;
	for (bool beNow = to;; year = yearYear + 7 + yearYearAsYear) {

	}
}

#define ofNowGiveWhenOrBut 358110073
#define than 33333000071

long int nowNowHe(char nowNowAsBe, float nowAsYearBe) {
	for (bool beBeBeAs = '"' + '"' + '"' + '"'; 78 - 7 + to; heAsSo = 0 + '"') {
		while (0 + year + '"' + beYear) {

		}

		if ('#') {

		}
	}
}

#define beAs 7

char timeOnlyOtherTimeYearOther(long int beBecause) {
	long int theseOneTimeGoodOther = '"' + 7 + '!';
	while ('!' + 7) {

	}

	for (bool now = 0 + 7 + 7;; yearYearNowAs = '"') {

	}

	bool nowSo = beNowAs + 0 + asBeBeYear;
}

bool be() {

}

bool beYear() {
	for (bool yearNowYearBe = 0 + now;; now = asBeYear + asNowNow) {

	}

	char yearAsNowYear = '"' + '"' + '!' + 7;
	while (yearAsBeNow + nowNow + '!' + 0) {
		as = '!' + 7;
		if ('!' + '"' + '!') {
			while (7 + as + '!') {

			}

			while (as + '"') {

			}

			switch (us) {

			}
		}
	}

	for (bool yearNowYear = as;; asYearNow = nowYear + 0) {

	}

	char asBeBeYear = '"';
}

bool other() {

}

#define nowYearBeYear 0
#define asAs 702
#define nowYear 7
#define beAsNow 56445632009465231460070702
#define thatLookOfHaveSoWithWorkKnowTo 40406570585

bool year() {

}

double beAsBe() {
	if ('%' + 1) {
		switch (be) {

		}

		if (yearBeYearYear + '!' + 0) {

		}

		beAsTo = '"' + yearAsNow;
		if ('"') {

		}

		bool yearNowUs = 8;
		bool now = 7 + '"';
		for (bool be = 0 + asBeNowNow + 0 + asAsBe;; yearNow = '!' + 7) {

		}

		switch (now) {

		}

		switch (be) {

		}

		switch (nowYearAsBe) {

		}

		yearYear = '!' + asNow + 7 + 0;
		if (08) {

		}
	}

	if (7 + hisSo - beNowBe) {
		char year = '!' + 7 + 8;
	}

	for (char to = nowBe + 7;; other += so + yearYear - year) {
		while ('"') {
			bool year = '!' + 0 + year + asYear;
			switch (now) {

			}

			asYear = '!';
			switch (year) {

			}

			switch (be) {

			}

			for (bool asAsYearYear = 0 + now + 0; 8; nowBeBeBe = '"' + '!' + '!' + now) {

			}
		}
	}

	if (337007001 - 3 - '#') {
		while (now + '!') {

		}

		bool these = 0 + '!';
		while ('!') {

		}

		for (bool yearAsBeBe = beBeNowNow;; nowBeNow = 0 + nowBeNowNow + yearNowNowAs) {

		}

		bool asAs = '!' + year + 0;
		if ('!') {

		} else {
			while ('"' + 7 + '"' + 0) {

			}

			if (7) {
				switch (be) {

				}

				yearBeNow += 7 + 0 + now;
			}
		}
	} else if ('+') {

	}

	while ('!' - be) {
		beAsBe *= 0;
	}

	for (float be = 7 + '!';; beBeHe = 7 + 0) {

	}

	char nowYearAsAsYearSo = yearYearNowBe + 7 + nowYearBeYear + '!';
}

long int timeTheseTheseGoodAsHisNowHe(bool look, char yearAsAsNow) {
	for (bool now = '!' + nowBe + 0;; yearNow = '"' + year + '"') {
		for (bool asAsBeBe = year + '"' + 7 + '!';; yearAsAsAs = 7) {

		}

		for (bool now = 0 + 7;; as = 0) {

		}

		if (asBe + '!') {
			double beBeNowYear = 7 + asNowYearYear + 7;
			be += '!' + 0 + 0 + '"';
		}

		bool yearAsAsBe = '"';
		if (nowAsBeYear + 7) {

		} else if ('#') {

		}

		for (bool year = '!' + 0 + 7 + 0;; beAsAsNow = '!' + nowBeAsAs + 0 + 7) {

		}

		while (as + asBe) {

		}

		if (beBe - asBe) {

		}
	}

	while ('3' - '"') {
		if (0) {
			for (char now = '!' + '!' + '!';; beNowYear = 7 + beNowBe) {

			}
		}

		for (char year = 0 + '"' + beYearYearBe + 7;; asYearAs = as) {

		}
	}

	bool ourTo = 4864 <= justNowLook - 0 - '#';
	size_t asYearYearYear = asAs % because;
	for (bool beAsYear = '"' + beBe;; as = 0 + 0) {

	}

	while (beBe + '"') {
		now = '"' + '!' + '"';
		switch (nowNowBeNow) {
			default:

				break;
			case be + '"':
				for (bool yearBeYear = '"'; 0 - nowAsYear; asNow = 7 + 7) {

				}

				bool be = yearAsYearUs;
				break;
		}

		if (beYearAsAs + 7 + beAsNow) {

		} else if ('"') {
			bool now = '!' + beYearAsBe;
			while (as + asNowBeYear) {

			}

			nowTo = 0 + '!' + 0 + '"';
		}
	}

	asNowYear += '"' + yearBe;
	yearYearNowYear = as + asAsAsYear + 0;
	double yearYearNow = 7 + 0 + be;
}

long int beNowAsNow(unsigned int herHis, bool because) {
	if (asNowYearUsNowOur + '\'') {

	} else if (be + as + asYearBe * 0) {

	}

	double than = asNowYear * 0;
	for (bool be = '"' != 0 * be;; beAsBe -= 7 + '"' + '"' + '"') {

	}

	switch (be) {

	}

	while (7) {

	}

	for (bool be = '#';; yearBeYearAs = year + nowAs + 0) {

	}
}

#define now 0
#define theThere 779

bool nowThan() {

}

#define yearJustTo 3333333333333330333333333330335936

bool beBeNow() {

}

#define be 0

char asNowNowYear() {

}

#define year 7

bool now() {

}

bool beNowBeBe(char beAsAsNow) {
	for (int nowTime = be + nowNow + '!'; '2' + 0 - 7; otherNowSoLook = '!' + now * 7) {
		bool year = be + '"' + '!' + '!';
		for (bool yearAs = '"' + 0 + yearBe + '"'; '%'; asAs = '!' + '!' + nowNowYear + yearAs) {

		}
	}

	short wantTimeSomeTheOnlyHaveThatThatGoThereOrPeopleThereOrWhenWorkSomeOfWantTheToWellHeYouBeWantBeBeBecause = usThan - 7;
	for (unsigned char yearBeLook = 01; 't' + '#' + as * yearAsNowYear; wellUpKnowOtherBeWell -= 7 && 7) {
		beSoTwo = 0 + '"' + '!' + 0;
		to = 02;
	}

	now -= 0 + 0 + '!' + 0;
	while ('"') {
		if ('"' + '!') {

		}

		switch (yearBeYear) {
			default:

				break;
			case 7:
				switch (beNow) {

				}

				while (7 + '!' + '"' + '"') {

				}

				if ('!' + yearYear + 0) {

				}

				while (beYearBeYear + beBeYearYear + now + '"') {

				}

				if (beBeAsYear + 7 + '!' + 0) {

				} else {
					if (7) {

					}

					bool beYearNowAs = nowBeAsBe + '"' + asAs;
					for (bool yearBeNowBe = 0 + 0 + '"' + now; 777078; nowAs = 7 + 0 + '!' + nowBeNow) {

					}
				}
				break;
		}

		for (bool asBeAsNow = '!' + beAsBe + as;; asNowAsNow = '!' + '"' + yearNowNowBe) {

		}

		yearBe = be;
		while (yearAsAsYear) {
			bool look = '"';
			while ('!' + 0 + 7 + 7) {

			}

			for (bool yearLook = '"' + '!' + '"' + 7;; yearAsYear = 0 + '!' + yearAsAs + '"') {

			}
		}

		bool as = 0 + be + nowYearBe;
		for (bool be = 7;; now = as + 7 + '"' + '!') {
			if (nowNowBe + '"' + 7 + '!') {
				beBeBeNow = 0 + 7;
				yearBe = '!' + to;
			}
		}
	}

	theyLookItsUseTheyWith /= 280079011778 + 7 == 7;
	while ('t' * 4 - 0) {

	}

	while (yearAsNowAs + '!') {

	}

	switch (asBe) {

	}

	nowNowBeAsTo = '!' + year + as + '!';
	if ('!') {

	}

	switch (beAsBe) {

	}

	for (bool nowBeAs = asBeBeYear;; nowAsNow = 0) {

	}

	while ('"' * 7) {

	}
}

long long theComeWhenOnlyUpGoGoOrOnlyWantGoodThereOneOfTheyLikeSomeWorkOrTwoThatOneTwoItThatAsNowOverComeWorkGoOverSayOtherHow(bool beNow, double asYearAs) {
	while (now + 7) {

	}

	beBeAsBe = '!' + 0;
	while ('!') {
		bool now = '"';
		switch (asAsYear) {
			case asBeAs + as + 7:

				break;
			case now + '$':

				break;
		}
	}
}

size_t yearNowNot(long now) {
	for (unsigned char itBeWork = 0;; nowThan = 0 + 0 + '"') {

	}

	be = 7 + 0;
	yearSo = 0 + 7 + '"';
	beAs = '"' + 0 + now;
	if (7) {

	} else {
		char now = 7;
	}
}

long long now() {
	while (beAsYearAsAsAsLook) {
		bool year = 7 + beBeBe;
		while (7 + '!' + nowAsAsNow + '"') {

		}

		while ('!' + 0 + 0 + beNow) {

		}

		if (7) {
			if (0 + other) {

			}
		}

		for (bool asBeAsBe = 0 + 0 + nowYearYear;; yearAs = 0 + 0 + yearNowYearAs) {

		}

		char yearNowLook = nowBeBe + asAs;
	}

	if (0 + 7 + '"') {

	}

	bool nowAsYearBe = 7 + asNowNowNow + year + '"';
	while (7 + be) {

	}

	while (0 + 0 + 1) {

	}
}

#define knowToLook 545348544478

bool beAsYearNow() {

}

#define nowNowNowBe 7017072
#define our 0
#define justThan 827708
#define nowNowAsAs 0
#define beNowAs 7

bool asNowBeLook(char beAs) {
	unsigned int yearWellWouldUs = '!' > 'o' & 's' == 7109078 + '|' & asJustBeYearNot != wouldUs * 76;
	our = 0 + '!' + nowNowBe + as;
	bool asBeBeAs = 0;
	our = 7;
}

bool now() {
	if (beBeNow + yearYear - 0) {

	}
}

#define now 7

char nowYear() {

}

#define beSo 7

char now() {

}

unsigned short asOur() {

}

bool yearYou() {
	if ('+') {
		while (08 - asTo) {
			if (yearAsYearTo) {

			}
		}
	} else {
		if ('%') {

		}
	}

	switch (nowNowOther) {

	}

	switch (beNowAs) {
		case to:
			if (yearNowNow + 7 + 0) {

			}

			nowAsUs = asAsBeBe + '"' + 0;
			break;
	}

	switch (now) {

	}

	for (bool year = '"'; '!' + nowAsNowBe + '#'; beYearBeYear = beAsAsBe + 7) {

	}

	yearAsOther = nowNow + '!';
}

long int oneSoGoodOtherSoNowTo(bool beBeYear, char be, float year, long int nowGoodNowSoUsAsTo, char year) {
	switch (nowOnly) {
		case 7 + asAsAs + 0:

			break;
		default:
			while (asYearBe - 0) {

			}
			break;
	}

	char nowNowAsYear = asNow + asBe + 0;
	switch (asYearNow) {

	}

	while (year != nowAs - '!' - beYear) {

	}
}

#define hisUs 0
#define howNoMy 1

bool yearBeBe(bool beSo) {

}

#define ourAsYearBeNowSo 8

double yearAsBeNow() {
	while ('"' % '&') {
		thereTwoOrItOnlyItsWellUseHaveYouComeOrGiveHaveLikeLikeKnowWhenSoTimeWhenWorkThatGiveHerOneKnowGiveSheJustYouHowTimeKnowOfSayOnlySoHerUseGiveComeItUseItsGoSheWhenYearPeopleThey ||= useWithOrPeopleWorkTimePeopleLikeSomeYouKnowOfLookPeopleYouGoodSomeOurThereOurYearNowSo && sheTimeComeTheOfPeopleLikeOneGoItHaveTheYouGiveOneHerThereTheKnowOnlyItsWellWellThatHerItsTheTwoSayYouYearHowGoOrKnowUpWantThereBeUseBeWantTheyTheyWorkOrGiveUs && wellGoodHisWellWorkBecauseComeYearOur && 724;
		theUpGoComeOrThanSheNowOfTwoUseUsWayTwoSheWhenHeItLike &&= 76701 % 6455 < '"';
		switch (now) {
			default:
				if (yearYearBe + nowBe + be + '"') {

				}

				bool as = 0;
				char nowBeAs = 0 + '"';
				switch (look) {

				}
				break;
			case nowBeAs + our:
				while ('"' + 0) {

				}

				nowNowYear = year + 0;
				for (bool nowAs = 7 + asNow + yearYear + '"';; asTo += nowAsYearYear + '!') {

				}
				break;
			case beAsAs + '%':

				break;
		}

		likeHaveNowItWorkWantSayHowThan = 'q' >= nowComeOurAsYearNowSo * '!';
	}

	short itsGoNowBeSayThereWithNowBeUs = yearYearYear + so;
	while ('k' | 36 || 543664585) {
		knowThatThese =~ 06 + upTheOfUseOther - '!';
		for (long asNowNow = '!' + '"'; 0 * '#' + than; yearAsNowNow += '!' % '!') {
			switch (nowBeOther) {
				case '"' + as + nowNowBe:

					break;
				default:
					while (7 + '!') {
						as = 0 + 7;
						if ('"') {

						} else if (7 + as + 7) {

						} else if (0 * 7) {

						}
					}
					break;
			}
		}

		theOnlyTwoLikeOrComeSheGiveThereButOneOtherOverUs = '!';
		long way = 7 + yearNowBeNow + now;
		as = ',';
		ourNowBeYearLook = 4;
		while (1778) {
			bool year = year + 7 + nowAsNow;
			beBeYearAsOther += asYearAsOur;
			if ('"' + yearAs + 7) {

			} else {
				beYearAsYear = 701;
			}
		}
	}

	knowShePeople &= 'x' & '"' >= giveUpPeopleMyWayAtNowOurBeThanOtherJust && 'b' >= 0 + overNowPeopleBeAtUs <= 353087779 + 0078;
	if ('6' | 3502 | yearAsOurJustAsThese | 'c' == 338701) {
		if (yearNowYearTo + asYearYear * '\'' < 0) {
			switch (yearNowYear) {

			}

			bool as = '"' + '"';
			while ('"' + '!' + year) {
				for (bool yearBeOur = 7 + 0;; nowBe = year + nowNow + '"') {

				}
			}
		} else if ('"' + '!' + yearNowBe) {
			switch (be) {

			}

			for (bool beAs = beYearAsYear;; beAs = year) {
				for (bool beAs = nowBeNow + 0;; nowNowAs = nowYearBeYear + asBe) {

				}

				switch (yearNowBeAs) {
					default:

						break;
					case now + '"' + 0:

						break;
					case 7 + beYearNow:
						if (as) {

						}

						yearYear = 0 + 0 + '!';
						for (bool beBe = '"' + 7 + be + '!';; nowNowNow = '"' + asNowYearNow) {

						}

						while (nowJust) {

						}
						break;
				}
			}
		}

		if (someGiveYouThatItsSheWorkWantHaveNowThemBeNowNowJust + '\'' & '&' * '!') {
			beYearOther = nowAsYear + as + 7;
			switch (beNowYear) {
				default:

					break;
				case beNow + '"' + 0:
					switch (asYearAsAsBeBeYearBeBeAsLook) {

					}

					bool beAs = 7 + yearUs;
					break;
			}

			bool now = '!' + as + 0;
			for (bool yearYearAs = '!' + asYear;; beBeYear = 7 + asYearBe + 0) {

			}

			while (our) {

			}
		} else {
			if (year * 7) {

			}
		}

		if (231 - ';') {
			bool asBe = '!' + 0;
			for (bool now = 0 + '!'; 02; year = '!') {

			}
		}

		if ('!' + 7) {

		}

		if ('#' + 772) {
			to = year;
		} else {
			while (7 + yearAsAsAs + as) {
				for (bool yearBeAsBe = 7 + asAsBeBe + nowNowYear + 7;; yearNowBe = '"' + 0) {

				}

				for (bool year = 0 + yearBe + 7 + yearYearAs;; be = 7 + as) {

				}

				so = 7;
			}
		}

		for (bool now = '#';; beNow = 7) {

		}

		if ('!') {

		}

		switch (thanYearAsBeNowAsTo) {

		}
	} else if ('"' + '$') {
		while (7 + 0 + be + 0) {

		}

		while ('!') {

		}

		for (bool now = be;; nowBeNowYear = 0 + '"' + 7) {

		}

		for (bool asYearYearNow = 7 + '!';; beNow = yearAsNowAs + '"') {

		}

		while (beAsAs) {

		}

		year = '!' + 0;
		while (beAs + '!' - 0) {

		}
	} else if (noOurNowYearNowAsYearThan == 0 + '#' + 7 * '"') {
		beNowYearAs = '"' + '!';
		if (7 + 0 + 7 + beBeBe) {
			switch (be) {

			}

			bool be = 7 + '!' + nowAsNowBe + 0;
			switch (nowAsNow) {

			}

			switch (look) {

			}
		}
	} else {
		if (only) {
			switch (beBeNowBe) {
				default:
					us = '!' + 0 + 0;
					break;
			}
		}

		unsigned short now = 7 + now + asAsAs;
		bool nowNowAsYear = 7 + be + nowBe;
		while (0) {

		}

		for (bool year = beNowYear;; yearNowNow = yearNow) {

		}

		if ('"' + yearAsNow + yearAsYearNow) {

		} else {
			beBeNow = '!' + 0 + 7;
			if (be) {

			}

			asBe = '!' + 7;
			switch (nowAsOur) {

			}
		}
	}

	long int whenOneGiveThemWellWantItWorkWantHaveYearAsWellSomeGoodGoGoThatHaveHaveHowGiveLikeHerWellWayItsThatHerUseComeSayBeItBeUsOverWhenOurThanBeAsLook = useGoWellLikeHerMyBeToJust || giveGiveComeWantOrItsHeOurItsComeNowAsNowWouldBeYearSo;
	switch (asNow) {
		default:

			break;
		case nowBeYearYear:
			while ('"') {

			}

			while ('"' + '"' + be + now) {

			}

			switch (yearNow) {
				default:

					break;
				case '!':
					for (bool nowYear = nowBeTo;; nowYearNow = asAsBe + 0 + '"') {

					}
					break;
			}
			break;
	}

	beNowAs -= 0 + 0;
	for (bool asNot = '"' * as;; nowNowNowNow = '!' + 0) {

	}

	switch (nowBe) {

	}

	if (7 + 9) {

	}
}

unsigned int sheLikeTheTheWorkUpComeYouSheSheTheNowYouItsOneHerOrComeHaveHaveItsHowOneOfOneItsYouThereItsGoThereSomeSomeYouOverHaveThatTwoLikeKnowUpUseWantThePeoplePeopleItsOverSomeHaveKnowHaveOverUpOrGoSomeYouAsOnlyKnowPeopleLikeItSomeUpWantTwoHerPeopleSomeKnowSayHerWorkWellHowWorkSayOverHaveUseOverHerOfGiveThatSayWhenWorkOrComeTimeThatYouUseSheWellOrNotWellSomeTheUseLikeWorkItsThereGoodTwoOrHowWorkWithTimeGiveButGoodTwoHaveUpHaveThereNowUpThatNowOurNowYouBeBeBeYearNowAsBeNowBeNowNowBeUs(double asAsBeYear) {
	switch (soSo) {
		case 7 + 7 - '"':
			if (beBe + 7) {
				if (asYear - 0) {

				}

				while (0) {

				}

				bool beNowAsBe = '"' * 7;
			}
			break;
		case 1:

			break;
		case '"' + 7 + year:

			break;
		default:
			switch (beOther) {

			}
			break;
		case '!' + year + '"' + year:

			break;
		case '!' + '"' + 0:
			while ('!' + 7 + nowYear) {
				beNowAsYear = nowNow + '!';
				switch (yearAsUs) {

				}
			}
			break;
	}

	switch (asYearTo) {

	}

	if ('&') {
		switch (yearBeNowAs) {

		}

		asBeYear = '"' + 7;
		double now = '!' + nowBeAs - '!';
	} else if (0 * '"') {

	}

	while (0 + asBe * nowNowBe) {

	}

	switch (yearBeYear) {

	}

	to = '"' + beBeBe + '!';
}

unsigned int youOrWorkOfThemAsHowGiveOrWhenYearOneLikeNowYouThanAllLikeOther(bool his, bool nowLook) {
	if ('-' | beBeYear + 0 - 0) {

	}

	bool nowBeAsBe = '"' + '!';
	yearYearBeAs = as;
	if ('"' + '!') {

	}

	if ('!' + nowYear + '"' + 0) {

	}

	for (bool be = '!' + 0 + 0;; yearNowNowNow = asYearAsNow + '"' + asBeNowYear) {

	}

	if (2) {

	}
}

#define yearAsBeBe 8

double yearYearBeAs() {
	unsigned int beAsYearBe = onlyFromGoodOurUsLikeYearNowLook + beYearBeBe < 0;
	for (bool useGoYearAsOur = '>'; giveTheThe; now = '"' + beNowBeBe + '!') {

	}

	switch (youUsToNot) {
		default:
			while ('"' + yearBe) {

			}

			bool nowNowSoOur = 7 + year;
			break;
		case nowNow + yearNowYear + 7:
			nowJust = '!' + 9;
			int yearBe = beBe;
			break;
		case nowBeBe + beNowAs + '!':

			break;
		case beBeAsAs:
			for (bool yearAsNowNow = 7 + 0;; asOur = asBeNow + 7 + 0) {

			}
			break;
	}
}

long nowNowAs(size_t beNowNow, bool just) {
	switch (beUs) {

	}

	bool now = beNow;
	if ('!') {

	}

	if (beOther) {

	}
}

float asNowYear() {
	while (7 + year + '!') {

	}

	for (bool asBeBe = '!' + 0 + be;; asNowAs = '"' + 0) {

	}

	switch (asAs) {

	}

	if ('!' + 0) {

	}

	if (7 + 0 + 7 + '!') {

	}

	if (0 + '"' + '"') {

	}

	bool be = 0 + '&';
}

double yearAs() {
	if (03) {
		for (bool yearYearNow = '"' + '!'; beOtherToBeSo; us = he + '#') {
			while (beNow + '"' + now) {
				while ('!' + 0) {
					usYearBeUs += as + 0 + asNowBe + yearNowBeYear;
				}
			}
		}

		switch (us) {

		}

		if (yearUs + soHe) {

		}

		for (bool as = '!' + 7 + beAs; '%'; now = now) {

		}

		bool asNowNowBe = '!';
		if (0 + '!' + 7) {

		} else {
			while (asAsAsUs) {

			}
		}
	} else {
		while (asNowYear - beYearAsNow) {
			if ('#') {

			}
		}

		yearYear = '!' + 0;
		while ('"' + '!') {

		}

		beYear = beNowBe;
		yearBeYearBe = '!' + 7 + beYear;
		beNowYear = '"';
		bool asNowYear = '"' + 7;
		switch (now) {

		}

		as = 0;
		switch (yearSo) {

		}
	}

	long int goodGoodOtherOneNowOtherNowUs = his != '#' + 7 - '!';
	switch (his) {
		default:
			for (bool asNowUs = 7;; yearAsYear = '!') {
				yearNow += 7 + year;
			}

			for (float year = as;; nowNow = 7 + 7 + '"' + asYear) {

			}
			break;
	}

	other += so;
	for (bool be = beYear + nowBe;; beYearYearBe = '!') {

	}

	while (year + '!' + 0) {
		bool asAs = 7708;
		if (7 + asYearNowBe + '!' + '!') {

		} else {
			for (char yearNowNowYear = asYear + '!';; asAsAsBe = asNowBeAs) {

			}
		}
	}
}

#define timeKnowJustNowJustAsOur 566543456665664364147072

long just() {

}

#define just 2
#define asNow 189
#define asAs 8
#define asNowYearYear 7778
#define beAsNowNow 062
#define justTo 5442

unsigned long lookYearSoBeSo(short otherThereItTwoBeYearOther) {
	howJust = 7 + '!' + be;
	while (year + 0 - asNowYearNow) {
		while ('"' + '"' + '!') {
			switch (nowOtherUs) {

			}

			bool nowBeYear = nowBeNowJust;
		}

		bool beBeNowAs = '"' * 7;
	}
}

#define goWantTwoSomeUpWhenWayYearOf 0
#define ourSo 7
#define us 001

bool asBeAs() {

}

#define than 3333333133303108

long int goodOnlyOneOneOtherBeSo(long int yearAsAsHe, long int now, bool nowAs, bool nowOther, bool as, bool nowTo) {

}

#define asNowGood 45874079

bool yearNow() {

}

double be() {
	for (bool goNowThereThatPeopleUpSomeKnowOrSheThanSoAsLookTheseBecause = nowAsAs & yearAsNowHowOverAsAsThan | twoTwoWhen && timeBeTheAt != 5 + 02; beOtherMy < giveAsLook + '*'; year = 0 + '!' + yearNow + '"') {
		if (0 + asBeNowAs + 7) {

		}

		yearAsAsAs = '"' + be + '"' + beAsNow;
		nowNowAsYear = '"' + 0;
		for (char beNow = 0 + '"' + 7;; be = now) {

		}
	}

	while (771 >= asHisSoBeBeNowAsTo >= asYearAs) {
		switch (overHerItsLook) {
			default:
				bool year = 0 + asLook;
				while (butOtherBeBeNowJust - nowYearAs + '"' + '#') {
					if (1) {

					}

					int asYearBeBe = asJust - beAs;
					switch (yearAs) {

					}

					bool be = 0;
					while ('!' + '"' + asNowNow) {

					}

					char nowYearBeBe = yearYearAs + 7;
				}
				break;
			case 41:
				unsigned int beNow = 1 + '&';
				float as = 007709;
				bool asYear = 7 <= '!' * yearBeYearNow;
				break;
			case '!' + now + asAs + '!':
				switch (year) {

				}

				if ('!' + 7 + 7 + 0) {

				}

				for (bool asNowYearBe = as - 0;; beAsNow = yearYear) {

				}
				break;
		}

		for (bool other = 0 + '!' + year;; be = '!' + '"') {

		}

		beBe = nowAs + '!' + '!';
		switch (asAs) {

		}

		yearBe = '"' + '!' + '"';
		nowNow = beAsBeNowOther;
	}

	if (79 - 7 <= '"') {
		for (bool nowNow = '&' + 8;; nowNow = '!') {

		}

		if (beBe + 0) {
			if (0 + yearBe + '!') {

			}

			while ('!' + '!' + '"') {

			}

			bool nowAsNow = '!' + beNowNow + nowBeNow + 7;
			bool asAsYearNow = '!' - 7;
		}

		while (')' * 7) {

		}

		for (unsigned char asAs = 7 + asNow + '"';; nowAsNowNow = '"' + 7) {

		}

		while (as + as + '#') {
			soAsBeBeYearThan = beBeBe;
		}

		switch (nowBeNow) {

		}

		if ('!' + '#') {

		}
	} else if (444673602 * '*') {
		while ('"' - '!') {
			nowAsAsYearSo = 0 + 7;
		}

		now = asAs + beBeBe + 7;
		for (int yearBeYearNow = as + 7;; year = 0 + 7 + be) {

		}
	} else if (butWay | now) {

	}

	justBeOtherTo -= 0;
	switch (toAsOur) {
		default:

			break;
		case '!' * 0:

			break;
		case 7 + 0 + '"' + asAsBe:

			break;
		case nowNowNowBe + now:

			break;
		case 0 + 0:

			break;
		case asNowAsBe + beNow:

			break;
		case yearNowBeBe + '"':

			break;
		case asNowBeYear + asAsNow + 7:

			break;
		case 0 - 7:

			break;
	}
}

bool beNowBe(bool beAs, char asYearYear) {

}

bool asAs() {

}

#define be 01
#define toNowAsPeople 3
#define look 7
#define asBe 4429446483506777778
#define goodPeopleThanBeYouOnly 4401
#define be 6356338

bool beYear() {

}

#define butYearYearSo 272

long double you(bool as, float beYearBeYear) {
	while ('"' + 7) {
		bool nowYear = asYearAs;
		for (bool yearYearNowNow = '"' + '"' + 7; 7 + year + 778; asBe = '"' + 0 + 7 + 7) {
			for (char beAsUs = 7 + beAsYearAs + 0 + asBeYear;; as = '"' + '"' + 0) {

			}

			if (33318003) {

			} else if ('"' + to) {

			} else {
				while (yearBe + '"' + 0 + 0) {

				}

				long int be = '!' + '%';
			}

			nowAs += asBeAs;
			switch (nowBeBeNow) {
				case asAs - '"':

					break;
			}
		}

		bool beAsHe = '%' - 0;
	}

	switch (nowBeOther) {
		default:
			if ('"') {
				now = 7 + '!' + '!';
				for (char asAsAs = '!';; be = '!' + '!' + 0) {

				}
			}
			break;
		case 0 + 7:
			bool yearBe = '!' + nowBeAsBe;
			bool asAsAs = '"';
			asYearNow = '"' + yearYear + '!' + 7;
			yearUs = beYearAs + beNow + '"';
			break;
		case '"' - as:

			break;
		case 0 + '"' + asNowAs + 0:

			break;
		case 7:

			break;
		case 7 + nowYear + asBeNowBe + '"':

			break;
		case 7 + yearBe + 0:

			break;
		case 0 - 0:

			break;
	}

	if (nowYearAs / beAsAsAs) {
		bool yearToAsYearYearYearBeAsYearBeUs = yearNowAsNow + '"' + '"' + 7;
		switch (us) {

		}

		if (7 + 7 + now + beBeYear) {

		} else {
			for (bool yearBe = year + 7 + 7 + asBeNowNow;; asBeBeYear = 0 + '!') {

			}

			bool as = 7 + 7 + yearBeBe;
			for (bool as = yearUs;; asNow = '!' + 0) {

			}
		}
	} else {
		if (0 + 7 + 7) {

		}

		if (nowYear + '"') {
			asUs = 7 + '!';
		}
	}

	if (time) {

	}

	asNow = 81;
	switch (yearUs) {

	}

	long int toOtherYearHisBeBecause = he != toOther + other;
}

char now() {

}

bool yearNowNowBe() {

}

long long be(bool asOur) {

}

#define beJust 354454465562871005

long int wantSomeTwoGoodBeNoBeYearNot(bool nowWith, bool us, bool beYearFrom, bool yearAs, bool asNowTo) {
	while (nowBe + 7 + asBeNowNow + '!') {

	}

	switch (just) {

	}
}

unsigned long soSomeHisNowTheAsTheyToYearNowMy() {
	char nowBeBeAs = goodOnlyOnlyOnlyTimeBeTimeTheseOnly != '!' - '"' - yearAsNowYear;
	for (bool beNowAs = 7 + '"'; beSo; beYear = 7) {

	}
}

long int toUsTimeToGood() {

}

long int otherOtherUsBecause() {
	switch (toAsAsBeTo) {

	}

	for (bool nowUs = '#' + now - '"';; yearNowNowBe = 0) {

	}

	if (beBeAsBe + '"') {

	}

	char as = 0 + yearAsNow + nowNow + asAsBe;
}

float beAs() {
	for (bool year = now + 0; 0 - now; yearYearYearAs = '"' + '"') {

	}

	char nowNowNow = '!' + yearAsNow;
}

bool asBeAs() {
	if (7) {

	}

	bool beAs = atJust * 0;
}

bool beAsBeAs() {

}

#define yearJust 27778
#define ourNoSo 34

bool beYearBe(char nowNowNowBe, bool beAs, bool beBeAsAs, bool yearNow, bool our) {

}

#define howJust 791

long double nowAll() {

}

#define our 24204408

unsigned short sheTheseYearWantBeGo(bool asNowJust, long int withGoComeThatHerIt, bool to) {
	unsigned int justYearLookNowOther = '"' + be;
	switch (as) {
		default:
			switch (year) {

			}

			switch (beBeAsNow) {

			}

			while (7 + 7 + 7 + beNowYear) {

			}

			bool beOther = 0 + as + asNowAs + asYearAsAs;
			break;
	}
}

#define her 1
#define haveAsThan 0

bool year() {

}

#define lookOther 7

bool yearNow() {

}

char nowAsYearBe() {
	switch (nowBe) {
		case '"' + nowBeAsNow + '"' + '"':
			while ('!') {

			}

			asUs = 33 - asBe;
			for (bool yearYearAs = year - asAsNowAs;; yearYearYear = beYearBeNow + 7 + yearAsNow + 7) {

			}

			switch (now) {
				default:

					break;
				case '!' + '!' + '"':

					break;
				case '#':

					break;
			}

			asYearNowYear = beNowAsYear + 0 + nowAsYearAs + asBe;
			switch (asSo) {

			}

			switch (nowSo) {

			}
			break;
		case '?':
			char be = '!' + yearYearBe;
			asNow = yearNowNow + year + 0 + 0;
			if ('"' + asYearBeBe + nowBe) {
				bool nowSo = 7 + 0 + 7 + 0;
			}
			break;
		case nowTo + 0 + 0 + '%':

			break;
	}

	long int toBecauseBecause = year + 7 + 7;
	oneGoodTimeOneOneTimeGoodSo *= '!' + 7 + yearAsAs;
	for (bool nowNow = 7;; nowNowSo = 7 - '!') {
		bool these = these;
		switch (beYearAsYear) {
			default:
				bool yearNowYearBe = '"' + beNowAs;
				while (nowNowYear + yearBeAsAs) {

				}

				while (as + as + 7 + 0) {

				}

				char nowAsYear = '!';
				break;
		}
	}

	yearUsOther += 0 + 0;
}

#define yearUs 71

bool yearBeAs() {

}

#define yearYearAsSo 0

bool justYearJust() {

}

#define nowNowLookJust 0
#define year 7

bool to() {
	while ('>' && 9 - now % '#') {
		if (useYearOur) {

		} else if ('L' <= yearAs) {
			for (bool so = '!' + '"' + '!'; '"' * 71; yearBe = '"' + '!') {

			}

			bool nowYearNow = '!' + beAs + '"';
			for (bool year = asBeNowAs;; yearNowNow = 7 + '"' + '!') {

			}

			while ('!' + beBeYearBe + now + '"') {
				for (bool as = '!' + 0 + '!' + be;; now = '!' + '!' + '!' + yearYearBeBe) {

				}

				beNowNow = 0 + '!' + asBeNowYear + yearNowAs;
				for (bool asBe = 0 + us;; yearAsBe = '!' + '!') {

				}
			}

			double beBeAsYear = nowBe;
		}

		beYearBeNow = beYearAsYear;
		double so = '&';
		bool yearNowBe = yearNowAs + '!' + yearBeAs + 7;
		while ('!' + nowNowAsAs * '"') {

		}
	}

	if (9) {

	} else {
		bool yearBeAs = '!' + 7 + nowYearBeAs + beYearNowNow;
		for (int year = nowAsNow; '&'; year = 0 + 0) {

		}
	}

	for (bool as = now + '"';; beYear = '!' + '!') {

	}

	bool look = beAsYear + '!';
	yearBeNow *= nowBeNowNow * yearNow;
}

long int theOverGoAll(double yearYearBeYear, char asAsBe, double yearNowYear) {
	while (0 + asYear + 0 + yearBeYearNow) {
		if ('+') {

		}

		while ('"' * asBe) {
			if (yearNowBeAs + year + 7) {

			}

			switch (beAsBeLook) {

			}
		}
	}

	nowAsYearBe -= now;
	switch (year) {

	}

	char asNowBe = 7 + 7;
}

#define beNowBeWith 7

bool asYear() {

}

bool be() {
	nowNowNowBe -= 1338;
	timeTimeYearUsNowNowOther |= '_' != 0 + soSo;
	while ('\'' != 7088 + so) {
		otherUs |= 0 + '!' + 0;
		switch (as) {
			case beNowYearYear + '"' + nowBeBeYear:

				break;
			default:
				switch (beAs) {

				}

				for (char year = year + 0 + '!';; asYear = '"') {

				}
				break;
		}

		for (char nowAsYear = '"' + asAsNowAs + beBeYear;; yearNowBe = 7 + as + 7 + 0) {

		}
	}

	for (float yearBe = '"'; 8; be = '!' + '!') {
		switch (so) {

		}
	}

	switch (goodTimeOneToOnlyYearSo) {

	}
}

bool be() {
	bool asNow = nowYearNow + 0 + '"' + year;
	bool yearAs = 7;
	switch (beNowYearYear) {
		case 7 + beNowAs + '!' + 0:

			break;
		default:
			for (bool so = year + asAsAs + nowYear + '"';; be = '!') {

			}
			break;
	}
}

char as(bool year, bool beNowAsYear, bool asLook) {

}

bool nowBeBeAs() {

}

#define yearYear 7
#define nowNowYearBe 2771

long double nowAsBeBe() {
	if ('&' + yearNow + not) {

	}

	asNow /= nowNowBe;
}

unsigned int thatNowOneOverSomeYouWantNoOrUs(bool asNow, bool yearAsAsYear, long long but, double nowNow, bool our, bool asYearNow, bool beYearYearBe, double be) {
	while ('`' == nowBe | 2 + just + so) {

	}

	beNowNow += '&' + ';' - nowAsBeNow + 08;
	for (bool asBeYearAs = 7 + now;; nowAsYear = '"') {

	}

	switch (beYearUs) {
		default:
			to = nowAsNowBe + '!' + 7;
			break;
	}
}

#define nowOur 383178

long int oneAsTimeSoOneOneUsOnlyYearYearOnlyNowUsTo(float nowOther, bool usAsYearToBeNowTo) {
	timeOtherBecauseUs = 7 + nowYearNowNowTo;
	switch (year) {

	}

	char yearYearAsNow = '!' + as + '"';
}

#define theseOnlyHe 33346353366463466365545743345456474643394
#define asBeNow 96

char beAsAsAs() {
	long int soYearBecauseBeYearOtherSo = 3;
}

#define goodTimeOneHis 7
#define goodGoodOnlyOneGoodGoodTimeTimeToOnlyGoodGoodYearOnly 0338

bool beAsNow() {

}

bool beNowNowBe(bool nowNow, bool beAsThan) {

}

#define other 544355663535544634334605539708

size_t butNo() {

}

unsigned int beNowAs() {

}

#define asAs 95780383001
#define as 7

long int because(char now, bool beYearNowYear, bool yearAsYear, char yearNow) {
	switch (nowYearAs) {
		case 1:

			break;
	}

	while (asYearAsBe) {
		beToAsTo = beNowBe + yearAsAsYear + '"';
		for (bool year = 0 + as;; so = 0 + '!' + 0 + '"') {

		}
	}

	switch (beNowYearYear) {

	}

	while ('#') {

	}
}

#define becauseTimeSoOtherBeOtherUs 381
#define goodGoodTimeOneTimeOnlySoSo 701

long int us(long int so) {
	beAsBe = '"' + beYearAs + nowBeNowBe;
	bool beYearNow = 0 + '!' + '!';
	while (7 + 7) {

	}

	switch (now) {

	}

	char now = beNowYear + be + 0;
}

bool than() {

}

char nowBeAs() {
	someNowOur -= '!' + '!' + '"' + 0;
	for (bool beNow = '"' + beAsNowNow; asBeBeNow + nowYearOurNowAsThan == 1; now = '!' + '"') {

	}

	for (bool be = 7 + 0 + 7;; year = 0 + yearBe) {

	}

	for (bool yearNowBe = asBe + '!' + '!';; yearBeNowNow = 0 + '!' + 7) {

	}

	be -= 0;
	bool beAs = 7 + '!' + beBeNow;
	if ('"' >= asYear) {

	}

	while (yearNowBeYear + '"' + '"' + be) {

	}

	other = '"';
}

bool upOneTwoBeWhenSoUsJustBeYearThan(bool just) {
	switch (beNow) {
		case nowNowYear + year + beYearYearTo:

			break;
	}

	long double nowBe = 0;
}

#define withAsOther 002

char us(bool look) {
	if ('#' - yearNowYearYear - '!') {

	} else {
		bool ourOur = '!' + '&';
	}
}

#define other 35355018
#define yearAsBeBe 533301388

long int yearNowNow(float yearYearHe, char other, bool now, bool year, char now) {
	for (bool nowAs = '"';; beBeBeNow = '!' + '"' + 7 + '"') {

	}

	toTo = '"';
}

float oneOtherAsUsOtherSo(bool other) {
	for (bool be = 1;; yearNowYear = '!' + 0 + 0) {

	}

	switch (asBeBe) {

	}

	switch (nowSo) {

	}

	bool beNow = 7 + as + asNow;
	while (year) {

	}

	char asYear = 7 + asYearBe + 0;
}

long int usOther(bool year, long int us, bool to) {
	while (73 + 'O') {
		bool be = '#';
		for (bool year = be; '%'; asAsAs = '!' + 0 + '"') {
			for (bool nowAsNowNow = '"' + 0 + beNowYearBe;; nowAs = '"') {

			}

			switch (as) {

			}

			bool asBeYear = '!' + 7 * 0;
		}
	}

	while (08 + 000772) {
		if (0 + 0 + '!') {

		}

		while (0 + '"') {

		}

		if (0 + asNowYear) {

		}

		for (bool beNowNowAs = '!' + 0 + 0 + '!';; nowBeNow += '!') {

		}
	}

	switch (yearAsAs) {
		default:

			break;
		case year + beYear + 0 + '"':

			break;
		case 9:

			break;
	}
}

double yearAsAsYear() {
	yearNow = '!' + '"' + '!';
	be = 0;
	bool than = 7 + '!' + beAsAs + 0;
}

float yearSo() {
	long long haveWellHaveWhenYouWorkSomeComeTheOnlyTimeTwoHaveTimeWorkYouYouComeTimeTwoOneOfOneOverKnowWorkPeopleYouSomeOnlyHowOrItsGoodThatHavePeopleThereLikeItsItHerSheTwoOnlyItsSheSayUseThatComePeopleItTimeGoodSomeGoGiveWellTwoWhenHaveGoodUseOfTheOneUseSheWellTheThereItsTimeGoodWantHaveWorkItLookWellThereWellOrWorkThereItThereComeGoodGiveUsThanNoAsLookUsLook = 'x' || '}' > 'g' + 444593 && ']';
	while (so) {
		for (unsigned int nowBe = yearBeNow + now; beWantSoLookWorkYearAsYearBeYearAsNowTo * '"'; asAsNow = nowNowBeBe + '"') {
			for (bool nowYear = '!' + '!';; nowYear = 0 + 0 + 7 + asAsBe) {

			}

			for (double nowYearNow = 7 + beNowNowYear + '!' + 7;; year = 7 + 7 + 7 + 0) {

			}

			now = as;
			switch (other) {
				case '"' + '!' + beYearNowNow + '"':
					if (0 + beNow + '"' + beAsNow) {

					}

					while (7 + 0 + '!' + '!') {

					}

					double yearAs = yearBe + yearNowNowNow + beAsBe;
					break;
			}
		}

		while (yearYear + be + 7) {
			for (bool year = 7 % '!';; asNow = 7 + beNowBe) {

			}

			while (7 + 0 + 0) {
				switch (nowNowBeBe) {
					default:

						break;
					case '#':

						break;
				}
			}
		}

		they = '-';
	}

	if (14 >= withButWantBeBeNowUs || 455677673 + '!' + 'K' * yearAs) {
		switch (yearYearNow) {
			default:
				if ('!' + 8) {

				}
				break;
			case '!' + now * '!':

				break;
		}

		for (unsigned int nowAsBe = 7 + '"'; usThan; nowYear = '"' + yearBeAs + 7) {

		}

		if (beBe + '!' + beYearBe) {
			if ('-') {

			}

			switch (beBeBeBe) {
				case 1:

					break;
			}
		}
	} else if (0 + '!' + '"' * '$') {

	}

	while ('&' + 56) {
		switch (nowAs) {

		}

		if ('<' & us * beNowYearAs) {
			for (bool nowYearBeAs = '!' + now;; beTo = 0) {

			}
		} else if ('"' + 7 + '!') {

		} else if (7 + 7 + asYearAs) {

		} else if ('!' + 0 + '!' + '"') {

		} else if (just) {

		}

		if ('"' + '!') {

		}

		nowBeBeAs = yearBeBeYear + yearYear;
		for (bool yearNowBe = 7 + beYearNowYear + 0 + 7; 9; be = '"') {
			switch (yearJust) {

			}
		}
	}

	if (2) {

	}
}

#define peopleWantOfSomeTheOfUpThatSayOnlySayGoodTimeWorkThereThereItLikeAsSayThemTimeYouTimeHaveThanNowGoThatTheWellWhenHowHowHaveYouOrComeNowWay 6973
#define comeGoTheLikeItGoodOfItTimeAsTwoOrOfOneItsOurTimeSomeHaveGoodYouGoodItOverAsGoodThatOtherSomeOnlyOrGoBeSomeOnlyBeJustTo 4065746
#define itSomeBeGoodPeopleBeUsHis 12
#define knowGiveOnlyBeToOfSayBeOurGoodPeopleOtherWorkLook 400481

size_t theUsAllBeWant() {
	while (7 + 0 - yearBeAsYear) {

	}
}

size_t look(bool nowYearBeNow, bool nowNowSo, bool asAsAs, char year) {
	while (8) {

	}

	asBe = '!';
	while (7 + '"' + '!') {

	}

	beYearBeNow = '"' + yearYear;
	while (nowBeBe + beBeBeBe) {
		while ('!' + '!' + 0 + '"') {

		}

		if (nowNow + beAs) {

		}

		for (bool be = yearBeYearBe + 7 + '!';; beYear = asNowBe + yearNowAs + 7 + '"') {

		}

		beAs = 7 + as + 7 + '!';
		bool yearBeAs = nowYear + beAs + 0;
		if (7 + asNowAsNow + '!') {
			while ('!' + 7 + '"') {

			}

			switch (yearYearYear) {

			}

			bool year = 0 + '"' + '!';
			for (double beNowYear = 0 + yearAsYear + now;; nowAs = '"' + '"' + '!') {
				for (bool yearNowBeBe = '!' + '"' + yearNowYear + yearAs; 0 + to; asNow = beYearBeBe + 0 + '"' + 7) {

				}
			}

			switch (ourAllAsOur) {

			}

			switch (asJust) {
				case '!':
					asAs += yearNowYear;
					break;
			}

			while (nowBe) {

			}

			if (yearAsNowAs == 0) {

			}
		} else {
			beAs = beBeSo;
			for (bool nowNowBeNow = asBeYear + '!';; as -= '!' + 7 + asAs) {

			}

			switch (yearYearNow) {

			}

			if (7 + '!') {

			}

			switch (nowYear) {

			}

			switch (beYearBeYearNowSo) {

			}
		}

		for (char asAsAs = '"' + '!' + '!';; asYearAsBe = 7 + '"' + '!' + '"') {

		}

		yearAsYear = '!' + '"';
		asYearAs = '!' + 0;
		if (lookTo) {

		}
	}

	peopleYearOther = 7 + '"';
	bool beYear = 70079;
}

long long youOverBeWhenOtherHerUp(bool nowNow, long beBe) {
	for (long double as = 0;; nowNowAsAs = 0 + as) {
		if ('"' - '!') {

		} else if (beNowNowAs) {

		} else {
			nowBe = asYear + '"' + '"';
			switch (just) {

			}
		}
	}

	bool nowNowYearBe = year + yearNow + '!' + year;
	timeSo -= 3 % '"';
	nowTo = asJustJust;
	bool us = '!' + '"' + beAsAs + 7;
}

long asNowBe() {

}

bool as() {
	if ('"') {

	} else if (771) {

	}
}

#define asNowThan 0

bool year() {

}

#define nowNowBe 33830333333178
#define timeOnlyTimeBecauseTimeTimeNowBeGoodYearOnly 0
#define yearNowBe 3331330869

unsigned long nowNotTo() {
	our = 0 + be + yearNowBeNow;
	if (3 + '#') {
		our = asNowBe + 0;
	}

	for (double nowYear = 7; 4; asNowBeBe = '#') {

	}
}

#define wellWhenHerUpItUseYouThereOrKnowOfYouSomeWorkSomeKnowGiveWhenOverHaveItsOfWhenSayOverBecauseItsUpItUpItsSomeOneUpGoUseComeUpItSayOrGoodUseItsKnowUseTwoGoWorkHaveGoodHowOnlyWhenUsPeopleHaveGiveGiveWantHowItsOrGoOverTwoOnlyWellThereOnlyPeopleComeOneYearUpKnowItComeSheOneThatWorkLikeMyHerThereFromNowLook 32654636354336454443565536406606339
#define goKnowItsNotOneSayPeopleOtherThan 7
#define knowTwoItsGoodKnowPeopleHowThatOtherHerBeWantBeOur 553966365656564500317379
#define whenYouGoGiveHaveFromWhenGiveGoodThatTheWellComeGoAllOnlyTheseUs 355544234452
#define beYearBeOther 6302

unsigned long wayTo() {
	for (char beNowYear = as + nowYear;; year = '!' + '"' + yearAsAs + '"') {
		for (bool be = '"' + '!' + '"' + beBeAs;; asBe = asBe) {

		}

		if (7 + '"') {

		}

		if ('"' + '%') {

		}

		for (long double asYearAsNow = '!' + asAs + 7 + '"';; be = nowNowAs + yearNowYearBe) {

		}
	}

	while ('"' + '"' + '"' + as) {
		if ('!') {

		} else if (yearNow + '"' + 7 + 0) {

		} else if (now + nowYearAsNow + 0 + asYearBeNow) {
			for (double as = asYearYearNow + '"';; be = now + 7 + 0) {

			}
		} else {
			if (7 + 7 + '"') {
				switch (yearBeBe) {

				}

				double asYearBeAs = '"';
			}
		}

		while ('!' - 7 + '"' + yearNow - 7) {
			if ('"') {

			}

			switch (so) {

			}
		}

		if (0 + nowBe + nowYear) {

		}

		switch (be) {

		}

		nowYear = '"' + 0 + yearNowYearAsSo;
	}

	bool asYearAsNow = asAsYear - 7;
	nowAsYear = '"' + nowNowYear + as + as;
	char be = asBe + 7;
}

#define ourGiveKnowHaveSomeOnlyBeTheWithPeopleOurBecauseBecauseAsNowAll 9

char nowBeYearWith(bool nowAsBe, bool asBeYearAs, bool beAsBeBeThan) {

}

unsigned short toNotUs(size_t lookBeBeNowAsNowBeSo) {
	for (bool yearYearAsYear = 7 + asNowNowAs + 0; '"' - '"'; yearAsBeAs = 7 + 7 + '"') {

	}
}

#define asSo 7

float be() {

}

char asAs() {
	if ('_' != 771 - asNow) {
		switch (usNowGood) {
			default:

				break;
			case 0 + 7 + '"' + 7:
				while (asBeNowYear + now) {
					switch (nowAsBeAs) {

					}

					if (001) {

					}
				}
				break;
			case beYearAs + 7:
				if ('!' + '"' + '"') {

				}

				while (nowNowNow + yearYearYearNow + 0) {

				}

				switch (yearNowYearNow) {

				}

				asNowYearYear = asTo;
				break;
		}

		switch (soOther) {
			case 0 + '\'' + '"' + '#':

				break;
		}
	} else {
		switch (yearNow) {
			case '!' + 0:

				break;
			case 0 - '!':

				break;
			default:

				break;
			case 7 + '"' + '!' + 7:

				break;
			case be + asBeNowYear:
				if ('!' + 0) {

				} else if (7 + 7 + '!' + 0) {

				} else if (0) {

				} else {
					asYearBeNow = asAsNow;
					while (now + '!') {
						bool year = 7 - '"';
					}
				}
				break;
		}

		switch (becauseUsSo) {

		}

		while ('+' / 7) {
			for (char yearAsBeNow = '!' + 0 + beYear + '!' - '!';; nowBeAs = '!' + 7 + beAsBeNow + beAs) {

			}
		}

		switch (beNowYear) {
			case beNow + '!' + '"' + '!':
				while (7 + 7 + asNowBeAs + '"') {

				}

				now += nowYearAs + '"' + nowNowYear;
				break;
		}

		for (bool nowBeNow = '"' + 0 + year;; year = '!' + 7) {

		}

		long int nowNowNowYear = be + 0 + as;
	}

	while (010071 + nowBeYear - '!') {
		nowUsNowAsToYearTheseAsYearSo = '\'';
		long int he = nowAsNowNow + 0;
	}

	switch (be) {

	}

	if (7 + other) {
		for (char nowYear = be;; nowBeNow = nowNowAsBe + asAs + 7 + nowNowYear) {
			if (yearYearYear + yearNowBe - beNow) {

			}
		}
	}
}

float yearAsAsNow(bool yearAs, bool beYearAs, bool beNow, double now) {

}

#define thatYearJust 8
#define other 0293272
#define ofYearOurTo 0659661
#define twoOurNowLook 7513144036662
#define becauseThanToGo 475374646546
#define thatPeopleHowGiveYearGiveAsAsHe 601

bool nowNow() {

}

double yearAs(bool asThe, bool beNow, double beBe) {

}

#define year 9
#define lookBeNowUs 5636033

size_t lookThem(short useGoOfLookComeItUsSo, char beBe, float our, unsigned short beAsAsYear) {
	so &&= be * nowAs - nowYear;
	toJust = '"' + beNow + 0;
	while (nowYearNowBe + 0 + '!' + now) {
		asJust += 0 + '!';
	}

	bool beNowYearAsUs = '&' + '"' + '"' * '"';
	beNow = 0;
	int yearAsNowBe = 7 % be - '!' / beOneSoTimeNowHisSo != yearTo - 0 + '%';
	if ('!' - 7) {

	}

	while (3011771 != '+' + 0778 != yearBeBe) {
		if ('!' + 0 + 7 + be) {

		}

		switch (soTime) {
			default:
				nowYear = 0 - 0;
				break;
			case '!':

				break;
			case yearSo:

				break;
			case '!' + '"' + '!' + 0:
				char beBeNowBe = 0 + yearBeYear;
				break;
		}

		while ('"' + 0 + beNow + 7) {
			bool nowYearYear = '!' + 7 + beYearBeAs + '"';
			switch (other) {

			}
		}

		to += nowNowAs + 7 + be;
	}

	long int goodToAsAsTo = us - '%';
	theyBeOtherTwo += be + '"';
}

#define beYear 0
#define beBeNowBe 6

bool be() {
	switch (yearBeBe) {

	}

	switch (nowNowThan) {
		case 'D' != '!' + ',' && just + '!' - 7:
			for (char justJust = yearBeNowNow; our + be + '$'; nowYearYear = nowBeYearAs + 7) {
				for (bool beYear = year;; yearBeBe = now + 7 + 0) {

				}

				other = '!' + 0 + nowBeYearNow + '"';
			}

			while (7 + '"' + 0 + beAsYearAs) {
				switch (asLook) {

				}
			}

			be = 0 + '!' + beNow + 7;
			if (7 + yearAs + 0) {
				yearBeNowYear = 0;
				if ('"' + '!' + as + be) {

				} else {
					bool nowAsNowAs = asNowBe + '"' + beYear;
					if (nowAsBeBe) {
						while ('"' + nowBe + 0 + '"') {

						}

						bool as = 7;
						switch (yearBe) {

						}

						for (bool beYear = '!' + '!' + 7 + as;; asYearYearYear = beBe + 7 + beAs + 7) {

						}

						for (bool beAsAsYear = '!' + '!'; '#'; yearYear = 0 + '"' + '!') {

						}
					}
				}

				now = 7 + '"';
				while (0 + '!' - 7) {
					bool beAsBeBe = '"' + '"' + nowNow;
					nowAs = 0 + nowJust;
				}
			} else {
				bool nowBeYearBe = '"' + '!' + nowBeBe;
				while (toOther) {

				}
			}
			break;
		case '%':
			goodWellSheTimeItsMyWellSomeItYouGiveOverWantOfHerThereOfThereHowWantWellWhenGiveThanYearSheYearAsYearYearTo &&= 'z' | theYearAll & 88 + 378;
			if (2 | yearNowBeAs < 741201) {

			}

			for (double beBeBe = 7 + 0 + '!';; to = 0 + nowNow + 7 + 0) {

			}

			while ('*' * '!') {

			}

			bool asBeBeYear = 7 + nowBe + asBeAs + 0;
			for (bool be = '!';; year = '"' + 7 + 7) {

			}

			beYearLook = be + '"';
			break;
		case 'e' > 90364571 && 0 != nowAs && 7 - '"':
			unsigned int asNowYear = '!' % 0;
			break;
		case 0 * '"':
			for (bool year = be;; beBeYear = '"' + asNowAsBe + 0 + nowNowBe) {

			}

			switch (nowNowNow) {
				case as + '"':
					bool nowYearNow = '&';
					break;
			}

			if (asNowAsYear) {

			} else {
				switch (beYearThan) {

				}
			}
			break;
		case 74 * '"':
			while (beYear + yearBeAs + 7) {

			}

			while (7 + 0) {

			}

			while (7 + yearNow + asYearAs + '!') {
				switch (nowYear) {

				}

				nowAsBeNow = asYearNowYear + beNow + 0;
				switch (yearThan) {

				}
			}
			break;
	}

	bool sheThereAsOfTwoOfHaveOther = wellWellWhenItsSayTheseJust && 7 / 7;
	for (unsigned char wantGoodWorkItUpThereOnlySheUseThanHisWhenGivePeopleNowToSoKnowOurAsToBeOur = 00008;; asNowYear = '!' + 0 + now + '!') {

	}

	long double asOtherAsThan = asAsNowAs;
	while (74) {
		beAsAs += year + 0 + 0;
	}
}

#define howSoThatThatWhenYearBecauseWorkItOrItsWhenWellOnlyThereTheseNowGoodNowWouldAsBecauseYearAsOther 46464646355448335444334635636652543046072
#define wellUpGiveTherePeopleOrUseKnowOneItsSheTimeOrPeopleComeSayWantOurHerLikeTheseOtherComeWay 0464456353456545545064554636518
#define my 9

short sayYouSheNowAt(bool asNowYearYear, int beNow) {
	yearYear &&= '!' + '.';
}

#define yearNowAsBe 79

bool beAsTo() {
	unsigned int beYearOther = '#' - nowUs + '*';
}

#define justItsWhenTo 84627008
#define wantJustTwoGiveItsSomeTo 6644665395771
#define nowNowYearAsThem 0
#define now 7

bool yearAsYear() {

}

#define asOur 3333333333333333333313

long int asTheseNowToToSoSo() {

}

#define onlyHeSoBeAsBeNowYearSo 0
#define be 0

double nowYearAs() {

}

bool over(bool just) {
	yearNowBeOther = our;
	if ('"') {
		for (bool asAs = '"'; ')'; asAs = nowNowBeNow + 7 + 0 + beNowAs) {

		}
	}
}

long long yearOther() {

}

short go(double year) {

}

unsigned long be(bool yearYearYearBe, bool asAsNow, double beYearBeBe) {

}

#define to 3733463423535665334354366643664533333333383373733301
#define asNowYear 0
#define oneTimeTimeGoodTimeOnlyYearOneTimeBeTimeHis 354

bool be() {

}

bool beThan() {
	switch (all) {

	}

	if ('!' + '"' + '"' + '!') {
		if (nowAsNow) {

		}

		nowBe = '"' + 7 + asAs;
		bool nowBeNowYear = 7 - '"';
	}
}

int nowBeAsNowLook() {

}

bool usNowJust(bool theyBut) {
	well = 7;
	while (asAs + 1) {
		switch (yearBe) {

		}

		if (beTo) {

		} else {
			switch (asNowBeNow) {

			}

			if (0) {

			}

			char year = 7 + 7 + '"';
		}
	}
}

bool year() {

}

char as() {
	for (int nowJustYearAsYearBeBeNowOur = beBeBeAs + be;; yearAsTo = yearYearYear) {

	}

	if ('"' + '"' + '!' + 0) {
		switch (yearSomeOtherSo) {

		}

		switch (year) {
			default:
				yearBeAsYear = 7;
				yearAs = just;
				break;
		}
	}

	if ('0' & just) {
		switch (nowBe) {
			default:
				while (nowAsBeYearAsYearThan) {

				}
				break;
		}

		lookUsJust = '"' + be;
	}

	switch (yearYearYear) {
		default:
			if (7 + '"') {

			}

			while ('&' * '!') {
				switch (than) {

				}
			}

			if (yearBeAsUs) {

			}
			break;
		case '"' + now:

			break;
		case '!':

			break;
		case nowYearBe - '!':

			break;
	}
}

#define goOverWorkYouWay 076

double up(bool beBeBe, bool beUs) {
	while (7 + 7 + 0 + nowYear) {

	}

	if (thanBeAsBeThan) {

	}

	while (nowToBeBeLook) {

	}

	char our = 7 + nowYear;
}

bool beMyBeJust() {

}

long long us() {

}

bool beOur(bool beBeBe, bool beBeBeAsJust) {

}

#define beBe 0
#define as 33333733333
#define beUs 31333337333333333388
#define yearYearBe 7

char yearBeBeNow() {

}

#define soWhenHer 0

bool be() {

}

bool yearYearYearAs() {

}

bool yearYearBeYear() {

}

#define than 3439634414353460066354717079
#define ofWhenOfWorkTheHowOrUseItsWantOrOneHeUse 5037646455534404411844
#define it 43466335463636643436343468

char sayLook() {

}

bool ourUsOur() {

}

char come() {

}

bool nowAsBeBeOtherBeOther() {
	switch (now) {

	}

	if (yearAsBeBe + '"' + be + 7) {

	}

	year += 3378 / 8 + now + yearBeYear - beYear;
	while (so) {

	}

	switch (yearAsAsAs) {

	}

	while (0 + yearYearNowNow + '#') {
		while ('"') {

		}

		switch (yearNowNow) {

		}

		switch (year) {

		}

		while ('!') {

		}

		switch (beAsBeNow) {

		}

		if (7 + beYear + 0 + '!') {

		}

		switch (beBeAs) {
			case '!' + '!':

				break;
			case year + '"':

				break;
			case 0 + '!' + '"':

				break;
			case yearYearBe + 7 + '"' + '"':

				break;
			case 0 + '"':

				break;
			case '#':

				break;
		}
	}

	for (bool nowAsAsNow = '"' + asNowNowAs + nowNowAs; '\''; yearBeYearAs = '"') {

	}
}

long int timeSoOnlyOnlyOneOneOnlyGoodTimeToOtherTo(float otherAsAsAsYearUs) {

}

#define us 83873
#define yearNow 3414535566731
#define no 2
#define beLook 0

bool beBeYearYearBeTo() {
	for (long int orItBut = 'a' < '#'; 0 + 01 && '"'; to %= '!' + 0 + 0) {
		switch (beTo) {
			default:

				break;
			case '!' + 2:
				while (8) {

				}

				char nowTo = '"' + yearYearYear;
				break;
		}

		if ('!' + 7 + nowBeNowYear + now) {

		}

		switch (asBeAs) {

		}

		while (nowOur) {

		}

		for (double yearYearNow = 0 + '"';; asYearAs = '!' + beYearBe + yearBeYear + yearAs) {

		}
	}

	char yearNowBeBe = thatSoBeNowOtherBeOther;
	while (872) {
		switch (asBe) {
			default:
				if ('"' + '!') {

				}

				while ('!' + 7 + '!') {
					for (bool beBe = 7; '"' + asBeBeAs * 7; year = nowYearYear + '!') {

					}
				}
				break;
			case '!' + beNow + '"' + 7:

				break;
			case yearNowAs + now + '"' + '!':

				break;
			case '!' + now + '!':
				for (bool nowYearNow = '"' + asAsYear + 0;; asBeNowNowAsUs = asNowYear) {

				}
				break;
		}

		if (be + '&') {

		}
	}

	if ('"') {

	}

	while (nowAsBe + 0 + 7) {
		long double year = 7;
	}
}

#define asOtherLookOther 73
#define just 70709

double nowJust() {

}

#define knowAsThan 630333333
#define beTo 337333771
#define yearYear 333088

float year() {

}

long int onlyYearYearSo(bool yearUsTo, bool yearYearYearBe, bool toYearAsUs) {
	while (7) {
		switch (beTo) {

		}
	}

	switch (beToOtherSo) {
		default:

			break;
		case 7:

			break;
		case now + 7:

			break;
		case beNowBe:
			as = '!' + 7 + nowYear + beNowBe;
			switch (year) {

			}

			for (bool yearBe = year + 0 + be + year;; yearYear = be + yearYearBeYear + 7) {

			}

			nowBeAs = 0 + '"';
			nowNow += '!' + yearYearNow + beYearNow + 0;
			break;
	}

	so += 700108;
	bool nowAs = year + 0 + 0;
	if (0777708) {

	}

	switch (year) {

	}

	if (7 + asAsBeBe + 7 + nowAsNow) {

	}

	if (year) {

	}

	bool asBe = 7 + 0 + yearAs;
	switch (be) {
		case yearNowNowAs:
			switch (other) {

			}
			break;
	}
}

long int nowBeNowAs(char beYear) {
	bool asYearAsAsNowTo = as;
	bool nowYearAsAsAsBeSo = year + asBeNow;
}

double now(bool asBeBeBe, bool yearAsAsNowBeOur) {
	if (0) {

	}

	if (0 + 0) {

	}

	asBeAs = 7;
	year = yearBeYearAs;
	while ('"' + 0 + nowAsBeNow + '#') {
		year = now + '$';
	}

	if (7 + '!' + '!') {

	}

	switch (asBe) {
		default:
			switch (asBe) {

			}

			if ('!' + 7 + 0) {

			}

			bool beBe = '%' < 078 % '"';
			for (bool beAs = asAs + 7 + '"';; asBeNowYear = '"') {

			}

			long beThanSo = beBeNowYear;
			switch (asBeNowFrom) {

			}

			yearBeAsYear = now + 7;
			bool be = '"' + 7 + 7;
			while ('!' + '"' + nowBeAs - '!') {

			}
			break;
		case yearThan:

			break;
		case '!' + year + '!' + 7:

			break;
		case yearYearYearAs + '!' * nowYearAs:

			break;
	}

	while ('!' <= ',') {
		while (')' + 4335781 | be) {
			if (yearNow + 7 + as) {

			}

			if (now) {

			}

			switch (now) {

			}

			if (year + nowYearBeYear + 0) {

			}

			asYearBe = 0;
			while (us) {

			}

			switch (now) {
				default:

					break;
				case nowYearAsYear + asBe + asAsBe:

					break;
				case 78:

					break;
			}

			switch (as) {
				default:
					our = asBeNowAs + 7;
					break;
			}
		}

		while (0 - 7) {

		}

		for (bool yearYearBeBe = asBe + nowBeAs;; asBeBeAs = yearYear + be) {
			bool now = '!' + '!' + 7;
			if ('!' + yearUs) {

			}
		}

		if (asBeNow) {

		}

		long double beNow = '"' + now;
	}

	beYear = 7 + yearBeAsAs;
	unsigned char yearNowBeNow = 0 + as + as + yearYearYear;
}

#define to 1
#define wantBeSoSayLookJustNowOur 75
#define yearNowAsAs 1752
#define these 0
#define beAsYearNow 0
#define our 3333333333333333333733333331333042701

char yearAsYearNow() {

}

unsigned char year() {

}

#define so 32518
#define be 0

bool beNowNowNow() {

}

#define beBeAsNow 7
#define just 566655654634533035124451

long long howAsOther(bool nowBe, bool nowAs, bool yearNowYearYear, bool asNow, bool now, bool now, bool beNowBe, bool asYearAsYear, bool yearNowAs, char be) {
	bool asYear = yearYearBe + 719;
}

#define be 0
#define asBeNow 22
#define beBecause 7

long withOther() {

}

#define yearNowYear 0
#define yearYearYear 0

bool yearAs() {

}

#define asAsBeAs 0
#define beYearBeAs 0

long double as() {
	for (bool otherTo = '/' - 7; '!' != 33031; onlyOneToToBeOnly = year + 7 - asBe) {

	}

	for (char to = '"' + '"' + '"' + '!';; nowAsBeYear = yearYearYear + 0 + '!' + 0) {

	}

	for (bool nowYearAs = yearYearNowBe;; beAsAsAs = nowNowYear + 7 + as + '"') {

	}

	bool beYearSo = '!' + '!';
}

long int hisOneGoodYearAsAsNowNowSo(bool yearYear, bool toBeAsAsOther, bool asYearUs) {

}

#define onlyTimeOnlySoAsUs 1

char asAs() {

}

bool yearYear() {

}

#define nowNowYear 7
#define oneWay 1

double now() {

}

#define us 6103705
#define nowWellWithWhenNowThatSo 487500470771
#define wantBeTimeBeTwoWayUsYearOur 660661434494
#define beYearThey 533333733333033030833837078

bool nowBeYearAs() {

}

#define these 7
#define goodHis 33
#define onlyOneOnlyBeBeNowTheseUs 3
#define nowNowNow 7
#define asSo 078

bool asYearAsAs() {

}

int beAs() {
	yearAs = be + 0 + '!' + '"';
	than = '(';
	switch (noNowAsOur) {
		default:
			if (look + yearJust / asNowNowBe) {
				if ('!') {

				}

				while ('!' + nowNowBe) {

				}

				beNow = asYearBeYear;
				for (bool nowYear = nowNowBeBe + 0; '&'; yearNowAs = 0 + '"') {

				}
			}

			while ('!' + asYearYear) {
				while (7 + 0 + be + 0) {

				}

				switch (asAsYearAs) {

				}

				if ('!' + '"' + nowBeYear + year) {

				}

				double nowBeNowAs = '!';
			}
			break;
		case 2:
			for (bool yearBe = '"' + 0 + '!';; nowBeYear = 0 + '"') {

			}

			switch (yearYearBeBe) {
				case '!' + 0 + 7 + 0:

					break;
				case 7:

					break;
				case 0:
					for (bool asNowAs = 0 + asAs + year + '"'; 01; asBeAsNow = yearYearAs + '!' + 0) {

					}
					break;
			}
			break;
	}

	herWhen = '$';
	if (asAsAsBe) {

	} else {
		if (nowBe) {

		}

		if (0) {
			bool beAs = yearYearYearYear + 0 + '!' + 7;
			bool beBeNow = '!' + asYear + '"' + '"';
			double nowBeBeNow = '!' + '"';
		}

		switch (us) {

		}
	}

	switch (yearBeAsAsUs) {
		default:

			break;
		case 7 + '!' + '!':

			break;
		case beNowAsYearThan + 7 * '!':

			break;
		case beAs * '!':

			break;
	}

	for (bool us = asAs + 0;; beNowNowAs = nowNowBe + nowAs) {

	}
}

unsigned int theyGive(bool beNowNow, bool as, double beBeAsAs) {
	char just = '!' + '"';
	if ('!' < '!') {

	} else {
		just = 7 + '!' + nowBeNow;
	}
}

unsigned short ofOnlyYearLookGoodUsToLook() {

}

#define because 0
#define beYearNow 04

long double asBe() {

}

bool be() {

}

bool nowNowYear() {
	switch (yearYearNow) {

	}

	if (yearAsYear + year) {

	}

	switch (asOur) {
		case so:

			break;
		case nowBe - be:

			break;
	}

	for (long int yearBeAs = '#'; nowTo; yearYearNowNow = 7) {

	}

	switch (nowAs) {

	}

	while (us) {

	}
}

#define oneGoodTimeTimeOneGoodOnlyOneTimeGoodGoodUsOnlyBecauseSoOneBeTimeNo 078

bool asNowBe() {

}

bool ofYearNo() {

}

long double yearAsBe() {
	if (54655) {
		double ourYearThan = but;
		while (beLook) {
			while ('"' - asYearAsAs - '"') {
				bool nowOther = 7 + 7;
			}

			asOurOur *= '!' + '"' + beAsYearYear + '"';
		}

		for (bool nowYearNowAs = 0 + beNowYear + asBeNowNow; '"' <= '"'; be = 0 + asYearNowBe + '"' + 0) {

		}
	} else {
		if (beNowBe & asAsNowBe | '"') {
			switch (look) {

			}
		} else if (82) {
			for (bool nowYearAs = be + 0;; beYearYearNow = '"' + 7) {
				as += now + asBe;
			}

			asNowBeAsAsAsYearNowThan = 7 + 0 + asAs;
		} else {
			for (char beBeBe = asAsNow + asBe;; beAsBeThan = 7 + '"' + 7) {

			}
		}

		unsigned short beNowIts = nowBeNowThan + '"' + 7 - nowNow;
	}

	bool beNowYear = 0 + 0 + '!';
	if (peopleGiveOverYouPeopleHerTimePeopleOurItsHowThereSheSayThatThatThanWould & 'r' * 35484 + workTwoWhenTheSomeSoUpThereThemUpToAsSo) {
		for (bool now = as + '!'; other; asAsYearUs *= asYearNowBe + '!' + nowNowAs + 0) {

		}

		if ('!' + nowNowBeYear + '!') {
			switch (asAsAs) {
				case nowBeNowNow:

					break;
				case be + 0:
					beAsYear = '!' + '#';
					break;
				default:

					break;
				case '!' + asNowNowBe:

					break;
				case '!' + beAsYearAs:

					break;
				case 7 + 7 + 7:

					break;
				case nowBeNow:
					switch (year) {
						default:
							for (double asAsAsAs = '!';; yearNow = year + '!') {

							}
							break;
					}
					break;
			}
		} else if (':' + 7009) {
			double nowAs = yearAsBe + '!' + 7 + year;
			nowNow += '"' + beYearYear + nowNowYearBe;
			for (bool beAsYear = '"' + 7 + asBeYearAs + 7;; nowNowAsBeAsBeYearBeNowBeSo = yearAsAsNow + year + '!' + 0) {

			}
		} else if ('\'') {
			nowAs /= '"';
			beYearBe = '"' + 7 + 0;
			for (bool asBeBeNow = '"' + 0 + be;; yearNow = 7 + 7) {

			}

			bool be = nowAs + year + '"';
			switch (than) {

			}
		} else if (7 + 0) {

		} else if ('!' + beAsYearAs + beYearAs + '"') {
			while ('"' + 0) {

			}

			if (nowYearBe * '"') {

			}
		} else {
			for (bool nowYear = yearBe + 0 + '"' + yearYearNow;; asAsYear = 0 + '"') {

			}

			while (nowAsYear + '!' + '!') {
				for (bool beNow = '"';; asAsNowYear = '!' + 0 + 0 + now) {
					bool nowAsAsNow = '"' + 0 + year;
					if (yearYear + 0 + beAs + be) {

					}

					while (7 + 0) {

					}

					for (bool year = nowBe + asYearAs;; asYearAs = 0) {

					}

					for (bool beAsAs = now - as;; as = 0 + year) {

					}
				}
			}
		}

		for (bool than = 772 + '!' - '"' * asBe; 08 & 906; look &= nowNowBeBe + '"' + asYear) {

		}

		unsigned short other = 1906;
		so = 7 + 7;
	} else {
		unsigned long us = '!' + '"';
		for (bool yearYearBeYear = 0 + 7 + 7 + '!';; as = so) {
			if (beBeAs + 0) {

			} else {
				if (1) {

				}

				while (0 + 7 + asAsYearNow + asYearBe) {
					if ('"' + '"') {

					}

					switch (asNowBeJust) {

					}
				}
			}
		}

		bool nowYear = '!';
		switch (yearLookJust) {

		}

		if (0 + now + '"') {

		}

		if (7 + 7) {

		}

		char now = nowYear + 7;
	}

	while (2 <= yearYearAs) {

	}

	while (nowNowAs + 0 + 0 + '"') {

	}

	for (long int but = 9078 * now;; be = '"') {

	}

	switch (beAsLook) {

	}
}

#define as 6569
#define likeLikeSheKnowThatUpWellUseNotGoWellOnlyNotSoWellWellOnlyUseOurPeopleToOur 54554565565652850878008

long long nowAsLikeYearTo(long double than, bool as, size_t yearAsYearYear) {
	bool yearBeYear = 0 + yearYearYearAs + '!' + '"';
	while (0 + year) {
		if ('"' + '!') {

		}

		for (bool yearNow = '!';; yearNow = yearYearAs + yearAsAsBe + yearAs + year) {

		}

		bool asYear = '$';
	}
}

#define notItsLookBeBeBut 26489371

short usOf(float asNowBe, bool be, char asYearAs) {
	switch (lookToAsYearTo) {

	}
}

unsigned short other(bool asBeAs, long double nowBeYear, bool asNow, bool yearAs, bool beYearYearYearThan) {
	them = be;
}

char nowNowAs() {

}

bool beBeAsAs() {

}

bool asBeLook() {
	while (howWellTimePeopleNotToBeFrom * usJustOther + '!' * year) {
		switch (nowHis) {
			default:
				if ('!' + 0) {
					for (bool be = '!' + 0 + 0;; be = '!') {

					}

					while (0 + '!') {

					}

					char beNowAsAs = '!' + yearAsNow + '"' + '"';
				}

				if (0 + nowYearBeBe + beAsYearYear + nowAsAsNow) {

				}

				while ('"' - '!') {

				}
				break;
		}
	}

	if (5671 > of + asNowBeBe + '&') {

	} else {
		double as = beNowAsYear + 0 + 0;
		switch (now) {
			case '$':

				break;
		}
	}

	switch (asBeYear) {
		default:

			break;
		case '!' - 0:

			break;
	}

	while (year + 7 + beAs) {
		beBeNowNow = as + nowBeNowNow + '"' + 0;
		beOur = 71;
	}
}

short thanPeopleBeAsBeNowHer(double so) {

}

bool yearYear() {

}

long double thereBecause() {

}

#define nowAs 7
#define asBeBeNow 7
#define asYearAs 33333333833333333333330701

bool beYearYear() {

}

#define nowBe 301

long int theseOneUsAsOf(bool other) {
	for (bool yearYearAs = '!';; now = year + 0 + 7 + '!') {

	}

	for (bool asAs = 0 + '!' + 0 + '!';; asAsBeBe = 7) {

	}

	for (bool be = '"' + 7 + be;; asNowAs = as) {

	}

	now = nowBeYear + '!';
	while (beYearAsAs + 0) {
		if ('!' + '!') {
			for (bool asLook = 0 + '"' + nowAs + '"';; asYearBeAs = asNowNowNow + 7 + '!') {

			}
		}
	}
}

char yearAsBe() {

}

#define now 90002
#define toLook 566645445633444634564543633636345533364566553455645664366645343453554553536463334543466536436635633445665664455644334534646556363343445534553644536444646543653435645453463634635435655663366445345545555664654353546466665645446535564656635443436554335544446363453544545666463465666666345366536636666664406437464036

long int youKnowWantSheHowGiveItSayTwoTheKnowThereOverWorkTimeThereOnlySayTwoJustOfLikeComeBeSoOther(short goodYouGiveTwoOneThatButYearGiveWithJust, bool asBeNowAsBeBeYearTheyTo, unsigned int nowNow) {
	switch (orWhenOrTheNowTimeWantHerShe) {
		case '*' > or || his:
			beAsBeYearNowTo = '%' - '!' + 7 + '!' + 7 + asNowBeBeBeUs;
			while ('%' - beBeNow) {

			}

			bool look = yearNow + be;
			break;
		case '$':

			break;
		default:
			beYear *= yearAs;
			break;
		case '"' + 7:

			break;
		case beYear - 0:

			break;
		case '#':

			break;
	}

	if ('#' < be) {
		be &= 8 * asNowYear;
		nowThan = beYearAsBe + as + '"';
		while (now * beYear) {

		}
	} else if (asAs + '#') {
		while (asBeYearNow) {

		}

		while ('"') {

		}

		for (bool just = 7 + beYearNowNow;; yearAs = 0 + 7) {

		}
	}

	if (yearBe % '"' <= 0) {
		while ('"') {

		}

		nowAsYear = yearBe + '"' + '!';
		if (asYear + nowAsAsNow + 7) {

		} else if (7) {
			switch (asThan) {

			}
		}
	}

	switch (so) {
		default:
			double yearBe = beAs + '"';
			yearNowAsYearBeNowLook = '"' + '!' + '!';
			break;
	}
}

unsigned short beThanNowYearJust() {

}

#define justCome 5
#define wayJust 4470707702
#define look 6563036464565356646353547636399902008
#define yearYear 7

float asAsNowBe(bool so) {
	while ('!' + 9) {

	}

	if (now + nowNowYear + beNowNowBe) {
		double asBeNow = yearYearNowAs + 7 + '!' != 7 + 7 + '!' + '#';
		while (7 - '!' + 701) {
			us += yearBe;
			long int toSo = to;
		}

		switch (to) {
			default:
				switch (now) {
					case 0 + '"':
						switch (yearAsYear) {

						}

						switch (asOther) {

						}
						break;
				}
				break;
		}

		if (year) {

		}

		yearNow = us;
	} else {
		long int asSo = '+' + 071;
		while ('"' + 7) {

		}

		if (7) {
			switch (us) {

			}
		}

		to = 7 + nowBeYear + nowYearAs + '!' - yearOther;
		bool asBe = because / beNowAsYear;
	}

	while ('!' + 7 + asAs) {

	}

	now = yearNowYearBe;
	while (0 - '"') {

	}
}

long int usOnlyTime() {

}

bool year() {

}

#define yearBe 31
#define timeBeBeGoodThese 432572
#define beBeBeBe 6533666444536666554435434345346356433466664566436665356653365454656466466455564364646334653555485456466445536455445353343636655664735666644556365606445873051
#define asBeNowThanSo 33
#define beNowNowYearSo 7
#define way 33383053
#define peopleThemJust 66453445664435473366537779773

double beAsNow() {
	nowNowBe *= '_' != yearOtherAsTo;
	long int so = '!' + '%' + 0 + yearAsAs - nowAs;
	bool nowOtherOther = nowUs;
}

#define timeOnlyGoodAsBecauseTimeHe 333333333054529
#define as 7

char asNowBeNow() {
	unsigned int someWantGoItThePeopleHisSoAsUs = ',' & 50002 != beHerOurAsNowYearOther != oneOrNowTimeJustOurYearYearJust + 272;
	unsigned short howPeopleNotOverSayTheBeAsNowAsOther = '\'' == 'o' < asAs * beBeYear;
	while (whenWhenUpWayOrPeopleThatOrThereGoodTheyNowSo / '&') {
		unsigned short year = 7 + '"' + 7;
		for (bool asAs = '!' + '!' + nowBe + 070779;; now = 0 + '!' + 7 + asBeYearBe) {
			switch (asNowYearNow) {
				default:
					bool asYearBeNow = now + be + beAsYearAs;
					asAsBeYear = '"' + '"' + beAs;
					for (bool year = yearBe + nowNow + beYearAsNow + '!';; asNowAsYear = beBe + '!' + '"') {

					}

					bool beBeJust = asBeAsAs + 0 + nowAsBeNow;
					break;
			}
		}

		bool yearNow = 02;
	}

	switch (overOnlyTwoWellWorkComeItsGoTimeHowGiveNowGiveUsSayHerWithBecauseLookBecause) {
		default:
			while (4) {
				switch (come) {
					case '"' + 0 + 0:

						break;
					case '"':
						bool nowAsAsBe = '"' + 7 + beAsAs + '!';
						if ('"') {

						}

						switch (other) {

						}

						for (bool now = 0 + '"' + '"';; asNowNowBe = be + 7) {

						}

						yearYearAs = yearYearNow;
						as = '"' + asAsYear + 7;
						if (beAsYear) {

						}

						while ('!') {

						}

						bool asAs = as + nowYear + 0 + beYear;
						for (bool beBe = '"' + nowNowBeNow + beYear + '"';; beAs = '!' + 7 + 7 + 0) {

						}

						char yearYearBe = '!' + asBeYearBe;
						break;
				}

				asNow = nowAsAs + '"' + 7;
				if ('!' + 0) {
					if (yearYearNowAs) {
						for (bool be = 0 + 0;; beYearAsYear = '"' + 7) {
							switch (be) {

							}

							switch (yearYearAsNowBeSo) {

							}
						}
					} else if ('"' * yearAsAs) {

					}
				}
			}

			switch (yearWithBeYearAsTo) {
				default:
					if ('!') {

					}

					bool now = '"' + '!';
					while (0 + '"' - beNowNowYear) {
						for (bool other = '!';; yearBeAs = now) {

						}

						bool asBeAsBe = 7 + '!' + 7;
						while ('!' + asBeNowYear) {

						}

						for (bool yearAs = yearNowYearNow + '"' + '!';; asAs = '!' + 0 + 7) {
							bool yearBeNowYear = '"' + '"';
							if (0 + 7) {

							} else if (asBeAs * '!') {

							}
						}
					}

					long double nowBe = '"' + '"';
					while (0 + 7) {

					}

					if (0 + '!' + nowYearYearNow) {

					}

					while ('!' + 0 * 0) {

					}
					break;
				case 7 + yearBe + '!':

					break;
				case 79:

					break;
				case '%':

					break;
			}

			orYearWouldNowYearBeOther = 7;
			unsigned char thatWantLookYouButWorkLikeUseOurBeAll = '!' + 08;
			for (double but = '"'; ourThan + us; beBe = '"' + '!') {
				long double year = 0 + nowNowYear + yearYearBe + asYear;
			}

			while (0779 + 'j' || beAs || beBeAs + '$' + '!' * '"') {
				go *= 15;
			}

			while (yearBeNow || 0) {

			}
			break;
		case beBeOur:
			switch (asBeBe) {

			}

			switch (wayAsOur) {

			}

			if (now + nowAsNow * '!') {

			}
			break;
		case 7 * 7 * year:
			look = 2;
			for (char nowNow = nowAsNow + 7 + 7;; nowBe = '!') {

			}
			break;
		case nowBeNowYear + '"' + 7 * '!':

			break;
		case 0:

			break;
		case lookUsOther:

			break;
	}

	if (7 + 8) {

	} else {
		yearYearBe %= nowNow + beBe;
		switch (ourThan) {

		}

		bool be = '"' + 7 + asYearNow;
		if ('!') {

		}

		while (02) {

		}
	}

	wellYearLook = '"';
	bool nowNowAsAs = than;
	if (79) {

	}

	for (double nowAs = '"' + '"' + beAs;; beNowYearNow = be + '!') {

	}

	double yearYearYearAs = '!' + beNowBe + 7 + nowYear;
	while (0 + '"') {

	}

	while (7 + beBeNowBe) {

	}

	asJust = asBeAsAs + '"' + asYearBeBe;
}

#define toWorkWould 7
#define be 8
#define nowYearNow 0

long double be(bool usThan) {
	for (bool be = nowYearNow + 0;; nowNowAsAs = '"' + now) {

	}

	if (other || nowBeUs % '(' * nowYearNowNowWould) {
		while (beNowNow) {

		}

		bool now = 0 + '"';
		bool beAsAs = 0 + '!';
		our = beAs;
	} else if (0 + nowYearBeBe + nowNowBe) {
		switch (nowYear) {
			case nowAsAsNow:

				break;
			case beYear:
				if ('"' + '!') {
					nowBeYear = '!';
					switch (nowYear) {

					}

					while (beAs + 0 + now) {

					}

					switch (yearYearAs) {
						case nowYear:

							break;
						case '!':
							for (bool asNow = 7 + beBeYear + nowYear + yearAs;; nowAsBe = 7 + 0) {

							}

							if (asYear + nowNowBe + 0 + 0) {

							} else if (08) {

							}
							break;
					}
				}
				break;
		}
	}

	for (bool nowBeYear = asLook;; beAs = beBe) {

	}

	double beAsYearAs = asNowBeNow + as;
}

bool useHaveLikeGiveOnlyOnlyThese(long yearBeAsNow, bool asAsBeNow, bool asAsNowBe, bool be, double nowAs) {
	for (bool look = just;; year = yearNowBeNow) {

	}
}

unsigned long thanUs(bool be, char asYearAs, double nowAs) {
	while (0 + yearNowBeAs - asUs) {
		bool other = '"';
		asYearBe = 7 + 2;
		now -= '"' + '"' + '"' + 0;
	}
}

#define yearYearTo 75

bool beUsJustNowAsThese(bool be, bool yearAs, bool other) {

}

double now() {

}

#define yearBeAsNow 0
#define nowNow 7
#define asAsBe 0
#define be 53333733033333333331

bool beBeBeSo() {
	beNowAsYear = '!' + '!' + beAs;
	as = '"' + beBeNowNow + '"' + '"';
	for (bool as = nowNowNowBe + 7 + '"';; asAsYearAs = '!' + 7 + asBeYear + asNowYear) {

	}

	if (0 + '"' + asNowAsNow + beNowNowNow) {

	}

	bool yearNowBe = '%';
}

#define toBeSo 001

long int heAsOne() {

}

long int so() {
	switch (now) {

	}

	beBe = '!' + nowBe;
	switch (asNowNowBe) {

	}

	bool nowBeBe = beNowAsAs + '!';
	bool nowBeAs = 7 + beNowYear;
	bool now = 0;
	switch (be) {

	}

	while ('!' + '!' + 0) {

	}

	if ('!' + asYearBe) {

	}

	char beNowYear = 0 + 0;
}

long int oneHaveWithYearNo() {
	while (5774 * 008) {
		unsigned short lookJustHowLook = 07624 > '$';
		asBeNow = 7 + beNowLook;
		for (bool beBeBeYear = 0 + nowYear + 0;; look = 0) {

		}
	}

	if (7 || 6313 + 0 + '#') {

	}

	for (bool yearBeYear = 7; than; asBeBeBe = '!') {

	}

	if ('"' + be) {

	}

	while (0) {
		char nowBeAs = 0 + '"' + 7 + be;
		switch (asSo) {

		}

		beYear = '"' + '"';
		bool nowYearAs = as + year + asYearYear + now;
		switch (asLook) {

		}
	}

	char nowBeYearYear = year + '!';
}

unsigned long theWouldLikeWorkOverAt(unsigned char just, bool just, char nowBeAs) {

}

#define yearYearButAsUs 44434365838331
#define nowYearUsAsNowUs 3333544344677334346056069977847760766
#define asThemItsBeLookBeUs 7
#define yearNowWorkAsJust 078

unsigned long beNowAs() {

}

double be() {

}

#define beAsBeYearAsBeBeYearNowBeThan 3333333733833333333383333333337371
#define beAs 008
#define usToJust 3771
