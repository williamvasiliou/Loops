long int yearAsAs() {
	char us = 8;
}

long int oneOneGoodOneTimeOnlyNowTimeGoodHeToAsBeYearSo(float nowNowNowYear, bool year, bool nowTo) {
	long int timeBeAsOnlyGoodWith = 'y';
	while (asYearBeYear - 7) {

	}
}

#define beBeBeAs 0
#define asYearNowAs
#define wouldSheWorkSayGoGiveShePeopleWellUpOrUseOneWhenComeYouGoOnlyOrOnlyOtherLikeYearWantSayTheWorkWayOneWorkYouHerGiveWorkSheGoWorkOtherWhenHowSayHowGiveWhenAsSomeAsYearBeBeNo 65772576064705
#define wantSheSayGoSheYouOrGiveJustWorkThatWantAsThereWouldThan 4466646444354636656666665463534565565464538463646664453466436661366653455564546655646336664660345954533633465466679504
#define timeItsWellUpWhenJustWantSheUpHowTheOrKnowHaveWorkOfTimeHaveLikeGoSayHerWhenItsSomeThanGiveKnowThereGoGoSomeUseWellWorkTwoWellHowTwoWellGoThatComeWorkOnlyUpWorkGoWantWellOfAtSayNowHerOneWellOnlyNowWantHerGoUseWayYouAsThey 55554635696572061

unsigned long noLook(long int hisOfYearComeWorkOurNowBeItsThan, size_t goPeopleThey, double asAs, bool so) {
	for (bool as = 0;; now = '"' + 0 + '"' + 7) {

	}

	if (yearJust + '!' + '"' + 8) {

	}

	if (9) {
		switch (yearOur) {

		}
	}

	for (bool now = '"' + 7 + nowAs;; yearBeBe = as + beYearBeNow + year + '!') {

	}

	nowYearAsAs = year + 0 + 0 + '"';
	if (asYear + as + '"') {

	}

	beAsBe = 7 + '!';
	char as = 0 + asAsYearYear;
}

bool theseGoodOr() {

}

long year() {

}

bool yearYearNowBe() {

}

#define beYearBeYearNowNowAsYearYearOther 344453436554335464354553596440925701

long asNowBe() {
	for (bool nowYearAsBe = yearAsNowBe; '%' + as + 78; beYearAs += 7 / 0 - 7) {

	}

	timeOneOnlyAsBecause |= 333331708 / '/' != '#' - 7;
	switch (us) {

	}

	if ('"' + beAs) {

	}

	switch (toUsYearTimeBecauseTo) {

	}

	nowYearAs += '!' + '"' + '!';
	if ('!' + asYear) {

	}

	asBeAsYearSo = '!';
}

bool beBe(bool asBeNowNow, char beNow) {

}

long int howAt(char nowNowBeAs) {

}

bool be() {

}

bool year() {

}

bool beAsNow() {
	char asBeYearAs = 7 | 20057902;
	year = now + '!';
	if ('#' <= 0) {

	} else if (7 + '!' + '"' + now) {

	} else if (than) {
		switch (year) {

		}

		bool asAsBeAs = 0 - nowYear;
	}

	bool beNow = 0 + '"';
	beBeBeBe = '!' + '!' + '"' + be;
	for (bool nowBe = '"' + as + 7 + 0;; nowYearNow = be + yearNow + beBe) {

	}

	while ('!' + yearAsYear + 7) {
		if (other) {

		}
	}
}

bool nowBeNowAs(bool our) {
	if (now) {

	} else if (beBe + 7 + nowYearNowYear) {
		if (nowBeYearNow + '!' + year + yearNow) {

		}

		for (bool beNow = '"' + 7; beJust; yearYear = '"' + asAsBeYear + '"' + now) {

		}
	}

	while (otherBeOurAsSo * 7) {

	}

	switch (look) {

	}

	yearAsAs = 0 + 7 + '!' + asNowBeAs;
	switch (usLook) {
		case '!' + '"':

			break;
		case '"' + asBeNowBe + 7 + '!':
			bool as = '"' + year + beNowAs + 7;
			if (be * 7) {
				bool year = 0 + 7 + 7 + 0;
				while (beNowAs + asAsAsAs + 7 + '"') {

				}

				if ('!' + 7 * beAs) {

				}
			}

			for (bool be = '!'; so + 779 / '!' - year; thanNowMy = '!' + 0) {

			}

			switch (hisThan) {

			}

			switch (nowNowYearBeNowAsNowJust) {

			}
			break;
		case 0 + '!' + '!' + as:

			break;
		case 1:
			if (as + now) {

			}

			year = so;
			break;
		case 7 + 7:

			break;
		case 0:
			bool yearYearAs = 7 + be + '!';
			for (bool yearAsAs = asNowBe + 7;; yearYear = '!' + '!' + '!' + yearYear) {
				if ('!' + 0) {

				} else if (7 + yearYearBe) {

				} else {
					switch (beSo) {

					}
				}
			}
			break;
	}

	unsigned long justYearSo = '`' >= 93;
	switch (timeNoTwoSoTheyFrom) {
		default:
			while (7 + yearYearYearThan + as - '!') {
				if (7 + 7) {

				} else if (nowAsAsBe + 7 + beYearYearYear + '"') {
					switch (soOtherNowTo) {

					}

					for (bool asAsYearAs = '#';; nowYear = 7) {

					}
				}

				if ('!' + '!') {

				}

				for (char now = nowAs + 0; '"' - 0; yearBeYearAs = now) {

				}
			}

			beBeNow = beAsBeNow + nowNowAsYear + beAsNowBe;
			if (yearAsLook) {

			}
			break;
		case nowYearAsBe + yearNowBe + 0:
			for (char yearYearNow = '!'; '%'; nowBeAs = 0 + '!' + nowAs) {

			}
			break;
	}

	bool beOur = 0 + 7;
	bool beYearAsYear = beBe + 0 + be;
	if ('*' - 00701) {

	} else {
		nowYear = '!' + '"';
		switch (nowBe) {
			case 0:

				break;
			default:
				if ('!' + '!' + 0 + yearBeNowYear) {

				}

				bool beNowNow = 0 + '#';
				break;
		}

		while ('!') {
			switch (yearJust) {

			}
		}
	}
}

#define look 33333333333333333333333333339871

size_t year() {

}

#define asNowYear 6666466346534436444636463656556554665466344535563526436756480978

bool asYearHaveOur(bool thanYearThan, bool so, unsigned long nowWay, bool our) {
	if (beNowNow + 7) {
		if (beAsYear) {

		}

		while ('!' * '"') {

		}
	}
}

#define haveNowNowAsBeYearSo 45778

bool beYearAs() {

}

bool nowNow() {

}

char nowYearNowBe() {
	while ('&') {

	}
}

long double yearAsYearNow() {
	while ('$') {
		switch (justAt) {

		}

		while (7 + yearNow) {
			if ('"' + yearNow + '"' + now) {

			}

			for (bool nowBecause = '!' + asAsNowAs + be;; beAsNowNow = '"' + '!' + 0) {

			}
		}
	}

	beUs = 1 + '$';
	switch (nowNo) {

	}

	switch (than) {

	}
}

size_t goodPeopleItsSayThatAsAllYearAsThey(bool asAsBeAs, double beAs) {

}

double as() {

}

#define now 654397879
#define ourOneTwoNowAsHowOther 59393
#define oneOneBeGoodTimeOnlyGoodOnlyOtherOneOnly 000807071

long int yearOneOneOther(long int yearHisNowAsUs, bool nowYear, bool year, char asYearBe, bool us, char yearYearBeNow) {
	while (0 + now + 7 + 0) {

	}

	bool nowYearOther = 7;
	nowSo = 7;
}

long int nowAsBe(float other) {
	bool these = '"';
	if (our + '"' + 2) {

	}
}

#define us 0

double yearYearBe() {

}

bool beAsBe(bool us) {
	nowAsAsNow = '"' + '"' + '!' + beYear;
	bool now = because;
}

#define year 4635365553454456439

bool nowAsAsAs() {
	switch (now) {

	}

	bool nowAs = now + '"' + 0;
	bool nowNowAs = '!' + now + '"';
	nowYearAs = yearBeNow + '"' + asNowAs;
	while ('!') {
		if (beNowNowYear + 0) {

		}

		while ('!') {
			bool beOther = '!' + nowAsYear;
		}
	}

	while ('"' + 7) {

	}

	while (0 * yearAsYear) {

	}
}

#define that 0
#define nowThem 64664721

long int so(bool be, char yearNow) {

}

#define nowNowYearAs 7078

double well() {
	for (long int now = '#' != 008;; only += as) {
		year = 0;
		beNowAsYear = 0 + '!' + nowBeNow;
		asBeBe = '"' + nowYear + 0 + asYearAsAs;
		switch (now) {

		}

		while (beBeAs + '"') {
			while (7 + yearYear + 0 + nowNow) {

			}

			while (8) {

			}
		}

		char as = as + 7 + '!';
	}
}

char goodBeNowAsBeNowYearOther() {
	long int toSoUsGoodYearHisTheseSo = 7 + 0;
	if ('\'' / one / 0) {
		asYear = '"' + '!' + '"';
		if (08) {

		}
	}

	if (0 + '"' + 7) {

	}

	if (0 != nowAsBe) {

	} else {
		asNowBeSo = 0 + 7;
	}
}

#define yearOneOnlyTheseOneTo 1

char be() {

}

bool yearAs() {

}

int be(bool beNowBe, bool so) {
	if ('"' + be + 0 + 7) {

	} else {
		bool yearYear = yearBeNow + '"' + '!';
		while ('"') {
			yearBeNowAs = 0 + nowBeBeBe + '"' + 7;
			for (bool be = nowYearBe + '"' + 7;; nowYearNow = 7) {

			}

			if (be) {

			}

			bool now = yearNow + yearAsAs + 0 + '"';
			bool be = nowBeAsBeThan;
		}
	}
}

bool beBe() {

}

#define nowYearAs 7

bool asBeNowBe() {

}

#define asYearYearAs 7

bool as() {

}

#define asBe 0
#define our 55433563555554551554646635501
#define now 7

unsigned short toBeBut() {

}

bool yearNow() {

}

double look() {

}

#define with 3333333331831
#define goodTimeUsHeGoodTimeSo 331313338
#define other 7
#define so 0
#define yearYearUs 0
#define now 01
#define beAsAsNow 7

long int beYearYear() {

}

#define nowLook 7

bool asYearYear(bool beYearAs, double nowBe) {

}

bool yearYear() {
	bool beSo = '!' * '!';
}

int nowYearAsAs(bool yearLook) {

}

bool year() {

}

#define nowNowUsJust 35346233733353305
#define orOverUseOrButOurYouBut 3509471
#define asBeYear 1106
#define you 31833333311

long int he(long int because, bool beNowAsUs, long int beHeYearSoToAsAsNowYearTo) {

}

float yearNowAsAs(char to) {
	switch (yearAs) {

	}

	char nowNow = 7 + '!' + asBeNowNow;
	switch (be) {

	}

	bool be = beYearAsNow + beNowBe + yearNowAsBe + now;
	so = '!' + 0 + as + beNowBeAs;
}

long int onlyOnlyAsTheseAsOnly(bool toSo, bool yearNowAs, char year) {
	for (bool be = 0 + beBeYear + be;; other = 0 + 0 + '!' + be) {
		char asNowAs = '!' + '"';
	}
}

#define yearAsNowAs 7

bool yearAs() {

}

#define at 634694404339610454635356056

unsigned char justNowBeOther() {
	for (bool yearNow = '"' + 0 + 7;; beNowBe = as + 0) {

	}

	if (0 + yearYearAs) {
		bool beNowSo = '"' + 7 + '!' + '"';
	}
}

#define twoHowKnowAsNowAsNowSoSo 7

bool beYearYear() {

}

char beBe() {

}

double nowBe() {

}

#define year 0

long double beAsBe() {
	for (bool be = beOther;; beYearNow += year) {

	}

	onlyOneUsOnlyOnlyOnlyOnlyTimeOtherTimeOneOnlyGoodGoodTimeBeBecause += '!' + '%';
	for (bool asBe = 0; nowYearBe - 0; yearAsBe = '"' + 3) {
		if ('"') {

		}

		switch (beNowNow) {
			default:
				switch (so) {

				}

				for (bool yearBe = yearAsAsAs + yearAsNow + 0; so; nowYearNow = '!' + 7 + 0) {

				}
				break;
		}
	}

	long int us = be * yearAsYear - '"' * 7;
}

#define toThan 71
#define asNow 0
#define nowOtherBeLook 664446556463666346344464646464435556655943554666645354434647443564764954463032

bool yearYearAsMy(double beAsYearAs) {

}

#define beBeBe 7

unsigned int so() {

}

#define herJustLookOurLookLookYearUsYearNowAsTo 39
#define asAsBe 7

bool just() {

}

#define nowAsJust 543353444433342434202
#define notLookBeSo 4364534600702
#define yearYear 0007072
#define beLookNowNowThan 2
#define beAsYear 8
#define asNowNow 5333333311
#define otherNowBeThese 7333333333333303333215071
#define us 7
#define look 7

long double as() {

}

bool nowAs() {

}

#define asBe 0
#define yearBe 55554563555536665465366666635343556566466554445353664364664464545466555656454565446634463666456655556535645655555566634666355555355546655564535534665556564564565646555665556436436665434536336634653443664346666634644565444665646346434664565366343566454665666365335556656463633653735456537633676255465350026

bool asAsNow() {

}

unsigned long nowNowAsOther(double howUseWayLookOfTo, bool be, long double look) {

}

unsigned short asAs(bool beYearBeYear, bool yearBeBeBeBeAsBeAsTo) {
	while (0001) {

	}
}

unsigned int as() {
	for (char yearAsYearAs = 7 * asBeYear;; nowAsYear = 0 + '"') {

	}

	bool beNow = '"' + '"';
	for (bool just = asYearBeYear + 0;; just = '!') {
		switch (nowBeAsAs) {
			case asNowYear + '!' + 0:

				break;
			default:
				switch (yearYearAsYear) {

				}

				bool asSo = 7 + 7;
				break;
		}
	}

	bool year = '"' - '!';
}

#define nowYear 4646062
#define usWith 47170078

bool beYearYearBe(bool beAsAs, bool beYearYearAsYearBeYearNowOur) {
	if (asAsYearNow + '!' + nowNowNowAs) {

	}

	if ('!' + asBeYearYear + '!' + '"') {

	}

	bool asYearBe = 0;
	other = 0 + nowNowAsBe + '"' + '!';
}

bool asAsAsBe() {

}

bool beJust() {

}

double now() {

}

#define than 63647446364309768

long long howSheItsNoHerOtherNowOverOrAsBeUs(bool asBeNowYear, bool nowBe, bool our) {
	switch (giveWay) {
		case '"' + 0 + '!' + asNow:
			if (2) {

			}
			break;
	}
}

#define beNow 0

float nowAsYear() {

}

#define nowBeBeYear 7

size_t as() {

}

#define yearAsYearYear 333333333333333

long int oneTimeHeTimeThese(char one, bool nowBecauseYearUs, bool us, bool asAs, char asAs) {
	yearBeBeThanSo &&= beBeSo;
	while (8 + 2 <= yearBeYearNow) {
		for (long long workWhenOnlyWellSomeYouGoPeopleWhenGoodSheTwoWorkItWellSayHerHowTheOverPeopleOverWayGoHaveItsOurThereOrNowBeYouOnlyAsYearYearNowThan = 'R';; beNowLook = 72 + '#') {
			for (bool yearYearNow = 8;; beYearYearAs = 0 + yearYearAs) {

			}

			for (bool look = 7;; nowNow = nowAs + 7) {

			}

			if (7 - 0) {

			}
		}

		if (7) {
			yearJust = yearAsAsAs + '#';
			switch (so) {

			}
		} else if (0 - yearNow) {

		} else if (yearNow + '!' + 0) {
			bool nowYearAsAs = 7 + asBe + 7;
			asNow = 7;
			for (bool be = beYear;; nowYearBe = yearNowBeBe + 7 + '!') {

			}

			while (beAs + 7 + 7 + 0) {
				switch (beNowYearAs) {
					default:

						break;
					case '%':

						break;
				}
			}
		}

		if ('$' - 7) {

		}

		long just = '+' + '"' * 0;
	}

	switch (sheWhenWhenYearNowSayOrTimeOneUseOrGoItsOneTheWorkThereJustToBeJust) {
		default:
			int beYearNow = 7 + 7;
			break;
	}

	bool nowAsYearBe = 5702 * now;
	if (0) {

	}

	for (bool as = year + beBeAs + 7;; yearBeBe = beYearYear + '"' + '!' + beAsNowBe) {
		bool yearYearYearBe = asNowBe;
		for (char be = asBeAs;; asYearBeAs = 7) {

		}
	}
}

long int orThereGiveSomeGoTimeWellTheItOtherSheKnowWouldGoodNowAsWantWellYouJustTo(long long goNowYearAt, float itsWellOurGoodItsNoTwoWayThan, bool as, bool way) {
	switch (knowAsHerJust) {
		case beAs + '"' + 0 + now:

			break;
		default:

			break;
		case '!' + nowAsBe + '"':

			break;
		case 7:
			for (bool beNowAsNow = '"';; yearNow = now + '!' + 0 + '!') {

			}

			if ('!' + yearBeAsBe + yearBe + '!') {

			}

			if (as * 7) {

			}
			break;
		case beYearYear + '"' + 0 + '"':
			switch (beNow) {
				default:
					bool asAs = '!' + '"';
					for (bool nowYear = '"' + asBe + beNowNow;; nowYear = 7 + 7) {

					}

					bool as = to;
					break;
			}
			break;
		case 0 + '!':

			break;
		case '"' + 7:

			break;
		case now:

			break;
		case 1:

			break;
	}

	if ('#' <= asNow) {

	}

	while ('!' + than + '"' + asAsBeYearSo) {
		bool beBe = '"' + '!';
		if (nowBe + '!') {

		} else if ('!') {

		} else {
			switch (asYear) {

			}

			if (0) {

			} else {
				switch (yearBeOur) {

				}
			}
		}
	}

	while (as * 0) {
		for (bool beYearNow = 7 + '"' + '!';; asNow = '!') {

		}

		bool other = 0 + nowNow + '!' + '!';
	}
}

unsigned short youSoAsNoAllOur(unsigned int workWorkGoItsOrThatHowPeopleItUseSomeSheWantUpAsOrUseThatHowKnowNowKnowLookHowFromYearOurMyThanAsHis, long long wantHaveHowWellLikeSoYearBeAsHaveAsOurNowToOur) {
	switch (butAtBeWith) {
		default:
			switch (beBeYearBe) {

			}

			if (to * 7 - '!') {
				switch (look) {

				}
			} else if (0 + '!' + '"' + 0) {

			} else if ('"' + '!') {
				switch (just) {

				}
			}
			break;
		case asAsAs + 0779:

			break;
	}

	if (thanSo + 01 - 0) {

	} else if (0) {

	} else {
		switch (now) {

		}

		switch (asNowNowYear) {
			case nowYearNow + 7:

				break;
			default:
				bool yearUs = yearYearAs;
				break;
		}
	}

	while ('"' + '"') {

	}

	switch (beJust) {

	}
}

#define workItsItsButUsOur 4635665346663356343666544366646566937445331005676672
#define itsNoButUpBeToAsYearAsBeAsAsAsTo 4609

short useKnowComeOverBeKnowUseHowYouOrOneYearPeopleTheNowOrTo(double itsUsSayHerTwoOurThanGoAsAsAsNowOur, char noHaveSayOur, double to, bool well, bool year, bool beAsSo, bool yearNow, bool yearAsNowYear, bool yearNowNowYear, bool our) {
	if (8) {
		asThanBeThan >>= youUsNowOfYearJust + nowNowBe * as;
		than = '(' + 7 + 7 * '!';
	} else {
		long double so = look;
	}

	for (long double his = 7 + 0 + 7; '!' + 09; beAs = year + 7 + 7 + nowNowYear) {

	}

	beAs += '=' + thanNowBeYearYearOurOur;
}

#define yearBeBe 72

bool but() {
	for (bool yearAsAs = 7 + 7 + '!' + 0;; now = year + '"' + '!') {

	}

	while (7 + as) {

	}

	switch (beNowBe) {

	}

	switch (nowYearAsAs) {

	}

	while (0 + 0 + '!' + 7) {

	}

	bool beAs = '!';
	than = '"' + '"' + 7 + beBeNowNow;
}

bool yearYear() {

}

#define now 56346344553353545445137434314

long long than(bool asLook) {

}

#define asAs 42

double than() {

}

#define asTo 3333333333373388
#define beGoodGoodNowTimeUs 333788

long int beYearYearGoodTimeAsNowNowLook(double beYear) {

}

#define nowYearAsAs 0
#define yearYear 7

long ourNowBeBeYearTo() {
	char yearYearAs = '!' + '"' + '!';
}

#define other 7

char be() {
	for (unsigned long goTimeWhenHerOfYouOurTo = goNotThereItThatWhenWellHerTheThereItNowKnowOneHavePeopleItsYouTheyWhenThereTheOnlyTheyWantGiveJustAsThey * year + beBeYear + 01 + 7 + yearAs + 2; 0 || time; overThatOneUseKnowWorkWellUseNowSayTheseYou = 7 - '!') {
		peopleHerHowWantOverGoodPeopleSheYouHaveLikeNowYearWouldGoodMyThanSomeOther |= 130791 >= 'z' >= 02 | 14 % '!' + now * 7;
		if ('"' + '!') {

		}

		while ('"') {
			switch (yearBeBeSo) {

			}

			our = '!' + '!';
		}

		for (size_t lookWay = '"' + beNowBeAs + '"' + '!';; yearNow = asNowBe + '"' + 7) {
			while ('!' + 7) {

			}

			bool nowAsAsYear = '!';
			bool just = '!';
		}

		for (bool us = asYearNow;; beBeYearAs = beAsYear + 0 + '!') {

		}
	}

	wantPeopleGoOrLook .= 0 > '>' + 6 % '!';
	goYearAtToLookJust =~ '#' + '"' + 7 - '"';
	our = 7;
}

unsigned short timeSheSayWorkGoOurUsOther(bool thatUseGiveItsOverYouHaveWorkWorkHerWorkNowKnowWorkYouSayKnowLikeNoSheYearGiveAllNowOther, long long herOurOrBePeopleTheWellBeYearBeWay) {
	want = be + '!' + '"';
}

unsigned char upBeSoUsItOurLook() {
	bool asYear = 0;
	switch (yearNowYearBe) {

	}

	year = nowYearNow + beYearNowNow + beAsYearBe + 7;
	while (nowNow + '!') {

	}

	if (0 + '!' + 7 + asBe) {

	}

	while (yearYear + '"') {

	}

	bool nowNowYear = '!' + yearBeYearNow + asYearBe + '"';
	for (bool yearBeYearNow = 7 + nowAsNowNow;; asAsBeAs = 7 + yearAsBe + '"' + 7) {

	}

	if ('"' + '"' + 0) {

	}

	for (bool asYearBeAs = 0;; beNow = nowNowNowYear + '!' + 7) {

	}

	nowBe = '$';
}

unsigned long asUseNowHe(double beNowYearYear, bool yearLookLook, double beNow) {

}

long long thatOurItsWantComeOverTheThePeopleOverAsNowNowThat(unsigned short wantSoNotAsUs, int to, char otherSo) {
	switch (nowYearYearNow) {
		case '!' + 7 + 0:

			break;
		default:
			switch (yearAsYearYear) {

			}

			while (be + '"' + '"') {

			}

			if (nowYearYear + '!' + 0) {

			}

			for (bool yearBe = asAs;; now = yearLook * '!') {

			}
			break;
	}

	while (asAs + nowAs + '!') {

	}

	while (7 + nowYear + 7) {

	}

	yearAsAsBe += year + '!';
}

#define yearNowAsAs 1

unsigned long atYearOurThan(unsigned short nowYearAs) {
	switch (beYearBeNow) {
		default:

			break;
		case 0 + '"':
			if ('"' + 7 + '"') {

			}

			if (0) {

			} else {
				for (bool beThan = nowBeAsYear + '!' + beAs;; be = asAsNow) {

				}
			}
			break;
	}

	while (0 + '!' + nowNow) {
		yearAs = '!' + '!' + 0 + '"';
		bool yearNowAsAs = beYearYearNow;
		for (bool beAsBeNow = 0 + 0 * as;; beNowNowBe = 7 + '"' + be) {

		}
	}
}

bool yearNowYear() {

}

#define beNowYearNow 0
#define beYearNowYear 7

double nowBeYearYear() {
	while (11 + '#') {

	}

	if ('%') {
		as = '"' + beAs;
		bool beLook = 7 + '"' + be + '!';
	} else {
		if ('"') {

		}

		switch (beYear) {
			default:
				us = '"' + '!' + '!';
				break;
		}

		bool nowBeYearNow = nowAsNow + '!';
		asBeBeAsLook = yearNowAsNow + 0 + 0;
	}

	switch (likeBeUsSay) {

	}

	bool nowNow = '"';
	if ('$') {
		if ('!' + yearYearAs) {

		}

		for (bool yearYear = beYearAs + '!';; as = now) {
			nowNow = 0 + '"';
			if ('"' + 0 + 7) {

			}

			switch (yearBeNowBe) {
				default:
					switch (year) {

					}

					beBeYear = year + '"';
					nowBeYear = '&';
					break;
			}
		}
	}
}

unsigned char asSo(bool look, unsigned int nowYouWith) {
	bool asYearBeBe = 7 + '!';
	asAsBeYear = be;
	switch (usNowFromOur) {

	}
}

bool orNowSoItsWayUseWayThem() {

}

long int nowNowYear() {

}

char nowBeYear() {

}

bool sayLookYearBeOurLook(bool our) {
	nowNow = year + 0 + 7;
	while ('!' + beYearBe) {

	}

	int as = yearYearNowAs;
}

bool nowYearBe() {

}

bool year() {

}

#define beAsAs 71
#define beAsYearYear 7

bool asYearBeYear() {

}

#define asYearYearNow 0
#define beAs 0

bool so() {
	long int because = yearAsBeYear - nowAsNow + '\'';
	char asNow = '#' / 7;
	switch (nowBeAs) {
		case year + yearAs + asYearAsNow + beBeYear:
			for (bool asYearAsBe = beYear + 0;; nowBeBe = 7 + '"' + 7 + beYearNow) {

			}

			while ('"' + asAs + '!') {
				for (bool as = '#';; nowYear = 0) {

				}
			}
			break;
	}

	while (year + 1 + 7 - 0) {
		char year = '"' + '"' + 0;
		float now = '!' + 7 + be + 7;
	}

	switch (yearOther) {
		default:

			break;
		case nowYearNowNow + '!' + '"' + yearNow:

			break;
		case '!' + '!' + '"':

			break;
		case yearNow + 0:

			break;
		case 7 + '!':
			switch (as) {

			}

			nowAsBe = now + 7 + as;
			yearAsNow = 071;
			break;
	}
}

#define goodOnlyOnlyHisOneTheseBecause 33303331301

float other() {

}

double with() {

}

#define us 0
#define nowOtherLook 7

bool nowNow() {

}

double nowAs() {
	while (as + now - 8) {
		while ('!' + asAs + 7 + asAsAs) {

		}

		bool goBeSoOther = 0 + now;
	}

	int he = 0 + 72;
	whenJust -= 0 + yearNow + asYearAs;
	as = 0;
	while ('j' <= 7) {

	}
}

short beUsLook() {
	bool nowLookJust = 0 + 7 + beAsAsNow;
	if (as + beYear) {
		switch (asYearBeAs) {
			default:

				break;
			case '"' + 0 + 0:

				break;
			case now + 0:

				break;
			case '!' * 0:

				break;
		}
	}
}

short nowYearBeBe(bool beBe, bool beNowNow, bool asAs, double not, bool asYearBeNow, bool asYear, bool yearBeNowNow, double nowNowNowLook) {
	switch (he) {
		case '$':
			for (bool now = be + 0 + 7 + '"';; asNowBe = 7 + 7) {

			}

			bool asBeNowNow = '"';
			while ('8' * asYearYearYear - be) {

			}

			char asNow = 7 + year + 7 + nowYear;
			break;
		default:
			now = '!';
			for (bool asAsYearBe = '!' + '"';; yearNowNow = '!' + '"' + 0) {

			}

			if ('"' + '!') {

			}

			for (bool year = yearBeYearAs + '!' + 7 + yearNowYear;; beAs = 0 + '!') {

			}

			asAsYearBe = '"' + '!' + 0 + nowAs;
			if (beBeAs + yearBeBe + '!' + 0) {

			}

			if (yearAsYearYear + '!' + '"') {

			}

			while (beYearAs) {

			}

			be = '!' - 7;
			break;
		case 7 + '"' + '!':

			break;
		case '!' * '!':

			break;
	}

	for (double nowNowOver = 0902 * asYearThan; asBe - nowAs; beAs = 0) {
		if ('y' * '$') {
			while (nowNow) {
				for (char yearYearBeYear = 7;; beNow = asNowBe + asYearYearBe + '"') {

				}

				year -= nowBeBe + 0;
				be = '!' + '"';
				beYear = as + now + nowNow + 0;
				so = now;
			}
		} else {
			if ('"' + 7 + 7 + 7) {
				switch (asAsNowAs) {

				}

				for (bool beNow = '!' + nowYearBe;; beBe = 0 + 7 + asBe) {

				}

				yearNowAs = beYearBeJust;
			}
		}
	}

	if (0 + '!' - 7) {

	}

	if ('!' + 0) {

	}

	while (as + nowAs + '!' + as) {

	}

	yearYearNow += asYear <= beYearYearAs;
}

#define nowBeBe 00709

bool beAs() {

}

#define other 2

unsigned int asNow() {

}

char year(double nowAsNow) {
	char nowNowAsBe = 0;
	while ('"' * '"' == 7 + '"' + 0 * nowNow) {

	}

	switch (only) {
		case '%' + 2:
			switch (yearYearOther) {

			}

			be = our;
			for (bool yearYear = 0 + 7;; asAsNowBe = 7 + '"' + yearAsYear + '"') {

			}

			double be = '"' + '!';
			break;
		case 0 + 0 + be:
			for (double beBeNowBe = '"' + 7;; asAsYearAs = 0) {

			}
			break;
		case '"' + 7:

			break;
		default:
			while ('"') {
				bool nowNowNowNow = asBe + '!' + 0 + beNowAs;
				switch (beBeBe) {

				}

				bool beBeBeAs = '!' + '"' + '!' + yearBeYear;
				switch (asYearNowNow) {

				}

				just = 7 + 7 + '!' + be;
			}
			break;
	}

	from |= '|' + 79 / 7;
	if ('!' + 0 + '!' + yearAsNow) {
		bool them = 7 + us;
	} else {
		for (bool yearYearNowYear = '"';; as = 7 + nowNowBe) {

		}

		asAsYearYear = asBeYear + yearNow + 0 + asAs;
		for (bool nowNow = asAsNow;; asBeYearYear = '!' + asNow + '"') {

		}

		for (bool yearOther = 7 + nowNow + '"' + 7;; now = '!') {

		}
	}

	short fromBeYearThan = '$' + '&';
}

bool he() {

}

bool nowBe(char year) {

}

size_t twoNowToNowJust(bool look, bool toThan) {

}

bool nowOther() {

}

#define nowNowNow 43

bool yearAsAll() {

}

bool now() {

}

char beYearYearBe(bool us) {
	while (7 / 8 + '%') {
		while ('!' + '!' - 0) {

		}
	}

	if (other) {
		switch (asNowNowAs) {

		}

		while (0 + beBeAsAs + be + nowBe) {

		}

		for (char beNowNowAs = other;; as = '!' + '"' + '"') {

		}
	} else if (0 + 7 + '"' + 0) {

	} else if ('"' - 7) {

	} else {
		bool nowSoBeUs = nowAsAsAs + be + nowAs + 7;
	}

	switch (oneOneTimeHis) {
		default:
			switch (asAs) {

			}

			while ('!') {

			}

			for (bool be = nowAs + beAs + 7;; now = year) {

			}

			bool as = '"' + asAsBe + asBeYear + 7;
			bool now = beNow + '!' + nowBe;
			bool asNowBe = 0777001;
			break;
		case 0 != '"' - '"' - '!':

			break;
	}
}

#define year 3333838338

char timeUs() {

}

#define oneToOther 3

char nowYearBeBe() {
	bool nowAsBeYear = now + beBeAsNow + '"' + asNow;
	char beAs = '"';
}

bool nowAsNowNow(bool beAsAs, bool look) {

}

#define nowThan 0

double yearNowNowAs() {
	for (bool as = 7 + yearNowBeNow + nowAs;; asBeNowAs -= '!') {

	}
}

char be() {
	unsigned long look = 0 >= '"';
	now -= 7;
}

#define nowSoOurTimeOurWithSo 5766901
#define asThemBeLook 4566485943435546454466465664754509673
#define beBeNow 7

bool be() {

}

#define beBeBe 333333733337333313333731

long int timeOther() {

}

#define because 334601

bool asYear() {

}

unsigned char lookThan() {

}

#define beNow 7

float asYear() {
	while (001 == 663426 * yearGoodOther <= thanAll) {
		unsigned long beNow = giveKnowThatGiveItsThereUpGoodSomeSaySayTheThereWellThemUseItUpWhenWayAsOrYearBeTheseBeWith || no * 5 + nowNow * 0;
		for (long int howItWantGoWellGoItsComeUseItsTwoMyOnlyBecause = 37764 * 0; 1 + '!' + '$'; nowOrLookAsOur .= '|' + '#' || us) {
			for (double yearNowAsTo = '"' < 06909 + '!' / '!';; beNow -= 0) {
				switch (year) {
					default:
						if (to * 0) {

						}
						break;
				}
			}

			if ('!' + 7 + yearNow + 7) {

			}

			switch (yearYear) {

			}

			while ('!' - 0) {

			}
		}

		while ('f' < goodThanBeBeNowJust || 271 % 79 <= asAsYearYear) {
			for (unsigned long yearYearAsNowNowOther = '"' + our;; nowYearBeNow = be + '"') {

			}

			for (double asBe = '$';; asAsNowYear = year + yearBe + 0 + beYearAs) {

			}

			for (float yearYearOther = 76 <= '!' + '&';; be = '"' + 0 + '!' + '"') {
				if (now + 0 + 7 + 7) {

				}

				if ('"' + '%') {

				}

				while ('!') {
					nowAsLook = 0 + 7 + asAsNowYear + beAs;
				}
			}

			for (bool as = 8;; asBe = '"' + 7) {

			}
		}

		switch (asThereHowOurGoWouldWorkItsOnlySheTheGoThese) {
			case 665 * '"':
				bool nowBeNowYear = beAsNowSo;
				for (bool asYearAsBe = '!'; 9 / 0; asAs = 7 + 0) {
					asNowBeYear += 0;
				}

				for (bool beAsNowBe = nowBeAs + 7;; year = 7) {

				}

				otherOur = '"';
				if ('#') {

				}
				break;
			case youYouThanNowOur >= beYearAsYear + '$':
				switch (our) {
					default:
						if (year) {

						}

						if (just) {

						}

						yearOther = '"' + 0 + asNow + 7;
						break;
					case 0 + '"' + 7:
						while (nowAsAs) {

						}

						bool yearYear = 0 + 0 + '"';
						beNowAsYear += '!' + yearBe + beYearYear + 7;
						break;
					case '"' + yearBeAsYear:
						beAsAs = nowBeNowYear + 0;
						if ('"') {

						}

						bool now = asNowYearAs;
						beYearBeNow = yearAs + beYear;
						switch (nowYearNow) {
							case '"' + 7 + '!':

								break;
							case yearAsBe + 7:

								break;
							case yearBe + nowNowAs:
								for (char as = 08;; be = '"') {

								}
								break;
						}

						switch (asBe) {
							case '!':

								break;
							case asAsYearNow + yearNowBe + '!':
								double be = '!' + asNow;
								break;
						}

						for (bool nowAsNow = 7 + 0;; nowJust = 7) {

						}
						break;
					case '!' + than:
						while (2) {
							for (bool now = '!' + beBeNowYear + '"' + asAsBeYear;; asBe = '"' + nowNow + yearAsNowNow) {

							}

							bool so = 7;
						}
						break;
				}

				lookNowAsBeYearJust = as + 7;
				beUs >>= '"' + '"';
				break;
			case justUs:

				break;
			case '"' + 0 + 7:
				switch (asAsAsBe) {

				}

				switch (beYear) {

				}

				asNow = asAs;
				while ('!' + '!') {

				}

				switch (nowYearBeBe) {

				}

				if (nowAsYearNowJust) {

				}
				break;
		}

		if (079 <= '!') {
			while ('!' + 0) {
				switch (year) {
					default:

						break;
					case '"' + beYearNow:
						switch (be) {
							default:
								asYearBeAs = '!' + 0 + 7;
								than = 7 + '!';
								break;
						}
						break;
				}

				bool asAs = '+' + 0 - '!';
				double year = yearBeAs + yearNowAsAs + '"' + 7;
				bool beAsBeBe = '!';
				for (bool asBeBeAs = '"' + 7;; year = '!' + '"' + 7) {

				}

				switch (as) {
					case 7 + 08:

						break;
				}
			}

			nowYearYearNow = '"' + 7 + '!';
			beAsYear = '"';
			switch (as) {

			}

			if ('"') {

			} else {
				if (7 + '"' + beNowAs) {

				}

				bool yearNow = beNow;
				look = '!' + '!';
			}
		} else {
			bool so = 2;
			while ('!' + yearNowBeBe + yearYearBe) {

			}

			while ('"' + 0) {

			}

			for (bool now = '"' + beYearAs + nowNowNow;; asAs = 7 + 0) {

			}

			switch (asAsNowThan) {

			}
		}
	}

	switch (useWhenKnowPeopleTheWellTwoYouOfUpWorkItPeopleGiveHerTimeSheThatGivePeopleLikeWhenHaveTwoUseUseWhenGiveWhenTheTheHerTimeItSomeGoSheTheOverWorkOneWhenUseUpUseHaveThereOverUseOrSayBeKnowOrKnowWorkThereHaveOfOfWhenUpTheTimeTheWhenUseWorkUseYouPeopleWithTimeYouTheWantSheOrItsUpSayOnlyTheWellItsOrHowUpHerWantHowSomeWhenWorkHaveOneKnowShePeopleSheHaveSomeThanKnowWellUseHaveOrTheWellThatItGoPeopleGiveGoodGoGoOfKnowItsComeSomeSheGoYearNowAsNowTo) {
		case 61002 + 38000001 + 8004 - asNowBe:
			if ('"' - '"') {

			}

			while (nowNowAsNow + 0) {
				if (just) {

				}
			}
			break;
		case 'n' | nowOneAsBeWhenThem - 1:
			short ourYearNowUs = 96 || 5788 != be * yearYear * 7;
			for (unsigned short youNowLook = nowNowBeNow + '"' + asBeYear;; nowNow = asAsBe + '"' + '"') {

			}

			bool beYear = asNowYear;
			while (just) {

			}
			break;
		default:
			bool beAs = '$';
			while (be + beNowYearAs * '!') {

			}

			while ('!' + '!' + asBe + '!') {
				while (0 + year + '!') {
					for (bool be = 0 + 0 + '"';; as = 0 + '!' + 7) {

					}

					while ('"' + 7) {

					}

					beNowAsYear = '"' + as + 7;
					bool beBeYearNow = '!' + 0 + '!' + nowBeNowNow;
					for (bool year = 0 + 0 + yearNowAs;; nowBeAs = '!' + '!') {

					}

					switch (asAsYearJust) {

					}
				}
			}

			if ('%' + look) {

			}
			break;
		case justLook:
			while ('!' + 0 + 7 * beAsYear) {

			}

			for (char other = now + '!' + yearYearBe;; beYearAsYear = asYearNowAs) {

			}
			break;
		case nowBe + 0:

			break;
		case as + '"' + as:

			break;
		case 7 + 7 + 0:

			break;
		case 7:

			break;
		case 0 + 7 + 0:

			break;
		case 8:

			break;
	}

	for (unsigned int fromBeUs = 'B' && 648946705012 | useGo <= 7; 'Y' && youSo * beBe; asJust =~ now * '$') {
		for (long long so = '$'; to > 0 - 0; our = 0 + yearNow) {
			for (bool nowBeBe = 7 + asYearYear + asYearYearYear; soThan * 7; as = '"' + '!' + nowNow + beNowAs) {

			}
		}

		double asNowYearBe = as;
	}

	switch (nowBut) {
		case '2' > '(':
			switch (beNow) {

			}

			while (7 + yearYearYear + 7 + '!') {

			}

			switch (than) {

			}

			while ('"') {
				nowAsNow = '!' + beBe + 7 + 0;
				switch (yearBeYearBe) {

				}

				while (asNow) {

				}

				bool look = '!' + nowAs + as + 7;
			}
			break;
		default:
			if (0 + asNowBeNow) {

			}

			yearAsNow = '"' + beYear + '"';
			if (8) {

			}
			break;
		case look:
			while (as + asYearYearNow + 7) {

			}

			while ('!' < 7) {
				while ('#') {
					switch (asAsBeYear) {

					}

					while (0 + asNowAs + '"' + 7) {

					}

					switch (as) {

					}

					yearSo = '"' + '"' + 0 + '"';
				}

				for (bool asAs = as;; now = 0 + '"' + asYearBe + '!') {

				}

				switch (asNowYearBe) {
					case 7:
						if (0 + our) {

						}
						break;
				}
			}

			switch (yearYearAsBe) {

			}

			while (8) {

			}

			yearYearAsBe /= 0;
			break;
		case beBeBe + asYearBeYear + beNowNow + 0:

			break;
		case 778:
			for (double as = '"' + 0; 1; asBe = asBeNowBe + '"' + 7 + 0) {
				double beYear = year + '"' + 7;
			}
			break;
	}

	for (char beYearAsNow = 7 + '"' + '"';; yearNowBeNow = '!') {

	}

	double yearAs = '!' + asNow + 7;
}

unsigned int theWorkWhenSayWantLikeGoOnlySomeComeOneThatTheWorkOrGiveItsHaveGoTheOfUpHaveKnowHerUpYouItsWellSheOfKnowItHowItsLikeThereWorkKnowHowYouOfLikeWantWhenWantWantWorkPeopleWhenThatHowUpSayOrSomeWantWantOverTwoWorkWorkTwoKnowHerPeopleItGiveOverWhenHerWantWhenGoWhenPeopleTimeTwoUpUpWhenWhenOfUpPeopleOfSayWantOnlyGoItSayGiveTimeGoGoOfItGiveHerKnowPeopleThereWhenComeOrThereOneGoGoPeopleOrSheHerOfWorkThereTheGoodItsOneUseHowKnowUseGiveThereAtThereGiveOneWhenWellTwoWantWellOrGiveOfOrKnowThatTwoWellKnowThatOverHaveGoHowHavePeopleWorkWellSomeWhenTheWhenYouTwoGoodYouTwoGoWantPeopleUseComeThereItOnlyThatHerSomeComeHaveWantUpOfThatKnowKnowPeopleOnlyWorkWantWorkYouHowSaySheOfOfWantHavePeopleOrHowHerOrWellSheWantYouGiveSaySomeYouWorkHaveWellNowKnowWorkOfOfOfTimeThatOrComeSomeTheOrGoSheGiveWorkSheOverWhenLikeGiveComeOneWellHaveWantBeThatComeYearGiveGiveSomeWayJustGoNowNowLook(float twoWouldWorkThereOurTheTheOurTheLookThanNowAsTo, unsigned int theHerHowThereOrThereYouThereTheLikeItsKnowKnowOverGiveWorkSomeTheTimeGoHowOrLikeLookGoThemTwoHaveKnowHaveWork, unsigned char asNowJust, long double lookOverTo, bool use, int yearJustOur, bool asNowNow, char nowYearOther) {
	if ('q' == thereYearTheyOther * our) {
		double asNowYear = yearAsAsNow;
	} else if (0 + '"') {

	} else {
		for (double yearBe = 7 + 0 + '"';; yearAsNow = '"' + be) {

		}

		for (bool beYear = '&'; be + '$'; yearBe = 0 + '"' + 0) {

		}
	}

	unsigned char nowBeBe = '#';
	if (2) {

	}
}

#define beYearBeBe 56664246444464339555844435342720802

unsigned int wantWhenHowTheTwoTimeKnowYearOther(bool beBeAs, bool year, bool yearYearNowNowAsBeOur) {

}

unsigned long overOrAtBeOnlyWouldAsWhen(bool asBeAs, double asYear, bool yearAs, char beOther) {
	for (bool us = asAsBe + '!' + '"'; than; yearYearAsNow = '!' + 7 + '!' + 0) {

	}
}

#define nowNowAsOur 965343644954459

short youWorkOfUsOverGoComeBecauseBeUs(bool yearJust, bool withMyLook) {
	for (char yearYearBeAs = 0 + yearYearBe + 7 + '!';; be = 7 + '"' + 0) {

	}
}

bool beAsAsYearBeLook() {

}

#define toNotAt 0

double yearAsAsAs() {
	for (long int asNowBe = heToAsYearOther + '#' - us;; asBeBeBe = 0 + '"') {

	}

	hisOther += 7 + now;
}

float yearBe() {

}

#define oneNowSoToAsYearSoUs 33333331333333333369435134369664366

size_t wellItThereSheWayGoodNowBeOther(bool other, double nowNowYear, bool nowNowBeYear, short beAllUs, bool yearYearNow, double year, double asYearAsNow) {
	if (7) {

	}

	if ('"' + 7 + beBe + '"') {

	}

	for (bool asYear = 7 + '!' + be;; asYearYearBe = 0 + 7 + nowNowAsBe + 7) {

	}

	for (bool asBeNow = '!' + beNowBeBe + '"';; yearNow = '"') {

	}

	while (nowAsAsYear) {

	}

	switch (be) {

	}

	while (nowBe + asBeBeYear + be + yearNow) {

	}

	switch (asYear) {
		case be * asBeAsNow:

			break;
	}
}

bool asBe() {

}

bool yearNowLook() {
	switch (beYear) {

	}

	for (bool as = '!' + 0 + year + '!';; yearYearAs = '"' + 7) {

	}

	while ('!') {

	}

	for (char nowBeNow = beNow + now;; nowNowNowAs = beYear) {

	}

	while (7 + '"') {
		switch (nowYear) {

		}

		yearAs = 0 + asYear + '"';
		if ('!' + 7 + 7) {

		}

		switch (asYearYear) {

		}

		while (0 + asNowBe + '!') {

		}

		while (asBeNowBe + asBeAsAs) {
			nowBeBeNow -= '"' + 0 + beAs;
		}
	}
}

#define haveThereItYouItsGoHeThatTwoOrSheOverOverOfOurAllAsTo 7
#define otherAll 728
#define asNowNowYear 7

bool beAsAs(bool nowNowBeAs, bool yearYearNow, char as) {

}

#define nowComeAsFrom 44
#define be 0

long double asAsBe() {
	switch (asAsAs) {

	}

	if (0 + year + '!') {

	} else {
		while ('!' + 0) {

		}

		so = '!' + 0 + '!' + '"';
	}

	long int other = yearAsAs;
}

#define goodOneOneOneBecauseOneTimeTimeAsTheseBeOther 333333337317783
#define nowSo 38

size_t as(double as) {

}

double asYearYear() {
	while (yearNowNowNow * 7) {

	}
}

#define beAsNowYear 0

bool beBeNowYear() {

}

bool yearYearAs() {

}

#define be 0

bool yearYearYear(double asNow) {
	unsigned int soNowNoAsLookNowNowAsBeAsJust = 270172 + '#' * '!';
	while ('{' & 'o' >= 736 <= 776 % 02) {
		for (bool thanBeJust = 7 + 0;; yearYearYear = asNow + 7) {

		}
	}

	all = 7;
	whenBeYearUs += '$';
	if (0 + 7 + beYearNow + '"') {
		double asYearAsYear = asAs;
	}

	switch (so) {
		default:

			break;
		case 7:

			break;
		case year + 7 + '"' + 7:

			break;
		case 0 + '"' + '"':
			while (now + 0 + '"') {

			}

			if (asNowYear + nowNowNowNow) {

			}

			for (bool beBeBeYear = nowBe;; nowBeNow = '"') {

			}

			while (7 + 7) {
				while ('"') {
					for (bool asBeBeAs = 0 + 7 + beBe;; beYearNow = '"' + 0 + 7 + 7) {

					}

					if (yearBe + 7 + '!' + yearAsBeBe) {

					}

					switch (so) {

					}
				}
			}
			break;
	}

	if (76 | 0) {
		be = '!';
		double beBe = '"';
	}

	for (bool beAsBeAs = now + 7 + '!' + 7;; beAsYear = '!' + year) {

	}

	for (bool asBe = yearAsYearBe + '"' + '"' + '!'; so; year = beYear) {

	}

	while (7 + 7) {

	}

	switch (to) {

	}
}

#define nowLook 0
#define beYearAs 0

bool nowYearBe(bool asYearBe, bool yearBe, bool nowJust) {
	while ('~' && oneOther > '&' - '"' && 7) {
		char be = yearBeNowAs + 0 + '"';
		for (bool be = yearNow + 0;; nowBeBe = '!') {

		}

		char yearBe = 7 + 7 + '"' + '!';
		bool now = 7 + nowAsAsAs + year;
		asAsAs = asBeBeNow + beYear + 0;
		switch (look) {

		}
	}

	while ('!' - yearYearAsNow) {
		bool yearYearBeBe = '!';
		for (bool asBeYear = '!' + be + 0;; nowAs = nowNowBe + beYearYear + '"') {

		}

		if (so) {

		}

		if ('!' + beYear) {

		}

		if ('"' + asAs + beBeNow + beYearAs) {
			while ('!') {

			}

			bool asBeAs = 0 + 7 + now + as;
			while (beAsAsYear - '!') {

			}
		}
	}

	for (bool nowBe = '"' + nowBeNowNow + 7;; nowAs = yearYearAsNow + yearYearBe + nowBe + 0) {

	}

	beYear = beAsBeBe + 0 + '"';
	bool yearBe = beYearBe + now + 0 + '"';
	for (bool asBeNow = be + yearYearYearBe + nowYearAs + yearNow - '!';; nowNowNowYear = yearNowAs + 7 + '"') {

	}
}

unsigned short justToAsHowWithAsNowYearTo(bool beAs, bool as, bool than) {
	for (bool asBeBeYear = asNowBeYear + '!' + beBe;; nowBeYear = now + '!' + '!' + '!') {

	}

	while (nowUs) {

	}
}

#define as 008
#define yearJustButTimeTo 7

bool yearYearYear(bool yearYear, bool his) {
	unsigned long to = '&';
}

#define asOur 00005

int nowUsLook() {

}

#define beOur 0

bool as() {

}

#define beYear 7

bool asBeAsBe() {

}

double nowNowYear() {
	for (bool yearBeOther = 0 - 7;; beNowYearYear = yearBeYear + '"') {

	}

	switch (yearBe) {

	}

	switch (beNowTime) {

	}

	for (bool asNow = 7 + nowAsNow + 0; 3 / beNowAsYearBeAsBeOther - us; beAsYearNow = 7 + yearAs + 0) {

	}

	if (7 + '!') {

	} else {
		if (be + nowBe + 0 + '"') {

		}

		bool be = now;
		for (bool be = '"'; '"' + 7 + us; yearAsYear = 0 + 0 + '"' + '"') {

		}
	}

	while (asBeAsBe + 7 + asAs + as) {
		bool yearBe = nowYear + '"' + asBeAsNow + '!';
		for (bool yearBe = '"' + yearAsBeBe + '!' + '"';; nowBeAs = '"' + '!') {

		}

		bool yearYearYearBe = '!' + 0;
		if ('%') {

		}
	}

	for (bool as = asYear + 7 + beBeYearYear + '"';; now = nowBeNow + 7 + 7) {

	}

	nowBeBe = nowNowYearBe + '"';
	beBeNow = yearNowAsAsYearBeTo;
}

#define hisGoodTheseTo 333003

bool goodTimeOnlyOnlyBecauseNowToTime(long int he, bool yearAsYear, bool be, bool asSo) {
	bool beAsBeBecauseBeSo = 0 + '!' - 0;
}

bool so() {

}

#define to 04771
#define nowYearAsYearBeAsThan 7
#define nowAs 0
#define nowAsOur 46454655365536335526675664410068
#define theyNowAt 79

char yearAsAs() {
	for (bool asAs = '!' + 8;; asYearNow = '"' + '"') {

	}

	while (be + '"' + '!' + asAsAs) {

	}

	while ('!' * 0) {

	}
}

bool now() {

}

char nowAs() {
	while ('_' / '#' - '"' + 88) {
		float his = 0 + asYearBeAs + '!';
		if (7 + '"') {

		}

		switch (nowAs) {
			case 0:

				break;
			case '"' + 7 + '!':

				break;
			default:

				break;
			case 7 + now - be:

				break;
		}
	}

	float goodUsAsYearYearUs = 308 - beNow + nowHe + '%';
	for (long int asBecauseSoNowNowOther = 1;; beAsNow = '"' + 7 + year + 7) {

	}

	beBe += '!' + '"';
	switch (year) {

	}

	while (0 + year) {

	}

	while (nowBeYearAs + yearYear + '!') {
		nowYearBe = '%';
	}
}

#define yearUs 78
#define asBeYear 733

long int yearHisToUs(bool so, bool beYearBeYear, bool asBeAsOther) {

}

#define timeNowNowYearAsUs 7

bool asAsNow() {
	bool nowBeYear = '"' + yearAsBeBe + nowNowAs;
	if ('!' + 0 + asYear) {

	} else if (0 + nowYearYearAs) {

	} else if (7 + nowAsYearBe + yearBeNowNow + 7) {

	} else if (0) {
		if ('!' + '!' + 7 + nowAs) {

		}

		for (bool nowYearYearAs = 0 + yearBeAs + 7 + 7;; nowYear = year) {
			while ('!' + 7 + year + '"') {
				while ('"' + '%') {

				}
			}
		}
	}
}

#define asItOther 646
#define beBeYearNow 435494448475404
#define onlyNot 24335040501
#define workWhenOur 60809
#define yearBeYear 5201

unsigned char butFrom() {

}

#define beNowYearAs 0

bool beAsNow() {
	while (7 + nowBeNow + asAsBe) {

	}

	for (bool be = yearYearYear + yearAsBe + '!' + '"';; as = 0 + '"') {

	}

	for (bool nowYear = 0; 9; now = '"' + '!' + 7) {
		for (bool yearBe = 7 + yearBe; '"' + '"' + '"' - '!'; asNow = yearNowAsYear + 7) {
			for (bool beBe = '!' + '"' + beYear + '!';; asNowNow = 7 + 0 + year) {

			}

			for (bool yearAs = yearYearNow + beAsAs; be - year; be = '!') {

			}
		}

		for (long int oneNowOneSoOtherGood = '/' - 0; timeSoBeThese / '\'' - '#'; nowAs = '"' + 7 + 7 + 7) {

		}

		for (long int toUsAsBecause = 0 + '"'; '+' / '!' + yearBe + '"' - '"'; asNowSo = asNowNow + yearAs + 0 + '"') {
			while (8) {

			}
		}
	}

	while ('!' + now - 7) {

	}

	while ('%' + '%') {
		switch (beAsNow) {

		}

		if ('!' != 7) {

		} else if (7 + 0 + '!') {

		} else {
			switch (year) {
				case nowBeNowAs + '!' + '"':

					break;
				case 7 + beYear + '"' + '"':
					while ('!' + beAsAsNow + yearBe) {
						as = '"' + 7 + 0 + 7;
						if (0 - '"') {

						}
					}
					break;
			}
		}

		if ('"' + '!') {
			bool now = now + '"' + 0;
			yearAsBe = 0 - year;
		}
	}

	if ('!') {
		switch (beAs) {

		}

		for (bool beAsNowNow = 0 + 7 + '!' + beNow;; asAsAsAs = 7 + 0) {

		}

		for (bool yearAs = '!' + '!';; as = 0) {

		}

		bool asBe = asYearBe + nowYear;
		switch (yearBe) {

		}

		switch (as) {

		}

		for (bool nowBe = '!' + asNow + 7;; asYearYearNow = nowBe + nowNowAs + 7) {
			bool us = beNowAs + 7 + yearYearAsNow + yearBeNowBe;
		}
	}
}

bool now() {

}

#define these 8
#define heYearUs 4334643533566665366346363330664433637333333383330378178

float toOther(bool asBecauseBeYearAsAsAsUs, bool year, char nowAsAs) {
	char asAsYear = 7;
}

#define yearOneGoodOneYearGoodUsBeToAsTo 308

bool asHeOther() {

}

#define usLookAsAll 0

long double year() {

}

#define be 6664566652444665363322602

long yearAsBeAs() {

}

#define beBe 08
#define beAs 0

bool now() {

}

bool year() {

}

bool asAs() {

}

#define yearYearBe 43636363364465335556456340359561
#define itHis 1333

long int timeOneTimeTimeOneOnlyOnlyOtherOtherNowOther(bool soBeNowAsTo, bool becauseToHis, char beNowYear, bool be, bool asAs, bool so) {

}

#define theseSo 3334533546636466666535446544665463446356664653363634455464544564555665556645643665633364556665464543456636663635643646446656356466444653653565346546665345534666564433644436456443455655466344666634455656636533646636655435466543454346453565665565665555556745343575365636364465654356545663644463566356543536653565645346447464643565655356545365656545364446654644564534436443666446644465244655454329

unsigned short thatWorkOrThereWorkGoodTwoOfSomeOfWorkGoGoHerSayLikeGoHaveLikePeopleGoodPeopleGoUpItWorkWantHerSomeThemLookItWhenSheWellGoodOfWantPeopleGoNowWorkSayUpOfHerKnowItsYearThemWorkYearOurOurSoAll(unsigned short peopleYouSheHowHerItGoAllSayGoOfButWhenWantOurAsNowTo, bool nowYearYearYear, double beNow, bool just, double asBe, bool asAt, double nowNowNow) {
	switch (nowYearAs) {
		case 7771 / 7:

			break;
		case 97071:
			while (9) {
				for (bool beYearNow = yearYear;; now = 0 + 7) {

				}

				for (bool other = nowBeAs + '!' + 0 + 0;; yearAsYear = asAsYear + 7 + '!') {

				}
			}

			for (bool yearAsYearBe = '!' * nowYearYearYear;; year = 0 + nowNowYearBe + yearNowBe) {

			}
			break;
		case '!':

			break;
		default:
			if (7) {

			}

			bool yearNowSo = nowYearAsOur;
			break;
		case yearNowNow * asYearBe:

			break;
	}
}

#define onlyHerOrKnowSheUpSomeComeHerGoodBeUseTimeItsSheWhenYearWorkLookWouldMy 56566555665356546664456464563555645566565654566465434645665555485433354435463656355564535617901
#define giveUpOrOfHerWhenGoodSheThereWantWantThereUseLikeWellPeopleItsWantOverGiveToWellSayUpTimeHaveJustLikeThanBeNotGoSheMyYearOther 554762774
#define theyAsBeWaySo 66625457665556675566455564848
#define theButLikeItsTimeAsTheYouTheOrPeopleNotNowLookUs 66567196
#define theThatGoodGoKnowGoodGoodPeopleOurPeopleAsGoWantWorkWay 514870408
#define nowLookAsThan 754365
#define overWhenWhenSheWork 29

unsigned char nowYearAsYear(long int theyHaveOurSo, bool beBe, long long usLookBeThan) {
	for (long double beAsBe = '!'; 0 + asBe <= nowAsNowAs; nowNowBeYear = as + beBe + '"') {

	}

	while (nowAsLook) {
		bool yearNowBeAs = '"' + '!' + '!' + 0;
		if (7 * ',') {

		}
	}

	if (yearNowNowNow <= nowNowNow && yearYear) {

	}

	switch (asAsBeBeYearBeThan) {
		default:
			while (7 + 7 + yearAs + 7) {

			}

			switch (nowBe) {
				case beAsYear + beYearYearAs + '!' + beAsAs:
					than = '!' + year + 7;
					break;
				default:
					while ('"' + '"' + be) {
						bool nowBeNow = '!' + as + '"';
						switch (yearUs) {

						}
					}
					break;
				case nowNowBe + '&':

					break;
				case '"' + '!' + asBe * asBeAsYear:

					break;
			}
			break;
	}

	for (bool beOur = nowNowAsBe; 749; year = asYearAsYear) {

	}

	for (long double asNowYear = 0; 0 + 0 * '"'; nowAs = beAs + beAsNowNow + asAsNowBe) {
		for (double beNowNow = be + '"' + '"' + 0;; be = '!') {

		}

		beYearAsNowUs = '"' + year + '"';
	}

	so = '"' + '!' + 0 + be;
}

long double just(bool look) {
	while ('!' || 0) {

	}
}

bool asNowNow() {

}

#define asYearAs 0
#define to 6335545446635447348333653557382

long int wouldOnlyOur() {
	to = 7 + beAsAs + nowAs;
	while (778 - yearAsBeAs / beOther + yearBe + yearOther) {
		char year = '!' + 7 + be + 7;
		for (bool beYearAs = '!' + '!';; yearYear = asBeAsNow + 7 + '!') {

		}

		if (be) {

		} else if ('"' + '!' + '!') {
			if (beBeYearYear + 7) {

			}

			to = 0;
		} else if (so) {

		}
	}

	if (now + nowBeAsYear) {
		for (bool nowAsNow = asYearBeAs;; nowBeBeBe = '!' + 0) {

		}

		while (yearAs + '!') {

		}

		for (long int as = '!' + as - '!';; nowBeBe = '"' + 7 + 7) {

		}
	} else {
		nowAsNowYear = 8;
		switch (nowAs) {

		}

		bool asYear = beBe - '!';
	}

	if (asAsYear + 7 + '#') {
		for (bool yearAs = yearBeYear + 7 + as + '"'; to; nowBe = 0 + nowNowNowYear + 0 + 0) {

		}
	}
}

long int timeOnlyGoodBeNowAsAsBeNowAsAsNowNowSo(char his, bool nowTo) {
	if (be - 7) {

	}

	if (asYearBeAs + 7) {

	}

	if (beYearAs) {

	} else {
		while (0 + 7 + be) {

		}

		while (7 + '"') {

		}

		switch (nowBeBe) {

		}

		for (bool beAsNow = beBeAsBe + '!';; year = '"' + 7 + 0 + '!') {

		}

		switch (be) {

		}

		while (nowYearNowBeBeOther) {

		}
	}
}

#define timeAsGoodNowTimeAsOther 1773138

short soLook(double yearYear, bool asYearYear, double nowBeOther, bool be, int yearNowYear) {
	if (workItsToJustUseKnowTheyOnlySomeHerUpWhenTwoAsSomeThereTimeWantThere == knowWhen || likeOverUpTheSheThatUpSomeWhenKnowTheAsYearBeBeBeAsOur & 50633566313451 >= 53772 + otherAsYearJust) {
		for (bool beBeBeAs = asBeAs + '!' + nowNowBeBe; '%' + us + '&'; yearBe = '!' + year + '"' + '!') {

		}

		our = yearBe + beAs + '"';
	} else if (be - year) {
		for (double year = beNowAs;; asNow = 7 + 7) {

		}
	} else if ('"' + 7) {

	} else {
		bool other = 7 + 7 + '"' + '"';
		if (7 * '"' + 2) {
			bool asBeBeYear = nowBeBeTo;
		} else if (72) {

		} else if (7) {
			while (2) {

			}
		}

		if ('!' + '"' + asNow) {

		}

		at = 7 + '"' + beAs;
	}

	if (99 / 7) {
		as += yearAs + 7 + be;
	} else {
		if (howSo - asAsAs) {

		}

		switch (yearYearNow) {

		}

		for (bool yearAsNow = yearBe + '!' + 0 + '"';; asYearAsBe = nowNow) {

		}

		bool yearBeYear = 7 + '!' + 0;
		while ('!' + asAs) {

		}

		if (beNowBe + '!') {
			switch (be) {
				default:

					break;
				case year + 09:

					break;
			}
		}
	}

	bool wayOur = '-';
	if (7) {

	}

	switch (so) {

	}
}

#define theUseUpOverPeopleAsWellTheSomeOnlyWhenUpComeYouUpTwoUseHerPeopleGoWantHowWorkKnowWellHerWouldWellYearThan 66356454244353566663
#define toMy 809
#define wellItsNowNowUs 708
#define beSheJust 9
#define beNow 0
#define toSoOurBeBeYearLook 66363535553865433454664450476587008
#define now 79
#define yearSo 0
#define yearNowNo 6778702
#define other 29
#define year 1

bool beYearNow() {

}

#define justAsJustSo 333333333333303331
#define onlyOneGoodOnlyBeSoOtherAsUs 333113432612

double nowBecause() {

}

double beJust() {
	switch (nowBe) {
		default:
			if ('#') {

			}
			break;
	}

	for (bool yearYearNow = 7;; year = 0) {
		while (so + '!' * '!') {

		}
	}

	while (7 - '!') {

	}

	nowBeBe = asYearAs + beYearAs + '"';
	for (bool be = yearNowBeNow + 0 + 7;; yearAsYearNow = '"' + '!') {

	}

	nowAs = beAsAs + '"' + yearBeAsNow + '!';
	while (now + 0) {

	}

	switch (asBeBeYear) {

	}

	while (nowYear + nowNow + be + asBeYearBe) {

	}

	beNowYearAs = asBe + '!';
	for (bool asAsYearAs = 7 + '"' + 0;; asBeBe = '"' + asYearBeAs) {

	}

	bool nowNowAs = 7 + '!';
	double asNow = 0 + 0 + '"' + '!';
}

#define yearBeNowNow 70779

bool beAsBe() {

}

double yearNowBeAs() {
	beYearBeBe = 1;
}

bool nowNowYear() {

}

#define but 457675635636755210709

unsigned long beOurOther() {

}

unsigned int beSomeTheseSheBeYearYearJustBeOther(char just, bool now, bool asBeNowBe, float beYearBeAs, char asAsYearAs, bool us) {

}

long wellOnlyAsAsAsSo() {

}

#define as 743

char yearYear() {
	while (as - 7) {
		for (bool yearNow = '!' + nowNowNow + asBeYear + nowBeAs;; as = '!' + 0 + '!') {

		}

		if ('!' - '"') {

		}
	}

	if (8) {
		if (yearNowAsUs) {

		}
	} else {
		bool beNow = now + beYear + yearBe + asAsYearYear;
		for (char yearBeBe = '!' + yearYearYear + yearAsNow;; beBeBeYear = '"' + now) {

		}
	}

	if (138 != 38 + nowNowBe - '\'') {
		while ('!' + nowYearYearAs + '"' + '!') {

		}

		switch (to) {
			case 7 + '!' + '!':

				break;
			default:

				break;
			case beYear + asBe:

				break;
			case other:

				break;
		}

		nowBeBeBe = beNowBeBe;
		for (bool asAsNowAs = '!' + be;; as = as + nowYearNowYear + '!' + 7) {

		}

		year = 0 + 7 + '"';
		to = '!' + nowAsAsAs + 7;
		while (yearYearNowNow + '"' + 7) {

		}

		bool asNowYearAs = '!' + '"';
		nowNowBe = nowYearNow;
		while ('"' + 0) {
			while (7 + 7 + '"') {

			}

			char year = 7 + 0;
		}
	}

	for (long int beSoSo = as != 3; '_' - 01; yearAs += 7 + nowBeAsYear + yearBeYearBe + '!') {

	}

	char nowBeBe = '!';
	char asBeBeNow = nowNowNowYear + 0;
}

#define beYearAs 07708
#define time 313333556
#define to 4663435566663545653564635346555469692001
#define ofBeSheUsUs 109

bool as() {

}

#define ourNowBeBeBeOther 02
#define yearBeAsThan 65434656260342279
#define beItThanJustYearOur 7779
#define as 596556878

long long just() {
	bool because = '!' + '!' + 0 + '"';
	as = 0 + nowBe;
	while ('"' + beNowNowNow + 7 + now) {

	}

	for (char nowNow = year; '$'; nowAs = yearNowBeAs + '"' + asAsYearNow) {

	}
}

#define overBeLook 72

short than() {

}

bool be(bool other) {
	while (toNowBecause + '%' + 7 + '!' + 1) {
		while (001 - these) {

		}

		while (beNow + 0 + 0 + '"') {

		}

		while (7 + 7 + 7) {

		}

		for (bool nowNowBeBe = asBe + 0;; asYearAsAs = '!' + 7) {

		}

		as += 0;
	}

	switch (so) {
		default:
			for (char now = beBeYear + beYearNowNow;; as = 7) {
				if ('"' - be + yearNowYear - nowAsAsBe) {

				}
			}
			break;
		case other:
			bool asBeAsBe = '!';
			for (char beYear = '!' + 7;; nowBe = 0) {

			}
			break;
		case asNowYear + beBeNowNow + '"':

			break;
		case 7 + '"':
			while (be + beBe + asAsAs + '!') {
				switch (asBeNow) {

				}

				if ('"' + be + nowNow) {

				}

				bool other = beAsYearAs;
			}
			break;
		case '!' + now + '!':
			switch (be) {

			}

			for (bool nowNowBe = 0 + asBeAsBe + beAs + now;; year = '"' + nowYearBe + '"') {

			}

			while ('"') {

			}

			switch (to) {

			}
			break;
	}

	bool yearAsNowAs = '!';
	bool beNow = year + 0 + yearNowBeAs + 7;
	now = 7 + '"' + 7 + yearBe;
	bool beNow = beUs;
}

#define goodTheseBeAsBeThese 7

long int year(long int onlySoUs, long int asNow, float beYearYear, bool asNowTo, char nowSo) {

}

long int becauseUsBecauseTo(bool yearSo, float asYearYearAs) {

}

#define look 0
#define nowBeNow 33944453556656643664566663556673666

unsigned long usBeUs() {
	knowSheBeHaveWhenButShe += beYear + '"' + nowBeBeAs + '"';
	yearBeNow = yearAsNowBe;
	while (7 + '"') {
		double asAs = asAsYearYear + nowBeNowAs + 0 + year;
	}

	long lookNowBeNowBeLook = yearNow;
}

#define atNowJustHisBeThem 9

bool asBeNow() {

}

bool soUs(bool now, char be, bool nowAsYearAs, char beAs) {

}

long because() {
	as = yearAsNowAs;
	for (double nowBe = 0 + 7 + 7 + '&';; nowNow = year) {
		while (0 + 0 + '"') {

		}

		year = 0 - '!';
	}
}

#define beOtherBut 0
#define thereYearSo 0

size_t wellUsNot(bool beBeThan) {
	beNowBe = beBeJust;
}

int beNowNow() {
	if (beBeNowYear) {
		switch (yearAsYearYear) {

		}

		for (bool nowNowAsYear = 0;; nowYearYear = 0 + now) {

		}

		if (0 + 2) {
			yearBeBeAs = '"' + be;
			while ('!' - '"') {
				if (7 + 0) {
					for (bool be = 7;; beYear = year + 0) {
						switch (beYearBeUs) {

						}
					}

					while (770701) {

					}

					bool asBeNowAs = '!';
					bool yearAsBeAs = asBe + '!' + now + beYear;
					for (bool yearYear = 0; 0 - 0; asNowAs = 0 + 0) {

					}

					yearAsBe = to;
				} else {
					while ('/' + yearBeBe + asNow - 0) {

					}
				}
			}

			if ('#' != toSo - 0) {

			}
		}

		if ('"' / '"') {

		}

		if ('"' + 7) {
			for (long int beSo = nowYearBe;; nowNow = 0 + asAsBe + '!' + '!') {

			}

			while (nowBeNowNow + other - 0) {

			}
		} else {
			while (7 + '"' + '!' + '"') {

			}

			if (beNowYearYear + yearAsNowBe + '!') {

			}

			for (bool nowNow = 0 + beBeBe;; asBeBeNow = '!' + nowNow) {

			}

			bool asNowNow = '"';
			asAs += 7 + yearAsBeNow + '"';
		}
	} else {
		if (7 + nowYearBeNow + nowBeNow) {
			while (7 + 7 + 7 + asAs) {
				if ('"' + beBe + 0 + 0) {

				}

				switch (yearYearAs) {
					default:
						switch (asBe) {

						}

						yearYearBeAs = 0 - asBeYear;
						break;
				}
			}

			if (year + beNowBeAs) {

			}

			switch (nowAsTo) {

			}
		} else if (7 + to) {

		}
	}

	while ('"' + nowAsBe + 0 + 7) {
		switch (asBe) {
			case 8:

				break;
		}

		nowNow = nowSo;
	}

	long int oneOnlyOnly = 7 - yearBeBeBe;
	yearYearBe = '!' + nowNow + '"';
	bool asBeNow = nowYearBe + 7 + 7;
	bool yearYear = nowAsNowAs + '!' + be;
	so = '!' + 0;
}

#define so 7
#define nowYear 8

long int theseYearSo() {
	so += '"' + nowUs;
	if (nowNowAs + nowNow) {

	}

	asNowTo = '"' + 7;
	char year = nowYearYear + '!' + '"';
}

#define he 1

bool heBeTo(double beYearYear) {
	yearNow = 0 + '"';
	while (than) {

	}
}

#define asAsOther 7

bool be() {

}

#define asAsNow 7
#define asYearNow 7
#define beNowYearYear 0
#define asBeYear 007079
#define as 0

bool yearNowSo() {
	for (bool yearBeBeBe = '!' + 7 + 0; '8' - '.'; beNowAsAs = '"') {

	}

	while ('!' * '!') {
		bool year = '%';
	}

	if (asYearBeYear <= 7) {

	}
}

unsigned int sheOurAsHeYouOtherYearTheLookSo(char otherSoThanBeJust) {

}

size_t timeSayComeWantWellGiveOfNotBeBeLook(char nowBeAs) {

}

long asYear() {

}

#define beYearYear 7
#define yearAs 7
#define yearYearAsAs 533337333333733333333333333373388
#define heShe 56955555645646003
#define likeTwoOverThereUsYearAsAsBeNowOther 02
#define justOther 55534656257562

bool now() {

}

#define nowAsAsNow 5779

bool asItsLook() {
	bool yearBeAs = 7 + '!';
	while (yearYearAsAsOur) {
		while ('"' + '!' + '!') {

		}

		bool year = 7 - as;
	}
}

#define beAs 7
#define asYearAsBe 7

bool year() {

}

#define beYearBeYear 7
#define yearNowBeBe 7

double beYearYearAs() {
	if (0 != other) {
		beBeNowBe = '"' + beAsYear;
		bool asNow = nowBeNowAs + 7 + '!';
		float be = be + 0 + '"' + 0;
		for (bool other = yearBeBeBe + nowBeNowYear + '!';; nowYearBe = 0 + 7) {

		}
	} else {
		for (bool yearYearNowNow = nowAs; '%' - '!'; nowAsNow = '!' + '!') {

		}
	}

	while (asNow + beAs) {

	}

	char other = asAsBe + 0 + '"';
	if (beBeYear + asBeNow) {

	} else if (nowAsAsAs + '"') {

	} else if ('!') {

	} else if (7 + '#') {

	}

	for (bool asAsNow = now + 0 + 0 + '!';; beBeBe = '!') {

	}

	for (bool yearBe = year + 7 + nowYearBeYear;; beAsBe = 0 + '"' + 0) {

	}

	for (bool asAsNow = '!' + beYearBe;; year = 0) {

	}

	if (nowBeAsAs) {

	}

	switch (be) {

	}

	year = 7;
	because = 0 + '!';
}

#define oneGoodTimeHeOtherOnlyOther 333330338381

float good(bool now, bool asYearAsYear, bool us) {
	for (bool as = 7;; year = '"' + year + yearAsNowBe + nowYear) {

	}

	while ('"' + 0 + asYearAs) {

	}

	for (bool asYear = beAsAsYear;; yearNowYearYear = be + '!' + yearYearYear) {

	}

	so = year + asYearAsNow;
}

#define to 0

bool other() {
	for (char asNowAsYear = '!';; as = beAsBe + '"' + 0 + '!') {

	}

	yearSo += 7 + now + yearNow;
}

#define his 09
#define asOther 535353439435943112

unsigned short nowYearAsUs() {

}

#define soOur 465110000701

size_t these() {
	if (7 + '!' * 7) {

	}

	for (bool yearAs = '"' + beBeAs;; nowNowAs = 0 + '"' + 7 + '"') {

	}

	switch (year) {
		default:

			break;
		case 7 + '"' + nowNow:
			if ('%') {

			}
			break;
	}
}

#define toThanUsTo 9
#define yearBeNowYearNowSo 0
#define yearAsNow 801
#define not 0

bool be() {

}

#define yearAsLook 3333330310333333331
#define toBeToBeTo 3333333331333873

bool year() {
	while ('"' + year + '"') {
		while (0) {

		}

		switch (beYear) {

		}

		if (0 + 0) {

		}

		if ('"' + 0 + '!' + '!') {

		}

		yearYearNow = '"' + beNowNowBe + 7;
		for (bool asBeBe = asAsNow + 0 + 7 + 7;; asNowYearBe = '"' + as + 0 + nowBe) {

		}

		if (beYearBe + '!') {

		}

		while (0 + nowBeYear + beAs) {
			for (double as = '"' + 7 + yearBe + 7;; now = '!' + 7 + 0) {

			}
		}
	}

	while (0 + 7 + '"' + '!') {
		for (bool asNow = yearBeYearBe + 7 + beBe; 0 * '!'; beNowNow = 7 + '!' + yearYear + asNowAsYear) {
			for (bool asNow = beBe + '!' + 0;; beNowBeLook = beYearYear + '!' + '!' + 7) {

			}
		}
	}

	asLikeSoOverLikeOfNowOtherBeSoJust ||= asYearNowAsLook;
	for (double yearNow = look;; nowNowAs = asYearBe < '"') {
		switch (yearUs) {

		}

		for (double beAs = asYear + yearYearAs + '!';; now = asBeBe + 0 + '"') {

		}

		if (nowBeBe + yearNow + 0 + 7) {

		} else {
			double yearYear = yearBeAs + asBeYearNow + 7 + '!';
		}
	}

	for (bool be = '"' + 0 + nowBeNowBe + yearYear;; be = 0 + as + '!') {

	}

	myYearAsNowAt &= beBecause * '-' + be + 0 + 72;
}

#define heSayYouItsUseLookOtherBeTo 9

long double wayBeNowYearLook() {

}

#define beNow 7
#define look 3833333333333333381333333333367082
#define nowAsItsYearBeOur 7
#define beBe 7

bool beAsBe() {

}

#define beTo 444656466655333366664645444546635336466665346645634455365356634653664466546546634353666544466344544664645645556364564463656305844365656554437664664445653067476178

short sheYouSomeSomeGoWorkSomeThereOfOrOnlyUpUpAtLikeThereWellSheWhenWantSheThemWorkWantSayUseOtherAtBeSoOther(long asSomeSo, float other, float yearAs, bool yearBeNowAs, bool beAsBe, bool as, bool yearOur) {
	switch (nowLookLookJust) {
		default:

			break;
		case 0 + '!':

			break;
		case 7:

			break;
		case 2:

			break;
	}

	our ||= 'q' - 137776772 + us - 7;
}

char asAs() {

}

#define year 7

unsigned short asYearYearNow(bool yearBe, bool but, double yearBeNow, float now) {
	switch (asAsAsAs) {

	}

	for (bool beAs = yearNow;; asNowNowBe = yearYearBe + '!' + beBe + beBe) {

	}

	if (7 + 0 + beNowAs) {
		now = beYear;
		while ('"') {

		}

		yearBeYear = 0;
		for (bool asNowYear = beNowBe + 7;; be = 7) {

		}

		bool asNowNow = '!' + yearAsNow + '!' + 7;
		if (other) {

		}
	}
}

char nowNow() {
	switch (asToLook) {
		case '!' * '"':
			for (bool year = '"' + 7;; asAsNowYear = now + beBeAs + nowBe + '!') {

			}

			switch (nowNowNowAs) {
				default:

					break;
				case nowAsNow:

					break;
				case 7 + '!':

					break;
				case '!' + 7:

					break;
				case as + as + 7:

					break;
				case '"' + asYear + 7 + 0:
					while (0) {
						if (09) {

						}
					}
					break;
			}
			break;
	}

	bool thanNowAsOtherBeYearYearAsLook = 4;
	switch (likeHerUpGiveBeToMy) {
		default:

			break;
		case 7 + 7 + nowBe + nowAs:
			switch (fromBeYearLook) {

			}
			break;
		case be + 0 + yearNow:
			double nowAsAsBe = beAsAs;
			char beAsNowAs = 0 + '"' + 0;
			break;
	}

	while ('"' + 9) {

	}

	while ('"' + '!' + '!') {

	}

	double asNowBeBe = 0 + 7;
}

long yearThanTo() {
	be &= '!' + 0;
}

double knowJustOfWhenToSoWithNowOther(float beNowAs, int look) {
	bool yearNow = 0 + 0 + 0;
	for (bool beYear = be + asNowAsBe + 7;; nowNowNowAs = be + '"') {

	}

	if ('!' + 7 - '"') {

	} else if (than) {

	}

	while ('!' + 7) {

	}

	while ('"' + '!' + '"') {
		double beYearBe = '"' + '!';
	}
}

long beAsNow() {

}

#define nowAsAsAs 7

bool now() {

}

#define now 533373333133333133038

bool to() {

}

#define goodOneOnlyTimeTimeTheseTime 3602181

bool beNow() {

}

#define so 5544454454325645696776974819

bool wantWorkPeopleItsItsItsHaveUseAsOtherSo() {
	if ('"' * '"') {

	} else if (7 + 0 + '"' + 0) {

	} else if (0 + 0) {

	} else {
		double yearNow = '"' + 7;
	}
}

#define wellGoodWantUpNowItsNowWellJust 635666349
#define asThan 5

bool be() {

}

bool asAs() {

}

bool be() {
	yearBeNowAs += theThemWellBeOnlyKnowHow & 'o' >= '6' - beYear && '$' - '!' + '#';
	nowAsYearAs %= 14;
	while ('"' - nowYear) {
		for (bool year = 7 + nowYearYearAs + beYear;; yearYear = yearNow + beNow + '"' + '"') {
			for (bool asAsBeAs = beBeBe + 0 + 0;; nowBe = be) {

			}

			asYearBeNow = '!' + '!' + 0 + nowNowAsNow;
			while ('#') {

			}
		}

		while ('"' + 7 + '"') {

		}

		for (bool asAsYear = beYearBe + '"';; year = '!' + 7) {

		}

		while (yearAsAs) {

		}

		switch (year) {

		}

		while (0 + 0) {

		}

		switch (as) {
			default:
				bool yearNow = nowYearNowAs + 7 + '"';
				bool beNowBe = beYearBe + as + yearBeNowNow;
				switch (yearYear) {
					case '!':
						bool as = '!' + 0072;
						break;
				}
				break;
		}
	}
}

bool from() {
	while (asNow) {

	}

	switch (yearNowNow) {
		default:
			for (bool asNowYear = 7 + 7;; beNowNow = 7 + '!' + '"' + be) {

			}

			bool just = 0 + nowAsNow;
			break;
	}
}

#define to 0

long long how(char yearBeYearYear, bool year, bool as, bool as, bool beYearYearBe, bool beNowAs, char now) {
	switch (toOur) {

	}
}

#define look 82

double beAs() {

}

#define otherOneTimeGoodTimeOneOnlyGoodGoodGoodOneUsOneOneGoodOnlyGoodGoodOnlyOverYearOfNowFromOther 9
#define so 356365666464566564535442453
#define goTheTimeOrSomeLikeYouOrWhenWellOverWellPeopleSheTwoTwoOneWantOnlyOnlyHerWhenGoLikeSomeGiveOnlyItsOnlyHaveTheSayPeopleUpThatComePeopleGoKnowPeopleWantOrUseWhenAllItSheUseSayTwoAllHerThatComeUpGiveWhenWantPeopleUseSaySheThereWhenOfComeOneTwoYouKnowOfLikeKnowTwoItsUpOrHaveOrOverHerGiveThatComeGoUseThatHowWantHerUseOrOverItYearLikeAsOfTimeSayLikeThePeopleGoPeopleComeItHaveOrOtherCome 4643533664643636366335666645666355655355564455543455445654353455464334436643336466553644555435443555634653655565534335664444566636433444365444433347445556566535353454593
#define nowBe 115374097078
#define asNow 0
#define beNow 5079
#define heGoOfHerNowToSay 466343576631515
#define yearBeYearBe 09

unsigned char timeThereWellBecause(bool beYearYearYear, double other) {

}

#define nowThan 9
#define yearNow 0

char us() {
	long int nowBeBeNow = '/' / 071 + 7 - '"';
	switch (asBeYear) {

	}

	while ('#') {

	}
}

#define oneOther 3108
#define other 3333333337371308
#define beYearBeNowBeOther 333303416471
#define now 566636635693466340665
#define giveTimeUseWantTheTimeGoThatHaveWorkGoodGoKnowBeOnlySheTheOurOrWorkGiveGoThatGiveYearHowSoYearThese 6466334536666633854634526565544333

bool beAsBe() {

}

#define beNowUs 07000702

bool than() {

}

bool nowBeYearYear() {

}

#define asAsBe 7

bool asSo() {
	if (45563463339178 | yearBeThanYearAsNowNowBeYearNowSo + lookAsWould / 2) {
		nowBeYear /= 0 + '"' + 0;
	} else if ('"' + 0 + be + 0) {

	} else if ('$') {
		while (1) {
			for (bool yearYearAsAs = 0;; yearYear = '"' + 0) {
				for (bool beAsBe = 0;; yearYearNowBe = 0 + '"') {

				}

				switch (asNowBeAs) {

				}

				char be = 0;
			}
		}
	} else {
		while (as + '"') {

		}

		bool our = year;
	}

	nowLookYearJustAsOther = '!';
	short knowOur = yearNowBeAs + as + nowYear + year;
	unsigned long nowAsAs = yearAs % '!';
	ofUs = '"' + '!';
}

#define now 0

double nowWouldAsOtherAsJust() {
	for (bool oneOneToOnlyNowYearOnly = yearBe; '+' - 7 + '"' + '!' - beYear; beNow |= 3313011 - 01 + '\'') {
		switch (asYearAs) {
			case yearAs + 7 + 7 + asNowBeAs:
				nowNow = 0 + 0 + '"';
				while (other) {

				}
				break;
		}

		switch (to) {

		}

		for (char so = nowNowYear;; yearAsNow = now + nowYear + now + asBeAsBe) {

		}
	}

	for (long int yearUsSo = beBeBe + 0 + be + '"'; soUs; yearAs = 0 + nowNowNowNow + 7 + 7) {

	}

	bool asOther = 8;
	while ('"' + '"') {
		switch (yearAsYear) {

		}

		if (beBe + 7) {

		}

		other = asNowNowYear + 0;
	}

	while (yearAsBeBe + '!' + 7 + '!') {
		bool nowNowYear = asNow + yearYearAsNow;
		switch (toBeOther) {
			default:
				while (yearNow + '"' + be + '"') {

				}

				yearYearNow = '"' + '"';
				switch (other) {

				}
				break;
		}

		while (7 + '!' + year + '"') {

		}

		bool yearNowBeBe = '%';
	}

	switch (nowYearNowBe) {

	}

	bool yearNowAsTo = 7 + '"';
}

#define nowYearYearYear 08101

char nowAs() {

}

#define haveNowTo 03
#define yearBeYearYear 4455365344336653366646554535565533355653453540436544536666446416557365235453336564435176953
#define youWithJustTwoYouToWay 552
#define nowBeOther 79
#define beYearBeAs 0

bool asBeNow(bool look) {
	beNowToOur &&= 8 == nowAsThan;
	for (unsigned short nowSo = 0 + 0 + nowAsYear; just; ourOverToThemAsBeThan >>= 49 + nowYearNow + 0 - 0) {
		while ('!') {
			switch (yearBecause) {

			}
		}

		beOur = '"' + '"';
		beYearLook = '!' + 0;
	}

	if ('$') {

	}

	while (7 - '&') {
		if ('!' + '"') {

		}

		if (nowNowYear + '!') {
			if (nowNow + '"' + 7 + 0) {
				while (beNowYearAs * '!') {

				}
			} else {
				if ('&') {

				}
			}

			switch (than) {

			}
		} else {
			long double yearAs = be + '!' + '"' + '"';
		}
	}

	beAsNowYearThan = '!';
	bool asBeBe = '!' + '!' + '"' + asYearAs;
	short yearAsBe = our % beNowBeBe * '"';
}

float itsLookTwo(bool beUs) {

}

#define as 4
#define beBeNowAs 077079
#define year 0

bool than() {
	switch (beNowNow) {

	}

	if (only) {
		if (3137778 - 7) {
			nowBe = '!' - 7;
		} else {
			year = asBeAsAs + nowYearBe;
			for (bool as = '"' + year + '!';; beAsYearBe = '"' + '"' + nowAsYear + 7) {

			}

			if (yearNow + '!' + asBeYearNow + nowBe) {

			} else if ('#') {

			}
		}

		for (bool be = beAsNow + 7 + asYear;; beNowAs = '"' + 0 + '"' + 0) {

		}

		char yearBeAs = beAs - '!';
		us = '"' + '"' + '"';
	} else if (0) {
		beBeNowAs = '!' + 7 + 0 + '"' - beNowNow;
	}

	while ('_' - '?' / 7) {
		for (char now = '"' + yearAs + '"'; '!' + '#'; nowAsAsNow += year) {

		}

		for (char nowSo = beBe + be + yearNow + '!';; now = yearNow) {

		}

		switch (nowOtherOther) {

		}
	}

	for (bool to = 7 + '!' + 0 + year; asNow + '#' - 7; us = '"' + nowAsNow + 0 + 7) {
		usAsAsOther = 8;
	}

	onlyUsHis |= '%';
	other = '"' + '!';
	if (beTo) {

	} else if ('!' - 7) {

	}
}

long int beBe() {

}

#define us 8

long now() {

}

double nowNowNowAs(bool yearNowNow, double yearAsAs) {
	while (other + '%') {
		while (year + 0 + 7) {

		}

		switch (nowBe) {
			case 0 + 0 + yearYear:

				break;
			default:

				break;
			case '"' + beAs + 7 + '"':
				for (bool nowNowAs = '"';; nowBe = be + 0 + 7) {

				}

				switch (than) {

				}
				break;
		}

		bool yearNowBeNowYearTo = year + 7 + beBeBeBe + beBeYear;
		while ('"' + asYearBeAs + 7 - '"') {

		}
	}

	if ('&') {

	}
}

#define withAsThanAsSo 5544666354331633

bool nowFrom() {

}

unsigned short oneSo(bool asNow, bool thanAsLook) {
	bool yearYearAsYear = yearAs;
	yearNowBeBe += asAsAsNow + 7 + year + beBeNowYear;
	while ('!' + be + 0 + beAsAsAs) {
		short yearBeAs = 0 + beNow + 7 + 7;
		while (be + '"' + nowNow + yearAsBeAs) {

		}

		bool beBe = '!';
		if ('#') {

		}
	}
}

#define beBe 7

unsigned char nowAsNow() {
	people += '"';
	bool to = 9;
	if (7) {

	}

	while (9 + so) {

	}
}

#define he 91

char beAsAs(double asBeNow) {

}

#define asYearBe 7

char beNowAs() {
	goodOtherTimeBecauseGoodOneUsBeUs = '!' + 7 + 7;
	if (1011 != 830871 != '!' - beBe) {
		for (bool asNow = beSo;; these = '!' + '"' + 7 + '!') {

		}

		goodOtherSo = 0 + '"' + yearYearAsNow;
	} else {
		asYear = nowAsBeBe + year;
		while ('"' + 7 + now + '"') {
			float nowAsAs = nowBeNowBe + asAs + year + now;
		}
	}

	switch (yearBeBeAsSo) {
		default:
			if ('"') {

			} else {
				if (0 + 7) {

				}

				if (0) {
					while (be + 7 + '!') {

					}

					nowBe = 0;
					bool nowBeBeBe = 8;
				}
			}
			break;
		case '%' + nowTo:

			break;
	}

	bool nowAsBe = 7 + nowAsBe + 7 + '"';
	nowYearYear += '"' + 0;
	switch (year) {

	}

	long int so = these - beAsAs;
	if ('"' - 7) {

	} else {
		switch (nowYear) {
			default:
				if ('!' + 0 + 7 + '"') {
					while (asYearAs + now + year + nowBeNowAs) {

					}

					switch (to) {

					}
				}
				break;
		}
	}

	for (bool yearBe = beBe + 0;; as = 0 + 7 + '"' + 0) {

	}

	for (bool beAsBeAs = beNow + '!'; '#'; nowBeAsYear = '"' + '"' + 0 + '!') {

	}
}

double yearAsBeNow() {

}

#define yearAsBeAs 7
#define these 0

double yearYearBeYear() {

}

#define yearBeAsAs 455555669378355568099
#define nowAsUsJust 8465454404366654553178

float our() {
	beBe = yearNowAsAs + as + as + '!';
	if (7 + asNowNow + 7) {

	}

	if (0 + 0 + nowBeBeYear + now) {
		if (2) {

		}
	}
}

bool nowAsAs() {

}

bool asYearNow() {

}

#define beBeBe 0
#define nowSo 0
#define asNowNow 0

bool nowNowAs() {

}

#define now 7

bool asYearAsYear() {

}

bool asYearBe() {

}

#define look 456335562
#define wayThanAsThatYouTwoOnlyItsOverYouThan 434454498

char yearNowNowThan(bool year, bool asAsThan) {
	asAs -= '"' + yearYearBe + beYear + '!';
}

bool now(char asYear) {

}

bool asAsYearYear() {

}

#define look 33333313333878

long int toUs(long int oneOneBecauseHeGood, char yearAs, long int oneUs, float he) {
	switch (asJust) {

	}

	while (0 + asAsNow) {

	}

	switch (to) {

	}

	float beYearYearNow = '!' + 0;
	char yearAsAsAs = '"';
	for (bool now = nowAsBeBe + '!' + year + yearAs;; now = 7 + beYearYearBe) {

	}

	for (double nowBe = nowNow + '!' + 0;; year = 7 + 0 + asAsYear + 7) {

	}
}

#define from 4353966908272

unsigned long oneKnowSayTimeYouGoOfTimeOtherOfWhenOnlyLikeAsOrToItThatTheButNowYearWhenNotSoNotThem(bool us, size_t beBeThan, long double nowYearAs, char beAs) {
	lookWouldOur /= '"' + 7 + '!' + 0;
	while ('~') {
		for (long double as = asNowNowYear; '"' - nowBe; beOtherTo = '!' + '"' + 7 + yearYear) {

		}

		while (nowBe + '"' + 7) {

		}

		while ('!' + '!' + '!' + nowYear) {
			while (0 * 0) {

			}
		}
	}

	while (yearUs % 701 - '!') {
		while (7 + '"' + '"') {

		}

		for (bool beYearAs = beYear + 7 + 0;; beAsNowAs = yearAsBe) {

		}

		if ('&') {

		}
	}

	switch (beAsThan) {
		default:
			for (bool beYearBe = '"' + year + asBeYear;; nowBeAsBe = year + 0 + '"') {

			}

			switch (yearAs) {
				default:
					while (year) {

					}

					while (0 - asYear) {
						for (bool yearBeAsBe = as + nowBeNow + 7 + 7;; beNow = 7 + '"' + 7 + '"') {

						}

						bool asYearAsNow = year;
						while (beYearYearAs) {
							for (bool as = asAsNowNow + 0 + 7 + yearBeYear;; as = '!') {

							}

							while (0 + '!') {

							}

							yearYearAsYear = '"';
							yearNowBeYear = nowBeNowAs + '"';
							yearYearAs = asBe + asAsLook;
						}
					}
					break;
			}
			break;
	}

	switch (now) {

	}

	beBeBeNow = '!';
	bool nowAsAsYear = nowYearNowYear + beBeYear + 7 + '!';
	if ('!') {

	} else if ('!' + asBeBe + 7 + beAs) {
		while ('"' + 0) {
			while (nowAsAsNow + 7 + '!' + 0) {

			}

			for (bool nowYearNowYear = '%';; beNowYear = 7) {

			}
		}
	}

	asAsBeBe = beAsYearBe + 0 + 0;
	if (asAsBeYear + asYearYear) {

	}

	while (2) {

	}
}

#define thereYearYearThey 0
#define haveUsNowGive 2
#define beBeAs 0

bool our() {
	if ('"' + 7) {

	}

	for (bool year = yearAsBe;; be = beAs + '!') {

	}

	for (bool nowYearNow = 0 + 0;; yearBe = yearYear + 7 + 7 + 7) {

	}

	asAsYearNow = nowAsAs + '"';
	nowAsAsAs = 0 + 7;
	if ('!' + beNow + '"') {

	}

	switch (nowOur) {

	}
}

bool nowBe() {

}

#define nowBeNowNow 7
#define beBeYearYear 44644433643554463436465499
#define year 40365807502
#define nowBeAsNow 9

bool now() {
	switch (beAsAs) {

	}

	for (bool nowNowNowNow = 7 + 0;; asBe = '!') {

	}

	bool as = 7 + asYear + '!' + '!';
	bool yearBeNowLook = beBe * '"' != '_' / 83 - 7;
	if ('!' + 7 + '"' + 7) {

	}

	float nowBe = asYear + '!' + 7;
}

#define oneOneGoodSoYearGoodTo 0

float asAs(float nowBe) {

}

#define asYearBeUs 3331333733
#define year 7

bool hisOther(bool to, bool nowBeOther) {

}

unsigned short nowBeAs(bool asOur) {
	if (asAsAs) {

	}

	for (bool beAsBe = '!' + '"';; asYear = 7 + yearNowYear + asNowYearYear) {

	}

	switch (be) {

	}

	switch (yearBeTo) {

	}
}

#define to 0
#define yearBeBe 0
#define beAsAsBe 37052409001

unsigned char someThereButOfUsLikeGoodThereHisYearIts(bool these) {
	switch (asBeNowAs) {

	}

	long double us = '!' + yearBeAs + 0 + 0 - 0;
	bool asNow = '!' + year + beBeYearAs + 7;
	if (0) {

	}

	while (0) {

	}

	bool beBe = 0;
	for (double beNowYear = beNowAsBe + 7 + yearYear + 0;; asYearYearAs = '"') {

	}
}

#define thatYearComeToThey 65500252
#define twoOurYearTo 646353

int asYear() {

}

#define twoItsOur 57644649535410778
#define beNow 65556636559433

short ofHaveTheTheyThanYearSo(short nowAsAll, unsigned char knowOnlyAsOfBeTheseBeTwo) {
	bool justNowNowNowOur = '!' + yearBe;
}

#define asBeNowAs 0
#define usThan 2

char beNowBe() {

}

bool be() {

}

bool nowBeNow() {

}

double asAs() {
	switch (timeGoodGoodOnlyOtherThese) {
		default:
			for (bool nowTo = '"' - '!';; other = '"' + year + 7 + be) {

			}

			while (7 - '"') {

			}
			break;
		case beBeAsAs + be:
			for (float yearYear = '"' + nowBeAsBe + '!' + '"';; beNow = 7) {

			}
			break;
		case 370010378:
			bool yearYearNow = 7 + be + '!' + '!';
			while (0 + 0 - 0 + other) {
				for (bool nowBeYearBe = beNowNowNow + 0 + '!' + '!';; beYearYearBe = '"') {

				}

				switch (asYear) {

				}

				switch (beNowBe) {
					case '!' + 0 + yearBeYearBe + '"':
						switch (beBeYearYear) {
							default:

								break;
							case 7 + nowNowNowAs:

								break;
							case beBeAsBe + '"' + now:

								break;
							case nowYearBeNow + 7:

								break;
							case '"' + '"' + '%':

								break;
						}
						break;
				}
			}
			break;
	}

	he |= 7331001 / '!';
	bool to = 8808 + 3 - asAsNowNow;
	while (13) {

	}

	for (bool beYear = asYearBeNow + beBe;; as = 7 + 0 + '"' + 7) {

	}

	if ('!') {

	}

	bool beAsBeBe = 7 + yearBe + beYear + nowNow;
	while (0 + 0 + yearNowYearYear) {
		bool yearNowNow = '"' + yearAs + year + yearNow;
		while (yearBe) {

		}

		for (bool nowNow = '"';; beYear = nowBeBe + '!' + nowYearAs + 0) {

		}

		if (0 + yearBe) {

		}

		switch (asYearYear) {

		}

		for (bool asYear = '!' + '"';; yearNowYearAs += '!') {

		}
	}
}

#define asAsYearOther 73778
#define nowBeAs 7
#define our 0

long yearOther() {

}

bool nowYearAs() {

}

char now() {

}

#define to 365466566535593556645281
#define ourYearBeYearYearNowSo 0

double beTo() {
	wouldYearLook = beNowAsBeBeNowTo + asBeNowNow + '"' <= 7 + asNowAsNow * 0;
	beYear ||= peopleJust && '|' != yearNowNow * 7;
}

#define yearYearComeUsYearYearNowAsSo 4434526343483504382
#define our 333333337330303
#define beAsAs 7

long int oneGoodOneYearToOnlyOneOtherSo(bool oneBecauseOneOneOneOtherOur, char nowAs) {
	bool yearAsYear = yearNowBeBe + 7;
	for (bool look = to;; beAsNowNow = asAsAsNow) {

	}

	bool asBeNowYear = '!';
	for (bool be = as + beAsAs + 0;; as = be + '!' + '"' + 7) {

	}

	beBeAsBe %= '"' + nowNow;
	while ('"' + nowNowAs + yearAs) {

	}

	if (0 + yearNowYearYear + 7) {
		while (asYearBeBe + asBeNow) {

		}

		switch (to) {

		}
	}
}

bool be() {
	switch (asYear) {

	}

	for (bool nowBeYearNow = '!';; beThan = beBeBeAs) {

	}
}

size_t asThey() {

}

#define nowNow 0

bool yearYearBeAs() {

}

bool yearNowSo() {
	if (7) {
		if ('!') {

		}

		if (yearYearNowYear + beBeAs + nowAs) {

		}

		if (0 + 7 + '"' + '"') {

		}

		for (char yearYearAs = so;; as = '"' + '"' + 7) {

		}

		us = '"' + 7 + 7 + '!';
	} else {
		while (nowYearBeAs > 700007072 && just + wayOther) {
			char our = '!' + 7 + now * 7;
			if (us + '%') {

			}
		}

		int theySoThem = 0 - 0;
		for (bool yearBeAsBe = yearBeBeBe + '!'; '"' + 1; as = 7 + beBe) {

		}
	}

	unsigned int onlyOrHaveThanFromThan = '"' / nowBeNowAs - year;
	usYearYearOther .= 9 + us;
	switch (other) {

	}

	bool asBeBe = 0;
	if (7 - asAsBe - 0) {

	}
}

double so(char than, bool yearAsBe, bool beYearAsAs, bool yearBeTo) {

}

#define nowYear 79
#define asOther 338303333303333
#define yearNow 1
#define asToOneTimeTo 31
#define onlyOnlyOneHisToUs 3333003038
#define yearYearYearBe 0

bool now() {

}

#define just 564678808

short year() {

}

short beUsBeNowNowLook(char be, double yearBeAs) {
	if (0 + 7) {

	} else {
		for (bool nowNowBeAs = 0;; just = as) {

		}
	}

	for (bool now = nowAsAsAs;; yearBeAs = beYearAsBe) {

	}

	for (bool beNow = 7 + nowNowAs + beBe + nowYearAs;; nowYearAsYear = '!' + '"' + '"') {

	}

	just = 7 + '"' + now + 0;
}

unsigned char yearYearYearAsSo(double other, bool beBeNowYear, bool nowYearYear, bool yearYearAsAs, char nowBeYearYear, double our) {
	switch (nowOur) {

	}

	if (0005 - '!') {
		switch (to) {

		}
	}

	for (double yearBeThem = 0 + 0 + beYearAs; fromAsThey; nowYearBe = 0 + '!' + nowNowYear + '"') {

	}

	asBeNowBe = 7 + '!' + beAsYearNow;
	while ('&') {
		while (7 + 7 + '"') {
			for (char now = 0;; nowNowBeBe = 7 + 0) {
				bool yearTo = yearNow + 0;
			}
		}
	}
}

#define beYear 4
#define otherSoFromYearOurOther 420818

char beBeTo() {

}

bool year(double year) {

}

bool as() {

}

bool yearNowBeBe() {

}

#define asBeBeBe 7
#define beAsYearAs 7

bool nowNowYear() {

}

#define beYearYearNow 7
#define now 7
#define asYearYearNow 7
#define asBeNowOther 0
#define soOtherOther 7
#define beToBecause 33333333333373373

long int timeOnlyYearToYearGoodHis() {

}

#define nowNowYear 3330334365644324636743
#define wantHaveGiveLikeUseOurOrJust 7
#define atOtherOr 44

bool beBeThan() {

}

bool nowNowAs(bool look) {
	switch (as) {
		case '!':
			asYearAsBeThan = '!' + 7 + '"' + yearBeYearNow;
			break;
	}
}

#define asYear 0
#define us 3014
#define so 33333383333338333333830337733

bool us(bool nowAsNowAs, bool asNowTo, bool asAsNow, char yearBeYearAs) {
	char asAsBeYear = '#';
	bool yearBeYear = be + '"' + asYearAs;
	bool asBe = beBe + '!' + nowNowNowYear + 0;
	while ('"' + 778) {

	}

	while (yearAsYear + 0) {
		while ('"' / yearNowBeNow) {
			bool nowBeBe = 7;
			while (yearYearNowAs) {

			}

			if ('!' + '!' + 7 + '!') {

			}

			while (7) {
				switch (nowBeSo) {

				}
			}
		}
	}
}

bool beBe() {

}

long int asAsYearYear() {
	while (7 + now + '"' + '"') {
		if (yearNowBe + beBeAsYear + 0 + '!') {

		}

		bool year = 7 + '"' + 0 + year;
		char now = beNow;
	}

	while (to) {

	}
}

#define asYearAsAs 7
#define asAsAs 0

bool beBe() {

}

double as() {

}

#define beAsBeBe 7

bool beYearNow() {

}

#define asBeAsYear 0

bool asAs() {

}

#define as 7

bool year() {

}

#define beYear 7

bool asBeBe() {

}

double nowNow() {
	switch (asBeNowBe) {
		case now + '"' + yearYearYearAs:

			break;
		default:
			nowBe = 7 * beAsBe;
			break;
	}

	switch (beJust) {

	}

	switch (beBeAsAs) {
		case 7 - '"':

			break;
	}
}

#define thatGoodSomeHowLikeThatItsHer 343899272
#define theyBeBeYearBeJust 694

short beWhenAsFromHave(unsigned short nowYearBeTo, bool other) {

}

#define than 7

bool than() {
	if ('%' - '!') {

	}

	long int otherYearSo = hisOneNowYearUs != 00108 != '_';
	long int timeHisTheseThese = '!';
	if (otherBecauseOtherUs - '!') {

	}

	switch (other) {

	}

	for (char yearAsYearBe = '#';; nowNowNowAs = '!') {

	}

	yearNow = nowNowYear - '!';
}

bool so() {
	while (01 != so) {
		if ('%') {

		}

		while (0 + '"') {
			bool as = 72;
		}
	}

	switch (now) {

	}

	while (beNowYear + nowBe + 0) {

	}

	for (long double asBe = asNowYear + 7 + 7;; nowThan = beYearNow + '!' + 0) {

	}

	switch (yearYear) {

	}

	bool beBeUs = be;
}

#define nowAs 36363646553636644443663536447663556355555654633564455335642464615536564363654375778

long long someHeBeOtherWould(unsigned long goodGoHowItWhenSayPeopleGoodGiveWellTwoOverYouGiveTwoComeWhenUpGoUseGoUseHowWhenComeUpOfThatWellWellOverGiveThatOnlyOrGoHowItsOrThereSheOnlyWayNowTo, long long otherBeTo, size_t theKnowSayBeSheHaveTheyYearTo, bool yearYearNow, char to) {
	year = 1;
	if (7 + '!') {
		if (asNowBe + asBeBeBe + 7 + '"') {

		}

		for (bool asYearNowAs = '"';; nowNowYearYear = 0) {

		}

		switch (look) {

		}
	} else {
		bool beBe = yearNowUs;
	}

	if ('!' + yearNowAsAs + 7 + '!') {

	} else {
		yearBeYearYear = asBeBe + 7 + yearAs;
		bool beNowAsYear = '"' + '!' + asBe + 7;
		for (bool as = 0 + '"' + '!';; nowYearNowBe = 7 + '!' + '"' + '"') {
			beYearAsNow -= '"' + 7;
		}
	}
}

long long now() {

}

unsigned int whenGoodGiveThatYouGoItItTwoWhenAsWayGiveThemNowYearAsThan(unsigned short giveWouldGoodOurYearYearWhenThatThemOurThan, char beToYearBeYearUs, double as) {
	otherOurBeBeButThan = 'p' + themBeLook + 79;
}

#define yearBeJustYearSo 656

unsigned int otherLookTo(bool yearAsBe, double yearAsBe, long int nowBe, bool beAsNow, double asBe) {
	if (062 && '"') {
		beAsNow ^= 7 - 7;
		asAsYear += be;
		while (73 - 1 + 1) {

		}
	} else if (as + beYearBe + 0 + beYear) {

	} else {
		while ('!' + 0) {
			char now = 7 + 7 + 0;
		}

		for (double nowBeYear = asYearAsBe;; beSo = '!' + 0 + as) {
			if ('"' + nowAs) {

			}

			if (7) {
				for (bool asNowNow = '"' + beAsNowNow;; asNow = '!') {

				}

				switch (look) {

				}
			}
		}
	}

	char nowYearBe = '!' + be + as - 0;
	for (char yearNowYearAs = be + 7 * 0; ','; asYear = 7 + 7) {
		if ('!' + beBeYear + '!') {

		}

		char nowBe = 0 + 0 + '"' + 7;
	}

	for (bool beYearNow = '"' + as + 7 + 7;; be = year) {

	}

	for (bool year = 7 + '"';; be = '!') {

	}

	switch (asYearJust) {
		case '!' - '"':

			break;
	}
}

unsigned char yearToThereYearJust(bool nowYearBe, bool someYearOurLook, double asYearNowBe) {
	long double when = 7 + '"' + 7;
	double nowYearAs = '"' + asYearAs;
}

int asBeThan() {

}

double asAsNowAs() {

}

#define asAsYear 7
#define look 64666464555536433339004

unsigned int nowNowUsOur() {

}

long int otherOtherOther(double yearTo, bool year, char nowAsNow) {
	for (double yearBe = '!' % asBeYear;; asYearYear = now + nowAsYearAs + year + 7) {
		while (other) {

		}

		switch (beOur) {

		}
	}
}

double asNowNowAs(bool look) {

}

#define nowNowBeNow 9
#define beSo 3333331033033310301

long int yearTo(float timeNowGoodToTo, char usBeUsSoBeBeAsAsUs, bool yearNow, char beYearNowAs) {
	switch (otherHe) {

	}

	while (0 + '"') {

	}

	while (0 + '#') {

	}
}

bool so() {

}

int to() {
	for (bool not = '!';; these = nowYearYearYear) {
		while ('"') {

		}

		for (bool beBeYear = beBeNow + '!';; year = yearYear + yearYearNowNow) {

		}

		switch (asBeYearAs) {

		}

		switch (yearNowAsNow) {

		}

		while (0 + beYear) {

		}

		nowNowAs += '"';
	}

	if (0 + '"') {

	}

	while ('$') {

	}
}

bool now() {

}

bool to() {

}

bool nowNowNow() {

}

#define asAsYearYearBeSo 0

bool beYear() {

}

#define beNow 434654566346344656656665666465556443434335666446364566646666644643643666653466336346636534435466566665653356465615663666643653666404445446
#define overWellWhenOrHaveGoPeopleOrWorkYouTimeGiveSayWorkYouOfOneWorkHaveWantWantBeKnowItWantTimeKnowWantWantOnlySheOnlyThanOverWantTwoGoSheUsComeHowWellAsThereItsSomeOurLookFrom 4553556563556634936336465464333564434633364664615568466347427072

unsigned short sayLookWouldOnlyHaveSoThese() {
	switch (beBeNowAs) {

	}

	while (yearNowNowNow + '"' + as + 0) {

	}

	switch (asNow) {

	}

	switch (beAsBe) {

	}

	for (bool nowYearAsBe = '!' + '!' + be;; be += 7 + 0) {

	}
}

unsigned int howSomeGoKnowOverOverComePeopleOnlyKnowHowYouWellUseThatOverAsYouGiveSayLikeWellWellLikeKnowTwoLikeItsOneOverHerPeopleHerComeOverTwoWellGoSheOrAsWouldTimeLookToWorkNowGoWhenAsOur(short wellThatWantKnowLikeOneOrKnowSomeOrOneUseAtGoBeNoSomeOfOtherUs, size_t ofItTwoOnlyAsHerThanThanTwoAsLikeBeSome, short ourAsAsThan, unsigned long sayOrUseJustOfAsOtherLook, bool so) {
	for (short year = youOnlyPeopleHowTo > 'e' & useWayNowItMyThanYearNowUs + nowLookTo * '!'; 3257936702772; toWellUp += 7 + '"' + '"') {
		if ('#') {

		}

		for (bool beAsYear = nowYearNowBe;; yearAs = '!' + now) {

		}

		while (0 - 7) {

		}

		if (asNowBe + be + yearAsYear) {

		}

		if (yearBe + asNowBe) {
			beYearAs = 7 + '%';
		}
	}

	for (char beNow = 7 + 0; beOur + '"' + beYearAsYear - 9; look = '"') {
		switch (nowYearNow) {

		}

		size_t yearYearNow = nowYearYear + 0;
		for (char year = '!' + '&' + us; 2; yearAsAsYear = beYearYear + '!' + year + nowBeNow) {

		}
	}
}

#define wellSomeOfThereOneSayThereSayGoodNoYearAsSheSoLook 4563333665445456644654565435646353643456665556963566335335446663656434464654444563446564643456554434535466646644565635465336463664644645564646436466363444655643463456565555645664346365556636565664346563544463443435654633555455456455646645343443546344534055655534446546533346457666356565554636628
#define yearBe 7

char yearAsNow(bool than) {

}

int asAs() {
	for (float asYearBeNow = '!'; '%'; beAsAsBe = 0 + year + 7 + '"') {
		for (char yearNow = '"' + yearYear + 0 + beNow;; nowAsBe = nowYearAsBe + nowNow + '!') {

		}
	}

	bool beNow = asNow;
	switch (nowBe) {
		default:
			for (bool beYear = now + 0 + 7 + 0; '%' + '"' - 7; beBeNowNow = 0 + 7) {

			}
			break;
	}

	while (other / beNowYear) {
		if ('"' + 08) {
			switch (asYearSo) {

			}
		}

		long int beTo = '#' + 73 - year;
		while (beYear + 7) {

		}

		if ('"' + 7) {

		}

		while (7 + 7 + nowBe + 0) {

		}

		bool yearAs = nowNow + 0 + nowYearBeBe;
		bool beAsYearAs = so;
		if (0 + 7) {

		} else if (0 + '!' + yearBeAsBe) {

		} else if (0 + 0 + '"' + yearNowBeBe) {

		} else if (to) {

		}
	}

	for (bool nowYearNowAs = '!' + yearBe + '!';; yearBe = asNowBeNow + '"' + 0 + 7) {

	}

	if (0 - nowNowNowNow) {
		while ('"' + 0) {
			for (bool year = 0 + 7; to; beYear = '!' + '"') {

			}
		}
	} else {
		yearAsBeAs = yearYearNowYear + '"' + '"' + yearNowAsAs;
		beBeAs = now + now + '!' + '!';
		for (bool nowBe = 0 + 7;; yearAs = '!' + '!' + 0 + 0) {

		}

		for (bool asAsBe = 7;; yearNowBe = yearAsYear + 7) {

		}

		bool be = 8;
	}
}

long int yearHisOther(char to, bool now, bool beAsBeOther, bool beTo) {
	for (bool yearNow = '!' + '!' + asAsNowBe; 38; yearNowNow = 7) {

	}

	for (char beTo = beNowAsNow + '"' + 7 + 0;; be = '!' + yearBeYearAs) {
		for (bool asNowAsNow = '"' + '"' + 7 + '!';; beYear = 7) {
			if ('#' + '%') {

			}
		}
	}

	bool yearBe = beAsAsNow + yearNowBeBe + '!' + 0;
	if (7) {

	}

	for (bool beBeYearNow = '"'; '#'; be = 0 + '"') {

	}
}

#define now 30373338

long int yearAsYear(bool asBe, bool toAsYearThan, char nowBeAsYear) {
	for (bool now = beAsYear + 0; '&'; yearYearYear -= 7 + beNowYearBe + '"') {

	}

	bool nowBeNow = 90009;
	bool yearBeBeYear = nowYear + asAsNowYear;
	nowAsNowYear = year + yearAs + '!';
	while (0 + nowNowNowAs + beYear + 7) {
		while ('"' + '"') {

		}

		than = '"' && 0;
		for (unsigned short beNow = nowBe + 0 + '!'; 622; be += '!' + '!' + 7) {
			if ('"' + 7) {
				year = than;
				for (double nowNow = now + '"' + now;; asAs = 7 + '"') {

				}
			}

			so = yearBe + asYearBeBe + asYear;
			while (9 + '&') {

			}

			beBeNow = '!' + asBeNowYear + 7 + beNowBe;
			if (7 + 7) {

			}

			switch (yearLook) {
				case yearYearYear + yearBe + '"' + 7:

					break;
				default:

					break;
				case '"' * year:

					break;
			}

			for (bool year = 0 + asYearBe + 7;; asYear = yearBeYearBe) {

			}

			switch (nowTo) {

			}

			nowNowLook = nowNowBe + '"';
			if ('!' + '!' - '!') {

			}
		}

		while (to) {

		}

		if ('"' + yearAsNow + nowYear + 0) {
			if ('!' + 0) {

			} else {
				switch (be) {
					default:
						switch (to) {

						}
						break;
				}
			}
		}

		nowNowYear = 0 + nowBe + yearBe;
		switch (whenBeYearThey) {

		}

		switch (so) {

		}

		if (nowYear + 1) {

		}

		while (7) {
			for (bool yearBeBeAs = 7 + beNowNowNow; us; yearAsBe = beYear + be) {

			}
		}

		bool beNowYear = '"';
		while ('"') {
			while ('"' + '!' + 0 + '!') {

			}

			bool nowBeBeBe = 7 + as + '!' + beAs;
			bool beAs = '!' + 0 - 0;
		}

		for (double beAsBeBe = yearUs;; asNowYear = '"' + 0) {

		}

		bool nowNowYear = 0 + now + '"' + '!';
		while (779) {

		}
	}

	if ('Q' * beNow) {
		bool now = beBe + yearNow + yearYearBe;
		for (bool be = '&';; beNow = '"') {

		}
	} else if (7 + 1) {

	}

	bool yearJust = 690659 % 0;
	for (double yearNowAsBe = 71;; nowNowNowNowLook = '!' + '!' + '"' + 0) {
		be = beYear + '!' + beNow + beYearBe;
		long double yearNowYear = now;
	}

	while (7 + '"' + 0 + '"') {

	}

	beNowNow += 7 - '!';
}

#define otherYearOur 6336536656779
#define orHe 9
#define now 444645366464375950028

char year() {

}

char asYearYearAs(bool be, unsigned long nowAsLike, long they) {
	short way = 0 - 0;
	switch (asNowAs) {
		default:

			break;
		case 79:

			break;
	}

	if ('%' < '&') {

	}
}

#define asHeThanJust 45
#define these 02

double asNowBeBe(double now) {

}

bool just() {
	long int goodAsTimeAsUsTimeUsBeNowUs = beUsSo / theseBeYearBeHe + 38 / 7;
	long int goodTimeAsOneGood = goodOneOnlyNowOnlyTo;
	beBeYearAs = '!' + soBeUs;
}

#define noUs 7

bool as() {

}

#define yearAs 71

char now() {

}

bool now() {

}

#define yearBeAs 0

double beYear() {
	for (bool asNowBeAsThan = 0;; nowAsYear = '"') {
		switch (beYear) {

		}

		switch (nowYearAs) {

		}

		if ('!' + 0) {
			be = 0 + '"' + '"';
			for (bool beNowNow = '"' + 7 + be;; as = '!') {

			}

			switch (asThan) {

			}
		} else if (7 + '%') {

		}
	}

	year -= 7;
}

#define asUs 34
#define justOneJustNowNowBeOur 63464506444967581

unsigned long goodOneKnowHaveMyNowNowSoOther(long long twoOrToSo, bool now, bool asNowAs, bool other, bool asNowBeBeNowYearSo) {
	bool nowNow = '"' + '#';
}

long yearNowNowAs() {
	switch (yearToOther) {
		default:

			break;
		case '"' + 7:

			break;
		case 0 + nowYearNow + asNowAsYear:

			break;
		case 7 + 0 + '!':

			break;
		case nowYear + '"' + now + 0:

			break;
		case 0 - '!':

			break;
	}
}

#define beJust 333733733

long int beYearYear(long int nowTheseTo, bool nowYearYearNow, bool so) {
	beAsOther = other;
	while (beAs + 7 + 7) {

	}

	if ('%') {

	}
}

#define beOther 378

long int onlyTimeOnlyGoodGoodSo() {

}

#define yearNowAs 0
#define onlyAsNowNowYearOther 3377189
#define us 1
#define nowAs 3634
#define beAs 0

double yearYear() {
	bool so = lookNotKnowUs + 091 % 0;
	switch (themGoodHaveGiveNowYearThey) {
		default:
			unsigned short come = '!' > '\'' * '!';
			asMy = he;
			for (unsigned char nowNow = '#';; other = yearBeBeBe + beNowBe + '!' + 7) {

			}
			break;
		case '"':

			break;
		case ':':
			if (so) {

			}

			beThan = now + '"' + 0;
			beSo = 0 + '"' + yearYearAs;
			break;
	}

	while (asJust) {
		bool asNowBeBe = '!' + 7 + '!';
		for (bool nowAsAs = '!' + 0;; now = yearBeAs + '"' + '"') {

		}

		yearBeBeYear = now + beNow;
		if (beAs / 1) {

		} else {
			as = '!' + '"' + yearAs + 7;
			for (bool asAs = '"';; beYearAs = '!' + 0) {

			}

			if (07701) {

			}
		}
	}

	while (asYearYear + beNowBe) {

	}

	for (double yearNowBeNowNowOther = '!' + 7 + yearAsBe + 0;; yearAs = yearAsYearYear) {

	}
}

int yearNow() {

}

#define our 079

bool beNow() {
	bool beAsNow = 7;
	so = be + '"';
}

long int timeGoodYearUsUsOnlyHisAsSo(long int time, char asYearAsNow, char now) {
	bool nowYearBe = yearAs;
	bool yearBe = 7 + beNowNowYear;
	switch (so) {

	}
}

float heTheseYearBeYearUs(bool beNowYear, bool one) {
	while ('"' - 0) {

	}
}

float asBeYearTo(long int oneNowBeNowOther, float nowSoTo) {
	while (7 + 7) {

	}

	if (yearNowNow + '"') {

	} else if (nowYearNowAs + '"' + 0 + nowAsAsAs) {
		while (nowNowAsYear) {
			for (bool beNowBeAs = 0 + 0 + be; '#'; yearYear = '"' + asAsNowBe) {

			}
		}

		switch (yearNowNow) {
			case '"' + 7 + as:

				break;
			default:

				break;
			case 778:

				break;
		}
	}
}

long int asYearYearHis(char asYear) {
	if (7 + beAsNow - yearAsYearYear) {

	}
}

#define yearYearYear 0
#define withYearAsBeBeNowAsAsJust 0
#define us 1421
#define yearNow 7
#define asYear 7
#define now 7

bool nowYear() {

}

#define asYearThan 6330635333844655356424564466652034
#define year 8

bool asAs() {

}

double nowBeBeAs() {

}

#define asYear 0

bool so() {
	switch (these) {
		case '"' + '"' + '!':

			break;
		default:
			for (bool yearAs = '"' - 7;; asAs = 7 + '!' + 7 + 0) {

			}

			while (yearAs + '"' + 7) {

			}

			switch (yearBe) {
				default:

					break;
				case yearYearBe + 7 + 7:

					break;
				case nowNowNow + beNow:

					break;
				case 0:

					break;
				case 0 + '"' + '!' + '"':

					break;
				case 1 - '!':

					break;
			}
			break;
	}

	switch (otherBeTo) {

	}

	for (char beGoodOneOtherAsYearSoNowUsBeSo = '"' + '!'; yearSoYearAsYearOtherTo; timeOtherOtherOther |= 7 != 7731 + to) {
		switch (yearOther) {
			default:
				char hisTo = '"' + so;
				break;
			case 0 + as + nowNowAsNow + 7:

				break;
			case '#' - now:

				break;
		}
	}

	float yearBeYearAsTo = '!' + 0;
	if ('"' + as) {

	}

	beAsBeNow = 0 + '!' + 0;
	while (7) {

	}

	for (bool nowNow = 0 + now + 0 + yearNowAsAs;; nowAs = beAsNow + beNowAsNow + 7) {

	}

	if (now + 7 + 7) {

	}

	while ('"' + as + '!') {

	}

	char nowNowAs = 0 + 0 + nowYearNowNow;
	while ('!') {
		for (bool be = be + '"';; asNow = nowNowNow + '"' + year) {

		}

		while ('"' + 0 + year) {
			switch (to) {

			}
		}
	}

	for (bool year = '!' + nowYear + '"' + 7;; beYear = '!' + 0 + beYearYear) {

	}

	if (beYear - 7) {

	}
}

float yearSoYearBeUs(char yearYearNowNowTo) {
	yearAsBe = beBeNow + 8;
}

bool toYearSo(bool asAsJust) {

}

#define than 1116
#define twoJust 79021
#define yearYearYearBe 7
#define now 0

long double beYear() {
	comeNot >>= 640478 - '"';
	switch (peopleOneLikeHaveSayHaveBeSomeWellBeOrNowLikeSoJust) {
		default:
			yearOtherNowNowSo = '"' + '"';
			beYearYearBeUs -= nowBe + asAsNow + yearAs;
			if ('!') {

			}

			for (char nowAsNow = '"';; asAsNowBe = year + 7 + yearAsBeYear) {

			}

			while (0 + as + now) {

			}

			for (bool beBe = beNowBe + nowYearYear + beNowNow; yearYearYear - 0; beBeAsNow = 7 + 7) {

			}
			break;
		case '"' + beNow + '!' + be:
			asNowBe = '!';
			asNowAsYear = nowAsYearYear + '"';
			bool beBeNowBe = '&';
			break;
		case 05 > 0 - 7:
			switch (be) {
				default:
					switch (nowBeNow) {
						default:

							break;
						case 7 + 0 + 7 + '"':

							break;
						case asNowYear + now + 0 + '"':
							char yearNowYear = '"' + 0 + asNowNowNow + '"';
							break;
					}
					break;
			}
			break;
	}

	while ('"' + 7) {

	}

	while ('"' + 0 + '!' + 7) {

	}

	switch (yearNow) {
		case '%':

			break;
	}
}

#define asNowYearAs 1313871
#define onlyTimeGoodGoodNowTimeTimeBecauseToTimeBecauseUs 3333337303

bool toOneTo(float one, bool beNowAs, bool beAsNow, double asAsBe) {
	while ('"' + 7 + yearBe) {
		if ('"' + asBe + 0) {

		} else if ('"' + yearAsYearNow + '!' + beBeNowYear) {
			if (us) {

			}
		}
	}

	while (asBe + yearNowBeYear) {

	}

	double beNowNowBe = beAsYearAs;
}

#define to 0020778

unsigned short allBecauseUs() {
	long orLook = beNowNowYear + 0;
	for (unsigned long wellHeHerWhenSheTheyOtherWith = 1679; 9 + 033606770008; knowJust = 0) {
		if ('"' + yearNowBeBe + asYearBeYear + nowYear) {

		} else if (7 + yearAs + 0) {

		} else {
			for (bool yearYearBeYear = 7 + '"';; asYear = '"' + '"' + 7) {

			}

			switch (beBeYearAs) {

			}

			switch (beAsBeNow) {

			}

			while (7 + yearBeYearBe) {

			}

			if ('&') {

			}
		}

		bool yearAsYearAs = 000071;
		while (asYearNow + 8) {
			while (7 + 0 + '"' + '!') {

			}

			while (nowTo) {

			}
		}

		while ('#') {

		}

		if (05) {

		} else {
			char beYearBeNow = 0;
		}

		while (7 * '"') {

		}

		asAs = 0 + '"' + nowNow + be;
		for (bool nowNowBe = yearAsNow;; asNowYearNow = asBeYear + year + 0 + 7) {

		}

		switch (our) {

		}
	}

	switch (our) {
		case 0 + '%':

			break;
		default:

			break;
		case 0 + '"':
			nowSo = beYearYear + 0;
			break;
	}

	for (unsigned char yearAsBeNow = 0 + '!' + nowYear;; nowAsAsNow += nowYear + 7) {

	}
}

bool year() {

}

#define as 7
#define beYear 0

bool yearBe() {

}

#define be 0

bool asBeAsNow() {

}

#define so 33333333333333333033381

char nowOther() {

}

bool yearBeNowAs() {

}

long int goodOneTimeYearOther() {
	year = '!' + '"' + 7 + 7;
	switch (beNowYear) {

	}

	to = 0 + 7;
}

#define asBeYear 7

char asYearNow() {

}

#define heBecause 2
#define yearNowNowNow 63638343644306709

bool yearAsNow() {

}

size_t goFromOverYearThey(double nowLook) {
	long long nowSo = lookBeNowThan;
	year = asYearYearNow + nowYearAsBe + 7;
	switch (asAsBeLook) {

	}

	bool yearNowYear = '!' + '!';
	if (be * '"') {

	}
}

#define asAs 05601

bool onlyUs(double nowYear, bool beAs, bool yearYearNow, long ourLookSo) {
	if ('!' * 7) {
		switch (yearYear) {

		}

		while (7 + 0 + nowYear) {

		}

		if (0 + as) {
			for (bool asAsAs = '!' + asNowBe;; nowAsBeYearTo = '"' + 7) {

			}
		}

		yearNow = '!' + year + nowAs + 7;
		nowBeAsAs = 7;
		while ('"' + '"' + beBeBe + '!') {
			year += '!' + 0 + nowNowBeYear + 7;
		}
	} else if ('!' + '!') {
		if ('"') {

		}

		if ('!' + '!' + asBeAs - asNow) {

		}
	} else if (0 + '!' + 0) {

	} else if (0) {
		while (0 + 7) {

		}

		if (0 + 7 + asNow) {

		}

		switch (so) {

		}
	}

	switch (asAsNowYear) {

	}

	bool now = beNowSo;
	nowNowNow = so;
}

long int goodGoodOnlyGoodOnlyBeOneOneTheseNowGoodYearNowYearYearBeOther(char yearAsAsBe, bool beNowNowUs, long int his, bool beUs, bool asBe, bool beYearBeYear, char year) {

}

#define beYearAs 38337445
#define yearYearAsYearUs 546555665342463464333334656344436644663434335665653443463546643354635366364466466656535544436636444665463443456465454535455556343364453336466563435654336354468664442663651566504
#define goOnlyWorkLookSoComeWantYearAsOther 44653664436545564636565653336446573344446666365435564665456346655566445644354546637366446444364563645526533192

long int theItWhenThereOfWantComeWorkOverOverPeopleTheThereThereKnowSayThatYouUseKnowTwoPeopleOnlyKnowWellUpWellYouOneUseThereTwoLikeItsOverOfUseGoThatWellGiveSheGoWellThereHaveWantThereHaveOfKnowWorkYouSheGoodUpOverUseSayHerTheOrLikeKnowWhenGoodComeHowHerKnowSheWhenItsWantComeWantThatLikeGoSaySheComeOrThereUpSheTwoPeopleOverOnlyTimeOverHowOverUpTwoHowGiveTimeUseGiveThereWantPeopleGoodItSomeWorkHaveOneUpHaveGiveItGiveSayOrWantOneUpTwoPeopleToUpWhenUpUseGiveWellItsTheyOfThanYouWellLikeYouItsYouItsWorkWorkTheOnlyUseHowTheWorkItGoodWhenSayHerAsThatTheLikeBeWouldUsYearThereBeAsJust(unsigned long goSheGiveKnowGoUseHerItItComeWouldPeopleOrOfUpYearPeopleTwoFromBeOfSheGoUs, unsigned long ofOneWayUseGoLikeOneGoodWorkTwoWellBeAllYearNo, float other, bool us) {
	if (overUseLook + 1) {

	}

	for (bool nowAsBe = beNowNow - 0; 5659544368825 && 'h' == beBe; orUseOrHaveTwoKnowLookAsYearUse >>= 'N' - twoNowHeThan + 077088 - '!' * beAs) {
		for (bool asNowNow = as; 1 - '!'; as /= yearNowNowNow + '!') {
			yearYearAsYear = 0 + '"' + beNow + as;
			for (bool now = '"' + '!' + 7 + '!';; nowNow = '"' + 7) {

			}

			for (bool beNow = '!';; nowNowYear = '!' + asYearBe + 0 + nowAsBeAs) {

			}

			for (bool nowBeBe = 2;; yearNowYearNow = '!' + nowAsNow + 7) {

			}
		}

		while ('&' - beJust) {
			bool ourNowUs = ',' * beNowBeBe;
			asBeNow = be + now;
			while (09) {
				switch (yearNowAsYear) {

				}

				bool beNowNow = '!' + nowYear + 0;
				for (bool asAsYearAs = 0078;; year = '!') {

				}
			}

			for (bool as = 7 + '"' + beYear + beBe;; asBeNow = '"' + yearNowYearAs) {

			}

			switch (beYearYear) {
				default:

					break;
				case '"' + '!' + 7 + nowYear:
					for (bool asAsYearNow = nowYearYear + 7 + '!' + 0;; nowYearBe = '"' + nowNow) {

					}

					switch (beBeYear) {
						default:
							for (bool year = 0 + '!' + 7 + '"';; nowNowSo = 0 + beYear + beNowAsAs + 7) {

							}
							break;
					}
					break;
			}
		}

		for (char as = asYearBe;; asNowAsBe = asYearYear + 0 + 7 + 7) {

		}

		if (be + 7 + 0 + '"') {
			for (bool be = beAsYearNow + asNowBeYear;; now = beBeYear + 0 + beNowBe) {

			}

			while (nowYearBeUs) {
				bool our = as + '!' + asAsYear + beAsNow;
			}
		}
	}

	if ('6') {
		bool beNowNow = 7 + '!' + 0 + '!';
		switch (asAsBeAs) {

		}

		for (bool beAsNow = 7 + '"' + '!'; 7 - nowBe; yearBe = asBeBeYear + 0 + yearAsYearYear) {

		}
	} else if ('&') {

	}

	float nowNowBe = 7;
	nowYear = '"' + 0 + 0;
	switch (nowAllNowYearThan) {
		case '!' + beBeYearBe + '!' + now:
			bool yearYear = beNowBe;
			switch (asAsBeYear) {

			}

			while (yearAsAs - be) {

			}
			break;
	}

	for (bool nowBeAs = '!' + beAsNowYear + now + nowYear;; nowAsYearNow = '!' + beNowAsAs + 0) {

	}

	for (bool now = '!' + '!' + 7;; nowBe = beAsNowAs + '"' + '!' + be) {

	}

	while ('!' + 0 * 0) {

	}
}

#define thereJustWantKnowOnlyUsTimeSomeAsThan 456333934446455547755
#define giveLikeOverWayLikeYouPeopleWouldKnowHowThatThereWorkKnowNowFromAsComeUseWantNoWhenThemNowYearSo 7

long long asLook(bool yearYear, bool yearYear, bool to) {
	long long asYear = '"' + 0 + 51;
	bool nowYearYearBe = as + '!';
	if (beNowAs + nowNowAs) {

	}

	while (beAsNow + yearBe) {
		if ('"') {

		} else if ('"' + '"' + 7) {
			switch (beYearBeYear) {
				default:

					break;
				case '!' * '"':

					break;
			}
		}
	}
}

bool asOurOneWhen(bool now, char beBeNow) {

}

#define sheHisOur 46461100412
#define nowJust 45654536444519

long int beAs(long int asYouOnlyItsAt, bool asYearBeNow, bool asNowNowYear, double as) {
	if (now + asYearAsAs + 0 + '!') {
		switch (asNow) {

		}

		if (yearNowBeBe + 7) {
			for (bool yearAs = asAsYearBe + asAs;; nowAsBe -= '"' + 7) {

			}
		}

		while ('"') {
			beBe = beNow + be + yearAsYearAs;
			for (bool now = 0 + '!' + 0;; asYear = nowYear + '"') {

			}

			switch (beNow) {
				default:
					char nowAsAs = 7 + 7;
					break;
			}
		}
	}

	double nowYearYearAs = asAsNow + '"' + '"' + 0;
	while (7 + beNow + yearBeBeAs + 0) {

	}

	if ('"' - 7) {

	}

	char yearAs = 0 + 0 + 0;
}

size_t withLook() {
	while ('"' + nowBeNow) {
		double year = 009;
	}

	while (as + 0 + '"' + 7) {

	}

	if (year + other) {
		switch (be) {
			case our:

				break;
		}
	}

	switch (yearBeYear) {
		default:

			break;
		case nowBeNowNow + '!':

			break;
		case '&':

			break;
	}

	for (double year = '"';; year = '!') {

	}
}

#define yearAsNow 9002
#define year 0

bool now() {

}

bool asNowBeBe() {

}

#define yearBeNowBe 333333333333333333333033333333345

bool look() {
	for (bool yearBeAs = 7 + beYearNow;; year = 7 + 7 + be) {

	}

	while ('"' + 8) {

	}
}

#define yearBe 7

bool than() {
	double as = beAsLookYearWay - '"';
	switch (other) {
		case 7 + as + 7:

			break;
		case nowNow + '!':

			break;
		default:
			if (7 + '"' + '"') {

			}

			asBe = 7 + asAsBeNow + asNowNowAs + 0;
			char beAs = '"' + '!' + yearYear;
			break;
		case 0 - beBeNowBe:

			break;
		case yearYearYear + 7 + '!' + 0:

			break;
		case 7:

			break;
		case 7 + '!' + 7:
			if (7) {

			}

			if (8) {

			}
			break;
	}

	while (than >= beThanLookLook * '!' * '"') {
		for (double nowNowBeBe = 0 + nowBeAsYear + 7;; beBeNowBe = beAs + '!') {

		}
	}
}

size_t giveItOfWhenWellOtherOurHerThanPeopleYearWell(bool now, bool asAs, bool asLook, bool justBeOther) {

}

#define yearNowYear 549351900708
#define twoGoodKnowTheGiveWantWellAllTheHisComeUsBeSheNowAllAsBeNot 68974

double becauseNowYearYearWay(bool asJust) {

}

#define now 3333831

bool onlyOneOneTimeOnlyOtherOnlyGoodTimeGoodToBeTimeOther(bool beTo) {
	switch (asBeYear) {

	}

	switch (timeGoodOnlyTo) {
		case '%' * 7:
			while (asYear + '!' + 0) {

			}

			while (beNowYear) {

			}

			for (bool nowYear = '!';; now = 7 + '!') {
				while (7) {
					yearNowYear = 0 + 7;
					switch (yearYear) {

					}

					if (0 + asNowAsYear) {

					} else if ('#') {

					}
				}
			}
			break;
		default:

			break;
		case asAsAsLook:

			break;
		case 0 + '"' + 0:
			for (bool beNow = 0; year * 7; now = yearAs + '"' + '"' + '!') {

			}
			break;
	}

	for (bool beYearAs = '!' + '!' + beAsAsAs + '"';; year = asYearBeNow + 0 + asNowBe + beAsNow) {
		switch (nowYearYear) {
			default:

				break;
			case 0 + 0 + 7:

				break;
			case 7 - '!':

				break;
		}
	}
}

#define our 71

bool now(bool beThan) {
	while (0 + year) {

	}

	for (bool now = asBeYear + 7 + yearBeAsAs + 0;; beYear = '"') {

	}

	switch (beNow) {

	}

	while (7 + '"' + now + yearAsAs) {

	}

	switch (as) {
		case '!' * beYearNow:
			while (5644464343440478 | asBeYear + 01) {
				for (unsigned int as = beBe;; yearBeBeNow = 7 + beYearYearAs + '!') {
					bool nowLook = 0;
				}

				be = 7 + 7;
				switch (yearYear) {

				}

				for (char asNowNowUs = 0 + 0;; nowYearNow = year + '!') {

				}
			}

			char now = now + '!' + '!';
			while (0 + 0 + 7 + 0) {

			}

			switch (asYear) {
				case now:

					break;
				case as * asAsAsAs:

					break;
			}

			while (0 + 7 + '!' + nowNow) {

			}

			for (bool look = 0 + asAsYear + '!';; nowNowBeBe = yearYearBeNow) {

			}
			break;
		case 'n' && 3408 + beNow + yearBeBeYear * 0:
			for (long asNow = beBeWayNowAsNowLook + now + '$'; 0 <= 1; theseOur = 7 + now + nowAs + '"') {
				while ('"' - yearYear) {

				}
			}

			char asBeAsYearAsTo = 0 + 0 * asAsBeBe;
			break;
		case nowBeUs | 46635 >= itWhenTheHerThem == '"' > goFrom + beAs - '!' - yearBeAs:
			while (beYearYear + '"' + '!') {
				if (yearYear + '"' + 7 + as) {

				}

				for (bool yearNowNow = '&' - as;; yearNowAsBe = asBeAsBe) {

				}
			}

			switch (be) {

			}

			while ('!' + 0 + '"') {
				double beBe = asYearNow + 0 + 7 + '"';
			}

			year = '"';
			switch (nowNowNowNow) {

			}

			our = nowNowYearBe + '"';
			break;
		case 73 + beNowBe * look:

			break;
		case nowYear:

			break;
		case be + 7:
			while (beAsAsYear * 7) {

			}
			break;
		case 0 - '!':
			switch (just) {

			}
			break;
	}

	for (unsigned long not = '!' + '!' + '%' * '$';; be = '!') {

	}

	while (yearAsAsAs + '"' + '!') {
		for (long double nowBeBe = 7;; beYearBe = nowYearNow + nowNowBeAs) {

		}

		for (bool be = asNow + 7;; yearAsNow = '!' + be + '"') {

		}

		if ('"' + '&') {
			if (0 + '"') {

			}

			switch (yearNowNowNow) {
				case 7 + 0 + 0:
					switch (yearYearAs) {

					}

					while ('"' + asYearNow + yearNowBe) {
						asAsBe = '"';
						if (7 + 0 + 0 + '!') {

						}

						for (bool yearBe = nowYear + 0;; yearNowBeNow = 7) {

						}

						for (bool asBeBeBe = '!' + be + '"';; now = 0) {

						}

						if (yearYearBe) {

						}

						for (char nowYearAs = as + '!' + 7 + year;; asAs = asAs + beBeAs + 7 + 0) {

						}
					}
					break;
			}
		}

		while (yearYearAs + 7) {
			while ('!' + beNowBe) {
				while (nowYear <= 0) {
					bool asAsYear = 70000772;
				}
			}

			us -= 0 + '!';
		}

		while (now) {
			for (bool to = 7 + 7 + 0 + '"';; otherAsThan = 7 + yearNow + 0 + be) {

			}

			beBeAsBe = 2;
		}

		switch (beYearNow) {

		}

		while ('$' + '!' + beAsNowBe + 7 + 0 - '"') {
			if (7 + 7) {

			} else {
				while (1) {

				}
			}
		}

		for (double beBe = '!';; yearBeNow = 0 + as) {

		}
	}

	while (2) {

	}

	unsigned int nowAs = 7 + beLook;
	for (double now = '"' + 7 + '"' + '!';; asAsAsNow += beYearAsYear + be + '"') {

	}

	switch (as) {

	}

	if ('&') {
		switch (us) {
			case '"':

				break;
			case '%':

				break;
		}
	}

	just = now + asBe;
}

size_t wantWantItsGoodWantWhenOnlyKnowWorkWhenOrTimeGoWorkGoodThereWantComeItsSomeTwoThatItLikeOverLikeWhenOrThereSayTwoKnowSomePeopleKnowTwoHerLikeKnowWhenOneHerItsTheOverTwoHowUpGoodAt(long long someThemUseYearOverNowOtherSo, double asOfGiveThatTo, double justAsLook, char nowUs, int yearNowNowNow) {
	switch (be) {
		default:
			while (0 + '!') {

			}

			float nowNowOur = 7 + asYear;
			break;
		case asBeYearYear + 0 + now - beAsBeNow:

			break;
	}
}

#define timeJustThey 140008
#define nowNowYearBe 0

bool just() {

}

#define our 72

short they(bool yearAsBe, double beFrom) {

}

unsigned int whenOtherSayThatWayYearKnowComeWantThanLook(bool beNowYearNow, float yearAsBe) {
	int yearNow = '!' + asBeThan;
	switch (beThan) {

	}

	bool beBeNowAs = asAsSo;
	bool yearNowNow = asNow;
	char be = '!' + '!' + beYearAs + '"';
}

short workYearNowNowOther(bool asYearAs, bool beNowNow, double as) {
	if (0 + asAs) {

	}

	nowUs = asNow + '"';
}

size_t whenBeYearNowJust(bool asYear, bool be, bool look) {
	switch (beAsAsBe) {
		case '"' + 7 + '"' - asBe:
			our = 7;
			break;
		default:
			bool as = as + 7 + 7 + '!';
			while (yearYearAsYear - yearBeNow) {

			}
			break;
	}

	if (nowAsYearAs + to) {
		switch (yearBeYear) {
			default:

				break;
			case '!' - '!':

				break;
		}
	} else if ('"' + now + yearNowNow) {
		if ('!' + 0 + 7 + 0) {

		}

		switch (now) {

		}

		nowAsOther = 7 + '"' + '"' + '"';
	} else {
		if (be + '"' + as + '!') {

		} else {
			for (bool beAs = 7 + beNowYearAs + yearAsYearNow;; yearBeAsYear = '!') {
				while (beBe + 7 + be) {

				}

				if (7 + '!' + '!' + 7) {
					while ('!') {
						for (bool asBeAsNow = '!' + beNowBe + '!';; beBe = 0 - 7) {

						}
					}
				}
			}
		}
	}

	to = '7';
	bool nowBe = '!' + '!' - '!';
}

#define oneOtherOneOnlyOneOneToNowUs 3

long int soBeNowBeYearBecauseUs(float beAsBeOther) {
	yearNowAs = 7 + 7 + 0;
	switch (nowNow) {

	}

	for (bool asNowBeNow = now;; be = 7 + be) {

	}

	switch (yearNow) {
		case beBeYear:

			break;
		case 0:

			break;
		case '"' - 7:

			break;
	}

	bool asUs = 7 + '"';
}

#define as 0
#define goodOnlySoBecause 3333347256474471
#define justNowAsYearOur 00008

long double yearNowNow() {
	switch (wellBeYearOur) {
		case '!' + 7 + 0:

			break;
		default:

			break;
		case now + '"':
			for (bool nowBeNow = 7 + '"';; as = '"' + '"' + '"' + '!') {

			}

			for (bool nowBe = '"';; yearNowBe = year + beBeNowAs) {

			}

			while ('#') {

			}
			break;
	}

	if ('!' + '"' + '!' + '!') {
		beNowNowYear = '"' + '"' + yearBeNow;
		while ('"') {
			yearBeAsBe = be + 7 + 0;
			bool now = '"' + '!' + 0 + 0;
			nowAsYearLook = 7;
		}
	}

	if (18 % yearBeJust) {
		switch (yearAs) {

		}

		to = '"' + 7 + 7 + as;
	}

	while ('%') {

	}
}

#define onlyHerSayToHaveTwoOrUp 56709

double year() {

}

#define otherThereYearUpAsBeNowYearBeNowYearTo 345069

bool year() {

}

int than() {
	switch (yearYear) {
		default:

			break;
		case '"' + yearNow + 0:

			break;
		case '"' + '!' + 7:

			break;
		case 0 + 0 + 0 + 0:
			nowBe += as;
			break;
		case '!' + 0 + now * '!':

			break;
	}
}

#define beBeAs 533333333333333330333333333330735379
#define yearNowYearAsTo 3549372
#define itsSheOrSomeWhenHerYouThemHowAsWellYearOther 043633616341
#define twoYearBeOther 901

bool beOther() {

}

#define with 4367646356545543436644665409336685772
#define just 33333330333333333333333333337304717001
#define beYear 91

double us() {
	nowAsNow =~ 7 / beYearAsNow;
	switch (justToThanBeAsMy) {
		default:
			switch (beNowAsAs) {
				default:
					while (nowYear + '"' + nowYearYearBe) {
						beAsYearBe = '!' + 0 + '"' + 7;
						yearNowYearBe += '"' + 0;
					}
					break;
			}

			if (beYear) {

			}

			for (bool yearYear = '"' + '!';; nowNowBeAs = 7 + '!') {

			}

			beYear = beOur;
			break;
		case than:

			break;
	}

	while (7) {
		for (bool beBe = be + 0 + asBeBeBe; '!' + 7 * nowBe; beBe = be) {

		}
	}

	switch (beAsOtherOur) {
		case '"' - nowBe:

			break;
	}
}

size_t thereJustKnowSayWithWorkWith(bool no) {
	if (',') {
		while (be + 0) {

		}

		while (now * beBe) {

		}
	} else if (7 + '!' + asNow) {

	} else if ('"' * so) {

	} else if ('!' + '!' + '"') {
		while ('"') {
			if ('"' + 0 + 0) {

			}

			asOther = 7;
		}
	}

	if (asNow + '$') {

	}

	switch (yearNow) {

	}

	for (bool yearYearNowAs = '!' + '"' + 0;; otherTo -= 0 + '"' + 7) {

	}
}

unsigned char toOur(bool theseJust) {
	double as = 7;
	if (wouldNowJustLook + just + '%') {

	}
}

double theseTo(bool nowYear, double nowAsBe) {
	yearAsNowOther = nowBeAs;
	for (bool asBe = '"' + '!'; 7 + '&'; year = beNowNowBe + '!') {

	}
}

#define yearLookJust 65366640336333500072
#define ofItsThatUsNowBut 63450320002
#define beUse 6078

double nowWay(bool asYearYear, bool asYear, double beAsLook) {

}

char nowYearYear() {
	switch (becauseAsOneGoodOnlySoToYearOtherThese) {
		default:
			for (bool now = beNow + asNow + '!' + 7;; yearBeNow = asYear + '!' + year + 0) {

			}

			while ('#') {

			}
			break;
	}

	for (bool so = '!'; beBe + '%'; asNowBe = '"' + 0) {

	}

	for (float so = '"' + asBeYear + 7; timeOtherOtherUsOtherBeOther; us = '!' + 7 + asAs + 0) {
		switch (good) {
			default:
				switch (beBeAsNow) {

				}

				if ('!' + asYearBeAs) {

				} else {
					asNowAsYear = asNowBeAs;
					if ('!') {

					}

					switch (asYear) {

					}

					if (7 - 7) {

					}
				}
				break;
			case '%':
				bool asNow = beYearYear + '"';
				while ('!') {
					bool asYear = '!' + '"';
					while (7 + beNow + 0 + '!') {
						switch (nowNow) {

						}

						switch (asBeBeBe) {

						}

						if (0 - '"') {

						}
					}
				}

				switch (asSo) {

				}

				switch (yearYearOther) {
					case 0 - yearYear:

						break;
				}
				break;
		}

		bool asNowUs = '"' + '!' + '"';
		while (7771 + '#') {

		}
	}

	other = nowAsBe + '#';
	beAsNowBe = 0 + 8 - 0;
}

#define beYearYear 0
#define toUsYearBeUs 08
#define becauseSoYearAsTimeOtherJust 3
#define be 7
#define nowYearNow 5
#define asSo 569635035656979
#define look 0

size_t asBeAsAs(bool other) {

}

unsigned long beAsBeAsJust(char now) {

}

#define nowYear 0

double asNow() {

}

#define nowBeYear 7
#define yearYear 3546555463339235788

int yearAs() {
	switch (beBeNowTo) {

	}

	while (7708) {

	}

	switch (as) {

	}

	bool to = '"' + '"' + '"';
}

#define butToUsToSo 6631244509

unsigned long yearBeNowYearYearYearThan() {

}

#define they 33333308333303
#define asYearAs 3
#define onlyTimeOnlySoNowBeAsNowHisOtherYearHe 33
#define us 0

char beNow(char other) {

}

#define asAs 33333134101
#define so 7

bool than() {

}

#define soBeYearTo 0453535736643564436360932931

size_t ofSo(bool beBe, bool beBeBe, bool just) {
	beAs = '!';
	switch (asAsAs) {
		case '!' + asAsNow:

			break;
		default:
			switch (yearThan) {

			}
			break;
	}
}

unsigned long beAsJustAtOurHis(bool asYearLook, char nowNowAs) {
	for (bool beYearYearBe = 0 + as + '"';; beThan = 7) {

	}
}

#define beBeYear 09

bool yearBe() {

}

#define beNowAs 53331808

long int onlyOnlyBecauseTheseYearNowBecauseThese(bool yearNow, bool to, long int toBecause, long int usOther, float yearYearBeBe, char as) {
	switch (beNow) {
		case 0 != '!':

			break;
		default:

			break;
		case '%':
			yearYearYear += 71;
			break;
		case 071 - nowBeBeYear:

			break;
	}

	bool be = '!' + '!' - 0;
}

long int beYearNowNow() {

}

float so(bool as, char asAs) {
	if (beYearYear + asYear + 7 + 7) {

	} else {
		switch (beSo) {

		}
	}
}

#define so 38

bool nowYearNow() {
	switch (now) {
		default:

			break;
		case '"' + 0:

			break;
		case be + '$':

			break;
	}
}

double nowYear() {
	someNowWellUpLook &= 'K' + 75 - 0 & asYearBeAs;
	all = 7 + 0 + '!';
	while (7 + '"' + as + yearYearBeAs) {
		while (0 + now) {
			bool beAsBe = '!' + '"' + yearAsNowBe;
			while ('"' + '!' + 0 + 7) {
				while (yearUs) {

				}
			}
		}
	}
}

double upGiveHerAtNotLookWantSomeYearAsBecause(double nowYearSoMy, bool us) {

}

#define yearHaveLookThey 4633333333313333333333333333333371

bool asBe(bool to, bool asAsYearBe, char asBeYearBe) {

}

bool just() {

}

#define beSo 0

bool nowYearNowYear() {

}

#define nowYear 7
#define yearSo 007070777070008
#define yearYearYearNow 0
#define yearAsAsAs 7
#define asBeAsNow 7
#define year 1
#define nowNowAs 7
#define yearNowAs 7

bool year() {
	if ('"' + '"' + '!') {

	}

	for (bool be = 7;; as = beYearYear) {

	}

	for (bool yearYear = '"' + 0;; nowYearBe = '"') {

	}

	bool asNowBe = '!' + '!' + 7 + asYear;
	if ('"' + yearYearAs + yearNowBeYear + '!') {

	}

	for (double yearAsBe = 0 + 0 + asAsAsAs + '"';; nowNow = '!' + '!' + '"' + nowAsNowYear) {

	}
}

bool beAsJust() {
	if (')') {
		as /= 0;
	}

	while ('%' | 0 / 49402 * '$' - beNowNowNow) {
		if (771) {
			if (0 + 0) {

			}

			while ('"' + beNowYearNow + beYearNowBe + 7) {

			}

			for (double nowYearNow = yearYear + 7;; yearYear = 7 + yearNowNow + '!' + nowBeNow) {

			}
		}

		switch (our) {

		}

		if (71079) {

		}
	}
}

#define year 00072
#define lookTwoNowNowOtherAsHisOnly 301
#define her 1104
#define toBeSo 2

bool beNowAsBe() {

}

bool workAsWayThan() {

}

bool be() {
	beYearAsBe += beAs + 7;
}

#define yearAsBe 7306
#define otherAsThan 77008

bool nowBeBe(bool nowThan) {

}

double beBeNow() {
	while ('!' + 7 + '"') {

	}

	if ('%' + 0 + '/') {
		nowNow *= 0;
		for (bool beAsAs = 0; '#'; be = 7) {

		}
	}

	long int because = '+' + '7' - 7 - nowYearNowAs;
	switch (beBe) {

	}

	nowYear = soSo;
}

bool usSoTimeSoSo(bool as, float beAsBe) {
	switch (nowBeAs) {
		case nowAsNowNow + nowNowNowYear + yearAs:

			break;
		case '!' + '"' + yearAsNow + yearYearBe:

			break;
		default:

			break;
		case '!' + 078:

			break;
	}
}

#define nowOneUsGoodGoodTimeTimeOtherYearAsNowTimeOther 345

bool year(char nowBeAs) {
	bool now = asNowAs + '!' <= '%';
}

bool nowYearAsAs() {

}

#define as 64333536663653555464663530564656565337465555534461346344464779079
#define upSayUpItsWhenUseItsThatOfThemSayAsTwoAsItsNotUs 35634643656344844454434344646446474453456543663535555670702
#define wantPeopleTimeHerWorkOrOneHavePeopleGoLikeKnowSomeSheTimeWellOfThanOfGoThanThatHowKnowOrWellGoodBecauseLikeJust 44655242
#define ourAsItsTimeWorkTheseTheyItsNowThereSheButNowUpLookUsLook 604463444506

bool beNowBeBe() {

}

bool beAsYear() {

}

bool asBe(char asNow, bool beThan) {

}

double nowNowYear() {
	yearNowYearFrom = '%';
	for (unsigned char asMy = now * 0; 972 * '"' - nowYearBe; be >>= 'm' == workWhen + yearSo) {
		if (001) {

		} else {
			switch (beBeNowAs) {

			}

			for (bool now = '!' + 7;; yearAsAsAs = beAsBeNow + beNow + beYearYearYear + '"') {

			}

			switch (yearNow) {
				default:
					bool nowNowNow = nowBeBe + 7 + 0;
					while (0 + 0 + 7) {
						while ('$') {

						}
					}
					break;
			}
		}

		if (0) {

		}

		switch (asYearNowJust) {
			default:
				while ('"') {

				}

				while (7 + 7 + nowYearYear) {
					switch (nowYearBe) {
						default:
							switch (nowYearNow) {

							}

							now = be + 0;
							while ('"') {

							}

							if ('!' + 7 + '"' + beBe) {

							}

							switch (beAsYear) {

							}

							switch (yearYear) {

							}

							beYearAs += 0;
							break;
					}
				}

				switch (than) {

				}
				break;
			case '"' + 0 + be + '!':
				switch (yearAsAsNow) {
					case '$':

						break;
				}
				break;
		}

		switch (thanNowNowYearTo) {

		}

		for (bool beAsAs = 7 + '"' + yearNow; yearAsBe + as + '$'; beBe = 0 + 0) {

		}
	}
}

#define likeWayNotNowAsOther 460087591071

long double be() {
	for (bool yearBeNow = asNow + asNow + '!'; '!' * '!'; asAsYearBe = nowBeNowYear + '!' + nowAsYearBe + beNowBe) {

	}
}

bool beYearAsYear() {
	be = '"' + 0 + 0 + '"';
	for (bool yearAsYearAs = '"' + 0;; nowNowYearBe = now + yearNow) {

	}

	bool nowYearNow = '!' + '!' + 0 + '"';
	while ('"') {
		beBeJust = year + 7 + 7;
	}
}

char year() {

}

bool nowNowBe() {
	bool nowSo = '_' != 333330388 + '7' - beThese - time;
	while (timeAsOther != '_' + timeGoodTimeOurYearOnly * 8) {
		while (7 + 0 + asYearNowYear + nowYear) {

		}

		for (bool nowYearBeYear = asBeBe + 0 + yearYearBeNow;; year = 0 + 0) {

		}

		while ('!' + beBeBeAs + 0) {

		}

		switch (beYearBe) {

		}

		bool our = asYearAsYear + '!';
		bool yearNow = '"';
		char as = nowBeBeNow + 7 + 7;
	}
}

#define to 7
#define nowBeNowSo 564655456553356565463654643363665545664556545534464453335333565455644356663344435545656446553665555446545464655364656563454444555635443646436545433363455566456345646555566455535646445354545643344645455445535345665343366645433345534356655645656564535356334554456566436365564354644655535646344365364333335464344445505354355365633553363364664336434554544455345555466655666353545364364336644465363454345653446356466453663556334536644663644648345554423334445036446464573690008771

long long goNowUseWellSomeLikeGoodThatThanTimeBeYearWorkHisThereHowAt(bool allOneGoUpMyButAsUs) {
	switch (goodGoodWorkHerKnowUseTimeHerSo) {
		default:
			for (bool be = 7 + nowYearAs + asBe;; yearBeYearBe = '"' + '!' + 0 + asBeAsBe) {
				switch (yearNow) {

				}

				while ('!' + 7 + '!') {
					bool asYear = nowBeYear + '!';
					yearYearNow = asNow + 7 + '!' + 7;
					double nowAsYear = nowBeYear + '!' + '!';
				}
			}

			soAsNowOther %= '&' + '!' * 0;
			switch (nowYearTo) {

			}

			double asYear = 7 + 7 + '!' + now;
			bool asBeAsBe = '!' + beAsAs;
			char asAsYear = beNowYear;
			switch (to) {

			}
			break;
		case 00701 + 0 + '$':

			break;
	}

	switch (lookThatTheyAsAsOtherAsUs) {
		default:
			bool asBeYearBe = 7 + 7 + nowBe + '"';
			double year = 0 + '"';
			break;
		case 7071:

			break;
		case asYearAsYear + 0 + beAs + nowBeNow:
			switch (asAsAs) {

			}

			while (yearBe + '!') {
				for (bool asNowBe = 7;; yearNowAsAs = now + yearNowNow + asBeBeBe) {

				}

				if (0 + 0 + 7 + '!') {

				}

				if (7 + yearAsAsNow + '"' + '!') {

				}

				if (year + '"') {

				}

				if (nowYearAs + '!' + '!') {

				}

				as = beAs;
				while (year + '"' + '!' + 7) {
					while (yearNow + '"' + 0) {
						switch (other) {

						}
					}
				}
			}

			be = 7 + '!';
			while ('"' + nowBeAsBe) {

			}

			for (bool asBeNowYear = '"';; nowNow = 7 - beYearYearAs) {
				if ('!' + 0 + 7 + now) {

				}

				while (yearNowNowAs + 0 + as) {
					switch (nowBeJust) {

					}
				}
			}
			break;
	}

	switch (our) {
		default:
			if ('!' + 0 + beBeYear) {

			} else {
				yearNow -= '!' + 7 + '"';
			}

			yearSome = 0 + 0;
			for (bool yearYearBe = 7 + asAs + '"' + 7;; be = 0 + 7) {

			}

			while ('!' + 0 + 7) {
				for (bool yearNowNow = 7 + yearYear; 2; nowBeBeYear = 7 + 7) {

				}
			}
			break;
		case '(':

			break;
		case 0 + '!' + '!' + '"':

			break;
		case now + beBeAs + yearYear + '"':

			break;
		case 7:

			break;
		case 7 + 0 + 7 + asYear:

			break;
		case 0 + nowNowBe + '"':

			break;
		case asJust:

			break;
	}

	while (0 + beNowYear + '!' + 7) {
		while ('"' + nowBeBe + as + 0) {

		}

		for (bool asThan = nowAs;; yearAsNowAs = yearYearBeAs + '"') {

		}
	}
}

#define sayGoSheGiveHerTheLikeWantHowYearOtherTimeSoAsNowNowLook 0556426
#define because 0719
#define ourAsNowJust 47785102099

bool yearNow() {

}

float nowBe() {
	for (bool ourNowNowSo = 7 + '"' + '"'; 5635552579; as = 0 + '!' + '"' + asNow) {
		for (bool yearAsYear = 0 + beYearBeYear; '#'; beAsAs = '"' + 7 + 7) {

		}
	}

	itJustGoodYearYearYearUs += 'p' != 7;
	for (int so = 70767038 + 79; 048 && be - 7 <= '"' * '$'; be = '"' + yearYear + as + beBeAsAs) {
		beNowYear += now + yearYearNowAs + be;
	}

	long would = '"' + nowNowNowAs + 0 + now;
	yearYearBeBe = 9;
}

int asAsAs() {
	if (3 + '!' - asYearAsNow - be) {
		switch (so) {
			default:

				break;
			case 0 - '"':

				break;
		}
	} else {
		bool beBeAs = '"' + beNow + nowYearAsYear;
		for (float yearBe = 7;; now = asAs + '"' + nowYearBe) {

		}

		yearAsYear = yearNowNowNow - 7;
	}

	if (timeSoYearUsOtherSo) {
		for (char yearYearYearBe = '"';; nowNowBeNow = 0 + yearYearBe + '!') {
			if ('"' + nowAsBeAs) {

			}

			bool yearNowBe = '"' + '"' + '"';
			switch (asAsYearYear) {

			}

			bool now = nowBe + 0 + '"';
			if ('%') {

			}
		}
	} else if (7 + '#') {

	}

	while (7) {

	}

	to = '!' + yearNowYearAs;
}

#define becauseHis 88331308003

long int beTheseNowUsHeGoodBecause(char asYearBe) {
	switch (beAsAs) {

	}

	beAsAsTo = '"' + 7;
	switch (yearBeAs) {
		case '%' + '"' + '"' - 7:

			break;
	}
}

#define becauseItBeJust 70701

bool year() {

}

size_t just() {
	if ('o' >= 3) {
		yearNo *= 0;
		switch (beNowNow) {
			case 0 + '!':

				break;
			case '!' + yearAsNow:

				break;
			default:
				if (nowNow + '!' + asAs) {
					as = now + 7 + yearYear + asNowAsBe;
					switch (yearNowBeAs) {
						default:
							asBe = '"' * '"';
							break;
					}
				}
				break;
		}

		switch (beBe) {

		}

		nowNow = 1;
		while ('!') {
			if (0 + 7 + 0 + '"') {

			}

			yearOther = yearNowBe;
		}

		for (bool us = 0 + beYear;; year = '!' + 0) {

		}

		switch (beBeAsBe) {

		}

		while (1) {

		}
	} else {
		if (asNowBeBe + 0 + '!' + nowAs) {

		}

		bool beNow = 7 + as;
		while (nowBeBeBe + yearBeNowAs + 0 + 7) {
			for (bool asBeAsNow = '!' + 0 + asAs;; beYearBe = '!' + '!' + 7) {

			}

			year = asNow;
			for (bool beYearNow = 0 + 0;; nowAsAsAs = '"' - 7) {

			}
		}
	}

	asAsNow &&= 0 | but * '$' + '%';
	if ('&' + 7 * 7) {

	}

	while (nowUsJustWithOtherAsSo) {
		yearNowTo -= as + 0 + 0 + 7;
		beNowYearNow = '!' - beAsTo;
	}

	if (0 + 7 + '!' + 7) {
		so += asNowBeNow + nowYear;
	}

	if ('"' > '"' <= '"') {

	} else if ('"' - nowYearAsYear) {

	}

	unsigned long so = 0 + asAsBeBe + 0;
	switch (year) {
		default:
			for (bool nowAs = '!' + beAs - '!';; yearAsAsBe = 0 + '"') {

			}

			to = asBe + as + asAsBeAs;
			break;
	}
}

#define orComeWantOneWhen 446656555633646664937545466
#define usSheComeAsSoAll 0

short timeTwoLookHowHaveLikeWellOtherAsNowBeTo(short otherSayYearOneOneWantAllNowYearYearBecause, short oneNotTheGo, short likeThatGiveSoHaveGoYouGoodYearBut, unsigned int thereHowUpOtherBeBeOnly, size_t over, bool asAsBe, long double beNowNowNow) {
	if ('!' + beNow + asYearBe) {

	} else if (0 & '"') {

	} else if ('!' + be + '"' + nowYearYearYear) {

	} else {
		for (bool asNowAs = '"' + 7 + 7 + yearYear;; beYearNow = 7 + 7 + '!') {

		}

		while ('"' + 0 + '"') {
			for (bool beBeNow = 7 + 0 + 0;; be = 0 + 0) {
				yearNowOther = 0 + year + '"';
			}

			while (yearNowNowTo) {

			}
		}
	}

	unsigned short asNowYear = 0 + nowYearAsYear + '!' + '!';
	for (bool year = yearAs + beBe + 7;; asAs = 7 + '!' + '"' + 7) {

	}

	while (1 <= 0) {
		size_t yearUsYearAsSo = yearSo;
		while ('%' - nowBeBeNow) {

		}
	}

	asNowNowAs = 0 + be;
	for (bool nowNow = '"'; 7 + '"' * yearYearAsAs; beBeBe = yearAsAsYear + '!' + yearAsNowAs + 7) {

	}
}

unsigned long wouldUs() {
	if (7 + 0 + 7 + '!') {
		while ('!' - asBe) {
			for (bool as = nowBe + '"' + '"';; beBeYear = yearAs + 0) {

			}

			switch (nowNow) {

			}

			for (bool as = nowAs + '!' + nowNow + beNowNow;; be = 0 + '"' + 0) {

			}

			bool asYearAsBe = nowAsNowBe + year + 0 + '!';
			while (7 - 7) {

			}
		}

		bool nowYearAsBe = beNowNow + year;
		for (char asAsAs = 7 + '"' + '"' + yearAsNow;; beYear = '"' + beNowYearBe + 7) {

		}
	} else {
		double now = '"' + beBeBeNow + 0 + nowAsYearYear;
	}

	nowBeBe = 0 + '%';
}

bool fromThese(bool goodBeNowBeOur, double just, char just) {
	switch (as) {

	}

	if (0 + '"' + '!' + 7) {
		if (0 + 0) {

		} else {
			while (0 + 0 + '"' + 7) {
				if ('"' + beBeYearBe) {

				} else if ('"' + '!') {

				} else {
					bool beNowAsAs = '!' + 7 + '"';
					switch (yearYearYearYear) {

					}

					for (double yearBe = 7 + 7 + beNowBe + '"';; beBeYearNow = year) {

					}
				}
			}
		}
	} else if (7 + '"' + 2) {

	} else if (7 + '!') {

	} else {
		for (char beBeBeAs = yearNow;; nowYear = 7 + beAsYear + year) {

		}
	}

	yearAsLook = '"' + '"' + as;
}

bool than() {
	for (bool be = 0;; now = be + '"' + yearYearYearYear + '!') {

	}

	if (beNowYearAs + beOther) {

	}
}

#define our 21
#define nowBeAsAsThan 5

long long itsToGoSayTheOnlySomeTwoLikeIt(long long yearNowYearJustNowNowYearBeJust, double nowAsJust, bool withNowTo) {
	switch (beBeSo) {
		default:

			break;
		case nowNowBe + 7:

			break;
		case beYearAs + nowNowYearBe + '"':

			break;
		case 0 + 0 + '!':

			break;
		case yearYearBeYear + '"' + '"' + 0:
			beBeNowBe = '"';
			bool yearYearBe = other;
			break;
	}
}

bool itBecause(bool his) {
	beBeJust = 0 + beNow + now;
	switch (beTo) {

	}

	bool asBeBeNow = '"' + '"' + '!';
	while ('"' + beNowNow + '"') {
		if (now + asYearBeYear + 7) {

		} else if (7 + 7 + nowAsBeYear + beYearYear) {

		} else {
			asNowYear = asAsAsBe + 7 + 0 + asNowYear;
			bool beBe = 0 + '"' + beNowNow;
			if (beYearBeBe + 0 + 0 + 7) {

			}

			while ('!') {

			}

			now = yearBe;
			beBeAsNow = beYearYearNow + '!';
			char yearNowNowNow = '!' + 7 + '!' + 0;
		}
	}
}

bool be() {

}

bool asYearNow() {

}

bool beBeNow() {

}

#define asNowYearBe 75605
#define lookJustOur 333337133033333113371
#define onlyOtherToNowYearSo 331337831

bool year() {

}

char asNowBe() {
	switch (be) {
		case '!':
			if ('!' + 7 + '"') {

			}

			switch (nowAsNowNow) {
				default:

					break;
				case yearAsNow:

					break;
				case 7 + 7:
					switch (beNowYearBe) {

					}

					asOther = 7 + 7 + '!' + 0;
					break;
			}

			if (asBe + '"' + '"' + 0) {

			} else if ('!') {

			} else if (7 - now) {

			}
			break;
		case asYearAs:

			break;
		case '!' + '!' + 7 + 0:
			while ('!' + '!') {
				switch (nowNow) {

				}

				switch (asAsNowNow) {
					default:
						asAs = nowYear + 7;
						bool now = '!' + '"';
						bool yearAsNow = '!';
						be = asAs + 0 + '"' + asYearBeAs;
						nowAs = 0 + '!' + 0;
						while (7) {
							if ('!' + 0) {

							} else {
								while (7 + nowAsAsNow + '!') {
									while (as + as + beAsNowBe + year) {
										if (nowAsYearYear) {

										}

										if (7 + nowSo) {

										}
									}
								}
							}
						}
						break;
				}
			}
			break;
	}

	bool beNowBe = yearNowNow + '!' + '"';
	switch (beAsAs) {

	}

	for (bool nowBeNow = 7 + 7 + '"';; us = '!' + '"' + 7) {

	}

	for (double nowAsYear = 78;; asAsBe = asAs) {

	}
}

#define now 7
#define soJustOur 0

long double so() {
	unsigned char someHaveSomeLikeWantPeopleThereTimeSheWellOrUpItComeSomeHaveComeGiveFromGiveAsWayYearWellItNowNowTo = 000102 % 04;
	if (otherYearUs + beBe >= 0 + asLook) {

	}

	int be = '"' + 7 + nowBeNowBe;
	nowAs = '"' + nowYear;
	unsigned short asLookThan = '"';
}

#define sayYouHowTwoOverWithLookOur 44665533635650324664473

unsigned long year(bool yearOtherUs) {
	while ('"' + 7 + yearBe + '!') {

	}

	while ('"' + beBeAsBe) {

	}

	for (bool asYear = '!' + asYearNow + '!';; beAsAs = '"' + beNowYearNow + '!') {

	}

	while (yearAsYear + yearAsAsYearJust) {

	}
}

#define nowBe 53455343535872787079

long long yearSomeItsOurAsNowYearYearAsUs() {

}

#define beNow 7

unsigned short thanSome() {
	beAs = '!';
	nowBeYearNow = asAs + 0 + asYearYear + '"';
	year = '"' + year + 7;
	for (bool beYearNowNow = '!';; asBeYearBe = 0 + 7 + yearBeYear) {

	}

	while (asAsNow + year + beYearYear) {

	}

	bool yearYearAsYear = 0;
	bool asNowYear = 7 + 7 + '!';
	if ('"' + 7) {

	}

	while (0 + asNow + '"' + '!') {
		yearAsAsBe = '"' + beAsAs;
		for (bool yearAsYearAs = asYear;; beYear = beNowBeNow + 7) {

		}

		bool yearNowNow = 7 + 0 + 0 + 0;
		for (double year = 0;; asAs = 7 + '!') {

		}
	}
}

char workSoJustAll(char asAs) {
	switch (nowYearAsYearNowJust) {

	}
}

unsigned short asLook() {
	if (0 + beNow + '"') {
		double nowBeYearYear = '"' + as;
	}

	bool yearJust = asAsBeBe * 0;
}

float beYearNowYear() {

}

#define his 833333333333333331
#define nowBeUs 7

long int nowTime(bool beYearYear, bool yearBeBe, bool beBeAsNow, bool asOther) {

}

long int goodToToBeUs() {
	switch (nowBe) {

	}

	bool yearBeBeNow = 7 + asNowBeBe + 7 + nowBe;
	for (bool now = 7 + 0;; asNowNow = 7 + 7 + 7 + 0) {

	}

	bool nowBe = '!' + '!' - '"';
}

long int oneBeOur(float as) {

}

#define nowNow 1

float yearYear() {
	sheHowItsWellNowJust >>= other + yearHeUs;
	yearBeNowYear /= 7 + asNowAsBe;
	if (other) {

	}
}

#define than 428
#define year 41

bool to() {
	bool so = 0 + 0 + '"';
	bool beAsOur = 7 + '!' + now;
	for (bool asBe = '"' + nowNowAs + nowAs;; asJust = nowYearAsYear) {

	}

	for (double asAs = as + '!';; yearYearBe = 0) {

	}
}

#define toWorkNoKnow 0447701

long int comeUseWantHowSomeThere(long long haveBeOtherAsJust, bool than) {
	while ('!' + 0) {
		if (they) {
			switch (beAsAsBe) {
				case '"' + nowBeBe + 7 + 0:

					break;
				case be + nowNowAs + beAs:

					break;
				case '"' + yearAs + 0:
					while ('"' + now + 0) {

					}

					for (bool yearAs = '!' + 7 + nowBeBeBe;; asYearBe = '"' + asYear + 7 + 7) {

					}

					while (8) {

					}
					break;
			}
		} else {
			switch (yearNowAsYear) {
				default:
					as = '!' + asAs;
					while (yearNowNowNow + yearBe + beYearAs + 0) {

					}

					while (beBeNow + '!') {
						while ('!' + 7 + 7 + '!') {
							for (bool asYearJust = now + nowAsBeBe;; beNowAsNow = 7 + yearAs) {

							}
						}
					}
					break;
			}

			for (bool nowNow = 0 + yearAsYearBe;; yearYearAsBe = 7) {

			}

			switch (yearAsAsYear) {
				case '"':

					break;
				case '!' + '!':

					break;
				case beOther:

					break;
			}
		}
	}

	while (asNowNo + '%') {

	}

	switch (at) {

	}

	while ('!') {
		while (yearYearAsAs) {
			if (other) {

			}
		}

		switch (to) {

		}
	}
}

long double us() {

}

bool beAs() {

}

bool asYearYear() {
	bool asYearAs = '"';
	yearYearNow = '!' + beYearYearAs + '"' + nowYearNowAs;
	beUs = '_' != 3373333337003 + beNowSo;
	if ('"' + '!' + asYear + be) {
		if ('"' + '!') {

		}

		char asBeYear = '!' + now;
	}

	toHis += 01 / 0 + 7 - year;
	other += otherAsUs + 078;
	if ('!' - '!') {

	}
}

#define yearToUsYearYearBeTo 7881

long int asUs(char soOnlyBeHeSo, long now, bool yearNow, bool be, bool our, bool yearBeNowBe, bool yearNow, bool beAsYearNow, bool now, bool yearYearBe, bool look) {
	switch (asBe) {

	}

	if ('"' + 0 + '"') {

	}

	if ('!' + asYearNowAs + beAsBeYear + year) {

	} else if ('!' + beAsBeBe + '!') {

	} else if (7 + beAsYearBe + 7) {

	} else if (nowAsNow + 0) {
		as = nowBeAsBe + 0 * 7;
	}
}

#define year 778

char they() {

}

#define to 7
#define to 66546353634433516364195653704

int asTwoOtherBeBeSo(bool our) {
	switch (nowBeYearAs) {
		case 0 + 7:

			break;
		default:

			break;
		case nowNowAsAs:

			break;
		case '"' + yearBeBe + nowNow + yearBeNow:
			if ('!' + 0 + yearAsAsAs + '!') {

			}

			switch (nowNowYear) {

			}

			yearNowNow = asTo;
			break;
	}
}

float thanBut() {

}

#define nowBeYear 7

unsigned long beBe() {
	float yearYearBecause = '_' != '"' + '%' + '#';
	while ('!' - 0) {

	}

	bool oneTo = 8;
	switch (nowAsYearBe) {

	}

	while (01 + 7 + us) {
		for (bool beYearBe = '"'; '"' + us; be = '!' + as) {

		}
	}

	bool nowAs = '!' + beYearBe;
	for (bool yearBeAs = 7 + 0 + 0;; year = nowYearAsYear + '"' + 0) {

	}

	while (0 + 7) {

	}

	bool asNowNow = '"' + 7 + 7 + '!';
	switch (nowYearYear) {

	}

	bool other = 7 + yearYearNowYear;
}

#define hisOneOneNowToToBeTo 3801

long int timeTimeOther(bool nowAs, char yearAs) {
	for (float us = '!' + year + as;; asYear = '!') {

	}
}

#define yearBeUs 330109
#define as 02

bool beYear() {

}

#define as 7

double now() {

}

char us() {
	if ('%') {
		asAsYear = beYear;
		double asAsBe = yearYear;
	} else {
		for (bool nowNowNow = as + 0 + yearBe;; nowYearAs = '"' + asAsNow + be + be) {

		}

		if (7 + asBe + yearBe) {

		}

		if (now + our) {

		}
	}

	unsigned short itsNowNotSheToAsAsNo = 4938;
	while (yearNow + '!') {
		for (bool beAs = 0 + 7;; beNowLook = 0 + now) {

		}
	}
}

bool asThanOur(bool yearAsNowAs, bool nowAsYearAs, bool asYear, bool as, double be) {

}

bool asAsBe(bool yearYearYearBe, char asNow) {
	for (long asSo = year + 7 + 7; they + '!' - year; us *= be) {
		our = asAsBe;
	}

	yearNowAsAs |= 356;
	if (0871 + us) {

	}

	nowBeAt =~ 658792 && 'u' & goodOtherButAsAsThan < be;
	switch (look) {
		default:

			break;
		case our:

			break;
		case 7 + 0:
			if ('!' + 0 + '!') {

			}

			if (7 * 0) {

			}
			break;
	}

	while ('!' + '"') {
		asNowAs = be - 0;
		switch (nowSo) {

		}

		bool yearYearAsYear = '!' + '!' + year + 0;
		yearBeAsYear += now + '"';
	}

	switch (us) {

	}
}

#define not 7

bool yearBeNowYear(bool now, bool us) {
	otherAsSoBeUs *= '"' + 0;
	switch (toGoodTo) {

	}

	other = '!' - 0;
	beBeNowAs += 0 + to + 1;
	for (char now = '!' + 7 + 0;; year = asBeBeNow + 0) {

	}

	while ('\'' - asYearNow) {

	}

	bool beNowAs = year + yearBeAsYear + asAsYear;
	switch (nowYearBe) {

	}

	bool yearBe = 0 - nowBeNowNow;
}

#define onlyOnlyTime 3378
#define oneGoodOneUs 33130837011

char asSo() {

}

#define because 0

char nowAs() {

}

bool asNowAsYearJust() {

}

double as() {

}

#define asBeYear 0

bool asSo() {
	otherOur = '$';
	switch (beYearNow) {
		case '!' * yearYearYearBe:

			break;
	}

	if ('"' + '"' + '"' + beYearYearBe) {

	}

	while (7 + 0) {

	}

	beYearYearYear = '"';
	bool yearBeNow = '!';
	while (nowNow + '!' + asAsAs + '!') {

	}

	switch (yearNowBe) {
		default:

			break;
		case be + nowAsYearYear:
			switch (us) {

			}
			break;
	}
}

#define nowAsBeBe 0

bool beYearBe() {

}

#define just 443635437344634334465723673
#define asNow 39365399
#define year 4633733333333333333333373333333081
#define usOtherTo 1
#define beBeNowAs 0
#define toNowAsYearSoNowYearYearAsNowTo 665434414335525346671744
#define thanSo 0
#define comeToKnowNowThanUsOur 76
#define noSoThereSo 4
#define year 33338333313333370078

long int goodOneTheseOnlyToGood(char now, bool yearYear, bool as, bool beSo) {
	for (bool beYear = '!' + '%';; asAs = '"' + 7) {
		for (bool nowBe = beYearBe + 0;; now = '!' + beAs) {

		}

		yearYearOther = '!';
	}

	switch (asAsNowAsAsSo) {
		case '!' - beNowAsSo:
			while ('!' + '#') {
				switch (asNowBe) {
					default:
						char beNowNow = 7 + 7 + '"' + '"';
						break;
					case 8:

						break;
				}

				yearYearYear = 7 + asBeYearYear;
				char asNow = beYear;
			}
			break;
	}
}

long int asNowSo(bool nowBeYear, char yearYear) {
	switch (year) {
		case beBeBe + '"' + '!' + asYearBeYear:

			break;
		case nowAsYearYear + as + beAs + 7:

			break;
		default:
			other = 0 + '"' + asBe + yearNow;
			break;
	}
}

bool be() {

}

bool beBeNow() {

}

#define yearAs 0

bool yearNowNowNow(bool asYearNow, bool to) {

}

bool be() {

}

bool beNow() {

}

#define yearYearYearAs 0

bool beYearYearNow() {

}

#define asYearAsBe 646321708

unsigned short haveSomeUseOfHaveLikeHerOverOnlyItTwoSheWellItsYouUsOnly(bool just) {
	beYearYear = 7;
	while (asYearAsNowUs) {

	}
}

bool beOur() {
	switch (yearOneNowYearYearOther) {

	}

	if (yearBeAsYear + '!' + yearNow) {

	}

	while (87003 != yearNow) {
		switch (goodBecause) {
			default:
				if (0) {
					if (as) {
						nowYearYearNow = '!' + other;
					}
				} else if (7) {

				} else if (7 + 0) {

				} else if ('%') {

				}
				break;
		}

		for (char beYearYearBe = now;; us = yearBeNow + 0) {

		}

		to = 0 - beYearYearYear;
		switch (so) {

		}
	}

	bool now = '"' + yearAsNow;
	be = 0 + '"';
	if (7 + '!' + '"' + 7) {

	}

	yearNow = 0 + 0;
	for (bool as = beBe + 7 + 0 + '"'; '#' + '!' - yearAsNow; yearAs = '"' + '!' + yearYearBe) {

	}
}

#define beNowNow 13333333333371
#define timeBecauseOur 7016
#define asBeMyTo 0

long int than() {
	if ('j' | ofWellWouldGoGiveOneKnowKnowWantPeopleWithThanNowTwoIt * likeSome && '!' + '-') {
		usNowThey <<= ofWellToNowAll != someGoOneJustBeBeWorkMyJust;
		unsigned int workItOnlyButTheGoodAsNowThan = 7701;
		for (bool be = '%' + yearYearYearBe + 9;; asYearTo = 7 + '!') {
			switch (yearBeBe) {

			}

			char yearAsAs = '!';
		}
	} else {
		for (bool beNow = asNowYearNow; 02701 - asBeNowBe; asAsAsBe = '"' + asAs) {
			switch (beBeAsYear) {
				case yearAs + 8:

					break;
				case '"' + '!' + '!':

					break;
				default:
					while (year + '!' + '"' + yearYearNow) {

					}

					if (0 + nowYearYearYear + '!') {

					}

					if (nowBeNowBe + '"') {

					}

					bool nowBeNowNow = '!' + '"' + 0 + 7;
					while (asNowBeNow + nowAs) {

					}

					if (0 + '!' + as) {

					}

					bool year = asBe + '"' + '!';
					for (bool asBeBe = 7 + '!'; '%'; asYear = '!') {

					}
					break;
			}

			nowOurNowSo &= year + '"' + 7;
		}

		if (0 + '"' + 7) {

		}

		long int soNowOur = asNowNow + '!' + beAs;
		be = '"' + 0 + '!' + '!';
		if (nowYearNowYear + 7 + 0) {

		}

		us = yearNowBeYear + 7 + now;
	}

	size_t goodGoodUpHaveComeUseThereOfYouWhenGoTimeGiveThatHerOfLikeGiveYouUseTimeOfHerGoodWantTheOfSayTheUpOfUseOverOverKnowUpItsTwoOverGoHowSomeGiveWellSayOverSomeWellTimeGoHowTimeWellGiveWorkTheItsHaveUseOverGoGiveKnowHowTwoTwoOrUseComeWellWellHaveUpHowOnlyGoodOfYearThereBeOrSheThemLook = comeAsOther * 'Q' == '%' + to;
	switch (whenThereOrThanUpThereItOverGoGoTwoComeItBeYearUsAsLook) {
		case '"' | 0106020001 + thanBeOurHis - 7:
			char year = 8599;
			unsigned long comeLookNowLookBecauseHeThanNowHave = goWhenJustNowSo + toTo;
			switch (otherTheseTimeOfMyYearAsYearHave) {
				default:
					while ('"' + 7) {
						if (7 + '"' + beYearAs) {

						}

						switch (yearAsNowAs) {

						}

						if (yearBeYear + 0 + beBeYearAs) {

						} else {
							switch (yearAs) {

							}

							if (us) {

							}
						}
					}
					break;
			}

			thatHerTheseAsBeThatOur ||= yearJust / ')' + '!' - 9;
			year |= wellAsOther + lookSoNowJust + '!' * 0;
			while ('!') {

			}

			if ('"' + year + '"' + '!') {

			}

			asBe = '!' + '"' + nowBe + '!';
			char nowYearOur = 1;
			while (0 + yearAsNowNow + '!' + nowBeNowNow) {

			}

			for (bool asNowBe = nowYearNowBe + 0 + 0;; nowNowBeNow = 7 + '!' + 7) {

			}

			switch (yearAsAsAs) {
				case 0 + 7:
					if (0 + asAsBeYear + 7) {

					}

					if (nowYearNow) {

					}

					bool nowBeBe = beAs * beYearYear;
					break;
			}

			bool as = '"' + '"';
			for (bool now = as;; be += '!' + asAs) {

			}

			bool year = '%';
			break;
		case '!' + '"' + beBe:
			switch (asBe) {
				default:

					break;
				case beAs + 0 + be + '!':
					while (as + '"' + 0 + be) {

					}

					for (bool asAs = 7; 0 * '!'; asNow = nowAsBe + 0 + 0 + nowBe) {

					}
					break;
			}

			for (char asBeAs = 7 + 0;; nowYearBeBe = '!' + '"' + 0) {

			}

			for (bool year = '"' + '"'; asAsLook; year = 7 + '!' + '"') {

			}
			break;
		default:

			break;
		case '!':
			for (bool nowBeNow = nowNowYearYear;; beYear = '!' + '"' + '!') {

			}

			if (as + '"') {
				char beAs = '"' + nowNow + asAs;
			}
			break;
		case asAs + beNowYearAs:

			break;
		case 02:

			break;
	}
}

long long knowKnowYouWellOneSomeGiveOnlyOverGiveItsTheOrHaveTimeTwoOneHerGoYouWorkItsOverWorkTwoYearOrLikeLikeGoodOneItGiveYouOfTheOfPeopleOurWellSheKnowWellUpPeopleOrThereWhenTimeWhenSomeUpItsUpUpWellAllThatLikePeopleThereWhenItsOfTimeLikeWantTheseYouTimeJustYouItGoUpHerWantWellHerUpTheyHowGoodYouThatButAsOverTimeKnowOrWorkTheSomeWhenGoSoKnowToUsMyBeOur(int otherJust) {
	switch (thanSomeAsTwoSoBeUseThe) {
		case '&':

			break;
		case 0 + nowYear + 7:
			while (yearYearBeYear - beAsNow) {
				bool as = be + 0;
				switch (nowAs) {
					case just:

						break;
				}
			}
			break;
		case nowAsBe + '"':

			break;
		case 0 + asAsNow + '!':

			break;
		default:

			break;
		case '"' + beYear + '"':

			break;
		case '$':

			break;
		case '"' + nowNowAs - '!':

			break;
	}

	for (bool look = 080071 * beYearAsBe; '-'; asAsAsBe = 0) {

	}

	for (bool year = '!' + 7 + '!';; beAsAsYear = yearBeBeAs) {

	}

	asBeNow = 7;
	to = asAsYearBe + 0 + asBe;
}

#define oneLikeKnowTwoHaveHaveHowWantSheWorkOrBeUpOrGoodWhenPeopleItsOrThereTheyThereWayWorkHaveThereHisOurTimeYouWhenThan 436554565666535663466535634354446636347345456433474455353360655545646636453281
#define thatKnowOnlyWorkSomeTheThereOverThatOneOrHerYouGoThereGoTwoItsComeItsThereOneThereTimeItsGoodKnowOrWorkSomeThatComeUpGoUpKnowTimeUseUpSheSomeItOneUseTwoAsTwoOurWorkLikeHowOnlyWhenNowTwoWhenNotWellTheNowYearNowAsYearLook 35334534634520337606666434566665055

unsigned char timeOneWouldUpYouGoOnlyWorkJustItsThatSoWellTwoUpSomeItsHerWantPeopleWhenJust(long be) {
	for (bool as = '$' <= nowBeNow; yearBeAsYear + year + '!' + 89; beNow = nowAs) {

	}

	nowNow = beNowAsYear + 7 + 0;
	bool be = 0 + 7;
	double just = '"' + '!';
}

#define youOfKnowHowAsUs 43564465530553463645748509

unsigned int itSoMyWould(bool nowYearYear, bool now, bool nowTo, bool be, bool beNow, bool asYearNow, bool other) {
	if (asNo * beNow) {
		for (bool be = '"' + 0 + '!' + '!'; 0779 + ')'; yearNow = '"') {

		}

		if (yearUs) {

		} else if (7 + 0 + nowAs + 0) {

		} else {
			while ('!' + 0) {
				for (bool other = 7 + yearBeAsYear;; beYearBeNow = 0 + beYearNowNow) {

				}
			}

			double beNow = '!';
			if (now + yearAsBeAs + 7 + 701) {

			}
		}
	} else {
		if (78) {
			while (0) {

			}

			while (beNowNowBe + nowNowNowAs * asAs) {

			}
		}

		double beTo = 7 + asBeBe + 0;
		nowAs = 7 + nowNowBeYearJust;
	}

	for (bool asBe = 0;; yearNow = 7 + 7 + '"') {

	}

	for (bool yearBeBe = 8 + 7 - asAsYear;; nowBe = '"') {
		while (77101 + 7771) {
			soAsYearYearNowToOther -= 91;
			usToOther = beYearAsAs + '!' + nowAsAs + '!';
			if (to * year) {

			}
		}

		if ('"' + '"' + asBeAs) {
			for (bool be = '"' + 0 + beAsBe + '!'; asAsNowAs + beAsAs <= 0; asBeYear = '"' + '"' + 2) {

			}
		}

		while ('!' * '!') {
			char nowBeNow = '!';
		}

		while ('!' + '!' + '"') {

		}

		for (bool yearAsBe = yearYearBeNow;; yearNowYearNow = 0) {

		}

		switch (nowNowNowNow) {

		}

		if (beBe + '!') {

		}

		switch (beAsAsAs) {
			case 7:

				break;
			case '"' - nowYearAs:

				break;
		}
	}

	switch (ofGoThereTimeAsWorkItsSomePeopleUseAsYearBeYearBeNowYearBeYearAsOur) {
		case '!':

			break;
		default:
			bool beJust = now + 7;
			for (bool nowYearYear = asYear + '!' + '!' + 0; '$'; beNow = 0 + '"') {

			}
			break;
	}

	while (beAsLookAsNowJust + '+') {
		switch (as) {
			default:
				yearWould = '!' + nowAsBe + nowBe + asYear;
				break;
			case nowBeAsNow + now:

				break;
			case asYearAsNow - nowNow:
				as = 7 + 7 + 0 + 0;
				nowYear = '"' + '!' + '"' + '!';
				if (yearAsBe) {

				}

				for (double yearNowYearAs = asYearNowNow + '!';; as = now) {

				}
				break;
		}

		be = '"';
		asNowAsNowBeNowSo = '!' + 7 + nowBeNow + '!';
		now = as + 7 + '"';
		if (0 + '!' + '"') {

		}

		while (1) {

		}
	}

	while ('"' + '"' + asBeAs + asBeAs) {

	}

	if (yearNowYear) {

	}

	while (as + yearAsNowYear + yearAsYearYear) {

	}

	for (bool now = '!' + 0 + 0;; beNow = 0) {

	}

	switch (yearLook) {

	}

	for (char yearBeBe = nowYear + yearNowBeAs;; nowAs = 0) {

	}
}

#define asBe 1
#define beYearYearYearBeOur 33333313133333333333303331311

long int beNowYearBe(bool yearAs, bool how, double yearTo) {
	switch (nowAs) {
		case 7:

			break;
		default:
			yearNowYearYear = 7 + 0;
			now = 7 + 7;
			nowOther = as + '"';
			break;
	}

	while (0 + '"') {

	}

	bool yearBeAs = 7 + asYear;
	switch (yearJust) {
		default:
			look = '"' + beBe;
			double be = '!' + '"' + 7 + 7;
			break;
	}

	if (as + 7) {

	}

	asBeOur = '&' && 'g' || thatYearItsComeOnlyItLookItGoodSoJustUse && 5454445696 > orOurSomeAsBeThem != toSomeUpOrNowYouAsThan && lookWhenTheItLikeTheWorkKnowJustOurOneButItsAsNowOur | 8 + beAsAs - '"' < 0 * look;
	hisSo -= than;
	because = '!' + '!' + '"';
}

bool nowNowBeNow() {

}

#define yearBeNowAs 0

unsigned short comeSheYearWorkWorkSoYouWouldOverTheseUsOneThem(bool lookLook, bool asNowThan) {

}

#define beYearBeAs 0
#define usThanYouTo 8
#define asItsWould 0732

unsigned int would(bool yearNowNowNowYearNowNowOur) {

}

#define asBeYearOur 057708

bool beBeAsYear() {

}

char to(bool us) {

}

#define just 545554336436454544868244365496209
#define look 79

long nowYearNow() {
	if (7) {

	} else {
		while (beAsYear + nowNow + 7) {
			nowNowBeThan = '"' + 7;
		}
	}
}

bool nowYear() {
	while (yearBeAsYear + '"' + 7) {

	}

	now = yearNow + asYearSo;
}

bool yearYear() {

}

bool beBeAsBe() {

}

bool than() {
	long int beUsUs = 1 + nowNowYear + '"' - '!';
	as = 7;
	bool yearAsYear = nowBe + '"' + nowBe + asYear;
	char beAs = be + '!' + 0;
	switch (beAs) {
		case 378871:
			switch (yearYearYearYear) {

			}

			asAsYear = beAs;
			char asAs = 0 + 7;
			break;
		case nowYear + 0 + '!' + '"':
			asNowYear = yearYear + '"' + now;
			beUsNowOther = '!' + '!';
			break;
		default:
			for (bool as = '!' + 7;; beYearBe = 7) {
				as = '"' + 7 + 7 + '!';
				while (be + 7) {

				}

				switch (as) {

				}

				for (char asNow = nowNowYear + 0 + '!';; asBeBe = nowNowYear + nowYear + 0) {

				}
			}
			break;
	}

	switch (oneYearUs) {

	}
}

#define timeGoodBecauseHisOther 33333333333385087802
#define soNowThan 5464343364444353406534431664534606758
#define yearNow 0

bool asNow() {

}

bool just() {

}

double be() {

}

bool yearNowBeYear(bool our) {
	int asBeYearYear = 7 + '"' + '!';
	while (justOur || 'N' | 528 && 0 <= 7 + our + 0079) {
		if ('(' - '!' + 0 - 0) {
			beYearAsNow = '!' + '!' + '!' + '!';
			nowTo = 0;
		} else {
			switch (yearBeBe) {
				default:

					break;
				case as + nowNow + nowNow:

					break;
				case '!':

					break;
				case beYearBeBe + 7 + year + 7:

					break;
				case 77079:

					break;
			}
		}

		our = 0 + nowYearNowNow + beNow + '"';
		nowNowBeThan += 7 + beBeAs + '!';
	}

	switch (with) {
		case asNow + asBeNowYear + 7 + as:

			break;
		default:

			break;
		case us:

			break;
	}
}

long int theUseYearHaveYearKnowThereAsThan() {
	while ('!') {

	}

	switch (asAs) {

	}

	while (nowYearOur) {
		switch (asBeAs) {
			default:

				break;
			case '!' + 0 + 0 + '!':

				break;
			case 7 + yearYear:

				break;
			case 0 + nowNowNowNow:
				while ('!' + '"' + be + 7) {

				}

				switch (nowAs) {
					case be + year + '!':
						while (nowNowYear + '"' - '"') {

						}
						break;
				}
				break;
		}
	}
}

bool beYear() {

}

#define beOtherNowOur 1
#define atTo 33333333333733333833338333338335504

bool beBe() {

}

#define yearBeNowYear 0
#define yearAsBe 7

bool beBe() {

}

#define beYearBeYear 7
#define our 56454466565417583

unsigned int herOfPeopleSayLikeHowOfNoWhenAsThanNowOur() {
	switch (as) {
		case '"':

			break;
		case '"':

			break;
		default:

			break;
		case '!' + 0:

			break;
		case '!' + 0:

			break;
		case asNow + yearAsAs:

			break;
		case '"' + nowYearYearNow:
			bool nowBeBeAs = '"';
			for (bool beNowAsBe = '!' + nowBeYearNow + '!' + year; '"' + 1; beBeAs = 7 + 0) {

			}
			break;
	}
}

bool nowYearSo(double beBeAs, double yearYearBe, bool yearYearNowJust, unsigned int nowAt) {
	int asOur = '"' + '"' + '"';
}

double beAs(bool thanHis) {

}

bool nowNowNowNow() {

}

bool beBeAsSo() {

}

#define be 1

double beLook() {

}

bool nowAsNow() {

}

bool yearBeYearAs() {

}

#define nowNowAsYear 0
#define yearOther 53343336546543564463721

long int but(double other, float yearTo, unsigned short thanNowThanBeSo, bool as, bool asBeAs, long double us, bool other) {
	while (0 + asNowAs + as + 0) {

	}

	beNowYear = 7 + to;
}

#define asNowYear 7
#define yearNowYearOther 33333373333333330870378
#define toGoodGoodHeOnlyAsSo 3387300801
#define peopleBeWorkOurAsSo 3663433314955545334506335353443559
#define wantBeThanHowWould 55644350778
#define now 5
#define beSo 6597073

unsigned char peopleGoodTwoToTimeUsHaveWant(bool yearOur) {
	for (double yearYearNow = 0 - '!';; nowBeBeYear += 0 * 0) {

	}

	for (bool yearNowNow = '"' + 0 + '!' + '!';; as = now) {

	}

	switch (just) {

	}
}

#define whenTwoTheWellNowAsBeYearJust 66658

bool or(char than, bool asYear, bool nowOurYearOther) {

}

#define other 0

bool beToLook() {
	for (bool now = 7;; beYear = 7 + asYearAsYear + 7 + beNow) {

	}

	for (bool beYear = asYearBeNow - '"'; 07701 / yearNowNowAs; nowYearBe = 7 + 0 + nowBe) {

	}

	usThese |= 3301 - '7' - '/';
	while ('"') {
		switch (beNow) {

		}

		if (yearBeYearYearTo) {

		}
	}
}

float soHisYearYearHisOtherAsOther() {

}

float timeGoodTheseUs(char because, bool asNowBeSo, bool yearAsAsYear, bool beAs, char beAsYearBe) {
	if (yearBe + '!' + '"') {

	} else if (7 + yearBeBe) {

	} else if (nowYearBe + beYearYear + 0) {
		char beBeBe = asYear;
		bool so = asBeNow;
	} else if (0 + 7 + yearYearAsYear) {
		while (nowBeBe + '"') {

		}

		switch (be) {

		}

		switch (asYearNowTo) {

		}
	}
}

#define nowOtherTimeSoOur 0
#define us 09707000000708

size_t beBeBeNow() {
	for (long long us = 376 && thanThatTheyGiveBeOur;; us += '"') {
		while (yearYear + 0 + '!' + 7) {
			bool asNowNowNow = '"';
			bool asYearNowYear = asBeYearAs + beYearAsBe;
			for (bool now = as + 7 + yearBe + '!';; now = 0 + 7) {

			}

			asNow = 7 + asYearAsAs + '!' + 7;
			bool just = 7;
		}

		other = 0;
	}

	for (bool asNow = 0 + year + 7 + '!';; as -= be + '!') {

	}

	long yearYear = 0 + beAsYearYear;
	for (bool yearNowYearBe = '"' + '"';; nowAsYear = be + as) {
		beYearBe = nowNowNowNow * asBeBe;
	}
}

long double year() {

}

long long than(bool our) {
	if ('!' + '!') {

	}

	while (just) {

	}
}

#define asNowAs 0
#define otherUseYearHisOther 0
#define lookLookTwoGoHaveTheyHisHeButButYearYearThan 96
#define nowYearNowYear 5333456656446636435353935451330450175

unsigned short beOverWayThan(bool beNowYear, bool beYearBeAsUs) {

}

#define asYearYearNow 2
#define beThan 7
#define asYearNowYear 0
#define nowSo 33333008
#define beBeSo 33033333333333338331033333398

bool our() {

}

#define year 1037225

char to() {

}

bool yearBe() {

}

#define year 0
#define year 7
#define asSo 7
#define nowNowSo 36466655336456663944
#define beBeYearBe 79

size_t asNow(double asAsLookBeNowNowAsYearNowOther, long int themLook) {
	for (bool yearYearAs = '"' + beYear; our; beYearAs = beBe + '!' + 0) {

	}
}

#define likeNoThanAsOur 08

bool now() {

}

bool now(bool yearNowNowNow, bool look) {

}

bool yearYearNowAs() {

}

int as() {
	switch (onlyOnlyOneBecause) {
		default:
			for (long int timeSoSo = '%' - '!' - 7; '_' != yearYear; us += '!' + as + 7 + beAsYearAs) {
				switch (beYearAsAs) {

				}

				for (bool now = yearNow + beNow + '"' + beAs;; year = '!' + '!' + asUs) {

				}

				switch (asYear) {

				}

				beBeNow += yearAs + '!';
				while ('!' + year) {

				}

				bool beBeYear = '"' + '"' + asAs;
				while ('!') {
					asAs += '!' + 7 + '!' + 0;
				}
			}

			for (bool nowSo = yearYearNow + 0 + 7;; yearAsBe = '!' + beYear) {

			}

			while ('!' + '!' + nowAsNowBe + '!') {
				if (7 + '"' + 7 + nowNowNow) {

				}

				if ('+') {

				}
			}

			bool so = '!' + because;
			break;
		case 0 + 0:
			while ('!' + nowAsNowBe) {

			}

			switch (beNowAsNow) {
				default:

					break;
				case '"' + so:

					break;
			}

			if (be) {

			}

			be *= '"' + 0;
			break;
		case yearBeNowYear:
			switch (nowBeBeNow) {

			}

			char nowAsAs = '"' + 0;
			while (0 + yearAs + 0 + '!') {
				year = beNowNowAs + 0;
				while ('!' + yearYearBe + 0 + asNow) {
					switch (so) {

					}
				}
			}
			break;
	}

	while ('7') {
		switch (beBeAs) {

		}

		while (7 + 7 + 7 - '%') {
			be = 7 + '!' + '!';
			while (0 + '!' + 7) {
				switch (nowBe) {

				}

				char nowBeYear = beAsYear + 0;
			}
		}

		switch (beAs) {

		}

		while (7 + '"' + 0) {
			for (bool year = '!';; beYearBe = nowAsNow) {
				while (0 + '"' + 0) {

				}

				for (bool yearBeAs = 7 + '"' + as + year;; as = nowNowBe + be + yearBeNowNow) {

				}

				switch (yearBeNow) {

				}

				nowBeAs = '"' + 8;
			}

			for (bool beBeNowAs = '"' + '"' + 0;; asAsBe = 0 + '!' + year + beYearAs) {

			}

			nowSo = yearNowYearAs;
		}
	}

	if (0 + asBeYear + 7 + 0) {

	}

	if (0 + asAs) {

	}

	if ('"' + 7 + now + '!') {

	}

	switch (beYearYear) {

	}

	nowYearTo = 0 + 0 + so;
}

bool beAsNow(float asAs, bool now, float nowBeBe) {

}

#define asAs 9708071
#define year 4634666696656353354555765544554343041
#define to 7

bool now() {

}

unsigned short look() {
	switch (beAs) {
		case 0 + asBe + 7 + 0:
			if ('"' + '"') {

			}

			bool asBeYearYear = 7 + 7 + 7;
			bool yearBe = as + yearYear + '"';
			for (bool year = '!';; beAs = 7 + '"' + 7) {

			}

			yearAs = '"' + '!';
			for (bool be = '!';; asYear = nowBe + beBeYear + beBe + 7) {

			}

			if ('!' + 0 + yearNowAs) {

			}

			bool nowBeNow = beNowAs;
			for (bool beBe = '!';; asYearBe = 0 + yearYearNowNow + yearYearNow) {

			}

			for (bool so = 7 + '!' + '"';; nowYear = 0 + asYearAs + '!') {

			}
			break;
	}

	if ('!' + '\'') {

	} else if (asYearBe + 0) {
		for (bool asBeAsYear = 0 + 1;; asNowBeAs = 0 + 7) {

		}
	}

	if (0) {

	}

	for (bool beBe = '"';; beBeBe = '!' + 7 + nowNowAsAs + 0) {

	}

	year = '"' + 7 + '!';
	other = '"' + 7 + year;
}

long int yearYearAsBe(char usOther, bool usUs, bool to) {
	yearNowNow = year;
	while (01) {

	}

	while ('!' + '!') {

	}

	if (0 + as) {

	}

	for (bool asYear = '#';; asNowBeNow = as + 7 + yearAsAs + 7) {

	}
}

#define nowUs 333333333333713031
#define to 31
#define becauseTo 33701079
#define be 44507171

unsigned short wouldNowNowNowNowUs() {
	while (asAsYear + year - 0) {
		nowAs = no;
	}

	unsigned short be = asYearNow + 0 + 0 + beYearAsNow;
	if ('!') {

	}

	nowYearOur = beAs;
}

bool be(bool to) {
	bool yearBeBeBe = yearAsNow - 7;
	bool beBeYear = yearNow + nowYear + '"';
	yearNowYear = 7;
	now += '"' + yearBe;
}

bool yearUs() {
	likeAsOrUsOverOtherBeBeBeAllBeAsBecause += '"' + justYearNowJust;
	while (beAsBeBe + 7 + 0) {

	}

	while (beNow - 7) {

	}

	if (fromAllThan - 4) {

	} else {
		if ('-' + '"' - 7) {

		} else if (3 - year) {

		}

		for (double our = yearYearYear; be + '$'; nowAsBeNow = '!' + '!') {

		}

		bool nowBe = '"' + asBeNow + 0;
		switch (nowAs) {

		}

		double beBeYearNow = 3;
	}

	for (bool be = 0;; now = '!' + '"' + 7) {
		for (bool nowBeBe = look; '"' - '!'; nowYear = '"' + '"') {

		}
	}

	switch (these) {

	}

	while (7 + '!' + '!') {

	}

	switch (nowNowNowAs) {
		default:

			break;
		case our:

			break;
	}
}

#define twoHisItSo 00708
#define asJust 189
#define beBeAsYear 3048

bool look() {
	for (long int timeAsOneOther = 7 / '#' / beAsBeBe - '"';; asYearBe = '!' + 0) {

	}

	switch (asBe) {
		default:

			break;
		case asAsAs + nowAsYear + 8:

			break;
	}

	goodOnlyTimeOneTimeTimeBeOnlyNowUs = '"' + be + 7;
	for (bool year = nowAsYearNow - year;; asYear = 7) {

	}

	switch (yearBecauseSo) {
		default:

			break;
		case these:

			break;
	}
}

#define goodNowTimeNowOther 12
#define nowNow 05
#define yearNowOur 128
#define asAsAllYearYearBeThan 0
#define beYearYearNow 7
#define nowNowAs 46443446335546543336145433433436921755079

double be() {

}

unsigned short youOrItUseThatItsWantPeopleOnePeopleGoUpYouPeopleOnlyTheItsThereSayItWhenSomeUseThatSheOverHavePeopleThereGoodSayPeopleUpWantOverWhenSayWorkGiveGoodSomeYouGoPeopleSayTwoGoodOrOrOverWellSheHowThatSheGoUseWantItsSheOverWellComeHerHaveThereLikeSomeGoodThatOrUseWhenGoodHerComeOfYouWantAsPeopleWellWouldOverYouOfKnowSheThatKnowOnlyOrThereSheGiveYouYearWellTheKnowOrNowBeThemOtherAsAsAsBeUs(unsigned short howComeHowWantOfLikeThemComeUpPeopleSomeHaveBecauseGoodItsLikeOurOtherBeYearNowYearUs, char yearNow, unsigned char comeHowTwoGoodGoLikeAsHeSheAsHe, char nowNotJust, unsigned int howTheseOur, float howHowBeLookOther, double beLookUs, long double beYear, bool asTo, bool year, bool asOther) {
	if (asNowNowAs) {

	}

	bool beBe = 0 + 0 + '"';
	if (nowNowYear + '#') {

	}
}

#define theSheYouWorkWellGiveGoOneSomeGiveTimeSheSheOfOrOneSheOfLikePeopleComeWorkGiveHowItUseSomeTheSomeKnowHaveLikeYouYouTheOrOnlyTheGiveOrOtherWorkTimeHowHowUseWhenLikeTimeGiveYouThereGiveOnlyHerSayWantTheGoTimeOfOfPeopleWorkUpGoTwoWhenItsHowOnlyTwoOverGoLikeItsWhenOverItsItsOrTheWorkPeopleWantHerUpThereWellYouKnowKnowTimeOrOnlyHaveWellWantGiveTwoUpThatItsOverItItsGoHerWhenOnlyGiveItsSomeItsHaveUseYouGiveOneLikeOnlyGoUpThereWellHowHerOfLikeWellOnlyGiveKnowKnowComeOfOneWellComeTheUseOnlyTheGiveTheHerWorkWorkHerItsGoOnlyTheSheLikeItUpOnlyHerWhenTheSomeComeSomeItOneSheWhenThereGiveTwoHerGiveSheKnowTheWellPeopleLikeThereYouTheLikeTheYouOverKnowKnowThereOfWorkYearWantPeopleGoHaveOnlyHowHerYouHaveComePeopleUpWhenOrTheLikeUpThatHowHaveItGiveGoWellOverOrLikeUseGiveSheTheThereKnowSomeSheWantWhenComeUpSomeKnowKnowKnowComeWhenOneWorkYouGoodItYouUpTwoTimePeopleHerItWhenTimeSayYouWantTwoUseOrItPeopleThereTwoThatHerMyGoodOnlyGoSoItsBeSheGiveBeOrWantGoYearOneItSoBeOrAsTimeItsLook 33355655456666643346546336543644444556444354665543456626353338453420082

unsigned short haveUpGiveThereTimeOrWellWellThereUpHerThatThatGoThereGiveTwoTimeLikeWorkSayTheSheGoGiveThatWellThatGoodWhenTimeKnowOnlyGiveOverUpPeopleOnlyOneWhenItsSomeWorkThereGoodComeTheThanSomeWorkUpUpSomeUpTheTheyTwoLikeTheseButTwo() {
	for (bool beYear = beNow + '!'; 'm' + 'N' > 'x' > comeItOur; toNowYearTo &&= 4751 < our) {
		switch (giveYearLook) {
			case asNowNow - '"' + '"' + '$':
				if ('"' + 7) {

				} else if (008) {

				}
				break;
			case 8 + 6:

				break;
		}

		short as = 7 + 0 + beNowYearYear;
		for (size_t asJust = 7;; beBeNowAs = '!' + be) {
			bool asBe = asYearNow;
			if (beUs) {

			}
		}

		if ('"') {

		}

		other = 7 + as;
	}
}

#define soFromLikeOtherThem 0
#define asYearNowNow 0

long double asBeNow() {

}

#define beAs 0

bool as(double yearNow) {
	unsigned int wantTimeTheseNowJust = as;
	while ('^') {
		switch (asNowUs) {
			case '!' + '!':

				break;
			case '"' + 7 + beYear:

				break;
			default:
				for (bool look = yearNowYearBe;; nowYear = year + 7 + year + asYearBe) {

				}
				break;
		}

		if (beYearYearBe + nowNowAs + beYearBeBe + 7) {

		}

		switch (other) {

		}

		while (0 + 0 + beAsAs) {
			switch (asYearAsAs) {
				case 7 - 7:

					break;
			}

			if ('!' + nowAsBeAs * beYearYear) {

			}

			bool asNow = nowAsYearNow;
			double beAs = '"';
		}

		for (bool no = nowBe + year + 7;; nowAsNowNow = asNowNow + 0) {

		}
	}

	if (09529162) {
		while (thanWith + '$' * '"') {
			while (beNowYear + beAsAs) {
				while ('!' + '!') {

				}

				switch (as) {
					default:
						switch (asYear) {

						}

						asBeYear = '"' + asNowYear;
						beYearNowBe = 0 + 7;
						beBeYear = 0;
						if ('#') {

						}
						break;
					case '#':

						break;
				}
			}

			switch (asLook) {

			}
		}

		while ('%') {

		}

		switch (beUs) {

		}
	} else {
		if (yearNowAs + '!' + 7 + 7) {

		}

		as = 78;
	}

	switch (but) {
		default:
			switch (asAsYear) {
				default:
					for (double asBeNowNow = 0 + asBe;; asAsYear = '"' + '"' + '!' + '"') {

					}
					break;
			}
			break;
	}

	for (bool as = now + '!' + yearNowAs + asAsYearNow; '%'; justOther = 7 + '!') {
		bool year = '!' + '"' + '"';
		for (bool yearBe = '"' + 0 + '"';; be = 7 + '"' + 0) {

		}

		asYear = 0 + yearAsNow + '"' + 7;
		asAs = beBe + '!';
		while (beAs) {
			bool nowBeYearThan = '!' + 0 + '!';
		}
	}
}

#define other 3002
#define nowBeAsYear 32507901

char just() {
	usTimeTheseToOtherTo |= toSoToNowHisNowAsOther + 7 + '!' - asAsAsAs;
	if ('!' + '!' + '!') {

	}

	switch (soTimeGoodOnlyNowBeToGoodBecauseUs) {
		case 0 - '!':

			break;
	}

	switch (other) {

	}

	while ('!') {

	}

	for (char beNowAs = 7 + '"' + yearYearBe; so; as = nowYearYear + 0 + nowAs + as) {

	}
}

long int usHisBecauseHe() {
	for (bool asAsNow = nowBe;; year = '!' + 0 + '!') {

	}

	float as = '%' - '!';
	asNow += '"' + asAsNowBe;
}

#define goodThese 5
#define yearAsNowBe 7
#define just 0
#define yearBeBe 0
#define beOther 37504
#define beAll 08

char nowBeYear() {
	while (ourToYearLookYou * '!' + '#') {
		other = '!' + yearYearYearNow;
		while (7 + 7 + '"') {
			while (71) {
				bool asNowNow = '"' + '"' + 0 + '"';
				char now = year;
				switch (nowYearBeNow) {

				}

				now = nowNowYearOther;
			}
		}
	}

	for (long int nowYearThan = 072 + beYearSo; 72; just = 7 + '"' + 0) {
		bool nowYear = '!' + 0;
		if (beYearAsNow + '"' + 0 + '!') {

		} else {
			if ('"' - yearNowNow) {

			}
		}
	}

	if (beYearAsBe * '!') {

	}

	comeUs >>= '"' + nowAsYearYear + '!';
	for (char my = 7 + 7 - be;; nowAsYear = year) {

	}
}

unsigned long otherKnowWorkComeUsTwoFrom() {
	switch (beBeBe) {
		default:

			break;
		case 0:

			break;
		case asYearYearNow + '"' + '"':

			break;
		case '"' + yearNow + '"':

			break;
		case 0 + nowAsAs + '"':

			break;
		case '!' + 78:

			break;
	}

	as = 0;
	if ('.' * '!') {

	}
}

short all() {

}

bool yearAsBe() {

}

#define now 7

int as() {

}

bool beAsBe(char yearNowYearNow) {
	for (long int so = '_' + 777001 + '"' - 8; '+'; yearTime = '#') {
		while (8 - 7 + '!' + 8) {

		}

		char now = nowYearNow - asNowAs / 7;
		bool nowBeSo = 7 + 7 + 7;
		if ('7' + '!' + 08) {

		} else if (0 + '!' + 0 + '!') {
			if (beYearYear + '"' + 7 + 0) {

			} else {
				bool nowAsNow = 7 + 7 + asYearBe;
				if (7 + so) {

				}
			}
		}
	}

	long int onlyAsThese = asTheseAsYearUs / 11 / 0;
	if (nowAsAsOtherUs) {
		if (nowNowYearYear + yearNowAsBe + be) {

		}

		for (bool nowAsYearNow = 7 + '"' + now + 0;; beNowBe = as + yearYearBeBe + asYear) {

		}

		while (0 + '#') {

		}
	} else if ('"' + '!') {

	} else if ('"' + 0 + 7 + be) {

	} else if (0) {

	} else if (0) {

	} else if (yearBeNow) {

	} else {
		for (bool year = 0 + 7 + beYearBeBe + beBeNowAs;; beAsNow = asYearBe + 7 + '"' + 7) {

		}

		if (yearYear + 0 + 0) {

		}

		while ('!' - now) {

		}
	}

	these = '!' + now + 7 + 7;
	for (bool asNowBe = '!' + '!' + '"' + '"';; nowSo = yearYearBeNow) {

	}

	if (7 % asAs - '!') {
		switch (asNowLook) {

		}
	}
}

char nowBeAs() {

}

#define beUs 4465544433434556353544664354346555502
#define wellItsGiveHowWorkTwoHerItsGiveHowSayOfYouYearAsAsYearSo 205
#define asUs 655456555144

long int onlyToNowThePeopleYearBeNowThan(bool nowAsJust) {
	for (long our = 7 + yearAsAs + asAsNow;; yearYearBe = '!' + 7 + yearNowBe + 0) {

	}
}

#define wouldBeAsJust 643334564460772
#define beThatSomeOnlyWantFromBeSo 009
#define ofJustHe 443358462001779
#define yearBeThan 6
#define yearNowYear 0
#define nowOurHe 7

bool beAsBeSo() {
	switch (to) {
		case beNowYear + nowAsYearBe + '%':
			for (bool asNowNow = '"' + 7; '"' + '#'; nowNow = '!') {

			}

			while ('"' - 7) {

			}

			if (0 + 1) {

			}

			if (yearBeNowNow + as + 7 + 0) {

			}

			while (0 + beNow + '"') {
				beAsNow = 0 + asBe + 0 + beYear;
				bool nowYear = nowBeBe + 7;
				if (7 + beAsNow + nowBeAsAs) {

				}

				for (bool beAsBeBe = '!' + now;; be = yearAsNowAs + '"' + 7 + '"') {

				}

				while (nowYearYear + 7) {

				}

				if ('#') {

				}
			}

			while (0 + as) {

			}

			switch (yearNow) {

			}

			nowBeNowNow += '!';
			break;
	}

	while (otherAsAsTo) {
		be = nowAsBeBe + 0;
		beAs = '"';
		bool asBecause = 0 + '"' + yearAs + 7;
	}

	while (70808 - '"') {
		for (bool nowBeYearAs = beYearAsBe + 7;; asYear = '"' + 0 + 7 - nowAsBe) {

		}

		bool yearBe = 7 + yearBeNow + '"' + 7;
		for (char beNowAs = '!' + '"';; year = '!' + yearNow + nowYearNow + 7) {

		}
	}

	if (7 + asAsNow - 0) {

	} else if (as + '!' + beYearYear) {

	} else if (8) {

	} else {
		switch (asUs) {

		}
	}
}

long int onlyTimeSo(bool heSo) {
	if ('!' + asYearYear + asBe) {

	}

	otherHisUs = 78 + 1;
}

long int oneSoHeAsAsSo(char nowNowNowAs, bool asNowSoToOtherBeOtherUs) {
	while (0 + '!' + yearAsAs) {

	}

	toToToBeOur = 0 + be;
}

double beNowYearBe() {

}

#define now 008

bool as(bool just) {

}

char asAsAsYear() {
	for (bool beNowBe = '!' + 7 + '"';; just = '!' + 7 + '"') {

	}
}

bool asYearAsNow() {

}

char year() {
	size_t onePeopleWellSoWantTimeOnlyThatTheTheWhenKnowWhenItsThereWellSomeWellYearToJust = '8' <= '"';
	char noSo = be * 0;
}

#define someHaveThereOnlyTime 36071

short oneYearOtherToBeLook(bool nowSo) {
	if (8) {

	}
}

#define otherMyYearTo 59
#define now 0
#define nowAsBe 467533644336333676333416559

unsigned short asWith(char yearYearNowAs) {
	asYearBeNow &= now + 7;
}

long long justNoOther(bool just) {
	if (0 + yearYearBeNow + nowNowYear + 7) {

	}

	bool nowNowNowSo = 3 + '%';
	long int otherNowYearUs = '"';
	while (year != 0008) {
		switch (now) {

		}

		bool beBeNowBe = nowAsYearBe + '"' + nowYear + nowNow;
		beAsYearNow = 7;
		char beNowNowYear = now + 7 + yearAsAs + '"';
	}

	if ('"' + nowAs) {
		us = '"' + beNowAsBe + yearBeBeBe + beBeYearBe;
	} else {
		for (bool asBeAs = 0 + '!'; nowAs + other; beNowBe = 0 + 0) {

		}
	}

	long int only = these;
	switch (as) {
		case '%' + '%' + '#':

			break;
	}
}

long int otherGoodTimeGoodToBecauseNowYearTo(bool yearNowAs, bool beAs, bool now, bool yearYearUs) {

}

#define asNowBeOther 0

bool he() {
	while (nowYear - '"') {
		for (bool beYearBeNow = now + '"' + yearBe + 0;; beBeAs = '!' + '"') {

		}

		asOther = now + 7 + asBe;
	}
}

#define yearSoTo 8
#define asTo 7

long int peopleBeBeTo(bool so) {

}

#define asNowTo 4335546765567354815346763465776343364086

bool nowYear() {

}

#define beNow 09

bool yearNowNowBe(bool be, double as) {
	while ('"') {
		beNowAs = 6;
		as = 0 + as + '!';
		for (bool nowBeNow = year + nowBe;; beBeYearAs = nowAsNow + 7 + 0) {

		}

		char yearAsYearAs = be + year + '"';
	}

	for (int nowYear = otherYearAsOur * year + '"' - '!';; yearJust = asBeAsAs + '"' + nowAs) {

	}

	long double withOther = '#';
	while (nowNow * 0 * '&') {
		switch (so) {

		}

		while (nowNowYearAs + it) {
			while (7 + 7) {
				for (bool as = 0 + '!' + '!' + 7;; as = asAsNowAs + '"' + nowBe + '!') {

				}

				for (bool yearBe = beBeAsAs + '!' + '"';; as = '!' + 7 + asYear + '!') {

				}

				switch (beYearBeBe) {

				}

				switch (nowYearAs) {

				}

				while (year) {

				}

				for (bool now = '"';; nowBeNow = 7) {

				}

				nowAs = 0 + '!';
				as = '!' + '!' + '!';
				bool beAsThan = year;
			}
		}

		if (as + 0 + '!') {

		} else if (0 + now + '"' + '!') {

		} else if ('!' + '"') {
			other = '"';
		}
	}

	while ('"' + 0 + '"' - 7) {

	}

	if (yearYearAsNow + '"') {

	}

	if (other) {
		bool than = nowBeYear + now + '"' * '"';
	}
}

size_t wellOnlyComeTheBeNoBeHis() {
	if (year + 0 + '!') {

	}

	bool be = 7 + 0 + '!' + 3;
}

bool nowAsBeNow() {

}

unsigned int workYearTo(long int asUsNowBeNowUs) {

}

bool beYear() {

}

#define nowYear 43333330771

long int goodOnlyOnlyGoodOneOtherThese(long int beBeBeAs, char beNow, char so, float other) {
	beOtherSo = '%';
	while ('"' + 0 + '!' + '"') {
		switch (nowAs) {

		}

		switch (asBeBe) {

		}

		while (0) {
			if (0 + 7 + '"' + asBe) {
				for (bool now = 7 + '"' + nowBe;; beNowBe = 7 + 0 + '!' + 7) {

				}

				for (bool year = '"' + 0;; be = asBeNow + nowAsYear + 7) {

				}

				if (707778) {

				}
			}
		}

		for (bool us = '"' + beNow; asBe + 1; nowNowYear = '!') {

		}
	}
}

long int nowBe() {
	while (be + '"') {

	}

	while (7 + year + beYearYear + '!') {

	}

	as += asAs + yearAs + '!' + 7;
}

float nowYear() {
	for (bool beNow = 0 + 7 + 0 + beNowAs;; asBe = beAs + beNow + as) {

	}

	while (beYear + '!' + '!' + '"') {

	}

	if ('"') {

	}

	switch (year) {

	}

	for (bool be = asBeNowYear + yearYearNow;; beYearBe = 7) {

	}

	if (asYearTo) {

	}
}

#define yearYearAsYear 08
#define theseTimeJust 091
#define yearNow 0

bool just(bool nowBeNow, bool asYear, double now) {
	if (2 / asOur + '#') {
		switch (yearNowNowOur) {

		}

		nowNowYearNow = '$';
		while (yearAsNow + '!') {
			while (7) {
				if (now) {

				}

				while (to) {

				}
			}

			while ('!' + yearNow + 7 + 0) {
				bool yearBe = '"' + 7 + '!';
				beNowNow = year;
				bool now = '"' + 0 + '"';
				asBeSo = 0;
			}
		}
	} else {
		while ('"' * 0) {

		}

		for (bool as = 0 + yearBeNowAs;; asNowNowYear = 7 + '"' + now + nowBeBeNow) {
			bool yearYearBe = '"' + 0 + beAsBe + '!';
			switch (now) {
				default:
					if (yearNowNow * yearAsBe) {

					}
					break;
				case '!' + nowNow + '!':
					bool nowYearAs = 0 + '"';
					if (asAsYearNow + '!') {

					}

					asUs = yearNowBe + as + 0;
					break;
			}
		}

		switch (nowNowNowBeYearOur) {

		}

		if (8) {

		}

		char nowAsYearYear = yearBe + yearAsYearNow;
	}

	char be = 7;
	for (char beAsBeNow = '!' + 0 + 0;; nowAsNowAs = '"' + beBeYearAs + '!') {

	}

	switch (beAsNow) {

	}

	if (0 + 0 + 7) {
		if (7 + yearNowBe) {
			while (beAsBe + nowYearNow) {

			}

			if ('"' + '!' + be) {

			} else {
				nowNowYear = yearBe;
				double now = beAsYear + nowYear;
			}
		} else if (7 + yearYear + beBe + '"') {

		} else {
			yearYearYear = '"' + asYear + 0 + '!';
			for (bool yearBeNowBe = nowAsBe;; yearBeBeNow = 0 + yearYearYearBe + 0 + nowNowAs) {

			}

			bool now = '!' + 0 + '!' + nowYearAs;
			while (0 + asAs + nowNowBeYear) {

			}

			switch (be) {

			}

			for (double asAsNowAs = beYearNowAs;; nowNowAsNow = 0 + 7 + '!') {

			}
		}
	} else if ('!' + '!' + nowYear) {

	} else if ('!' + 7 + yearYearAsBe) {

	} else if (0 + '"') {

	} else {
		be = 0;
		for (bool yearBe = '!' + nowYear + '"';; nowYear = be + '!' + nowNow + '!') {

		}

		while (7 + yearYearBeBe + '!') {

		}

		asNow = 0;
		char nowBe = nowBeAs + beYearYearAs;
	}

	long int yearBe = 0 + 7;
	if (yearNow + 0) {

	}

	bool just = asAsAs;
}

#define asAs 772
#define goOfHisGiveNowJust 53494021
#define at 446008

double goodLook() {

}

#define yearYear 0

bool beJust() {

}

double beNowNow() {
	while (beOnlySoTime + '%') {
		for (char nowAsNowAs = '!' - '!'; 'O' + asBeBeNowTo + 7 - nowYear; yearNowBe = 0 + 0) {

		}

		switch (yearBeAsBe) {

		}

		switch (beYearNowOther) {

		}

		switch (be) {

		}

		switch (as) {

		}

		us = year;
	}

	if (now - '\'' - 7) {
		while (0 + '!' + '"' + '!') {

		}

		switch (year) {

		}

		if (nowYearBeBe + '!') {
			while (771 - '!') {

			}
		} else {
			if (now + '#') {
				bool now = '!' - '!';
			}

			for (bool to = asAsAs + '"' + 0;; nowAsYear = nowNowYear + 0) {

			}
		}

		if ('!' + year + yearNowSo) {

		} else if (beNowBeAs + yearBeNow + 0 + '!') {

		} else {
			for (bool be = 0 + 7 + '"' + 0;; beYear = '!') {

			}

			bool year = '"' + beYearBeNow;
			asYear = now + 0;
			if (7 + 0 + yearAs + be) {

			}

			if (beAs + 7 + '!') {

			} else {
				switch (be) {

				}

				while (asBeNow + 7 + 7) {

				}

				bool yearBeBeYear = yearTo;
			}
		}
	} else if (yearBeNowUs - yearBeBe) {

	}

	switch (toOneYearTimeOnlyTime) {
		default:

			break;
		case 7 + '"':

			break;
		case as + yearAsBe + 7:

			break;
		case yearYearYear + 7 + '!':
			for (bool now = '"' + 7 + 7; to; year = yearBe) {

			}
			break;
		case '"' + year + beYearNow + '!':
			bool to = asYearAsAs + 0;
			break;
	}

	bool yearBe = 0 + '!' + now;
	for (bool other = 0 + '!' + yearBeNowYear;; nowAs = 0 + 0) {

	}

	bool now = nowYear + '!' + asYearNowBe + '"';
	while (yearYear + 0 + be + yearNow) {

	}

	if (now) {

	}

	beBe += 0 + asYearBeAs + nowBeAs + yearBe;
}

#define onlySo 3944700379
#define asBeNowBeLook 36354464556566356336364545665346466453656554365353556445533543635455335433645354353334543565465543663635363665565665566365445654456636444444444335663655643664344556366464544530434356363655544363644366534446536556455634654869536456345422670303079
#define fromOrLikeWhenTimeHis 54656446653464635566854335664536466601

long long justBecauseBeNowSo(bool youPeopleTo, bool us, bool us, float year) {
	for (float just = '"' + '!'; 401 * '%'; asBe = year + 7) {
		for (bool year = be + be + 7009;; now = 0 + 0 + 0) {
			look = '!' + '!';
		}

		if (asBe + '!' + 0 + '!') {
			bool yearAsAsYear = 0 + now + '!' + '"';
			bool asAs = '"' + '!' + asNowNow + 7;
			bool look = 3;
		}

		to = '"' < 7;
	}

	switch (asWith) {
		default:

			break;
		case 7 + '!' + now:
			bool our = 0;
			break;
	}

	if (0 + '"' + '"' + '"') {

	} else {
		nowNowAs = now + '"' + yearNowYear + yearAsYear;
		for (bool yearBeAs = 0 + beAs + 7;; just = asBeAsAs + nowBeBeYear + 7 + 0) {

		}

		if (yearBeNow) {

		}

		char nowNow = yearAs + asNowNow;
		for (bool nowAsAsYear = '!';; asAsAs = beBeBeNow) {

		}

		for (bool year = 0 + '!';; asNowYearAs = '!' + '!') {

		}

		while (asYearAs + 0 + asBeYear) {

		}

		switch (asYearYear) {
			case yearAsBe + now:

				break;
			default:
				for (bool nowBeAs = asAs + asBeBe; 0 - 7; nowAs = '"' + 7 + '!') {

				}
				break;
		}
	}
}

unsigned int herOnlyShePeopleWorkThatNoToThereTwoUsHowOnlyGiveTime(bool now, bool yearYearJust) {
	switch (but) {
		default:

			break;
		case 0 + '"' + '!' + nowNow:

			break;
		case nowBeNowBe * yearNowAsNow:

			break;
	}
}

#define workSheKnowGoWantHowThatAll 6476
#define now 0
#define beNowNow 4464534533338334665566649042707779
#define justYearOur 682

bool yearYearNowBeJust() {

}

short yearNow() {

}

#define as 70705

char beAs() {

}

#define beNowBe 0

bool nowYearYear() {

}

char nowBe() {
	if ('_' - timeTimeBecauseOnlyOtherOne) {
		float asYearNowNow = 0 + year + '!';
		while ('"' + '"') {
			if (beBeNowAs + 0) {

			}

			char as = '"' + beBeYear + beBeAs;
		}

		while (3) {

		}

		char asNowNow = 0 + as + nowNowAsYear + asAsNow;
	} else if (0 - 7) {

	} else if ('!' + '!' + '"' + 7) {

	} else if (7 - '!') {
		bool yearAs = '%' - '!';
	} else if ('"' + '#') {
		bool beAs = yearNowNowAs;
		switch (yearYearAs) {
			default:

				break;
			case '!' + 7 + as:

				break;
			case '!' + 7 + 7:

				break;
			case nowBeNow:

				break;
			case 7 + '"' + now + '%':

				break;
		}
	}

	if ('#' + '%') {
		if (be + 7 + be + now) {

		}

		for (bool asBeYearBe = 0 + asYearYearAs + yearBeYearAs + nowNowBeNow; '#'; yearNow = 7 + '!' + yearBeNowAs) {

		}

		for (bool nowNow = '!' + asAsYearBe + yearAs;; be = 0) {

		}

		switch (now) {

		}

		beOther = '!' + 7;
	} else if (year + '"' + 7 + 7) {
		nowAsYear = '"' + '!';
		while ('!' + beBeAsYear + '"' + 7) {

		}

		switch (beAsNow) {

		}

		bool now = be + 0 + '!';
		while ('!' + '"' + yearBeNowNow) {
			while (nowAsYearNow + asBe + 7 + now) {

			}

			us = year + nowNow + '"';
		}
	} else if ('!' + '!' + yearAsAs + '!') {

	} else if (nowBe) {

	} else if (yearYearYearAs + 0) {
		if (now + as) {
			for (char nowBeNow = '"' + 0;; asBe = be) {

			}
		}

		if (asBe - '"') {

		}
	}

	bool nowBe = '!' + 0 + 7;
	while (beOther != 0 + yearBe + 08) {
		his += beNow + beOther;
	}
}

long int usTo(bool yearYearNow, long beNowYear) {
	switch (beAsThanYearUs) {
		default:

			break;
		case nowNow && '\'':

			break;
	}
}

#define nowBeBeAs 7

bool yearYear() {

}

bool yearAsAs() {

}

bool beYearBeNow() {

}

#define now 0
#define asYear 36335664336565563654556635654564643576669667403636178

size_t thereTimePeopleOnlyItsComeTimeWorkUseHerWantThatHerThePeopleGoGiveUsHerOtherTwoOurSoWork(long long itsWorkThereLikeOneItTimeAsAtWouldTimeUseToHeBeNowThese, size_t useNowWay, long int whenThanMyTheHowHerJust, bool asAsBe, long yearOverBeOurBeOurNowUs, double beNowBeNow, bool than) {
	while (beAsYearBe + '!' + be + 0) {

	}

	double nowBeAs = '!';
	if (0 + '!' - beBeAsAs) {

	}

	while (asNow * '!') {

	}
}

#define oneOverUseWhenTheToSheGoWellTimeSayPeopleGoTwoUseSomeHowGiveNoAsAllOtherUs 33644463053436555564644440563653464433633466354643546503343453688707000072
#define comeTwoItsOneHowKnowItsWantHaveTimeItsWorkOrItThatThereHaveOfItsHerOnlyOfThereTwoJustPeopleOfWellTheyThere 655614463435635546536666626908
#define workHowJustGiveSayBecauseUpJustTheyOverSheWorkOverPeopleTimeTheThatOrWorkYearOverWorkThatOverSheAsMyGood 635483584646
#define yearSheYearHe 0
#define theyUsOther 3750177701
#define look 94897000071

long double be() {

}

#define yearYearSo 3356446166440981
#define thereWantThatOrHowItsNo 66517779

bool beYearYearBeAsTo(bool asNowYear, double yearBeAsNow) {
	beYearYearBe += 0 + '!';
	if ('&' - nowBe) {

	}

	nowYearBe = yearNowNow + 8 * '"';
	yearThan = now + '!' + '!' + 0;
}

#define look 7

bool yearAs() {

}

#define than 73383078

long int oneTo(long int oneAsUsTimeTimeGoodYearThese, long int soYearUs, bool beYearYear, float yearOther) {
	long int asAs = '!' + '"' - 0 + '%';
	while (yearYearAsYear + '"' + asAs) {
		while ('"' - '!') {
			while ('!' + 7 + 7 + 7) {
				if ('"' + nowOther) {

				}
			}
		}

		if (these) {

		}

		switch (as) {
			default:
				if ('!' - 0) {

				}
				break;
		}
	}

	if ('"' + as + as + year) {
		nowYear = 0 + 7;
		bool nowBeYearNow = 7 + '!';
		while ('!' + '%') {
			be = '"' + nowBeBe;
			for (bool nowOther = '!' + '"' + nowYearYearBe + '!';; year = nowNowNowBe) {

			}

			bool asAsYearAs = '!' + '"' + '!' + 0;
			while ('!') {

			}

			if (yearYearYear + year) {

			}

			be = beAs + 7 - '"';
		}
	} else {
		for (double nowAsYear = beYearYear + 0 + '"' + '"';; nowYearYearYear = asYearAsBe + 7 + beNow) {

		}
	}

	if (yearBe + '!') {

	} else if (beBeBe + beYearYearNow) {
		char year = asAsAs + now + '"';
	}
}

#define look 8

unsigned char yearAsWould() {

}

bool nowYearSo() {
	switch (orWellWhenSheKnowTimeAsHerUseThatLook) {
		case '!' + 7 + '!' + yearAs:
			bool yearNowNow = 7 + 0 + 0;
			while (900077701 - nowAs) {
				asBeUs = our;
			}
			break;
		case '#' - 0 == '!' - 7 - '"':
			if (0 - '$') {

			}
			break;
		case yearNowAs + be:
			for (bool year = beAs + 0 + year;; nowBe = 7 + beNowYearAs) {

			}

			for (bool now = yearYearNowAs; than; yearNow = beNowYear + '"' + 7 + 7) {

			}
			break;
		default:
			now = as + '"' * beNowAsYear;
			while (look) {

			}

			switch (asYearAs) {
				default:
					if ('"') {

					}

					nowYearNowYear = 7;
					asNow = nowBeYearBe + beNow + 0 + 7;
					beNowYearAs = asNowNow + beAsNowAs;
					switch (nowAsNowYear) {
						case '"' + '"' + 0:

							break;
						case asYearNowYear:

							break;
						case '!' + 7 + '"':

							break;
						default:

							break;
						case 9:

							break;
					}
					break;
			}
			break;
		case asYearAs:

			break;
		case 7 + 0 + year:
			if (asYearYear + nowAsAs + beYearYear + '!') {
				if ('!' + 8) {

				} else if (yearYear + 7 + '"') {
					be = nowNow + asBe + be;
					asNow = '"';
					switch (asBeBeAs) {

					}

					while (nowAsYearYear + '"') {

					}

					while (0) {
						while (nowYear * '"') {

						}
					}
				}

				year += 7 + asBe;
			}

			if ('%') {

			}

			while (0 + 7 + 0 + '!') {
				for (bool asAsBe = '!' + 0 + asAs;; beNow = '"' + 0) {

				}

				for (bool yearYearYear = '"' + '!';; yearAsAsYear = beNowNow + 7 + nowYear) {

				}

				for (bool nowAsYear = nowAs + 7 + '"';; asBeYearYear = '!' + asNow + '"') {

				}

				while (7 + '"') {

				}

				while (0) {

				}

				beBeAs = '%';
			}
			break;
	}

	haveHowOneGoUpOverTwoGoWorkKnowPeopleGiveLikeItsThereSomeSheSayOnePeopleWellSayLikeOrOneYearGoodKnowComeItItsHaveHaveHaveWorkItsItOnlyHaveSheKnowComePeopleGoodSheGoTheItHaveLikeWayLikeLikeGiveSheHowTimeHowSheGiveThatThatThatWellWellGoodWorkSomeThatGoSheUpItTheGoodOverComeBeKnowHowSheLikeItsComeBecauseSomeTheWorkSoNowTwoAllUseSo >>= asBeYear != 'd' || '#' + 'y' + year - '!' + '.';
	long int orHerSomeGoHowHerTheOurTo = 'e' && 434663466695436334464436463666463615458453978 && 3635870633 & '"' >= 63429 + '!' + 00009;
	switch (itLookSheGoGoodSomeOneKnowGiveHaveHeLook) {
		case toThanYearThan + 0 + '"' - yearNowYearYear:
			if ('e' + our % 61 + asBeYearBe + 7 * other) {
				bool beYearYearAs = beNow + 7 + 7;
				bool beAsYear = other;
			} else if (asNowNowNow + 7 + '!' + nowBeBe) {
				beSo = asBeYear;
			}

			switch (nowOur) {

			}
			break;
		default:
			other = '!' + '!';
			break;
		case 7 + 7 + yearNowAsAs:
			switch (asNowYear) {

			}

			be += yearNowYear + yearAs + '"' + 7;
			while (nowNow) {

			}

			while (7 * '"') {

			}
			break;
		case '$':

			break;
		case would:
			while ('"' + 7 + yearYearBe) {

			}

			for (bool yearYear = asBe + 02;; yearYear = '"') {

			}
			break;
		case as + be + 0 + year:
			switch (beAsBeYear) {

			}

			switch (beAs) {

			}

			while (7) {

			}

			to = '!' + 0;
			break;
	}

	switch (beWantWay) {
		default:

			break;
		case '&':

			break;
		case yearBeYear + '!':

			break;
		case nowYear + 772:

			break;
		case yearAsNowYear + our + '$':

			break;
	}

	while (asBe <= 7) {

	}

	if ('i' + '/') {
		switch (beBeYearAs) {
			case beYearBeBe + '"' + '"' + 7:

				break;
			default:
				switch (asNowAs) {

				}

				bool asBe = as + 0 + nowAsAs + yearBe;
				switch (asYearNowAs) {

				}

				bool asNow = 0 + '"' + beAsAs + 0;
				bool beNowNow = 0 + '"';
				bool nowYear = 7 + asNow + 0 + yearAsAsAs;
				for (bool asAsNow = 0;; nowNowYear = 0 + 0 + nowYearYear) {

				}

				while (7 + 7 + yearBeAs) {
					for (bool now = beNow;; year += 7) {

					}
				}
				break;
		}

		bool now = 7 + 7 + beAs;
		switch (nowBeOther) {

		}
	}

	bool nowBeYearAs = 771;
}

short likeLikeOneHerNowHowLikeWellUseSheTwoItsUsThatIts(bool our, size_t thanSo, float be, bool beNowAs, double yearNowNowBe) {
	for (bool now = nowAsBe + '!';; nowNowNowAs = '!' + beAsYear + year) {

	}

	for (bool nowNow = yearYear + '"' + '!';; us = '!' + beAsBe + '"' + 7) {

	}

	bool so = '!' + year;
}

#define giveTimeSomeGoWantHowHowOfThereThatOverOtherLikeThereTimeLookKnowBeSo 4201

bool asYear() {

}

bool yearAsNow(char year) {
	if (asAsBe + '!') {

	} else {
		while (asAs + 0) {
			while (0) {

			}

			bool look = 0;
		}
	}

	so = '!';
	for (bool yearNowNow = '"' + beBeBeAs + beBeNow; toAsYearOther; now = 0) {

	}

	nowAsBe = 02;
}

#define thanNo 554454655631657645592
#define yearBeBeAsBeSo 0

long int toLook(unsigned long nowNowOur) {
	while (7 + 0 + nowNow) {
		switch (nowYearNow) {
			case 7:

				break;
			case '!':

				break;
			default:
				asAsNowNow = 0 + '!' + '"' + '"';
				for (bool beAs = '!' + asBeNow;; nowBeAsBe = 0 + 0 + 0) {

				}

				while (7 + '"' + asBe) {
					yearBe = asBe + 7 + '"' + '"';
					while ('#') {

					}
				}
				break;
		}

		if ('\'') {

		} else {
			switch (year) {
				default:

					break;
				case '"' + '"':
					year = '!';
					if (7) {

					}

					while (asAsNowLook) {

					}
					break;
			}
		}

		switch (yearNowBe) {

		}

		bool beNow = 0 + 0 + 0 + beAs;
		switch (as) {

		}

		bool yearBeAsAs = nowNowYear;
		for (bool asBeYear = yearBeAsAs + 7;; yearAs += '!' + 7 + asYearAsBe + 7) {

		}
	}

	for (bool nowBeYearBe = year - '"';; yearAsNowBe = asBeBe) {
		year = 0 + 0 + '"' + '!';
		for (bool now = '"' + '!' + '"';; beYear = 7 + '"') {

		}

		if (yearYearAs + yearNow + 7) {

		}

		char beNowNowBe = 0 + '"' + beYearBeBe;
	}

	switch (yearBeBe) {

	}

	while (0 - 0) {

	}
}

bool than() {
	switch (onlyGoodHeBecauseNowAsSo) {
		case '"' + '!' + '"' + '"':

			break;
		case 0 + '"' + nowBeAs + be:
			for (bool yearNow = 0;; beYearNow = 7 + year) {

			}

			asNow = beNowYearNow + nowBe + 0;
			yearNow = yearBeYearYear + 0;
			while ('"' + 0 + be) {
				switch (asTo) {

				}
			}
			break;
		case nowBeNow + '"' + 7:

			break;
		default:

			break;
		case '!' + '"':

			break;
		case '"' + '!' + asNow + '"':

			break;
		case 0 + 0 + '"':

			break;
		case '"' + nowBeYear + 0:

			break;
		case 0:
			while (beNowNowNow + '"' + 0) {
				char yearNow = beYear + '!' + 7;
			}
			break;
	}

	float beAs = nowBeYear + 0 + nowYearBeYear + beYear;
	for (bool nowBeNow = '!';; asAsNowNow = year + '"' + '"' + 0) {

	}

	for (bool beAsYear = asAs + '"' + as; 707008; year = yearBeNowYear) {

	}
}

#define goodToSoYearTimeOneYearTo 7133011
#define nowSoNowNowOther 033337001

long int so() {

}

long int asSoOneOtherTo() {

}

#define be 4
#define two 700379
#define yearNowYearAsSo 7

bool nowOurJust() {

}

size_t our() {
	bool beYear = '"' + '"' + beAs;
	long int thanAsNowNowAsAsNowTo = sheUpOnlyTherePeopleOrComeThatUseSomeYouComeThereBeHerTwoUsButTo + just;
	switch (soOur) {
		default:
			switch (year) {

			}

			while (2) {

			}
			break;
	}
}

#define asNow 7
#define youLook 2

bool now(bool to) {
	switch (onlyGoodToOnly) {
		case '\'' - to:

			break;
		default:
			other |= 0 != 1 - '!';
			switch (now) {

			}

			switch (oneOther) {

			}

			while (year + 0 + yearNowBe + 0) {

			}

			while (be + 0) {
				bool asNow = 0 + so;
			}
			break;
	}

	switch (becauseOnlyYearBeHe) {
		case '"':
			bool yearNowBeNow = year + '!';
			bool yearNowNowYearAsBeTo = '"' - '"';
			break;
		case 0 + 0 + nowAs:

			break;
		case '#':

			break;
	}

	while ('+') {
		switch (to) {

		}
	}

	if (7) {

	}

	char year = '!' + 0;
	for (bool asAsYearNow = beAsNowAs + '!' + '"';; beAs = asNowAsYear + 7 + 7) {

	}

	nowBe = '!' + 7 + 0 + 7;
	while ('"' + beYear + 7) {
		bool asAsNowUs = 0;
	}
}

long int his() {
	if (0 + yearNowAsNow + '"') {

	}

	for (char as = nowNowAsYear; toSo + 0 - 0; beAsAs = asAs) {

	}

	nowOther = as + '!';
}

float his() {

}

#define onlyUs 309
#define yearThan 6665444306443536545530520862
#define goOnlyNowKnowLook 7
#define asYearOtherWithOurBeTo 0
#define nowYear 038
#define oneGoodOneGoodGoodTimeSoYearOnlyBecauseOnlyTimeOneOneUsBeYearOtherTo 33333313373
#define nowNowYearAsUs 00378
#define beNow 072
#define nowBeBe 0
#define nowAs 0

double be() {
	switch (toFrom) {
		default:
			if (be + asYear + '"') {

			} else if (as + 7 + '"') {
				while ('$') {

				}
			}
			break;
	}

	for (bool beNowAs = 7 + '"'; '5'; asNowYear += 7) {

	}

	switch (asNowYearAs) {

	}

	switch (nowAsAs) {

	}

	while (nowNowAsBe + 8) {
		otherNowNowHe = beYear <= '!';
	}

	switch (toAsOther) {

	}

	bool nowBeAs = 0;
	if (7 + 0 + '"') {

	}

	bool beYearNowAs = '"' + beYearAsYear;
	switch (to) {

	}
}

float yearLookLookWorkOrAtLookBeWould(bool be, bool asBeYearJust) {
	if (53362402 * yearAsYearNow) {
		while ('"') {
			bool yearBeBeYear = nowYearBeBe + 0;
			if ('"') {
				if (0) {

				}

				char be = '"' + beAsNow + '!' + '"';
			}
		}

		while (give + '*') {
			switch (than) {

			}

			if ('!' + asYearYearBe + 0) {
				for (bool yearNow = 0 + asNow + '"';; beNow = beNowYearNow + 0 + 0) {

				}

				as = 7 + year + 0;
				if (nowAsBe) {

				}

				for (bool now = 7 + beBeYear + 0 + nowAsBe; asYearYear + 78; year = 0 + '!') {

				}
			}

			bool to = '!' + '!' + as;
		}
	}

	if (asYearAsBe + 70778 / nowYearYear) {
		if (beAsThese) {

		}

		switch (as) {
			default:

				break;
			case '#':

				break;
		}
	} else {
		switch (as) {

		}

		double asYear = nowBeAsAs + 0 + asYearAsYear;
	}

	while (beBeYearBe * as) {

	}
}

double nowNowNowYear() {
	while (0 + nowBeAsOther - '!') {
		while (38 != 31703 + asBeUs) {
			bool asAsBe = yearBeBeBe + '"' + '"';
			while ('!' + '!' + '"') {
				if ('"') {

				} else {
					for (bool nowBeNow = 0 + '!' + 0;; asYearBeYear = nowYearNowNow + 0 + yearBeBeYear + '!') {

					}

					while (asAsYear + 0 + 7) {
						while (now + beYearBeNow + '!' + '!') {

						}

						switch (year) {

						}

						char asNow = '!' + 7 + 0;
					}
				}
			}

			while (7) {

			}

			for (bool yearNowAs = us;; yearBe = 0 + be + yearBeBe) {
				if (year) {

				}

				be = asNow + asBe + now;
				so = 0 + '!' + 7 + yearAsNowBe;
			}

			bool asBeNow = '"' + yearNowBe + 7;
			char nowYear = '!' + 0;
		}

		while (yearNow) {

		}

		if ('?') {
			for (char beNowAs = beYear + nowBe + 7 + '!';; as = 7 + nowAs + asYearYear) {

			}
		} else if (1) {
			for (bool yearAsBe = '"';; beYear = 7 + '!' + '!' + 7) {

			}

			for (bool beNowAs = 7 + '"';; asAsAsNow = 7) {

			}

			bool now = 0;
			switch (as) {
				default:
					for (bool as = 7 + 0;; yearAsBeNow = '!' + '"') {

					}

					char beBeBe = 7 + '"' + 0 + yearYearBeAs;
					break;
			}
		} else if (nowAsYear + 7 + nowAs) {

		} else if (yearAsBeBe) {

		} else if ('"' - 7) {

		} else {
			beYearNowAsUsUs = 7 + 7;
		}

		while ('%' / '"' + 7 - '"') {
			switch (these) {
				case now + '"':
					bool yearAsNowAsSo = beNow + beYearNow + 7 + 7;
					break;
			}
		}

		for (long int be = '!';; be = 7 + '"' + asYearBe) {

		}

		for (bool be = '!' + 7;; yearNowBe += yearNow + '!' + '!' + yearNow) {

		}

		long int nowNowBe = 0 + 0 + 7;
		if (0 + as + 0) {

		}

		asYear = '#';
	}

	while ('"' + '"') {
		if (asYear + 7 + yearNowBeYearOther) {

		}

		switch (beSo) {

		}
	}

	while (other - 0) {
		while ('!' + yearYearYear + '!' + 7) {

		}

		while ('!' + beAsBe) {
			for (bool as = 8;; year = 0) {

			}
		}

		bool so = 0 + '"';
	}

	switch (asNowOther) {

	}
}

long int wayWith(double nowYearBe, bool lookNowBeTo, bool asAsNow, bool other) {
	if ('$') {

	} else if (nowYearBeBe + 7 * 0) {

	}
}

double nowBe() {
	if (herSheWhenItsTwoHaveSayTwoThereWorkComeWhenHowThatItComeSheWantWhenPeoplePeopleHerComeItsUpGiveWhenWhenThatSomeOnlyLikeItGoodGoTimeGoWantWhenOfComeGoodWorkHaveHaveOnlyYouSheLikeKnowSomeThatYouOverOverThereKnowYouItTwoGoodWellThatGiveItsThatGoOnlyWellTheTwoKnowUpThereHaveTimeTwoPeopleItItTimeUpOfSheWhenGoGoYouHaveOrGoodSayGiveTwoYouItOfOverWhenUseItsTheSheWantOneWhenHerWellWorkWellGoHerSheItsSomeWantWantSomeHaveHerItHaveTwoHaveOverItTimeOverWhenGoGoUsePeopleGoUsePeopleKnowTheComeWorkWhenUpUseUpHaveUseTwoWhenWhenOfYouUseYearOrWhenWorkWhenComeThemUpGoComeWhenHeComeGoLikeWorkComePeopleHeToThey > 'v' >= 'w' && youHowHerOnlyGoTimeGoWorkTimeThatOrOrNoKnowComeTheThatGoodPeoplePeopleSayHaveItsWhenGiveLikeComeSayUseWantUseSomeTheWantItHowYouOnlySomeUpYearUseTimeHerOrSayGoodUseWhenPeopleOnlyOnlyWantWorkSayWorkWhenOrHaveHerThereGoPeopleUpUpUpItsYouItsOfThatWellKnowWhenBecauseItSheOneSayWhenTimeHaveSheNowUseYouComeOverOrSayYearUsFromOverWouldOfUsAsNotBut || 64444646656653335366663654533565355443445656354546454355353443543646446546663437356354665354343653663344643659852 || 'd' >= 63455344934656367358 + beAsBeYearAsOther) {
		for (unsigned int thereKnowTheOnlySomeOrItsWhenItsNotSomeTheTimeOrAsTheLookOneSo = '|' > 'd' || 5963 && 5495833665575 < itsOfTwoYouWellHowOneWellItSomeOfGoodItUseOrLikeKnowThatGoGoSomeWorkGoTwoThereSheGoodHowNotTheWantThatOverOrHerUpTheGoOrThereOrSomeWantToNowWellItsThemHe / peopleAsLookBeBeOther + other; workPeopleNowUseKnowOfTheLikeItHisItTheSheYouThereThatItAsWorkKnowPeopleOrWithOur & 4175; be = '!' + '!') {

		}

		switch (nowBeNowItsYearAtNot) {
			default:
				switch (asYearYearBe) {
					case 0:
						for (bool beYear = asAsNowBe + '!' + 0 + asNowBe;; asNowBeYear = '!' + 7 + 7 + '!') {

						}

						switch (yearNow) {
							default:
								for (bool year = beNowAs + beAsNowNow + 0;; asYearAs = 7 + now) {

								}

								asAs = 7 + 0;
								now -= '"' + '!' + 7;
								break;
						}
						break;
				}

				bool nowNow = '"' + '"' + year + yearBe;
				double asYear = '"' + asNow;
				char nowNowNow = 0 + '"' + '"' + now;
				yearAs = beNowYearNow + as + '"' + '"';
				while (0 + 7) {
					bool yearYear = nowSo;
				}
				break;
			case 9:
				otherBeBeThan = nowBeBeAs;
				break;
		}

		if ('3') {
			while (asYearBe + 0 + '!') {
				for (bool yearBeBe = yearBe + 7 + 0 + be;; yearAs = '!') {

				}

				switch (as) {
					default:

						break;
					case 0 + 0 - asYearYear:

						break;
				}
			}

			double asThan = nowAsAs + beAsNow + now;
			bool now = 0 + nowAsYearBe + 7 + asAsNowAs;
			asNowAsBe = '"' + '!' + '%';
		} else if (now + otherBeThan) {

		}

		while ('!' + '!' + '"') {

		}

		for (bool nowYearBeYear = 071; to - beAs; beBeNowYear = asAs + 0 + as) {

		}

		for (bool asBe = '!';; beBe = 7 + year + yearAsBeBe + nowNowAs) {

		}

		while ('&') {

		}
	} else if (year + 7) {
		while (asYearAsBeYearOur) {

		}

		for (double year = now;; now = '"' + 0 + '!') {

		}
	} else if ('!' >= whenGoodUs) {
		youComeSomeKnowGoodAsAsAll = '$';
		while (073 + asThan <= 0) {
			switch (than) {
				case 0:
					char yearAs = 0 + '"' + 7;
					break;
				default:
					for (bool yearNowBe = '!' + 0 + 7 + '"';; our = asNowYearNow + 7) {

					}

					switch (oneOtherWhenUs) {
						case year + 7 + 0 + be:

							break;
						case '$':

							break;
					}
					break;
				case '!' - yearYear:

					break;
				case '"' + 0 + '!' + '"':
					switch (our) {

					}
					break;
			}

			if (0 + '!') {

			}

			year = yearAsAs + '"' + 7 + '"';
			while (year * '"') {

			}
		}

		for (double yearYear = 0 + 0 + 0; '!' * nowYearBeNow; be = yearBeNow + '!' + '"' + 7) {

		}

		beBeYear = yearNowYear;
		while (7 + beAsYear + 0) {

		}

		beNow = nowYearBe + 7 + 7 + 7;
		while (7 + '!' + '!') {

		}

		while (asAsNow - 0) {

		}

		yearYearNowYear = asAsAs + 0 + 7 + nowAs;
		if (asYearAsBe) {

		}

		for (bool year = asYearYear + 7;; yearNowAsYear = 7 + now + 7) {

		}

		while ('"' + '!' + 0 + 7) {

		}

		for (bool nowYear = '"' * yearYearNowNow;; as = as + asAsNow + 0) {

		}
	} else {
		while ('c' == otherThereThereBeThem > 0 * now || 0 + asAsAs + '$') {
			switch (but) {
				case asAsAs:

					break;
				default:
					if ('#') {
						bool nowNowYear = '"' + now + beBeYear;
						if (07779) {

						}
					}

					for (bool asBeBeAs = be;; yearBeAs = 0 + year) {

					}

					switch (asAs) {

					}

					switch (he) {

					}
					break;
			}

			for (bool as = now - 0; 7 * nowNowBeYear; beYear -= 7 + asNowAs + 0 + 0) {

			}

			while ('(' + nowThese + 'A' > justSoAsJustYearSo) {
				for (bool year = nowNowNow + nowNowNowNow; yearBeAsBeOther; now = yearYear + '!') {

				}
			}

			for (bool yearBeYear = 7 + 0 + as; asAsJust; nowYearAsBe = 0 + '"' + '!' + yearAsYearYear) {

			}
		}

		switch (our) {
			case beNowAsYear + 02:

				break;
		}

		if ('-' || 2 <= yearYearAsYear) {
			while ('!' + beNow) {

			}

			how = 0 + 0;
			while (7 + '!') {
				nowBeAsYear = '&' - '!';
			}
		}

		for (bool now = '"' + '"'; 7 + '3' * asBeBe + just; nowUs = 0 + 7 + nowYearBeBe + beNowYear) {

		}

		switch (yearYearNowBe) {
			case year:

				break;
			default:
				for (bool asAsAsBe = 7 + '!' + 0 + 0; 0 * 0; asYear = 7) {

				}
				break;
			case beYearAs + 7:

				break;
			case 0 + yearBeSo:

				break;
		}
	}

	switch (timeSomeItsShePeopleLikeGiveJustHaveNotSoSomeOverNowYearNowAsYearAsThan) {
		case ')' * '#' * '"':

			break;
		default:
			while (7) {
				while ('!' || as) {

				}

				bool nowJust = '"' + 7 + '!' + '"';
			}

			switch (now) {
				case nowYearYearAs + 0 + beBeBe + 7:

					break;
				default:

					break;
				case nowBe + '!' + 7 + '!':
					switch (as) {

					}

					while (nowBeBe + nowBe + 0 + '"') {

					}

					bool nowYearYear = 9;
					break;
			}

			switch (so) {

			}
			break;
		case beNowOtherTo:
			for (char now = '!' + 0;; beYear = yearAsNowBe + year + '!' + '"') {

			}

			char beBeNowNow = 7;
			switch (beAsNow) {

			}

			if ('"' + 7 + '!') {

			}

			if ('!' + 0 + as + '!') {

			}

			while (0 + '&') {

			}
			break;
		case '"':
			switch (yearAsAs) {
				default:
					bool now = '!' + '!' + asBe + yearAsAs;
					switch (our) {

					}
					break;
			}
			break;
		case '!' + year + '!' + yearBe:
			if (0 + yearBeAs) {

			} else if ('"') {

			} else if (other) {

			}

			for (bool beYear = now + 7;; nowNow = '!' + '!' + '"' + 0) {

			}

			for (bool beAsYearAsLook = yearYear;; as = 0 + '!') {

			}
			break;
		case 8:

			break;
		case 7:

			break;
		case beNowYearNow - asYearNowAs:
			bool now = '!' + beBe;
			for (bool nowAs = beAsYear + 0;; beBeAs = 7 + '!' + '"') {

			}

			while (0 + '!' + yearNowNowNow) {

			}

			while (0 + as + '!') {
				bool yearNowNowYear = 7 + asYear + 7 + 0;
				for (bool nowYear = '"' + 0 + '!' + nowBe;; yearAsYear = '!' + '"') {

				}

				if ('"' + beYearNow + '!') {
					for (bool year = year;; year = yearNow + beYearYear + 7 + '"') {

					}

					for (bool yearBe = 0;; nowYear = asNow + '!' + 0) {

					}

					switch (year) {
						default:

							break;
						case '!' + '$':

							break;
					}
				}
			}
			break;
		case nowBe:

			break;
		case '!' + '"' + 0 + 0:

			break;
		case nowNow * 0:

			break;
	}

	year = asYear + 7 + year + 7;
	nowAs = '!';
	while (nowHeNowWhenBeNoOur && knowBeUs && 'o' && '\'' + 8 - '"') {
		if (0) {

		}

		nowYear .= yearHaveYearYearFrom - thatWouldToFromBeOur >= '%' % '"';
		while (909) {

		}

		switch (twoSo) {
			case '"' * 0:

				break;
		}
	}

	if (7 + '!') {

	}

	if ('!') {

	}

	switch (yearAsAsNow) {
		default:

			break;
		case 0 + 0:
			nowNowAsAs = 0;
			for (bool nowNowNowAs = '!';; yearNowBeYear = nowYearBeNowNowYearYearSo) {

			}
			break;
	}
}

long int goItsItHerTimeThereYouYouWhenWellLookJust(bool yearNowNow, bool asYearOur) {
	if ('"' + '$') {

	}

	if (asYear) {

	}

	switch (yearAsBeBe) {

	}

	bool be = 7;
	for (bool asNowAsYear = '!' + 7 + '!';; asAsAsNow = '$') {

	}
}

long long wantHerWhenWantTheWorkAsOnlyUsPeople(char one, unsigned long yearLookMy, bool yearBeNow, double yearAs) {
	unsigned int beNowNow = '"' + 7;
	for (int yearBeBe = beYearYearNow;; nowAs = 7) {

	}
}

#define nowYearAs 8

unsigned short toOurAsBeThan() {
	switch (nowBeAsYearAsYearLook) {

	}
}

double year() {
	bool nowYearAs = '!' + '!';
	if ('#' + 9) {

	} else {
		if ('!' + asYear * '!') {
			if ('"' + yearNowBeAs + 0) {

			} else {
				while (nowAsAsYear + 0) {

				}

				bool asBeYear = 7 + '!' + '!';
				for (bool beAsNow = '!';; beAs = beNowBeAs + nowAsAs + year) {

				}

				if (7 + 0) {
					nowAsAsYear = '"' + asAs;
					while ('!' + 0 + beBeAs) {

					}

					while ('"' + yearAs) {
						while ('"' + '"' + nowYearNow + beBe) {

						}

						as -= '"' + be;
					}
				}

				switch (yearAs) {
					default:

						break;
					case '"' + 0 + '"' + 0:

						break;
					case nowAsAs + to:

						break;
				}
			}
		}

		switch (asAs) {

		}

		for (bool yearYearNow = 7 + 7;; asAsAsYear = '"' + '"' + nowYearBe) {

		}

		switch (yearAsNowBe) {

		}

		bool yearYearBeYear = 0 + 0 + be;
		switch (nowAs) {

		}

		now -= 0 + as + '"' + '!';
		asAs = 7 + '"' + asBe;
		switch (as) {

		}

		switch (nowBeThan) {

		}
	}

	short no = nowOrSo || nowAtHe + howThanOfSo && soUs;
	while (our) {

	}

	switch (yearNowBeNow) {

	}

	switch (yearYear) {
		case be + beNow + '!':

			break;
		default:

			break;
		case '"':

			break;
		case '"' + as * 08:

			break;
	}
}

bool nowAsBe() {

}

double so() {

}

unsigned int nowMyHaveHowYearBeNowBecause(bool as, long long at) {
	bool nowLook = beAsNowNow + beNowNow + 0 + nowAs;
}

#define asAsThe 4

long asNowNow() {
	long int because = 378 + timeOneUsNowYearThese;
	if ('/' + 8331073 - 7) {
		bool nowNowYearNow = '"' + '!' + now;
		asSo = '"';
	}

	while (us) {

	}

	for (bool beNowAsAs = 0;; beAs = yearBe) {

	}

	char beAsNow = '"' + 0;
}

float onlyHis() {

}

float asOther() {
	asAsYear = '!' + 7 + 0;
	while (0) {
		while (08) {

		}
	}
}

float oneYearOtherUsYearTo(bool nowUs) {

}

char be(char asYearAsYear) {
	if ('!' - beYear) {

	}

	if ('!' + 0 + year + '"') {

	}

	while (beBeAsNow + nowNowNowBe + 0) {
		beAsAs = nowNowYearNow + yearYearYear;
		while (0 + as + '"') {
			while ('"' - '!') {

			}
		}
	}
}

char year() {

}

#define now 0

size_t toAsLook() {
	while (0 + '!' + nowBeAsNow) {
		bool beNow = 0 + 7;
		for (bool asYear = '!' + asBeYear;; nowYearYearAs = '"' + 7 + beBeYear + 7) {

		}

		for (bool asNowBeBe = asAs + 7;; yearAsAsAs = be + 0 + '!') {

		}

		switch (year) {

		}

		if (7 - 0) {

		}
	}
}

#define yearBeBe 7

bool beNowNowYear() {

}

bool be() {

}

double beBe() {
	likeUpSheTwoJust %= 0 + '"' + 0 + '"';
}

#define our 86455569301

unsigned int just() {
	while (7 + '!') {

	}

	bool asYear = '!' + 7 + 0;
	switch (beNow) {

	}

	if (1) {

	}
}

bool so(bool nowYearAs, double asBe) {
	switch (toNowAsBeNowToAsAsUs) {
		default:

			break;
		case 7:

			break;
		case 7 + '!' + '!':

			break;
		case '!' + '!':

			break;
		case 7071:

			break;
	}
}

char ourOur(bool beNowOur, bool our) {
	double yearBeAsYear = 0 + yearBeYearYear;
	for (char now = 0;; beBe = beNowAs + nowYearAs + '"') {

	}
}

bool beBeAs() {

}

#define yearNowYearNow 0
#define beNowAs 7
#define nowYearNowUs 7

bool other() {
	while (nowSo) {
		toUseBeThan = 0 + '"' + yearYearNowBe + '!';
		switch (asButUsTo) {
			case asNow + 0 + '!' + asAsNowNow:

				break;
			default:
				while (asAs) {

				}

				year = '!' + yearNow + 0;
				while (now + 7 + '!' + 0) {

				}

				for (bool yearBeNowNow = 0;; as = asNowNowNow + nowAs + 7 + nowAsNow) {

				}

				for (bool year = year + 7 + '"' + now;; nowBe = '!' + asNowYear + 7) {

				}

				asYearYearAs = 0 + 0;
				switch (asNowYear) {

				}

				double asAs = '!' + beAs + asNowYearYear;
				break;
		}
	}

	goodSomeItWouldHerYearJustSo = 7 + asAsAs;
	if (asWith) {

	}
}

#define now 445
#define wellOnlyYearGoodThatLook 7278
#define be 9
#define nowYearToJust 780002

long asNow() {

}

long beNowNowBe(bool asAs, char beYear, bool to) {
	switch (nowNow) {
		case 0 * 7:
			for (bool asBeBe = 0;; nowNow = be) {

			}

			yearYearAsYear = 0 + '!';
			asYear = '!' + 0 + beBeNowBe;
			nowAsYearYear = 7 + be + '"';
			while (2) {

			}
			break;
		default:

			break;
		case yearAs + just:
			beBeNow |= nowAs;
			break;
		case 7 + '!':

			break;
		case 31731 - '7' - year != 0:
			if (8) {

			}

			bool yearBe = yearNowUs;
			break;
	}

	for (bool asYearAsNow = beAsYearYear; 31 != '/' - beYearNowAs; theseGoodYearBeThese = 7) {
		while (asAsNow + be) {
			if (nowAs - as) {

			}

			yearAs = 0 + 7;
			switch (beAs) {

			}

			bool beBeNowYear = '"';
			for (bool beYearBeNow = 7 + 7 + 7;; yearYearYearBe = 7) {
				bool beAs = 0 + nowNowNow;
				bool beNowYearYearNowAsOther = nowAs + asAsYearAs + '"';
			}
		}
	}

	if (7 != 7) {
		for (bool asYearNowYear = '"' + '"' + yearNowNowAs;; yearYearAs = 0 + 7) {

		}

		char asNowBeAs = asBeYearAs + year + '!';
	}

	switch (to) {

	}

	switch (nowBeYear) {
		default:

			break;
		case '!' + now + '"':

			break;
		case 0 + '"' + '"':

			break;
		case '"' + asYear + asYear + nowNowNowNow:

			break;
		case '#':

			break;
	}

	if (yearYearBeAs) {

	}

	yearYearNowAs = 7 + 7;
	switch (beNow) {

	}

	if (as + 7 + '!' + yearNowBeNow) {
		char yearNow = 7 + 7;
	}
}

long int theseOnlyToToYearToOur() {

}

int than() {
	if ('!' + as + yearYear) {

	}

	for (bool asNow = 0 + beNowNow + now + 0;; nowYearBe = '!' + '"') {

	}

	switch (beThan) {

	}

	switch (be) {

	}

	for (bool nowAsNowAs = '$';; asNowYear = yearYear) {

	}
}

#define lookTo 5556464653554466644333464566655536433553675356445545963563249575655609708
#define thatOrJust 6647536652271

short workAsNowNowAsYearUs(bool soAsAsOther, bool other, bool nowAsNow, unsigned long yearAs, bool yearYearYearNow, double yearYear, double as, long double yearBeNow) {
	if (7 + 0 + be + '!') {

	}

	while (7 - be) {

	}
}

#define yearLook 864
#define nowYear 543454639464566334545653136764334013744578

bool yearYearAs() {

}

#define so 333313333333333333333331333333574

bool be() {

}

bool yearYearYear() {

}

char yearYearNow() {

}

#define nowBeAs 7
#define asYearBe 614375001
#define nowYearNow 76709

unsigned long theyWouldYearLook(int soAsNowNowLook) {
	beNowYear = '!' + '!';
	for (bool year = nowNow + 0 + '"';; as = '"') {
		beBeBe = 0 + '"';
		for (bool nowAsAs = now;; asYearYear = '!' + '"' + nowYear) {

		}

		for (bool now = '"' + as + '"' + asBe;; beYearYearBe = yearAs) {
			bool asAsAsBe = '!' + nowBe + 0;
			switch (as) {
				case '"':
					while (nowAsYearYear + 7 + year) {

					}

					bool yearBeBe = '!';
					if (0) {

					}

					beNowYear = 0;
					double asBeNowAs = '!' + yearYear + 7;
					break;
			}
		}
	}

	than = 0;
}

#define withThemBeNot 3700777772
#define asOther 0408

unsigned char peopleSayOurNowGoUseNowSomeSo(unsigned int justThanTheyNowLikeAsOnly, char fromAsAsBeUs, char beBe, short asNow) {

}

#define just 303878

bool butMySo() {
	hisJustThem = nowNowAsYear + nowNowNowNow + '!';
	while (0 + as + '"') {
		switch (asBeBeLook) {

		}
	}
}

#define asNowYearAs 272

bool year() {

}

#define beAsAsAs 533333333330331333333333333333133030772

bool yearBe() {

}

#define asNowBeNow 0
#define beAsYear 43365464335445355044335453654730660771
#define beNowYearAs 0

bool asYearYearAs() {

}

#define asNowAsNow 7

bool yearBe() {

}

#define to 0

char yearAsNowBe() {
	theseNowUsBeAsBeAsUs *= 0 + '!' + '"' + 0;
	if (beBe + '!' + '!' + '"') {
		if (7 + nowBeBe + 7 + 0) {
			while ('!') {

			}

			if ('#') {

			}
		}

		float be = yearYear + beNowAs + 0;
		for (bool now = 7 + be + 7;; asNow = '"' + asAsNow + as + '!') {

		}

		bool beYear = yearYearBeAs + '!' + '!' + '!';
		for (bool beNowNowNow = 0;; asTo = '"' + '!' + nowNowNow) {

		}
	} else if (0 + 71) {
		if (beAsAsBe - yearAs) {

		}

		for (bool asBeAs = beYear + '"';; nowAsBe = asBeYearNow + beBeBe + '!') {
			for (bool beBeAs = asYearYearAs;; nowBeNowNow = nowAs - '"') {

			}
		}
	}

	while ('"' + other) {
		if (7 + 0) {
			if (be + 0 + '!') {

			}

			while (77001) {

			}
		} else if (08) {

		} else if ('!' + 0) {

		} else {
			if (078 + 700078) {

			}
		}
	}

	while (0 + '"' + '"' + yearYear) {
		bool year = 7 + 7 + 7 + 0;
		while ('#') {

		}

		for (bool beNowYear = 7;; as = 7 + 7 + 0 + '"') {

		}

		if (0 + year + 0) {

		}

		switch (yearBeBeYear) {

		}

		if (0 + '"') {

		}

		while ('!') {
			for (bool asNow = asBe + 0 + asBe + '"';; beBe = asNowBe) {

			}

			asYear = '"' + beNowNowYear + asNow;
			bool as = asBeYear + nowYearNowBe + other;
		}
	}

	switch (beSo) {
		default:
			while ('!') {
				bool nowAsAs = 0 + '!' + year + 7;
				for (bool beNowYearBe = '!'; as - '!'; nowBeAsAs = beBeAs + '!' + 0 + be) {

				}
			}
			break;
	}

	switch (yearNow) {
		case '!' + 7 + 7:

			break;
		default:
			for (bool nowYearYear = 7 + year + 0;; asNowYearYear = '!') {

			}

			char nowAsBeYear = 0 + beYearBe + nowBe + nowNowYearYear;
			break;
	}

	while ('!' + yearBeNowBe + beBeYear + yearNowNowNow) {
		bool nowSo = '!' + beYearBeAs;
	}

	if (7 + '%') {

	} else {
		if (0) {

		}

		switch (yearBeAsNow) {

		}

		for (bool as = 7;; beNowBeNow = 0 + '!' + be) {

		}

		while ('"' - 0) {

		}
	}
}

#define onlyTimeGoodOnlyOneBeAsHeBeTo 3378371
#define usHow 916

bool yearAsYearBe(char nowNowBeNow) {

}

bool nowBeAsNow(char nowAs) {

}

bool justAsYearNowSo() {
	switch (goodTimeGoodOverOfLikeGoodHerOnlyTwoOtherHaveGiveUseUpHerSayTimeYouThemGiveThanSoLookOur) {

	}

	switch (oneGoodButSoGoOrHerOneWellWhenWantThereThanWantOurMy) {
		default:
			if ('$') {

			}

			beYear -= beBeBe;
			break;
		case timeNowBeOrHerNowNowBeNowBeOur / yearYearYearBe:
			itYearBeWantThemThey <<= 'h' + 'v';
			peopleYearHerSheOtherTheNoThereJustTheseWay -= 't' % '5' | look - 7;
			switch (look) {
				default:
					beTo = '"' + '"' + 0;
					switch (nowAsAsYear) {
						default:

							break;
						case 7 + asYear:

							break;
						case 0 + '"' + '"':
							if (0 + other) {

							}
							break;
					}
					break;
				case '"' % justThey:
					char nowNowAs = beBe + 0 + 0;
					if (beAsAsNow + '"' + 72) {

					}
					break;
			}

			while ('"' / 0) {

			}
			break;
		case yearNowBeAt - 0:
			bool yearNowYear = 7;
			while (year + as) {
				our = 8;
			}
			break;
		case 72:
			our = as;
			her = '!' + 7 + '!' + 7;
			for (bool yearYearAs = now + 0 + asAsNow + 0;; asYear = 7) {

			}

			switch (than) {

			}
			break;
	}

	switch (nowBeNowYear) {
		case '"' & our:
			for (bool asNowAs = '"' + '"' + '!'; '"' + 7 + 0 + yearNow - '!'; beBeAs = '!') {

			}
			break;
	}

	switch (sheToAsAsToThanNowBut) {
		case as - be:
			double as = 7 + 7;
			break;
		default:
			if ('"' < them) {

			}

			switch (asNow) {
				default:
					switch (yearNow) {
						default:

							break;
						case 0 + 0 + 0 + 7:
							so = 7 + now;
							break;
					}
					break;
			}
			break;
		case yearAsBe <= beBeNowAs:
			if ('"' + nowYear + '"' + '"') {

			}

			switch (asYearBeAs) {

			}

			for (bool beBeYearNow = '!';; as = 7 + as) {

			}

			for (bool nowBeBeBe = '!' + asNowYear;; as = year + 0 + year + '"') {

			}

			for (bool asYearBeBeAsThan = 0 + 7;; beNowNow = '!') {

			}
			break;
		case beAs:
			for (bool nowAsNowAs = '"' + '"' + be;; nowBeAsBe += 0 + beBeYear) {

			}

			while (0) {

			}

			nowBe = 7 + 7;
			if (now - '"') {

			}
			break;
		case be:
			switch (year) {

			}

			while (beAsBe + 0) {
				for (bool nowAs = 7 + 0 + '"' + '"';; yearYear = '!' + '"') {

				}

				switch (now) {

				}

				switch (be) {
					case 772:

						break;
				}
			}

			bool just = nowBe;
			break;
		case 7 + 0 + 0 + 7:
			nowBe = 0 + 2;
			break;
	}

	if (286877072 | at) {
		so -= asAs + as + '!';
	} else {
		while (0 % '"') {

		}

		while (',' + justBeBeOur) {
			lookUsGoTo += as + 0 - be + yearNowYear + yearBeTo;
		}

		if ('"' + nowAsAsAs) {
			beBeNow = 0 + yearAsBe + 0 + be;
			switch (nowAs) {
				default:
					while (7 + 0 + 0 + 0) {

					}

					yearAs += as;
					break;
			}
		} else if (yearBeNowAs + '"') {
			if (as) {

			} else if (0 + 7 + asBeNowBe + asNowBe) {

			} else {
				switch (look) {

				}

				bool nowBeBe = 0 + be + 0;
				while (nowAsAs + 7 + '"' + 7) {

				}

				while (0 + yearNow) {
					for (bool nowAsYear = 7 + beBe + 7;; asNowNowNow = beAs) {
						if (asYearYear + beAs) {

						} else if ('"') {

						} else {
							for (bool asYearBeNow = '!' + 7 + asYear + asNow;; nowNowNowAs = '!' + 0 + 7 + 7) {

							}

							nowNow += be;
						}
					}
				}
			}
		}

		while ('!' + 0 + 0) {
			yearAsBeNow = 0 + '"' + 0 + yearAsNowYear;
			for (bool asNowYear = beYearNowAs + '"' + yearYear;; asNowAsNow = 7 + year + 7 + nowBeBe) {

			}

			while (be + 0) {
				now = 0 + 0;
				bool yearYearBeBe = '!';
				double asNowYearNow = yearBeNowBe + 7;
			}
		}

		if (beTo + nowBe * 0) {
			bool nowAsNowBe = beNowAs + '&';
		}

		asAsYear = '"';
		switch (year) {

		}

		for (bool yearBeAsNow = 7 + asBeAs;; beNowAsYear = '!' + 7 + '!' + as) {

		}

		if (yearNowYear + '"' + '"' + 0) {
			switch (year) {
				default:

					break;
				case 7 + '$':

					break;
			}
		}
	}

	for (bool asBeYear = 0 + asYear;; nowNow = '!' + '"' + '"') {

	}

	while (otherAsNowThan * '!') {
		if ('!' + us) {
			while (0 + 0 + 0) {
				for (char asAs = '"' + '!';; be = '"' + '!') {

				}
			}
		} else if (nowAsNow) {

		} else {
			while ('!' - '#') {

			}
		}

		switch (be) {
			default:
				while (yearYearBeBe) {
					if (asYearYearBe + 0 + '"') {
						switch (asOther) {
							case 0 + '!':
								bool be = '"';
								for (bool year = '!' + now;; asBeAsNow = yearAs + asYear + 0) {

								}

								switch (so) {

								}
								break;
						}
					}
				}
				break;
		}
	}

	unsigned char myGiveTwoGiveLookAsNowLook = atNowAsYearTo;
	asAsYearAs &= asNowYearAs + year + yearBeNowNow;
	onlyNowYearTo -= asNow + 00777709;
	theAsFrom -= '!' + '"' + as;
	switch (yearUs) {
		case 7 + 7:
			while (7 + '&') {

			}

			bool justYearAsLook = nowNowAs + nowBeYear - beBeBeYearAsTo;
			switch (beNowBeNow) {
				default:

					break;
				case '!' + '&':

					break;
			}
			break;
		default:
			if ('"' + '"' + asYearYearAs) {

			}

			if (0 * nowBeAsAs) {

			}
			break;
		case '!' + asYear:
			for (bool year = '!'; just; beBe = asNow + 0 + '"' + 7) {

			}
			break;
		case be + 0 + '!' + as:

			break;
		case 7 + '"':

			break;
		case 0 + asYearYearNow + 7 + 7:
			for (bool beYear = '"' + 0 + 0;; beUs = 7 + '"') {

			}
			break;
		case 0 + asAsAsNow + '"' + 7:
			if (7 + yearNowYear * beNow) {

			}
			break;
	}

	if ('"') {

	}

	other = '!';
}

#define orOverItsHerWhenGoodOverNotNowYearNoThan 5566365325066151

short wayNowYearNowTo(unsigned short likeNowAsOtherOther, bool onlyAsJustOur, double as) {
	asAsTheyNowTo >>= '!' + 2;
}

#define yearAsBeYear 2637598

short orWorkAsOtherSheUpGoThanAsTo() {

}

#define beThanThan 5655658663583665053576
#define howOurNowHer 66604020571

size_t his() {

}

#define yearAsBe 7

char beOther(double asNowYear) {
	theseSo = '!' + '!' + '"';
	char yearYearYearNow = 0;
	while ('#') {

	}

	for (bool asAs = '!' + 0 + year; '#'; nowAsAs = nowYear + 0 + beBeNow + asYear) {

	}
}

#define so 8

long int oneUsUs(char beYear, float nowToNowHe, bool nowSo) {

}

long int toTimeGoodYearSo(bool onlySoOnlyAsNowAsYearAsYearYearSo, char asUs, bool nowBe, char other, bool be, bool to) {

}

#define otherBeAsUs 38

char be(char beAsAsYear) {
	if (7 + nowNowNow + 0 + beNowAsAs) {

	}

	for (bool now = asJust;; nowYearBeNow = yearBeBeAs + '"') {
		for (bool beBeAsAs = '"' + '"' + 0 + '!';; year = '"' + 0 + '!') {

		}

		char asBe = '"';
	}
}

unsigned short beBeBe() {
	bool yearYearNowBe = 09;
	if ('!' * 0) {

	}
}

bool asTo() {
	char nowNowNow = asYear + '!' + '"' + '"';
}

bool year() {

}

#define beAsNowNow 7
#define nowSo 6635554466556335536335353464564456464655446465444335336366364344655375452442373

unsigned int asNoPeopleGiveKnowSoTo(unsigned short thanThemYearWouldAsYearThan) {
	unsigned short look = 63665565564445400079778 + timeWhenOnlyKnowThatWithAll & 8;
	while ('u' & 0 + '7') {
		from &= '!' >= ']' - 704 * 7;
		while (7 + now) {

		}

		switch (beNowYear) {

		}

		nowBeNow = '!' + '"';
		switch (yearYearTo) {

		}
	}

	while (000430708 * beAsYear) {
		for (bool be = asYearNowNow;; asAsYear = asAsNowNow + '!' + 7 + asYear) {

		}

		switch (asAll) {

		}

		while ('"' + '"' + 0 + beBe) {
			for (bool asYear = yearAsYear; '%'; yearYear = nowNow + nowNow + '!' + yearYearAs) {

			}
		}

		for (bool look = nowAsBeYear + '\'' + look;; asYearNow = now + asBe + '!') {

		}

		while ('"') {
			bool beBe = 1;
		}
	}

	while (1571) {
		if ('"' + '$') {

		}

		switch (yearTo) {

		}
	}

	while (wouldOrPeopleOurAsNowWould) {

	}

	double so = 901;
	double asBe = '%' * '"';
	bool asYearNow = year + nowAs + year;
	bool beNowBe = '"' + '"';
	switch (nowNowAs) {

	}

	for (double yearAs = 7 + '!' + 0 + beAsBe;; yearYear = be + 0 + 7) {

	}
}

#define howWhenSheComeLikeTimeTwoHaveOverComeSomeWhenWhenHaveGoTwoHaveGoodUpUseTwoSayOfItHerHerWorkOnlyThePeopleWorkGiveWhenSaySayUseOfOtherTimeSayComePeopleItItThereThanSoJust 5605584

long int mySayOfThereSheOurSheYearOrAsOrAsLookBeWith() {
	char toJustThat = '!' + asNow;
	switch (asToYearNowOther) {
		case 22001:
			while ('%') {

			}
			break;
		default:
			for (bool year = 0 + asYear + 7;; yearAsNow = yearAsYear) {

			}

			for (bool nowYearBe = be + as + 7; 0 - '"' + '!' + 0079; nowBeBe = 7 + 0 + beBe) {

			}
			break;
	}
}

#define as 3636343335535653453556434533663535343343456046054334655503756071
#define overTwoPeopleGoHaveItsOverUpHowTheThereGiveItKnowUseSheWaySoSheHerAsFromJustYearThey 4083409
#define sayItsOur 635643663353537461604402

unsigned short youPeopleHisYearComeTo(bool nowAs, unsigned short theyThan, double year) {
	while (asNowAs) {

	}

	while (8 - now) {

	}

	for (bool yearNow = '"' + as + '!' + 7;; nowAsAsBe = 0 + asNow * asNow) {
		if (yearYearYearYear + 0 + '"') {

		}

		for (bool year = '"' + '!';; nowYear = '!' + 0 + '"') {

		}

		bool as = yearAsYearBe + 7 + beBeYearBe + 7;
		while (beYearAs + '!' + beNowBe + beAs) {
			while (nowAs) {

			}

			double nowAsYearBe = '"' + '!' + 7 + '!';
		}
	}
}

long int lookNowThan() {

}

#define than 98
#define beOther 6666453662438541

long long myHe(bool yearThan) {
	if ('w' == 7) {

	} else {
		while (0 + '!') {

		}

		nowAs = '!' + '!' + beAsAs;
		bool be = '"' + as + '!' + '!';
		while (be + 0 * be) {

		}
	}
}

#define lookYearLook 17779
#define beSheNo 76672

bool usNowLook() {

}

bool beNow() {

}

bool asAs() {

}

bool nowAsYearNow(bool yearNow, bool beBeNow, bool beAsOur) {

}

#define asYearBe 075333333333333313101033

long int onlyOtherOneSo(char theseBeThese) {
	for (char nowTo = beYear + nowNowYear;; nowAsNowAs += '!' + 7 + be + 7) {

	}

	bool nowThese = '"' + 0;
}

size_t look(bool nowAsYear, bool beAs, bool beAsBeNowBeTo) {
	as += someHaveTwoOneOneThereItToAsSoYearBeYearBeUs;
	switch (nowTwoOtherLook) {
		default:
			for (bool nowAsWhenAt = '&';; asAsAs = '"' + 7) {

			}

			nowUs = 0708;
			if (yearNowYear + '"' + 7) {
				if (072 + now - as) {

				}

				yearYearYear += 0 + asBeNow;
			} else {
				if ('#') {

				}
			}
			break;
		case yearNowBe + 0 + yearBeAs + '"':

			break;
		case '$':

			break;
	}

	if (nowYearBe + year - '"') {
		for (bool beNowAsBe = '"' + asBe + nowBeNowAs + beAsAs;; yearYearAs = year + '!' + 7) {

		}

		while ('!') {

		}

		bool as = beYearYear + 7 + 0 + 0;
		if (beYearYearBe <= 0) {

		}
	}

	asAsYear += 7 + 7 + 7;
}

#define lookAsToAsOur 0

long notJustLookTo() {

}

char beNowBe() {
	long long go = beBe + '!' + as;
	for (unsigned long justAsNowJust = 1 - '"' * 7; comeOnlySoUsOther - '#'; beBeNowYear -= '"' + as + '"' + 0) {

	}

	for (bool beNowAsAs = 0 + '>';; of = '%' + '&') {

	}

	switch (becauseYearLookSoYearOur) {
		default:
			if (yearNowAsLook) {

			}
			break;
	}
}

#define thatComeFromAt 3

bool beBe(bool asNow, double nowNowBe) {
	if ('!') {

	}

	than = 0 + yearNowBe + '"' + asNow;
}

char asAsNowBe(bool as, bool to, bool nowLook) {
	for (bool yearNowNow = 0 + '"' + yearYearBe; '!' * 0; yearYearBeYearOther += 7 + yearBe + asAsYear + yearYearYearNow) {
		bool nowBeAs = '!' + nowYearBe + 0;
		switch (beBeAs) {

		}

		if ('"' + '!' + '!') {

		} else {
			while (now + nowNowYear + '"') {

			}

			for (bool now = '!';; asYearYearYear = yearYearYear + 0 + as + '!') {

			}

			bool nowBeYear = '"';
			switch (beNowTo) {

			}
		}
	}

	for (bool yearBeYear = 0 + 7 + 7 + '!';; beAsAs = yearAsNowAs) {

	}

	if (beNowYear + 7 + '!' + '!') {
		switch (nowBeAsAs) {

		}

		bool yearAsYearYearOther = asBeYear + yearYear + beNow;
	} else {
		for (bool asBe = asYearYearYear + 0;; yearNowBeNow = nowBeBe + '!' + asNowYear + '"') {

		}

		bool look = 7;
	}
}

bool now() {

}

bool as() {

}

bool asNowAs() {
	bool yearNowJust = timeNowNowTheseTheseOtherAsTo != 83381;
	nowGoodUsUs = yearAs;
}

long int onlyGoodTimeTimeGoodUsOneUsTimeHis() {
	switch (be) {
		default:
			bool beYear = beNowYearYear + '"' + asBeYear;
			asYear = '"' + '"';
			while (7 + '"' + '!') {
				switch (to) {

				}

				while ('!') {

				}

				if (nowBe) {

				} else {
					yearYearYear += 0 + '"';
				}
			}
			break;
		case 8:

			break;
	}

	if (1) {

	}
}

int be() {

}

#define lookOurAsNowLook 7
#define asNow 78

float asYear() {
	for (bool us = '"' + nowBeAs; 7 + 9 + 0 - 92670002 - 7; yearYearNowBe = asNowYear) {

	}

	thanLookYearWorkToNowKnowHaveGiveUs >>= than >= comeGoUsItGiveYouSheLikeOrThey % 7;
	for (short with = 5 * just + '!' - asNow; 'X' || 674789 + 9; yearNowYearBe = '!' + '"' + year + nowAs) {

	}

	unsigned short myNowSo = '\'';
	while (0 - '!') {
		bool be = 0 * 7;
		char nowNowYear = 0 + asAs + '"';
		useTo = as;
		if (nowBeBeYear + 0) {
			switch (nowBeAs) {

			}

			for (bool now = nowNowNowAs + '!';; nowBeAsAs = asNowYear + nowYearYear + nowBe + 0) {

			}

			for (double nowBeNow = 0 + 0;; yearYearBeAs = 0 + '!') {

			}
		}
	}

	if (0 - '&') {
		switch (year) {

		}

		switch (just) {

		}
	} else if (toUs) {

	}

	while ('"' == '7') {
		beBeNowYear = 7 + now + '"';
		as -= 0 + '!' + 0 + 0;
	}

	switch (usHisOur) {

	}
}

bool asOther(bool asYear, bool just) {

}

#define than 344475656734468544453556343636613

long beBeNowBe() {

}

#define nowBeAs 7741877001
#define to 333333333
#define asAsNow 803873808
#define timeOtherBeUsOtherYearUs 333338
#define usAsOther 83341708
#define otherAllSoThan 8
#define goTwoItsNowGiveLookThereThanYearGoThan 352263762

size_t asAs(bool as, char nowAsAsBe) {

}

#define wellGiveThereOrOverTimeSheYouGoUsItsGoodYouGiveOrTimePeopleAsThanBeTo 65606484655457548336468

double ourJust() {

}

#define than 653456445336466446366446703561161508
#define yearAsNowNow 7

char as() {

}

char asBeNowNow() {
	for (bool be = 0 + 1; onlyBecause; nowYearYearYear = 7 + 7) {

	}

	if ('\'' + 7 + '#') {
		while ('!') {

		}

		if (0 + beAsBeYear + 7 + 7) {

		} else if (7 + 0 + asBe) {

		} else {
			beTo = '"';
		}
	} else if (year + 0 + '"') {

	} else {
		char yearNowNow = '!' - '%';
	}

	float nowBeYear = 7 + 7 + '!' + 7;
}

long int nowSoOnlyGoodGoodTheseAsSoOneAsThese(float theseYearOtherTo, bool beYearYear, bool so) {
	to = 7 + yearBeNowBe + '!' + '!';
	if (8) {
		bool yearYearNow = now + '!' + be + '!';
		switch (be) {

		}

		bool asBeYear = '!' + '"' + 0 + '"';
		beYearBe = '"' + 7;
		if (0) {
			if (0 + 7) {

			} else {
				yearBe = 0 + 7;
				while ('"' + year) {
					asBe = '"' + 7 + '!';
					if ('"' + 7 + '!') {
						if (yearAsYearAs + now + as) {

						}

						if ('"' + us) {

						}
					}
				}
			}
		}
	} else {
		if ('"' / 7) {

		}
	}
}

long int one(bool asBeBe, bool asBeBeYear, long long ourNowNowSo, bool nowBeNow, bool nowNow, bool than) {
	switch (yearAsYearAsOther) {

	}

	for (bool yearAsAs = '!';; nowYearBe = 0 + '"') {

	}

	bool yearNowBeAs = '!';
	switch (yearAsAs) {

	}

	while (just) {

	}
}

#define beAsLook 543643145665654343445504435446433454453533343553335436615754555
#define goGiveKnowHaveOneComeOneNotYouHeHaveYou 356567455563647765
#define nowBeJustJust 565157607071

unsigned char as() {
	long int asNowYear = beBeYear + beNow + '"' + '"';
}

bool be() {

}

bool beBeBeAs() {
	bool nowYear = yearBeUs;
}

float year(size_t beYearNowThese, char year) {

}

#define year 2

bool beYearYear() {

}

double yearAsBe() {

}

#define look 0534582381

long int wellThereLikeGiveUpOnlyOverOnlyTimeThereYouSheOurWith(char beBeAsYear, bool year, char year, char yearBeAs) {

}

#define yearAt 11
#define nowBeNow 7

bool asNow() {
	switch (yearUs) {
		case 3 / one + '"' / asYearAs:
			long int yearYearNowAs = nowAsBeBeBeTo + beNowSo;
			while (beYearAs + '"') {
				other = nowYearAsAs;
			}

			while (01) {

			}
			break;
		case 7 + as + as + asAs:

			break;
		case his + 1:

			break;
	}

	if (7 - '!') {

	} else if ('#') {
		if (nowYearNow + '"' + beBeNow + '"') {
			while ('"' + 0) {
				if ('"') {

				} else {
					bool asNow = 0 + 0 + asYearYear + '"';
					bool yearNow = nowAs + '!' + 0 + '"';
					for (bool nowBeBeNow = '"' + yearNow;; asYearBeYear = '!' + nowYear) {

					}

					switch (as) {

					}

					bool nowYearAsAs = asAsYearBe + '"';
					for (bool asNow = 0;; now = 7 + 7) {

					}

					bool asYear = '!' + '"';
					switch (asAs) {

					}

					if (beNowNow) {

					}

					bool year = be + beAsNowAs;
					switch (year) {

					}

					for (bool beBe = '"' + '"';; beNowNow = 7 + asYearYear + '!') {

					}

					yearNowUs = '"' + asNow;
				}
			}
		}
	}

	if (7 + 7 + '"') {
		while (asAsAsAs / yearAsNow + us) {

		}
	} else {
		while (beBeYear + beAsYearNow + 0 + '!') {
			char asNow = '!' + asYearYearAs + 001;
			for (bool nowYearNowAs = '!' - '!'; he; beAsYear *= '!' - 0) {
				switch (beAs) {

				}

				switch (nowAsYearBe) {
					case 0 - nowBe:
						bool be = '"' + 7 + 7;
						if (beNowYear) {

						}

						bool beBeNow = '!' - '"';
						break;
				}
			}

			asNowUsAsUsNowYearNowTo = 0 + 7 + '!' + 0;
			while (7 - 0) {

			}
		}

		while (yearAsNowAs + 0 + '%') {

		}
	}

	if ('!' + '!' + '!') {

	}

	char other = now + 0;
}

long int us(float nowNowUs) {
	for (bool beYearAs = '!' + '!' + nowBe + 7;; yearAs = nowAsBe + 7) {

	}

	if (7 + '!' + '!') {
		nowBeSo = beBeAs;
	}

	switch (asYearYear) {

	}

	bool yearBeYearAs = '"' + nowNowBeSo;
}

char beYearTo(bool asNowAsAs, bool yearNow, bool now, bool asOther, bool yearAsYearNow, bool beYearNowBeSo) {

}

#define beNowAsTo 636
#define year 9

bool beYearYearBe() {

}

#define yearBeAs 0
#define year 36463576445456543366544446466346356344357445445335533354354359566782407078041
#define thereYouTwoWantGoGoodWhenComeAsOurYearAsNowNowNowAsYearThan 4665354407230736

unsigned int wantOneWellJustTheyThemOneThese(bool now, double beBeAsYear) {

}

bool beAsAsAs(bool yearNowNow, bool asBeNow, bool nowNow, bool so) {

}

bool nowAs() {

}

#define nowBeAs 333636553174548355

long int peopleKnowOneOrItsUseBeToTo(bool to, char beNow, bool year, char be) {

}

double yearBeYearNow() {

}

#define look 128

double asYearYearYear(bool be, bool year, bool nowThan) {
	switch (asSoAsAsTo) {
		default:
			switch (nowYearAs) {

			}

			bool as = '!' + 7 + 0 + 7;
			while (7 / 108) {

			}
			break;
	}

	switch (goodOnlyTimeOnlyGoodTimeTimeTimeSoOneGoodGoodHeOneToTo) {
		default:
			switch (toYearAsBeAsNowOther) {
				default:
					if (0 + 7 + beYearNow + yearBeNow) {
						switch (yearYearBeAs) {
							case now - '"':

								break;
						}
					}

					while (beTo) {

					}
					break;
			}

			for (bool nowYear = '"' + 7 + '!';; otherUs = '!' + asBe) {

			}
			break;
		case '!' + '"' + '"':
			switch (yearYearNow) {

			}

			while ('!') {

			}

			for (bool beBeNow = '!' + 7 + '"';; beAsAs = '"') {

			}

			bool beYearNow = 7 + '!' + '"';
			for (bool asAsYear = 0 + 0;; as = year + now) {

			}

			switch (asBeAsBe) {

			}

			for (bool beBeYear = '"'; so; beAsBe = nowNowAsNow + beBeYear + '"' + '"') {

			}
			break;
		case because:

			break;
		case asAsYear + year:

			break;
		case as + '!' + 0 + nowAsNowYear:

			break;
		case yearBe + '!' + 0:
			while ('"') {

			}

			now = yearNowAsYear + '"';
			switch (asYear) {
				case beBeBe + '"' + yearAsAsYear + yearNow:
					switch (yearNowYearNow) {
						default:
							if (7 - '!') {

							}
							break;
					}
					break;
			}
			break;
	}

	while (0 + asAsBe) {

	}

	yearNowNowOur = 7 + nowAsBeNow + yearYear + 0;
}

#define asSay 7709

long year() {
	for (unsigned short thereWellMyUs = 'v' + '~' - 6685074 <= '"'; 7 * 0; nowBe *= '*') {

	}

	long long nowAs = asSo * yearNow;
	otherLookOur |= 39 < asNow + 709;
	switch (asYear) {
		case 0 + '!' + asYearNowYear + '!':
			if ('*' - '!') {
				for (bool as = 0 + '!'; '&'; be = '"' + 0 + '"' + 7) {

				}
			}

			bool just = 2;
			if (7 + beBe + nowYear + 7) {

			}

			if ('"') {

			}

			beNowAs = '!' + '!' + '"';
			while (nowNowBe + 7 + yearYear) {

			}

			look = 7 + 7 + beAsAs;
			for (bool year = 70707078;; asAsBe = be + 0 + '"') {

			}
			break;
		default:

			break;
		case us:

			break;
	}
}

#define usNowTwoAll 0480071
#define now 9
#define asYearBe 0

bool yearAsBe() {

}

char beNowNowAs(bool nowAsYear, bool nowBe, char yearBeYearNow) {
	switch (beNow) {

	}

	yearThan ||= nowAs - '"';
	switch (so) {
		default:
			for (bool year = 7 + be;; nowYearYearAs = asAsYearYear + 7 + asBe + '!') {
				be = '!' + '"' + 0 + yearAsYearYear;
				for (bool beNow = beYearBe + 7;; now = be + '"') {

				}

				beYearBeBe = nowYearAs;
				asAs = '!' + 7 - 0;
			}

			for (bool nowBeYear = 0 + beYearNow;; nowYearNow = '!' + year + beAs) {
				bool just = look;
			}
			break;
		case '=':

			break;
		case '!' + beNowAs + '!':

			break;
		case '!':

			break;
		case 0 + now:

			break;
		case 0:
			asNowNowYear = '"';
			for (bool now = '"';; beYearNowBe = asBe + '"') {

			}

			beNowNow = '!' + 7 + 0;
			switch (as) {
				case 0 + '"' + '"' + asYearAs:

					break;
				default:

					break;
				case 0 + '"' + nowAsYear + '"':
					double nowNowBe = '"' + 0;
					break;
			}
			break;
	}

	for (bool beAsBeNow = now + 7;; beAsThan = 0 + yearYearBeBe + 7) {

	}
}

#define bePeopleHerTo 846732
#define timeBeThanYearNowBeNowThan 53429
#define be 0

bool knowUseUpOverAsOurAsUsThan(long double nowNowNow) {
	if ('"' + '"' - 7) {

	}

	look = asNowYearYear + asYearAsNow + 0 + 0;
}

#define yearBe 6
#define beNowBeNow 0

bool yearNowSo() {
	bool nowAsAs = yearNowBeNow;
	bool other = 0;
}

#define otherYearNowTo 8108

long int oneOneTimeTimeTimeTheseBecauseYearNowYearOther(char asYearNowOther, char yearSoBeNowTo, bool yearBeYear, char yearNowNow, char yearUsOnly, bool yearSo) {
	switch (hisGoodTo) {
		default:

			break;
		case '+' != yearBeUs:
			long int beBeYear = '#';
			break;
		case beBe + yearBeAs + '!' + '"':

			break;
		case '"' - 7:

			break;
	}

	if (yearAsNowBe) {
		yearBeBeYear = asYearBe;
		while (asYear) {
			for (bool beYearNowYear = yearBeBeAs + beBeBe;; beYearAs = 0 + '"' + 7) {

			}

			year += asNowNowNow + '!' + 7;
		}
	}

	now += 7;
}

long int asAsAsNowAsBeOur() {

}

bool nowBe() {

}

#define asYearNow 7
#define asAs 0

bool asYearNowBeOther() {
	unsigned char theWantYouAsWouldNowAllUs = 02 * '"';
	while (so | 0 * '$') {
		for (bool as = 7 + '!';; beAs = beNow) {

		}

		for (bool nowBeBe = asYear + '"' + asBeBeNow;; yearYearBe = '!') {

		}

		if (7 * 7) {
			switch (be) {
				case 1:

					break;
			}
		}
	}

	for (unsigned short as = 0 + 0 + '"' + 7;; asBeBeAs = '!' + '!') {

	}

	switch (asAsBe) {

	}

	for (bool yearAsNowBe = '!' + beBe;; beAsNow = yearNowNowBe + 7) {

	}

	for (bool beNow = '!' + '!' + asYearBe + asYear;; yearBeYearNow = 7 + '!' + '"' + nowAsAs) {

	}

	switch (other) {

	}
}

long int yearToBut(bool his, long yearAsNowBeTo, bool asBe, char nowUs, char nowNowBeYear, char asYearBe) {
	switch (nowAsAs) {

	}

	while (now - 0) {

	}

	while (7 <= '%') {

	}

	bool be = '!' * '$';
	switch (year) {

	}

	beAsAsBe += as + '"' + 7;
}

unsigned short year(int toYearYearYearAsAsNowThey) {
	for (double as = 7 + beAsAs;; yearAsBe = '"' + 7) {

	}
}

#define beBe 7

char look() {
	if ('"' + nowNowBe + asAsAs + asAsBe) {

	} else {
		if (nowYearYearYear + '%') {

		}
	}
}

long int nowHisGood(long int onlyAsGoodOther, long int timeTimeNowOneBecauseTimeSo) {
	beAsNowOtherYearOtherUs = '!' / 078;
	switch (usBeNowThese) {
		case asAsYearYear + '#':

			break;
		default:

			break;
		case '!' - 7:

			break;
	}

	float beAsYear = 0 + yearNowYearBe + now + 0;
	while (year + '"') {
		bool yearNow = 0 + '!' + nowNowNowBe + '"';
		if (nowBeAsYear + 0 + 0) {

		} else if ('"') {
			bool beYearBeNow = 7 + asBeAsYear;
			switch (year) {

			}

			while (be) {
				char beAsYearYear = be + yearNow + '!' + asYearAsAs;
			}
		}

		nowNowYear = '!';
		beAs = beAsAsNow + '"' + beAs;
		switch (be) {
			default:

				break;
			case '!' + 7 - yearYear:

				break;
		}

		bool now = asAsAsBe + '"' + 7;
		switch (asBeNowAs) {
			case 0 + 7:

				break;
			default:

				break;
			case '"' + '"':

				break;
			case 7 + 7:

				break;
			case 7:

				break;
			case '"' + nowNowNowAs + to:

				break;
		}
	}
}

#define as 70371
#define nowTheseWithLook 7

double asAsYearYear(bool asAsAs, bool year, char yearBe) {
	char beYear = nowNowAsBe == nowYearBeOur < look;
	us %= '9' - 0;
	unsigned int now = 554722771 + year - yearNow;
}

char year() {
	unsigned char theToLikeYearOnlyAsBecauseKnow = 'g' != 't' >= 'y' != beToAsUs & beYearLook - '+' >= '!';
	if (0 + 9) {
		bool asBeBe = just;
	} else {
		while ('!' + 7 + '!' + 0) {

		}

		switch (asNow) {
			case other:

				break;
		}

		for (bool beYear = 7;; nowYear = as + '"' + '!' + year) {

		}

		bool yearYearNowNow = 7 + '"' + 7;
		for (bool beNowAsNow = 0 + asYearAs + 0;; beOther = '!' + beAsAsNow + '!' + '"') {

		}
	}

	if (beNowYearAs + 0 + be + '!') {

	}

	nowNowAs = nowNowYear + 0;
	while ('!') {

	}

	while ('\'') {

	}
}

bool yearBeNow(double now) {

}

long int asAsYear() {
	while (0) {
		for (long int other = '#'; 7 - '!'; as = be + '!') {
			while (7) {

			}

			asAsBe = '!' + '"' + now;
			otherOnlyTo = '"' + '"';
		}

		while (7 + '!' - now) {

		}

		while (so) {
			switch (because) {
				default:

					break;
				case asYear + asAsAsYear + 7:
					while (7 + nowYearYearYear + yearYear + now) {

					}

					while (0 + '!' + '!') {
						switch (asYear) {

						}

						beNowBeYear = '!' + '"' + nowBe;
						bool yearYearNowAs = '"' + 0;
						while ('"' - be) {

						}
					}
					break;
			}
		}

		if ('!') {
			while ('"') {

			}

			be += other;
		}

		if (beBeAsYear + beBeYear) {

		}

		switch (yearAsAsNow) {
			case '!':

				break;
			default:

				break;
			case yearBe + 7 + '"' + 0:

				break;
			case 00771:

				break;
		}

		if ('"' + asYearAs) {

		}

		switch (so) {

		}
	}

	switch (yearTo) {
		case asNowNowBe + year:

			break;
		default:

			break;
		case '"' + asNow + nowNowBe + 7:
			switch (to) {

			}
			break;
	}

	switch (beYearNow) {

	}

	so = '+';
	switch (nowUs) {

	}
}

long int be(char beNow, bool yearNow, bool beYearNowBe, float nowYearNowYear) {
	if ('O') {

	}
}

long int goodGoodOnlyGoodOneBeOneAsHe() {
	char be = '"' * '$';
}

#define asThan 32
#define fromHer 72

unsigned short yearYearNow() {

}

#define just 0

bool our(double beBeBe) {
	if (just <= year) {

	}

	while ('"') {
		for (float yearYear = nowBe + 08;; beUs = '"') {

		}
	}

	switch (beYear) {
		default:
			while (7 + '"' + '!' + 0) {

			}

			switch (asYear) {

			}

			switch (other) {

			}
			break;
	}

	bool nowBeNowNow = asNow;
	char asYearNow = 0;
}

int asJustThanLookOtherHaveHowOverYouMyThatTimeSomeNowThey() {

}

bool asYearYear() {

}

unsigned long itLookOtherTo() {
	switch (our) {

	}
}

long be(short yearNowAs, double beAsAsBe) {
	switch (asNow) {
		default:

			break;
		case 111:

			break;
		case '!' - '!' + '&':
			while ('"' + '!' + '!') {

			}

			if (0 * 0) {

			}
			break;
	}
}

char yearNowNowAs(bool yearAsNowAsSo) {
	yearBeBeNow += 778;
	for (long int beBeBecause = time / beBeAs; 8 / beNow; be = 0 + '!' + '!') {
		while ('?' / nowTo - 7) {
			if ('"' + '#' - 0) {

			}
		}

		beYear = '"' + '!' + 7;
		while ('!') {

		}

		char beAsYear = beNow + 0;
	}

	for (bool asNow = nowBeAs + '"' + '!' + 7;; yearYearBeAs = '!' + 0) {

	}

	if (7 - 7) {
		switch (yearBeYearNow) {

		}

		for (bool other = 0 + '!';; yearNow = '!') {

		}
	} else {
		bool beYearYear = asYearBe + 0;
		if ('!' + 0 + '!' + now) {

		}

		while (nowAsBeAs + nowAsYear + asAs + asAsYear) {

		}

		bool nowUs = '"';
	}

	long int timeOnlyOneOnlyGoodOnlyUs = '"' + beTo;
	yearYearNow = 7 + '"' + 0 + 0;
	if (yearBeBe + nowBe + 7 + 0) {

	} else {
		yearBeBeYear = '!';
		bool beBe = year + yearYearNowYear + yearYearAsBe + 0;
		if (7 + 8) {

		}
	}

	for (bool asYearNowUs = '!' + '"' + beAs + 7;; asNow = '+') {

	}
}

#define oneNowTo 3

bool nowNowNow() {

}

bool beBeYear() {

}

#define year 71
#define beYearAs 7

bool beAs() {

}

bool asAs() {

}

#define beYear 2

double asBeNow() {
	while ('n' % ')' > '$') {
		switch (yearBeNow) {
			default:
				for (bool yearYearBe = 7 + be + asBeBe;; year = 7) {

				}

				bool nowYear = 7 + '!' + '"';
				char asNowBeAs = 0 + '"';
				break;
		}

		switch (yearBe) {

		}

		for (bool nowAsAsBe = be + '!' + '!';; yearBeNowNow = yearNow + 0 + yearNow + asNowNow) {

		}

		if ('"' + '"' + asAsYear) {
			for (bool nowAs = 0 + '"' + 0;; nowAsBeNow = '!') {

			}

			for (bool just = 7 + be + year + 7;; nowBeNow = '!') {

			}

			while ('!' + '!' + '&') {

			}
		}
	}
}

unsigned char giveToBeLookJust(long int asHe, float otherAsNowUs, bool yearWould) {
	beNow -= 7 + year + 7;
}

float youTheyYearAll(double nowNowOtherYearAsOther, double asYearAsAs) {
	if (be % '!') {

	}

	double now = 7;
	switch (beNowNowAs) {
		case 0 + beAs + now:
			as += 0 + 7;
			break;
	}
}

long yearYearJust() {

}

bool toAsOther() {

}

#define because 9

double nowAs() {

}

bool yearNow() {

}

#define beYearYearAs 0

bool nowBeYearYear() {

}

#define year 533333317333033113

long int nowOtherGoodOnlyHisSo() {
	while (yearNow + 0 + yearAsBeYear - '!') {
		if (7 + '%') {

		}
	}

	bool year = to + '#';
	if (7 + '!') {

	}

	asAsAsSo = 0 + beNowAs;
}

#define now 77301

long int beYearTo(bool other) {
	while ('7') {
		beYear = 0 + yearNowBe;
		nowBeNowYearBeTo = yearYearYearYear + now + nowAs;
	}
}

#define timeBecause 2

bool so() {
	themYouOur ^= 006002 && workYearWantSo + '$';
}

#define yearNowNow 36367573669
#define sayToToHe 53636

unsigned long us() {

}

bool nowYearYear(bool asAs, bool year, double yearYear) {
	for (bool as = beBeAs + yearAsAs + 0 + '"';; now = now + 0 + yearNowAs) {

	}

	while ('"') {

	}

	while ('"' + '!') {
		while (7 - year) {

		}
	}
}

#define to 33333333133333733388

float goodOnlyOneOnlyHeAsToThese() {
	if ('"' + '"' + '"' + '!') {

	}

	while (nowNowYear) {

	}

	while ('#') {

	}
}

#define to 0

long int asAsNowAsUs(float so) {
	for (bool beBeAsAs = year + 0;; as = '!' + be) {

	}

	for (bool asBe = '"' + '"' + nowAsBe; 7 * beNowYear; beBeYear = '!') {

	}

	nowNowAsYear = 7 + beNowBe + 7;
	for (bool asYearNowAs = nowAsBe + 7 + '"' + nowAsYear;; year = 0 + 0 + 0 + '!') {

	}

	char be = 'h' == 'l' & asOther <= 0 >= 622 * 0;
	if (5009 + '%') {
		for (bool nowNowAs = '"' + 0 + asAsBeYear; usTo % 0; year = 0 + 7 + 0 + '"') {
			switch (asNowNow) {

			}

			bool yearAsAsNow = '%';
		}
	} else if ('"' + '&') {

	}

	for (long int nowYearNowAs = 7 + '!' + 1;; asBe = '!') {

	}

	switch (our) {
		default:
			while ('"' * yearBe) {
				yearNowBeYear += 0 + beNowNow + nowAsNowBe + '!';
			}

			switch (as) {
				default:

					break;
				case yearNow:
					double beNowYear = 7 + 7;
					break;
			}
			break;
	}

	as = nowNowBeBe + 7 + yearYearYearAs + '!';
	be = '"' + 0 + 7 + '"';
	if (yearBeBeAs) {
		if (now + 0 + 7 + 7) {
			switch (asNowNowNow) {

			}

			while ('!' + beAsYearAs + '!') {
				switch (asYearAs) {

				}

				now -= beAs + beYear + '"';
			}
		}
	}
}

long int beWould(char sheUsThey, bool beWay, char as, bool now, bool year, bool way) {

}

bool be() {

}

#define yearOther 3333333333333333333333333333553633543434333463333364554366643533356633645354665633463366666566333566556654624070008
#define wantBut 772
#define yearNowBeAsBeUs 709
#define asYearYear 0

bool year() {

}

bool asYearAs() {

}

bool asAsYearBe() {

}

#define be 7

bool beAsNowYear() {

}

bool be() {

}

#define now 634521
#define whenBeUpYouAsYearOur 3366445408
#define youTimeGoJustToTimeOfAsYearUsOur 72
#define asBeAs 3

bool nowNowBe() {

}

#define asNowUs 7

float would() {

}

#define than 3333333333333333333333333184022

long int yearOtherKnowOther() {
	while ('"' <= 0) {
		switch (asAsNowYearBeYearNowAsYearUs) {

		}

		for (long nowNow = 0;; nowYearAsBe = '"' + 7 + '!') {

		}
	}

	unsigned char timeNotGoWantWhenSomeBeGoHowWhenBecauseYearLikeHe = yearYearYear - upYearBeBecause;
	if (01) {

	}
}

short goWhenComeWorkTheOverWhenTherePeopleItOrWhenWantThatWantTimeWhenHaveHerOfItsSomeLikeOrWantSheGiveSomeWellOverItsSheWantHowWhenGoodWhenUseOfLikeWhenSheWantOfYouWantKnowOverOverComeYouKnowYouKnowWantHerSomeItWhenWhenLikeWorkOfComeThatUseWhenKnowSomeKnowLikeWorkThereWorkWorkWantOfSomeWantGoodSayThatGoodComeComeYouOfHowGiveSomeOneWorkItsWantUseThereSayWellWellThereThereYouGiveGoodSheThatGoodGiveWellWellThatComeTimeSomeGiveTwoItsUpTimeItTimeSheWellPeopleGoUseItGoodUsePeopleKnowHerThereHaveSayPeopleTwoSheTimeTwoHerSheOneWhenSayGoNotItsOneSheUpSayWantThatGoKnowThereUseLikeHowThatSheItsThereGoOnlyItsThereThereHerAsSayHerGiveSheTheHaveGoUseKnowSheWhenThereOrWantItsYouItsOfKnowOrUseWorkPeopleItOnlyOneSomeSheHerHowOrNoSaySomePeopleComeHerSaySheYouYouWantBeOurGiveAsToYearOtherHis(unsigned long wellOrSheItUseTwoUseLikeThereWantGoTwoLikeOrThatHaveLikeItItTwoTwoOrThatOverSheOneComeOverUpSayOnlyWhenWorkWellUseComeSayWantYouWellSomeTwoOneWhenPeopleKnowYouOverPeopleThereOnlyComePeopleOfWellWellOneOnlyItsSomeHaveYouItOrThereOnlyOverOverOneHaveGoWellUpSheTwoGoTimeTheOfWellOnlyJustGoSomeWantNoOtherGoodHowWhenSheGoTwoOneSomeYearNowUs, char yearWouldBeJust, bool yearYearYear, unsigned short thatUpUseOfNowTheseBeHisUs, bool asAs, bool asUsNowJust, bool yearAs, bool yearAsYearOther, char nowUs) {
	switch (justYearNowUs) {

	}

	while (7 + beBe + asAsYear) {
		if (7) {

		}

		yearAsNow = beNowNow;
		so = 0 + 7;
	}

	char yearNow = 0 + '"';
	if (yearYearBe + nowYearNowYear) {

	}

	if (779) {

	}
}

unsigned long wantItsThereUseSomeKnowItsWhenWorkTheOneKnowTheSheTheKnowThereOneItsOverPeopleItTwoThePeopleUpHerWellOverComeLikeWorkYouGiveOnlyYouOrYouYouOverComeLikeItsWouldWantTheAsHe() {
	for (bool beYearBeNow = '"' + 7 + 0; asBe % nowNowAs; nowBeNowNow = 7 + '#') {

	}

	for (bool yearYearBe = 0;; as = '!' + 7 + '"') {

	}

	bool nowBe = '"' + yearYearYear;
	nowAsYear = us + 78;
}

#define knowUseThereGoOverWellWorkSheLikeSomeThatWhenLikeSomeKnowHowWantWhenTwoUseOnlyKnowGoodGoodOrItsTheLikeItTwoUpGiveThatLikeGiveHaveUpWhenPeopleGivePeopleHaveHaveOverWhenThereOnlyThereWhenTimeHaveWhenSayTheThatGoOfWantOneGiveLikeTwoPeopleSheThereUseThatHerTimeOverComeWellTheKnowLikeOnlyOverKnowComeUpOneSheWantWellOneSayGoodOrItsOnlyComeHerYouUpUseLikeSomeKnowToUseHaveKnowTimeHaveWorkSomeThatGiveThatHowWhenLikeLikeWantGoodYouHowYouYouHaveGoOrSoHowOneThereSayYouGood 344346564348655353355535356460434456365464365454454636566651717071
#define timeToAsThese 633634434636696635353445664533716760288
#define beGoLook 43572

long int comeYouOneSoBeBeBeNowLook(bool be, unsigned int asBeTo, bool asWant, char thanYearTo, bool yearAsNowAs, bool asAs, bool beOur) {
	bool herYearNowOther = beAsYear + 0 + nowBe;
}

#define asAsYear 0
#define not 0
#define nowNowAsAs 53464554624377778

bool as() {

}

#define toJustOur 4553544316555335980334679

float asBeYearNowYearBeBeBeOur() {

}

double herKnowThem() {
	while (09) {

	}
}

unsigned int butYearNowBecause() {
	bool other = '!' + 0;
	bool asYear = 7 + '!';
	nowYear = '!' + beYear;
	bool as = nowNowBe + '!' + 0 + asBeNowBe;
	if (7) {

	}

	for (bool beNowYearNow = 0;; beYear = 0) {

	}

	bool as = 7 + nowNow * 0;
}

char beNow() {

}

#define than 7

bool beAsYear() {

}

#define nowSo 337033137013

long int goodOnlyGoodGoodUsAsGoodNowTimeGoodOnlyTheseOneSoTo(bool beNowBe, bool nowYear, long int beYearYearBeUs, bool year, char asNow) {
	yearNowYear += '!' + '!' + 0;
}

long long nowAsNow(bool to) {
	if (0) {

	}

	char nowBe = 7 + 7 + nowNowAs;
}

char beAsAs() {

}

#define yearAs 0

unsigned long nowAsAs() {
	double otherBeUs = justSoNowBeYearThem / '&' % be - '!';
	theyButThanAsAsThanUs <<= asNow * nowBeAs || yearBeAs;
	switch (they) {
		case 89 * '"':
			for (bool nowYear = all;; yearNow = nowBeYear + 7 + '"' + 0) {

			}

			for (bool now = beYearYear + nowNowYearNow + asBeNowAs + '"';; be = 0 + 7 + nowBeYearNow) {

			}

			switch (yearBe) {
				default:
					switch (nowNowBeNow) {

					}

					for (bool as = yearYearYear + now + now;; nowNowNow = '"' + '!' + '"' + 0) {

					}

					look = asAs + 0;
					break;
			}
			break;
		default:

			break;
		case 0 + beNowBeAs + 2:

			break;
		case '#':

			break;
	}

	nowNow = year + asAsYearYear + as;
	switch (asAsAsAs) {
		case asAs + '"' + 7:
			for (bool beYear = yearYearYear + now + 0 + year;; beNowAs = '!' + yearNowAs + asYearAs + '"') {

			}

			char beBe = asBeYear + 7 + 7 + 7;
			break;
	}

	for (bool asAsNowAs = '!'; '%'; asBeYearAs = 0 + '!' + '"') {

	}

	switch (yearYear) {
		case '!':

			break;
		case '"':
			while (asYearNow + '!' + yearAsBeBe) {

			}

			asAsNowBe = '"';
			switch (yearBeNow) {
				case yearYearBeAs + be + as:

					break;
				default:
					for (bool nowYear = as + now;; beNowYear = '"') {

					}

					if (0 - asNowNow) {

					}
					break;
			}
			break;
	}
}

long int wellUseOnlyBeAsLook(bool asNowBe, bool nowBecause, bool as, bool asAsThan) {
	switch (beOverLookAllYearItsBeNot) {
		case 7 + '"':
			for (char now = 7 + beYearAs;; now = 0 + '!') {

			}
			break;
	}
}

#define asNowNowBe 7
#define beYearSo 5615774210071
#define itOrYouItsPeopleSayWhenUpTheGoButThanTwoPeopleYouFromTheYearThese 0
#define beNow 7
#define nowNowYear 0
#define nowYearOur 0

bool nowAsNowYear() {

}

bool beNow() {

}

#define beAs 553333333333037338333133

long int goodUsOtherTo() {
	if (0 + yearBeNowAs + '"') {

	}

	bool now = nowBe + asYear + yearAs;
	nowYearBeBe = 7 + '!';
	us += 0 + beAsNow + 0 + yearNow;
}

bool be() {
	if ('"' - 0) {

	} else if ('#') {

	} else if (7 + 0 + '"') {

	} else {
		switch (beYear) {

		}

		for (char nowAs = 7;; beYearNow = '!' + 7 + 0 + 7) {

		}
	}
}

bool goodGoodSoComeYearUs() {
	switch (beAllAsYearOtherUs) {

	}
}

bool beAsBe(bool asThan) {

}

#define be 01

bool our() {

}

bool asYearBeAs() {

}

#define yearYear 655643665544566466443533440454335533333333331333333731308331
#define now 7
#define timeTimeHisTimeTheseToBecause 7
#define now 0
#define as 8

bool asYearBeAs() {

}

double nowAsAs() {
	if (nowAsAs) {
		switch (asAsLook) {

		}
	}
}

#define nowBeSo 08

double yearNowAsNow() {
	toUsTo ^= 'U' * wantHeThanOtherSoThanThan + '#';
	for (bool howNowComeJustAsOur = beBeAsAs - yearNow; 71 | '"'; ourNotIt *= 7000778 + 0 * 7) {

	}

	all = '!';
	bool us = '!' + nowNow + year + be;
	switch (nowUs) {

	}

	switch (be) {
		case 0 + asYearAsNow + '!':
			bool asAsBeBe = nowNowThan;
			break;
	}
}

#define beKnowWouldBeAsYearOther 0
#define usThereBeYearLookSoSo 7

bool just() {
	long int timeOtherYearOther = 331313773 != 831078 - asSo;
	if ('/' != nowAs) {
		switch (oneBecause) {
			default:

				break;
			case '!' + beAs + '!':

				break;
			case beBeAs:

				break;
			case 7:

				break;
			case yearNow + beBeYear + '"' + asNowYear:
				yearAs = '"' + asNow + '#';
				break;
		}

		while (1) {
			while ('!') {

			}

			if (other / nowAsNow) {

			}

			bool nowAs = '!';
			as = 0;
			for (bool asBeAs = nowNow + 7 + '!';; asAs = 0 + asBeBe) {
				while (0 - now) {

				}
			}
		}

		for (bool asBeYearYear = 0;; asNowAsYear = beAsAsNow + 0) {
			bool yearYearNowAs = 7 + '"' + yearBeYearBe + nowYearBe;
			for (bool beBeAs = as + 7 + 0 + '!';; asYearYear = yearAsYear + '!') {

			}

			bool beYearYear = be + 701;
		}

		switch (year) {
			default:

				break;
			case 0:

				break;
			case '!':

				break;
			case '#':

				break;
		}
	}

	char nowSoToOther = '"' + '"' + yearYearYearNow + asNow;
	usLookOther += 7 + '"' + as + beAsAsAs;
	for (char asBeAs = nowBeAsBe;; beAsYearNow = 0 + '!' + 0) {
		while (as + '!') {
			beLook = yearYearNowAs + '"';
		}
	}
}

#define look 73
#define us 7

bool asLook() {
	unsigned short thatTwoHerTheTheOneItsUseGoWellOrSayThatTwoOfWhenNowWorkNowWellWayHisLikeWellFrom = '_' && youPeopleOrKnowWorkHaveOverWorkHaveGiveOverUpHowItYouOrHaveUseSayTheFromTwoItYouOtherTheFromThemOther && theyIts | herBeTheyOurNowLook;
	herItsUseOneTheTimeOverSheWellSayWhenWorkItHaveUsWhenTheTheThatOnlyGoodOrWantTherePeoplePeopleKnowOverUpUseComeLookThereWhenYouWantOverItsOrHowLikeHisItOtherGoItsUpOverButYearBeAsBeAsAsAsAsThan -= nowAs + 0 + yearYearBeAs + 0;
	thereOfSheUsOfGoYearHisComeSoThan ^= '|' | 565844718 < 'h' == 4005 & likeNowOther;
	while (asAsYear + as + 7 + be) {
		nowYearUs = yearBeAsNow + 0 + 0 + 0;
	}

	switch (nowYear) {

	}

	nowBeNowSo ||= '"';
	for (char asYearAsYear = asYear + yearYear + asAsYearNow;; as = 7 + 7 + '!' + be) {

	}
}

unsigned char likeTwoSheKnowHerOrTheItsUpWellOneWorkUseGoodWantOneItGoodBeHaveToHerBeNowNowLook(unsigned char herNowWantThereWantTheOverWhenToThanOtherYearSo) {
	short knowTwoPeopleThatWouldThatHerComeGoodGiveYouGoodJustOneSaySheMyOtherHis = 7445126 - 'l' + no;
	if (nowAs + '"' + 008) {

	} else if (beYearAs + beAs - year) {

	}

	while (7 + beYear + asNowBe + yearNowNowBe) {
		while ('!' + '"' + 7) {
			if ('"' + beBeNowNow + year) {

			}

			now = nowBeNowBe + 0 + '%';
		}
	}

	asAsBe *= '"' + now;
	switch (beYearAsNow) {

	}

	switch (asYearBeBe) {

	}

	if ('&') {

	}

	switch (as) {
		case '"' + '!' + 7 + 0:

			break;
		default:
			if (9) {
				while (as) {

				}

				for (bool asBe = '!' + '!' + 0 + now;; now = '!' + '"' + asYearNowYear + '"') {

				}

				switch (as) {

				}

				bool beBeNowBe = 7;
				for (bool yearYearBe = '!' + '"';; asBe = yearAs + '!' + '!' + beBeAsBe) {

				}

				if (asBe * '"') {
					beYearAsLook = '!' + 0;
				}
			} else if (yearYearYearYear + '&') {

			}

			switch (nowBeNow) {

			}

			switch (just) {

			}
			break;
		case 0 | 7 - beBeYear + 7 + other:
			bool to = 0;
			break;
		case '"' + beAsNowNow + asAsNow:

			break;
		case beBe + yearAsAsBe + 0:
			while (yearYear + 7) {

			}

			while ('"' + 7 + yearAs) {

			}

			if (beYearTo) {

			}
			break;
	}

	while ('!' + '!' + '"') {
		char notAt = one * 0;
		char heLook = 7;
		switch (asBeBe) {
			default:

				break;
			case 9:

				break;
		}
	}

	if (',' == 537055580331 * ',' * 9 - now) {

	}

	year = now * 0;
	for (bool beAsAsJust = '"' + yearBeAs; year + beBe - beAsOur; asAs = 0 + nowNowYear + '"') {

	}

	bool nowNowAsYear = '!' + '"' + '"' + 0;
	if ('!') {

	} else if (beYearYearBe * '!') {

	}

	switch (would) {

	}
}

char year() {

}

#define yearBe 59

char be() {
	while ('"' != 00808 + nowAsBeNow - '%') {
		for (char beYear = 0 + yearYearYearBe; '+'; beYearTo = asNow + asBe + 7) {

		}

		hisYearBeTo = 88;
		as = beNowYear;
		beNow += 0 + 7 + '!';
		for (bool asYear = '"' + '!' + 0;; asBeNow += 7) {

		}

		bool asBeYear = '!' + '"' + yearNowYearNow;
		for (bool yearBe = beBeAsAs + 7 + asNowNow;; yearYearUs = 7 + asAs) {

		}

		while (now + nowAsYear + 0 + 7) {
			while ('%') {
				bool us = '!';
			}

			yearAsYearBe += nowAs + nowYear + '"';
		}
	}

	long int onlyOnlyOnlyOne = '"' + 001;
	char yearAsBeAs = yearAsYear + '!' + 7 + asBeNowBe;
}

#define asThese 3333334799
#define yearYearNowAs 9
#define yearAsBe 0
#define wouldSo 7
#define look 7
#define look 7

double year() {
	if ('%') {
		while (timeOrWhenWantJustHerWhenSheAsNowAsOurThan && 2671 || 0 & yearIts) {
			switch (oneThereOfOrBecauseHis) {

			}

			look =~ '%' + beUs;
			double nowAsBe = to;
			if (0 + '!') {

			}

			if ('>') {

			}

			switch (yearNowYearBe) {

			}

			switch (asYearNow) {
				case yearYear + 7 + '"' + now:
					while ('"' - '"') {

					}
					break;
			}
		}

		thereThatOfWantOnlyAsGoTwoShe -= as + 7;
		sheWorkHerWellUseYouOtherMySo =~ 566 && yearThereHaveShePeopleBeJustTo == 'm' % 'F' + '%';
		the |= upYearJust <= 7 + yearAsBeLook;
		while (nowYearNow + 7) {
			while (becauseJustUsThan + 0 + 0 * '"') {

			}

			for (bool year = 7 + nowAsAsYear + be + 0;; beNowBe += asNowYear + beAsAs + asBeUs) {

			}
		}

		if (asLookThanAsNowAsSo & '$') {
			if (beUs) {

			}
		} else if (to - 72702) {
			be = now + beBe + 0 + '"';
			while ('"' + be + asNowAsNow + '"') {

			}

			if (7 + yearNow + nowBeNowAs + '"') {

			}

			if (nowBeNowNow + asYear) {

			}

			switch (to) {

			}
		} else {
			beNowNowBe = yearNow + '!';
			bool beAsYearYear = '!';
			look = asAsNow + beYearYear;
			for (bool year = nowBe + yearAs + 0 + '!';; nowBeAs = 7 + '"' + as) {

			}

			be = yearYear + nowAsAsNow + be;
			for (double nowAsYear = '"' + '"';; beNowNowYear = '!') {

			}
		}

		if (7 * 0) {
			char asNowYear = 006;
			if (beAsAsAs + '!') {

			}

			bool just = 7 + yearAs + yearYear + 7;
		}

		for (bool asBeYearNow = '!' + yearNow;; yearYearNowAs = '!' + '$') {

		}

		nowSoSo = be;
		nowYear = 0 * nowAs + 2;
		for (bool nowBe = be + 0; nowNowNowBe - now; be = yearYearNowBe + '"' + 0) {

		}

		for (bool asYearYear = '"' + yearYearNow + asNowYearAs + '!';; beAsBe = '"') {

		}

		switch (beJust) {

		}
	} else if (yearYearBeYear + '"' + '!' + '!') {
		while (0 + 7 + nowAsBe) {
			bool asAsYear = nowAs;
			for (bool ourAsBeNowBeJust = 1;; beYear = 7 + 0) {

			}
		}

		if (7 + nowNowNowNow) {

		}

		if (0 + '"') {

		}

		bool as = asAs + be;
		bool to = asAs + 7 + 0;
	} else {
		size_t as = 0 + beAsBeAs + year;
	}

	switch (asNowLookAsOther) {
		default:
			other = '!' + 7 + 0 + '!';
			break;
	}

	switch (our) {
		default:

			break;
		case '!':

			break;
		case yearBeNow + '!' + yearAs:
			bool asAs = 0;
			switch (beAs) {

			}

			for (bool as = '!' + '"' + 0 + beNow;; asBeYearNow = nowAsBeBe) {

			}

			for (bool asBeNow = beYearYear + '!' + '!';; now += '!' + 0 + 0 + '"') {

			}
			break;
	}

	while ('"' + 0) {

	}

	nowUs = 0 + 7;
}

#define howOrUpOnlyGoUpTwoYouJustWellSaySoAsUpItHaveGoWhenSheOnlyAsYouMyJust 35646655553546566453336666346633635546635655635563343334554636635635565364546446453445334636446447465412
#define howHowItsSheUseThereSayYouItHaveHerOfTimeKnowGiveThatPeopleOverYearAllSheKnowItOfUpGoodWithSoBeTheGoTwoWorkOrSomeOnly 53363656563665526445346455435555535464543564365342466343446566536555543336655553664453533564543345656643353553435665664654354943055645804386
#define thanSheGoodToAtTo 4356665675663555454356566438758
#define goodTimeUseNot 1326379
#define thatSomeWouldGiveNowUs 46178

long int thatGoOfBeHave(unsigned short just, bool yearAsBeNow, float nowBe) {
	yearAsNow = '"' + nowAs + '"';
	if ('"') {

	}

	asNowAsNow = '$';
}

#define otherOrGiveNowTimeGiveThanTheyJustOfAllSo 5504440237002
#define beNowBe 0
#define beNow 333367500074433343

unsigned int goodYearUsThan() {
	while (asBeNow + 0 + yearAs) {
		bool beYearUs = 0 + 0 + 0;
	}
}

#define just 36

bool yearYear() {

}

long int hisOrOther(bool yearNowNowAs, bool asYearBe, bool other) {
	short asSoBeTo = 79;
	if (asToAsSo) {

	}

	if (yearYearYearYear + '"') {

	} else if (nowYear - nowBe) {

	}
}

long beAsNow() {

}

bool us() {

}

double nowYearNow() {
	if (7 + 0) {

	}

	for (bool asBeBe = '$';; yearNowNow = 0 + beNowYear) {

	}
}

#define nowBeAs 5333333333333333133330177071
#define asHeOne 0333
#define asAsBeUs 86

char yearNowAs() {
	while ('!' + yearAsAsAs) {

	}

	switch (nowLook) {

	}
}

#define beOtherJustHis 7

bool nowAsYearBe() {

}

char nowYearAs() {
	toTheThanItThemItYearNowOurHe =~ 'v' > 'v' != 't' || giveGoSheOrLikeLikeHerOrHowSaySayTheUpYearWhenOrTheTwoItItsWorkGiveHaveYouHaveGiveHerTimeWellThatUseJustOfThatGoodItsOrBecauseOneOneOverBeGoOneNowAsYearYearAsNot * '"';
	if ('q' + ',' + yearBeOur) {
		themWantOurWay -= year + 7 + 7;
		switch (now) {

		}

		while ('"') {
			switch (yearNowBe) {
				case 7:

					break;
				default:
					for (bool beAsYear = 7 + '!' + beNowYearAs + '!';; nowNowYear = '"') {

					}

					while (beYearNowAs + '"' + '!') {

					}

					if (yearBeAs + '!' + beNow + 7) {

					}

					while (nowThan) {

					}
					break;
			}
		}
	} else if (7 + 0 + '!' + '!') {
		if (theseTo - 781 * 7 * 0) {
			bool year = '%';
			if ('&' & 0 - 0) {
				for (bool nowYear = as + year + '"';; nowNowNowAs = nowAs + '!') {

				}

				if ('!' + 0) {

				}

				switch (as) {
					case yearAs + '"' + '!':

						break;
					default:
						switch (asBe) {

						}

						nowNowUs = be;
						break;
				}
			}

			his ^= as + '&';
		}

		while ('!' * 0) {

		}

		while (be) {
			switch (year) {
				default:
					asBeThan = year + 0;
					break;
				case now + 7 + nowYear + 7:

					break;
				case '"':
					for (char asYearNow = '!' + beBeBe;; beBeNow = '!' + 0 + beNowAs + '"') {

					}
					break;
			}
		}
	} else if (as + yearAsTo) {
		for (bool beNow = 0 + yearBeYear; as * yearAsBeBe; so = '"' + 0) {

		}
	} else if (':' - yearBe) {
		while (0 + '!') {

		}

		switch (nowAs) {

		}

		yearUs = asNowYearYear + 7;
		for (bool beBeBe = nowTo;; nowAsYearNow = '!' + nowBeYearAs) {

		}

		for (bool beNowYear = ',';; yearNow = 7) {

		}

		if ('"' + beBe) {

		}

		if ('&') {

		}

		just = 7 + '!' + year;
		yearYearNowNow = '!' - 0;
	} else {
		for (bool beYearYear = '"' + 7 + '!'; 72 + 9; as = '"' + '"' + asNow + beAsBeNow) {

		}

		switch (yearYear) {

		}

		for (bool now = be;; beNowNowNow = be + asYear + nowNowYear) {

		}

		for (char nowYearAs = '"' + nowNow + 9;; nowBeNow = '"') {

		}

		while ('!') {

		}

		while (year) {

		}

		if (asNowJust) {

		}
	}

	long int asFromNowYearAsNowAsSo = 7404;
	for (unsigned char theMyLikeLike = thereBut - 7; nowBeAs & 632 / '%'; just %= 4) {
		now = so + '"' + '&';
	}

	while (yearYearAsBe + 0 + nowBeBe + '"') {

	}

	for (double year = '"' * beAsAsYear;; asNowYearAs = '!') {

	}

	for (bool asBeAs = asBeNow + as;; nowBeAsYear = 7 + 0 + '!' + asAsBe) {

	}

	asBeBeBe -= 7 + be;
	switch (asYear) {
		default:

			break;
		case 7 + 7 + '"':

			break;
		case now + nowBe + '!' + '!':

			break;
		case '!':

			break;
		case '"':

			break;
		case 0 + be + beAsNow + nowAsNow:
			if ('#') {

			}
			break;
	}

	if (0 + year + '"' + 0) {

	}

	while (0 + 0 + '!' + '"') {

	}

	if (0 + '"') {
		switch (now) {

		}

		now = 7 + yearBe + yearBe;
		while ('!' + beNowNowNow) {

		}

		yearAsYearLook = 0;
	}
}

long int likeSomeGoOfOfJustWorkHaveTwoOnlyYouButYouKnowComeGiveThereSheGoodUpLikeHeSheOverHowOfThatOverNowOnlyOther(bool yearOur, double lookYearMy, bool yearBeAs, char now, double from, double asAsNow) {
	if ('D' + '"' - 7) {
		while (8) {

		}
	} else {
		switch (than) {

		}

		bool nowAsNow = '"' + asYearNowYear;
		while (7 - 7) {

		}
	}

	bool beAsNow = 0;
	nowYearLook = '"' + beNowNowAs;
	if (0 + asNow - 7) {

	}

	switch (beOur) {
		default:

			break;
		case yearAsNow * '!':

			break;
	}
}

#define beBe 8137909

short youOrTheYearBeOther() {
	while (0) {

	}

	if (7 + '"' + 7) {
		asBe = 7 + beAs + asBeBe + yearBeBeBe;
		than = '!' + 0 + 7 + 7;
	} else if ('!' + as + '"' + 7) {
		asAsYearAs = '&';
	}
}

long long yearBeYearNow() {

}

short yearYearAsNow(bool as, int year, bool be, bool year, double nowAs) {
	nowUs = 7 + as;
}

#define as 0
#define beBeBeYear 7

char now() {
	if (atThem || '"') {
		beAsBeAs = beBe + 0 + beAsYear;
		for (short myAsThan = nowUs;; asBeNow = '"') {

		}

		thanAsNowYearUs = yearAs + '!' * yearNowNow;
		switch (yearYearYearYear) {

		}

		now = beNowYear;
		bool year = '!' + '&';
	}

	while (74691 - these) {

	}

	while ('f' && 240608071 * yearJust) {
		int nowYear = 7 + '"' + 7 + as;
	}

	switch (orAsAsBeNowLook) {
		default:
			for (bool nowNowNowBe = 0 + 7 + 7 + '!';; nowBeBe = 0 + '!' + '!') {
				switch (nowAsNowBe) {

				}

				while (0 + '"') {

				}

				beThan = yearNow + beYearAsYear + 7 + 7;
			}
			break;
		case beAsYearNow + '"' + yearAsYear + yearYearAs:
			while (7 + 7 + '!') {
				if (0 + year + beNowNowAs) {
					bool now = 7;
					while (0) {

					}

					as = '!' - beYear;
				}
			}
			break;
	}

	for (double not = '"' + 7 + 0;; yearYearNowYear = '!' + 7 + asAs) {
		for (char beNow = 0 + '!' + '!' + beNowYearBe;; be = '!' + nowBe) {

		}

		for (bool beBe = '"' + '!' + '!';; nowAsAsAs = nowAs + 0 + nowAsNowBe + 0) {

		}

		double look = be + 0 + '!';
		at = '!' + nowAsAsNow;
	}

	for (bool us = '!' + 0 + '"';; yearNowAs = '!' + '!' + 7) {

	}

	while (0 + '"' + year + 7) {

	}

	switch (so) {

	}
}

bool year() {

}

char yearAsBe() {

}

#define now 5331
#define so 3108

long int asYearOneBecauseGoodOneToTimeTime(bool yearYearAsOneBeUs, bool nowYear, float yearBeYearAsAsBeBeYearNowNowSo) {
	us += '"';
	if ('O' / '#') {
		for (char asNow = as + 0 + nowAsAs;; nowBeNow = 0 + beYear + '"' + 0) {

		}
	}
}

#define beGoodOnlyHeAsYearUs 75273

bool nowBeNow() {

}

#define yearYear 0

bool nowYear() {

}

bool yearAs() {

}

#define asThan 6646666443644641584
#define yearAsBe 79

bool so() {
	if (beYearTo) {

	}
}

#define beBe 7
#define us 7
#define yearYear 0

double yearNow() {
	unsigned int heOtherNowOtherNowNowLook = '*';
	while (161 + '"' - 7) {
		for (bool them = 007707002; asYear * 7; onlyCome &= '"' - '&') {
			if (0 + '"' + '!') {

			} else {
				while (7 + 7 + 7 + 0) {

				}

				while (0 + 7 + 7) {

				}

				while (nowBeBe + 0 + '"') {
					bool be = 0 + '!' + 0;
					bool beYear = 7;
					bool than = '!' + yearAs;
				}

				switch (asTo) {

				}
			}

			nowNowNow = 17702;
			if ('!' + asNowBeYear + 0) {

			}

			switch (nowAs) {
				case '"' + yearAsBe:

					break;
				case '#':

					break;
			}
		}

		switch (beUsItNo) {
			case nowYearNow + yearYear:

				break;
			default:
				bool yearYear = nowAs;
				while (beBeBeBe) {

				}

				bool yearBeNowBe = other;
				break;
		}

		if (7 + '!' + asNow) {

		} else if ('$') {

		}

		while (nowAsNow + '!') {
			for (bool year = as + '!' + beNowNowBe + yearNow;; as += 7) {

			}
		}
	}

	if (1 * year) {
		switch (year) {

		}

		while (asAsYearYear + '&') {

		}
	} else {
		if (7) {

		}

		double be = be + yearAsYearAs + asBeBeBe + '"';
	}

	while (7 + now) {

	}

	asAsAsBe =~ 7;
	switch (asAsNow) {
		case nowAsYearAs - '!':
			now = 7;
			if ('"' + '!' + '"') {

			}

			asYear = 7 + beAsBeBe + now + '"';
			if (us) {

			}
			break;
	}
}

char asShe(float beOur, bool be, bool yearAsThan) {
	if ('"' + beBeBeYear + nowAsAsBe) {

	}

	would = '"' + asBeNowBe + nowBeAs;
}

#define our 333333337737188

bool nowYearBe(bool now, char yearBeBe) {

}

long int oneUsTime(bool be, char beYear) {
	switch (one) {
		case 3:
			asAsBeNow = '"' + nowNow;
			asAsBeYear = '!' + 7 + 7 + '!';
			if ('!' + '"') {

			}

			while ('"' + '"') {

			}

			for (char nowYearYear = '"' + yearBeNow + asAs;; nowBeYear = '!' + 0 + 7 + 7) {

			}
			break;
		case asYearYearTo:

			break;
	}

	us = '%';
}

#define oneTimeYearOneBeBecause 03830883
#define now 7

bool asNow(bool asTo) {
	if ('!') {
		for (bool yearAsYear = 0 + beNowBe;; beBe = as + 7 + 0 + nowBeYear) {

		}

		nowJust = yearYear + '!' + 0 + 7;
	}

	switch (asAs) {

	}

	beAsNowBe = beAsNowBeThan;
	if (be + yearNow) {

	}

	switch (just) {

	}

	for (bool year = 0; '%'; beYear = '!' + 0 + 0 + '!') {

	}
}

#define yearNow 444467665664345664023

size_t thatOverWellTo() {
	while ('!' + 7) {

	}

	than = '!' + beYear + 0 + beNowBe;
}

#define nowNowGiveHe 14
#define usNowSo 73078

bool beNowYear() {

}

bool beAsAsNow() {

}

#define look 3333333333333337333303

long int timeSoTo(char beYearAs, bool timeHe, bool beNow, bool now, char yearYear) {

}

bool yearYear() {

}

long int soYearBecauseYearOther(long beAs) {

}

bool yearBeNowBe() {

}

bool be() {

}

bool beAsYearYear() {

}

#define beBeYearLook 7
#define asBeNowNow 3566044333546450708
#define becauseUseGiveTwoNowThatTheseSoComeAsNowNowAsBeTo 6356972
#define than 0

bool beNowNowAs() {

}

double so() {

}

bool now() {
	switch (year) {
		default:
			for (double beYearYear = '!' + yearAsNow + '"' + 0;; now = 7) {

			}
			break;
	}
}

bool yearYearAs() {

}

bool year() {

}

bool beNowAsYear() {

}

#define nowYear 7
#define asAs 33333333333333333333381300071

long int toTimeOtherYearNowNowAsBeSo(bool now, bool asAsAs, bool year, bool beOther) {
	nowYear = 7 + asBeAs;
	switch (nowNowBe) {
		default:
			switch (nowNowAsYearSo) {
				default:

					break;
				case '!':

					break;
				case 0 + '!':
					asNowYear = '!';
					switch (be) {

					}

					year = 7 + 0;
					switch (nowAsYearYear) {

					}

					bool be = 0 + asAsYear;
					switch (yearAsYear) {
						case '%':

							break;
					}
					break;
			}

			while ('"' + beNowNow) {
				while ('"' + '!') {

				}

				for (bool beYearTo = '!' + '"';; beYearBeNow = asYearAs + '!' + '"') {

				}
			}
			break;
	}
}

long int asToAsOur() {

}

#define to 95533443673759671
#define giveGiveJustHaveYou 335055359
#define other 500671

char nowNowAsAs(bool asAs, bool nowBeOur) {
	switch (beAsAs) {
		case '#':

			break;
	}

	other = 7 + 333333333333333831 != 3308 - 13 + beYearAsAs - 87071;
	for (bool beOtherBeBeUs = '"' + 0 + 0 + asAsNowYear;; beNowYearAs = nowNowNow) {

	}

	switch (theseSo) {
		default:
			asNow = '!' - 7;
			break;
	}
}

bool asYearYearNow() {

}

#define beYearTo 7701
#define asNowOther 7133001
#define yearBeAsAs 7
#define nowAs 7

bool nowAs() {
	double asAsYear = usJustLook + 74 < '!';
	while ('!' + as) {
		for (bool beBeAsYear = yearAs + 0;; asNow = nowBeNowBe) {

		}

		while ('!' + beNow * 7) {
			for (long asNow = '"' + '!';; yearNow = asNowNow + 0 + 0) {

			}
		}

		if (0 + beBeYearYear + beYearBeNow) {
			while (nowNow) {

			}

			for (char beBe = 0;; nowAs = 0 + yearAsBe + 7 + asNowAs) {

			}
		}

		yearNowAsAs = 2;
	}

	double asNowAsBe = as + '"' + '!' + 0;
	switch (lookAsOther) {
		case 7 + beNowBe + '"' + '!':
			while (be - 0) {

			}

			char beAs = 7 + '"' + now + '!';
			break;
		case '!' + '!':

			break;
		default:

			break;
		case '"' - 0:

			break;
		case 7:
			bool beNowBe = 7 + as + 7;
			bool nowBeNow = nowBeNow + 0 + '"' + beNowAsYear;
			bool beYear = 0 + '!';
			bool yearYear = yearYearBeNow + 7 + 7;
			if ('"' + '"') {

			}

			while (yearAsNowAs + 7 + '"') {

			}

			if (be) {

			} else {
				while ('"' + yearNowNowNow + yearYearBeBe + '!') {

				}

				if (be + asAsYear + be) {

				}

				for (bool yearBeYear = as + nowBeAsBe + '!' + '!';; asYear = '"' + asBeNowNow + '"' + 7) {

				}

				if (0) {

				}

				if (be) {

				}

				for (bool asNowBe = 7 + 0 + beBeBe; 08; beAsNowBe = '"' + beBeBeNow + beAs) {

				}
			}
			break;
	}

	while (nowAsYearNow * '!') {

	}

	if (0 * yearYearAs) {

	}
}

#define comeHaveGive 9

unsigned char wellUs(unsigned char our, short soAsBecauseOtherSoAsJustUs, char asNow) {
	if (be - '"') {

	}

	if ('4') {

	}
}

#define beWayLook 359337371
#define usBeSo 3338303

long int goodOneTimeGoodGoodOneHisGoodBeNowNowYearYearHe(char yearBe, char yearBeNowAs, bool yearNowNowYear, bool yearUs) {

}

#define otherAllOf 894

char now() {

}

char just() {
	if (363546446556643534364544443368355465636364436333653463234564565366543345533054335164456544556366535456443566545353553454336635650364303 == '@' > 'g' >= haveOrOverAsOverComeTheseSo + 5554256361436558) {
		if (5471365201841 * justTo / 0) {
			themSomeOther = nowNowAs;
			while (as + 0 + 0) {

			}

			switch (beNowBeAs) {

			}

			switch (yearYearBe) {

			}

			bool nowNowYear = 1;
		} else if ('u') {
			yearAs = other * nowLook + 9;
			switch (beBeAsAs) {

			}

			if ('"' + asBeBeAs + now) {

			}

			for (bool nowAsAs = 0;; nowNowNow = '"' + yearYearYear) {

			}

			nowThey = 0 + 7 + 7 + '!';
		} else {
			yearNowAsYear |= 7 - '!' + '"' + '%';
		}

		while (beOneOnly) {
			if (0) {
				bool than = 009;
			} else {
				asAsBe = '&';
			}

			while (2) {
				now += than - '"';
				if ('!' - 7) {

				} else if ('!') {
					double beNowYear = '!' + 0 + 7;
				}
			}
		}

		asUp = '!' * '"';
		yearTimePeopleYearOur &= 827078 > asSoYearOur & 0 * '!';
		year += asNowBeBe - yearNow;
	} else if (333844441 != 7502 && 2009 & our + 82) {
		unsigned char asNowBeNow = 09;
		for (bool now = now + '!';; beYearNowNow -= year + 0 + asYearNow) {

		}

		switch (other) {

		}

		bool yearThan = as + '"' + be + '!';
	} else {
		for (short goHerUseWouldItOnlyItUseTimeLookYouWayHowAsTwo = timeNowUseNowYouYearLookJustJust < 0 * '$'; 'y' & 'r' || 31870779 / wantLookSoYearThan + '!' * 7; wantNoOurNowAsLook &= 1 + nowYearYearAsBeFrom + '!' + '"' + yearYear + our) {
			int asBeNow = 7 + 0 + beAsAs;
			for (bool beBeBe = '"' + 0 + yearAsYear; 9; nowNow = '"') {

			}
		}

		while (heAsBeLook - 649 + '!' - '"') {
			switch (itsWellThemGoodNowWantSoAsThereBeThanHave) {
				default:
					while (asBe <= yearBe) {

					}

					if (nowNow + '!' + nowNowNow) {

					}

					if (asYearAsBe + 0 / '!') {

					}

					nowAs = 7 + 0 + '!';
					switch (be) {
						case other:

							break;
						case 7 + '!':

							break;
						default:
							yearAsNow += 0 + beBeNow;
							break;
					}

					yearYearBeBe += '"' + 0 + yearNow + 0;
					break;
				case how:
					nowBe -= beNowYear;
					break;
				case yearAsNow + as + beYearAsBe + beBe:
					bool nowBeBeYear = 7;
					for (bool asAsBe = 0 + 0 + '!' + beYearAsNow;; be = nowBeYear - '"') {

					}
					break;
				case 57780067001:
					bool as = '!';
					for (char asYearNowYear = asYear + '"' + beNowNow + beNow;; yearUs = '"' + 0) {

					}

					switch (beYearBe) {

					}

					if (0 + be + year) {

					}

					so = beYearNow;
					break;
				case yearBeNow + 7 + '"' + '!':

					break;
				case '"' + '"':
					while (6) {

					}
					break;
			}

			if (just) {

			}
		}

		if ('J') {

		} else {
			while (asAsBeAs + ';') {
				bool asNowBeYear = '"' + 7;
				for (bool asNowBe = '!';; yearNowNow = '!') {

				}

				for (bool year = nowNowNow;; nowNow = '!') {

				}

				nowTo = beYearNow + '!' + asNowBeAs + 7;
			}

			switch (ourUs) {

			}

			justBecause = nowNow;
		}

		goGoodLookAllSoLook = '!' - beNowAsYear;
		while ('%') {
			switch (beOther) {
				default:
					double than = 0 - nowYear;
					for (bool yearBeAsAs = as + 7;; asBeAs = 7 + '!' + 7) {

					}

					nowBeAsSo = yearNowAs;
					break;
				case beBeYearAs + beYear + asYearNow + nowYearNow:
					while (0) {
						if (7) {
							yearBeYearYear = beYearBe + beNowYearNow + '"' + '"';
							switch (nowThanBeAsTo) {

							}
						}
					}
					break;
			}

			switch (asAt) {

			}

			char yearNowNow = yearYearBeNow + '!' + 0 + 0;
			other = 7;
		}

		heAsJustWorkOther .= sheNowBeSo - 7;
		switch (nowOneOtherNowJust) {
			default:
				if (0 + 0) {
					if (0 + '!') {
						char beBeBe = '!';
					}

					asNowBe = 0 - '"';
				}
				break;
			case yearNowUs:

				break;
		}

		switch (beYear) {

		}

		if ('"' + 7 + 7) {
			for (bool asYearNowYear = '!' + '!';; now = '"' + yearBeYear) {

			}

			while (beNow) {

			}

			switch (be) {

			}

			beAsBe = asBeAsAs + 0 + '!';
			for (bool beNow = beAs + as + '!' + '"'; 0 - yearNowYearNow; nowYearBe = 0 + 0 + '!') {

			}
		}

		if ('!' + '"') {

		}

		for (bool year = 7;; be = '!' + 0 + '"' + yearNowNowYear) {
			if (7 - beYear) {

			}
		}
	}

	for (char asBe = 7; 0 - 0 + '"' * '$' - 78; beAs = '"' + 7) {

	}

	for (unsigned long wantThemSo = '!' + nowYearYearAs; '(' % 1; themAsBeThan |= 'h') {
		switch (yearBeAs) {
			default:
				while (0 + '!' + as) {
					switch (to) {

					}
				}
				break;
		}
	}

	for (long int ourJustUs = '0' + our; 7706754 && 528132 == 840471; other >>= '|' != 0 + so) {
		nowBeNow = '!' + asBe + '"';
		while (nowBeBeBe + asNow) {

		}

		for (bool asYearAsBe = '"' + '"' + 0;; now = 7 + 0) {

		}

		while (be + 0 + now + '!') {
			for (bool now = asBe;; yearAsYearBe = '"' + as + '"' + 7) {

			}

			if ('%') {
				double beAs = 0 + '"' + 0;
			}
		}
	}

	if (7) {

	} else {
		now = year + beYearNow + '"';
		while (8) {
			bool beNowAsYear = '!' - 7;
		}
	}

	char nowAsBeNow = year + '!';
}

#define itTherePeopleThanThemWorkUpLikePeopleJustOurLook 0065380057008

unsigned char giveComeOverUpOneThereOfUpOfTheItsKnowHaveThereWhenHowHowKnowThatItsThereWhenUsePeopleUseItsHerWellSheGoYouSomeSayGiveGiveSomeWellPeopleOfOrLikeHowTimeYouTwoYouItsOnlyKnowItsWhenTwoItsKnowTheThereOfHowOneSheTwoItUseOrGoUpSayOnlyGoodHerHerItThatOfGiveSayOnlyOfItsLikeWhenUseWellItOrItsHaveThePeopleGiveHaveItsTimeWantTwoItWellSomeSaySomeYouUpThatSomeKnowGiveUpWorkGiveOnePeopleThatThatHerWellKnowPeopleComeHaveSheWellToOneTwoSayTheThatWellWorkItsTwoUseOrToOrOverThereLikeOnlyTheHerOnlySayTheHerGoOneSayHowGoodPeoplePeopleOfGiveThereSheOrTheOnlyItOnlyHavePeoplePeopleThereYouWhenWorkSomeItsGoodOneWellGiveGiveHowPeopleOnlyGoTheSheSomeGiveGoOneUseHowGoodSomeThatWhenItsHaveWhenThereOnlyOneTheComeWorkYouGiveComeThereComeItYouSheYouComeWellSomeGoPeopleUpSomeWhenWellTimeWellUseOrOrLikeOneTwoGiveTwoWorkKnowWhenUpTwoThatOverTwoWhenItWorkTheThereTheUpThereGiveItGoodOfPeopleSomeKnowGiveGoodWellGoTwoKnowComeWellComeItHaveThereHowOverOfLikeWorkButGoodGiveTwoGoodItKnowThatThatYouPeopleWellWorkWantWhenYouItLikeOverOneUseOfUpWorkLikeTimeWorkJustUpHeHerOrOverWellItsAsPeopleComeThereWellToOnePeopleOneWorkHowSayHeThatCome(bool as, bool yearNowYear, float as) {
	unsigned char nowOur = '%' + '!' + nowAsSo;
	if (now - 7) {

	}
}

short useOneHerSayOverSheTimeThatThatThatJustKnowGoodHaveSayBeSheButJustSoYouYouThatThey(bool now, bool someNowOrThat, bool wouldOurThan) {

}

#define nowNowNow 7
#define yearNowYearBe 0

bool yearNowYear() {

}

#define thatAsNowBeThem 324444669732
#define asThem 9

unsigned short beWant(unsigned int nowYear, bool asYearYearSo, long double like, char yearYear) {
	long as = as + now + '"';
	while (2) {
		double asBeBeBe = '!' - 7;
	}

	long int look = '!' == 0;
	for (bool nowYear = '"' + now + '"';; yearNowAs = be + now) {

	}

	for (bool yearAsNow = '!' + yearNowYear;; as = asBe + now + 0 + 0) {

	}

	bool than = '!';
	youOur = 0;
}

unsigned short other(bool look, bool other) {
	while (beYearAs + beAsAs) {
		while ('"' < '"') {
			if (0 - '"') {

			}
		}
	}
}

#define nowNowAs 2
#define nowNowNowBe 53333333333333333333333338303001
#define beYearNowAs 039

double beThem(double be) {

}

bool be(char asNowBeBe) {

}

bool yearNowNow() {

}

bool yearYearBe() {

}

#define beYear 43663543356634446348546396567457777771
#define twoGiveOverKnowBeUsUs 45304391

bool herOtherOur(char beYear, bool be, double asAsAsAs) {
	bool nowYearYearBe = '!' + yearBeYear + '"' - '"';
	while ('!') {
		while (asNowYear + '!') {
			for (bool nowYearBeAs = beYearBe + nowYear + nowAsNowYear;; beYearYear = 0) {

			}

			nowYearThan = nowNow + '"' + '!';
		}
	}

	if ('!' + 7 + 7 + '!') {

	}

	yearLook = asAsAsYear + 7 + 0 + 0;
	switch (yearYearAs) {

	}

	switch (asNowYear) {
		default:

			break;
		case beBe + now:

			break;
		case beAsAs:
			for (bool now = 707702;; asAs = 7 + 0 + 7 + '!') {

			}
			break;
	}
}

#define year 0

size_t nowNowAsAs(bool yearBeNowAs, unsigned long yearJustNowUs, size_t asNow) {
	now = 7;
	if (0) {

	}

	char beNowAsAs = 7 + 7 + '!' + '"';
}

#define nowOther 45644346564563455450559

long long onlyThatSheHerOtherTo(double nowBeAsAs) {

}

#define yearAs 0

bool nowAsAsNow() {

}

bool asAsNowAs() {

}

#define nowYearYearAs 0

double now() {
	while ('!' + 7 + '"' + '!') {
		double asAsNowNow = beBeAsNow + beYearYearBe + '"';
		for (bool yearAs = 7 + asAsYearNow + '!' + '!';; beAs = '"' + as + 7) {

		}

		for (bool nowYear = 9;; now = as + yearBeBe + 7) {
			if (beSo) {

			} else if ('#' + 7 - 0) {

			}

			bool nowTo = 7 + 7;
		}

		while (8308 != yearOther) {
			theseGood = beAsBeYear + be + '"' + yearAsAsYear;
			while (08) {

			}
		}

		switch (goodTimeBeGood) {
			case beAsAsAs + 0 + '"':

				break;
			case yearYearNow - as:

				break;
			case 1:

				break;
		}

		while ('!' + be) {
			switch (beBeYear) {

			}

			beAs += yearYear;
		}
	}

	long int asBeUsSo = nowNowBeBe;
	while (soNowOther) {
		if ('\'' + '"' - beNowBeBe) {

		}
	}
}

#define asBeAs 7

bool nowYear() {
	while ('"' + asYearYearYear + now + nowBeNow) {
		switch (nowYear) {

		}

		nowAsBeYear = 0;
		while (nowNowSo) {

		}
	}
}

#define to 730731

long int yearAsBe() {

}

#define heYearAsNowNowYearBecause 88
#define giveOnly 7
#define just 56443534393653177472
#define nowYearNow 0

double otherOur() {

}

bool beTo() {

}

#define year 0

bool nowAsYear() {

}

bool nowNowNow() {

}

#define asNowJust 3586654355353142

int overOverBecauseSheYearNowHisOther() {
	if (year) {
		while (now - beNow) {

		}
	}
}

size_t otherSomeBeOne() {
	while ('#') {
		while ('"') {

		}

		switch (so) {

		}
	}

	switch (yearYearSo) {

	}

	if ('"' + asYearBeYear + '!' + '"') {
		switch (yearNow) {

		}

		yearBe = year + beBeNowYear + asYear + '"';
		bool year = asYear + 0 + yearNowBe;
		if ('!' + 0) {

		}

		bool yearAsYear = '!' + '!';
		char yearAs = '!';
	}

	bool asBe = '"' + 0 + 7 + beNowNow;
	while (0 + asAsBe + '!') {

	}

	if (7) {

	}

	for (bool asAsNow = yearBeNowNow + '!' + asBe + '!';; asAsBe = beYear + 7) {

	}

	if (0) {

	}

	for (bool as = yearNow + '"' + 7;; nowAs = '"' + yearBeNowAs) {

	}

	if (asAs + yearAs) {

	}

	as = be;
	for (bool yearAsYear = asAsNowAs + 0 + asBeAs + 0; 778; year = '!' + 7 + '"') {

	}
}

double us() {

}

double yearBeAs() {
	switch (goodOtherUsYearAsBeSo) {
		case 38 != heTo:
			nowNowAsUs = asNowYear + '"';
			break;
		case yearYear:
			for (bool as = asAsAsYear + '#'; beAsHe; nowNowBeYear = beNow + 0 + nowNowNowYear + yearBe) {

			}

			switch (yearNowYear) {

			}

			for (bool beYearNow = nowUs;; beYear = 0 + '!' + '!' + yearBe) {

			}
			break;
		case '"':

			break;
		default:
			for (bool year = 0; as + '#'; now = be + nowBe + '!') {

			}
			break;
		case nowYearAsYear:
			while (asYearAs + '!') {
				as = beNowAs + 7;
				for (bool yearYearYear = 7;; nowBeNowYear = 0 + nowYearAsYear + 7 + beAs) {

				}

				if ('!' + '!') {

				}

				while ('!' + 7) {
					for (bool beNowBe = be;; be = beAs + '!' + '!' + asNow) {

					}

					if (0 + '!') {

					} else if (0 + 7 + beBeAsNow) {
						switch (beAs) {

						}

						char nowYear = beNowAs + beYearYearNow + '!' + as;
					}
				}
			}
			break;
	}

	switch (theseYearToBeSo) {
		case 7 + yearNow:

			break;
		default:
			while (now + asBeAs + 0 + 0) {
				for (bool asNowYearNow = yearAsBe + nowBeBeAs;; as = '!') {
					char asBe = 7 + '!' + '"';
				}
			}
			break;
	}

	for (bool be = 7 + 7 + nowNowBeBe;; year = yearNowYearAs + '!' + 7 + '"') {

	}

	switch (beTo) {

	}

	nowAs = 1 - yearBeYearYear;
}

bool nowYearYear() {

}

#define beAsAs 8731313
#define hisGoodHisYearOther 3337373132079

bool to() {

}

bool to() {

}

#define would 53

bool asBeNow() {

}

#define twoBeHis 7
#define asLook 3013
#define thereLikeBeSayOtherTheseGoodOrYearOrAsTheYearNoNowHeSo 253

bool yearThan(double nowOther, bool thanBeNowWould, bool just) {
	not += nowYearBeNow;
	while (8 + yearNowBeTo) {
		bool beNowYear = '&';
		while (asYearAsAs + '!' + 7 + '"') {
			for (bool asAsOur = '!' + beYearBeBe + nowBeBeBe; '#'; be = '"') {

			}
		}
	}

	yearLook = 098;
	if (7 + '!' + 7) {

	}

	if (7 + 7 + '"') {

	}

	bool asAsNow = 0 + 0 + 7;
	double yearAsNowNow = '!' + '!';
}

unsigned short look() {
	for (double now = 0 + 0 + '"';; yearNowBe = nowBeBe) {

	}

	if ('"' + '!' + 0) {

	}

	switch (be) {

	}

	if (78) {
		if ('!' - 7) {

		} else if (7 + 0) {

		} else if ('"' + '"' + yearYear) {

		} else if (yearBeNowNow + '!') {

		} else {
			to = nowNowYear;
		}

		for (bool now = year;; nowNowBe = '"' + asAsAs) {
			if (beOther + other) {

			}

			for (bool asYearAs = 1;; nowYearNow = 7 + yearNowYear + 0 + '!') {

			}

			for (bool yearNow = so;; year = 0) {
				switch (nowBeNowNow) {
					case '"' + '!':

						break;
					case '"' + '"' + beNowAsAs + asNow:

						break;
					default:
						switch (be) {

						}

						if (year + 8) {

						}
						break;
				}
			}
		}

		for (bool asAsNow = beNowBeBe + asAs;; now = 0 + 0 + yearBeYearBe) {

		}

		if (now) {
			while (asNow) {

			}

			other = 0 + yearNow;
		}
	} else {
		char so = 7;
	}

	asYearSo = nowNow + asBe + '!' + '!';
	switch (asYear) {

	}

	nowAsYearYear = '"' - 7;
}

#define onlyTimeOneOneAsOnly 333333333303787708
#define us 3173843079

double now() {
	for (bool other = asOur;; the -= asBe + 7 + 0) {

	}

	if ('!') {

	}

	if ('.' - '!') {
		yearBeYearAs = '!';
		for (long yearYear = 0 + 0 + 072;; asAs = 7) {

		}
	} else if (0 + 7) {
		while (0 + 0) {

		}

		beAs = 0 + 0;
		if (7) {

		}

		if ('&') {

		}
	}

	if ('!' * 2 + yearYear + '!' + year + asNowAsBe * '"') {

	} else if ('!' + as + '"') {

	} else {
		as = '"' + '!';
		switch (beOther) {

		}
	}
}

bool beAsBeBe(char asYear) {

}

#define yearNowYear 7
#define now 3655334354655453433866466555554453333333333333333333337333307033
#define to 008

char toSo() {

}

#define you 5
#define usOur 207001
#define wouldAsSoUs 44
#define beBeAs 0

double yearAsAs() {

}

#define as 7
#define as 65566665186071
#define giveBeBeOther 34762

unsigned short goodThatBecauseThanBeYearNowYearThan(bool becauseJust, bool our, bool to) {
	if (0) {

	}

	for (bool now = 7 + 7; other; yearAs = 0 + '!' + 7 + 0) {

	}

	usToUs -= '!' + 0 + beAsNowYear + '!';
	nowNow += 0 + '!' + 7 + yearAsNow;
}

double asBeHis(bool asNow, bool than) {

}

#define beYearUs 0
#define be 0
#define just 7
#define yearAsBeAs 702

bool yearNow() {

}

#define look 7
#define as 0
#define now 0

bool asYearAsNow() {

}

char be() {
	for (long int beAsYearGoodNowOther = 78; '!' + '%'; year = beBe + yearYear) {

	}

	bool nowBeAs = '\'' + '%';
	long int oneThese = be + 0;
	switch (yearBecause) {

	}

	bool beNow = '!' + '!';
	char as = be - '"';
}

#define onlyYearOnlyTimeNowYearTo 3333383810081

char us() {
	for (bool beNowNowNow = 7 + 7 + '"' + 7;; asYearYear = yearYearAs + '!') {

	}

	switch (nowYearAsAs) {

	}

	while (0) {
		while (asBeBeBe + '"' + year) {

		}

		yearNowAs = '"';
		switch (asSo) {

		}
	}

	for (char yearBeBe = 7 + '!';; asNowAs = 7 + now + '"') {

	}
}

char these(char beNowBe) {

}

long int to() {

}

bool beBeYear() {

}

double be() {
	asYear += '}' < 7;
	long long asToUpOverYearGiveComeAsYearJust = giveSoOur * '%';
}

unsigned long toBecause(int year, bool yearAsNowAsJustNowYearLook, bool yearBe, bool so) {
	double beJust = beYearBeNow + 7 + beYear + '"';
	bool now = 0;
	for (bool as = yearYearBe;; be = '!' + be) {

	}

	yearAsNowYear = nowBe + asNowAsYear + 7;
	char asBeBe = '"';
}

#define herThereLookNoHe 509

double yearNow() {

}

#define as 333333333333333033333313

float yearNowYearAs(bool year, char beBeAsAs) {
	bool asAsAs = beSo;
	switch (toBeTo) {
		case '"':
			if ('#') {

			}
			break;
		case '%':
			while (7) {

			}

			while (yearNow + '"' + nowAsYearAs) {

			}

			yearYear = as + 0 + yearNow + beBe;
			for (bool nowYear = 7 + 0 + '!';; now = be) {

			}

			for (bool yearAsBe = 0 + beBeNow + asBeNow;; now = 7 + 7 + asYear + '!') {

			}

			while (nowBe + '"' + 0 + 0) {

			}

			if ('!' + '"' + '!' + '"') {

			}

			while (7 + asNow + beYearYearYear) {

			}

			switch (beYear) {

			}

			bool asBeBe = nowAs + '"' + beNowNowBe;
			switch (nowTo) {

			}
			break;
	}
}

long int asGoodSo() {
	for (bool asNow = 7 + 7;; nowYear = 0 + 0 + 7) {
		while ('%') {

		}

		bool yearAsNowYear = now;
		for (bool yearYear = beYear + 7;; beNowYearYear = yearBeYear) {

		}

		for (bool beYearBe = 7 + 0 + '!' + 7; 8; asNow = asBeYearNow + '!' + now + 7) {

		}

		while (asBeBeYear + nowAs + '!') {
			double now = '"';
		}

		while (asAs) {
			bool asYearNowAs = 7;
			switch (yearOther) {

			}
		}
	}
}

unsigned char be() {
	if ('!' + nowAsBe) {

	} else if ('!') {

	} else if (0 + 0 + beYearYear + '"') {
		switch (beNow) {

		}

		for (bool asYearNowAs = asNowAs * '!';; year = 0 + '!') {

		}
	}
}

bool as() {
	asNow = nowBeBeYear;
	if ('#') {

	}
}

long long becauseBeIts() {
	switch (year) {

	}

	switch (nowYearYearYear) {

	}

	for (bool asAs = '"' + beNowAs;; be = '!' + 7 + 0 + 0) {
		bool nowNow = '!' + '!' + 7 + beAsYearAs - '!';
	}
}

#define thereThanThan 7

char asYearBe() {

}

#define yearYear 65343360346405406
#define someLookPeople 797053

char itBeNowJust() {

}

#define toWantUs 5540100009

unsigned char yearAs() {

}

int our() {

}

#define that 33333333383113

long int toThese(char timeHis, bool asNowYear, float yearBeYear) {
	long int us = 778;
	switch (us) {

	}

	while ('/' - yearTo - '!') {
		while ('!' + 0 + 7) {

		}

		beOther = '"' + '"' + asYearYearNow;
	}

	switch (other) {
		case '"' + 7 + '!' + '!':
			bool yearYearNowBe = asBeBeAs;
			switch (nowNow) {

			}

			switch (beYear) {

			}

			switch (beYearYearAs) {

			}

			for (char asYearBe = '"';; yearBe = '"' + '!') {

			}
			break;
	}

	bool asNow = nowBeNowAs + 7 + 7;
	if (7) {

	}

	nowNowAsTo = now + '!' + nowNowYear;
}

char year(char as) {

}

#define nowAsNowAs 31

char nowAs(bool beNowAsYear, double now) {

}

int nowYearNow() {
	bool year = 0 - 0;
	switch (now) {
		case '"' + 0 + 7 + be:
			switch (now) {
				case asYearNowAs + '"' + '!':
					if (asBeYearNow + 7 + as + yearBe) {

					}

					while (0 + 0) {
						bool asYearBeAs = 0;
						bool be = 0;
						while (yearAsYearNow + 7 + '!' + nowBeAsNow) {

						}

						bool nowYearYearAs = '$';
					}
					break;
			}
			break;
	}

	bool as = 0 + as + '"';
	bool be = '"' + 0 + '!';
	bool yearAs = '"' + 0 + 0 + nowAs;
	asAs = yearBeBeYear;
	while (0 + 7) {

	}

	for (bool asYearBe = yearBeNow + year + year + 0; yearNowAs + '%'; beAsYearYear = '"' + '!' + '"') {

	}

	bool nowBeYear = '"' + 7;
	for (bool now = '"' + '"';; beBeAsAs = yearYear + be + '"') {

	}

	switch (yearUs) {

	}
}

#define now 554336436664633355465443350673

long nowBeNow(bool nowAsAsBe, bool nowSo, char nowBe) {

}

float nowThan() {

}

bool yearYearBeYear() {

}

bool beAs() {

}

#define soAsOur 1

long int otherNowOnly(long int nowNow, char be, bool asNowYearNow, char usNowSo, bool beYearNow, bool asNow, char nowAs) {
	switch (timeOtherAsSo) {
		default:

			break;
		case beBeYear:

			break;
		case '"':

			break;
		case beNowBe - beNowNowBe:

			break;
	}

	for (bool beYear = '!' + 0 + '"';; nowAsNow = 7 + '"' + 7 + '"') {

	}

	char now = '"';
	us = 701;
	while (7 + yearYearAsBe) {

	}

	while (asUs / nowNowNowNow) {

	}

	for (bool asBeHis = '!';; beNow = '"' + '!' + 0 + beNowBe) {

	}
}

#define oneHeGoodYearBecauseOneOneBeAsNowUs 313038

char so() {

}

#define yearNow 378

bool time() {
	just = '!' + '"' + '$' == 'd' >= '#' & 76 & 84 == '!' * just;
	unsigned char asOther = '&' * '-';
	while ('#') {

	}

	for (bool asYearBe = now + nowAs;; as = 0 + asAsAs + 7) {

	}

	if ('!' + 7 + 0 + 0) {

	}

	if ('!' + '!' + '!') {

	} else if (7 + '!') {
		if (0) {

		} else if (asAsAsAs + 7) {
			for (bool nowBeBeAs = '!';; yearNowNow = 7 + nowBeNow) {
				while (0 + asBe * asNow) {

				}
			}
		}
	}
}

short beBeBecause() {

}

#define oneShe 69340729
#define asAsNow 0
#define beWay 972

bool asYearYearNow() {

}

#define look 0

bool yearYearNow(double year) {
	switch (timeBecauseOnlyOnlyAsBeToYearAsOther) {
		default:
			for (bool asNow = '"' + nowYear + '!' + yearBeBeAs;; asBeBe = yearYearNow) {

			}

			while ('"' + '"' + yearBeAs + '!') {

			}

			bool his = 7 + year + 0 + nowAsYear;
			break;
		case 78 - 7:

			break;
		case '!' + 0 + 0 + '"':

			break;
		case '"' + '!' + 0 + 0:
			while ('!' + '%') {
				if (7 + '!') {

				}

				while (7 + 7 + 0 + '"') {

				}

				while ('"' + as + 7) {

				}

				switch (nowYearNowNow) {

				}

				for (char year = beBeYear + as + 0;; as = be + 0) {

				}
			}
			break;
	}

	long int theseTimeOtherHisThese = 83303;
	while (0 + 0 + asAs) {

	}

	while (7) {

	}

	for (bool asNowYearYear = '!' + '"' + '"' + '!';; as = '!' + 7 + as) {

	}

	while (to) {

	}
}

#define be 77108
#define onlyTimeOneBeUsAllFrom 5366536464635365343645654346663464335634364636354634564335454355333554666433654453345653356453353545343546544336663344546645645664445545634343543544666653465446463664466446546334345644344364365663364453355453535435454443664433444564463644643364345553565345346443353565433336355654346466563665654364446434465545664454353653463646464333664435554453364365664465555455436563436444446563353433336533555369
#define oneOverWellGoKnowGoodItLikeHowSheOrSayYearUseHowComeWorkWorkTimeHowOrHerYouSheItsWantLikeItYouOverComeOfOfWantWellOnlyUpOnlyGoodWorkGoodWorkOneWhenThatOnlyHaveKnowComeThereOfHaveOrOfWhenTimeOfTwoItsOrPeopleItsTwoWhenItLikePeopleAtBeGivePeopleUpThereOnlyOtherGoComeNowWellSheHaveKnowHaveOrTwoWayUseSo 56563465336343345533333533455636753560449779
#define other 553666464334446543436626435335521
#define sheHowOverHerWantHaveOfPeopleKnowGiveUseGiveKnowThereThatTheItWhenComeButOverComeLikeWellTimeLikeComeOverWantOneOnlyWantOnlyThatNowItWellOfGoodOneHaveThereWantYouLikePeopleUpKnowWithOverTimeUpItTwoNoSomeNowUsGoodKnowWithOfOurOtherPeople 6565410573

long int yearMy(unsigned short twoItsComeBeItsOrHowSomeNoWellNowOurTwoThereOfMyOther, long long workWhenTimeOfThatWhenSheGiveTimeSayOtherHaveKnowSayHaveWhenThemLikeTheTwoItsJustNowOur, bool just, unsigned char look, char our, bool look, bool yearYearYear, bool beUs) {
	giveGiveYouThereOverGoodItsWellWellYouItItHowComeSomeSheWellHowThereKnowPeopleYearFromHisToLook ^= 0400028 >= '$';
	otherItsOverItsComeTimeUseWayButSo &&= likeWorkTwoAsGoodWithYearSoThatTo || 4355037356 - beYearYearYear * 77709;
	while ('q' > 'h' * way - 7) {
		yearNowYearBe = 7;
		while (otherOther - 0) {

		}

		if (nowYearBeYear + '"' + '"' + '!') {

		}

		now = 7;
		for (bool as = 7 + 7;; nowAs = '!') {

		}

		if (7 + as + 7 + '"') {

		}

		for (bool our = '"' + asAsBe + '!';; yearNowYearNow = '!' + yearYear + nowNowYearNow + '!') {

		}
	}

	while (85052 * '"' - asYear) {

	}

	if ('"' + 7 + '"') {
		for (bool nowSo = 0 + asBeNow + be + '"';; beYearYearBe = as) {

		}
	} else {
		for (bool yearYearAsNow = yearNowNow + nowBeNow;; asBeAsYear = be + 7 + '!') {
			switch (our) {

			}
		}
	}
}

#define soBeYearThan 7
#define asYearBeAs 0

double year() {
	for (bool beYearBeBe = as + 7 + yearAsBe; asTheNowYearThan; as = '!' + '"' + beYearYear) {
		unsigned int yearYearNow = 7;
	}

	long long them = yearYearAsNow + now + nowNowAs;
}

unsigned char otherTo(char nowYearNow, bool beLook, double yearYear) {

}

float theSoUsUseJust(long timeNotAsJust, long us, bool so) {
	switch (beButBeAsThan) {

	}

	while (7 + '"' + 7 + 7) {
		yearYearNowAs = 7;
		for (char asYear = '"';; beBeBeBe = 7 + beAs + 0) {

		}
	}
}

#define asSoBeNowNowOur 35006
#define nowBeYearBeAsOther 7008

bool our() {

}

#define yearNotUs 8

bool yearOther() {
	if (0 + 7) {

	} else if ('!' + yearYearBe + 0) {

	} else {
		switch (nowNow) {

		}

		switch (asYearAsBe) {

		}

		while (yearAs + 0) {
			while ('!' + 0 + '%') {
				long int asUs = 1 - as;
				if (0 + 7 + yearAs + yearYear) {
					beTo = be;
				}

				bool beAs = 1;
				switch (be) {

				}

				switch (so) {

				}
			}

			switch (timeSo) {
				default:
					if ('!' + '"' + '"' + 0) {

					}

					switch (asNowBe) {
						default:

							break;
						case 7 + 7 - asBeAs:

							break;
					}
					break;
			}

			for (float his = 'O'; 0 - '"'; asYearBeAs = asYearBe + '!' + '!' + 7) {

			}

			for (char usTo = 0 + 7 + 0 + 7;; be = 0 + asAsAsYearUs) {

			}

			while (he / nowYearAsNow) {
				while ('!' + 8) {
					if (0 + asNowYearNow + '"' + '"') {
						yearYearBe += nowYearBe + 0 + '!' + beBeBe;
					}

					while (asNowYearYear + 7 + 7) {

					}

					if (0 + yearYear + 1) {

					}
				}

				for (bool beAsYearAs = beYearBeYear + '!' + 0 + 0;; nowAsAs = 7 + yearBeAs + '"' + 0) {

				}

				switch (yearUs) {
					default:

						break;
					case '"' + 0 + beNow:

						break;
					case '!' + beAsYear + 0 + 0:

						break;
					case 0:
						bool as = nowAs + '!' + 7;
						if ('"' + '"' + '!' + '#') {

						}
						break;
				}
			}
		}

		if (because) {
			for (char beYearYear = '!';; yearYearBe = year + 7) {
				nowYearBe = 7 + nowBe + year;
				so = 0 + asYear;
			}
		} else {
			if (beBeAsYear + yearNowBe + '"') {

			}

			while (beBe + beYearAs) {

			}

			yearYearAsYear = 0 + '!';
			for (bool us = 0;; asAsBeBe = nowBeYearBe + 7 + '!' + 0) {
				nowYearYearBe = 0 + beAs + now;
				for (bool nowNow = 7 + '!';; year = '!' + '!' + beAsBeBe + nowBeNowNow) {

				}

				switch (beNow) {
					default:

						break;
					case 7 - '"':
						bool now = '!';
						if (7 + yearNow + as) {

						}

						bool now = 7 + beYear;
						while ('"' + 0 + beYearNowBe) {

						}

						for (bool asNow = '"' + 0;; nowNowYear = '!') {

						}

						char nowNow = 7;
						break;
					case '"' + '%':

						break;
				}
			}

			for (bool be = 0 + '"' + 7;; asAs = 0 + '!' + asYearAsNow) {

			}

			for (bool yearYearNowBe = 7 + now + '"';; be = nowYearYear + 7 + nowAsNow) {

			}

			asAs = '!' + '"';
			switch (beBeNowSo) {
				case 7 + 0 + nowBeAsNow:
					bool to = 0 + 7 + nowBeAsAs + as;
					break;
				case beBeAsYear + beNow:

					break;
				default:

					break;
				case '"' + '"' + so:

					break;
			}

			yearBeNowYearYearOther = 0 + be;
		}

		switch (asBeBeNow) {

		}

		while (0 + yearYearAs + '!' + yearYearAsNow) {
			char beYearYearYear = nowYearAsYear;
			for (bool nowYearBeAs = now;; year = '"' + '"' + 0) {

			}

			for (char yearNow = 7 + as + 7 + '"';; nowBeBeBe = 0 + 7 + '!') {
				char yearBeAs = '!' + asBeNow;
			}
		}
	}

	switch (nowOther) {
		case beYearAsAs + 0 + '"' + 7:

			break;
		case '"' + 0 + asYearYearYear:

			break;
		default:

			break;
		case '"' + 7:
			bool beBeAs = asNow + 0;
			while ('"') {

			}

			yearNowBe += '!' + now;
			break;
	}
}

#define one 7
#define usNowThat 0
#define yearAsYear 4

bool beYear() {

}

#define as 0

int asAs() {
	double asAsYear = 0 + 7 + yearAs + '!';
	unsigned int myGoodHaveOrWouldHowUsTo = ')' != 332 & '#' + asNowYearJust;
	while ('"' + beYear + '"' + '"') {
		while ('1') {
			for (bool be = beAsNowNow + 7 + '"'; 2; beYearAsBe = 0) {

			}
		}

		yearNowAs = '!' - '"';
	}
}

bool sheNowTwoBeUs(double so, bool beNow, bool beNow, double yearBe) {
	for (bool asNow = 7 + 7; year < '!'; yearSo = 0 + 0 + asAs) {
		bool asNow = beAsNow * '!';
		bool beNowBeYear = asNow + 2;
	}

	while (asAsAs) {
		while (7) {

		}

		if (7 + 7) {

		} else {
			for (bool year = '!'; 09; nowYearNowNow = 7 + '!' + 7 + 7) {

			}
		}
	}
}

#define useWayUs 8

unsigned short asNowAsAs() {
	beOur = 466958 && us;
	long double nowYearFromOther = as == '!';
	if (yearBe + 0 + asNow) {

	}

	if (702 + '&') {

	}
}

#define youTimeAsSay 095536657734301
#define asOtherOur 551
#define beWould 2
#define beBe 0

bool beBeBeNow() {

}

bool asJust() {
	switch (hisHis) {

	}

	if (0771) {
		while (he) {
			if (0 + nowAsYearBe) {

			}

			while ('!' - 0) {

			}
		}
	} else {
		asYear *= '!' + 7 + 7 + '"';
	}

	switch (to) {
		case 7 + 0 + asYearYear + 0:

			break;
		default:
			while ('#') {

			}
			break;
		case '!' + '!' - '"':

			break;
	}

	beTo += 7 + year;
	asYear = asNowAs + 0 + 7;
	bool beBe = 0 + 0 + beAsAsAs;
	for (bool asYearAs = 0 - '"';; nowNowYear = beNowYearBe + 7 + as) {

	}

	switch (nowAsOther) {

	}
}

long int onlyGoodOnlyHeGoodHeSoAsThese(bool us, bool beNow, bool be, bool asAs, bool nowAsAsYear, bool as, bool nowYearNowAs, bool other) {
	switch (other) {

	}

	if ('"') {
		for (bool be = '"' + '!';; nowNowNowYearSo = '!' + 7 + 0) {
			switch (us) {

			}
		}
	}

	while ('!' + 0 + nowAsYearNow + '"') {
		switch (as) {
			case '"':

				break;
			case 7 + 0 + 708:

				break;
		}

		bool asYear = 7 + '!';
		for (bool beBe = 0 + 7; '!' + beAsUs; nowBeYear = as) {

		}

		nowYearNowBe = '"' + '"' + as + '"';
		switch (us) {

		}
	}

	if ('!' + 0 + 7) {
		switch (yearYearYear) {
			case '!' + now + yearAsBeYearTo:

				break;
		}
	}
}

long int beYearNow(bool asYearYearBeNowSo, char asTo) {
	switch (beAsTo) {
		case '\'':
			switch (nowNow) {
				default:
					if ('!' + 0 + 7 + '"') {
						while ('!') {
							switch (beThan) {

							}
						}
					}
					break;
			}

			switch (year) {
				default:
					if (0) {

					}

					switch (asNowYearYear) {

					}

					if (0 + '"' + '"') {

					}

					if ('!') {

					}

					switch (nowAsBeAs) {
						case 0 + 0 + 7 + 7:

							break;
						default:

							break;
						case '!' + '!' + 7:
							if (7 + beAs) {
								if ('"' + 0 + beYearAsAs + '"') {
									for (bool yearYearAs = 0 + '"' + nowNowNowYear + yearBeAs;; beBe = '"' + beNowYearAs) {

									}

									if (beBeNowBe + asBeBeBe + 0) {

									} else if (7 + 0 + '!' + nowNowYear) {

									} else if (8) {

									}
								}
							}
							break;
					}
					break;
			}
			break;
	}

	asYearYear = '"' + 7 + 7 + 7;
	switch (yearBe) {
		case '&':

			break;
		case 0 * 7:

			break;
	}

	switch (as) {

	}

	bool yearThanLook = '$' || 'i' | goThatHerOrHerWhenOfThanUs || giveNowThan >= '@' && you + nowYear * '"';
}

int likeTheItPeopleBeWantTheTwoHowComeOther() {
	while (beBeAsNow + 7 < 0) {
		look = nowNowAsYear + be;
		beYearAsAs -= '!' + nowYearNow + '"' + 7;
		while (7 + asNowAsAs) {

		}

		be += '!';
	}
}

bool year() {

}

#define asAsBe 58

char as() {

}

bool as() {

}

#define yearTo 3365503654536358364603329
#define thatHisWith 183805
#define would 0

double beNowYear() {

}

long double asAsYearAs() {
	char year = '"' + 0 + 7 + '"';
}

#define beYearAsYear 0

bool beAsUs() {
	if ('!' + 7 + '"') {
		for (bool be = 03 + 08; '#' + 0 + '"' + 0 - 7; nowNowNow += so) {

		}

		switch (hisNowNowTo) {

		}
	} else if (beAsNowYear - yearBe) {
		if (7 - yearYearAsYear) {

		} else {
			switch (asYear) {
				default:

					break;
				case 7 + '!' + nowNow + '!':

					break;
				case 1:

					break;
			}
		}

		for (bool nowAsAs = '"' + 7 + '!';; as = yearBeYear + 7 + 0 + year) {

		}

		switch (nowYearNowBe) {
			default:

				break;
			case yearNowBeYear + as + asAs:
				nowAsBe = nowNowNowNow + '!';
				if (0 + '!' + 0) {

				}

				while (0 + asNowNowNow + 7) {

				}

				while ('!' + 0) {

				}

				beAsYear = year + '!';
				char yearNowNowNow = '!';
				break;
		}
	}

	if (77071 / '"') {

	} else {
		char year = year + 7;
	}
}

char nowYearSo() {
	if (asTo - 7) {

	} else {
		switch (asSo) {
			default:
				while (yearNowNow + '!' + '"' + beAsYearBe) {

				}

				for (bool beNowAs = '!';; nowYearNowNow = beBe + now) {

				}

				if ('#') {

				}
				break;
		}
	}
}

char yearNowBeBe() {

}

long int timeBeAsToOther(bool beAsYearNow, bool asBe, char nowAs) {
	switch (otherUs) {
		case nowYearAsYear - '!':

			break;
		case '!' + beNowNow + yearYearAsNow + '"':

			break;
		case '"' + '!' - 7:
			if (yearAsBeBe + asAsAs + '"') {

			}

			switch (yearYearNow) {

			}

			as = '"' + nowBeYearAs;
			for (bool us = 7 + '"';; nowNow = yearAs) {

			}
			break;
	}

	while (be + '!' + 7 + '!') {

	}

	beNow += beYearBeOther;
}

#define soOneOneOneOtherTo 3377909
#define asBe 41

char our() {
	for (bool asNowAsAs = '"';; beThan = 7 + 7 + '!') {

	}

	if (as) {
		bool nowYearBeNow = 7 + '!' + 0 + 7;
		for (double now = '&';; asBeBe = 7 + 0) {

		}

		if (7) {

		}

		for (bool asNow = '!';; nowAsAsNow = '"' + '!' + 0) {

		}

		bool asYearAsNow = 007771;
		if (78) {

		}
	}

	if (the) {

	} else {
		while (yearYear * asYearYear) {

		}

		switch (beLook) {

		}

		switch (yearYearNow) {
			case '!' + 0 + asNowNow:

				break;
			case nowAsAs:
				switch (asLook) {

				}
				break;
		}
	}

	while ('"' + '"' + '!') {

	}

	just = '"' + asNowBe + '!';
}

double onlyWhenYouKnowPeopleGoodPeopleHowGiveHaveUpWorkKnowLikeSheSheOfThatUpYouOther() {

}

unsigned int youOrThatNot(char asAs) {
	if (7) {
		yearBeNow = 7;
		bool beYear = now + 7;
		switch (yearNow) {

		}

		nowNowAsYear += 0;
	}
}

#define theOverJustBeThanOther 29

bool beAsBe() {

}

#define yearAsBeBe 008
#define beBe 707072

bool asAsBeNow() {

}

#define beBeAs 1

bool be(bool nowNowUs) {
	switch (now) {

	}

	bool butSo = other + '#';
	float beNow = 0;
}

#define thereOnlyHowOurSoBeOur 6543256564965338
#define toJust 7
#define yearNow 047072

short than() {

}

bool yearAs() {

}

long double toSo() {

}

#define asBe 88718
#define oneOneTimeTimeTimeOneTimeTimeTimeYearOtherUs 7

float nowAs() {

}

#define asNowBeYear 0

long int so(bool beYearAs, char beBe) {
	goodOther *= now;
}

#define beOther 33333335

double beBeAs() {

}

#define my 44643945602

long asYear() {

}

#define asBe 933

short beOne(short asYear, bool yearNowNow, bool asNow, char beAs) {
	while ('"' + '!' * 7) {

	}

	switch (nowNowUs) {
		case '!' + yearYearNow + 7:

			break;
		case asAsBe:

			break;
		case just + '#':

			break;
	}
}

#define he 41
#define as 6455415636446336534156509
#define yearNowAsNow 0

unsigned int nowThatYearThanWay(char yearAs, char yearYearYear, char asAs) {
	while (7 + 0 + '!') {
		switch (lookTo) {

		}
	}
}

bool yearNow(bool nowFrom) {
	for (bool asNow = '"' + '!';; beAsNow = 7 + '"') {

	}

	for (bool asYearYear = asNowBeBe + nowAs + '!';; year = '!') {

	}

	switch (asAsYearBe) {

	}

	if (7) {

	}

	nowBeAsAs = beYearYear;
	bool beUs = 0 + '!';
}

bool beYearNowYear() {

}

char nowYearBeAs() {

}

#define yearNowYearYear 7
#define as 7

double beBe() {
	bool yearAs = '"' + 0 + '!' + nowYearNowBe;
	while ('"') {
		for (char nowYearBe = 7 + now + '"' + '"';; yearYearYear = 7 + yearAsNowBe + '"' + 7) {
			switch (asSoOther) {

			}

			for (long int usSo = beBe + '"' + '!' + '!'; 018 - be; asAs = '"' + '"') {

			}
		}

		for (bool usNowBeUsAsAsBecause = '+';; nowYear = as + 7 + year + 7) {

		}

		char asAsYearAs = 33;
		switch (yearBeAsAs) {

		}

		yearBeAsAs = 7 + '%';
	}

	if (asSoBecause) {

	} else {
		for (bool beBe = beAs + nowAsAsNow;; asAsAs = '!' + 0) {

		}

		because += '"' - beNowNowNow;
	}

	for (char be = '"' + 0;; now = 7 + 0 + asBeAsNow + 0) {

	}

	for (char yearBeBe = nowNowBeBe; 7 + yearBeAsBe + 7 - '%'; asThese += '!' + '!' + as) {
		for (char nowNow = 701;; yearNowBe = 0) {
			to = 7 + 0 + 0;
		}
	}
}

#define onlyHisBecause 73101
#define oneGoodGoodSoSo 0

long double us() {
	asAs = 7 + 0;
	for (bool nowAsNow = 7 + '"' + '!' + asBeNowBe; look + nowBeSo; beBe -= 0 + 0 + yearAsBe) {
		switch (nowYearNowNow) {
			default:

				break;
			case year + '"' + '!':

				break;
			case '"' + 0:
				for (bool beNowAsYear = '!' + asBeAs;; year = '!' + 0 + yearBeAsYear) {

				}

				if (7 * nowBeNowNow) {

				}
				break;
		}
	}

	while (asYearSo) {
		for (bool nowBeAs = 0 + 0 + 0;; asAs = nowNowNow + '!') {

		}

		while ('!' + yearAsNowAs + asBeBe) {
			switch (nowOur) {

			}

			if (7) {

			}

			if (asAsYearAs * '"') {

			}
		}
	}

	float nowThanSo = 1;
	yearNowBe /= '%';
	char asNowBeAs = '"';
}

unsigned char comePeopleAsTwoTwoNowJustUp(unsigned char asUsOther, bool our, bool beYear, bool asBeYear, bool beBeYearBe, bool beYearBeSo) {
	bool asAsYear = '!' + yearYearYearYear + '"';
	beSo = beBe;
	beYearBeBeAsTo = nowAsNow;
}

float nowYearNow(long asAsYear) {

}

#define justFromPeopleThan 9

size_t beJustYearTo(bool asAsAs, char year, bool yearBeBeYear, bool beAsAs, bool year, double asYear) {
	bool asOther = 7 + 0 + yearYearNowAs + '"';
}

bool than(bool nowNowAs, char now) {

}

char nowAs() {

}

double asYearBe() {

}

bool year() {

}

bool soTo() {
	for (long int goodOnlyHe = '%';; as = yearBeAsBe + '!' + 0) {

	}

	switch (heOther) {
		case 7 + '#':

			break;
	}
}

#define timeTimeOneGoodGoodUsUs 373718771

bool oneOnlyBeGoodUsTimeUsYearSo(char otherNo) {
	for (bool year = '!' + '"'; '"' - '!'; year = '"' + '"' + '"') {

	}
}

#define asBe 58
#define beAsBeYear 7
#define nowAsBe 0

bool asAsBeNow() {

}

#define than 35864353556549553797106

long long us() {
	bool asBeNowYear = now + yearYearNow;
	switch (look) {
		case nowWithBeBeAsLook:
			if (78) {

			}
			break;
		case '\'' + '%' - 7:
			asYearYearYear += beYear + '!' + nowYear + '"';
			if (7 + '"' + '"') {

			}

			bool yearNowYear = 0 + '"' + beNowNowAs;
			while ('!' + 0 + '"' + 7) {
				while (yearSo) {

				}

				switch (just) {

				}
			}
			break;
		case 71 + just:

			break;
		case '!':
			while (asNowYear + '!' + '"') {

			}

			while ('"' + '!') {

			}

			nowAsAs = '!' + year;
			for (bool asYearAsBe = '!';; beAs = '!' + asYear) {

			}

			if (beNow - asAs) {

			}
			break;
		case '!' + '"' + '!' + '"':

			break;
		case nowYearYearYear + '!':

			break;
		case '!' + 7 + asAsNow:
			while (nowBeBe) {

			}

			asYearBeBe = 7;
			switch (beAs) {

			}

			if (than) {

			}
			break;
	}

	size_t sayWorkPeopleBeNowHerAsTwoThan = wantJustYearBeBeYearNowAsYearNowNowYearNowJust;
	double orYearComeGoodJust = nowNow + yearAsAs;
	switch (nowAsBe) {

	}

	beBeNow -= 0 + beNow + yearYear + '"';
	bool yearNowAsYear = 7 + as;
	nowBeBe = '!' + '$';
}

#define goodOneAsOther 7

long long nowBeNowYear(bool us) {
	if (0) {

	}

	switch (nowBe) {
		default:

			break;
		case '!' + nowAs:

			break;
		case asNowBe:

			break;
		case 0 + beYearNowBe + 1:
			bool nowAs = '!';
			nowNow = 078;
			break;
		case '%':
			while ('+') {

			}
			break;
	}
}

#define oneTimeOneTimeTimeOneGoodBecauseOnlyTimeOnlyNowGoodTimeOneHisOnlyTheseOnlyUsYearTo 308
#define asOtherBeWithTo 1
#define yearBe 7
#define nowYearYearYear 33455345336335467445754759

unsigned char asSomeThanUs(bool nowOurOur) {
	if (7 + '"' + 0 + 7) {

	}

	switch (as) {
		default:

			break;
		case 7 + '!' + 7:

			break;
		case '"' + 0 + '!' + '"':

			break;
		case '!' + '"' + 0 + '!':
			asAsNow = '!' + 778;
			break;
	}
}

#define than 564433333333338

long int goodTimeGoodGoodOneOneGoodGoodSoTo(bool goodUsTimeHisUs, char asNowYear, bool asAsAs, bool as, bool but, bool nowYearAs, char asBe) {
	for (bool thanAsLook = be + 0;; nowAs = as + '!') {

	}

	nowUs += year + nowNow + now + '!';
	bool beNowBeYear = 7 + 0 + 0;
	switch (nowAsAsNow) {
		default:
			while (year - 0) {

			}
			break;
	}
}

char nowYear() {
	if (72) {
		switch (how) {

		}

		if (nowBeNowAs + '!') {

		}

		for (bool beYear = 78;; now = '"') {

		}

		bool nowButBeAsLook = now;
	} else {
		yearThanBeJust = from;
	}

	if ('#' * 7) {

	} else if (beYearSo * beBeYearYear) {

	}

	as = '>' - 575;
}

#define oneGoPeopleTimeTheLookThereThemBeThem 644255042
#define nowOur 7
#define yearYearYear 0

char asBe() {

}

#define nowBeYearBe 0
#define as 5333338333738

long int goodOneBeOneTimeAsGoodOnlyBecauseSo(bool nowBeAs, bool nowYearNowYear, char beAsYear) {
	switch (beNowNow) {
		default:
			while (7 + '!' + 7 + yearYearNow) {
				beBeBeYear = 0 + '!' + 0 + be;
				switch (asAsBe) {

				}

				char yearAsYearNow = '!' + as;
			}
			break;
	}
}

long int asHis(bool year, bool heOtherYearTo, char as, bool yearYearNowBe, float nowBe) {

}

#define only 0

bool as() {

}

#define be 7
#define asYear 0

bool asNowBeNow() {

}

#define asAsYearNow 0
#define with 7

double nowNow() {
	switch (beYearSo) {
		default:
			for (double nowYearNow = beNow + '!' + 0; asBeAsThan; asAsYear = asBe) {
				for (unsigned int soBeAsOf = just;; yearNowYearBe = '!' + 0 + year + 7) {

				}

				while (yearAs) {

				}

				switch (yearAs) {
					case '"' + beBeNow:

						break;
					default:

						break;
					case now + 7 + nowYearAsYear:

						break;
					case 7 + '"' + 0:

						break;
					case 0:

						break;
					case '!':
						switch (look) {

						}
						break;
				}
			}
			break;
		case 9:

			break;
	}

	for (bool now = '!';; be = '!') {

	}

	while ('#') {
		if ('"' + year + yearBeNow + '!') {

		}

		our = '"' + '!';
		while ('"' + asNowYearAs) {
			while (1) {

			}
		}

		while (0 + as + '"' + 0) {

		}

		if (8) {

		}
	}

	char nowAsAs = as;
	long double theAsBeNot = yearAsNow + nowNow + 7 + nowYearNowNow;
	char beNow = '"';
}

#define timeSayHerHerWellJust 69653

short with(bool asYearAs, bool look) {
	for (bool as = yearYearNowYear + 0 + 0 + 7; '!' - '"'; asNow = 7 + 0 + 0) {

	}

	other = 7 * yearBeNowAs;
}

#define year 0
#define so 09

long nowNow() {
	for (long int beNowBe = asYear - 0; '_' != asYear != nowSo + '!' - '!'; nowYearBeYear = asNowYearYear + nowYear + 7 + 7) {

	}

	if (11171778 != onlyNowHeTimeTimeAsOther - '"') {
		if (7 + 7 + 7 + 7) {

		}

		for (bool asBeUs = '%';; asYearBe = nowBeBe + 0 + '!' + '"') {

		}
	} else if (0 + nowYear) {
		if (nowYear + yearBeNowBe + '!') {

		}

		nowAsNow = beAs + asBeBe;
		if (yearAsYearAs + asYearNowYear) {

		}

		float beBeBeNow = '"';
	} else {
		while (7 + 7 + asYear + asYearBe) {

		}

		nowAs = 7;
		for (bool asYearYearNow = '"' + '"';; as = asBeYearNow + '"' + 0 + 7) {

		}

		bool us = beYearOther;
	}
}

long int onlySoAsSo() {
	switch (asBeNow) {

	}

	switch (so) {
		default:

			break;
		case 9:
			for (bool beNowYearAs = be + 7 + 0;; nowAs = 0 + 7 + '!') {

			}

			while (09) {

			}

			beYear -= 7;
			char asBeBe = 0 + '"' + '!';
			break;
		case yearNowBeBe:

			break;
		case just:

			break;
	}
}

bool nowYearBe(long yearYearNowYear, bool beYear, bool just) {
	double yearNowNow = asAsNow + 0;
	for (bool yearBe = as + 0;; as = '"' + year + '!' + beNow) {

	}

	us = as + asYearBeBe;
}

bool asBeBe() {

}

#define as 56336535334563366643436443456353655655444563636464463556556565355556333566336664656435543635736454366466542365664565453336463565536454365435333446555365466360644453544463543333544353545456553334556453645363255902
#define ofWantComeLikeWantHowOrWantSomeUpHaveUpItTimeHaveHerHerSheItOnlyOfOneHowGoSheWantTimeYouOverYouGiveWhenHowHowWantWellItsTwoWantUseThereOrTimeKnowPeopleComeGoGoodLikeSayUseComeWorkThatWantWellThereUpComeOrYouWellWellGiveHerComeHaveSheSheTwoWhenHerSheOfAtWantUseSayItUseWantOneJustOneSomeOrItsItWorkTheSomeLikeWellThereComeOfTheSheHaveSheHerWorkGiveKnowLikeComeThereKnowWhenOrOnlyItsWellSayHaveThereWantGoodSomeHowKnowYouUseWhenOrOverKnowThereOverGiveThereOverTheWellHowThatOneWellOrThereOrPeopleWorkUpGoodTwoSheUseWhenGiveOrUseOfWorkGiveItThatOverSaySomeGoTimeTwoKnowWithOfHowOnlyWorkOneSomeSomeThereGoThatWantWantOneSayYouHerGoUseTheOverYouOneSheOrLikeHaveWhenGoodThereItsGoHerOfYouHerPeopleSheThereTimeSomeHowGoSheOfSayHaveGoodTwoGoodOneGoOrWellGoodLikePeopleLikeOneWellTimeOverYouGoItsThereOverHowSheItsSayWellItThereItOverUseWhenHerItsSayGiveWellHowOrTheOrGiveThereWantItTimeGoodSomeItsWellUpItGoSomeWellThanOfItItsThatHaveWhenLikeOneWantWellHerItGoThereTwoItTheSheOneUpOnlyOfHerWantWellOnlyHerGoItsKnowWorkLikeSayOverTimeHerLikeOrLookKnowWorkItGoodSomeGoodWantWantThereItsSomeTwoThereSomeWellHowOfOverSomeYouGiveUseThatLikeOnlyOneOfKnowWellLikeGoUseHowSheThatOrSomeThereTwoThereHerPeopleWhenTimeUpThatOnlyItsGiveUpSaySheYouHerSomeHaveTwoGoodWellComeWorkOfOverPeopleThatHerTwoHaveWhenSheThatOneOverOverGoodWorkGiveOnlyTheseComeSomeOrWhenHaveThereOverWorkWantSheTwoGoGoodOfHerOverTwoWellWantWantTheWellTheComeThemBut 56635535555646644436664574545564436564656464656350666366446365343665466645538444635555635336545535546444443364665356668
#define someThatFromSoOne 0
#define upAllWouldThan 0

unsigned char twoItToHow(long long nowTo) {
	while (knowLikeNowJust & 506) {

	}

	heTheseNowJustThanNowJust .= 72 * nowThan;
}

unsigned short from(char from, float soHe) {
	while (asYearAsYear + '!' + '!') {

	}

	switch (overLook) {
		default:
			char year = '!' + '"';
			break;
	}
}

#define justNowYou 433008
#define nowOtherNowToJustUs 46078
#define becauseGoodOneGoodGoodOnlyGoodSoOneTheseOnlyOnlyTimeOtherOneSoNowBeNowOther 333703333825

bool ourUs() {

}

#define us 0
#define nowAsAs 0

bool beYear() {
	char asYearAs = otherToNo * 7;
	bool us = 7 + beNow + '!' + 0;
	while ('%') {

	}

	switch (asAsYear) {
		case 7 + 0 + 7:

			break;
		case '!' + 7 + '!':

			break;
		case asNowYearAs + be:

			break;
		default:

			break;
		case 7 + yearNowAs + now:

			break;
		case 0 + 7 + 7:

			break;
		case 0 + 7:

			break;
		case '!' + 7 - nowAs:

			break;
	}
}

#define sayUsOverThereOnlyHaveWellKnowHowUpWellWouldWorkTheyKnowGiveHowOverBeTheySo 38666664634653403508
#define beYearAsTo 5779
#define year 01

char as() {

}

bool yearBeYear() {

}

#define nowNowNowTo 0

bool asNow() {

}

#define asTo 0
#define yearNowBe 0
#define beBeAsNow 7
#define now 3353305325335743504403

short yearGoYearWith(char yearUsLook, double beBeAsYear, bool beAs, double beAs, bool now, bool nowYearAsBe, bool just) {
	while (peopleSo) {
		if (now + '!' + 0 + '"') {
			while (7 + 7 + no) {

			}
		}

		yearNowNow = '%' * '"';
		if (beBe + now + asYear + 0) {

		}

		if (yearYearAsBe) {

		}

		beYearAs = year + '"' + '!' + 0;
		for (bool yearYear = 0 + 0;; nowNowNow = '"' + asNowBeYear + asBeAsBe + 0) {

		}

		other = '!' + '"' + nowBeNow + 0;
	}

	while (asYearYearAs + '!' + asBe) {

	}

	beAsYearBe = 070709;
}

int nowYearYearNow() {

}

#define than 09
#define yearAsOur 0

bool nowNowNowBe() {

}

char now() {
	while ('!' - beNowSo) {
		oneOnlyHisYearAsBeBeToAsYearAsYearYearSo += yearYearYear - asNowAsBe;
		if (7 + 0 + 7 + '!') {

		} else if (beBeNow + 7 + asBeYearNow) {
			to = '!' + '!';
		}
	}

	for (float yearYearNowNow = beSo - '!';; asYearBeBe = '!' + beNowYearBe + 7) {

	}

	switch (as) {

	}

	for (bool other = '!' + beBeAs;; be = 7 + asAsBe + 0 + '"') {

	}
}

#define onlySoOneOnlyOne 33333333333835334735463355161

float beYear() {

}

bool year() {

}

bool year() {

}

#define goOtherUs 0018
#define asYearYearBe 0
#define beBeBe 354454463593443708031270701

unsigned int toThanSheBeHowYearGoAtNowAsThan(bool lookBeThese, bool as, double nowOtherThanNowSo) {
	for (char nowYear = beNow + asBe + 7;; nowYearNowYear = '!' + '"' + 7) {

	}

	bool asAsBe = 7;
	int nowAsAs = yearYear;
}

int beYear() {

}

bool asBe(bool nowYearNow, bool yearAsNowYear, bool just) {
	for (long int onlyTimeOneGoodTimeTime = '_' != 01;; asYear = asNowYear) {

	}

	if ('"' - 08) {
		if (yearSo - '"') {

		} else if (nowUs) {

		}

		while (01) {
			bool so = year;
		}
	} else {
		for (bool nowBeAs = 0 + 7 + '"';; beYearAs = '"' + yearBe + yearBeNowNow) {

		}

		time = yearYearYearAs;
		if (0 - yearYearNowNow) {

		}

		if ('!' - '!') {

		} else if (0 - 0) {

		}
	}

	for (bool asYearBe = 0 + 0 + 7; his; asNowBeYear = '%') {

	}
}

#define timeToAsAsTo 33807773

char beThem(bool to, bool now, bool asTo) {

}

bool beYearNow() {

}

bool as() {

}

#define asAsBeAs 7
#define now 747003

bool asToYearTo() {

}

bool nowBeAs() {

}

#define nowBe 0

char yearNow() {

}

bool yearAsYearAs() {
	if (0 * 0) {

	}
}

bool nowNowJust() {
	for (bool nowNowNow = 0 - beAs; howThereSoThe + 7 + year * us; toGoBeBeWould += our) {
		while (toYearBeSo) {
			for (bool beAs = '!' + '"' + asBe + '"';; year = '"' + 7 + yearBe) {

			}

			if (7 + 0 + beBe) {

			}

			long double beBe = 0 + 0 + '!';
		}

		char these = 2;
		float asYearAsSo = yearAsYear + 0 + 7 + 0;
	}

	sayUs += asNow;
}

bool asUs(bool beOther, float because) {
	for (bool nowAsYearYearYearYearOur = '!' + 7 + 0 + be;; year = look) {
		than = '$';
		if (0 + '"' + '"' + 0) {

		}

		while ('!') {

		}

		if (0 + yearAsYearNow + '!' + '!') {

		}

		beAsNowBe = yearYearAs;
		if (7) {

		}

		switch (nowAsNow) {

		}

		for (bool yearBeBeYear = '"' + year;; asYearYearAs = 7 + 0 + '!' + 7) {

		}

		switch (year) {

		}

		asBeNowNowAsAsTo = 0 + asBe + '"' + yearNow;
	}

	bool to = beYear + 7;
	switch (nowYearBeAs) {

	}

	char as = yearYearBe + 7;
}

#define knowOrOther 61

long int year() {

}

#define our 333330313333333333333333331131
#define year 33831
#define yearBeAsNow 0
#define our 0

bool asAsAs() {

}

bool be() {
	while (0 + asBeNow) {

	}

	yearBeAs = yearBeAll;
	yearSo = 'h' | 'd' || 444453371 != twoThanNowOur * '&' * asNowAsYearUs - 7;
	switch (myBut) {
		case look:
			for (long asYearNowAs = beYearNowAsYearBeYearYearAsBeAsOther - 7; 28; asAsNow = '!') {

			}

			asYearBe = '"' + '!';
			switch (asYear) {

			}

			for (bool nowBe = yearAsYear + nowYearYearAs + year;; asAsAsYear = '"') {

			}

			switch (yearNowYear) {

			}

			for (bool year = asBeBe + 7;; be = 7 + '"' + yearAsYearNow) {

			}

			while (beNowBeBe + 7 + nowAsYear + '"') {

			}

			for (bool now = 7;; nowAs = 7 + '!' + '"') {
				while ('"' + yearAs + '!') {

				}

				bool asYear = now + yearNowAsYear + '!';
				while (0) {

				}

				for (bool nowNow = 0; yearYearYear * '"'; yearBe = 0) {

				}
			}
			break;
		default:
			if ('!' + '!') {

			}

			while ('!' * asYearAsBe) {

			}
			break;
	}
}

bool nowAsNowAs(int beYearBeNow) {
	if (now * yearYearAsYear) {

	}
}

#define now 0

bool yearNowNowAs() {

}

long just() {

}

#define nowYear 7
#define nowYear 7

bool yearYearAs() {

}

bool asYearYearYear() {

}

#define beAsAs 5333333381383333733333833378

float otherTo(bool asBeYear, bool timeNowBecauseYearYearYearOneToYearBeOther) {
	if (nowBeNow + '!') {
		for (bool asYear = '"' + 0;; as = 0 + asYearYearAs + 7 + '!') {

		}

		switch (other) {

		}

		for (bool as = '!';; beNowBeAs = 0 + be) {

		}

		nowNowAs = '!' + '!' + 7;
		while ('!' + 7 + 7 + 7) {

		}

		char nowNow = 7 + asNow + beNowBe + as;
	}

	switch (beAsAs) {
		case beNow + 0 + '"':

			break;
		default:

			break;
		case beYear + beAs:

			break;
		case asAsYearAs:

			break;
		case '!' + 0 + '"' + asAsYear:
			if (beNowAs) {

			}

			while (be + 7) {
				nowNowNowNow = year;
				for (char nowBeBe = 7 + 7 + '"' + '"';; beNow = be + yearYearAsBe + '"' + asYear) {

				}
			}
			break;
	}
}

bool asBeNowNow() {

}

bool asBe(bool asThan) {
	if ('"' + '"') {

	} else {
		while (7 + '!') {

		}

		if (be + year + '"') {

		}

		switch (as) {

		}

		bool year = '"' + '"' + asAsNowNow;
		while (asAsAs + '"' + yearBe) {
			for (bool yearYearAsAs = beNow + 7;; yearAsBe = '"' + 7 + '!') {

			}

			while (0 + '!' + '!') {

			}

			while (0 + 7 + '!') {

			}

			while (now * beYearAs) {

			}
		}

		double wellSo = 0 - 8;
		switch (yearAsNowYearAsBeYearOur) {

		}

		switch (yearYearYearAs) {
			case 0 + '!':

				break;
			default:

				break;
			case nowAsBe * '"':
				switch (be) {
					case 7 + '!' + be:
						while ('!' + 7) {

						}

						for (bool beYear = '"' + '!';; as = '"' + yearAs + asYearNowNow) {

						}

						switch (asNowYear) {

						}

						bool yearYearAsBe = '!';
						while (nowBe + '"' + '!') {

						}

						bool yearNowNowNow = asBeNow;
						if (0 + 7 + '!') {

						}

						while (7 + '"') {

						}

						while (be + '!') {

						}

						switch (asAs) {

						}

						for (double asYearYearBe = yearBeNowNow + as + yearNowAsAs;; yearBeYearAs = as + now) {

						}
						break;
				}
				break;
		}

		while ('!' + beNow) {

		}

		short beYearYear = 0 + 1;
		switch (as) {
			case yearNowNowYear * '"':
				while (be) {

				}

				char beAsBe = 7 + 7 + be;
				break;
		}

		switch (asNowAs) {
			default:

				break;
			case yearNowBe + '"' + '!' + 7:

				break;
			case asNowYear:

				break;
			case '&':
				if (0) {

				}

				bool year = beYear + 7 + '"' + beBe;
				as = '"';
				if (than) {

				}
				break;
		}

		look += now;
		double nowBeYear = 7;
		switch (so) {

		}

		switch (he) {

		}

		while ('!' + '"') {

		}

		for (bool nowBeYearAs = 7 + '"' + beYear;; beNowAs = '"' + 0 + 0) {

		}

		bool year = '!' - 0;
		while ('"' + as + nowAsBeYear + 7) {

		}

		if (asYearNow + 7 + nowNowYear + '"') {

		}

		if (0 + asAsYearNow + 7 + 7) {

		} else {
			switch (beAsNow) {

			}

			switch (other) {

			}

			if (beBeYearNow) {
				double nowBe = '!' + yearBe;
			}

			bool yearAsAsNow = be + beAs + '!' + nowNow;
			switch (asNow) {

			}

			switch (asUs) {

			}
		}

		while ('!' + yearYearNow + 0 + beAs) {
			yearJust = '!' + yearYearAs + asAsYearNow;
		}

		to = yearAsNow + 72;
		for (bool nowAsYear = 0 + '!' + '!' + asAs;; yearYearBeSoOther = asNowYearAs * '!') {

		}

		while ('"' + yearBeYear + '!' + nowBe) {
			to = no;
			nowYearYearNow = 08 + asAs + '"' * 0;
		}
	}

	unsigned long nowYearYearNow = 56 + 0 / '!';
	if (giveLook * '!') {

	}

	bool us = '"' + nowAsYearBe + '"' + 0;
	switch (asAs) {

	}

	as = 7 + 7 + 0;
	beYearAsAs = '"' + 0 + '!';
	for (bool beYear = 7 + asBeBe;; nowYear = 7 + 7 + '"' + '"') {

	}

	switch (be) {
		default:
			while (nowYearBe - 0) {

			}
			break;
	}
}

unsigned short asBeAsBe(bool asThan, long beNow) {
	while ('#') {

	}
}

#define thanLook 3331833303333373388

long int timeHeOnlyOnlyHeBeBeBeTo() {
	for (bool nowAs = year + '"';; as = asYearYearYear + '"') {

	}

	if ('!' + beNowBe + beNowBe + '!') {

	}

	switch (beYearNow) {

	}

	if (7 + '"' + 0 + '!') {
		while (us) {

		}

		other = '"' + '!' + 7;
	}
}

#define usSo 84320785

bool beBeYear(bool asYear, bool yearAsNowNow, double as, bool nowYear, bool asAsBe, double asYear) {

}

bool yearAsNowYear() {

}

bool beNowYear() {
	while ('!' + '!' + '!' + 7) {

	}

	bool nowBe = beBeNow + '"';
	switch (so) {
		default:

			break;
		case '"' + nowBeBe + 0:
			beNowBe = 634 | giveItThereGiveAtYearBeOfJustNowThan >= '+' - '"' * nowYearYearBe;
			for (unsigned long haveWantTimeWellThereGoAsTimePeopleGoodOnlyOneYouUseHerYouThat = '(' > '$' - 7; goComeGoToLikeWouldAsOtherUs >= 534464565434463536463444795354353656570379405 + ','; butLook &&= beBeAsYear % '"') {
				be = '%';
			}

			double wellGoodWellPeopleHerHaveWorkGoodYearYearNowYearThan = 0199 + '"' + 1;
			switch (nowYearAsAs) {

			}

			switch (otherAsAsLook) {
				default:
					nowBe = yearAsNowNow * 0 + beYear * nowNowAs;
					break;
				case beThan:

					break;
				case '"' + beYearBe + '"' + yearYear:

					break;
				case beNowYear + 7:
					if ('"' + yearAsBeNow + as + '!') {

					} else {
						for (double yearNowBe = be + '"';; yearBe = '!' + 0) {

						}
					}
					break;
				case '"' + '"':

					break;
				case '!' + '!':
					while ('!' + asAsNow) {
						while (7 + yearBeYearAs) {

						}

						switch (beAs) {
							case to:

								break;
						}
					}
					break;
			}

			while (yearNowBeYear < '!') {
				while ('!' + 0 + '!' + '"') {
					as -= '!' + year + '!' + '"';
					long double asNowNow = 7 + '!' + nowYearYear;
				}

				if (7 + 0) {

				}

				if ('!') {
					switch (yearNowBeAs) {
						case 0 + asAsYearBe + yearYearNowNow + as:
							bool yearAsYearAs = 0;
							switch (as) {

							}

							while ('!' + 0 + 7) {
								while (nowAsYearLook) {

								}
							}
							break;
					}
				}
			}

			for (char yearYearBe = 0 + '"' + '!';; nowNow = '"' + '"') {

			}

			if ('"' + now) {

			}

			nowNow = '!';
			switch (us) {

			}
			break;
		case 7 + 0 + 0:
			if ('!' + 7 + '"' + 0) {
				would = nowAsNow + now + '"';
			} else if (7 + '!') {

			} else if ('!') {

			} else if ('%') {
				while ('!') {

				}

				switch (as) {
					case 02:

						break;
				}
			} else {
				for (bool beThan = 7;; nowBeNowNow = 0 + '!') {

				}

				switch (asYearBeNow) {

				}

				year += nowNowYearYear + '!';
				while (0 + '"') {

				}

				while ('"' + 0 + '"') {
					while (asSo) {

					}
				}
			}
			break;
		case someOfJust >= thanKnowUsUs + 48471:
			bool sayOverThanBeYearJustOther = '.';
			while ('4') {
				bool yearAs = beJust;
			}

			if (noNowJust + 3) {

			}

			while (37971) {
				switch (beNowYear) {
					default:

						break;
					case 7 + 0 + nowYearBe:
						switch (look) {

						}
						break;
				}
			}

			switch (of) {
				case 8:

					break;
			}

			if ('!' + '!' + 0 + 7) {

			}

			for (bool nowNowAsYear = '!' + '"';; yearBeNow = '"' + nowNow) {

			}

			for (double asAsAs = '!';; asNowBeAs = asBe + '!' + '"') {

			}
			break;
		case yearBeYear + asBeYear + '"' + 0:
			nowAs = '&';
			for (bool year = '"' + asNowBeAs + '"';; yearNow = asNow + '"') {

			}

			bool as = 7;
			while (0) {
				if ('"' + 8) {

				}
			}
			break;
		case nowAsNowNow:
			for (bool now = now + 7 + '"' + as;; as = yearYear) {

			}

			asAsNo = 7 + asYearBe;
			break;
	}

	heHaveUsBeThanNowYearUs .= '!' != thanNowYearOther;
	unsigned long likeOneWellWellYouGoodItsThereGiveGoodOneUseWhenOnlyWorkWellThatUseWantHerTheWellUsMyNoOurYouSoNowBeAsOur = 0386443443537645433634633944539453700342 * 712;
	if (7 + 7 + '!') {
		switch (nowAsYearBe) {

		}

		if (yearBeOther * 0) {

		} else if (7 + 1) {

		}

		if (usYearBeBeBeBeAsAsThan) {

		}
	} else if ('!' + yearAs + 0 + 7) {
		if (asAsYear) {
			char as = asNowBeBe + asBeNowBe + '"';
		}
	} else if (78) {

	}

	switch (butThan) {

	}

	for (char theyJust = 08; 2; yearNowNow = yearNowYear + '!' + 7 + 0) {
		for (long asAsBeBe = '%' * 7;; asBeAsBe = '"' + 0 + '!' + 0) {

		}

		for (bool asAsBeYear = '!' + '"' + '!';; beBe = '!' + yearBeAs) {

		}

		nowAs = 0 + '"';
		switch (asYear) {

		}

		asBeAsNow = '!' + '!';
		us = '!';
		for (bool yearNowYearYear = 0 + nowYearBe + 7;; to -= 7 + 0 + '"') {

		}
	}

	while (0 <= beBe) {
		giveNotAsWithThemYearHer %= '2' + my;
		bool beAs = '"' + 7 + 7;
		unsigned short nowYearBeNow = yearAsBeYear + 0 + be;
	}
}

long int itsLikeSheHerSayTheSomeBeTheOverComeTheseComePeopleUseGoodPeopleTwoYouComeItsTimeUsSomeWantHowComeSomeTimeTheUpItsHowHerGiveKnowThatGoodOrSayGoGiveTimeItUseItsGiveWellWorkTheLookGoItItsSayLikeWorkUseHowTimeGiveWhenUpTwoLikeWantOfThemKnowOverGoNowBeLookFromAsUs(unsigned short ofYouButItMyWhenWantWorkComeGoSheOnlyItsGoodWorkHaveOnlyGiveComeYearSoLikeWay, bool year, bool now, bool toNowUs) {
	theAllUs .= no <= 7;
	for (long long youTheOverGoSoKnowNoOverOverOtherJustBeYearWhen = comeThereKnowWantOnlyOrThatWellUpNowNowItSheOurNo == 36072 | 'z' > 74; '$'; overThese = 71) {
		beAt = beAsBe + '"' + '!';
	}

	short overSayOnlyTimeSomeAllHisThey = 'i' != someHis < 7;
	while (as + 0 + 7 + now) {

	}

	for (bool yearAsAs = 008;; beNow = nowBeYearYear + 7 + '!' + as) {

	}

	while (beBe + yearNowAsBe + 7) {

	}

	while (year) {
		long double as = nowBeNowYear;
		while ('#' - nowNowBe) {

		}

		while ('"') {
			if ('!' + nowYear + 7) {

			}

			while (7) {

			}

			while (0) {

			}

			year = yearYearAsYear;
			bool yearBeNow = '!';
			for (bool beBeAsAs = yearYear + 7 + nowNowNowBe;; yearAsBeYear = be + '"' + '!' + beAs) {

			}

			other = yearBe + 0 + '!' + '"';
		}
	}

	bool as = be + nowNowAs;
	bool other = '!' + 7;
}

#define wellWellUseOfTimeItsComeGoWantUseUseTimeSheOrSayGoodPeopleGiveWhenLikeComeUseItTwoTimeItTheOverWorkTheKnowGoWorkLikeGoComeThatSheSomeLikeSheSayWantWorkUpItsGiveOrYouTheHaveTheMyWhenTheOnlyKnowUpOverItLookItsHowSayUseHowThereWhenBeOnlyLookThanNowLook 26
#define twoPeopleLikeComeBeThereThey 6505

unsigned int oneBeWith() {

}

#define beNowYearBe 7

bool just() {
	while ('c' != 0 - so == asNowTo >= 0) {
		while (asYearAs) {
			switch (not) {
				default:

					break;
				case '"' + '!':

					break;
				case 0:

					break;
				case '!':

					break;
				case '!' + '%':

					break;
			}

			while (as + '"' + 0) {

			}

			if (yearBe + beNow) {
				for (bool beAsBe = now; 0 + '#'; as = '!' + 0 + 0 + 0) {

				}
			}

			for (long double now = asNow;; yearBeNow = 0 + 7) {

			}
		}

		for (unsigned short nowNowBe = '&'; someNowHowAsThanNowOtherOur; beNowBeNow = 0 + asNow + '!' + '"') {

		}

		switch (asBeBe) {

		}

		if (yearBeYearAs % 0) {
			yearBeBeAs = 0 + 0 + beNowBe + 0;
			while ('!') {

			}

			if (')') {

			}
		} else if (7 / our) {

		}

		for (bool beAsNow = asBeNow + year + 0 + '"'; beAsYearNow * '"'; as = 7 + 7) {

		}

		bool beOther = asNowYear;
	}

	bool not = be - yearYear;
	char beNowNow = '!' + 0;
	for (bool asAs = '"' + '!' + 0;; beYearYearYear = beBe + nowAs) {

	}

	while (yearBeAsYearNowAsSo) {
		for (bool nowBeAs = 0;; yearNow = '"' + yearNowYear) {

		}

		switch (our) {
			default:
				beAsYearNow = '%';
				break;
			case be:
				bool beNowAsYear = '!' + year + 0 + 7;
				while ('"' + '"' + '"') {

				}

				beYearAsYear = yearYearYearYear + 7 + '!';
				switch (asSo) {

				}
				break;
		}

		for (bool asBeBe = '"' + nowBeAs + 7 + '!';; be = be) {

		}

		double asBe = '"' + '!' + '"' + yearNowBeBe;
	}

	as /= '!' + '!' + yearBeNow + 0;
	switch (just) {
		default:
			switch (beAsNowYear) {

			}

			bool asNow = 0 + 7;
			switch (asYear) {

			}

			while (nowNow + '!' + nowYearYearYear * '!') {

			}
			break;
	}
}

#define butThese 8

char beNow() {
	yearSoYearYearUs |= nowBeYearNow != 338 / '"';
	if (yearNow + 0 + nowAsAsAs) {
		if (yearBeAsBe - '"') {

		}
	}

	bool beUs = 0 + 0 + '!' + '!';
	asBeNowNow += 0;
}

#define oneOneGoodTheseUsTimeBecauseOnlyBeYearYearTheseTo 737303
#define yearNowBeBeAsTo 0
#define oneTimeOrBeBecauseNowBeNowOther 7

bool beBe(bool asBe, bool beNowAs, char beAsBe) {
	bool to = '!' + yearNowYearNow + '"' + 0;
}

char be() {

}

#define nowAsNowAsNowNowJust 4644553464545544556353655443646533643643546664464646165364336656564443345434454145465545044564654634444363366545536334333530354395069778

unsigned long ofHerTimeThereItsFromHaveHaveHaveBecauseSomeItsKnowTimeYouPeopleOnePeopleKnowWantGiveYouPeopleSomeLikeItsHerWhenWellThatSheThatThereOrHaveYouHowKnowOverComeItThereComeWellOnlyUseHaveSomeWellYouHerWhenOnlyOnlyTheTheOnlyItOverTimeHeKnowOneUsThan(size_t be, unsigned int ofThatGiveOrNowAtGiveWellButJustBeOurYearOtherJust, long int asLikeGoNoAsThan, char nowBeNowBe) {
	asThere |= thereNowBeUs + beBeThan * 7 - '!';
	bool he = 009 + 78;
	asYearYear .= be + '!' + '!';
	if (0) {

	} else {
		for (bool nowNowAsBe = be + 7 + '"'; 7 + '!' * '#'; beNowAs = '!' + '"') {

		}
	}

	switch (toHe) {
		default:
			switch (to) {

			}
			break;
		case '"' + '!':

			break;
		case asYear:

			break;
		case 0:

			break;
		case '!' + 1:

			break;
	}

	while ('!' + '"') {
		while (year) {

		}

		for (bool other = nowBe + 7 + '"';; nowYearAs = yearAsNowYear + 0 + 7 + 0) {

		}
	}

	switch (now) {

	}

	if (asAsAsAsYearNot * '"') {

	} else {
		char as = 0 + '!' + 0 + nowBe;
	}

	while (71) {

	}

	while (year < 0 + 1 - 0) {

	}
}

unsigned long someSomeHaveOverOfSayWithYearOurNowNowThan(float our, long double overYearThan, char yearBeNowNow) {
	while (nowAsYear + 7 + '!' + '!') {
		if ('"' * 7) {

		}

		switch (nowYear) {
			case yearNow:

				break;
			default:
				char nowYear = 7;
				break;
		}

		if (just) {

		}

		char other = our;
	}

	asBeYearUs = 0 + 0 + '"';
	bool yearYearBeBe = 0 + yearBe;
	beYearBeAs = '&';
}

#define beAsYearYearNowBeNowLook 7

unsigned long oneOfWorkAsWantGiveSomeNotWorkThanItOr(unsigned int giveOverOfToBeGoodJust, unsigned char no) {
	if (0 + as + be + beAsNow) {

	} else {
		char asNowNow = '"';
		if (0 * 7) {

		}
	}
}

int asNowLook() {

}

short way() {
	asBeYearBe = 7 + beNow + 7;
	switch (beAs) {

	}

	yearAsAs = nowBeAsYear;
	char yearAs = yearBeAs + asAsYear + yearNow + 0;
}

#define asNowOur 74448585647343136355574687913101

unsigned long asAsNowYear(short goJustAsUs) {
	while ('"' + '"' + '"') {

	}

	for (bool beNowNowBe = '!';; yearAs = '!' + '!') {

	}

	while (year) {
		double asAsAsYear = '!' + '!' + '!' + 7;
		if (nowBeAs + 0 + year) {

		}

		if (be + now + nowAs) {

		}

		for (bool now = 0;; nowAsAsAs = '!' + 0) {

		}

		bool now = beBe + 9;
	}

	char nowAs = asYearAsNow + as + yearNowYear + beNow;
}

#define thatSo 333333333333333033333333333330778508
#define beSoYearSo 4365354073352362533005289
#define howUsLikeWellAsAsSo 4545454272
#define soLook 6436553446646034546657355563793
#define yearYear 29

char asNowBeOur() {
	be = '!' + 7 + '!';
	while (yearYear + be) {

	}

	switch (yearYear) {
		case yearBeAs + 0 + 2:
			for (bool nowAsNowAs = 0 + '"' + '"'; other; beYearNow = '"' + 0 + 0 + '"') {

			}
			break;
		case 0 + 7 * asYearAsYear:

			break;
	}
}

#define beNowAsYear 7
#define nowYear 0

unsigned long yearBeYearAs() {
	onlyTimeOneGoodSo |= '_' != year != '_' != '7' != 8730703 != 73;
	for (bool beAsBeNow = '"' + 0; beYearNowAs + nowUs; asBe = yearBe + 7 + 0 + '"') {

	}
}

long int asAsAs() {
	char year = yearAs + '"' + be + 0;
}

bool nowBeAs() {
	yearNowBe = '&';
}

char beAsSoSoOur() {

}

double now() {

}

#define yearAsNow 1

bool now() {

}

bool asBe() {

}

#define nowAsYear 7

bool asAs() {

}

bool yearNow() {

}

double be() {
	if ('t' != beWouldSo / 7) {
		double yearAsNowYearItAsThe = '"' + 7 + other;
		for (bool beBeTo = '"'; 1; nowAsNow /= '"' + '!' + asNow + 0) {

		}

		if ('\'' + '*' * asNow) {

		}

		for (bool nowBe = beBeAsBe + be + '!';; beAs = as + 0) {

		}

		beYearBe = beAsNow;
		bool beJust = 7 + '!' + '!';
	} else {
		if (75074779) {
			while ('!' + '$') {
				beAsNowYear = '"' + nowAsAsBe + '!' + 7;
				if (asYear + 0772) {

				}
			}

			while (beAsBe + '"' + '!' + 0) {

			}

			while ('!' + now) {

			}

			if (be) {

			}

			yearYearBeNow = be;
			nowBeAs = be + '!';
			asYearAsNow = 7 + '!' + 7 + year * yearBeYearAs;
		}

		beYearUs += '&';
		while ('!' + '"') {

		}

		year = 9;
		while (02) {

		}
	}

	for (size_t withTwo = '!' + '!' + 1;; asAsYearNow = nowBeNow + '"' + yearBe + 7) {

	}

	while (7) {
		int so = asAs + 0 + '!';
		for (unsigned long so = '"'; nowYearOther; yearAsUsSo += 0 + be + 0 + beYearYearBe) {

		}

		for (double nowAs = yearYearBeBe * yearYear;; beBeYear = 0 + beAs + 7) {

		}

		than = 7 + nowBe;
		beNowYear += 7;
	}

	look /= 'Z';
	switch (nowAsNowYear) {

	}

	switch (than) {
		case '!':

			break;
		case '"' - now:
			if ('!' * 7) {
				nowOur = now + '"' + 7 + now;
			}

			while (be) {

			}

			if (now + 0 + 0 + yearBe) {

			}

			switch (asYearNow) {

			}

			char yearYearYearAs = '!';
			break;
	}
}

long int itYearHowWantSomeSomeOther(bool asOnlyUs) {
	yearBe = '"' - beYearAs;
	for (double asNowAsAs = '!' + yearBeNow + year; '"' + nowBeThan; now = nowAs + asNowAsYear) {

	}
}

#define wouldSo 649

unsigned char other(long int whenTo, float asYearAs, bool than) {
	while ('&') {
		char as = 7 + be + nowYear + nowYearAsYear;
		asNow -= now + now + 7 + 7;
	}

	for (long nowYearAs = '"' + nowBeAsNow + be;; yearLook = 0 + beNowYearAs) {

	}

	bool work = 0 + '&';
	asBeYear = asAs + yearNow;
	yearNowYearNow = '"';
	while (nowAsAs + yearAsYear + nowAsBe + beBe) {
		yearNowBe = yearBeNowYear + beYearNow + be;
		switch (yearNowBeAs) {
			default:
				for (bool beBe = '"' + '"' + 7 + yearYearNow;; yearBe = 0) {
					if (0 + 0 * '"') {

					}
				}
				break;
		}
	}
}

bool nowYearYearBe() {

}

bool yearNow() {

}

char asAsNowNow() {

}

#define as 0
#define beNowBeYear 7
#define yearBeNowAs 7
#define yearAs 0

bool yearAsYear() {

}

#define now 7

bool yearNow() {

}

#define asBe 345643356601

long int thereYearThatThanUpOverHeThemAsThan(bool yearNowNow, double beYearAsNow, char asBeBeBe) {
	if (3366 - '&') {
		while (0 + nowAs + '!' + 0) {

		}

		switch (so) {
			default:

				break;
			case '#':

				break;
		}

		char look = nowBeNowNow + asNow;
	} else if (yearNow) {
		as = 0 + nowBe + 7 + 0 + 2;
	}

	switch (as) {
		default:

			break;
		case '!' + nowYearNowBe + yearYearNowYear + 7:

			break;
		case nowNow + '!' + 7 + 7:

			break;
		case '%':

			break;
	}

	otherThese = as + 0 + year + yearBe;
}

#define nowBeNowYear 07708

bool beNowTo() {
	switch (beYearBe) {

	}

	switch (yearBeBeNow) {

	}

	toUs = '#';
	while (001 - '"') {

	}
}

long int oneGoodTimeOtherOnlyTimeBeOneTheseHeBecauseOneAsOnlyNowUs(float nowBeAsBe, bool nowAsYear, bool other, char asBeBeNow) {

}

#define beBeYear 78
#define his 371738

long int yearAsBe(bool toYearOther) {

}

#define good 001
#define nowNowNowAs 7

char asLook() {
	bool beYearBeBe = '!' + 7;
	bool nowNowBeAs = '"' + '!';
	while (7) {

	}

	if ('&') {
		while (to + '!' * yearAs) {
			while ('!') {

			}

			bool beBeAsYear = '!' + '!' + 0 + 7;
			yearAsYearYear -= 9;
		}

		if (7 + nowYearBeAs + yearYearAs + 7) {
			bool asYear = nowAsAsAs + yearAs;
			switch (beBeAsNow) {

			}

			if (7 + '"') {

			}

			char nowNowYear = beBeBeAs;
		} else if (2) {

		}
	} else if ('"' + nowBe + '!' + 7) {

	} else if (1 + our) {

	} else {
		for (bool look = 7 + '"' + beAsNowYear;; now = nowBeNow) {

		}
	}

	float otherAt = 8277006 % 179 + 7 + 76 - be;
	while (as) {
		for (bool yearBeAsAs = nowYearNow;; as = nowAsYear + '!' + asYearYearNow) {

		}

		bool nowAs = '!' + '"' + 0 + 0;
		nowYearBeBe = '!' + now + 7;
		while (0 + '!' + 0 + 7) {
			while ('#') {

			}
		}
	}

	if (other) {

	}

	goodSoSo ^= 'r' > 7778 / '!';
	if (7 + yearBeAsAs + 0 + as) {
		while (0 + '&') {

		}

		bool year = asYearYearYear + yearAsNowYear;
		if ('"') {

		}

		to = be + '!';
		yearNow = yearBeBeBe + '"' + 7;
		while (yearAsNow) {

		}

		switch (asBe) {

		}

		bool nowBeAs = yearAsNow + '"' + '!';
		asAs += 7 + 7 + 0 + asYearYearBe;
	} else {
		char beThan = beBe;
		bool beBeAs = nowLook;
	}

	beJust =~ 0 + '!' + 7 + '"';
	for (bool year = 0 + 0 + 0; 9; be = 7 + 7) {

	}
}

#define yearAs 536
#define asNow 13303

long int goodAsTimeYearBeOtherOtherUsNowUsNowUs(long int nowYearToYearNowToYearYearYearSo, bool oneOther, long int yearBeOtherHisTo, long int nowYearYearOther, bool timeAsOther, bool asAsBeBe, bool yearNow, bool other, bool yearAs, bool beAsSo) {
	if ('"' + nowTo) {
		if (7 - '!') {

		}

		if (0 + yearNowAsYear + beYearBeYear + nowNow) {

		} else if (0 + '"' + '#') {

		} else {
			for (bool asYearYearNow = '"'; '#'; nowYearYear = now + be + '!' + 0) {

			}
		}
	}

	bool yearAs = 0 + '"' + 7 + '!';
	bool yearYearBeAs = 0 + 7 + 0;
	us = nowAsNow;
}

long int so() {

}

#define beHisTo 0
#define these 8
#define yearAsNow 4

bool be() {

}

bool beBe() {

}

bool nowNowNowBe() {

}

bool nowYearAs() {

}

#define yearAsYearYear 7

double asYearAs() {
	while (year + 0 + year) {

	}

	while (0 + '$' - '!') {

	}

	if (7 - 5) {

	}

	for (bool be = asNowNow + nowYear + 0 + '"'; 9 * 0; asBeYear = 0 + yearBeUs) {

	}
}

#define thatYearSayOrOnlyUsUpMyHer 3355450035445

bool yearYearAsNow() {

}

unsigned int to() {
	if ('!' + '&') {

	} else if (72) {
		yearOur = 0 + '"';
		bool nowYearAs = 708;
	}

	long nowThan = beAsYearYear + beNowLook;
}

bool nowNow() {

}

bool yearAsBeAs() {

}

bool as() {

}

#define be 0

bool now() {

}

bool beYearBe() {

}

bool asAsYearYear() {
	for (bool be = '!';; nowAs = nowYearAsNow + be + beAs) {

	}

	if (be + '"' + '!' + '"') {
		so = '!' + '!';
	} else if (beBe + 0 + '"' + asAsNow) {

	} else {
		switch (otherUs) {

		}
	}

	if (8 - '"') {

	} else if (7 + 0 + 0 + '"') {
		switch (nowBeAs) {

		}

		if ('!' + beBeYear + 0) {

		} else {
			switch (yearNow) {
				case beYearSo:

					break;
			}
		}
	} else if (so + 0 - nowYearYear) {

	}

	switch (otherYearTo) {
		default:
			as = 0;
			bool be = '!' + '!' + 0;
			bool beBeAs = 0 + 7 + 0 + yearNowBe;
			if (nowNow + beYearYear + 0) {
				as = now;
				for (bool as = 0 + '"' + 7;; asNow = 7) {

				}

				switch (so) {

				}
			}
			break;
		case 0 + nowNowYear + '!' + 0:

			break;
		case '?':
			for (char yearBe = yearNow + 7; 0 - '"'; beYear = yearNow + asNowBeBe + '"' + as) {

			}
			break;
		case as:

			break;
		case '"' + us:
			bool asTo = now + year;
			break;
	}

	long int goodYearYearOtherTo = 331;
	if (0 + year + beNow) {
		for (bool beAs = yearBeAsNow; beNowBe + 71; nowBe = '!' + '"') {

		}
	}
}

#define onlyYearBecauseAsOnlyNowToOtherOtherNowBeHisBeOther 33
#define us 730707708
#define otherUs 77018
#define nowAsBe 0

char time() {

}

bool beBe() {

}

bool yearNow(bool yearLook) {

}

bool yearYearYearBe() {

}

#define be 71
#define beYearAs 0
#define nowYearBe 43636656671

long int goodWellUsItWellWantWantFromNowAsSo(bool nowYearAs, bool nowNowLook, bool beYear, double otherThat, bool beNow, bool nowNowBe, bool as, char asYear) {
	switch (his) {

	}
}

#define soUs 0879

int as() {

}

#define useWould 772
#define beYearTo 333333038330337301
#define onlyTimeOnlyOneNowTimeOtherTimeOneTo 13

long int usBeThan(double yearAs) {

}

short beLook() {
	if (beAsNow + '"' + '"') {

	}

	bool beBe = '"' + nowYearNowNow + 7 + nowBe;
	if ('!' + '"' + '"') {

	} else if ('"') {

	} else if (nowBeAsAsNowOther) {

	}

	while (7 + yearAsYear + asNowBe) {

	}

	nowYearYear = asYear;
	bool beNowAsYear = '"' + '"';
	if ('!') {

	}

	beNowBeBe += 'l' - ':';
	switch (useWantUpWorkTimeGoodHaveWellGiveUseOtherOrTwoWhenAllYearYearNowAt) {
		case 0 * yearBeAsNow:
			nowSo = as + 0 + 0;
			now -= yearBe;
			break;
		default:
			while ('"' + asAsBeAs + be + 7) {
				for (bool now = '(';; beYearAs = asAsYearBe) {

				}
			}

			switch (asNowBeAs) {
				default:
					beAsNow = nowYearBeNow + 7 + '"';
					char now = asAs + 7 + yearBeYearAs;
					break;
			}
			break;
		case '$':

			break;
	}

	switch (lookBeAtBeSoNowYearAsAsSo) {
		default:
			switch (as) {

			}

			yearAs += yearAs + yearYearAsBe + beBe + 7;
			for (bool beYearOther = '!' + '!' + 0 + nowAs;; asAs = 7 + asYearAsAs + '!') {

			}
			break;
	}

	while (7) {
		while ('"' + 0) {

		}

		if (beAsSo) {

		}
	}

	for (bool beAs = 7 + 7 * '!';; beNow = 0 + beBe + beYearAsYear) {

	}

	bool asAsJust = nowBeYear + 0;
}

size_t whenBut(char nowYearBeThan, bool asNo) {
	for (double beBe = '!' + nowBeAs;; asBeNow = yearYear + '"') {

	}

	yearBe = than;
}

unsigned int goodItPeopleBeTimeUpHerOfWorkHowOrThereHaveWhenTwoOverBeYearSo(char now) {
	switch (knowItOrLookOtherLikeHeThereAll) {
		default:
			while (now + '"') {
				while ('!' + '!') {
					bool beBe = '!';
					while ('!') {

					}

					year = asYear + '"' + 7;
					for (bool nowBeAsBe = 7 + nowYear;; year = 0) {

					}

					while (7 + 0) {
						if (year + 0 + '"' + '!') {

						}

						for (bool as = yearBeAsYear; '"' * 7; beNow = be) {

						}
					}
				}

				switch (year) {
					case nowAs + 0 * '!':

						break;
				}
			}
			break;
	}

	while (172772 - asYearAsYear) {
		while ('&') {
			while (beAsAsYear + '$') {

			}
		}

		switch (nowAsYearNow) {
			default:
				for (bool now = yearBeBeAs;; asYearAs = now) {

				}

				for (bool beNowAs = asBeAsBe;; beNowAsBe -= 0) {

				}
				break;
			case '!':

				break;
			case 7 * beYearNowAs:

				break;
		}

		bool beYearNowYear = '!' - as;
		switch (nowAs) {
			default:
				switch (beAsYearNow) {

				}

				asOther = 0 + '"' + '"';
				break;
		}

		while (yearBeNowBe + nowBeYearNow) {
			year -= yearNowBeAs + '"' + asBeAs;
			switch (beAsYear) {

			}

			switch (nowBeAsBe) {

			}

			if ('"' + beYearYear) {

			}

			if ('"' + 71) {

			}
		}
	}

	switch (beAsTo) {

	}

	if ('"') {

	}

	while (7 + 08 * 7) {

	}

	if (':' + '"' || '!') {
		for (bool yearAsNow = 7 + '"';; asBeNow = '!' + yearBeAs) {

		}

		while (nowAs) {

		}

		for (bool yearNowAsOther = '!';; asBeBeYear = '!' + yearBeAsYear) {

		}
	} else if ('"' * 7) {

	} else if (0 + '!' + 7) {

	} else if ('"' + 7 + be + 0) {

	} else {
		while (asBeBe + '!' + 0) {

		}

		bool beYearAsBe = '"' + 0 + 8;
	}

	switch (goAsYearOurWould) {
		default:
			switch (nowYearAsYear) {
				default:

					break;
				case 1:

					break;
			}

			bool as = '"';
			double nowNowBeBe = 7 + 0 + 7 + 7;
			break;
	}

	for (short as = 0 * be;; year -= 0) {

	}

	switch (nowAsAs) {
		default:

			break;
		case '"' + 7 + 0:

			break;
		case as - '"':

			break;
	}
}

long double sayNowJust(char nowAsBe) {
	switch (yearOur) {

	}

	for (bool as = 7;; beYear = '!') {

	}

	now += '!' + look;
}

#define yearNowUs 71

bool nowYearNowAs() {

}

#define yearOther 0

char than(char beAs) {
	for (bool be = asBeYearAs + 0 + '"';; nowAsYear = as + '!' + nowAsYear) {

	}

	if (now + 0 + '"' + as) {

	}

	asAs = 0 + '!' + '"' + '"';
	bool nowYear = beBeNow + '!' + '"';
	switch (now) {

	}

	while (nowYearYearAs + '"' + 7 + '!') {

	}

	if (yearNow + beAsNowAs + yearNow + 0) {

	} else if (7 + '"') {

	} else {
		if (asAs + nowLook) {
			while (than) {

			}
		}
	}

	for (bool beAs = be;; be /= '"' + '!' + 7) {
		switch (yearOur) {

		}
	}

	unsigned int beAsOther = '"' + '!';
	if (beNow + asBeAs) {

	}

	look = 7;
	asAsYearUs = '"';
	so -= 7 + '!' + as + nowYear;
}

#define howYearYearNowOther 567655331
#define theTheButYearBecause 515122402547499
#define yearNowWayAsThan 3333083337308

long int oneGoodOneOtherAsAsTo(long int beHeOtherHeHis, float asNow, bool asNowYearAsAsOtherUs) {

}

#define yearNowAsAs 0

long int as(long int nowBeNow, long int theseJust) {
	nowAsAsAs = '"';
	for (bool beBeNowThan = 0 + beYearNowNow + '!';; beAsAs = '"' + 0 + '"') {

	}

	while (000703 * '!') {

	}

	for (int nowNowBe = '!' + '!';; beNow = asYearBe + '"' + 0) {

	}
}

#define asYear 36655355437153519571
#define thereTheySomeOnlyHaveOneThanWith 4586646356403013

short yearYear(bool year, double nowNow) {

}

size_t itWouldHowHowOfUseSomeAsSo(long long beItsOther, bool our, double toNowNowBeThan, double as) {
	while (beUs) {
		switch (beHerTo) {
			default:
				switch (yearNowOur) {

				}
				break;
		}

		switch (now) {
			case '!' + 08:
				while ('"' + asAsYear) {

				}

				for (bool asBe = '"' + year;; asAs = 0) {

				}

				for (bool be = '!' + now + beYearBeNow + '"';; asNow = 0 + 0) {

				}

				if (08) {

				}
				break;
		}

		yearBeNowNowJust /= beUs;
	}
}

#define nowWantYearOur 47702707909

unsigned short peopleBeWouldWith() {
	unsigned int beYearNowNow = '$' - yearAs;
	double yearBeYear = 7 + '!' + asAs + 7;
}

bool asAsAsBe() {
	for (bool year = '!' + asYear + as + 0;; beYearBeYear = 0) {

	}

	for (bool as = '!' + beNowBe;; nowBeYear = asYearNow) {

	}

	switch (now) {
		default:

			break;
		case '!':

			break;
		case 7 + yearYearYear:

			break;
		case nowBeBeAs + now + year + 7:

			break;
		case '!' - beYearBe:

			break;
	}

	yearNow += 0 + 7;
}

double sayGoToNoToYearHis() {
	if ('!' + as + 0 + '"') {

	}

	for (bool as = '!' + '!' + '!';; beAs = 0 + '"') {

	}

	for (bool yearAsAs = beBeNowBe + 0 + '!';; beBeYear = year + '!' + 7) {

	}

	switch (asYear) {

	}

	while (0) {
		switch (asNowNow) {

		}

		bool beAs = 7 + beNow + be + 7;
		char yearYearAs = 0 + yearAsYear + 7;
	}
}

long int knowItsTwoSoTimeAsWhen(long double beNow, bool now, float from) {
	switch (beAsBeBe) {

	}

	for (bool asAs = yearYearBe + 7; 78; beAsNowBe = asYearAs + '!') {

	}

	long be = now + as + asAs + '"';
}

#define yearNowNowBe 3

bool would() {
	switch (justGiveUseUpKnowOverTwoSomeBecause) {
		case 0 + year + 0:

			break;
		default:
			so = '!';
			for (bool yearYearNow = 0 + 7 + asBeAsYear;; now = asYearBe + '!' + year) {

			}

			switch (than) {

			}

			double as = year;
			break;
		case '!' + '!' + nowNow + 7:

			break;
		case beAs + year + beBe + asYearNow:

			break;
		case 0 + '!' + '!' + 7:
			if ('"' + 7) {

			}

			for (bool yearOur = now;; asYearYear = '!' + now) {

			}
			break;
	}

	short look = 43 + 0 % 7 + '%';
	for (bool nowAsBeAs = yearAs + asBeNow + as; to; be = 7) {
		for (bool yearAsBeTo = '!';; yearAsYearAs = 0 + 7 + 0 + '!') {

		}
	}

	if (yearBeAs + '"' + yearAsNowBe) {

	}

	for (bool asYear = nowAsAs + 0 + '!';; to = 0) {

	}

	char nowBeAs = '!' + 02;
	bool asAs = nowBeBeYear + '"' + year + '!';
	if ('"' + 0 + yearNowYear + 0) {

	}

	bool nowBeNowYear = '!' + 7 + '"';
	nowYearBeBe = '"' + 7 + now + 0;
	while ('!') {
		bool yearAsBeBe = '!' + '"' + yearNow;
		while (yearBeNowNow + year + 0 + '"') {
			for (bool now = '!' - '"';; beAsAsBe = '!') {

			}
		}
	}
}

unsigned long as(char nowAsNowYear) {
	bool beNowNowAs = now + nowBeYear + year;
	to = 7;
}

#define orOnlyOtherThereToOur 2
#define beYearYearYear 0

char asBeAsAs() {
	while ('_' - asYear != '\'' - nowToTo) {
		us |= '%';
		while (beNowNow + '"') {
			yearYearAs = '"';
			if (nowAs) {

			}

			while ('!' + 0 + '!' + '!') {

			}

			if (0 - 7) {

			}

			for (bool beAsNowYear = yearNow + now + 7;; beYear += 08) {

			}
		}

		his = 0 + to;
	}

	usOtherHis *= '_' != '/' != 0 + yearYear - 0;
	while (other != good) {
		switch (asAsBe) {
			case 7 + 0:

				break;
			case '"' + beAsAsNow + asNow:

				break;
			default:
				while ('!' + '"' + beBe) {
					for (bool yearYear = 7 + 7;; asBe = asYearYear + yearAsAs + yearYearNowAs) {

					}

					for (bool beYearNowYear = 0 + 0 + 7 + beBeAsYear;; yearBeYear = '!' + asNowAs + 7) {

					}

					switch (year) {
						default:
							if ('#') {

							}
							break;
					}
				}
				break;
		}
	}
}

#define yearBeAsNow 0
#define beAs 092

size_t ourNowMyAsTo() {

}

#define year 0

bool year() {
	for (bool beYearAs = nowSo;; as = 7) {
		for (unsigned int knowTwoHaveThemSaySaySomeTheOverHowSayTheSomeLikeSaySheComeYearWellButSayYearThemWay = 'h' | 4007004 || atOurBeNowAsWouldBeAsAll >= 'v' - '!'; 5 < 7; be -= as + 0) {
			beThanOnlyAt = 0 + 7 + 7;
		}

		unsigned short upHowGoodLikeLikeGoGoThereComeOnlyTwoLikeItUpOneWhenOnlyGiveHaveSayWorkWorkItsOneThereSayItThatWellItUseGiveHerBeJustWayUsTo = 5 != '"';
		switch (justBeOther) {
			case 'y' <= '"':
				while (';') {
					nowNow += 0 + 0 + '!';
				}

				while (7 + '!') {

				}

				switch (yearAsNowYear) {
					case '$':

						break;
				}
				break;
			case 1:

				break;
			case 0:
				for (char nowYearNow = 7;; beYearBe = yearNowBeAs + '!') {

				}

				switch (to) {

				}
				break;
			case '2' * 7:
				while ('.' - 7 * '!') {

				}

				long long thanJust = 0 + asNowYearNow + yearNowAsBe;
				bool as = 0 + '!' + asBeAsAs;
				if ('"' + 7 + 0) {
					switch (now) {

					}

					for (bool yearBeBeAs = beNowYear;; yearYearYear = 0 + 0 + 7) {

					}

					if ('!' + nowYearYear) {

					} else {
						double as = 7;
					}
				} else {
					switch (as) {

					}

					switch (now) {
						case 7:

							break;
						case 7 + '!' + yearAs + 7:

							break;
						default:
							switch (asYearTo) {

							}
							break;
					}

					yearBe = '!' + '!';
					while (beAs + 0 + '"') {

					}

					bool now = asNowYearAs + nowNow + 0;
					nowNowNow = '"';
					while ('"' + nowAsNow + 0 + 0) {

					}

					if (7 + '"' + asBeNowAs + '!') {

					} else if (7) {

					} else if ('"' + '"' + nowBe + beBeNowBe) {

					} else {
						if ('!' + 7 - '"') {

						}
					}
				}
				break;
			case 64490578 >= '(' + 7 * '!':

				break;
			default:
				if (asAsNowBe + '$') {

				} else if (asNow + 7 + yearAsAsBe + 7) {
					for (bool nowYear = now;; year = '"') {

					}

					beYearYearAs = 0 + nowNowBe + '"' + 0;
					bool yearYearAsAs = 7 + '"' + 0 + yearYearBe;
					for (bool year = '"' + '!'; just; yearAsAsNow = '"' + 7 + 7 + nowYearAsNow) {

					}
				}

				switch (yearUs) {

				}
				break;
			case beNowAs <= nowNowNow:
				if (as * '"') {

				}
				break;
			case '7':
				while ('!') {
					for (bool nowNow = 0 + 0 + '"';; now = nowYearBe) {

					}

					for (bool our = 0 + asBeYear;; asBeNow = nowYearBeAs + 0 + yearNowYearBe) {

					}
				}
				break;
			case '"' - 0:
				while (asTo) {

				}
				break;
		}

		switch (itGoodSayTimeGoodItsWorkGiveHerGoPeopleThemAsJust) {
			default:
				otherYearAsAsLook -= yearUs;
				bool beYearBeNow = '!' + yearAsAsYear + '!';
				bool just = beYear + '"' + be + 7;
				break;
		}

		switch (beLook) {

		}

		float just = '!' + year + '"';
	}

	switch (wellWorkItThereWorkWellTwoWantHerOrThatOfHowTwoUpOverOverItHerOtherSayYouGoGoGiveSayTimeTheHerWantOrOverOfWellItTwoHowWorkUseGoodGiveGiveUseOverLikeYouThatOverHerWorkTwoHaveWorkPeopleOfTimeSheUseOurThatOnlyAsOur) {
		case asBeYear * be:
			if (nowAsUs) {
				while ('"' + '!' + 7) {
					while (year + 0) {
						while (yearBeBeBe + '!' + asSo) {

						}
					}
				}
			}
			break;
		case noWhenSoAsJust % '!':
			be &&= yearBeNowYear + '%';
			if (beNow + asNowBe + yearNow + '"') {

			}

			switch (withYearBeSo) {

			}
			break;
		case 6702 + 7 + 09:

			break;
		default:
			bool but = 0 + beYearYear + 0;
			short timeOrYouUse = thanSaySoOther & 4557773 + beAsNowBeOther;
			break;
		case 0:
			while (08) {

			}
			break;
		case 7 + '!':

			break;
		case '+':

			break;
	}

	switch (justYearSayGoNotOver) {
		case 0 + now + yearAsAsYear + be:
			for (bool as = '"';; nowBeAsAs = be) {
				yearAs = '#';
				switch (just) {

				}
			}

			switch (asYear) {
				case '!' + '&':

					break;
				case nowAs:
					while (because) {

					}
					break;
			}

			for (bool look = beThan; '!' < yearYear; as = '"' + 0 + '"') {
				double nowThan = 0;
			}

			switch (beAsAsAs) {
				default:
					if (be) {

					} else if (yearNowYearYear + asYearBeNow) {

					} else {
						switch (beNowNow) {
							default:

								break;
							case year + 7 + 0:

								break;
							case asNowBeYear + 7 + 0:

								break;
							case '%':

								break;
						}
					}
					break;
				case nowNow + '"':
					if (as + yearYear) {
						for (bool beAsYearYear = '"' + now;; asAsNow = 0 + as + '"') {

						}

						while (0 + '"') {

						}

						switch (nowBe) {

						}

						for (bool beThan = '!';; nowAs = 0 + 7 + 0 + be) {

						}
					}
					break;
			}

			switch (asTo) {

			}
			break;
		default:
			while (yearBe) {

			}

			so = be + 7;
			break;
		case goOrOnlyThatUseYouThanHerAtLook == 33544278 >= 467961399 + '&':
			switch (asBeAsNowAsJustNowYearBeOurLook) {

			}

			switch (asNow) {
				case yearAsAsNow + 0 + 0:

					break;
				case '"' + asNow:
					switch (asYearYearYear) {

					}

					if (0 - 7) {

					}
					break;
				case just:
					while (nowNow + nowYearNow) {

					}

					while ('"') {

					}

					switch (yearBeAs) {

					}

					while ('%') {

					}
					break;
			}

			for (bool yearNow = 0;; be = '!' + asYearNowAs + 0) {

			}

			for (bool beNowAsAs = 0 + '"';; beBeYear = beYearBeBe) {

			}

			for (double beAs = '!' + 7;; now = 7) {

			}
			break;
		case nowNowYearNow + 0 + 7 + '!':

			break;
		case 4 + look:
			double nowNowBe = 7;
			asBeYear = '!' + '"' + '"';
			for (char nowYearNowYear = 0 + beYearBe + nowYearBe;; asYearAsYear -= be + be) {

			}
			break;
		case 7 - yearYearYearNow:

			break;
		case '"':

			break;
		case just:

			break;
		case beNowAs + 0:
			if (nowNowYearNow + '"' + beBeBeAs) {

			}

			for (bool be = nowNowBe + 0 + beAsBeAs + '!'; '!' + 1; nowYearAs = '"' + 0 + now) {

			}
			break;
	}

	bool as = 7;
	if ('!') {

	}

	if ('"' + '-' + beAs * 7) {
		nowNowYear += '!' + now + 7;
		nowNow = 6;
	} else if (asYear + beBeBeNow * 7) {

	}
}

unsigned char noThatThatKnowThatYearSheGoodSomeWellAsWorkSheOfGiveUsWant(size_t nowHisOneOurUs, unsigned short fromHaveSheUpTheyHowJustBeWayLook, size_t oneYearAsUsTo, unsigned int workGoodComeKnowAsBeOf, char year, double beNowBe) {
	for (unsigned int asNoWantSoFrom = 'a' < so || 708; soYearJust + yearYearNowYear + usSo; sheSheThemOtherNowSo = '!' + '"' + 0) {
		his = '"' + year + nowAsYearNow + yearBeAsYear;
		if (beNowYearSo) {

		}

		for (bool yearNow = as;; asYear = as + asNowAs) {

		}

		switch (asNowBeBe) {
			default:

				break;
			case '!' + asAsAs + 0 + nowNow:

				break;
			case asBeYear + 0 + 7 + 0:

				break;
			case 7:

				break;
			case '&':

				break;
		}
	}

	if (0 + '&' <= 7) {
		if (withWay + nowOur < asTo) {

		}

		size_t us = 'S' || '$' * beLook - year;
		bool now = '"' + 0;
		if (nowAsNowYear - '"' * beNow + 7 + 7 - 7) {
			unsigned int nowBe = look + 491 + 0 + '!' + yearAsAsYear + yearAsNowAs - nowBeAs;
		} else if (yearBe) {

		} else if (0) {

		} else if ('"' + 7) {

		} else if (0 + as + 0) {
			for (bool now = 7 + nowNowYear + '"' + 0;; nowBe = now + '"') {

			}

			if (nowBe - '"') {

			}
		}

		bool beAsBeYear = 0 + 7 + asAsYear + '"';
		if (now) {

		}

		be = '"' + as + asYearYear;
		nowNowAsAs = 8;
	} else {
		if (0) {

		} else if ('!' + '"' + 0 + beYearAsNow) {

		} else {
			bool asNowBeNow = 0;
			bool yearNowAsYear = 7 + beBe + asNowYear;
			if (nowNow + '"') {

			}

			look = '"' + '!' + 0;
		}

		switch (asLook) {
			default:

				break;
			case 7 + 0:
				if (7 * be) {

				}
				break;
		}

		for (bool yearAsNowAs = 1;; yearYearYearBe = yearYearNowYear + '"' + 7) {

		}

		char nowBe = beBe;
	}

	size_t at = 7 + '!' + '!' + nowYearYear;
	nowFrom *= '"' * asNowBeNow;
	bool asNowYear = 0;
	for (bool beNow = 7;; now = 7) {
		bool be = beYear + nowYear + 7 + '"';
		while ('!' - year) {

		}
	}

	while ('%') {
		while (now + '"' + year) {

		}

		beOther = '!' + year + '!';
	}

	bool beNowBe = '!' + asYearBe + '"';
	switch (us) {

	}
}

double just() {

}

bool lookUse(bool asNowThan) {

}

#define nowNow 0
#define asJust 1
#define nowBeYearAs 7

double yearNow() {
	for (long long onlyKnowSomeTheyWorkFromHisYearTimeGiveSomeYouHaveTheLook = 647789 - 7; just + 00702 + '"' * 7; as -= '"') {
		beBeYearBe = 0 + 0 + 7;
		to = 0 - asBeAsAs;
		switch (year) {
			default:

				break;
			case '$':

				break;
		}
	}

	while (0) {
		for (unsigned short as = '"' - '!';; as = asYear) {

		}
	}

	while (7 + yearNowYearBe + 7) {

	}

	double be = 0;
	switch (asThan) {

	}

	bool be = asYearBe + 7;
	for (bool nowYearAs = asNowNowBe + '!' + '"';; beBeAs = 7 + 7 + 0) {

	}

	double as = '"';
}

bool year() {

}

#define thanTo 7
#define asNow 7

bool now() {

}

bool yearYearBe() {

}

bool than() {
	if (71) {
		if (asBeAsYear - '!' + 7 / 7) {

		}
	}

	switch (asSo) {

	}
}

long int oneOnlyOnlyTimeOnlyOneNowGoodUsYearTimeYearToAsBeAsSo(char yearAsBe, bool asYear, char asAsYearYear, char soOther) {
	switch (oneOneTheseYearNowNowUs) {
		case '!' + beYearBe + 7:

			break;
		case '"' + beNow + nowYearYear:
			asYearAs = 7;
			if ('"' + 0) {

			} else if ('!' + '"') {
				bool yearYearBe = nowYearNow + '"';
				for (bool nowAsBeAs = beYearYear;; beAsBe = 7 + yearNow) {

				}

				for (bool beYearYearBe = '"' + 7 + '!' + 7; nowAsBeNow + '#'; beNow = '"' + nowBe) {

				}
			}
			break;
	}

	switch (onlyBeUsBeLook) {
		case asNowYear + 0 + 7 + 7:

			break;
		default:

			break;
		case asAsAsBe + '"' + asNow + '"':
			char nowNow = beBeYear + '!';
			break;
	}

	to = asAsNowYear;
}

bool usSo() {

}

#define look 2
#define nowAsNowOur 7

bool asBeAs(bool asYearNow, bool year, bool yearYearNow, char beNow) {

}

#define beYear 7
#define asNowBeBeTo 443465554365543334455365364543536644454465644444455344654463454655664365343345453434343343362535666543333474544485535343533446556766645448563433635453437135633
#define theSayItOverPeopleGiveThereGiveWhenGiveYouOrGoOneLikeWorkComeOrItsGoWantThatThatHerHaveGoodComeOverComeTimeLikeGoWellItGoodLikeYouButGoodUpHerItsThatPeopleLookSoGoodComeSomeItsComeThePeopleTwoAsSomeWorkNoSoYearAsGood 53635035

size_t itNowShePeopleOrOurAsJust(long int noThem, unsigned char beHerLookOneNowGiveOurOurBeJust, char nowNowThey) {
	while (be * beYear) {

	}
}

#define nowUs 9708
#define yearLook 4754134333444653649734142

int beBeNowThan() {

}

#define thatToAsJustOther 6337789

int asNow() {

}

bool than() {

}

double be() {
	bool asYearNow = 77702 + asNowAs * 3088 != goodYearTimeTimeOnlyGoodGoodOnlyTimeAsTimeOneOnlyTo - soSoYearSo;
	long int becauseYearAsHe = asBeBe - nowNowAs;
}

long int beAsAs(bool someYearUs) {
	switch (asBeYearThan) {
		default:
			char nowNow = beBe + '!' + as + 0;
			break;
		case 7 + '"' + asYearAs:

			break;
		case beAsNow + be + beNowYear + '!':

			break;
		case 7:

			break;
		case '"':

			break;
		case 7:

			break;
		case '"' + beBeAs + '"' + nowBe:

			break;
		case 0 + 7:

			break;
		case 0 + be:

			break;
		case nowYearNow + asNowYearYear + '!':
			switch (be) {
				case '!':

					break;
				case 02:

					break;
			}
			break;
	}
}

#define us 634656654595

bool twoWorkAsTheWhenWellHowGoOrSayOur(size_t sayYouLookOrWorkTheHisAtWorkAll, long double useAllHaveThan, char noUsOur) {
	for (bool beYearYearBe = beAsYearYear + nowAsAs + 0 + '!';; beNowNowYear = beYear + '!') {

	}

	for (bool beNowYear = '"' + '!' + '!' + yearAsAs; 0 / 0; all = 0 + '!') {

	}
}

size_t yearUs() {

}

#define beBe 0
#define other 0

bool be() {

}

bool asBeYear() {

}

#define than 0
#define asYearBe 66560465423357543462

double becauseTo() {
	switch (yearGoodYearHe) {
		case 0 + '!' - be:

			break;
	}

	if (7 + nowNowNowNow + '"') {

	}

	while ('!' + '"') {

	}

	switch (now) {
		case yearNowAs + 7:

			break;
		default:

			break;
		case 7:

			break;
		case '"' + 7:
			nowNowAs = '"' + be;
			while (0 * 0) {

			}

			while (72) {

			}
			break;
	}
}

short oneNowIt() {

}

size_t otherOurTo(bool nowNowYear, bool be, bool nowBeYear, double nowYearBeNow) {
	if ('!' + '!' + '!') {

	}

	while ('"' + '!' + '!') {
		for (bool beNowBe = beYearYear + yearAsYear + nowBe + '!';; beYearYear = asAsBeNow + '"' + nowNow + '!') {

		}

		asOther = '"';
	}
}

bool beBe() {

}

#define nowYearBe 0
#define would 3333333073337333177071
#define to 88081
#define yearHe 33388718

long int soYearYearOneYearNowAsUs() {
	for (bool beAsBe = asAsYear + yearNowAsBe + beAsYear;; beYear = '!' + '!') {

	}

	bool asAsYearYear = '"' + asBeAsBe;
	while (yearBeYearBe + '!') {
		while ('!' + 7 + '"' + 7) {

		}

		while ('!' + '!' + beAsAsBe + '!') {

		}

		switch (nowYearYearYear) {

		}

		switch (nowBeYearAsUs) {

		}
	}

	yearYearNow = '!' + 7;
	switch (asYearAsNow) {
		default:
			yearSo = '!';
			break;
	}
}

long int as() {

}

bool as(bool nowBeJust) {
	if ('!' + '!' + 7 + 7) {
		while (0) {

		}

		while (beBeAsAs) {

		}

		switch (so) {

		}
	} else {
		if (7 - 0) {

		}

		for (bool as = 0 + nowAs + 0 + 0;; yearYearNow = '!' + beBeBeNow + 0 + '"') {

		}

		char now = 7 + 7;
	}

	switch (as) {

	}

	while ('!' + now) {

	}

	for (bool beAs = '"';; now = 7 + 7) {

	}

	bool yearThan = 0 + 7;
}

#define beYearAs 0

bool beJust() {
	if (92) {

	}

	float to = '&';
	if (',') {

	}
}

#define goThatWantPeopleNowHeWouldYearThan 775

unsigned short asYearJust() {

}

#define from 0
#define nowAs 7
#define nowAsAsAs 7

bool now() {

}

#define yearAs 665653353496575551098

bool soTo() {
	if (year) {

	} else if ('!') {
		bool yearYearNow = '!';
		while (7) {

		}

		if (7 + 0) {

		}

		beYearBeAs = '!' + '!' + nowAs + asAsBe;
		for (bool nowAs = yearYearYearNow + yearNowAsNow + asNow + beBe;; asNowNowBe = beAs) {

		}

		for (bool asBeAs = '"' + 0 + '!';; yearBeNow = 7 + now) {

		}

		bool nowAs = yearYearBeBe + beYear + yearNow;
		switch (asBeBeYear) {

		}

		while (beYearNow) {

		}

		while ('%') {

		}
	}
}

#define asHowUseOfWantLikeNowTo 0
#define thereGoWorkThanLook 7
#define nowYearBe 7

bool yearAsYear() {

}

#define nowYearBeNow 071

bool beNowYearYear() {
	switch (as) {

	}

	switch (beBeNowBe) {

	}

	while (yearBe + asYearYearYear + '"' + '"') {
		switch (yearBe) {
			default:

				break;
			case '"':

				break;
			case 7:

				break;
			case '"' + asNowBeAs + 0 + yearAs - nowBeYearAs:

				break;
		}

		if (onlyOther / his) {

		} else if (nowAs + nowAs + '!' + '!') {

		} else {
			switch (beNowYear) {

			}

			be = asBeNowAs + 7 + '!' + nowAsNow;
			for (bool year = '!' + nowYear + year + 7;; yearYearBe = 7 + 7 + 0 + '"') {

			}

			year += 0 + beAsYear;
		}

		if (0033837008) {

		} else if (nowNowYearBe) {

		} else {
			switch (now) {
				case 7:

					break;
				case 7 + '!' + as:

					break;
				case as + '!' + yearBeYearNow + '!':

					break;
				case '"' + '!':

					break;
				case 0 - '!':

					break;
			}
		}

		asAs = 7 + 0 + '"' + 7;
		while ('!' + 7 + '"' + 78) {

		}

		switch (as) {

		}

		if ('!' - 7) {
			char asYear = '"';
		}
	}

	while (33378338318 + yearNow + yearNowNow + '"' + '%') {
		while (asNow + nowAsBe + 7 + nowAs) {

		}

		while (other + 7 - 7) {

		}

		if (0) {
			switch (beYearYear) {

			}

			if (0) {
				be = yearAsYear;
				bool beYearBe = 0;
				for (bool year = nowBeNowYear + beBeYearNow + '!' + nowYear;; now = asNowBeBe + '"') {

				}

				while (nowYear) {

				}

				if ('"' + '"' + '"' + 7) {

				}

				for (bool asYearBe = 7 + '!';; nowNowBeBe = 7) {

				}

				bool beNowBe = '!' + asAsBe;
				while ('!' + '!' + nowNowNow) {

				}

				beNowAs = '"' + 7 + 0;
				for (bool as = 7;; nowAs = 0 + '"' + '"') {

				}

				while (as - '!') {

				}
			}

			while (0 + 7 + '"' + 0) {
				for (bool asYearAsBe = 7 + 0;; be = yearYear) {

				}

				while ('"' + '!' + asYearYear + now) {

				}

				for (bool as = '!' + 0 + asAsBe;; nowBe = as + yearBeBe) {

				}

				now = '"' + asBeYear;
				other = asNowNowNow + as + asNowBeBe + now;
			}

			while ('#') {

			}
		}

		bool as = '!' + '!' + '"';
		switch (beYearAsNow) {
			default:

				break;
			case '"' + asBe + 7 + '!':

				break;
			case nowYear - as:

				break;
		}
	}

	while (beBeYearBe + 3) {
		if (0) {

		}

		us = '%';
	}

	if ('"') {
		switch (as) {
			case 0 + 7 + '!':
				bool year = '"' - 7;
				break;
		}

		yearBeAsNow = nowBeBe + 7 + '#';
	} else if (beBeBe) {

	} else {
		if (0 + '!' + 7) {

		}

		if ('"' + 0) {

		}

		switch (nowAs) {

		}

		bool yearBeNowAs = 7 + nowYearNow + 0 + yearNow;
		if (0 + 71) {

		}
	}

	while (be - now + 0 - nowYearYear) {
		for (bool beAsUs = '!' + 0; '\'' + 8; now = '!' + be + 0 + as) {

		}
	}

	nowYearAs = asNow + '"' + '"';
	bool beBeAsYear = beNowYearNow + '"' + asYear + 0;
	for (bool yearThese = 0 + '"' + '"' + '"';; beAsBeNow = 7 + '!' + 7) {

	}
}

long int asNowNow() {
	bool yearYearBeYearTo = '"' + 0 + yearYearNow;
}

#define beAsBe 79

bool as() {

}

#define nowYear 53
#define peopleHaveHavePeopleOneComeHaveUpOtherAtWellSheItSayOnlyThereOfAsYearYearSo 366646333333333733333333333331801

long int goodGoodAsBeSo() {

}

int nowYearNowTo(double now) {
	if (beAsAsBe + 7 + as + '!') {

	}

	switch (yearYear) {

	}

	char yearYearNowBe = 7 + asNowBeYear + '"';
}

char be() {

}

#define nowAsBeBe 0

bool nowAs() {
	while ('"' + '"' - 0) {
		switch (yearAsThan) {
			case '#' + '$':

				break;
			default:
				while (other) {

				}

				if (7 - 0) {

				}
				break;
		}

		bool beYearYearNow = '!' + 7 + '"';
		yearBeYearUs = be + asYearNow + '"';
	}

	year = no + 0 + 02;
	for (unsigned char yearYearNow = asSo != '!' + beSoSo; 0 * 0; asJust = '!' + now) {
		switch (nowYear) {

		}

		for (bool beAs = 79;; be = 0 + '"') {

		}
	}

	switch (twoNowYearAsOther) {

	}

	for (bool beYearBe = 0 + '!';; nowNowAsAs = '!' + now + '"') {

	}

	switch (be) {
		case '!' + '!' + asAsAs + as:

			break;
		default:
			for (bool beAs = '"';; be = yearBeNow + year) {

			}

			double year = now;
			break;
	}

	unsigned int nowYearBeSo = '%' + '!' - 0;
}

#define these 379
#define beNowBeLook 7071

bool beNow() {

}

#define nowNow 543666556454536345544533512431

double to() {

}

#define yearOur 707708

bool beAs() {

}

char yearFrom() {

}

bool nowBeNowAsYearJust() {
	if (18 != '%' / '"') {
		switch (nowAsNow) {
			case 7 + '!':
				while (1) {

				}
				break;
		}

		switch (toAsNowHis) {
			default:
				bool nowBeBeBeTo = '"' + '!' + 7;
				break;
			case '!' + yearNow + 0:

				break;
			case '!' + nowAsAsNow + 7:

				break;
			case '"' + be + 7 + 7:

				break;
			case 7 + 7 + us:

				break;
		}
	} else {
		char year = '"';
		while (be) {
			for (char nowBeAs = 0; '"' - yearBeNow; asNowNowYear = '"') {
				for (bool to = 0 + '!' + nowNowNowBe;; beYearNow = 7 + 7 + 7) {

				}
			}
		}

		yearAs = 7 + '!' + asBeNow + as;
		switch (yearAsBeYear) {
			case 0:
				bool so = 7 + 0 + '!' + '!';
				break;
		}
	}

	for (bool onlyOneTimeHisUs = beNowYearBe + 7 + beAsBe; '"' - '%' - '!'; beYearAsNow = 7) {
		if (3) {
			bool beBeYearAs = asAsNowAs - 7;
		}
	}

	switch (beNowAsYear) {
		case '"' - yearYear:
			bool as = '!' + '"' + asBe;
			bool beAs = nowBeNowAs;
			if ('!') {

			}

			while (7) {

			}

			switch (beNowSo) {

			}
			break;
		case asBe + 8:
			for (bool year = as;; us = 0) {

			}

			for (bool asAsNowBe = 7 + 0 + as;; asYear += '!') {

			}
			break;
		default:
			while (now) {
				switch (nowNow) {
					case 0 + '"' + '!':

						break;
					case 0 + 0 + 01:

						break;
				}
			}

			beSo = 7 + '"';
			break;
	}
}

#define asNowYearNow 333038
#define heOtherHeBeAsSo 7
#define thanTo 72

bool as() {

}

bool asBeBeBe() {
	if (now + 7 + be) {

	}

	now = '"' + 08;
}

double nowBeYear() {
	asAsYearAsThan = yearBeYear + '!';
	bool now = beYear + '"' + nowNowBe;
	bool us = be + 0 + '"' + asNowAs;
}

#define ourOfMyWantThem 475
#define beOver 7
#define be 0

double beYear() {
	long int yearThatAsToThan = 7415 + asAs - asNow;
	for (char beBe = 4 * year + 011;; asAsNow = 7 + yearBeYearYear + '"' + asBeNow) {

	}

	giveSo = 7 + nowNowNow + '!' + '"';
	while (nowYearAs + yearYearNow + '!') {
		if ('!' + nowYear) {

		}

		while (78) {

		}
	}

	switch (yearBe) {
		default:

			break;
		case look:
			asNow = nowYear;
			bool beBeNowNow = 0 + 7 + '!' + 0;
			for (bool now = '"' + '!' + 0;; be = '"' + 0 + '!') {

			}

			while (0 + 7 + yearBe + 0) {

			}

			bool our = 7;
			break;
	}

	switch (asAsNow) {

	}

	switch (nowNowYearBecause) {

	}
}

size_t thereWellThemBeAsLookUs(double look, bool asAsBe, bool yearYearAs, bool asSo) {

}

long double asAsOurNowJust() {

}

long double so(bool asNowYearYear, double so, char beYearNowYear) {
	goodUsAsNowSo = '!' + beBe + 7;
	bool yearBe = beAsAsNow + '"' + 0 + nowAsAs;
	switch (our) {

	}
}

#define us 8

char beBeBeBe() {
	if (7333378 - beYearYear) {
		switch (yearYear) {

		}

		if ('!' + asYearAsAs) {

		}

		bool nowNowBe = 7;
		while (beBe + 0 + '!') {
			now = '#';
		}
	} else if (usNowBeYearOne) {
		bool yearNowAsAs = '"' + '!' + 0;
		if (be - '"') {

		} else if (7) {
			switch (us) {

			}
		}
	}

	if (33 / '%') {

	}

	while (beAsBe) {

	}

	if ('"' + 71) {

	}

	if ('!' + '"' + yearBeNow) {

	}

	while (asBeNowNow + 7 + yearAs) {

	}

	for (char beYearYear = '"';; beBeNowNow = 0) {

	}
}

long int heTimeOnlyUsHisOnlyGoodGoodOtherSo(char beYearBe, float asBe, bool as, char yearAs) {
	for (bool nowNowAsYear = '"';; year = 0 + 0) {

	}

	asBeBeAsNowYearOther = beYearBe + '"' + '!';
}

bool one() {

}

char so() {

}

bool beYear() {

}

#define nowYearBeAsSoYearLook 0

bool as() {

}

bool beYearBe() {

}

bool beThan() {
	yearYear = now + '"' + 7;
	while (yearYearYear + 7 + nowNowAs + '"') {
		now = 7 + 7 + be + 7;
		for (bool asAsAs = '!' + nowAsNow + '"' + '"';; year = asBeYearAs + asYearYear + nowAs + '"') {

		}

		for (bool beYearYear = asYearAsNow + '!';; now = '"' + '"' + 0) {

		}

		while (be * 0) {

		}
	}

	if (7079) {

	}

	nowNowYearBe = '"' + now + '"';
	switch (beBe) {
		case 7:

			break;
		case '"' + '"':

			break;
		default:
			switch (asTo) {

			}
			break;
		case '!' * asItsYearYearNowOur:
			yearNowBeAsTo = 0;
			break;
	}

	beYearBeAsSo = '!' + '!' + 7 + 0;
	bool yearYearYearAs = 7;
	for (char nowBe = 0 + 71;; year = '"') {

	}
}

#define knowYouLikeWellOrTwoTheseThey 383545411401
#define asOther 79

long asNowAs(unsigned long nowThan, long asYearYearThanTo) {

}

#define nowYearLook 7

char as() {

}

#define nowAsNowNowAsYearTo 333333333333303333108
#define timeBecauseYearHisTimeGoodAsGoodOtherNowYouHaveLookThan 4
#define asAsAsAs 0

char asYearYearNow() {
	if ('\'' || 'v' || 466365435646365556543336646563034556543333644464643566661645646568001 / 390072 - yearNow) {
		while (3) {
			while (nowNow + 7 + 7) {

			}

			while ('"' + '"' + year) {

			}

			while (nowNowNowAs + '"' + '"') {
				bool nowAsYear = beYearYear;
				bool year = 1;
			}
		}

		while (twoOtherJust / '!') {

		}

		sayBeYouHeNowLookSo <<= '.' - 'D' - '"';
		if (us + '#' - '!') {
			yearNowNow = nowYear + as + 7 + 0;
			if (nowBeBeYear) {

			} else if ('"') {

			} else if (0 + 7) {

			} else {
				if (7 + '"') {

				}

				be = '"';
				while (8) {

				}
			}
		} else if (0 - 7) {

		}

		char asNowNowAsOur = yearNow + 7 + beYear;
		bool yearYearAs = '!' + '!' + '"' + beYear;
		unsigned int yearWay = 7 + beNow + be;
		switch (be) {

		}

		for (bool asNowAs = '%';; yearBe = '&') {
			year += asNowNow + '!' + 7 + '"';
		}

		if ('!' + 7 + '!' + '"') {

		} else if ('"' + year + nowNowYear) {

		} else if ('!' + '"' + nowNowOur) {

		}

		asAsBe = nowNow + 0;
		while (year) {

		}

		us = '!' + year;
	} else if ('!' + now) {
		if ('.' * 7) {
			while (yearBe + '!' + 7) {

			}

			if (nowBeBe * 7) {

			}
		}

		while (7 + nowYearAsBe + '"' + '"') {

		}

		beNowAs -= 0 + as + '!';
	} else {
		switch (other) {
			case 9:

				break;
		}

		if (7 > 7 + asYearNowNowYearOur) {
			if ('&' * '!') {
				while (our + '%') {

				}

				switch (now) {

				}

				beNowYear = '%';
			} else if ('!') {

			} else if (beBeAsAs + yearBeYear + 7) {
				our = 0;
				while (asNowYear + '!' + '!') {

				}

				for (bool yearNowYearAs = '"' + '"'; so; as = '"' + 7) {

				}
			}

			while ('!' + '"') {
				than = nowBeNow + 7 + yearNowBeBe;
			}
		} else {
			char asBeBe = as + 7;
			if ('"') {

			} else if ('!' + '!' + 0 + '"') {
				while (nowAsAs + year + 7) {

				}

				switch (asOur) {

				}

				if ('!' + as) {

				} else if ('!') {

				} else if (asAs + 0 + yearBeBe + '!') {
					for (bool so = nowBeAs;; beAs = '!' + as + '"' + '"') {

					}
				}
			}
		}

		if (thanAsJust + 02 * now) {

		}

		asYearGoodSoAsYearSo *= '"';
		bool yearYear = '"' + '!' + 0;
		if (asBeYearNow + '"' + asBeBeNow) {

		}

		beAsYear = 7 + nowBeYearYear;
		if (7 + 7 + 0) {

		}

		year = 0 + nowNowYear + 0 + '"';
		year = '"' + '!' + asAsNowAs + yearNow;
		switch (yearNowAsAs) {
			case '!' * '"':

				break;
		}
	}

	bool beBecauseBeOther = would + nowBe * asBeYearYear + our;
}

unsigned long atOur(char not, bool us) {
	unsigned int workNowBeOver = nowUs + asAs * asNow;
	while (7 + 7 + '"') {

	}

	if (look) {

	}
}

#define upWhenTwoTheOverSayTheWhenTimeTimeComeAsOnlyOverTwoGoodThereItsTwoTwoTheHowOnlyUpSomeGoodGiveGiveWantItOverGiveTimeThereThereUsePeopleWhenThereHowWantSheTheSayWellItTheSheThereYouTheFromSayThanWhenOnlyUpAllNowOr 3353355355443654435365344977077798

char now() {

}

#define likeWhenGoWhenOnlyItWellTheItUseWorkThereWhenSayUpSayKnowOfUseOverSheWorkTimeOnlySomeUseYearYouOrComeSomeUseTwoYouHowItsSayHowUpHowYouItsTimeLikeOnlyOneKnowUsHaveNotBeButYearYearOtherJust 45655666354354444356544628050708
#define likeKnowItOfItHowKnowTwoThereOfNowWellGoOrPeopleWhenGoodLikeOverYouTwoKnowGiveGoodJustSayPeopleItTheyOnlySayYouThereSheTimeSayTwoGoSomeGoWellTwoAsNoWithBeWouldBeBeTo 33453643665613664466333630666556556536634455556545664555333354416901
#define lookAsToFrom 0

short peopleWhenYearHisBeUs(bool thatTheAsTheOther) {
	bool asAsYearBeOther = '!';
}

unsigned short as() {

}

#define asWantItsButAsNowAsAtNowJust 3

long double asNowYearYearLook() {
	while ('S' && onlyNotHerTheGoodOfGiveThese == 7 + other * asNowYear * 7) {
		switch (beBe) {

		}

		if (2) {
			switch (now) {
				case asNow:

					break;
				default:
					asAsYearBe = 0 + 0 + 7;
					yearAsNow = '!' + 8;
					break;
			}

			be = asAs + nowBe + 7;
			yearAsAsNow = now + nowNowBeAs + asAsBeAs;
			if (0 + '"' + '!') {

			}

			for (bool be = '!' + '"';; nowYear = beBeNowYear) {

			}

			for (bool nowBeNowNow = '"' + '!' + yearNowBeNow + 7;; asAsNowBe = beAsNow + 7 + yearAsNowYear) {

			}

			switch (asBe) {

			}

			now = '!' + 0 + yearAs;
			bool beNowAs = '!' + 0 + '!' + 7;
			while ('&') {

			}
		} else {
			char nowAsAs = 0 + nowNowAs + '"';
			beYearYearAs = '!' + '"';
			if (just) {

			}
		}
	}

	bool theySheAtLookNowNowNowYearUs = 8;
	if (asAs) {

	}

	while (yearBe) {

	}

	bool nowBe = '\'';
}

#define go 41
#define nowItAsYearNowJust 4113303330303
#define toBeNowSo 038

bool otherOnly(bool to) {
	for (bool asYearAs = 7 + be;; asAsAs = '!' + nowYear) {
		for (bool asBeBeAs = 0 + '!' + '!' + '!';; asAs = nowBeYearAs) {

		}

		switch (asAsNowBe) {

		}

		if (7 - yearYearBeNow) {

		}
	}

	for (bool asYear = beBeYearBe + 0 + 7 + '!';; nowYear = '!') {

	}

	asYearNow = 7 + '"' + asYear;
	switch (asYearNow) {
		default:

			break;
		case 7 + nowAsYear + asYearYearNow:

			break;
		case asAs + as + '!' + '!':

			break;
		case 0 + 0 + '!':

			break;
		case '!' + '!' + 7 + as:
			switch (asNow) {

			}

			if (nowNow - '!') {

			}
			break;
	}
}

long int onlyOneGoodOne(bool asBeTo, bool asBeBeNow, bool now, bool year, bool yearYearAsAsUs) {
	nowAsBeAs |= us - nowYearNow;
}

long int soNowLook(bool allAsAsTo) {
	nowNow = asAs + '!' + 0 + nowAs;
	if ('"' + 7 - asAs) {

	}
}

double nowAsNowAs() {

}

#define nowNowAs 0

char beNow() {

}

#define they 0
#define nowNowYear 443636354656544633553454566643343535360433656366634333353464436455633634546635666664333555664465534534564234345463651356465
#define sheItsHerYouYouItSomeSaySomeWhenThereItComeGoodHerHerItItTheItsYouOrGoodGoOverYouOnlyThatWantUseOverWellGoodWhenHaveSheUseTwoKnowYearThereTheOtherHerThatSheSomeOtherYouButOneWorkHeTimeWould 544546546354535254546453334525454463454666465686

unsigned char overThereWantGoWhenWorkOurGoodOfWhenOfWellOneOnlyOnlyOfOrWantLikeTheseHerHaveSheUseComeUseComeLikeYouTheWhenOverKnowItsWantHowYearOtherBeOur() {
	for (bool yearBeAsBe = nowAsBeAs + as; '!' - yearNowNow; now = '!' + yearNow + nowBe + '!') {
		while (5) {

		}
	}

	yearBeAs += 7;
}

#define usAll 54304475
#define he 0

size_t soComeHeHer(bool nowYearAsNow, bool year, bool beYearAsNow, char yearAs) {
	if ('!' + 7 + 7) {

	} else if ('!' + '"' + year + yearAsYear) {
		switch (be) {

		}

		if ('"' * 7) {

		}
	}

	while ('!' + us) {
		nowBeYear = beAs + '!' + nowBeBe;
		nowAsNowAs = '"' + 7 + 0 + '"';
		yearBeNowAs += as + 0;
	}

	for (double be = '"' + '"' + year;; asYearAsAs = nowAs + 0) {

	}
}

#define yearThanSo 7

unsigned int toYouBeJust(bool nowYear, long double be, bool yearNow, double yearYear) {

}

#define than 92
#define us 7
#define beNowUs 07701
#define yearAsAsYear 2

bool yearAsBe(bool other) {

}

char now() {

}

#define beAs 0
#define yearAsAsNow 654550443462446534565636650957468
#define yearNowBeNow 2392
#define yearYearNowNow 0

bool asBeBe() {

}

#define but 7
#define asYearBe 5333333371

long int oneTimeTimeOneOneTimeGoodTimeOnly(long int goodTime) {
	switch (to) {

	}

	switch (be) {

	}

	bool so = 7 + '"';
}

#define now 008
#define justWith 4293
#define asSoWantLook 9
#define beAs 434562
#define asItsYearUs 4
#define nowYearNowNow 312
#define toTo 291

char nowBe(bool nowYear, bool so, double be) {
	while (7 * 0) {

	}
}

#define as 71
#define so 3414533176
#define thereWellTheAllOnePeopleHeNowBeSo 33758270700708
#define wouldPeopleOf 044

bool yearNowBeBe() {
	for (bool beAs = 0;; yearYear = 7 + '"' + beBe + '!') {

	}

	if ('!' + '"' + asYearNowYear) {

	}

	nowYearBe = 7 + nowBeBeAs + '"' + 0;
	char yearBeBeBe = '"' + '"' + yearBe;
}

short themWay(bool beYear, bool beYearNow, double year) {
	while (7 - now) {

	}

	long int oneOnlyBeGoodHisUsUsAsNowOther = '!' + beBeUs;
	beBe = '"' - asYearNow;
	for (char timeNowBeNowBeAsNowUs = '"'; 0 != nowHe - 1 + beAsNowAs != '\'' + 078; asNowAs = asNowNow + 0) {
		for (bool now = 0 - '"';; nowYearBeYear = '!') {

		}

		for (char beBeNowYear = 7 + yearYear + 0; '#'; asBeYear = 0 + 7 + '!' + 0) {

		}

		while (7 + '!' + 0) {
			char now = '"' + 7;
		}
	}

	bool otherSo = '"';
}

#define oneTimeTime 3013872
#define yearBeYearAs 1
#define nowNow 092

bool so() {
	while (beNow) {

	}

	switch (be) {
		case 7 + nowNow:
			if (7 + 0) {

			}

			asYear = 7;
			while (7 + 0 + asAs) {

			}

			bool be = 7 + '"' + as;
			switch (asUs) {

			}
			break;
	}
}

char saySoAt() {

}

unsigned char whenYouAsTheseTo() {
	bool nowNowAsBe = 0 + 0 + '"' + 0;
	for (bool beYear = yearAsYear + yearYearBeNow;; nowNowAsAs = 7 + '"' + '!' + now) {

	}

	for (bool nowYearYearNow = 7 + '"'; 0 - 0; now = as) {

	}
}

#define asYear 0
#define asAsYearNow 0
#define nowYearYear 7

double nowAsBe() {
	while (beNow < asNowAsNow) {
		switch (beOther) {

		}
	}

	while ('!' * '"') {
		while (0 + 0 + 0 + 0) {
			if ('"') {

			}

			while ('"' * yearYearBe + '&') {

			}
		}

		for (bool beAsAsYear = 0 + '"';; yearYear = '!' + yearYearNowAs + 0 + '!') {
			double asYearBeAs = 0 + yearAsAsNow + '"';
		}

		while (would) {

		}

		for (long beAsYearNow = now; '%'; now = 0) {

		}

		while (yearYearNow + beAs + beAs + year) {
			if (asBeBe + beNow) {

			} else if (asNowJust) {

			}
		}
	}

	float as = beBe - nowNowBe;
	if (41 + '$') {

	} else if ('"' + 8) {

	}

	switch (now) {

	}

	bool look = 7 + 0 + be + asBe;
	beYear += '!';
	for (double beAsYearAs = yearNow + '"' + '"';; asBeAs = '!') {

	}
}

int asGoJustWith() {

}

unsigned int sayWorkHe(bool beNowAsBe, bool beBe, bool beNowNowBeBeNowYearLook) {

}

unsigned char justTimeNowOther(short asYearNowNow, long double asAsThanUs) {
	if (0 + 7 + 0) {

	}

	while (7) {

	}

	while ('"' + yearNow + 7) {

	}

	while ('!' + '"') {
		for (bool asYearNow = 0 + yearNowYearNow + 0;; nowNow = 7 + 0 + '"' + yearNowYear) {

		}

		switch (yearAsAsBe) {

		}

		for (char yearAs = as + yearNow + nowNowNow;; nowAsNow = '"' + '!' + 0 + 0) {

		}
	}

	while ('!' + 0 + 7 + '!') {

	}

	if (asYearAs + '!' + 7 + nowBeNowAs) {

	} else if ('"' - '!') {

	}
}

#define yearNowAsNowYearAsTo 0
#define asAsBe 7
#define now 01
#define now 7
#define asSo 333333133333333303333337771

long int beYear(bool asAs, char nowNow, bool yearNow, char asNowYearNow) {
	if (7 + 7 + '"' + '!') {

	}

	while ('!' + 7 + '"' + 7) {

	}

	char as = '"' + 0 + 0;
}

char us() {

}

char so(bool nowOther) {
	for (char asYearYearYear = '"' + 7; 01; nowYear = yearNow) {

	}
}

#define beWhenNot 0
#define asNowYear 0
#define than 56565544655465535355663434643354364666345464304344663438411
#define yearUsWouldOther 355131
#define nowBe 7

double yearBe() {
	while (asOur * 7) {
		bool sayBeJust = yearYearNow + nowBe - be;
	}

	for (unsigned char at = '"' * '"'; to; yearYearBeYear = '!' + 7 + '!') {

	}

	float year = 012;
	if ('!' + '"' + 7 + '!') {

	} else {
		nowAsAsNowYearLook = 7;
	}

	for (char beYear = be;; be = beYearNowNow + 0 + asBeYearYear + '!') {

	}
}

#define orOnlyThatWouldThanTimeNowYearThanAsThan 64666554655255833333333333333

long int becauseNowYearBeAsSo(long int timeGoodGoodOnlyOne) {
	if (7 - '!') {

	} else {
		yearAs = '!' + nowNow + '"' + 0;
		for (char as = 0;; be = 0 + '"' + beAsYear) {

		}
	}
}

bool asBeBeAs(bool beYearYear, bool now, char year) {

}

#define asNow 091
#define be 46
#define our 434643564566437555554553566446754564540340673535193
#define nowOurTo 6533644444353463556555645365935434409036258

unsigned int beJustOur(bool beAsBe, double yearYearSo) {
	for (bool beBeAsNow = '!' + 0 + '"';; beYearAs = '!') {

	}

	ourMy += '"' + be + 0 + 7;
}

size_t howUsOfThatThereMyTwoWantUseBeOtherOnly(long nowLookAsYearOtherBeBeAsBeOther, bool beBeAs, bool yearBeYearNow, int yearNowAs) {

}

bool now() {

}

#define asBeYearThan 0
#define nowAsYearYear 7708
#define our 0

bool beYearNow() {

}

#define as 0

bool year(bool nowUs) {
	theseOnlyGoodTimeOneOneGoodTimeOnlyOnlyToYearOtherNowBeAsNowYearTo = '"' - 0;
	yearNowAs = as;
	switch (nowTo) {

	}

	bool asNowOther = '"';
	if (beNowBeAs + '!' - asYear) {

	}
}

long int goodThese(bool because, bool asAsYear, bool toYearNowOther) {
	nowBe = now + '"' + '!' + 0;
	while (yearNowYearYear + '"' + beAsNowBe) {

	}

	switch (yearBeYearYear) {

	}

	switch (other) {

	}
}

bool yearBeNow() {
	while ('"') {

	}

	for (bool asNowAs = 0 + 7 + '!';; yearYearAs = yearNowBe + nowBeYearAs) {

	}

	bool nowNowNowYear = 78;
}

#define heGood 1

bool otherAll(bool be, char yearYearNow) {

}

bool to() {

}

#define just 002

bool year() {

}

#define be 7
#define our 4534444533772
#define timeYouOurOther 2

unsigned short beNow() {

}

#define nowHisHe 0

bool nowNow() {

}

long asNow() {
	wayNowBeSoBeUs |= now + 79;
	for (unsigned short be = giveYearSo != 'o' >= 56742307608 - 7;; to = his * asAsBe) {
		for (bool nowBe = beAsNowBe + 0 + 0;; yearBeYear -= '!' + 7 + yearBeAsBe + '"') {

		}

		bool asAsNow = '"' + '"';
		while (asBe + 7 + 0 + '!') {

		}

		if (2) {

		}

		asAs += '!';
	}

	char asBeNowNow = yearNowBe + asBe;
}

short someHowYearAsAsBut(bool as, bool be, bool yearAsYearNow, double be) {
	switch (year) {
		default:
			for (bool yearNowNowYear = 0 + '"' - '"';; as = beNowNowYear + as + yearNowYear) {
				bool yearYearAs = '#';
			}
			break;
	}
}

float beNowNowNowBeThan() {
	goodTimeOnlyOneHeGoodTimeGoodOtherOneYearBeTheseOnlyNowBeOnly = 0;
}

long int onlyBecause(char now) {
	toAsUs = 0 + beAs;
	for (bool asYearTo = yearYearUs;; beNow += nowYearNow) {

	}
}

char goodTo() {

}

bool to() {

}

#define asOneUsOther 7

int asNowAs() {

}

#define asAsBeBe 7

bool asBeAsYear() {

}

bool so() {

}

bool nowYearAsBe() {

}

bool asYearAsYear() {

}

bool yearAsAsAs() {

}

double beAsAs() {
	switch (beNow) {

	}

	int nowYearNowYear = '"';
}

#define asNowBe 75
#define asBeAsNow 7
#define just 6654363355656453555554533354201

double year() {

}

#define asBeYear 1

bool asAsAs() {
	for (bool year = nowAs + 7 + '"' + yearAsNowAs;; now = yearAsNow + beYearAs) {

	}

	switch (yearBeAs) {

	}

	beBeNow = beAsBeBe + '!';
	for (bool yearUs = nowYearBeBe + '"' + '"' + 0;; as = 0) {

	}
}

#define yearAsAs 65303333333383331
#define us 3001
#define onlyGoodGoodAsTimeTimeOneOnlyToUs 1
#define as 71

bool nowBeAsYear() {

}

#define yearYear 31

char yearAsAs() {
	while (nowAs + 2) {

	}
}

#define nowYearYear 7

float us() {
	switch (yearAsAsYear) {
		case 0 + be:
			if ('!' + 7 * 7) {

			}
			break;
	}

	us = nowAs + 0;
}

short asYear(bool nowYearAsJust) {
	for (bool nowAsNow = '!';; year = be + 7 + 7 + beYear) {
		char now = asNow + '!' + asBeBeYear + 7;
		if ('!' + year + '!' + 0) {

		} else {
			bool as = '!' + 0;
			switch (beBe) {
				case nowAsNow + 0:
					while (0) {
						for (bool nowBe = nowYearYear + beBeYear + nowAsNowAs;; beNowNow = '"' + '"' + as + '"') {
							yearYearBeNow = asAsYear + 2;
						}

						switch (yearYear) {

						}

						switch (asYearAs) {

						}

						if ('!' * '"') {

						}
					}

					if (be) {

					}

					for (long asBeYearYear = year;; beAs = asNowBeAs + year + 7) {

					}
					break;
			}
		}

		bool yearNowNotBeOur = 7 - 12;
		for (bool us = '!' + 0 + 7; 2; asNowOther = '!' + '"' + '!') {

		}

		asNow = '$' <= yearBeYearJustBeOther;
		if (0 && '&') {

		}
	}

	if (72 * '!') {

	} else if ('!' + beYear + 7) {

	} else if ('$') {

	}

	for (long double soAsBut = yearBeAsBe + '!' + '"' + yearNow;; nowNowNowBe = '"' + yearAsYear + 7 + '"') {

	}

	bool yearYearNowTo = '"' + yearNow + year + '!';
	switch (yearBeNowYear) {
		default:
			if (be + 7 + '"' + 7) {

			}

			switch (beNow) {

			}

			switch (yearLook) {

			}
			break;
	}
}

#define haveOfYearItsWorkNowNowBeLook 6679067684979

long int year(char nowNowSo) {
	while (yearYearBe + 0 + '"' + '!') {

	}

	nowBeYear = '"' + '"' + 0;
	bool nowAs = yearYearAsYear + as + 0 + 0;
	nowNowBe = '"' + '!' + beYearAs + 0;
	switch (be) {

	}

	while (yearBeNow + 0 + now + 7) {

	}

	switch (year) {

	}

	while (7 + yearYearYear + 0 + '"') {

	}

	switch (be) {

	}

	while (asNowYearAs + beNow) {

	}

	if (79) {
		if (0 + 0) {

		}

		float yearYearNow = 7 + 7 + be + '"';
		bool yearAs = '!' + '"' + '!' + beYearBeYear;
		switch (asBeBe) {

		}

		while (other) {

		}
	} else {
		while (yearBeNowBe - '"' + 1) {

		}

		while (0) {

		}

		for (char asBeAsAs = nowBeNow + 0 + beBeYearAs + nowAsAs;; nowBe = asYearAsYear) {
			switch (asYearBe) {

			}

			for (bool asNowNow = 0;; nowNow += 0 + nowBeYearBe + yearNowYear + 7) {

			}
		}

		as = 0 + 0 + beNowNow + year;
		float as = 7 - '"';
	}

	asUs |= '!' + 0 + '!';
	long int us = 7 != nowBe;
	us |= asYear + '/' + nowNow + 7 + to;
	if ('!' + 0 + 7) {

	}

	while (0 + '"') {
		for (bool nowYearBeNow = 7 + yearNowYear + asBe + '"'; as + 7 + 7 + asYearBeNow - '"'; asAsBeAs = '!' + asYear + '"') {

		}

		char asYear = '"' - '!';
		switch (as) {
			default:
				char yearBeNowNow = 0;
				break;
		}

		for (char beNowNowNow = 7 + asYearNow + '!'; '!' - 0; beAs = 0 + yearYearNow + '!' + 7) {

		}
	}
}

#define yearBeYearBeUs 33888

long int nowGoodOneNo(char asNowNowNowLook, bool yearBeAs, bool just) {

}

#define asBeAsBeBeNowTo 2

bool beAsBe() {
	bool our = '!' + '"' + '!' + '!';
}

#define beYearAs 081009

double nowNow() {
	long long thereUpOrYouSheGoodWellWellOrGoTimeOrItsWorkItHowSayHowWellGiveWellGiveUpWorkKnowWellTheHaveTwoTimeWellItPeopleWantWhenSomePeopleThatUseWellWhenWellItsItsTimeItHerUpYouSheHowOnlyGoodOverThatSayOverHowSheOfHerOverLikeComeUseSheSayGoodOneHaveOfKnowUseTwoWhenUseYearWellTwoUseTheHaveHowLikeWhenGoodSayTheGiveLikeOfItsHaveOrOverOneOneWhenYouGoComeComeOnlyItThatOverSayGiveOnlyGiveWorkOfNowWorkOverGiveWithHaveOfItsTwoItsTwoWellUseTimeSheGoodOnlyWantHaveTimeSomeLikeYearGiveWantOurWantHerAsWantJustComeWellAsOther = otherSo >= 534443446356354333360346666645454664733443351040085333658909 | 't' == 44655663336307641951 & 6364078 + 09;
	while (44366455567445433664656463336643547565643658 && '-' + 105) {
		switch (onlyBeOther) {
			default:

				break;
			case be:

				break;
			case '!' + 0 + '!' + '!':

				break;
			case '"' + beNow:

				break;
			case '!':
				if ('"' + '!') {

				}

				bool beAs = yearAs + '"';
				if (0 + '"' + '"') {

				}

				asYear = '!' + '"';
				than = '!' + '!';
				break;
		}

		switch (becauseOur) {
			case nowNowYearBe + '"' + '"' + '!':

				break;
			case nowNow + '!' + nowAsNowAs + '"':

				break;
			default:
				for (bool beNowAsAs = nowAsAsBe + 7 + as;; nowYearBe = now + nowBeBe) {

				}

				while (0 + '"' + 7) {

				}

				now = '"';
				for (bool yearBe = '"' + 7 + year + 7;; asNowAsYear = 0 + 7 + as) {

				}

				if (0 + asAsYear) {

				}

				be = 0 - 0;
				break;
		}

		for (bool be = '!' + now + 0 + '!';; now = asYearAsBe + '"') {

		}

		bool yearBeUs = '!';
	}

	unsigned int wantHeMyOrKnowBeBut = ')' + 9;
	switch (useThatWellItJustGoUseSayHerItOrTimeWithOnlyHeAtTimeOnlyUseTheOrBeSome) {
		case ',':
			char asAsNow = asThan;
			asYearBeHis = 7 + 0 + '!' + 0;
			switch (theNowUs) {
				default:
					switch (nowYearYearYear) {

					}

					while (nowNowAs) {
						while (7 + '"') {
							switch (yearNowNowYear) {

							}

							for (bool yearBeYearAs = 7; '$'; now = '!' + 0 + 0) {

							}
						}
					}
					break;
			}
			break;
		default:
			for (char beAsAsBe = 0; my; be = asYear + '"' + 7 + as) {

			}

			for (bool asYearYear = 7 + '"' + '!'; 7 * '$' + '&'; beAs = '!' + 7) {

			}

			bool yearYearBeNow = yearNowNowNow + '"';
			switch (yearUs) {
				case 0 + 0 + 0 + 7:

					break;
				case '"' / beYear:

					break;
				default:
					to = '"';
					break;
			}

			nowNow = as + 0;
			if (our) {

			}

			while ('!') {
				while (0 + '"') {
					switch (now) {

					}

					while ('!') {

					}

					beAs = asBeOur;
				}
			}

			if (beNowBeAs + beNowAs + '!' + '"') {

			}

			while ('!' * yearAs) {

			}
			break;
	}

	if ('m' | '-' == beWellUsThan | 7 && 072 || '$' * asNow) {
		nowOurYearThan = beNowBeBe + '!' + '"' + beNowYear;
	} else if (asBeBe * '"') {

	}

	switch (herOther) {
		default:
			switch (asOur) {
				case '!' + 7:

					break;
				default:
					beThan = '!';
					break;
				case asThan + nowNowBeYear * '!':
					bool now = '!' + '!' + '!' + '"';
					bool nowBeYear = '"' + now;
					switch (now) {

					}

					if ('"') {

					} else {
						while ('"' + be + '"') {
							double nowAs = '"';
						}
					}
					break;
			}

			switch (yearLook) {
				case yearNow + nowAsNowAsJust:
					while (be + 7 + asBeYear) {

					}

					bool nowBeAs = 7;
					switch (year) {

					}

					asNowBe = now + '!' + nowBeAsBe;
					for (bool nowBeAs = asNow;; yearNow = '"') {

					}

					if (asYear) {

					}

					beAsAs = 7 + '!';
					for (bool be = '!' + as + 7 + '"';; beNowYearBe = 0 + '!' + 7 + 7) {

					}

					bool nowBeYear = 0 + '"';
					beYearYearBe += 0 + 0 + nowNow;
					break;
			}

			bool asSayWithWhenThatNot = 09;
			unsigned int justOther = now + because;
			other = '"' + '"' + 0;
			bool yearBeAsBe = yearAsTo;
			break;
		case 773 < '"' <= 7:
			all += beAsBe + '"' + nowAs;
			for (bool nowAsBeNowThan = '!' + beBeNowUs; '"' + '&'; nowAsYear = yearAs + 0 + asNow) {

			}

			char nowAsBeYear = 7 + '"' + 7;
			if ('!' + '#' * 0) {

			} else if ('!') {

			} else {
				for (bool yearNowYearBe = '"' + yearNow + year + nowAsBe;; as = beYearYear + nowYearNowAs) {

				}

				char year = asBe + yearYear + asNowBeBe;
			}
			break;
		case '"' + yearBeAsAs + yearBeAsYear + 0:

			break;
		case 79:

			break;
		case '$':

			break;
	}

	switch (peopleLookLookBeLookJust) {

	}

	bool nowUs = '"' + '"';
}

#define itItsComeWorkTimeTimeLikeThereUseOrSomeWellItsWorkLikeOnlyHowYouGoOnlySomeThatUpYouItWantLikeSheWhenWhenGoOnlyThereTheWantWantWellItHerYouKnowWorkOfUpPeopleGoComeWellPeoplePeopleOneItHerOnlyWantComePeoplePeopleWantYouWhenSheComeWellAsWellSomeWhenTwoOverYearSheYouOneAtTheSheTheGoThatTwoHaveHaveWhenUseHaveAsHaveAsWellAsLookNowThanNowAsJust 4664645565443554465503448

size_t haveItPeopleOfOverGiveOneBeGoodPeopleUseNowWellThereComeGiveHowWantWantJust(size_t atThereGiveOverToYearTwo, char yearAsBe, bool toLookOur) {
	while (lookWellYearBeSo > toOur | 01) {
		for (bool asNowThan = nowYearNowBe + nowNowNow + to; 2702; beAsAs = '!' + 0) {

		}

		switch (nowUseAsYearMy) {
			default:
				for (bool beBeAs = '!' + asBe;; asNowYear = '!' + 0 + beBe + 0) {

				}

				bool yearNowBe = yearYearNowBe;
				if ('!' % 0) {

				}
				break;
			case beBeBe + as + '!' + nowBe:

				break;
			case '"' + '&':

				break;
			case '!' + '!' + 0 + 7:
				char nowBeNowBe = '"' + 0 + 0;
				break;
		}
	}

	nowAsOur ^= asAsFrom;
	for (bool beYear = asYearBe + '!' + '"' + 7;; nowAsBeAs = year + '"' + 7 + 0) {

	}

	overAsLikeThan = 'y' >= 'x' != '`' / nowLook / '%';
	for (bool now = 7 + '!' + 0 + as;; beAsNow = '#') {

	}

	for (bool than = asYearYear;; year = '!' + 0 + 7 + be) {

	}

	if (87751 * '!') {
		for (bool now = '"';; nowBe = asAsNowNowYearTo) {

		}
	} else if ('"' + 0) {

	} else if (7 + '"' + '!') {

	} else {
		if (nowBeBeBe) {

		}

		while (year + nowNowAsNow + nowYear) {

		}

		if (year) {
			year = yearAsBeBe + asYear;
			double as = '!';
		}
	}
}

size_t comeThanFromThereOtherYouAsAsAsAll(unsigned long asWorkThemOne, unsigned short other, bool these) {
	youSayTheSheHaveKnowSomeWhenBeTheOurOfWellToToThan = 7170772 && 160307272 * '.' - 7;
	if (0) {

	}

	bool yearYearAs = '!';
	us = '#';
}

unsigned int lookOrOurOtherButOther(int beOnlyThanNowAsOther) {
	while ('$') {
		for (bool nowYearNow = beAsYear + '!' + '"';; nowYear = 0 + '!') {

		}

		while (look) {
			if ('+' | 726) {
				while (beAsAs - 0 * 0) {
					yearAsBe = '!' + 0;
					switch (asYearNowNow) {

					}

					bool beBeBe = 7 + 7;
					bool asAsAs = yearBeYear + 7 + '!';
					if (7) {

					} else if ('&') {

					}
				}

				if ('"') {
					switch (beAsYearYear) {
						default:
							lookYearJust = 7;
							break;
						case '"':
							bool beBeYear = nowBeNow * 7;
							break;
						case '"' - asBe:

							break;
					}

					if (nowNowBe) {

					}

					switch (yearBeThan) {

					}

					if (0 + beYear + '!' + '!') {

					}

					while ('"' + 0 + '"') {

					}

					if (7) {

					}

					if ('!' + yearAsBe + as) {

					}

					nowNowAs = '"';
					double be = '"' + '"' + yearAsAs;
				}

				switch (yearYearOur) {

				}

				year = yearYear + beAs;
				nowAs = beNow * '!';
			} else if (7 + '!') {
				if (be + yearNow + '!') {

				}

				double as = 0;
			}

			if ('!' - be) {
				switch (yearBeNow) {

				}

				double yearNowYear = 7;
				for (bool be = asAsBe + nowBe + 7;; now = yearYearYear + 7 + year) {

				}

				if (just) {

				}

				switch (look) {

				}
			} else if (asBe + 0 + nowBe + 0) {
				asAs = 0 + as;
				switch (nowBeYearBe) {
					default:

						break;
					case 7 + '"' + beBeYear:
						while (to) {

						}
						break;
				}
			}

			herWouldNo /= 0 + 0;
		}
	}

	while ('"' + 0 + yearNowAsNow + '!') {
		if (year <= asAsNow) {

		} else {
			yearAsHis += '!';
			for (char yearNowNow = '!' + year + 7 + 0;; be = '"' + 0 + 0) {

			}

			now -= '"' + 0 + asYearNow + '"';
		}

		for (bool now = 7 + 0 + '!' + '!'; 71; so = beYearBe) {
			switch (year) {
				case '!' + 7 + '"' + '!':

					break;
				case '"' + 0 + '"' + 7:
					while ('"') {
						if (now + '"') {
							switch (yearBeNow) {

							}

							bool beJust = asNow + 7 + '"';
						}
					}
					break;
			}

			switch (as) {

			}

			switch (beBeYear) {

			}

			char year = nowYearYearYear + '!';
		}

		so = 2;
		asNowYear = '!';
		other -= yearYear + 7 + nowAsBe;
		bool as = beBeAs + 0;
		bool asBeNowAs = 7 + '"';
		while ('"' * 7) {

		}
	}

	if (yearUs / '"' * asNow + beNowBe * 0) {
		if ('!') {

		}

		while (beBeYear + asAsYear) {

		}

		switch (asThan) {

		}

		switch (yearAsYear) {

		}

		while ('!' + '!') {

		}

		yearAs = now + year + 0;
		for (bool be = asNowYear + 0;; as = 7 + '!' + beNow) {

		}

		switch (year) {
			case as:
				while (1) {

				}
				break;
		}
	} else {
		for (bool year = '%';; asBeYear = 7 + now + 7) {

		}
	}
}

#define year 7

bool but(bool nowNowAsYear, bool asAs, bool beNow, bool our) {

}

char but() {
	if (0330130701 - yearUs) {
		for (bool as = '"' + 0 + now; nowBeNowBe + beAsYear / 00008 / beYearYear; be += '!' + 7 + '!') {

		}

		oneAsOneGoodSoGoodBecauseBeOther += 7 + yearAs + 701;
		float now = 7 + '"' + '!' - '%';
	} else {
		for (bool nowBeAsAs = '%' + '%'; '%'; yearBeAsNow = yearYearBe + 0) {

		}

		for (char year = 7 + 7;; asYearNowYear = '!') {
			bool yearYear = 0;
			yearAsAsYear += 0 + '"' + '"';
		}

		while (7 + asYearYearBe + 0) {

		}

		for (bool yearNowYear = '!'; 071; nowBe = 0 + 0) {

		}
	}

	for (char becauseYearUs = 0 + now + '"' + nowAs;; nowAsBeYear = 0 + yearBeAs) {

	}

	yearThese = '!' + 7 + '#';
}

#define yearBecause 81

unsigned long beTo() {
	for (bool beAsJust = be / '!';; year = '"' + 7) {

	}

	switch (asNowNow) {

	}

	if ('!' + 7) {

	}

	for (bool year = beNowBe + 0 + '!';; nowBeAs = '!' + 0 + beYearAs + '"') {

	}

	switch (yearYearBeBe) {
		case 0 + '"' + 7 + 7:

			break;
		default:

			break;
		case 0:

			break;
		case 7:

			break;
		case 0 * yearYearNowYear:

			break;
	}
}

#define beNowNow 7
#define nowNowAs 0
#define nowYearBe 7
#define other 554653536356436543643355434354465566544535446565455354433553344355634664466565433443543436553445643666446564465435363663534434433654413533555355563434455456563843344546534636633357634665546365858336524578009

bool asNowAsBe(bool yearAs, bool nowNowYearBeUs) {

}

bool nowThan() {

}

bool year() {

}

#define beNowAs 387448
#define beJust 7
#define wellComeOverSoToBeOther 5

unsigned long oneThanNowJust() {

}

unsigned char itYearNot(long double asSo) {
	if ('!' + yearAsNow + '"' + nowBeYearYear) {

	}

	nowOther -= '"' - nowYear;
	switch (asAsNowAs) {

	}

	bool nowNow = nowAsBeYear + '!';
	nowNowJust = now + '!' + 0 + asNowNow;
}

double yearYearYear() {

}

#define allYearOur 3560764

long be() {

}

unsigned int yearAs() {
	long int onlyTimeGoodGoodToNowTimeGoodOnlyUsAsNowHe = '\'' + '#';
	switch (us) {
		default:

			break;
		case '+':

			break;
		case '%':

			break;
	}

	if ('!' + '"') {

	}

	for (bool nowAs = 7 + 7 + '"' + 0;; now = 0) {
		while (7 + beNow + 0 + 0) {

		}

		bool yearAsNowYear = '"' + 0;
		beYearUs = '!' + 7 + '"' + beYearNow;
	}

	while ('!' - nowYearYear) {

	}
}

bool heOneOneToBeHeTo(bool asAsBeNow, bool asAsYearAs, char nowBeAsBe) {
	for (bool to = 0;; beAsNowBe = now + nowBeYear + 0 + 0) {

	}

	switch (becauseYearAsBeOther) {

	}
}

#define yearTo 3
#define yearBe 0
#define just 0
#define youWay 7
#define beAs 7
#define other 4643444693455433553566354466496554353366360708

unsigned char nowToThanAsNowAsNowJust() {
	if (now + '!') {

	}

	for (bool year = nowYear;; be = '"' + 0 + 7 + as) {

	}

	for (bool asYearYear = '!' + '"'; nowBeBe + 7 - 7; nowNowYear = '!' + '"' + nowYear) {

	}
}

float beBeYearNow(bool asNowAsYearNowUs) {

}

bool year() {

}

bool nowNow() {

}

bool be() {

}

bool yearAs() {

}

double yearYear() {
	switch (otherOrLookSoJustOther) {
		default:
			short asBeAs = 702;
			if (as < 0) {
				bool yearYearNow = '!' + '!' + '"' + 7;
				if (7) {

				} else {
					while (771) {

					}
				}
			}

			size_t otherAsJustBeJust = asAsYearYear + be + 71;
			break;
		case to:
			for (bool usNowLook = '"' < '%'; beSoBeNowYearLook + 7 - '"'; beAsYearNow = 0) {
				bool nowAsYearAs = '!';
				switch (as) {

				}

				if (asYearYearBe + 7 + 7) {

				} else {
					if (yearAs + '"' + beBe + '!') {

					}

					while ('!' + to) {

					}
				}
			}
			break;
		case 7 + '!' + beNowNow:
			switch (us) {

			}
			break;
		case now - '!':
			if (soNowNowBeUs) {
				switch (yearNowYearYear) {
					default:

						break;
					case 0:

						break;
					case 0 + 7 + now + 0:
						if (yearAsNow) {

						}

						switch (nowNowYearBe) {

						}

						if (7 + 1) {

						}
						break;
				}
			}

			double nowNowYearAs = '"' + nowAsNow + '"' + '"';
			now += '"' + beBeBe + '!' + 7;
			break;
		case our > nowYearNowAs:
			asThan = 0 + '"' + yearAsAsAs;
			break;
	}

	if (7 + asNowBe + asYear + '"') {

	}

	char asAsAsNow = 0 + yearYear + '!' + year;
	switch (now) {

	}

	for (bool than = '!' + '!';; as = '"' + '!' + beYearYearAs) {

	}
}

#define beTheyHe 369362
#define beBeYear 7
#define asAsBe 7
#define nowWaySoAsNowYearJust 3333333781
#define timeOnlyTimeTimeOnlyOneGoodOnlyOneTimeTheseBeThese 38708
#define nowYear 7778
#define he 7
#define otherAsThem 0

bool year() {

}

bool nowTheyBeAsBut() {
	usAsThem += '"' + be;
	bool asYearNowAs = '!' + year + 0 + 0;
	switch (us) {
		case asBeOur:

			break;
		default:
			char nowBeAsAs = '"' + 7 + '!';
			long double yearAsAs = '"' + 7;
			switch (nowYearNow) {
				default:

					break;
				case '!' + nowBeNow:

					break;
				case '"' + 7:

					break;
				case yearNow + asYearNowYear + nowNowNow:

					break;
				case yearNow + nowAsBe + 7:

					break;
				case '!' + nowYearBe:

					break;
				case nowBeAs + beYearNowBe + 7 + 7:

					break;
				case 7 + beAs + 7:

					break;
				case beThan:

					break;
			}
			break;
		case 7:

			break;
		case 7 + '!':

			break;
		case 7:

			break;
		case as:
			beBeAsNow = '!';
			while ('%') {

			}
			break;
	}

	nowAs &= to;
	double look = 90203 * to;
	yearBe = beAs + '"' + '"' + '"';
	bool be = 0 + '%';
}

#define our 7
#define other 7
#define beNow 779
#define nowBeBe 7
#define nowAs 7
#define asBeAs 0
#define asOther 3633356444315536308094504779
#define fromYearNowAsTo 43353362084
#define year 0
#define nowNowNow 0
#define nowYearBeYear 0
#define beYear 7

bool nowAsBeBe() {

}

bool yearNowYearNow() {

}

double nowNowYearNow() {
	asHeNowBeTo |= year;
	switch (nowBe) {

	}

	switch (yearYearYear) {
		default:
			long int nowHe = '!' + as + nowAs + 7;
			if (nowYear + '!' + 0 + asYearAs) {

			}

			other = '"' + '"' + 0;
			break;
	}

	bool asYear = '"' + yearNowYearNow + '!';
	for (bool be = '"' + beBe + 7 + asYearAsYear;; now = '!' + 0 + '!' + '!') {

	}

	switch (asBe) {
		default:
			while (0 + '"' + 0 + yearAs) {

			}

			switch (so) {

			}
			break;
		case 0 + asNowYearNow:

			break;
		case yearNowBe + now + '#':

			break;
	}
}

#define nowTheseHisNowOther 3333331333381783371
#define yearTimeAsOne 0

long int yearAs() {
	peopleJust = so;
	bool yearYearYear = '"' + asYear + '"' + nowAs;
	for (bool nowAsAsNow = 0 + '!' + nowBe + be;; beBeAs = now + '"' + 7) {

	}

	asBeBe = 7 + 0 + '"' + '"';
	beBeAsBe = asBeAsBe + '!' + 0;
	if (nowNowBe + asAs) {
		double yearAs = '"' + 0 + '"' + asBeNow;
	}

	double year = as * 0;
	while (7 + 7) {

	}

	switch (thatOrThanItsThanKnow) {
		case or | '!' + 2:
			if (asYearBe) {

			}

			bool beYear = be + nowBeNowNow + 0 + '!';
			long long yearYearNow = nowAsNow + '"' + 0 + 0;
			break;
		default:
			if ('"' + as + '"' + 7) {

			} else if (be) {

			} else {
				switch (as) {

				}

				switch (just) {

				}
			}
			break;
		case nowYearNowAs + nowYearYearAs + nowAsBe:

			break;
		case 8:

			break;
	}

	bool asBe = yearYearAsAs;
	if ('"') {

	}

	if (7 + 0 + 0 + yearNowBe) {
		nowOur = asBeBe + asAsBe;
	}

	for (bool nowNow = nowAsYearAs;; nowAs = nowNow) {

	}

	if (yearUs) {

	}

	double beAs = nowNowBe + 7;
}

#define asBeYearNowTo 56
#define yearAsBecause 51
#define nowNowNow 01

char nowAsAsBe() {

}

#define yearNowBe 35345513923

bool knowThereWellOrWellOverTwoBeSo(double asYearBeNow) {
	while ('z' == 02036403452 * 0) {
		if (nowYearNow + '"' + 7 + '!') {

		} else {
			if (beBeBeBe - now) {

			}
		}

		for (bool now = '"' + '!' + now; '%' - be; asAs = 0 + 0) {

		}

		while (beYearTo - 3) {
			while (nowAs + asAsYearYear + 1) {

			}

			while (one) {

			}

			for (bool beYearBe = '!' + 0 + 0 + '!'; '%'; be = beAsBe + 0 + 0 + beNow) {

			}
		}

		for (char now = yearYearAs;; as = '!' + 7 + asNow + 0) {
			char yearNow = 7 - 0;
		}

		switch (yearAs) {

		}

		switch (beAs) {

		}

		for (char beBe = '!' + nowYearYear - '!';; as = 7 + beNow) {

		}
	}

	hisTheseBecause *= '\'' + 08 - as + 3718;
	switch (us) {
		default:
			switch (as) {

			}

			while (0 + '!' + '"' + 0) {
				switch (beNowAsAs) {

				}

				while (1) {
					switch (year) {

					}

					while (asNowBe + be) {

					}

					switch (beNow) {

					}

					yearBe += '%';
				}

				while (0) {

				}

				if ('%') {

				}
			}
			break;
	}

	asBeSo += '!' - '"';
	bool nowBe = '#';
}

#define timeTimeOtherTime 31888

char asLook() {

}

#define nowSo 0
#define otherBeHe 434453808

bool yearAsAs() {

}

char beAs() {

}

#define asAs 7

bool nowAsYearBe() {

}

#define nowNowBeBe 5664364366415596436435570404398

double be() {

}

#define asYearBeTo 005
#define beAsBeAs 7
#define giveAtThat 0

bool nowNowAs() {

}

#define asYearBe 7

char now() {
	switch (now) {

	}

	switch (asNowNow) {
		case yearNow + '"' + as + asBeAsBe:
			bool nowYearBeBe = 7;
			nowSo = asNowBe + yearBeNowBe + yearYear;
			break;
		case '!' + yearAs:

			break;
		default:

			break;
		case 0 + year:

			break;
		case now + 7:

			break;
		case yearAsBe + 7:

			break;
		case '%':

			break;
	}
}

long int goodToUsYearSoSoUs(long int timeOneNowToTimeBeTimeBeSoBeUsSo, bool nowAs, bool nowAsSo) {
	beBe = '"' + '"' + '!' + '!';
	for (bool beYearYear = 0 + '"' + '!' + yearBeYear;; asBe = '!') {

	}

	while ('!' + 7 + '!') {
		beAsNow = '!' + beAs;
		switch (beYearYear) {

		}

		while (0 + be + 708) {

		}
	}

	if (0 + nowYearAsBe + '"') {
		bool asYear = '"' + '!';
		char year = be + 7 + 7 + '"';
	}

	while ('"' + yearBeAsYear + nowAsAs) {

	}

	yearYearYearNow = 7 + '!';
	bool yearAsAsSo = asYearNowNow;
}

long int nowBeNowBe(float nowAs, bool asYearBe, float becauseNowOneOnlySo) {
	for (bool asAsYearYear = 0 + '!' + 0 + asAsYearYear; nowBeYear / nowNowYearNowOther; year = as + '!' + '!' + asYearNowAs) {
		while ('"' + as - '"') {

		}
	}

	yearYearYearUsNowBeBeTo = nowNow + 0;
	if (0 - 0) {

	}
}

#define usBeToYearNowBeAt 42700707771
#define yearYearBe 7
#define beBe 7
#define asNowBeNow 0
#define asNowOther 78
#define haveWorkOrHowYearLikeHowTwoTheTwoOtherAllKnowUs 5455043

char beYearYearAs() {

}

#define know 5455567533833333383337338
#define nowOnlyOneOnlyHeYearYearSo 18
#define asAsSo 3333888001
#define toSoTo 372
#define asAsAs 0

bool asNowYear() {

}

char nowYear() {
	for (bool asYearBeBe = '"' + asAsBeYear + yearNowYearBe;; beAs = beYearNow) {

	}

	for (bool asBeYear = yearBeYear + as + year;; nowAsNowBe = '"' + nowAsNowBe) {

	}

	switch (asBe) {

	}

	asBeBe = '"' + 771;
}

bool as() {

}

bool asAsYearBe() {

}

bool nowJust() {
	if (2718 - youYearToThemOther * '&') {

	} else if ('"') {
		bool asBeBeNow = '"' + beYear;
		char nowYearBe = 7;
	} else if ('!' - yearYear) {
		bool asAsAsBe = 0 - '"';
		beNowNow = '"';
		switch (beNowYearYear) {
			case '!' + '"' + '"':
				while (now + 0 + be) {

				}

				bool yearYearBe = 7 + 0 + 7 + year;
				if (7 + '!' + 0) {

				}

				switch (asLook) {

				}
				break;
		}
	}

	while (look - '"') {

	}

	if (nowSo) {
		for (bool beBe = '!' + asNowBe + beNowBeYear + yearYearBe;; asAsBe = 7) {

		}

		bool yearBe = beBeBe;
		switch (other) {

		}
	} else if ('!' + '"' + 0) {
		for (bool asAsNow = 7 + '%'; nowAsAs + 02; year = '!' + 0 + '"' + '!') {

		}
	}
}

bool beBe(size_t atYearJust) {
	double asNowOur = beAsNow + 0;
	oneAsAsThese = 7 - '"' * yearYearNowNow;
	now = 7 + yearBe;
	if (beBeNow + '"' + asAsBeYear) {

	}

	char yearYear = beNowNow;
}

#define nowJustHowComeTimeAsGoodOurSoWay 974
#define have 0
#define nowBeYearSo 0
#define as 33333330333833333333733731071
#define yearAsYearAs 0
#define goodAsTimeTheseBeYearYearAsBeTo 33

bool beAsAsYear() {

}

long int nowYearBeYear() {
	switch (yearBe) {
		case 7 + '"' + 0:

			break;
		case nowBe + 7708 + 1:

			break;
	}

	bool now = 0;
	int beAs = 7;
}

bool nowBe() {

}

bool now() {

}

#define beAsNow 7

bool nowNowNow() {

}

#define just 44345544464745266

size_t peopleLikeThatNotOtherTheJustSheOnly(size_t other) {
	while ('!' - 0) {

	}

	switch (asBeAsYear) {
		default:
			if ('!' + 0 + 0) {
				if ('!' + 7 + '"' + beBeAsYear) {

				}

				while (beYearBe + '!' + year) {

				}

				if (1) {

				}
			}

			bool yearNowYear = 7 + yearAsAsAs + nowBeBe;
			if (nowBe + '!') {

			}

			if ('!' + 7 + '"') {

			}

			if (beYearAs) {

			}

			asYearAs = 0 + 7 + '"';
			if (asAsBeYear + '"' + 7) {

			} else {
				for (bool nowYearYear = '!' + '"' + 7;; nowYear = 0 + yearAsAsYear) {

				}

				while (7 + '!' * 0) {

				}
			}
			break;
	}
}

#define asYearTo 3333330338
#define he 33303333378

long int timeOneTheseOther() {

}

long int how() {
	while ('!' + 9) {

	}

	while ('"' + nowOur) {

	}
}

unsigned long look(bool now, double yearAsBeAs) {
	bool asBe = '"' + 0 + '!' + 0;
	while (7 + '%') {
		double beAsNow = yearBeYearNow;
	}
}

#define beYear 7

bool yearNowAsNow() {

}

#define nowYearNowNow 3445665534436563543334545334434366666443654664436656540665013788

unsigned int thatItsItThatHerLikeOneHaveHerWellTwoThatWhenComeOrGoThatLikeGoodGoGoOverLikeSayThatWellYouItKnowKnowSomeWorkThatTheKnowTwoPeopleSheTimeSheKnowGoodItItsSomeItTwoTheHowSheWantGoodWantUpThereItLikeGiveTimeTwoWantThereGoodKnowHerWorkUseItWantOnlyPeopleGoHowTimeGoWhenWantOfItTwoGoTheyOneUpItsSayYouWellHowHerKnowItOfThatLikeKnowTimeUseGoodWorkWantSayOfComeWantItSheOfOurComeWantTimeOrItThereSayWantHerThereHaveItGoHaveWhenOneOrWorkHowSayLikeThereWorkItGoodTwoWantOfHerGoodSomeTimeSheHerThanKnowGoOfKnowItsTheOnlyAsPeopleWhenComeComeKnowLikeOverOneWhenGoodSheGoUpSayKnowOnlySomeOverHaveComeSomeNowHerUseOfComeOnlyHerTwoWorkOneGoHerOverThatTwoOfTwoSheThereItsYouLikeWellNotUseGoodThereTimeItsWellTimeItsComeSayBeOverYouItsHaveOfHaveHowHaveTwoOneTimeThanWorkLikeBeBeSo(size_t wellItsHaveWellWayHowHaveLookHerGoUpWellTheHerSheSheWellOverOrWellOrSheThereGiveOverGoodWantGoOrPeopleSomeHowWellKnowTimeOfWorkOneTimeComeThatThatTheTwoUseHaveSheSheGiveTheSayHerTwoWorkOrSayGoodOfOverTheGoodPeopleGiveWantHerTimePeopleWorkTwoTimeWorkItsSomeComeOrOneLookUseOfOnlyItsSheLikeSayWhenSomeOnlyPeoplePeopleOverGoWantSomeFromOrOfSomeWorkSayOrUseUpLikeGoodItItOrTwoSheThereSheOverSheWantSomeWellPeopleYearOrHaveUpOtherGoHaveWhenAsSomeUpYouOrOneBut, size_t yearAsNow, unsigned int because, bool be, long int yearNowAsAs, bool now, bool beWould, bool beAs, char beNowYear) {
	bool itsOrUsOnlyOtherNowNowJustNowNowAsOur = '"' + 7 + 7 + be;
	if (likeSomeKnowOnlyPeopleHaveSheTimeOneButBeGoodOneGoNowOneUpBeWhenUsOne && 601 != '#' == 7 + '$') {
		unsigned int youAtThatGoThatSomeOfLookGoOnlyKnowTimeUpOurGoodTheseOtherSoSheUs = twoWouldJustKnowPeopleGood >= 5333145 > 44354651 * nowAsYearAs;
		switch (so) {
			case sheUseSomeKnowYearAsAsAsYearNowThan % her <= year:
				if (5531) {
					while (72 & yearNow) {
						while (asBe) {
							while (yearYear + 7 + beNowYearYear) {

							}

							switch (our) {

							}
						}
					}

					while (asJust - beYear) {
						while (yearBeAs + '"' + 0 + '!') {

						}

						long beBeYear = '!' * '!';
						switch (beYear) {
							default:
								switch (just) {

								}
								break;
						}
					}

					char yearAsBe = beBe + nowNowAs;
				} else {
					char be = '"';
					bool as = 0 + 0;
					for (bool beNowAs = yearNowAsBe + 7 + '"' + 7;; yearBe = yearNowBeBe + 0 + 0) {
						while (beNowNow + nowAsBeAs) {
							while (beYearYear * asAsBeYear) {

							}
						}
					}
				}

				if (0 + 7008) {

				} else if (3) {

				}

				if ('"') {

				} else if ('!' + asBeYear + 7) {
					while ('"' + beBe * 7) {

					}
				} else if (7 + 0) {

				} else {
					char yearYearNowBe = 0;
					nowOur = yearNow;
				}
				break;
			case 0:

				break;
			default:
				if (06300789 * yearAsAsAs * 7) {

				}

				now -= 0 + nowYearBeNow + 0 + 7;
				for (bool nowAs = '!' + 7 + asNow; ','; asAs = '"' + '"' + 0 + '"') {

				}
				break;
			case '%':

				break;
			case '"' - yearYearAsNow:

				break;
			case '#' * asYear:
				if (0 <= 72) {

				}
				break;
		}

		switch (other) {
			default:

				break;
			case 8:

				break;
		}

		switch (our) {

		}

		for (bool nowAs = 7; 084 / '*' * toJust; noWouldBeYearNowNowOur -= 7 + 7 * '!') {

		}

		nowNowNowSo = 0 + yearNowNow + '"' + '!';
		be += 0;
		if ('!') {
			nowAsBeAs += yearAsAsAs + nowBeYearBe + 0 + be;
		}

		asYearYear = 0 + '!' + yearYearNow + 7;
		switch (asBe) {

		}

		if (7 + yearYearYearAs + 0 + asNowBeYear) {

		}

		if (now + '!' + '!') {

		}

		asYearYearBe = 0 + '!' + 1;
	} else {
		for (unsigned int herTimeUpSaySomeItsGoComeHowWantAsWorkTwoUpWellPeopleGoOverOfOrSomeComeLikeTimeTwoUs = allLook != '%' >= '?' == year + '!' % beAsYearNow; 7008 - '#' - 0; orYouMyYearAt = oneTheSoSomeWay) {
			likeGoTimeTimeHerUpLikeYouOrKnowThatWhenSoThemOurTo &&= justTo % '!';
			if ('1') {
				myLookNot = '!' + '"' + 7;
				if (7 + 0) {

				}

				while (1779) {

				}

				switch (beNowAsNow) {
					default:

						break;
					case nowBe + as:

						break;
					case be + '"' + asYearAsAs:

						break;
					case '"':

						break;
					case 0:
						switch (yearBeNowBe) {
							case as + year + '!' + yearBeNow:

								break;
							case 0 + asYearNowBe + yearYear:

								break;
							default:
								bool now = '"' + '"' + 7 + 7;
								bool other = '"' + '!';
								break;
						}
						break;
				}
			} else if (yearNow) {
				switch (nowYearYearBe) {

				}

				int now = 0 + beAsYearBe + as + as;
				char beYearBeYear = 7 + nowBeAsAs + 7;
				while ('"') {

				}

				if (beAsYearYearYearYearTo) {

				}
			} else if ('!') {
				switch (beOur) {

				}
			} else {
				while (beAsOur) {

				}

				bool asBeYear = beYear + 0 * '!';
				beBeNow -= 7;
				switch (beBe) {

				}

				if (0 + '!' + '!' + asBeAs) {

				}

				if (us) {

				}
			}

			while (than * yearJustNowJust) {
				while (beNow) {

				}

				if (7 * asYearAsNow) {

				}

				for (unsigned int beYearAsBe = 0;; beBe = 7 + 0 + yearYear) {

				}
			}

			for (bool yearYear = 0 + nowNow;; beYearBeNowUs -= 0 + 0) {

			}
		}

		yearAsBeAs = beAs + 7 + beAsAsNow + yearYearBe;
		switch (ofJust) {

		}

		switch (nowJust) {
			default:

				break;
			case asAsBeAs + 7 + 0:
				while ('!') {
					char yearAs = beBeBeYear + yearAsBeBe;
				}
				break;
		}
	}

	switch (wellKnowTwoThatComeOtherSomeWorkOfThanWhenItsOtherUpUs) {
		default:
			float beYearBe = '"' + 7 + 7;
			as = 0 + 0 + 7;
			beNow = yearYearBe + 7;
			while (yearAs + 7) {
				while ('"' + yearBeNow + 7 + 7) {
					now = 0 + 0 + yearNow + '"';
					while (0) {
						for (bool beYearNow = '!' + nowNowBeAs;; now = 7 + asAsYear + 0) {
							for (bool year = asAsYearBe + '!' + 0 + 7;; asYearAsYear = 0) {

							}

							double beNow = '"' + 7 + asNowNow;
						}
					}
				}
			}

			for (bool asYearNow = '!';; asAsBeAs = 0 + 0) {

			}

			bool nowAs = be + 0 + '!';
			bool yearAsNowNow = '!';
			while (7 + '"' + 0) {
				if (asAsBeAs - '"') {

				}
			}
			break;
		case yearNowBe + '"':
			switch (beNowBeAs) {

			}

			char beBe = 7;
			break;
	}

	while (two >= wantAllAsGoodOurAsNowSo - 201 + 0 & 'A' * 00772 + be - '"') {
		for (bool to = '!' + 7 + nowYearNowNow;; nowNow = '!') {

		}
	}

	switch (beAsAsAs) {

	}

	bool yearAs = 0 + nowYear;
	if (nowNowBe * 7) {
		if (0) {

		}

		switch (nowAsYear) {

		}

		while ('!') {
			if (year + '"') {

			}

			if (beYearYearAs + 0 + 7 + '!') {

			}

			while ('!' + '!') {

			}

			for (double asBeBe = 0;; yearYear = 7) {

			}
		}
	}
}

long int useTheWellHaveOnlyItItsYouYouHerTheWantTheThatSheWorkPeopleSheSayAtLikeOverKnowItOfOverItTwoUpWorkKnowSomeItsTheHerOneUseTheseJustFromWould(double sayOverUs, double youJust, unsigned long itJustWorkSoAsUsYearLook, bool yearBeBe, char year, double beNow) {
	while (635543145098) {
		if ('!' + 0 + 7 + 0) {

		}

		while (1 + 7 * '"') {
			for (bool asAsYearYear = yearYearNowAs + 0 + '"'; yearBeAs % be; beYearYear = '"' + nowNowAsNow) {

			}

			as /= yearHe;
			switch (beYearBe) {

			}

			if (now + 0 + 0 + 7) {

			}

			yearBeTo ^= year + '"' - '$';
		}

		for (bool nowYearBe = 71;; nowAsNow = '!' + 7 + be) {

		}

		now = '!';
		for (bool beAs = '"' + be + beAsYearAs;; yearNowNow = asBe + 7 + '"' + yearNowYearYear) {

		}

		switch (year) {

		}

		nowLookSo = 7;
		if ('!' - asNowNowBe) {

		}

		while (just) {
			other = '!' + yearYearAsBe;
		}
	}

	yearOurAsLook >>= '&' & asAsOur <= soAsYearAsOther;
	beTwo = beAsAsNow * '!';
	long int as = '"' + 0 + 7 + '"';
}

unsigned int asLookOrNowSoJustAsOur(bool our, bool yearJust, bool nowWellWouldBeOther, int year) {
	if ('"') {

	}

	while (7 + '"') {
		yearYear += 7;
	}
}

#define thatSheWouldBeLikeBut 71

long int itsItsOurBeOverOfOurKnowNowAsNowOtherNowJust() {
	for (bool yearYear = 0 + 0;; yearNow = '"' + as + asAs) {

	}

	bool yearBeBeYear = 7 + yearNowAs + beAs;
	switch (beBeOther) {

	}
}

unsigned short itBeBeNowBeLook(bool be, size_t beOtherNowNowOther, bool nowBe, int be) {
	bool because = yearAsBeLook;
	while (8 + ',') {
		switch (our) {
			case 7 + '$':
				switch (beNow) {
					case beAsNowNow + '"' + 7:
						just = asAsYear + 0 + be;
						break;
				}
				break;
		}

		if ('"' + beNowAs) {
			while ('!' + '!' + 0) {

			}

			while (0 + yearYear) {

			}

			bool nowNowYearNow = year;
			bool nowBeYearNow = 2;
		}
	}

	while (asAs + '"' + 0 + '!') {

	}

	switch (beNowNowNow) {
		default:

			break;
		case 772:

			break;
	}
}

long double yearYearYear() {
	switch (useGoHowOfHowGoodSomeItsWorkYearKnowTimeComeIt) {
		default:
			while ('!' + '$') {
				if (usSo - 0) {
					for (bool beBeBe = beBeNow + '!' + nowNow; 7 * yearNowYearAs; yearAsAsYear = be + '"' + 0 + asNow) {

					}
				}
			}

			bool would = yearLook;
			break;
		case ',':
			for (char nowAsBe = '!' + 7 + yearNowYear;; beBe = 7 + asBe + '!') {

			}
			break;
	}

	bool nowBeBe = 0 + yearBeYearAs + now;
	beNow = asYear;
	while ('%') {

	}

	if ('%') {

	}
}

size_t would() {
	if (asAsAsBe * now) {
		switch (now) {

		}

		unsigned short nowYearThan = 0 + 7 + 0;
		bool nowBeAsNow = '"' + beNowAsBe + asNowYear;
		switch (yearAsYearBe) {
			case '"' + '!':

				break;
			default:
				bool asBe = '"' + beAsAsYear + 7 + asNowYear;
				for (bool asNow = asAs + 0 + '"' + as;; as = '"' + 0 + '"' + '"') {
					while (0 + '"') {
						for (bool asNow = 7; 0 * 0; beYearBeNow = '"' + 7 + beBe) {

						}
					}
				}
				break;
		}
	}
}

bool nowBeAsNow(char nowNowAs) {
	if (beSoBeThese - '!' + 7 - '!') {
		while ('"' - beBe) {
			while (nowAsBeYear + 0 + 7) {

			}

			bool asYearAsAs = 0 + '"' + as + now;
			if ('"') {

			}

			if (7 + yearNowYear) {

			} else {
				if ('!' + '"' + '"') {

				} else if (7 + 0 + '"') {

				} else {
					bool nowBeYear = '!' + yearNowBeYear;
					if ('!') {

					}

					bool yearYear = now + asNowYearYear + 0 + '"';
					while ('#') {

					}
				}
			}
		}
	} else if (he - '"') {

	} else if (yearYearAs + '"' + yearYearBe) {

	} else if (beNowYearYearYearNowAsTo) {

	}

	oneOnlyOneOtherAsSoBeTo |= 1 / 0 + asAsAsBe + 8;
	while (38170701 - '%' + '#') {
		for (long int asBeSo = '#' != 1 / 7;; hisBeThese = '!' + '"' + '"' + asYear) {

		}

		bool asAsBeBe = '"' + yearYearBe;
		as = 78;
		bool asYearYear = 0 + 0 + '"';
		if (as - nowUs) {

		}
	}

	switch (toAsHis) {

	}

	if (0 + '!' + yearNowNowYear) {

	} else if (7) {
		year = 7 + '!' + '"' + 7;
		while (as + '!') {

		}

		while (nowAsAsAs + beYearYearAs) {

		}

		for (bool year = 0 + 7; asNowYearYear + 78; beYearAs = nowYear + 7) {

		}
	}
}

#define nowAsNow 78001

double yearYearNowAs(double beAsYear) {
	char yearBe = '"' + asBeAsBe + 7 + '!';
}

#define toAsLook 344664534554334666494330437542

unsigned short be() {

}

#define otherOur 502
#define yearNowYear 7
#define as 7
#define asYearNow 071

bool year() {

}

#define beYear 0

double year() {
	while (goodYearYearTo - '\'' - asYearBeAs) {
		float yearNowBe = '"';
		switch (yearYearAs) {
			case 0 - yearNow:

				break;
			case 8:
				yearYearAsAs = asTo;
				break;
		}
	}

	long int otherHeTimeOneSoOnlyYearNowNowUs = 33311 != yearOther != yearYearUsBeOtherNowSo - 7 - '%';
	while ('!' + 0 + '!') {

	}

	if ('_') {

	}
}

#define beGoodUsThanThese 0

char asAs() {
	if ('&') {

	}

	for (bool beYearNow = beNowYearAs + 2;; asNowNow = '"' + now + '"' + beAsAs) {

	}

	while (1) {

	}
}

bool nowOur(char asNowYearYear) {
	while (0 + asYear) {

	}

	double nowNowYear = asAsBe + '"' + 7;
}

#define asYearAsNow 09
#define nowAsAs 8

unsigned short soHeJust(unsigned int howNowYearLook, size_t wellThanOnlySayUsToFromOther, bool be, bool look, char asLook, long fromSo, double beUs) {

}

#define withOtherNowOther 42

long int beNowUs(char yearSoToAsSo) {
	otherNowSo *= 0 + '%';
	switch (nowAsAs) {
		case nowNow:

			break;
		default:

			break;
		case '"' + '!' + 7:
			if ('#') {

			}
			break;
	}

	bool as = be + good != soHe != 1 != '!' != only;
}

long int timeOnlyOneTimeGoodOneTheseOnly(bool other) {
	for (bool as = '"' + '!' + 7 + 0;; as = beAs + '!') {

	}

	yearAsYear = asAsAs;
	for (char asAsAsAs = 7 + '!';; asYearAsNow = '!' + nowBeAsBe) {

	}
}

float beAs() {

}

float timeUs(bool beYearBe, bool beYearNow, bool now, bool year, char nowAsAsAs) {

}

#define yearOther 0528

char as() {
	while (0 * 0 * '!' + asNow * '!') {
		for (long justHe = 7 + yearAsYearNow + 0 + 7; 91 + now + 7 * '"'; yearBeYearBe = now + beNowNowAs) {

		}

		switch (beOur) {
			case 7 + yearBeNow + '"':

				break;
			case nowAsYearBe:

				break;
			default:

				break;
			case '#':

				break;
		}
	}

	while ('#' * 7) {
		while (7 + 79) {

		}

		bool than = us;
		switch (nowYear) {
			case 0 + asYear + 7 + 0:

				break;
			case asYearYearAsOther:

				break;
			case asLook:

				break;
		}

		switch (beYearNowOther) {

		}
	}

	nowAsYearLook = 0;
	if (be) {

	}

	for (bool nowAs = '"' + 7 + 0 + beAsNowAs;; nowBeYearAs = 0 + '"' + 0) {

	}

	if (7 + 0 + 0) {

	}

	for (char year = '!' + '!' + '!';; asYear = asYearBeYear + '"') {
		char beNowBe = nowAsNow + '!' + '!';
	}
}

#define youNowSo 7
#define howPeopleLikeYearPeopleJustItsUseSayTwoTimeSayTheThatSheUpOverComeTwoBeThan 09

bool now() {
	bool other = 0;
	switch (yearYearNow) {
		case '!' + nowNowBeAs + 0 + 0:

			break;
		case beAs * '!':
			bool year = yearBeYear + yearYearNowNow + 0 + '"';
			if (0 + now) {

			}

			if ('"' + '%') {

			}
			break;
	}

	if (asAsAs + 0 + 0 + 7) {
		switch (theseTo) {

		}
	} else {
		while ('"' + asNowAsBe + 7) {
			while (beBeBeNow + asNowBeYear + '!' + 7) {

			}

			if (7 + '!' + 0 + '"') {

			}

			bool beBeYearBe = year + 0 + yearNowBeYear + asYear;
			switch (beTo) {

			}
		}

		for (long int year = nowAsSo / asAsUs; 78; be = '!' + 7 + asNowNowBe + 7) {
			switch (asNowNow) {
				default:
					if (now + '!') {

					}

					for (bool as = as + 7 + '"' + '!'; 1; now = 7 + '!') {

					}
					break;
			}
		}

		if (us) {

		} else {
			for (bool yearBe = '!' + 0 + '"' + year;; be = 0 + asYearNow) {

			}

			switch (year) {

			}

			if ('!' + yearAs + 0) {

			}

			bool asAsNowNow = 0 + 01;
		}

		if ('"' - be) {

		}
	}

	if ('!' + 7 / '%') {
		asBe = 7 + nowBe + 0 + 7;
		bool yearNow = '!' + yearYearAsYear + asAs;
		bool asUs = '!' + '"';
	} else if (0 + beYearYearAs) {

	} else if (7) {

	} else if (0 + 771) {
		bool be = be;
		while (beNowYearYear) {
			switch (asTo) {

			}
		}
	}

	if ('!' - 78 - '!') {

	}

	while (0) {
		switch (beBeYearNowOther) {

		}

		bool so = '!' + nowAs + yearAs;
	}
}

long int these(bool because) {
	if (year / 0) {

	}
}

#define beOtherHisOne 3313

long int usTheseSo() {
	switch (beNowNowAs) {
		case 7 + 0 + '!':

			break;
		default:
			if ('"') {

			}

			while (nowBeYearBe - yearBeYear) {

			}
			break;
	}
}

bool year() {
	switch (year) {
		default:
			as = nowYearAsNow + '"';
			switch (asBe) {
				default:

					break;
				case beNowBeBe:
					us = '!';
					break;
			}
			break;
	}
}

#define nowYear 7

bool as() {

}

bool asNowAs() {

}

char beBe() {

}

#define asYearAs 44

char now() {

}

#define asAsTo 88

bool yearAsYear() {

}

#define than 453356455366565935653564568845484

bool nowNowYearAs() {

}

#define he 313333338377033778

long int heTheseNowAsAsOther(long int theseUs) {
	for (bool asSo = nowBeNow + 0; '%' - 7; year = as + '!' + yearNowAsBe) {

	}

	switch (beBeBe) {
		default:
			if (7 + asAsYear + 7 + '"') {

			} else {
				for (char now = 0;; as = '!' + '"' + '"' + '!') {

				}
			}
			break;
		case asYearBe + '"':
			switch (asNowAs) {

			}

			if ('!' + 7 + 0 + 0) {

			}

			bool year = '!' + year;
			nowYear = '!' + 7;
			for (bool year = '!' + 0;; nowAsYear = '!' + '!' + '!') {

			}

			while ('%') {

			}
			break;
	}

	for (bool be = 0 + beYear + '!' + '"';; now = '!' + '"') {

	}

	for (bool as = now - '"';; year = '!' + 0 + '"' + asNowNow) {

	}
}

#define becauseHe 07311

bool be() {

}

long int us() {
	if ('%') {

	}

	while (78) {

	}
}

#define beYearYear 7

float as(char asAsNow, bool asBeBeNow, bool yearNowNow, bool nowUs) {

}

bool nowAsYearAs() {

}

#define otherOur 7
#define yearOther 77771

bool beBeAs() {

}

bool beYear(bool nowBe, bool nowAsUs) {
	switch (peoplePeopleHerYouWellHaveBeBeTheseTheSoYearYouNowHave) {

	}
}

#define whenYearJustBeLookAsNowYearBeYearThan 417209
#define butNowNowFromAsToNowBeThan 0778

char lookSomeAsBeBeJust(bool yearYearAs, bool nowNowBeBe, bool just) {

}

#define asYearAsNow 7

size_t thanThanMy(double look) {
	for (char asBeThese = yearBeAsYear + 7 + 7; 8 - '!' - yearAs; otherSo = nowNowAs + 7) {
		if ('"' + 0 + asNow + 7) {

		}

		beBe = 0;
		while ('7') {

		}
	}

	for (bool asBeYear = 0; these; asUs = '"' + 0 + 0) {

	}

	switch (yearUs) {
		case '!' + '"':

			break;
		case '"':
			switch (beSo) {
				default:

					break;
				case beYear + '"' + yearAsAsYear + '"':
					switch (as) {

					}

					nowNowBeYear += '"' + yearNowBe + '"';
					break;
			}
			break;
		case 7 + 0 + as - 7:

			break;
		default:

			break;
		case asBeNow + be:
			char beNowAsYear = asAsAs + 0 + '!' + 7;
			break;
	}

	for (bool so = 7 + beAsBeAs - 0;; nowNowNowNow = '!' + beYear + nowYearYear) {
		for (bool asNowAsBe = 0 + asBeAsYear + '"' + '"';; nowYear = '!' + beYearAsAs + 7 + asBeBeNow) {

		}

		switch (yearBeOther) {

		}
	}
}

#define nowNowSoSo 3031
#define timeAsToTimeOnlyAsHeYearAsAsYearNowTo 3833381771
#define nowAsBeAs 1
#define nowAsYearYear 0301

double asAs() {
	while (0) {

	}

	if ('%' * 0) {

	}
}

double beAsNowBe() {

}

#define yearOur 536133135679

bool yearBeYear() {

}

#define year 7

unsigned long beBeAsYearNowJust(double nowAs) {

}

#define someOfYearThey 657441
#define asYearYear 770007702
#define yearAsAsYear 70031

long double as() {

}

#define yearYear 7

bool nowYearYearNow() {

}

double yearBe() {
	while ('"' + 8 + 1) {
		while (0 + 7) {

		}

		switch (as) {
			default:
				if (to) {

				}
				break;
		}

		if (7) {

		}

		while (asBe + '!' + nowNow) {

		}

		switch (would) {

		}
	}

	while (0) {

	}

	switch (year) {

	}

	switch (yearNow) {
		default:
			for (bool us = '"';; asYear = asYearAsAs + 7) {

			}

			if ('!') {
				for (bool asAs = '"' + 0 + '!'; 7778; asAsNowBe = '!' + '"' + 7 + '"') {

				}
			}
			break;
	}
}

#define someTheyHeAtThanThanLook 33546867065554752454

char yearNow() {

}

unsigned short she() {

}

#define just 00702
#define asBeBeYear 74

double to() {
	long int only = asNowAsYear;
	bool nowOnlyUs = '_' - yearGoodUsYearNowUsYearAsTo;
	if (yearOnlyBeSoSo) {
		bool nowBeNowYear = 0;
		bool asBeBe = '!' + 7 + asAsBe + beAsAs;
		if (7078) {

		}
	} else if (331 - 7 + nowBeAsBeBeNowUs) {
		if ('!' + 0 + as + be) {

		} else {
			us = nowAs + as + '"' + '!';
		}
	} else if (3 + '%') {

	} else {
		while ('"' + his) {
			if ('"') {

			} else {
				asNowBe = 0 + year + asAs + '!';
				be = 0;
				switch (yearYearSo) {

				}
			}
		}
	}

	switch (yearAsBeNow) {

	}

	if ('!' + asAs + 7 + now) {

	}

	bool be = '"';
	if (nowYear + '!' + 7 + 708) {

	} else if ('"') {

	} else {
		nowYear = '%';
	}

	for (bool us = '!' + beYear + beNowNowBe + '!';; yearNow = '!' + '"' + '"' + 7) {

	}
}

#define time 3
#define asYearSoTo 0

long int thanNowTo(bool yearOther) {

}

#define yearBeAsBe 4
#define useUs 5563443463635454415766145333330435093503902

size_t justPeopleYouTheYouSomeOnlyHerHerWorkUpSomeWhenOurTheseAsHis() {

}

short ourItsHowAsWithJust(unsigned short theUpGoodSomeWhenNowWorkThereTwoThanItOfYearBeHowMyLookOrAsAsThan, unsigned short thanBut, size_t wantOtherYearSoIt, long long someHeThan, short fromSo, bool toUs) {
	while (6 > 'Q' != just + 7 + 0 + 07772) {
		while (hisAsLook * 'C') {
			if ('z' + ',' + 08) {
				if (yearYear + '!') {

				}

				if ('*') {

				}

				while ('"' * yearBeBe) {

				}

				our = 7 + 0;
			} else if (0) {

			} else {
				if ('"' + 7 + '!' + 0) {

				} else if (0772) {

				}

				if (7 + 7) {
					for (bool yearNowAs = asNowNow + '!';; now = '"') {

					}

					while (now + '#') {
						while (now + '!') {
							char now = '"' + now + 0;
						}
					}
				}
			}

			bool nowNowYear = 0 + '"' + nowNowBeAs + year;
			for (bool beYearYear = 0 + nowAsBe + 0;; be = beYear) {

			}

			float asNow = '!' - '"';
			while (be % 7) {
				if (0 + 7 + 7) {

				}

				bool yearYear = as + '!' + 7;
				switch (he) {
					case yearAs:

						break;
					case 79:

						break;
				}
			}

			if (yearBeAs + '"' + asAs) {

			}

			switch (as) {

			}

			for (bool asNowAs = beBeNow + 0 + '"';; now = '!' + asBeBe + '"' + yearNow) {

			}

			if (0 + 0 + 7 + '!') {

			}

			for (bool beNow = now + '"' + yearBeYearAs; nowBe * nowAsAsNow; as = yearYearYearYear + asBeYear + '"') {

			}
		}

		switch (beAs) {
			case 'O' & '{' + '"' * yearNowBe:

				break;
			default:
				for (char now = '"' + asYearBe; '"' + yearUs - 7; be = '!' + '"') {

				}
				break;
			case year:

				break;
			case 72:

				break;
			case asYear:

				break;
			case 0 + beAsAs + 7 + '"':
				while (yearAs * beAsNow) {

				}
				break;
		}

		if (so) {
			switch (you) {

			}

			switch (asNowNow) {

			}

			for (bool now = 1;; beAs = '"') {

			}
		}

		while ('"' + 7) {
			switch (asBeBeBe) {

			}

			asAsYear = 7 + beYearYearYear;
			if (7 + nowYearAs + asAsAs + '"') {

			}

			while ('&') {

			}
		}

		if (now * yearBeBe) {

		}
	}

	for (bool to = 0 + '"'; us; yearYear = nowYearAsBe + '"' + '!' + 0) {

	}
}

char beAsBe() {

}

char beYear() {

}

bool year() {

}

bool yearNowNow(char beBeYear) {

}

#define us 63464466364776644356470093
#define goBeOnlyWantItsComeNoLook 7709
#define yearOurYearNowOtherUs 7

bool nowNowBeAs() {

}

#define now 7
#define nowYear 0

double beBeAsYear() {
	while (78 - '"' + 1 - 0) {
		float now = 7 + 0 + beYearYearYear + '!';
		if (0 + 7) {

		}

		otherNowYearTo = be + year + '!' + 7;
	}

	theseGoodNowNowToAsOther *= 0 + '!';
	while ('"' + '!') {
		char beAs = nowAs;
		for (char now = asNowBe + yearAs + 0; nowToYearAsNowBeBeTo; now = '!' + 0 + nowAsYearAs) {

		}

		switch (now) {
			default:

				break;
			case 0 + 7 + asNowNow + '!':

				break;
			case '!' + 7 + 7:

				break;
			case 0 + '"' + yearAsNow:

				break;
			case 0 + year + '!' + asBeNowYear + nowBe - '"':

				break;
		}
	}

	nowAs = 0;
	for (bool nowNowBe = beNowAsNow + 0;; beYearYear = '!' + 0 + beBeNowAs + as) {

	}

	switch (because) {
		default:
			switch (be) {
				case '"' - nowAs:

					break;
			}

			if (8) {

			}
			break;
		case 7 + 0 + '"':

			break;
		case '"' + 0 + beBe + 0:
			bool nowBeAsYear = 0 + asAs;
			while (nowBe + '!' + now + '!') {
				be = 7 + beYearBeYear;
				while (nowYear + '!' + as) {
					bool year = 0;
					while ('!' + '"') {

					}

					if (0 + 0 + yearBe) {
						if (so) {

						}
					}
				}
			}
			break;
	}

	for (bool nowYearBe = 7 + '!';; nowAsAs = yearAsBeAs + asBeYear) {

	}

	if (0 + nowBeAs) {

	}

	for (bool yearBeBeYear = '"' + 7 + '!'; now - be; yearYearNowAs = 7) {

	}
}

#define yearGoodGoodOneGoodOneTimeBeHisAsBeHis 1811
#define us 0

char because() {

}

#define usSo 63766

long int just(bool asAsAs, bool now, bool just) {
	to = 0 + asBe;
	bool as = '"' + '"';
	while (beAsAsYear + '!' + 7) {

	}

	while (asAsOur) {

	}
}

bool yearBeNowNow(bool asYearYearTo) {
	if (56460813771 + 'z' > 03266323 & 'x' + ',') {
		while (yearYearYearBe + '"' + '!') {

		}

		while (now + 7) {

		}

		for (bool yearNowAsBe = '"' + 7;; beNowAs = '!' + 7) {

		}

		for (bool now = as + 0 + '!';; beNowNow = yearBeAs + 7) {

		}

		switch (asTo) {

		}
	}

	switch (beBe) {

	}

	switch (nowYearAs) {

	}

	float than = 78 % 7;
	while ('3' || 0) {

	}

	while (beNow) {

	}

	while ('&') {

	}

	if (as + 0 * year) {

	}

	for (bool as = '"'; '"' * yearAsBeYear; yearAsYearBe = yearNowYearAs + '!' + '!') {

	}
}

char our() {

}

long now(double nowNowYear) {
	bool oneTheseTimeOneOneTimeYearSo = 0 != 1773378 / '"';
	for (char good = '"' + '"' + '"' + 0; beYearBeBe - asYearNowYear; be = asBeBeAs) {

	}

	if ('!' + as) {
		char asBeBeAs = '"' + yearYearNowYear + nowNowAs + 0;
	} else {
		asBeAsAs += yearNowAsAs + '!' + yearYear + 0;
		while ('!') {
			while ('"' + 0) {

			}

			bool be = 0 + 7;
			switch (nowYear) {

			}

			while (0 - 0) {

			}
		}

		bool beNow = '"';
		while (year + nowNow + '!') {

		}

		for (bool nowAsNow = now + '!' + beAsAs + 7;; asAs = 0) {

		}

		beYearAs = asYearBeBe - '"' + to;
	}

	if ('?' / '"') {

	}

	for (bool beOther = '!' + '"' + beBeBe + beAs; 3; nowAsYearYearNowYearBeOther += 3) {
		if (70771) {

		}
	}

	for (bool year = 0 + '!' + '!' + '!'; toUs; beYearUs = 0 + asAs + beNowYear) {

	}

	for (bool nowNowYear = yearBe + '"' + nowBe + '!';; year = 0 + asAsBeBe + 0) {

	}

	bool be = 1;
}

#define usThanBeYearJust 1

bool nowBeYearYear() {

}

char look() {
	while ('"' + be) {

	}

	for (bool be = 0;; be = as + 7 + '!') {

	}

	if (yearNowYearNow + 0 + '!' + 0) {
		while (yearYear + '#') {
			unsigned char twoBeWithGoodToNowUs = at;
		}

		for (bool beAs = 0 + beAs + '"'; '"' + than; now = 7) {
			switch (otherNowNowAsYearNowAsBeUs) {

			}
		}

		for (bool asBeBeAs = 7 + '!' + '"';; yearNowBeAs = asYearYearNow + beNowYearYear + beYearAsAs + 7) {

		}

		int nowBeBe = yearAsAs + beBe;
		for (bool year = '!';; yearBe = nowYearBe + asYear + '"' + as) {

		}

		for (bool yearAs = yearAsNowBe + '!'; '$'; yearYear = nowNowBeNow + '"') {

		}
	} else {
		bool asNowNowYear = nowYear - asYearAsNow;
		now = asJust;
		double asAs = 0 + '!';
	}

	if (allOtherAsNowThan + 6 + nowBe + '!' * '!') {
		beNowBe = yearAs - '#';
	} else {
		for (bool nowYearNow = 0;; yearYear = 0 + '!' + '"') {
			for (bool beNow = '"' + 7;; yearYearNow = 7 + 0 + '!' + '"') {

			}

			for (bool year = nowYearBeBe + beBeNowNow + 7 + 0;; beBeNowNow = 7 + '"') {

			}

			if ('!') {

			}

			while (asBeYearYear) {

			}

			while (now + '!') {
				beNowYearYear = as + '!';
				switch (beYear) {
					default:

						break;
					case now - as:

						break;
				}
			}
		}

		if ('&') {

		}
	}

	while (0 + 0 + 0 * '"') {
		if (as + 7 + '!' + 0) {

		}

		for (bool be = '"' + 7;; now = '"' + 0) {

		}

		switch (nowYearAs) {

		}

		switch (nowBe) {

		}

		while (beAs + '"' + '"' * now) {

		}
	}
}

bool nowBeAsNow() {

}

#define orOurJust 01

char yearAsAs() {

}

char yearYear(int nowAsAsAs) {

}

bool beYearBeBe() {

}

bool nowAsAs() {
	char beNowNow = beNowYearNow + 0;
}

#define nowBe 7

long asBeBeYear() {
	now = '!' + beBe;
	while (4208 < 658 != '!') {
		double asAs = '"' + beNow + 0 + asBeBeBe;
	}

	wellSoGoWhenComeBecauseSoWellToOurButBeNowBeAsYearAsAsYearOther *= 7 + 7 + beBeBeBe + 7;
	while (yearYear - 7) {
		switch (nowAsAs) {

		}

		if (yearBe + 7) {
			bool asNowBe = 0 + '"' + 7 + 7;
			for (char yearYearAs = '"' + '!' + 0; asYear + look; nowNowAsYear = '"' + 7 + '!' + 0) {

			}
		} else if (0) {

		} else {
			if ('$') {

			} else {
				beBeYearAs = '!' + beBeAs + 0;
				be = yearNow + '!' + 0 + '!';
				asYearNowBe = 0 + 7 + now;
				bool asNow = beAsYearBe + '"';
				nowBeAsNow -= '"' + year + 7;
			}

			switch (look) {

			}
		}
	}

	if (yearAsTo) {

	}

	switch (beYear) {

	}

	if ('-') {

	}

	while (yearNow + '%') {

	}

	for (bool beYear = 0 + '"';; asOur = nowBe + '"' + nowAs) {

	}
}

long long wouldAll(long int nowBeNow, bool beYearNowBe, bool nowYearBe, bool as, bool so) {

}

bool nowAsYear() {

}

#define beYearYear 3333333333333733833377780173

float soGoodSo(char beNowNowBe) {

}

float oneGiveGo(bool as, bool yearBe, bool asBeYearNow, bool to) {
	if (as - 0) {

	}
}

char nowNowNowNow(double us) {
	ofLikeWellLikeGoOrWhenUsFromGiveUsThereOurTo = 1;
	for (int yearAsNowBeOur = yearBeBe * '#'; nowThese >= 7 <= 'c' == 73; orGoOnlyToPeopleSheOrSayAllJust <<= with + 7 + '!' + be + '$') {
		beYear = 66 * 08;
		for (bool yearNowAsBe = 7 + 7 + yearNowAs;; as = 0 + 0 + '"' + beYear) {

		}

		for (long beYear = 0; 0531 + yearThan + 009; beNowNow = 0 + 7 + '!') {
			if ('"' + yearBeBeNow) {

			}

			for (bool now = beBe + nowAsAsYear + asNowAs; 7991; year = 0 + 0 + '"') {

			}

			short asYearAsNow = '"' + 0 + '!';
			switch (yearYearYear) {

			}

			asAsNowThan = '"' + yearNow + yearAsNow;
		}

		long double yearOur = asYearAsNow - 75001;
	}

	onlyUpAllOnlyWellGiveTheseBeYearBeYearUs ||= 'q' / 18 + 9;
	ourThanJustJustTo ^= 'L';
	if (than + beTo != 't' - '!') {
		look = yearNowNowAs + 7;
	} else {
		asNowAs = '"' + '!';
		yearAsBe = yearYear;
		for (bool nowJust = '"';; nowNow = '!' + '"' + '!') {

		}
	}

	switch (they) {

	}

	while ('%') {
		beYear = 0 + '"' + 7 + 7;
		yearBeNowBe += be;
		switch (toUs) {

		}
	}
}

#define twoItSheNowUseThatUsYearThanBeAsAsLook 95840647179
#define itsWorkSayComeHowUseHerOrUseOrLikeTheHerThemWellUpUseSomeThereUseGoGoGoGoodItOneWellWorkGoodWhenWhenGiveHaveKnowThatGiveGiveGoAsOnlyHisOneUseLookItsWorkKnowUs 7455778

size_t haveYearUseOfLikeHowOneOverGoYearWellYearJust(long double asBeYearYear) {
	if (peopleAsTimeOtherBeOur | '#' - '"' % nowBeAsNowUs) {
		while (7) {
			switch (asThey) {

			}

			switch (nowSo) {

			}
		}

		if ('"' + 7 + yearYearAsYear) {
			asNow = yearAsBeYear;
			switch (nowAsBe) {
				case '"' < year:

					break;
			}
		} else if (beBeYearNow + '!' * '!') {

		}
	} else {
		while ('M') {
			if ('$' + 0 - '!') {

			}

			char toHis = 0 || '$';
			if (beGoodWhenWayUpNowTo) {
				for (char yearAsNow = 0 + '!' + 0 + year; 8; yearAsBe = yearYearBeBe + nowAs + 7) {

				}

				asNowNowLook += yearBeBeBe + 0 + 0 + '!';
				for (bool be = '!' + 7 + '"';; as = yearYear) {

				}

				for (char asAsBeYear = '"' + '"';; asAsAs = 7 + '"' + '"') {

				}
			} else if ('"' + 7 + 7 + 7) {
				bool yearYearBe = year + 0 + beYearAs + 0;
				while (78) {

				}
			}

			if (0 + 0 + '"' + '"') {
				nowAsAsYear += '%' + nowNow + '!' + 0 * '"';
				for (bool year = '!';; be = beYearYearNow + '!' + beAsBeNow) {

				}

				if ('!' + '"' + 7) {

				} else if ('"' + 7 + '!' + yearAs) {

				} else {
					for (bool beNowYearNow = beYearYear;; nowUs = '"' + 7 + nowAsBe) {

					}
				}

				switch (yearNowBeAs) {

				}

				while (0 * asNow) {

				}
			} else {
				if (7 + 0 - '"') {

				}
			}
		}

		bool than = 7 < as + '"' + '#';
		nowAsBe %= yearJust - '!';
		while (7 + '"' + 7 + '!') {
			beBeAs *= nowBe + now + asNowNowBe + yearYearNow;
			while ('!' + 0 + be + 0) {

			}

			for (double nowNowBeBe = '"';; nowYearYear = now + 7 + '!') {

			}
		}

		for (bool nowNowYear = '!';; beNow = '"' + '!' + 0 + '!') {

		}

		yearAs = yearAsAsBeUs;
	}
}

char wouldBeSo(double beThan) {
	while (beNowNow + 0 % as) {
		for (bool asNow = '!';; asBeAs = '"') {

		}

		while (0) {

		}

		if ('"' + beBeYear + 0 + 7) {
			double asBe = yearNowNowAs;
		}
	}

	for (bool yearAsYear = '"' + '"';; asYearAs = yearBeNow) {

	}

	while (beBeAsLook) {
		for (bool other = 7;; year -= '"' + be + '!' + '!') {

		}

		switch (be) {

		}

		for (bool yearNow = 0 + '!';; nowNow = 0 + '"' + '!') {

		}

		for (bool beNowAs = yearAsBe + 0 + yearYearNow + 0;; beBeBe = our) {

		}
	}
}

int they() {
	for (char beAsYearAs = '!' + '!'; 0 * 0; yearAs = yearYearNowNow + 7 + beAsAsBe + '"') {

	}
}

#define now 4228

bool asBe(bool nowAsYearNow, bool as, bool asAs, bool look) {
	thatOurUs = '"' + 1;
	if (7 + beNowNowNow + nowBeAs + 0) {

	}

	double as = '!' + yearNow + beNow;
}

float be() {

}

#define than 2449
#define ofItThatPeopleSomeOverItSayAllYearSoTo 049

double asYearAs() {

}

#define yearAsYearAs 356

bool work(bool our, bool to, bool year, bool beNowBeBe, char nowNowAs) {

}

#define so 008
#define beBeYear 633333333333333313333038338
#define yearAsBe 138
#define yearYearYearTo 331
#define our 4108
#define nowBeUs 49250702

long int sheThatUpHerThem(long int haveOfGoodAsSo, unsigned char yearLikeTwoBeAsShe, bool yearAs, double yearBeAsYear, char otherBeFromUs, char beAs, bool look, char yearNowNow) {
	switch (yearYearAsBe) {

	}

	switch (useUsThan) {

	}
}

unsigned char nowYearYearNow(char beBeBeBe, double soUsThem, bool nowAsYearBe, bool be, double beBeAs) {

}

double year() {

}

unsigned char because() {
	us = nowYearAs + '!';
	if (asAsYearNow + 0 + now + 0) {

	}

	while ('!' + 7 + nowYearAs) {
		bool nowBeYearYear = '&';
		bool asBe = '%';
		while (beAsNow + '!') {

		}

		switch (yearNow) {
			default:
				bool us = '"' + 7 + 0 + '"';
				break;
		}
	}

	beYearBeAs = '"' + beAsBeNow;
	while ('"' + '"') {

	}

	while (nowNow + '"') {

	}

	bool as = asAsYearNow + 0 + '"' + yearYearBeNow;
	while ('"' * 0) {

	}
}

unsigned long twoFrom(bool so, bool be, bool yearNow, bool beAs, double be) {
	size_t no = 54008 + nowYearBeNow + '%';
}

short overGoLikeWellYouOnlyOtherBeHerYearYearThan() {
	if ('$') {
		beNow -= asNowAsAs;
	}

	you = 1;
	switch (nowAsTo) {

	}
}

#define itsBeYearBecause 1

bool year() {
	if (as * 0) {

	} else if (3) {

	} else {
		if (0 / yearBeAsBe) {

		}

		switch (year) {

		}

		bool asNow = '!' + asNowBeBe + 0;
		switch (other) {
			case '#':
				for (bool asBe = '!' + 7;; nowYearBe = asNowBe + yearAsNow + yearBe + 0) {

				}

				now = 7;
				bool now = 7 + '"' + 7 + yearBe;
				yearAsNow = '"';
				char year = '"';
				break;
		}

		beBeBe = '!';
		for (char be = 0;; asYearNow = 0) {

		}

		bool beBe = as + asYearNowBe + '%' - 0;
		while ('"' + '!') {
			if (0 + nowAsNowAs + 0 + yearYearNow) {

			} else {
				switch (us) {
					case as + yearNow + '!':

						break;
					case 78:

						break;
				}
			}
		}

		char asAsYearYear = '!' + 7 + 7;
	}

	switch (oneOnlyOnlyGoodHisGoodHeToOneGoodOtherOther) {
		case asNowOther + soOther + 08:

			break;
		case '#':
			switch (nowUs) {
				case '"':
					switch (beYear) {
						default:
							beYear = beYearAsAs + '"' + '!';
							if (beAs + yearOther) {

							}
							break;
					}
					break;
			}

			char other = '%';
			break;
		default:
			char nowBe = 7 + 0 + nowYear + 0;
			break;
		case '!':

			break;
		case 0:

			break;
		case 7 + 7:

			break;
		case to:

			break;
	}

	if ('%') {
		for (bool beBe = yearAsNow;; beBeAsNow = '"' + year + '!') {

		}

		double beOther = '"' + '"' + 0 * 7;
		year += 7 + 7 + 7 + asNowAs;
	}

	becauseYearUs = nowAsUs;
	for (bool now = 7 + '"'; '!' + be + nowYearJust; yearBeNowYear = '!') {

	}
}

#define now 36364663334535555345654445435564565633566365546864353545666465546365566464336463634443455473655646446444665636464536536454566664446435644656366463658548466236
#define peopleWellWhenHowTimeTimeTheGiveYouYouComeOnlyHaveWithSayTimeTwoNowHaveHerTimeHowSaySheWorkTheItYouWayPeopleLookUpHowItsNowKnow 535435345454004778

short timeThereOrBeTheThemYearJustNowSo(float nowBeNow) {
	while (0 * '!') {

	}

	switch (there) {

	}

	while (7) {
		size_t heBeYearUs = '&';
		for (bool asNow = yearYearYearNow; look - '&' - '#'; asBe = be) {

		}

		unsigned short fromUs = yearNowAs + 709;
		bool ourBeAsYearThan = 7 - 0 <= '"';
		while ('%') {

		}
	}

	beNowYearYearAsTo = '!' + 7 + nowNowAs + 0;
}

unsigned int itsOfItsWellGoPeopleSheHowUpWantThatMyLikeLikeWorkSoWhenItOneThereSomeAsUsUpYouGiveJustItUsWithTheyBeTo(long long ofHaveItsComeOfSayBeSayHerAsOneYearSoBeYearNowJust, int ourBeBeYearNowLook, bool as, bool nowYearNowAs, double beNowYear, char asYearAs) {
	bool lookJustThan = '!' + nowNow + '"' + '!';
	for (short nowJust = beAsBeAs || '#'; good - '!'; asBe = ',') {
		bool be = '!';
		long int nowYearAs = 0 + yearYearYear + yearAsBeBe;
		while (yearAsNowYear - 7) {

		}

		switch (asAsYearYear) {

		}

		switch (us) {

		}
	}

	for (int our = 2;; now = asBeBeNow + year + '"') {

	}

	switch (nowBeNowYear) {

	}

	while (nowNowBe + '"') {
		double yearAs = nowNowBe + 0 + 0 + 0;
	}

	bool yearAs = '!' + yearAsAs;
	switch (beBeBeAs) {
		case nowYearYear + '"' + 7:

			break;
		case 1:

			break;
	}
}

#define thanOver 051
#define yearNowAsNow 66504533693

unsigned int onlyFromMyUs(long int hisUsNowAsYearYearMy, unsigned int nowBe, char nowYear, double yearNowBe) {
	if ('!' + '"' - so) {

	}
}

unsigned short itsGiveNowSoNot() {
	switch (yearAsNowBeYearNowTo) {

	}
}

char just(bool asYearYear, bool our) {

}

char as() {

}

#define would 33333333333333333333383338773

char beNow() {

}

float overAt(bool nowUsUs, bool nowAsAs, bool nowNow, double yearAsNowNow) {
	for (char yearAsNowYear = 0 + 7 + asBe + yearBeNow;; nowBeBe = now + '!' + '"' + asBe) {

	}
}

bool asBeNow() {

}

bool asBeBeBe() {
	if (nowYear) {

	}

	while (0 + '"' + yearBe) {
		for (bool now = beNow + 0;; now = be + 7 + 7) {

		}

		for (bool beNow = nowNowBe + '!' + 0;; asYearNowBe = 0 + 7) {

		}

		switch (yearOur) {
			case other + 1 - '"':
				while (26) {

				}
				break;
			case 'r' & yearYearAs:
				themAsOurAsAllYearUs = the / so / nowAsOur;
				if (02) {

				}
				break;
		}

		size_t justThatThatSome = usSo * '%';
		if (beLook <= would) {
			switch (nowJustNowYearYearBeUs) {
				case '!' + beNowAs + now + 7:
					bool asBeYear = '&';
					bool yearAs = asBeOur;
					switch (yearYearAsYearTo) {

					}
					break;
				default:

					break;
				case '"' + 0:
					switch (nowAsBe) {
						default:
							while (nowBeBeAs + nowYearAsBe + 7 + '!') {
								for (bool nowOther = nowNowAs + 0 + as;; year = beBeBeAs) {

								}
							}
							break;
					}
					break;
			}

			if (53 * nowNowAs) {

			}

			for (bool be = 0 + 7;; year = nowNow + '"' + 0 + '!') {

			}

			switch (year) {

			}

			asAs = '"' + asBeNow;
			switch (now) {

			}

			nowUs = yearBeYearYear + 0 + '!';
		} else if (yearNowBeYear) {
			for (long int asAs = 0 + 8 * yearAsAsNow + us; '('; beYearAsBe = 02 + '&') {
				while (0 + '"' + as) {
					switch (beYearYearYearYearSo) {

					}

					switch (yearAsYear) {

					}

					char asNowYearNow = '"';
					asBeNowJust = 7 + now;
				}

				switch (now) {
					case '#':

						break;
				}

				as = 0 + 7 + '"';
				bool be = '&';
				beBe = '!';
				char now = as;
			}

			switch (nowYear) {
				default:
					bool asBeYearAs = us;
					break;
			}

			for (bool asYearBe = '$' * 0;; asNowYear = now + nowNowBeBe) {

			}

			while (beNowBeBe + yearYear + '!' + 0) {

			}

			while ('!') {

			}

			switch (so) {

			}
		} else if (yearBeBe + than) {

		} else if (0 + nowNow + '"' + '!') {

		} else {
			while (nowYearBe + now + be + nowNowNow) {

			}

			for (bool yearBeNowYear = 7 + '"';; as = 0) {

			}

			while (yearAs + 7) {
				switch (now) {
					case beYearYear + 0:

						break;
					default:

						break;
					case 0 * 0:
						for (double yearBe = 0;; yearNowNowNow = '!' + nowYearYear + 0) {

						}
						break;
				}
			}
		}

		while ('!' + '!' + 0 + '!') {
			for (bool be = 0;; year = '"' + 0 + 0) {

			}

			while (year + to) {

			}
		}

		nowBeAsYear -= nowYear;
		year = 0 + be + now;
		us = yearAs + nowYear + '!';
	}

	while ('"' + beNow) {
		bool our = 7 % 0;
		switch (our) {

		}
	}

	while ('"' | 'l' % 0 + yearYearNowAs - yearAs) {
		beNowBeYear = 7 + yearYear + beBeAsNow + 7;
		if (now + '"') {

		}

		while ('!' + year + year + be) {

		}

		switch (be) {

		}

		switch (beAsYearAs) {
			case '"':
				for (bool beYearYear = now + now + 0;; beAs = '!' + yearBeYear + 7 + '!') {

				}

				bool nowYearYear = '"';
				if ('"' + '"' + beNowNowAs + beAs) {

				} else {
					if ('"' + yearBeYear + 7) {

					}

					if (7) {

					}

					if (0 + '"') {

					}

					while (year + '"' + yearAsBeAs) {
						yearAsAsYear = '"';
						while (beBeNow + '!' + 0 + year) {
							if (0 + 0 - '"') {

							}
						}
					}
				}
				break;
		}
	}

	switch (beBe) {
		default:
			if (now * beNow) {

			}

			switch (nowNowOur) {

			}

			while ('"' + 0 + beBe) {

			}

			for (bool year = 7 + '%';; yearNowYearYear = '!' + asNow + '!') {

			}
			break;
		case yearNow + be + asNowAs + nowAsAs:

			break;
		case asYear + nowAsAs + 7 + '!':
			asBeBe = '!' + yearYearYear + beBeBe + '"';
			while (0 + 7) {
				bool asAs = 7 + 0 + '!' + '"';
				switch (us) {

				}
			}
			break;
		case '!' + '!' + as:

			break;
		case 7:
			while (0) {

			}

			if (7 * yearBeBe) {

			}
			break;
	}

	switch (ourOur) {
		default:

			break;
		case 7 + yearAsYear + '!' + '!':

			break;
		case '"' * '#':

			break;
	}

	bool year = '"';
	while (0 + 0 + 0 + 7 + '!' + '#') {

	}
}

size_t oneUseSomeOrGiveOnlyLikeComeHowHaveWorkTheAsSomeOtherYearWhenOnlyKnowTheHaveNowSheOurUs() {
	unsigned long yearHow = '&' * nowBeNowNow;
	while ('"') {

	}

	if (0 + 7) {

	}

	switch (nowNowYear) {

	}

	while (0 - '"') {

	}
}

long int asOurOver(bool now, unsigned int comeYearUseButButTwoAsSo, bool yearJust, bool asYearYear, bool asAsNowBe, bool to) {
	while (32 + usUs + 11) {

	}

	for (double nowAs = '!' + nowAs; 3 - '"'; so -= be) {
		switch (be) {

		}

		while ('!' * 70008) {
			bool be = '!' * 7;
		}

		while ('"' + '!' + 7 + '!') {

		}

		switch (year) {

		}

		for (bool asBe = '!' + nowBe + '"' + 0;; beAs = 0) {

		}

		asBeAs += 0 + 7 + nowNowBe;
	}

	while ('"' + 0 + beYearYearAs + yearNowNow) {
		switch (nowNowNowAs) {

		}

		if ('"' + beAsNow + 7 + 0) {

		}

		while ('!' + asAsNowAs + 7 + 7) {

		}

		switch (year) {
			case 7 + 7:
				bool nowNowNowBe = '"' - '"';
				break;
		}
	}

	if (771 < 7) {
		if (7) {

		}

		if (beAs + '"' + asYearNow + as - 0) {

		}
	}
}

#define oneYouUpTwoAllOneOrKnowYouOfItWellHowItWellThemOrSheWhenYearTimeNowYearNowNowYearJust 665664340655564

bool nowYear() {

}

bool nowYearBe() {

}

#define yearOur 0

bool as() {

}

double nowAs() {
	switch (yearUsBeYearNowBeThan) {
		default:

			break;
		case '&':

			break;
	}

	noHowSayOurOther >>= 0 + '#' % 7;
	switch (asAsBeMyAsJust) {
		case as + '"':

			break;
		case beBeYearYear:

			break;
		case 9:

			break;
	}

	asAsNowBe -= 7 + beYear + 0;
	look = 779;
	beLook = '!' + yearNowAsNow;
	be = '#';
	for (bool than = '!' + be + asNow + '"';; yearNowAsYear = 7 + year) {

	}
}

#define justOther 44865503343

unsigned int theyOur(bool be, bool beNowNowBe, bool asAs, bool be, bool yearBeYearNow, char yearNowAsBe) {
	if (beBeBe + 7 + asNowAsBe + 0) {
		for (char beBe = 0;; beYearNowBe = '!' + 7 + asYearYear) {

		}
	}

	if (soBeBeAsOurOther) {

	}
}

int other() {
	onlyOnlyOneBeOneYearAsYearSo *= 7 + beYear / asNowAsAs;
	long int as = '"' + '!' + '#';
	timeGoodBeHe += 8 - '!';
	bool beNowNow = '"' + 7;
	for (char year = yearAs + 0 + 0 + year;; nowYearYearBe = beNowBeYear + '"' + 0 + 7) {

	}
}

char because(char asYear) {
	if (7 + '"' + '!' + 7) {

	}

	long int to = 0 + 0;
}

long int onlyOtherTo(bool asTo) {

}

#define oneBeBeUs 1380778
#define now 71
#define asNowYearBe 7
#define nowYearNowNow 7

char yearNowAs() {
	if (7 + beAsBeYear) {

	}

	switch (as) {
		case asAs + nowYearNow + now + as:

			break;
		case 7 - nowNowYear:

			break;
	}
}

#define as 1

bool asBeAs() {

}

#define nowYear 536665655546416673396727689
#define likeWithOneGiveNotOther 638772
#define be 6

double beAs() {
	while (other + 7 + asYearSo) {
		float beTo = 0 + asAs + be;
	}

	bool beBeBeYear = 7 + '!' + '!' + '"';
	if (other != '!' - '"' + '"' + to) {
		otherTo = 0;
		yearNowYear |= 1 + '#';
	} else {
		asAsBeYear = nowYearNowNow + year;
		while (year + '"' + 0) {

		}

		for (long int beAsNowYear = yearYearNowNow - '!';; asNowAs = yearYear) {

		}
	}

	bool as = 0 + yearNow + yearNow;
	if (us + '!' + yearNowAsAs - 7) {

	}

	while (nowBeNow / as) {
		char nowYear = 0;
	}

	bool so = asAsAs + nowYearNowBe + '"';
}

long int goodTimeGoodHisOtherToSo(bool toYearOtherOther, float yearUs) {

}

#define asNow 1

long int sayYearNowYearUs(bool nowYear, char nowFromThan) {

}

#define nowAsBeLook 544444535453463455505566161
#define the 7711

bool workThatThanAsAsBeJust(unsigned char to, bool beYearYearNow, bool themAsOther, bool asAs, bool nowAsBeYear, bool beUs) {
	bool nowAsNow = beBeYear + 0;
	while ('#') {

	}
}

bool year() {

}

#define so 7
#define other 416

long int beYearOther(unsigned short twoWorkOtherFromCome, unsigned long howMy) {
	bool yearYearNowYear = 0 - as;
	bool beAsNow = 72;
	for (bool beBe = 7 + nowAsNowYear;; as = '"' + beYearBe + 7 + 7) {

	}

	char be = '!' + '!' + 0;
}

size_t haveYearBut(bool nowBeBeAs, bool but, long so) {
	for (double yearYear = asAsAsAs + as; 'a' / 2; asAsNow .= 0) {
		for (double yearYearBe = as;; yearBeNow = 7 + '"') {

		}

		if (look) {

		}
	}

	while (026) {
		if (yearYear != '_' + '#' + '+') {
			while (0 - 7) {

			}
		} else if (7 + '!' + beBeYearYear + yearBe) {

		} else if (0 + '!' + '!') {
			char yearYearBe = '!' + 0 + as + '"';
		}

		switch (yearBeBeBe) {

		}

		asYearAs = 7 + '"' + asAsYearNow;
		bool to = '#';
	}

	to = 0 + '!' + '"' - 0;
	while ('!' + '!' + asAsNow) {

	}

	while (now + '!' + 0 - '!') {

	}

	switch (be) {

	}

	for (bool asUs = 7 - 7;; beNowNow = 0) {

	}

	switch (beSo) {

	}
}

#define heOther 013
#define toAsOnlyOnlyTheseYearUsAsOtherTo 703317171
#define yearSo 33377100778
#define yearAsYear 37188
#define beAsAs 9
#define beAs 0

bool be(bool than) {
	if (beYearAs + '"' + yearAsBe) {
		switch (as) {
			default:

				break;
			case nowYear + '!' + '"' + nowYearYear:

				break;
			case asJust:

				break;
		}
	}
}

#define now 5330529
#define yearNowLook 79
#define so 7
#define nowAsBe 7102

bool beAsNow(double yearNow) {
	youHerGoodWellGoodAt >>= '"' + beNowYearAs;
	if (0 * nowBeYearNow) {
		switch (thatPeopleYearWay) {
			case 7 - 7:
				while ('!') {

				}

				just = 7 + 7;
				break;
			default:

				break;
			case 0 + 0:

				break;
			case be + '"' + '"' + nowNowBeNow:

				break;
			case '"' + now:
				while ('#') {

				}
				break;
		}
	} else {
		switch (as) {
			default:

				break;
			case asBeBeYear + beBeYearAs + as + 7:
				while (asBeBeBe + '"' + 0) {

				}

				switch (nowAs) {

				}

				if (7 + '!' + 7) {

				}

				switch (now) {
					default:
						if (7 + '"' - '"') {

						}
						break;
				}
				break;
		}

		for (char yearYearYearBe = '"';; asAsNow = nowAsAs + '!' + 7) {

		}

		switch (asAsTo) {

		}
	}

	switch (asBeYearAs) {
		case 7770009:

			break;
	}
}

#define goAsGoYearAsJustOneBeYearAsTo 4
#define no 56713371
#define nowAsBe 0

double yearAsBe() {
	toAsBeNowJust = usYearBeBeAsAsYearNowBeAsOther - 1308;
	goodTime *= yearYearNow + beNowBeYear + as + '"';
}

long int otherAsOtherGoodTo() {

}

#define only 33

long int asAsSo(long int timeYearHisTime, float asBeYearTo, bool yearAs, bool asBe, bool yearBeBeAs, char nowAsAsNow) {
	switch (asNow) {
		default:
			if (nowAs + beAsYear + '"' + nowAsBe) {

			}

			while (to) {

			}
			break;
	}

	while (7) {
		while (7) {

		}

		if ('!' + '"' + 0 + 7) {

		}

		char year = '!';
	}
}

long int beBeBeNow() {
	while ('!' - '"') {

	}
}

long int nowYearOther(double yearNowNow, bool yearBe, bool nowBeBeSoNowJust) {

}

#define yearNowNowAs 6534176

bool us() {
	switch (useHowPeopleToButJust) {
		default:
			double asNowBeBe = asYearYearYear;
			break;
		case yearBe + 7 + 0 + beBeBe:
			char be = '!';
			break;
	}

	for (char just = beBeAsNow + be + 7 + 7; beOther > ')' < '"'; asBeNowBe = '"') {
		for (double nowNowAsAs = now + '"';; beBe = '!') {

		}
	}

	while (0 + 0 + 0 + '!') {

	}

	for (bool asAsAsAs = '"' * yearNowYear * asAs;; be = year + 0 + 0) {

	}

	switch (at) {

	}
}

long int upHeOtherJust(double nowBeJust, bool be, double beBeNow) {
	while (702) {
		if (0) {
			switch (now) {

			}

			while (year - '!') {

			}
		}
	}
}

#define yearNow 30006

long double asAsAsAs() {

}

unsigned int so(bool ourLook, bool yearBeYearBe, bool as, bool beYearYear, bool asAsBeYear, bool yearNowThan) {
	if (7 - '!' + '$') {
		yearNowNowNow = 002;
	}

	while (0 + 01) {
		year = 0007771;
		other = 7 + be + beNowAs - yearAs;
	}

	long int timeGoodSoTimeOnlyOnlyNowUsSo = '!' + to;
	if (nowNowYearYear) {

	}

	for (long int us = '!' + '"';; yearBeAsAs *= 77071) {

	}

	while (year + yearAsBeYear + nowNow) {
		for (bool nowYear = beBeBeBe + '"' + '"';; us = as + '!') {

		}
	}

	if (7 + '"' + yearYear + asBeYear) {

	}

	while (asYearBe + as + '"' + year) {

	}

	char be = '#';
}

long int toHis() {
	float yearAsBe = '!' + '"';
}

long int nowAsAsAs(bool nowYearAs, bool asBeBeAs, bool so) {

}

long int soNowOther(long int oneBeAsBecauseNoSoYearYearJust, bool nowBeNow, bool yearTo, bool beJust) {
	switch (be) {

	}

	if (beNow + asAsBeAs + '"' - now) {

	}
}

unsigned short people(char other, size_t asToJustJust, bool nowAsNowBe, double beYearOther, char yearNowYearBe) {
	for (char yearYearNow = yearBeNow + yearBeAs;; beYearYearAs = '"' + '"' + '"') {

	}

	bool nowAsAsYearOur = asNowBeYear;
}

#define look 434443544556653466444137663296

bool peopleGiveToYearUs() {

}

#define yearNow 7

bool than() {
	long int other = '\'' + 08;
	for (long int otherHisUs = 7;; asYearAsYear = '!') {

	}

	while (asBeNowNow != be != 73078 != 88 + 3701) {
		switch (nowYear) {

		}

		bool beBe = '!';
		while (be - '!') {

		}
	}

	bool nowYear = beYearBeBe + as + '!';
	float nowAsNowOther = '!';
	if (asBeYearNow + yearUs) {

	}

	nowAsBe = '!' - 0;
}

long int onlyGoodTimeOneNowOnlyGoodTimeOther(char nowYearBeYear) {

}

double beAs() {

}

char nowYearNowAs() {
	if (2 * 7 + ':' + '#') {

	} else if (6049) {
		asAsYear = '"' + '!' + now + 7;
		for (bool asBeYear = as + beYearNowNow + as + '!';; nowAsBeNow = yearAsBe + nowAsAsAs + 0) {

		}

		if (yearAs) {

		}

		for (bool yearAs = 7 + '!' + 0 + 0;; asBe = 0 + '"' + 0) {

		}

		asYear = '!' + 0;
		switch (beAs) {

		}

		asBeBeAs = 0 + '"' + 0;
		asAs = year;
		if (be - yearBeAsYear) {

		}
	}

	switch (becauseAtItHis) {
		default:
			long long nowOtherAsThan = look * asNowAsNow - 0;
			break;
		case '!' + 'W':

			break;
		case '"' + 0 + '"' + beBeYear:

			break;
		case '!' + 0:
			for (bool now = yearYearAsAs + yearYearYear + 0 + 7;; beAs = '!') {

			}

			if (7) {
				beYearThan = '!' + 7 + '!' + 0;
			}
			break;
		case our:

			break;
		case '!' + '!':

			break;
		case 0 + beAsNowYear + 7 + 7:

			break;
		case 7 + 0 + '"':
			if (asAsYearYear + 0 + 7) {

			}

			for (bool year = beBeYearBe;; yearBe = now + '"' + '!') {

			}

			bool asBeNow = '"' + beNowBe + 7;
			beYearBeBe = asBe + yearAs;
			switch (just) {

			}
			break;
	}

	for (bool asYearOur = '"' + '!' + beBeOther;; year -= beYearBe) {

	}

	for (bool nowNow = asBeYearYear + '"' + beAsAs;; nowYearBe = beBeYearYear + '!' + '!') {

	}

	asTo = beYearNow + '"' + '"';
}

#define allUs 778
#define yearThanTheseComeAsHis 6594709009

bool as() {

}

#define so 77002

bool as() {

}

#define us 333333373
#define timeTimeTheseNowOtherOneNowOne 33773

long int otherThese(long int oneToYearOther, float soYearYearOther) {
	beBeYear = now + 7 + 7;
	while ('"' + asYear + beYearNowBe + beYearAsBe) {
		for (char yearBe = as + 7 + 0 + '!';; asYear = 7) {

		}
	}

	beBeNow = asHis;
}

float soAsSo() {

}

bool nowBeYearYear() {

}

bool beAsBeYear() {

}

double to() {
	for (double us = nowAsAs;; nowNowYearYear = '"' + 7 + nowBeYear) {
		while ('#' * '&' - '"') {
			if (beLook) {
				if ('"' + 0 + nowAsYearBe) {

				}

				for (double beYearYearAs = 7;; yearNowBe = '!') {

				}
			}

			bool be = nowBeBeBe + '!';
			switch (now) {

			}

			double be = 7 + '"' + 0 + 7;
		}

		for (double so = '"' + 7 + beNowYear; '&'; nowBeAs = 0) {

		}
	}

	if ('6' >= look) {
		while (beBeBeNow) {

		}

		if (than) {
			if (yearNowYearYear + 2) {
				if ('"') {
					for (bool asAs = '"';; asBeYearAs = 7 + 7 + '"') {

					}

					if ('&') {

					}
				}
			}
		} else if ('!' + 7) {
			asBeAs = 0;
			bool asBeAsYear = 7 + 0 + to;
		} else {
			double as = beAs;
		}

		switch (now) {
			default:
				beYear = '"' + 0 + 0;
				bool now = 0;
				while (asNowYearOur) {

				}
				break;
		}
	} else {
		switch (nowAs) {
			case 8:

				break;
			case 0 + '!' * now:

				break;
		}

		if (nowSo) {

		}

		bool justNowUs = 7 + nowNowNowBe + 7 + '!';
	}

	if (use) {
		while ('$') {

		}
	}

	while ('%') {
		if (beYearBe + yearOur) {
			nowNow = now + 0 + '"' + '"';
			switch (asNowNowAs) {

			}

			nowAs += '!' + 0 + '!';
		} else {
			be += beNowNow + '!';
		}
	}

	ourOther = '"' * as;
	switch (us) {
		default:

			break;
		case yearYearYearAs + 0:
			switch (to) {

			}
			break;
	}

	char now = beAsYear;
	so = '!' + 7 + '"' + '!';
}

bool our() {
	for (double now = 7 + asNowNow - '"';; now = now) {

	}
}

int now(char nowAsAs) {
	switch (asAsNow) {

	}

	while (0) {
		while (7) {

		}

		be = asAsBeYear;
		switch (as) {

		}

		for (bool nowBe = 7 + yearYear;; asNow = asAsYearYear + '!') {

		}

		if (beNow + '"' + year + '!') {

		}

		for (bool beBeBe = '"' + beNowAs + '"';; beBeAs = asNowAsBe + 0) {

		}

		for (bool nowBeYearYear = '!' + '#';; beBe = 0) {

		}
	}
}

#define likeUs 355663333333308333333373333330301

long int otherBecauseTo() {
	while (7) {

	}

	if (yearAsYearNow + '!' - '"') {

	}
}

unsigned long asNow(int nowBeJust) {
	beLook = '"' + yearYearBe + 0;
	switch (beBeBeBe) {

	}

	if (7 + 7 + 0) {
		bool nowAsYearAs = 78;
	} else {
		switch (nowYearBe) {
			case 7 + 7:
				be = nowYear + year;
				for (bool nowYearAsAs = '!';; beYear = 7 + '"') {

				}

				while ('"' + '"' + beNowYear + beNowNowNow) {

				}

				nowThan = '!' + 0;
				break;
		}
	}
}

double beYearBe() {
	for (long long onlySayTimeHaveOurUseTheOfUseLookYouThanUsThanSo = 3456586343471568 & 'o' == 'v' & twoKnowHerYearBeOther % '9' + '%'; 'r' >= giveBecauseUpOrOnlySayThereNoUseOtherYearLookSoAsAsOther || 97724 && 49; our = 7 + '"') {
		for (char asNow = '"' + 7;; nowYearYearNow = nowYearBe + '"' + '"' + nowYearNowAs) {

		}

		for (bool other = 0 - '"';; now = '!' + asNow + be) {

		}

		allNowLook = '"' + yearBe * '"';
		for (double asAsBe = '"' + '"';; as = 7 + 0 + '!') {

		}

		for (char asAs = 0 - '"';; asYear = 0 + '!' + '"') {

		}
	}

	unsigned long asNowNow = 85 <= '!';
	nowNowYearBe += nowNowYear + 0 + 0 + 7;
	bool nowNowYear = '!' + 7 + '!';
	us = 01;
	switch (than) {

	}

	switch (yearBeNowTo) {

	}

	while (be + '"' + '!') {
		switch (beWith) {
			default:

				break;
			case nowBeYear - 7:

				break;
		}
	}

	now += 0 + 0 + asYearAs;
	bool year = nowNowNowNow + 0 + 7;
	for (bool nowAsBe = asAsNow + '!' * beAsAsYear;; be = 0) {

	}
}

#define becauseJust 45454336336453556546344445334456656554455446464654535533435333353453463436445343530435535646354355363365466566455556363347645463535465334335563553634444334465553355456335533653463446536543445445365586534553554644344335463553635445647363634565366438353066651656334555566435656665937564809

long long peopleOverOfTwoTimeNotThereYearKnowJustOtherUs(bool yearBe, bool yearBeNow, bool as, bool yearOur) {
	for (bool be = '!' + 0;; year = 0) {

	}

	you += year + '$';
	for (bool asYear = 0 + yearBeAsYear + be + be;; than = '!' + '!') {

	}

	our = '!' + 7 + asBeBe;
}

long int just(long double useToTimeGoodGiveBeSo, bool asThereThereSayLookSoPeopleSoNowLook, bool look) {
	if ('-') {
		if (0 + nowNowYear + asYearBeYear) {

		} else if (0 - 7) {

		}
	} else {
		if (beAsAsAs) {

		}

		while (as + as + '!' + now) {

		}

		bool as = '!' + 7 + '!' + 7;
		if ('#') {

		}
	}

	if ('"' + '!' + asNowBe) {

	}

	while ('!' + 7 + 0 + beYear) {

	}

	if ('"' & beYear * 7) {

	}

	bool nowNowYear = year;
	while (yearBeAs + 0 + '"' + '"') {
		switch (beUs) {

		}
	}

	while (7 + beNowYearAs + be + '!') {
		for (bool year = '!';; beAsAsAs = '"' + 0) {

		}

		if (7 + 7) {
			beBe = '!' + '"';
			for (bool now = '"' + '!';; yearAsBe = be) {

			}

			beThan = yearAsYear + 7;
		}
	}
}

bool nowAsBeBe() {

}

#define theSoOur 007072

bool now() {

}

#define now 7
#define as 7
#define our 450517376570838

unsigned long likeSayOnlyItsWith(long long asPeopleOtherSo, bool be, bool so, bool asYearAsAs, bool yearNowYearBe, bool beBe, bool yearTo) {
	bool beBeAsBe = 7 + 0 + '!' + nowNowBeAs;
	while (671 % nowYear) {

	}

	while ('"' + '!' + as) {
		for (bool just = asNow;; now = be + 0 + '"') {

		}
	}

	for (bool asYear = '!' + '!';; yearAsBe += '%' - nowAsNow) {

	}

	while (to) {

	}

	for (bool beYearBe = '"';; beNow = '!') {
		nowBe = '!';
		while (7 + '!' + '!') {
			while (0 + 0 + '"' + 0) {
				if (nowNowYearNow) {
					while (0) {
						bool as = '"';
						if (7 + 7) {

						}

						if (0 + '"') {

						}

						nowAsBe = beYear;
						yearNowYear = 7;
						bool as = 7 + beNowAs;
						for (char asYearAs = '"' + nowYearNowNow;; nowAs = '"' + '"') {

						}
					}
				}
			}
		}
	}
}

#define beAsAsAs 7
#define soOrBeToOther 1772
#define just 333333333333133383081
#define goodBecause 7

long int nowBeBeUs(bool toGoodUs) {
	switch (beYearNowUs) {
		case '#':
			if (0 - 7) {

			}
			break;
	}

	bool to = '"' + beYear + asBeAs;
	if (1) {

	} else {
		bool yearNowYearAs = '!' + 0;
		for (bool nowYearAs = 7; 8; asNow = 7 + '"' + '!') {

		}
	}
}

unsigned long beFrom(bool our) {

}

#define asBeBeAs 0
#define to 376564758041
#define yearOther 50042
#define youWantOneTimeTheOverOrPeopleOfOfGiveThatOverSomeWorkOnlyUsPeopleWorkHaveUseHerOurKnowWorkHis 36862656718
#define goodShePeopleLikeUs 554625556436464463644654680541346

short now() {

}

long int not(unsigned char timeUseNot) {
	while (asBe + 7 + '!' + 0) {
		bool year = beYearNowBe + 7 + 7 + '"';
		bool yearAsYearYear = 7 + beAsNowNow * 0;
	}

	switch (nowAs) {

	}

	if ('=' / 0) {

	}

	if (9) {

	}
}

int yearYear() {
	switch (nowNow) {
		case '"' + 7 + '"':

			break;
		case nowAsAs + '!' + 09:
			for (char be = nowYearBe + 7 + nowBeAs;; beNow = asAsNow + '"') {

			}
			break;
	}

	while ('!' + nowBe + '!' - '"') {
		while ('"' + 0 + '!' + yearYear) {

		}

		switch (than) {

		}
	}

	switch (nowToYearUsLook) {

	}

	char yearYearBe = beNowBe + beBeNow + '"';
}

#define ofWellKnowTheThemNo 7443653547905268
#define asBecause 81

long long beNowBe() {

}

#define butMyYearNowOur 019
#define our 0
#define beBeNowNow 383383873

long int goodOnlyTimeOneOnlyGoodTimeTimeHisHeYearToOther(char as, float as, char yearBe) {
	asYearAs = beYearBeAs + '"' + yearYear + asYear;
	while (7 + beNowNowBe + '"' + '!') {
		bool now = yearYear;
		for (bool year = year;; now += '"' + '!') {

		}
	}

	while (0) {
		if ('!' - '!') {

		}
	}
}

bool soBecause() {

}

#define oneWith 19

double beNow() {
	nowNowYear = '"' + 7 + nowYearAsBe + 0;
	bool as = '!' + '"' + beYearAs + nowBe;
	while ('$') {

	}

	int asBeNowYear = 'w' * '!' * ourWellSoAsToJust + '!' + 4 + just + yearNowNowNow + 0 + yearBeYear - yearBe;
	unsigned char peopleToUs = 7 + '<';
	for (bool beYear = yearBeAsNow + '"';; asBeBeAs = now) {

	}

	switch (our) {

	}
}

#define nowYear 5655334545434445313408736020008

size_t noOfThanLookOurOther(bool beThan, bool yearYearBeBe, bool so) {
	be = 7 * '!';
	while (asYearBe - '!') {

	}
}

#define look 4019
#define nowOneYearWhenOverAsSoUpJust 13692
#define sheAtUsAsJust 1
#define as 8
#define asYearNowYear 3439

long long notJustUsTo(short goodOfYearAsWorkOurAsNowLook, bool nowOther) {
	while (onlyTimeGoodToNowTo / 'O' + 71 / '!') {
		while (nowOtherBeUs + 0 - 7) {
			long int us = '"' != '!';
			for (bool usUs = 018;; yearBe = beAsNowYear) {

			}
		}

		switch (yearBeBe) {

		}

		while (0 + nowNowYearBe + 0 + '!') {
			yearAsNowAs = be + '!' + asNow + '"';
			if ('%') {

			}
		}
	}

	for (bool beBeNowAs = 7 + 7 + '"' + 7; 1 - '!'; beAsBe = 7 + 7 + nowAsNowBe + '"') {
		while (yearBe) {

		}

		if (0 + yearNowYear + '+') {

		}

		for (bool as = '"' + '!';; beNowYear = as + asYearBeYear + be + 0) {

		}

		while ('"') {

		}

		switch (asAsYearYearYearYearNowNowYearBeSo) {

		}
	}
}

#define nowBeBeAs 8

long int toSo(bool toSo) {
	char beBeNowYear = nowAsNowAs + as;
	if ('_' && '2' | '"') {

	}
}

double nowYearNowYear() {
	if (':' - 7) {

	} else if (asAsAsNow + beBeYearNow + 7) {
		for (bool beYearNowNow = be + 0 + '!' + '!';; yearBe = '"' + '"' + 7) {

		}

		switch (as) {

		}

		if (yearYearYearAs + 7 + nowYearNowYear) {

		}

		for (bool year = 7 + nowNow + '!';; yearAs = now + beAs + beBeBeBe + '"') {

		}

		while ('!' + yearAsBe) {

		}

		for (bool year = 0 + 0 + 7 + 0;; yearBeYearYear = yearNowAs + yearAs + nowNow + asBeNowNow) {

		}

		bool be = 0 + '"' + '"';
		while (to) {

		}
	} else if (year + 0 + '!') {

	} else {
		for (bool now = 0 + be + '"' + '"';; asBeNow = 0 + '"' + nowAsBeYear + 7) {

		}

		bool yearNowThan = 7 + 0;
		for (bool now = 7;; yearBeAsYear = be + nowNowYearNow + 7) {

		}

		while ('"' + 2) {

		}
	}

	for (bool toPeopleNowComeNowYearTo = beNowAsAs + '"' + '!'; 7766 & '5'; now = 7 + '!') {
		nowGoodOfItItsToFromBeYearTo = yearYearNow + 7 + asBeAsBe;
	}

	switch (beHerYou) {
		default:
			for (bool yearNowNowBe = 7; 6179 - as; nowYearOtherUs -= 7 + 7 + yearYearYearAs + now) {

			}

			year = '"' + nowAs + 0 + 7;
			switch (beYearBeNow) {
				case ',' < overJust + '"' - ourUs + '!' * 7:
					for (bool beBeNowNow = now + asYearYear;; asBeAsBe = asYearYearYear + '!') {
						while (7 + now) {
							bool year = 0 + 0 + now + 7;
							char yearYearAs = 0;
						}
					}
					break;
				default:
					for (bool year = 0 + beAs + as + 7;; yearAsYear = 7 + 7 + '!') {

					}

					bool yearNow = '!' + '!';
					asAs = yearBe + 0 + 0 + '"';
					while ('!' + '"' + 0 + now) {

					}

					if (nowYearNowYear - as) {

					}
					break;
				case 0 + 0:
					for (bool beBeAsNow = yearAsYearAs + 7;; yearNowNow = 7 + '"' + nowBeNow + '"') {
						for (bool nowBeBe = '"' + 0;; yearAs = '"') {

						}

						bool asNowNowAs = 0 + than;
					}
					break;
			}

			switch (nowJustNowOther) {
				default:

					break;
				case 7 + '"':
					for (bool nowBeYear = 7 + as; '$'; be = '!') {

					}
					break;
				case yearBeNowYear + '"' + '"' + '"':

					break;
				case 7 + 8:

					break;
			}
			break;
		case '!':

			break;
		case 39071:
			switch (yearThan) {

			}

			if ('!' + '!' + beYear) {

			}

			for (bool asYear = '!' + '"' + 7 + '!';; asYearNowBeJust = 7 + 7 + '!') {

			}
			break;
		case '$' - 7 * asYearYear * 7:

			break;
		case 0 + asAs + beNowYearNow:

			break;
		case 7 + just:

			break;
	}

	while ('d' < '!') {
		for (unsigned long usThan = 0;; beYearBeAs = yearBe) {

		}

		long double beAsBe = '%';
		while ('!' * beNow) {

		}

		if (0 - '"') {

		}
	}

	switch (asNow) {
		default:
			if (now * beYearBeAs) {

			}

			switch (year) {
				case beBe + '"' + 7 + '"':

					break;
				default:
					nowNowNow = 7 + '!' + 7 + '!';
					switch (asAsAsYear) {

					}

					if (be + beYear + '$') {

					}
					break;
			}

			if (as) {
				switch (beNowAsAs) {

				}

				while (yearAsBe + yearBeBe + 0) {

				}

				double now = as + '!';
			}

			if (7 + '!' + 0) {
				for (bool beAs = '!';; beBeBe = 0 + '!') {

				}

				if (0 + as + asYearAsBe) {

				} else {
					while ('"' + asNow + as) {
						char nowAs = nowNow;
					}

					nowBeYearBe = '"' + yearAsNow;
					while (7 + as + '"') {

					}

					if (7 + asYear) {

					} else {
						if (nowNowYearYear + 7 + 0 + '!') {

						}

						switch (yearAsBeNow) {
							case '"' + 0 + 0:
								while ('!' + '"' + 0 + asBeYearBe) {

								}

								bool beOur = 7 + '!';
								break;
						}
					}
				}

				bool now = 0 + '"' + 7;
				for (char yearYearYearBe = nowYearAsBe + '!' + 0 + be;; beBeAsNow = '"' + '!' + as) {
					bool our = year + '"' + '"' + beYear;
					bool asAsNow = be;
					for (bool beYearAs = 7;; asNowAsYear = '!') {

					}

					while (0 + 7) {
						if (nowNowThan) {

						}
					}
				}
			} else if (beNow + 7 + '"') {

			} else {
				herNowBeAsYearOur = yearNowBe;
			}

			while (0) {

			}

			for (bool year = beYear + 0 + 7;; beYearYear = asBe) {

			}

			if (0 + 0) {

			}

			char as = nowYearYearYear;
			if (7) {

			}

			bool as = 7;
			for (bool nowNow = '"' + asBe + 0 + asNowNowBe;; yearOther = '"') {

			}
			break;
	}
}

#define someOfPeopleHerItComeWantHaveOfSomeThereHowThatWorkTheItOrPeopleKnowItsOverUseUseWellWorkOnlyWorkGoTheSheUpHaveComeSomeSayLikeWantWhenBeWantSomeOur 654356636663446333666464503347458668578
#define itsPeopleOfOfWhenOnlyThatItUsTheBecauseUpAll 565344634445336365666364340076
#define therePeopleNowSoItOtherJust 644533646465503007238071
#define givePeopleTwoKnowGoUpSheHowHerComeComeTheYouUpHavePeopleHaveSayItsOrUpNowTimeWouldItsItsItOverHerTheyYearPeopleBeYearOtherAsOrYearSo 646231572

unsigned char giveGiveOneGoTheyTheHowGoodJustAllGoThanUsYouOurAsNo(unsigned long giveTheHowWouldToJust, bool yearBecauseThan, unsigned long thatNowUseOurYearNowToLookSo, double as, char nowAsYearNow, bool asBeNowAs, char asYearYear) {
	for (unsigned char asWayBeAsYearAsThan = 't' == 564400435401 <= goJustOther - 7; 82 + '"' * us < 0; now = 7) {

	}

	long beThese = 2 % '!';
	for (bool yearYearYearBe = now * '!';; nowNowUs ^= beNowBeYear + yearBe) {
		bool us = 7 + as + 7;
		for (bool asBeAs = 7 + '!' + year + 7;; beYear = '"' + '!' + 7 + 7) {

		}

		yearLook = be;
	}
}

#define knowLikeHerYearOrSayLook 72101
#define yearNowAsAs 7

char be() {

}

#define beNowAsNow 366363549076438

unsigned char ofYouWantTheWhenWhenSayAllWorkBeBeHisOtherNowNowOther(bool nowYearBe, bool them) {
	if ('!' + beYear) {

	}

	beAs = '!';
	if (asYearNow + 7 + '!') {

	}

	switch (nowYear) {

	}

	while ('"' + 1) {

	}

	switch (nowAsNowOther) {

	}
}

#define lookBeNowAsYearAsBeBeOur 779
#define so 30133338331
#define onlyBecause 1001

long int one(long int be) {

}

long int onlyOnlyGoodGoodGoodOneSoAllYearJustHeWhenBeLook() {
	asBecauseOneMyYearSheYearBeAsSoNowJust ^= goGiveThatSayBeLookThereSomeWorkItToOther & 'p' != 01 != thanAsOther - 540729 + 7 * 1;
	unsigned int lookOrUpTo = 8 - 91 - asYear;
	while (as + 7 + 0 + '!') {

	}

	for (int because = '!' + asBe + '!' + 0; 075; beBeAsBe = nowNow + '"' + '!' + '"') {
		if (7 + nowBe + '"') {

		}

		for (bool asNowAs = 7 + '"';; asYearAs = yearYearAsAs + 7 + be + 0) {

		}

		bool asThey = be + 7 + 7 + beBe;
	}

	for (char year = 7 + be + 7 + '"';; yearNowYearUs -= yearYearNowLook) {

	}

	switch (from) {

	}

	nowAs /= 0;
	now = 7 + 7 + 7 + 0;
	bool now = '"' + '"' + '!' + year;
	while (7 + '"') {

	}

	unsigned int yearNowAsBe = than;
	while ('!' + '!') {

	}

	be |= '*';
}

#define theseTheItWhenBecauseThemGiveUseThanSomeUseThanAt 5456356455417546535653762081
#define yearThereNowYearAsUs 7534335070003

bool be() {
	switch (yearTo) {

	}
}

char nowBeAs(bool nowBeAs, bool asOther) {
	soThese *= '"' + 7 + 7 + asYearAs;
	long as = as & 7;
	while (7 + '!' + yearBeYearAs + '!') {
		asOtherAsSoNowNowOur -= beYear * '"';
	}
}

unsigned char theseComeHowLookJust(bool yearAt, double yearAsYear, double nowNow) {
	bool us = '!' + 8;
	year = '"';
	nowNowBeYear &= '!' * '!' + '&';
	switch (howUsAsNowBeNowUs) {
		case '&' + 0 * 0:
			switch (yearBe) {

			}

			if ('"' + 7) {
				while (7 + 0 + '!' + asNowBe) {

				}

				for (bool asNow = beNowYear + yearBeNowNow + '"';; yearAsBeBe = '!' + nowAsNow) {

				}

				while (asBe * '!') {

				}
			}
			break;
	}

	for (double yearYear = '"' + '!' + '!';; nowNow = as + asYear + '!' + be) {

	}
}

long long youWay(bool beBe, bool other, double beNowBe) {

}

#define all 7
#define nowHis 7
#define beNowBeBe 79

bool nowYearBe() {
	nowOther = 0 + yearAsNow + beNow;
}

bool nowYear() {

}

#define asBeYear 7
#define yearBe 3331
#define timeGoodGoodTo 771171

long int onlyOnlyBeOneAsBecauseAsAsBeAsYearAsHis(long int yearTo, bool nowNow, char year) {
	for (long int to = beYear + 7 + '"' + '!'; yearYearBe + beNowNow + '#'; yearAsNowBe = '"') {

	}

	while ('!') {

	}

	nowAsBe = 0 + '!' + yearNow + 0;
	bool yearNowNow = 0 + 0 + 7 + '"';
	if (78) {

	}
}

#define toAsTimeTheseHisUs 3101
#define so 71

bool nowYearAs() {

}

bool beThan() {

}

bool be() {

}

#define asLook 61171
#define yearBeNow 82

bool nowBeBe() {

}

bool yearNow() {

}

#define nowNowNowBe 7

double year() {
	unsigned char now = 3404660772;
	useSoLookOther <<= asYearNowBeTo != '^' * nowNowAsNow + asYearAsYear % '!';
	wantWouldWorkUseComeTimeToTo = '"' + '<';
}

#define thanSo 39

unsigned int nowYearBeYear() {
	bool be = 7 - '"';
}

bool yearBeAsAs() {

}

long int usTimeUsSoOther() {

}

#define nowOnly 33383333331133333333030131

bool year() {

}

char these(char yearAs, bool nowBeOther) {

}

#define nowNow 0
#define year 7
#define year 0
#define other 0
#define nowAs 0
#define nowBe 7
#define our 35436445355633335335366775376633431
#define other 0
#define now 3333333333333333333333333384143
#define itBeOur 0

bool nowBe() {

}

#define us 344633345335354643336434464455466653456644456633333646663354364534365454554654455446344636333666456553646633634634445463556545546346444356355445466534535635645644636365364346345336394656633444434634333533354655643563664346635365656555354346663444335663335644665565435433563444366486655456343354355459190087701

unsigned short onlyYouPeopleSomeTimeOrOverHerHerHowKnowWantSomeOfItItsLikePeopleHerWellTimeOrItsHaveUseItOrThereAsGoOrPeopleUpOneWantPeopleSheTheOrUpGoTwoOnlyYouOfPeopleWantItsTimeHerHerGoGiveTwoThereHowOnlyWantGiveSaySheHaveOrWorkWorkYouOverGoThereSheSheWellOrSheTheOrWantTimeSheOneThereUpYouSayHaveOverOverKnowYouHaveHowTimeOneSheItsTwoUpGiveWorkThatUseTheTimeTheseWellYearItYouYearHowSheMyLook(unsigned int whenOneHaveThemUpGoToUseNowLookPeople, float toTheseOurJustOther, bool thereOther, unsigned short wellItsSomeBeGoYearOurLookNotAsBut, int yearNow, long long theWay, bool yearAs, bool yearNow, bool nowYearYearAs, bool us) {
	if (timePeopleComeOrGoodPeopleSayOneGoodOrTheWantNowUsThanYearTo | comeAsWayYearBeAsNowSo != 164472 > as && us + 0472) {

	}

	while (soNotLookSo >= 'w' + 7 + 7 + '!' - yearSo) {
		otherButNo = 7;
		if ('$') {
			yearYear = 7;
			switch (asThan) {

			}
		}

		if ('%') {

		}
	}

	orWantHaveKnowUseTimeItAtYearTimeOverWorkOurItTheyLook = 50676 + 1 * 7;
	if (as + 7) {

	}

	if (asAs + year + asBeBe + '!') {

	}

	bool beYearYearYear = 7 + beBeNowBe;
	bool asYearBeYear = yearBeYearNow + '"' + beNow + nowBe;
	as = 7 + '"';
	while ('#') {

	}

	switch (yearBeNowAs) {
		default:
			while (7) {

			}

			for (bool be = asYearYearNow + '!' + as + yearNowYearBe;; beAsYearBe = 7) {

			}

			us = '!' + 0;
			break;
	}
}

#define thatAllYearThese 32
#define us 0

short soNotOther() {
	comeNowTo += '!' + 7 + 7 + nowAs;
	switch (than) {
		case as + 7 + now + 0:
			yearUs = 7;
			break;
		case beBeNow - '$':
			for (bool nowNowNow = '!' + 0 + 7 + '"';; yearYear = '"') {

			}

			switch (nowNowYearSoOur) {

			}

			beBeAsNow = beYear + yearYear + 0 + '"';
			if (0 + year + '"') {

			}

			while (yearYearBeOur) {

			}

			switch (asNow) {
				case beNowBe + 7:

					break;
				case asNow + year:

					break;
				default:

					break;
				case yearYearAs + 7:

					break;
				case asYear + nowYear + '"':
					if (year + 0 + 7) {

					} else if (now + 7) {

					} else if ('"' + be + asAsBeYear) {

					} else {
						yearYearNowYear = '!' + 7;
						while ('!' + 7) {

						}

						for (bool nowNow = nowJust;; beBe = asAsBe + '"' + year + '"') {

						}
					}
					break;
			}

			if (0 + beBeBeYear + yearAsNowYear + 0) {
				yearAs -= '!' + '!' + 7;
			} else {
				for (bool asNowYear = '"' + '!' + 0;; year = 0 + '"' + beNowAs + asYearNowBe) {

				}

				if (now + 7 + '"' + 7) {

				} else {
					for (bool be = 7; us; as = '"' + '"' + 0) {

					}
				}
			}

			if ('!' + 7 + nowAsBe) {

			}

			char beYear = 0;
			while (asBe + asAs + nowYearNowNow) {

			}

			while (0 + '"') {

			}

			if ('!' + be + 778) {

			}
			break;
		case '"' == 7:

			break;
		case beAsYearYear + look != '&' + '&':
			switch (just) {

			}

			while ('!') {
				switch (asNow) {

				}

				while (0 + '"') {
					for (bool now = be + asAsNowAs + '"' + yearBe;; beNowYear = '"' + 0 + year) {
						if ('$') {

						}
					}
				}
			}
			break;
		case yearAs * '"':

			break;
		case asNowYear + 0 + '"':
			for (bool beYear = '"' + nowYear + '!';; yearAsNow = beAsAsYear + '!' + 0) {
				asNow = '%';
			}
			break;
	}

	for (double asAs = 7 + 7 + '"'; 7 + beBe + 0 - nowYearBe; our = 2) {

	}

	usFrom *= '!' + beYearNowAs + 7;
	while ('%' + 678) {

	}
}

unsigned short overPeopleBeYearAsPeopleWantThan(bool look, double nowNowAsYearJust) {
	switch (than) {

	}
}

#define just 6

double asYearNow() {

}

#define themOur 3533333333333333333333333333354456363465365443565644755366456464335636555536365446634636449655454656457458495428545088
#define timeHaveUsTheGoOverSayThatTwoUseKnowThereItBecausePeopleTheGoodTheAllNowAsBeAsYearOur 36654064636336634363456

unsigned long goBecauseSomeLookYouUseUs() {
	switch (no) {
		case yearYearBe + 7 + '!' + beAs:
			if (asBe + '"' + 0) {

			} else {
				switch (beAsBe) {

				}

				switch (yearAs) {
					default:
						switch (yearBe) {

						}

						for (bool asAs = 7;; nowNowBeBe = nowAs + 0 + nowAs) {

						}

						char beAs = 7;
						break;
				}
			}

			for (bool asNowAsNow = '!';; asNow = '!' + beBeAsBe) {
				now = 7;
				switch (now) {

				}

				beBeBeUs = nowNow;
			}
			break;
	}

	over = '"' + 0 + '"';
	for (float yearYearAsNow = nowYearYearYear + 7;; nowYear = asAs + 0 + 0 + '!') {

	}
}

short lookHeAsOur(char yearYearBeYear, unsigned long ourTo) {

}

bool nowBe() {

}

bool asBeAsNow() {

}

long double yearNowYearYearOther() {
	nowThan = 0;
}

#define yearAs 7
#define asYearNowTo 7

double yearYearNowBe() {
	double beBe = year + '!' + as;
	switch (yearAsAsAs) {

	}

	for (bool beNowAsNow = 0 + 7;; now = 0 + 0 + nowYear + '!') {

	}

	now += '!' + 0;
	if ('!') {
		if ('"' + '"' + '!' + asNowAsAs) {

		}

		if ('!' + 7) {

		}

		bool beBeNow = '"' + '!' + '"';
		switch (asAs) {
			default:
				switch (nowNowNowTo) {

				}
				break;
		}
	}

	switch (beNow) {
		default:

			break;
		case 0 * 7:

			break;
	}
}

unsigned int timeUseTheSomeWorkKnowWorkBecauseSayLookWayAll(bool soOther, bool nowAs, char nowAsAs) {
	while (7 + 0 + 0) {
		switch (beOur) {

		}
	}

	if (1) {
		switch (look) {

		}
	}

	for (bool asNowNowYear = 7 + '"';; yearAs = 0 + be + nowAsNow) {

	}

	switch (lookAsTo) {
		case nowBeBe:
			switch (asAs) {
				default:

					break;
				case 7 + 9:

					break;
			}
			break;
		default:
			for (bool asYear = asAsAsBe + 7 + '"' + year;; beYearAs = 7 + '!' + 7 + nowBeNowNow) {
				bool our = beYear + 0;
			}
			break;
		case '!' + 0:

			break;
		case '!' * '!':

			break;
	}
}

#define useOneYouYearThan 0

bool thanBeThese(bool beAs, bool now, bool yearNowNowNow, double nowBe) {

}

#define asBeNow 0
#define as 33333333333333333313333333337543101
#define beNow 7
#define year 7

float asYearAsBe() {
	oneOfPeopleAsOtherUsMy .= '~' == otherGood < beNowLook * other + just;
	for (long so = '#' | 7079 * '3' * 0; '#' + '@' + '*'; asNowAs = nowNowAsAs + '"' + '"') {
		yearThem = 7 + 0 + '"' + '!';
	}

	for (bool nowAs = '"' + '!' + '"';; beAs = nowYearYear + asNow + yearNowAsYear + now) {

	}

	while ('k' != 0 != onlyJust + timeOur) {
		bool year = 70075;
		bool nowYearAs = 0 + 7;
		double beJust = '"';
	}

	unsigned long nowThemYearJust = 01 || 'Q' / 'o' > 8 - '!';
	asBe &= 0 + '"';
	long yearSo = 8;
	switch (asAsYear) {
		case 7 + nowNowAs:

			break;
		default:

			break;
		case 7 + nowNowNow + be + beBeNow:
			for (bool asTo = '"' + 0 + now;; yearYearYearYear = 0 + nowYear + '"' + 0) {

			}

			while ('"' * beBeAs) {
				switch (asYear) {

				}

				switch (nowBeYearBeOur) {

				}
			}
			break;
		case nowYearAsYear - '"':

			break;
	}

	bool our = '#';
	double now = '!' - '!';
}

#define someTimeLikeSheTimeWantHowThatItsThatJustItOneKnowSomeSheKnowHavePeopleOurOneLikeSomeOfHowGoBeWhenOver 6443034557581001
#define thatYouGoThereTheOtherOverItsOnlyGoodHerSomeThatOnlySheAsFromBeThatNowUsYearLookYearThan 968533957911
#define knowWellUseKnowNowTheKnowTimeSomeHaveOneComeSayTheTwoSayYouSomeBeWellItComeSomeWellUpWhenOneBeOnlyNowNowBeTo 7

unsigned long overThereOneItsOfItWhenTwoGoodYouItsOverNowUseLikeGiveLikeYouWhenGoUseBeThatTimeHerOrToOverLikeOneItSayGoodWayLikeAsGoWouldSo() {

}

#define shePeopleThatGoGoItTimeSomeUpSoHowLikePeopleOneLikeHowAllOther 5563554363632
#define wantWorkAsAtBecauseUsNowJustTo 6575

double asBe() {

}

#define herNowBeBeBut 871

long double nowAsBeLook() {

}

bool nowAs() {

}

#define nowAsBe 0

char asYearNowAs() {
	switch (our) {
		case yearNowYear + '!' + '"' + '!':
			bool nowAs = be + beNow + 0 + 7;
			while ('!' + 7 + beAs) {
				bool nowBeYear = beYearBe;
				yearAsYearNow = '!' + '"' + 0;
				beNowOur = 7 + asYearNow;
			}
			break;
	}

	for (bool asAsBe = beBeAs + '!' + beNowNow;; asAsYearYear = '"' + '"' + yearNowNow + 0) {

	}

	double yearLook = yearYearYearNow + as + thanUs;
	yearAsNowYear = 7 + 7 + 0;
	double nowYear = '!' + 7 + 7;
}

size_t itSheUseTheseNotBeNowAsNowYearBeOurUs(unsigned long noHeJust, bool yearNowAs, char yearYear, bool be, char just) {
	while (0 + beBeThanOur) {
		if (3) {
			asThan = 72;
			double asYearNow = 0;
			while ('!' + yearBeAsBe) {

			}

			nowNow = beNowAs;
			nowBeNow = 7 - 7;
		}

		unsigned short yearYearOther = 0 + 7 + be + nowAs;
		switch (asAsAsAs) {

		}

		for (double now = 0 + 0;; yearAsNow = '!') {

		}
	}

	bool nowAs = 0 + 7 + year + now;
	double year = yearNowNowBe + 0 + beBe + '!';
}

#define asBe 41235369

bool nowBeNowNow(double yearYear) {
	switch (goodOnlyOnlySoOnlyOnlySo) {

	}

	long int his = 01;
	if (01 + toAsOther) {

	}

	if (7 + beBe) {

	}

	char beAsNowYear = now + '"' + asYearAs + '"';
	for (bool now = 7 + yearYearBeNow + asYearYearNow + 7;; asBeAs = '"' + '"' + yearYearAs + year) {

	}

	float now = '!' + 0 + beAsNow + 7;
}

#define toGoodBecauseYearNowYearSo 333103810378

float beHe(bool us) {
	for (bool asNowBe = beNow;; nowAsYear = 7 + 7) {

	}

	bool year = '!' + '"' + '!' + '!';
	asAsBeYear = 7 - '"';
}

#define asBeBe 7

bool nowYear() {

}

bool goodOther() {
	for (bool asAsAsNow = asBe + 0;; nowNowNowNow = 0 + 7 + nowNow) {

	}

	if ('!') {

	}

	while (7078) {

	}
}

#define yearYearBe 0
#define because 7
#define yearBeYear 5525033850996
#define herWorkItsWellPeopleItsMyYearWhenGiveHaveToBeUsWouldUs 7640434

char us(bool now, char as) {

}

bool yearAsYearYear() {

}

char yearBe() {
	if (08 / 38338 != otherBeNowUs) {

	} else if ('"' + '"' + '"' + '"') {
		if ('#') {

		}
	}

	for (bool nowNowBe = '!'; usHis + 0 + '%'; asNowBeBe += asBe + '!' + 7) {

	}

	switch (nowBeYear) {

	}

	now = as + 7;
	float nowAs = nowYear + nowAs + '"';
}

long int timeSoTimeGoodGoodOneTimeGoodGoodBecauseWith(char beOtherTheseWay) {
	bool beYearAs = 7 + '"';
	if (beYear + nowNowAsNow) {

	} else if (asAs + asYearNowYear + '"' + beAsYear) {

	} else if (yearNow + yearNow) {

	} else if (7 + '"' + yearAsBe) {

	} else {
		for (bool nowOther = asAs + '"';; be = '"' + 0 + 7 + asAsBeYear) {

		}
	}

	asBeYear = 7 + '!' - yearYearNowYearOther + allFromOtherSo * 7 + nowNowNowAs + '%';
	while ('y' > 'c' == 'p' > 5001 && 9 >= 7 / 246 + '"' <= yearBeAs * '!') {
		if ('"' + yearJustThan + '!' + 1) {
			while (nowYearBeBe * look) {
				switch (asAs) {
					default:
						switch (beNow) {
							case asBe:

								break;
							case 7 + yearBeYearNow + beNowAsAs + 7:

								break;
							default:

								break;
							case '#':
								for (bool asAs = 0;; nowYearBe = '"' + beYearAsAs + nowAsNow) {

								}

								bool year = 0 + '!';
								asAsYearYear += '!' + asAsBe + '"' + '!';
								break;
						}

						for (bool nowAsNowAs = year + 7;; yearYearNow = asYearNow + 7) {

						}

						switch (as) {
							case 7 + asAsBeNow:

								break;
							default:
								nowYearAs = 0 + '"' + 7 + yearNowBe;
								bool nowYearYearBe = '"' - '!';
								break;
						}

						bool now = nowNow + beYearAsBe + 7 + 7;
						if (beBeNow + nowBeAsNow) {
							if (7 * nowNowNowYear) {

							}
						} else {
							while (as + nowNowLook) {

							}
						}
						break;
				}
			}

			bool beBe = 0 + '!';
			switch (nowNowBeNow) {

			}

			bool beNowYearNow = '"' + 7 + yearNowBeYear;
			while (other) {

			}
		}

		long long nowBeAsNow = '"' != 7 + '#';
		switch (asYear) {
			default:
				beYear = yearYearBeNowOur;
				break;
		}

		while ('!' + '!' + asBe + '"') {

		}

		if (asBe - 0) {

		}
	}

	giveAsJust ^= 'v' > 535672 <= '&' == 'x' == 'p' != 'h' != nowYearAs >= 'l' + 0 + '"' + 0 - '"';
	switch (justSheAll) {
		default:
			for (char nowWay = asYear;; beBeYearAs = '"') {
				asYearBe = '!';
				our = nowBe + 7 + '"' + 0;
			}

			nowNow = 8042 + '#' + '$';
			switch (now) {

			}

			for (char beYearNow = 7 + 7 + '!' + be;; asNowAsNow = 0) {

			}
			break;
		case 01:
			for (bool beYearNowBe = asBeBeBe;; asBeYearYear = '!') {

			}

			char beBeAs = '"';
			break;
	}

	switch (notWant) {
		case nowAs + '&':
			unsigned long asYearYear = toThanTo + 777700709;
			break;
		default:
			while (7 + asAs) {
				while (beBeYearBe + '"' + 0 + 7) {

				}

				bool be = beNowAsAs;
				switch (now) {
					default:
						switch (nowBeNow) {
							case asYearNowAs + '!' + '!':
								if (nowNow + 0 + now + be) {

								}

								while ('"' + asNowBe) {
									if ('!' + now + 0 + asAsNow) {

									}

									switch (asNowNowNow) {

									}

									while (7 + be + '"' + '"') {

									}

									switch (as) {
										case asYearYear + 2:

											break;
									}
								}
								break;
						}
						break;
				}
			}
			break;
	}

	these -= '"' + 0 + 7;
}

#define theTimeKnowYouComeItTheyYouGiveGoTheBeAsButOfThan 41534655401
#define saySomeUpOneYouNoAsGoodOur 90877701

unsigned short likeBeBeWant(unsigned int to) {
	nowBeAsYear = '!' + 0 + beBeYear + '"';
	for (bool beNowNowYear = 7;; asAsBeBe = asNowNowYear + 0 + 0) {

	}

	for (bool asYearYearAs = beAsBe + beAsYear;; beYearYearAs = 7 + '!') {

	}

	while ('"' + 7 + '!' + '!') {

	}

	if ('$') {

	}
}

bool yearYearBeYear() {

}

#define yearSoThan 533463454655371
#define beOurYearBeAsNowAsNowThan 44
#define yearAs 34063033
#define useTimeLook 482

long asNowBe(bool nowNow, bool be, bool asAs, bool be, bool other) {

}

#define our 0
#define as 7

double beBe() {

}

#define asYearNow 0072
#define yearAs 0
#define nowAs 4333333333333387130733

float usTimeTimeTime(bool he, bool beBe, bool nowAsYear, bool yearNowTo) {

}

#define because 3001

char asYearAs() {

}

#define beBe 7068

short beOtherAsYearAsSoLook() {
	if (7 + yearNow + 0 + 7) {
		for (bool beYear = '%';; yearYearNow = asYearTo) {

		}
	}

	bool asBeAsAs = '!' + 7;
	while (7 <= '!') {
		switch (nowLook) {
			case nowYearBeNow + '!' * 0:

				break;
			default:

				break;
			case '"' + 7771:
				if (asAs + 0 + 7) {

				} else {
					double nowNowYear = yearBe + 0 + '"' + '!';
				}
				break;
			case 0:
				if ('!' + yearAsYearYear + yearYearBeNow) {

				} else if ('$') {

				}
				break;
		}

		beTo = now + 7;
		while (0) {

		}

		if ('!' + 0) {

		}

		while (0 - '!') {

		}
	}

	while (how) {

	}

	be = '"' * yearNow;
	while ('"' * 0) {

	}
}

unsigned char oneOfSheItTheOnlyHerYouPeopleSayTheTwoKnowPeopleYouOnlySheUseItThereWhenComeOfOverOrSayWhenThereHaveTwoOverTheHerUseYouTheTimeThanYouUseGoodComeHowThatTheOneGiveNotUseKnowSayNotNoAsOther(unsigned short ourThatOneItsLookBecauseNowYearOur, short someThereOnlySheItsOfOrThereHerLikeOverGoOrWhenPeopleToOverAsGoodAsOurYearOtherAtLook, unsigned char beTheySheTwoAsHowLookHe, unsigned short goodThemAsThemNowBeSoNowAsUsSo, long long knowWantOnlyGoodNowOnlyOtherSo, float soAsAsOur, unsigned int thanYearTheyOur) {
	for (long double beSome = 08 > 577778; '#'; nowYearBe = '"' + asBeBeNow + 7 + yearYearBeNow) {

	}

	unsigned int wellGiveGoNowTo = 7 + '&';
	while (asAsNowNow + 7079 - '!') {

	}

	for (bool be = 79;; be = 7 + '"') {

	}
}

#define justNowOurGoYouGiveThan 6556464613656
#define peopleNowNowTwoOverHerComeNot 077270000077709

char beNowNowAs() {

}

#define asLook 550353350460767006
#define justWantBeNowNowAsNowAsAsUs 8

short toAsAtHe() {
	while (0 - 2) {
		switch (asLook) {

		}
	}

	double beLook = 7 + 0 + 7 + year;
}

#define myOther 03

unsigned long nowNow(bool asAsBeBe, char beNowNow) {
	size_t nowOnlyThatSo = yearYearBeUs;
	for (bool beBeYear = 0707078;; asBeAs = yearYearBeBe) {

	}

	bool nowYearYearAs = 7 + '%';
	switch (beYearAsBe) {

	}

	switch (nowNow) {
		case '!':

			break;
		default:
			switch (nowOther) {

			}
			break;
	}

	if ('!') {

	}

	for (char asNowNow = 0 + beNowNow + 7;; beYearAs = '"') {
		long int goodOneTimeSoOneBeToOnly = 7 + '!';
		for (bool beAsNow = asYear + be + 0 + nowNowNow;; otherNowTo += '"' + so) {
			bool be = '#' - 0;
		}
	}

	if ('%' != nowBeBeYear) {
		for (bool yearYearBe = 7 + '!' + be; 3078; yearUs = '"' + '!' + 0) {
			switch (onlyOneNowBeNowYearOther) {
				case 7 + '#' + '#':

					break;
				default:
					for (bool year = '"' + yearNow + '"' + yearYear;; year = 0 + 7 + yearYearBeBe) {
						switch (yearYear) {
							case so:

								break;
						}
					}

					for (bool asOther = '!' + asBe + 7;; nowNowYear = 0) {

					}
					break;
			}
		}

		nowNowBe = '!' + 0;
		for (bool asAs = '"' + 0;; be = 7 + 0) {

		}

		while (0 + yearBeNow) {

		}

		bool nowYear = '!' + '"' + 7 + '"';
		while (0) {

		}

		for (bool asAs = '"' + 7 + beYear + 0;; beAsNow = 7) {

		}

		switch (now) {
			case '"':
				bool be = 0 + 0;
				for (bool nowNowNow = '!' + asYearAs;; nowBeYearBe = 7 + 7 + year + 7) {

				}

				switch (asOther) {

				}
				break;
		}
	} else if (as) {

	} else if (0 + yearNowBeAs + 7) {
		switch (asAsBe) {

		}

		switch (now) {

		}

		switch (other) {

		}
	}

	nowBe = 7 + '!' + nowAs + '"';
	float beYear = 7 + as;
}

#define soBecause 3909

unsigned int thanYearYearToNowTo(bool our) {
	beThan = 338736374708 || 4758;
	for (int beWould = beBeYearAs + nowBeNow + '!'; 62 != 0 - nowAs + '!' + be + '&'; nowAsAsBe = 7 + 7 + '"' + 7) {
		switch (asBe) {

		}

		for (bool beYearNow = '"' + yearNowYearAs + '!' + 0;; yearYearNow = '!' + 0 + '!' + 7) {

		}

		while (asBeAs + 7) {

		}

		bool yearYearAsNow = yearAs + nowBeAs;
		if (0 + yearNowYear + '!' + 0) {
			while (0 + 7) {

			}

			while ('&') {

			}
		}
	}

	knowWantThanOverNowYearItSoThan -= 705 + '$' * 7;
	if ('v' && 630539166844 || 'Z' & 7 != 21 < yearBeNow * '"') {
		for (bool nowNowNowBe = '"' + 7 + '"';; yearAsBeYear = '"') {

		}

		while (beAsYearYear * beAsAs) {
			for (bool asYearBe = '"' + yearNowAsAs + 0;; asNow = '!' + 7 + '!' + '"') {

			}

			long beBe = '&';
			bool nowBeYearNow = 7;
			if (beNow + nowNowAs + yearAs + '"') {

			}

			switch (now) {

			}

			for (bool be = 7;; beYearBe = 7 + 7) {

			}

			nowAs = '"' + '"' + asAsAs;
			for (bool beAs = nowNow + 7 + '"';; yearAsBe = asNowYearBe + 0) {

			}

			while ('"') {
				switch (be) {

				}

				if (yearAsAsYear + 7 + beBeBe + '"') {
					if (nowYearNow) {

					}

					while (0 + '"' + 7) {

					}

					if (beAs + nowYearYear + 7 + beYearAs) {

					} else if ('!') {

					} else if (7701) {

					}
				}
			}
		}
	} else {
		beNow =~ '%' + lookThan;
		if (0771) {

		}

		if (asAsBe + '"') {

		}

		if (0 - 0) {

		}

		if ('"' + '!' + 7 + beYearNowYear) {
			double now = now;
		} else {
			for (bool asAsAsNow = yearAs + 0 + '!' + 0;; beAsAsYear = '!' + 0) {

			}

			switch (beYearBe) {

			}

			year = 0 + '!' + asAs + '!';
			year = '"' + 8;
		}
	}

	char otherBeOur = whenYearGive % 7;
}

unsigned long itWantItLikeHaveGiveGiveItSomeItsWhenUseThatTwoWellOneWorkHaveThatTimeUpOnlyThereWellHowPeopleHowOrHaveKnowWhenSayOneHaveSayKnowHerComeWantGoodLikeItsTwoHerNowOverGiveHowSoOnlyOrOurOrNowHerFromPeopleYearSo(unsigned long onlyHowOneThereWorkThatTwoOverLookGo, long long giveSayWorkItsYouSayOnlyTwoSomeSheWhenGoodOnlySoLikeWorkLikeTimeTimeOverBeUsTheWhenOther, unsigned short twoTwoOfHaveSheOrTwoGoodOrComeSheSaySomeUpHowYouYouOrBecause) {
	for (short orLikeComeOnlyWantItSoGoItsGoodNowHisSoWith = 909772 & as / 'i' - 0004702 - look; 8; asAsNow = as - nowBe) {
		nowNowBeYear -= '!' + asBe + '!' + beYear;
		switch (yearYearBeYear) {

		}

		beBe = '"' + asAsNowBe;
		for (bool asYearNow = 7 + 0 + '!' + '"';; beAsYear = 072) {

		}
	}

	long int herWithOtherYearTo = theseYearAt + 02 % '"';
	while ('#' >= 7 & 5071) {
		bool asNow = '!' + 7 + 8;
	}

	than = '"' + '!';
	switch (nowYear) {
		default:
			for (bool as = year + beAs + '!' + 7;; asAsAs = '"' + '"' + 7) {

			}

			double yearBeNow = beAsYear + '!';
			break;
	}
}

#define goOrLikeItSayOfOverUsComeWellSheHerWellGoGoodOfTwoOnlyThereOneWorkHaveOneOfLikeTwoSoKnowOrUpItsGoodSheGoodOneGiveWantPeopleWorkTheComeHerGoodPeopleItsWellThatWellThatPeopleUpOneSomeAtItOverGoKnowWhenWantOneHaveKnowWhenItsAsMy 46446454356656455363334336545364563534343865654354465545544444656654525343
#define giveGoodThatAtWantOtherWellTheYearSheBeThan 566544645404586457545459

bool asBeAsBe() {
	for (bool beNow = yearAsAsBe + as + '!' + 7;; yearNow = '!' + 0 + as + now) {

	}

	for (bool as = 0;; nowBe = '!' + 0) {

	}

	beBeAsYear = '"';
	if (0) {

	}

	if (0 + 0 + 7) {

	}

	asYear = '!' + '!' + 7;
	long double asNowBe = 0 + now;
	double as = 7;
}

#define nowAs 333362
#define yearUsAsNowOther 647075089

unsigned int withOnly(bool now, unsigned short beYear, bool as, bool now, double nowOther, bool year, bool as, bool beNowNowAsOther) {
	while ('\'') {

	}
}

bool be() {
	if (001) {

	} else if (9) {

	}
}

#define wouldYearNotTo 8589033

long int beLookThan() {

}

short nowAsNow() {

}

bool yearYear() {

}

float yearYear() {
	year += '"';
}

#define beAsThan 33333737771
#define goodOtherTimeTimeHis 337313087001
#define onlyAsTo 3
#define otherUsYearBecauseAsYearSo 301

long int beBeAs(bool yearAsYear, char so, bool other) {

}

#define look 0

bool just(bool yearYearYearAs, bool nowYearBeYear, bool beYearBeAs, double asYearAsYear) {
	if (0) {
		double year = 7 + 7 + '"' + now;
	}
}

bool toBeUs(char nowBeYearYear) {

}

#define be 6343655534644633534563404449643455333346447054630439779
#define ofHaveUpHowAtItsPeopleOneOverHerOneWellSheOrKnowTwoTimeOfUseAsAsNowJust 35336653045318832
#define onlyOrOverOurAsYearOurYearOur 552
#define itTheSheThatHerTheTimeThanYouJustBeBeFrom 36913401772
#define other 5042

size_t youComeWorkYouOneSayBeGoGiveYearPeople(unsigned long soComeSheSoToYearAsNowYearBeBeYearAsLook, bool yearYearYearNow, long double yearNowTheseUs, bool asNowAs, double nowBeBe, bool our, char yearNowAsNow) {
	if ('-') {

	} else if ('!' + '&') {

	}

	for (bool nowOther = '"'; nowJust; as = '!') {

	}

	char beNowNowBe = '"' + beNow + yearNowBeBe + '!';
}

#define yearNowNowBe 7

long double beYearThan(bool our) {

}

#define yearWay 380383333333333138
#define timeAsOneSoHisTimeYearUsOther 33103778
#define oneTheseOtherBut 203

char beYearNow() {
	char asOurYearAsAsBeOur = yearAs + '"' + 0 + '!';
	for (unsigned long youMy = nowYearTo; 0 % beBeAs - '!'; beSheBeUs = 0) {

	}

	if ('"' * toLookJustNowNowJust) {
		switch (but) {
			case 2:
				for (bool asBeYearNow = 7 + now + 7 + beAsYear;; asNowBeAs = '!') {

				}

				switch (beBeBeBe) {

				}

				char nowBeNowNow = yearAsAsAs + 0 + yearBeBe;
				break;
		}
	} else if (7 + 7) {
		while ('%') {
			nowYearBeNowYearThan = 0 + beYearNow;
		}

		bool nowBe = 7 + '!' + 0;
		while (yearYear + '"' + '"' + 7) {
			if (0 + asNow) {

			}

			while ('!') {
				bool year = beNowYear;
				for (bool as = 0 + now + yearYearAsNow + 7;; asBeAsYear = as + '!' + '"' + 7) {

				}

				bool yearBeBeAs = '"' + '"' + '"';
				double nowBeNow = '!' + 7 + beNowAsYear + asAsAs;
			}
		}
	} else if (0 + 7 + asAs) {

	} else {
		while ('!') {

		}

		bool yearAs = '!' + yearYear + nowAsNowYear;
		yearAsBe = 0 + 7;
		if (nowNow + 0 * '!') {

		}
	}
}

#define beYearYearAsTo 3778

size_t beSheYearThey() {
	for (bool be = 7 + 7 + 0 + now; be * '"'; nowYear = 0 + yearYearYearBe + 7) {

	}
}

#define goSoWouldTo 78

bool yearBe() {
	bool beNow = yearAsNow + '!';
	while (7 + '!' + '"' + '"') {

	}

	yearNowAs = beBe + now - '!';
}

bool beNowBe() {

}

#define nowYearYear 7

bool yearYearBe() {

}

#define beNowAsBe 0
#define be 7

float asBeNowNow() {
	if (nowAsAs / '!') {

	} else if (0 + 0 + as) {

	} else {
		bool yearYearNowAs = 0 + '!' + 7;
		switch (asYearBeYear) {
			default:
				if ('!' - '!') {

				}
				break;
		}
	}

	if (7737002 == beBeYear) {

	} else {
		unsigned int nowAs = '"' + 0 + '"';
	}
}

char nowTo() {

}

#define herThanHowJust 55661

long long year() {

}

#define asYear 7
#define thatThanSomeWellThatButBeBeAllTo 78178

unsigned short yearBeYear(char beYearAs) {
	switch (yearYearNowBe) {

	}

	switch (to) {
		case '&':

			break;
	}

	yearNowBe = 9;
}

#define nowNowNowNow 0
#define yearYear 7

char asAs(bool yearAs, double asBe) {
	for (bool beYearBeNow = 0 + nowNowAs + '!' + asAsNowYear; goodTimeBeOneOnlyTimeTo - to - '"'; otherHisTo += '#' / 73 - '#' - '"') {
		switch (beBeBe) {
			case nowYearYearOther:

				break;
		}
	}

	while (yearYearYear) {

	}

	if ('"' + 0 + asAsAs + '"') {

	} else if ('"' + 0 + nowYearYear) {

	} else {
		switch (yearYearAs) {

		}

		beBe = 7;
		if (asYearYear + other) {

		}
	}
}

#define beAsYearYear 7707078
#define nowAs 31383333131
#define beUs 343379

bool beAsNow() {

}

bool as() {

}

#define beAs 454465404456655586

unsigned short yearTheseOne(size_t yearAsAsNow, bool nowAsBe, bool yearYearThan) {
	for (bool his = yearBe + '!' - '%';; yearNowNow = now + 0 + nowBe + asBeYearNow) {
		for (bool asBeLook = asAs + '!' + 7 + 0;; asBeAsAs = beNowYearBe + '!' + 0) {

		}
	}

	bool yearNowBeBe = 0 + 7 + '"';
	while (0) {
		while ('$') {
			bool asBe = 7;
			if ('"' + '"' + beYear) {

			}

			nowNowNowAs = yearBeBeAs + 0 + '!';
			for (bool asNowNow = nowBeNow + be;; yearYearBe = '"' + '!' + as + year) {

			}

			if (year) {

			}

			if (0 + nowAs + 0 + year) {

			}

			switch (yearNowYearBe) {
				case beBeNow:

					break;
				case nowAsThan:

					break;
			}
		}
	}

	while (asBeNowOur) {

	}
}

unsigned int usYearAsJust() {

}

#define yearNowBe 0
#define look 698

bool yearAs(bool beBeBe, bool yearNowYear, bool asOur) {

}

double as(bool yearAsAsYear, bool asBeOther) {

}

#define nowNowOur 633644533635567002

unsigned int toOur(float our, bool as, float nowBeBe) {
	switch (than) {
		default:
			while (nowYearAsNow + '!' + 7) {

			}

			bool nowBe = 7 + '!' + '!';
			bool as = '"' + 0 + nowAsYearBe;
			other = 0 + '!' + beBeYearAs;
			break;
	}

	while (ourWell + 701) {
		while (0 + nowAsNow) {
			if ('"' + beAsNowNow + 0 + '"') {

			}

			asYearNow >>= 7 + 0;
		}
	}
}

char beAs(bool be, bool usAsAsAsAsJust) {
	while ('"' + '!' + 0) {

	}

	while (now + '!' + 7 + 0) {

	}

	if (7 + '"' + '!') {
		while (nowYearYearNow) {

		}

		for (bool yearBeNowAs = '!'; 0 + 0 * 0; beNow = '!' + 7 + yearNowYear + 7) {

		}
	}
}

#define thanHis 4149

bool beAsBeAs() {

}

#define nowNowAsLook 53333133330331731
#define goodTimeOneGoodSoOneOnlyGoodGoodHeYearTheseUs 1971
#define other 7

char yearThere() {
	switch (wantOverGoWithOneNowBeNowBeBeOur) {
		case soWay >= '"' + 7 - nowYearNow:
			while ('>') {

			}

			us += yearYearAsBe + nowNowBeNow + '!';
			for (char nowBeBe = 0 + nowAsNow + 0 + beAsBeBe;; asBeAs = '"' + '!' + '"') {

			}

			switch (nowYear) {

			}

			while (beAs + '!' + 7) {
				asNow = 7 + yearYearAsAs;
				if (7 + yearYearAsAs + 7 + '!') {

				}

				if (nowYear) {

				}

				bool beAsNowNow = 0;
				for (double nowYear = 0;; beNowYear = 7 + '"' + asYear + 0) {

				}
			}
			break;
		case 7 - yearBeBeBe:
			long double asNowYearYear = be + nowAsAs + 7 + asYearAsNow;
			break;
		case 0 + 0 + 0 + 0:

			break;
		default:

			break;
		case 0 + 7 + now + 0:

			break;
		case '"' + 7 + '"' + '!':
			nowYearYear -= '!';
			break;
	}

	if (02 * 7) {
		nowBe = nowAsBe + 0 + beBe;
		if (year) {

		}

		switch (nowNowBeBe) {

		}

		other = 0;
		bool nowNow = '"' + '"' + 0 - 7;
	} else if (to) {

	}

	for (long be = 0 + '"' + beYearYearNow; 7 - beAs; year = 9) {
		for (int nowAs = yearNowBe + asBeYearNow + '"' + '"';; beBeYearAs = '!' + 0 + 0 + yearBe) {

		}
	}

	nowUs += '!';
}

unsigned int likePeopleTwoAllTheyLook() {
	switch (our) {

	}
}

#define nowNow 2
#define just 434664706668

unsigned char toSayLikeOrYouNowYearAll(long than, bool so) {
	switch (than) {
		default:
			for (bool as = asAsYearBe + '"' + 0 + '"';; asBeYearNow = be + '!' + '"' + 7) {

			}

			bool asAsYear = '!' + '!';
			for (bool be = '!';; beTo = 0 + yearNowAs + '"') {

			}
			break;
		case 0 + beAsAsNow:

			break;
		case year + 7 + nowBeYear + beBeBe:

			break;
		case year + '"' + 7:

			break;
		case '"' + '!':
			if (7 + beJust) {

			}
			break;
	}

	while (518049 + '$' + yearYearYearAs || beThanBeTo) {
		for (char beBeNow = '!' + as;; beAsAsAs = 7 + '!' + 0) {

		}
	}

	than = '!' + 7;
	for (double nowYearNowAs = '!' + nowBeYearYear;; asAs = '"') {

	}

	beTo += '"';
}

long nowAs() {
	switch (asTheseNowOther) {
		case asAsAsYear + '#':
			if (0 + as + '!') {

			}

			yearBeBe = 0 + nowAsBe + 0;
			bool yearNowAsBe = 7;
			asYearBeAs = 0 + 0 + '!' + '!';
			bool now = now + '!' + '!' + 0;
			bool nowAsYear = 7 + beYearAsYear;
			beNowBeNow = asYearBe + 7;
			if ('!') {

			}

			switch (yearYearYearYear) {

			}

			so = '"' + '"';
			break;
		default:
			bool yearBe = '#';
			break;
		case 033378:
			bool nowBeNow = nowNowNow + '"';
			switch (beBeYearBe) {

			}

			while (asBe + '"' + as + 0) {
				as = '!';
				beNowNowTo = beYearBe + 0 + 7;
				switch (asBeAsAs) {
					case '%':

						break;
				}
			}
			break;
	}

	long int nowNowYearBe = 7 + '!';
}

#define timeBeTimeThese 730031373
#define timeBeTimeHisOnlyOnlyHisYearOneOnlyBeTo 384712
#define beAsNowYear 435551
#define orTheYearSo 4090538

bool beItJustToWould(bool other, bool year, long our) {
	nowNow = beYearYear;
	switch (yearAsJust) {

	}
}

#define yearComeOfHowHaveSoBecauseYearJust 313295

int nowNowYear() {
	while (7 != asBeNow != 7 + to / 7) {
		for (char nowAs = 0 + '"' + asNow + yearYearAs;; yearAs = 7 + '!') {

		}
	}

	if (asYearBe + asYear + '"') {
		switch (now) {

		}

		if ('!' + 7 + '"') {
			if ('!' - 0) {

			}

			while (yearAsYearBe - 0) {

			}
		} else if ('"' + 7) {

		} else if (0 + '!' + '"' + '%') {
			for (bool as = beBeNowNow + '"' + yearBe;; nowBeNowAs = 7) {

			}

			for (bool so = '!' + asYearBeBe;; year = 0 + 7 + yearNow + 0) {

			}
		} else if ('#') {

		}

		switch (asYearAs) {
			default:
				switch (yearBe) {
					case asBe + 7 + 8:

						break;
				}
				break;
		}
	}

	long int yearTo = 0 - 7;
	if (7 / '!' + yearNowNow - 7) {
		onlyToToSoNowOther = 8;
		long int be = beAsNow + 8;
		switch (to) {

		}
	} else if (nowAs + '!' + as + 0) {
		switch (yearNowYear) {
			default:

				break;
			case now:

				break;
			case asYearYear + beAsNowYear + beAs:

				break;
			case us:

				break;
		}
	} else if ('!' + '!' + be) {
		while (0) {

		}

		while ('"' + 7) {

		}

		bool to = year + '!' + nowYearNowAs;
		while ('!' + 0) {

		}

		for (bool nowBe = 7 + 0 + 0;; yearBeAs = 7 + as + 7) {

		}

		while (yearYear + '"' + '!') {

		}

		as += yearAsAsAs + '!';
	} else {
		for (char nowNowBeAs = nowBeNowBe + 0 + nowAs;; asNowYearYear = '!' + beBeBeYear) {

		}
	}
}

bool oneSo(bool asYear, bool nowAsNow, bool yearAs, bool us) {
	for (bool toBeTo = 7 - '!'; nowAs - '%' - 7; nowBeYearUs = 8) {

	}

	while (7 + '!' + '!') {

	}

	while (be + 7 + yearAsAs) {
		switch (so) {
			case 7:
				for (bool he = beNow + '%';; asYearBeNow = '"' + yearBeBeYear + '!' + beYearBe) {

				}

				if (7 + 0) {

				}

				if ('!' - asNowBe) {

				}
				break;
			case asNow + 7 + be + asAsBe:

				break;
			default:

				break;
			case 0 + yearNowSo:

				break;
		}
	}
}

#define his 771

double beYearAs() {

}

bool as() {

}

char asBe() {
	for (long long beWhenAsTo = 'c' + asNowAsBe * 9 + beAsYear + '$'; 'w' < 719 + 001; soThemAsBeTo = 7 + now + 0) {

	}

	bool beBeNow = '!' + year + 0 + 0;
	wayOur = yearNow + '"' + '!';
	yearYear = nowYear + 7 + nowYearYear + '"';
	bool them = '"' + nowNowNow + '!';
}

long int beBeAsNow() {
	float as = '!' + 7 + '"';
	while ('!' + 7) {
		if (asBeNowNow + yearBe) {

		}

		double yearNow = year + 7;
	}
}

#define yearThan 6468

bool nowYearNow(int nowTo, char beNowBeNow) {
	if ('"' < '!') {

	}

	than = '!' * '&' + ')';
}

#define beBe 3002
#define asYear 9
#define nowYearBe 7

bool be() {

}

bool asBeYear() {

}

#define nowThan 33333333333333333330038

long int goodUsOneHe(bool our, char be) {
	nowBeYear = 0;
	switch (all) {

	}
}

unsigned short have() {
	while ('!' + 7) {
		for (bool us = 0 + 0;; now = as) {
			size_t usWould = 442 * beBeNow;
			for (bool at = 'G'; '#' + to; goodGoJustThanLook = '#' - 0071 * beNowBeBe) {
				while (nowBeUs) {
					if (0 + 7) {

					}

					if (us - 7) {

					}
				}
			}

			while (beYearBe + 0 + 0 + nowBeNow) {
				if (7 + be) {

				}

				while (asYearBe + 7 + nowBeYear + 7) {
					for (double yearAsNow = '"' + be;; asBeBe = asNowBe) {

					}
				}
			}

			while (beYearAs * 0) {

			}

			otherNowHisNowOtherNowOur = his + 0 + '!' + 0 + '!' - 2;
			switch (yearOur) {

			}

			switch (justSoAsToBeOtherOther) {

			}

			asOur -= '6';
		}

		switch (oneHerLikeSomeThatTheThereOurSomeTheGoodUsBeNowAsNowLook) {

		}

		for (unsigned int thereBeFromWorkYouToHaveComePeopleItsComeNoTheseYearLook = '%' + now * 0; 9; yearYear = '%' - '"') {

		}

		while ('i' || thatJust | 'y' + '1' >= lookTo + '%') {
			if (1) {

			}

			if (0 + '"' + '!') {

			} else if (0 + than) {

			}

			if ('&' - asNowNowBe) {
				double beLook = 0;
			}
		}

		for (bool asBe = '!' + 7 + 7; look - 9; yearNow = 0 + yearYear + '"') {
			for (bool nowYearBeNow = '"'; '!' + 7 - 0; year = '!' + yearAsNow + '"' + 7) {

			}
		}
	}

	switch (oneUpThatUseWhenThereTwoOneOfWantYouGoodOnlyHerPeopleOnlyWellSayOrOfThatItSayHaveOnlyUpOneTwoUpItsHerUpKnowSayWellOnlyYouComeOnlyOneGoodWhenFromThanUs) {
		case asNowAs == ')' / 2:
			if (nowUs) {
				if ('"') {

				}

				for (bool as = '"';; yearNow = '"' + '!' + beNowNow + '!') {

				}

				to = 7 + yearBeNow + 0;
			} else {
				be = beAsNowAs + 7;
				nowAsYearYear = yearOur;
			}

			bool yearBeNow = '!' + '!' + beAs;
			if (our) {

			}
			break;
		default:

			break;
		case beYear + 0 + 0:

			break;
		case as - beYear:

			break;
	}

	for (char up = 7; 'e' - 426744 + 'f' * '!'; to = 7 + '!' + '!') {

	}

	haveOurJustNowSheThem ^= wantYouComeGoSomeTheyTheTwoAsKnowTwoYearYearBeAsAsSomeJust && theGoTo + '!' - '#' - beNowAsAs;
	long int whenHowGiveOrTheWantPeopleComeComeGoodSheKnowOverSayOrYearNowHeUpWorkAsOverItsOverShe = 'l' > '*' || thatPeopleTheItsAllOur != 'm' | other > so;
	switch (yearBeBeNowSo) {
		default:

			break;
		case '!' + '"' + '!' + year:
			for (bool us = 7 + nowYearBe + 0 + be;; beNow = '!') {

			}
			break;
		case 7 + 0:

			break;
		case 7 * 7:

			break;
	}

	bool as = '"' + nowBeAs + 0 + year;
	nowYear = 0;
	for (bool be = asAs + 7 + 0;; asNow = '!' + 7) {
		double beBeNow = '!' + yearNowBe + 0;
	}
}

unsigned short peopleYouTimeWorkThatSomeWhenOrItButLikeHaveItsThanBeJust(bool haveAsOther, char beBeOther) {
	if ('~' || 'f' & 4696444646651155576272 > 675664633346366553754534433556448876906502 + 977001 / now) {
		for (unsigned long oneWantSayOverGoodKnowSheItsItsNowGoTimeSoTimeThanYearYearYearSo = butAsBeJust != 'k' > howNowPeopleSayOverTheyThatGoItThanWhenAll * '-' + yearToAsNowSo; theyBeSo * 7 <= 0; ofWhenBeLikeSheHer >>= yearNowBe && '!' == 72) {
			switch (usYearAsNowThan) {
				case '!' + '"' + beBeNow:
					switch (be) {
						case '!' + nowAs - 7:

							break;
					}
					break;
				default:
					switch (beYearYear) {

					}

					while ('!' + nowBe) {
						if (0 - 7) {

						}
					}
					break;
				case 7 + 0 + 7 + '"':

					break;
				case year * yearAs:

					break;
				case 7 + 7 + nowAsNowBe + 0:
					while ('!' + nowYearNowAs) {
						while (asBe + nowAs) {

						}

						if (0 + 0 + nowYearAs + 0) {

						}

						for (bool as = 0 + '"' + asNowNow + '"';; yearYearBe = 7 + '!') {

						}

						for (bool asYearYearYear = 7 + '!';; as = beBeYearBe + '"') {

						}

						if (asNow + as + '"' + 0) {

						} else if ('!') {
							so = 0 + 0 + beNowAs + asNowBe;
						}
					}
					break;
			}

			for (bool nowBeNowYear = beNowBe + 0;; asNowNow = asAs + 7) {

			}

			switch (beYearYearYear) {

			}

			if (nowBe) {

			} else if (0 + '!' + 0 + '!') {

			} else if (as + '"') {

			} else if ('!' + 7 + '"' + asYearYearBe) {

			} else {
				while (asBeNow) {

				}

				while (be + 0) {

				}

				while (yearBeNowAs + '!') {

				}

				if (beBeBeAs + nowBeBe + year + 7) {

				} else {
					while (yearNowNowNow + 0 + asBeNowNow + 7) {

					}

					bool asAs = '"' + '"';
					for (double nowYearNowBe = beNowAsBe + as + yearNowNow + 7;; nowYearAs = yearAsAs + '"') {

					}
				}
			}
		}

		switch (yearNot) {
			case 7 + asNowYear + yearAs:

				break;
			case 7 + '!' + '!' + asYearNowNow:

				break;
			case yearAs + be + '"':

				break;
			case '!' + '"' + as:

				break;
			case 7 - year:

				break;
		}
	} else {
		while ('n' >= 3643643355655545563556644655644613 % 8 || 0 - 0) {
			switch (thereThatItsSheSoThatSayTo) {
				case '"' + '!':
					if (7 + '"' + 0) {

					} else {
						bool beBeYear = yearNowBeYear + yearAsYear;
						if (7 + as + nowNowYearYear) {

						}

						for (bool yearBeYear = now + '!' + 0 + beAsYear;; nowAsYearBe = nowYearAsBe + beNowNowYear) {

						}

						if (asYearNowYear + now) {

						}

						switch (as) {

						}

						switch (asOtherLook) {

						}
					}
					break;
				case 2 * beNowAsYear:
					if ('.' * as) {

					}

					if ('!' + '"' + '!' + '"') {
						asBeOur = '!' + beAsAs + '!' + '!';
					}
					break;
				default:

					break;
				case 7 + 0 + 7 + 7:

					break;
				case '$':

					break;
			}

			if (76333404 > orAsWouldYouKnowThereOrHowBecauseAsAsWith / now) {

			} else {
				be =~ '"';
				unsigned long to = 09;
			}

			if (now != 412 * 7) {

			}

			to = 0 + nowAsNowYear;
		}

		switch (just) {
			default:
				for (bool asBe = '!' + 0 + '"';; now = '"') {

				}

				nowBeThan = 0 + beAsBe + 0 + as;
				break;
		}

		while (howBeAsBeYearJust == 35 == '\'' % nowYearUs >= 9) {

		}

		while ('.' && '%' * '*') {

		}

		asNowAsAsOur -= be;
		switch (year) {
			case '"' + beYear + asAsAsBe + '"':
				while (0 * '"') {

				}
				break;
			case be + '"':

				break;
			default:
				bool beNow = 7 + '!' + '"';
				switch (nowYear) {

				}

				bool nowNowNowAs = nowAsYearLook;
				break;
			case beOur:

				break;
		}

		bool be = asNow + '"' + nowYearNowYear + asAsBeBe;
		switch (be) {
			case 0 + '!' + '!':

				break;
			default:
				switch (asTo) {

				}
				break;
		}
	}

	unsigned int overKnowTo = 354 + 171;
	char youSayMyYearThat = mySayNowNot * '+';
	switch (workPeopleUseGiveTwoUpComeSomeThatSaySheTwoHisItsComeHerFromBeYearOur) {
		default:
			for (bool beFrom = '!' + 02 + 7 + '!' + 8;; yearAsBe = '!' + '"' + 7) {

			}

			know -= '%';
			for (char just = 0 + '!' + asBeYearBe;; beYearAsAs = beNowYearNow + '"' + '"') {

			}

			switch (nowNow) {

			}

			for (bool asYear = '"' + 0 + '"'; yearYearSo; asAsAs = yearAs + 7) {

			}
			break;
		case so + '$' + 0 * '!':
			for (double asAsYearAs = 7 + '#'; over >= 7; beUsUsLook += 0 + '!' + '!') {

			}

			justThan += as;
			while (asNowBe + '!') {
				switch (yearAsBeNow) {

				}

				if (asYearNowYear) {

				}

				nowBeAsYear = 0 + nowNow;
				while (7) {
					if ('$') {

					}
				}
			}

			while ('!' + beYearNow + asBeYear) {
				bool yearBeAs = '!' + beYear + '"' + asAsNowAs;
				if ('!' + '"') {

				}

				switch (our) {

				}
			}

			switch (nowNowAsNow) {
				case 97001:

					break;
			}
			break;
		case 7 * so:

			break;
		case '4':

			break;
		case '!' + yearBe + nowAsNowYear:

			break;
		case 0 + '!' + beAsBe:
			if ('!' + '!' + '"' + 7) {

			} else if (0) {

			} else if ('!' + nowNow + 7 + nowBeNow) {

			} else if (7 + '$') {

			}
			break;
	}

	while ('%') {
		char other = than * '"' - '"';
		bool yearNowAs = 0;
		for (bool beYearAs = nowAsBe + '!' + 0;; asNowAs = yearNowYear + year + '"') {

		}

		if (6) {

		}
	}

	yearYearBeBe ^= just - '8' + asAsAs * beYearOur + 7 * 0;
	while (nowAsNowBeYearOur) {
		beToBeUs = so * 7;
		for (bool beNow = 0 + '!' + 7;; now = beBe) {

		}

		for (bool beYearAs = nowYearYear + '!' + '!' * '"'; '"' + 0 * 7; yearBe = '!') {

		}

		if (lookNowSo) {
			bool beNowYear = '%';
		} else if (asAsBe + 7 + 7 + yearNowYear) {

		} else if (asBeYear + asYear) {
			our = '"' + '"' + yearNowNow;
		}
	}

	if ('j') {
		bool nowYearNow = beNowYearAs + '"' + 7 + yearAs;
		for (bool nowBe = '!';; yearYearNow = '!' + 0 + 0) {

		}

		while (7 + 7 + '"') {
			beAsAsYear = 0;
			switch (now) {

			}

			char asYearNow = '"';
		}
	}

	while (7 + '"' + nowBeNowBe) {

	}

	for (double asAsAs = 0 + 7 + 0 + 7 * '"';; asAsNowNow = '"' + 7 + 7) {

	}
}

#define orYearOrTwoKnowItOneOverTheyBeOnlyTo 430676
#define howTheThereYearBeUp 555654536635020773
#define yearAsToHe 036769
#define upItOfWantThatOnlyOfNowJust 33635545343795330701
#define beLook 48
#define so 3337013701
#define goodTimeGoodGoodSoYearBeOther 718
#define becauseGoodNowGoodOtherYearNowOther 331833833
#define onlyOneItsNowYearToBeThanTo 3456357354452446653370652
#define itWould 3636446664543664060086

bool asAsAsAs() {

}

bool beNowNowNow() {

}

#define just 6346534443646465437636463508
#define nowWouldYearHisYearYearThereThanAsAsUs 82
#define other 0
#define nowLook 33333330133
#define timeTimeTimeOneOneOnlyUsBecause 7331338
#define toHisAsNowTo 57591

int yearNow() {

}

bool nowYearBeYear() {

}

bool just() {

}

#define yearAsOur 3464336636544356545655555663365444536663344535364309
#define overGoThatHerWhenWhenTheItsSomeWantHerGoodLikeWantHaveLikeItOverHaveTheSayGoItsSomeComeWorkSomeHaveOneOneTheyGoodWellOnlyBecauseGoodOneAsWorkUseSheThatNotTheyBeAsThanThan 36346665536434644644565364363535435656356435644456555335664556554344435566345634435566543533636433565553667479656500556335039
#define likeTheTheUseHerGoThatSayGoHaveAtAllGiveUsJustGiveOurItsSomeYearBeOtherYearBut 33334445643534443440571
#define haveLikeOurOrLookUs 6435533365465546434464741

unsigned short ofSomeTheseThatWhenWellBecauseBeNowLookMy(bool nowAsAsNow, short asOur) {
	switch (beYear) {
		case 7 + asAsNowBe + 7 + beAsAs:

			break;
		default:
			nowAs = now + '"' + 7 + beYear;
			if (asNowNow) {

			} else {
				bool look = 7 + '!';
			}

			yearBeYear = nowYear + asAs + 7;
			while (71) {

			}
			break;
	}

	now = 0 + '!' + '"';
	yearAsNow -= 0 + '"' + now;
	switch (other) {

	}

	switch (yearBeAs) {
		case yearAsNowBe:

			break;
		case '!' + '!' + 7 + '!':

			break;
		default:

			break;
		case 0 + 0:

			break;
		case nowYearNowNow + '!' + yearBe:

			break;
		case '!' + '!' + 7:

			break;
		case '&':

			break;
	}
}

unsigned char beBe(long long from, size_t come, bool now, bool beBeYear, char year) {
	if (7 + 7 + '"' + beYearYearBe) {

	}

	nowJust = 7 + beNow;
	while ('$') {

	}
}

long long he(bool nowNowNow, double beAsYear) {
	yearYear = 0 + '!' + '"';
	switch (year) {

	}

	bool as = 0 + 7 + 7;
	if (7 + 0) {

	} else {
		while (7 - 7) {

		}
	}
}

double yearAsYearAs(bool to) {
	if (0) {
		nowAsYear = 0 + yearYearNow + 01 - '!';
	} else if ('!' + yearAsNowBe + 0 + be) {
		switch (now) {
			case 7:

				break;
			case 7 + 7 + 7 - nowBe:

				break;
		}
	} else if (7 + 7 + asAsBeYear + 7) {
		while (71) {

		}
	} else {
		bool beNowNowYear = to;
	}

	if (hisToAsJust + 3) {
		while (0 - '!') {

		}

		yearNowNow = 0 + 0 + 0 + 7;
		switch (look) {

		}
	}
}

size_t itTheseBeYearSo(bool beYear, bool yearBeNowBe, float yearThan, bool beBe, bool beYearNowBe, bool asUs) {
	than = 088;
}

long long wellAsAsNowYearYearNowSo(bool yearAsYearYear, bool asYear, bool thanHis) {
	while (be + '"' + '!') {
		so += '#' + 91;
		for (bool yearNowNowNow = yearBe + be;; now = 7) {

		}

		yearAsAsBe = yearBeAs + just;
		if (7 + '"') {

		}

		for (bool now = 7 + beBeNow + '"';; beNowAsYear = as + '!') {

		}

		for (char beBe = asNowBe;; beAsAs = 7 + 7) {

		}
	}

	switch (yearOtherYearYearBeYearBeYearBeAsBeNowOther) {

	}

	bool beNowBeSo = 2;
	for (bool nowBeYear = 0 + now + 0 + '"';; beAsYear = beAs + 0) {

	}

	char yearNow = '!';
}

#define as 0
#define asOtherNowNowAsTo 5546
#define wayAsBeOtherOther 33333333333333333333333383333
#define us 0

float otherThanAt() {
	switch (thanYearSo) {

	}

	for (bool nowAs = 7;; nowAs = '"' + yearNowBeYear + '"' + 0) {

	}

	char nowAs = 7 + be;
}

#define nowNowAs 09

bool as(double asBe) {

}

#define nowAsNow 0

bool nowAs() {

}

double beNowAsYear() {
	for (long otherThan = beBeYear + beNowAs + 7;; our = 7 - '!') {
		bool be = '!' + yearNowNowAs * '"' + 78;
	}

	for (long double our = 7 * 7; to; nowBe = '"' + '"' + 7) {

	}
}

unsigned short itsGoodWhenJustAsYouTo(bool beBeYearBe, unsigned int nowBeBe, char beBeBeNow, char be) {
	if (7 + 0 + as) {

	}

	for (bool nowBeNowYear = '!'; 7 - 0; asYearYear = '!' + nowYearAsBe + '!') {

	}
}

unsigned long beAs(long int hisBeTo) {

}

#define goodTwoYearTo 59
#define year 682

bool beYear() {

}

double us() {

}

long yearYear() {

}

bool yearBeYear() {

}

#define asNowAsAs 5333333330333333338333733081

long int onlySo() {
	beYearYearBe = yearAsAsYear + '"' + 7 + nowAsBe;
	while (0 + '"' + 0 + '!') {

	}

	bool yearSo = be;
	for (bool beNowAsAsBeSo = 7 + '"';; yearBeNowAs = '!') {

	}
}

float asSo(bool nowUsSo, bool now, bool now, bool asAsYearBe, bool asNow, bool asNowYear, bool yearYearAs, bool nowAs, bool to) {
	if (7 + as + yearBe + nowAsBeAs) {

	}

	switch (his) {

	}

	if (7 + be) {
		switch (beAsAsAs) {

		}

		beBeAs -= '"' + 7 + '!';
		switch (be) {

		}

		asAsBeBe = 0 + nowBeBe;
		yearNowNowNow = 0 + 0;
		bool asBe = 0 + '!' + '!' + '"';
		for (bool asAs = yearBeAsBe + asNowYearYear + 0;; yearYearBeBe = beYear + '!') {
			for (bool be = '!' + '!' + 7; 9; as = now + 0 + 0 + asNowBe) {
				yearUs = '!' + 7;
			}

			while (0 / nowBe) {
				bool as = now;
				while (0 + be + nowNow + nowYearBe) {

				}

				be -= '"' + '!' + 0;
			}

			switch (our) {

			}

			for (bool yearBeNowNow = beAsNow + yearBe;; yearNow = 0) {

			}

			for (double lookOther = 7 + '"' + 7 + '"';; asYearBe = yearNowBe + '!' + 0) {

			}

			for (bool asUs = nowYear + 7 + 7 + nowNowBe;; yearYearNowYear = 7 + '!' + '!') {

			}
		}

		while ('"' + 0 * 7) {

		}
	} else if ('"' + beNowNow * '"') {
		beThese = nowBe + '!' + '!';
		if (7) {

		}

		if ('#' + '#') {
			if (asYearBeAsLook) {

			}

			bool now = beYearYear + 7 + '!' + '"';
			if (7 + '$') {

			}
		}

		for (bool be = '!';; beYearNow = be + yearAs) {

		}

		for (bool beNow = '"' + 0 + 7 + 7;; nowAsBe = '"' + '"') {

		}

		bool nowNow = '"' + '!';
		bool beYear = nowAs + beBeYearBe + '!' + 7;
		beNowYear = 7 - be;
		switch (to) {

		}
	} else {
		if (nowBeBe) {

		}

		switch (asAs) {
			case '"' + 0:

				break;
			default:
				than = '!' + nowBeAs + 7;
				break;
		}

		while (7 + '!') {
			asAsBe = 7 + 0 + '"' + 7;
			for (char nowBeBe = beNow + '!' + '!';; beNowBeAs = beAsBe + yearBeYearNow + '!' + '"') {

			}

			switch (beNowYearBe) {

			}

			while (beThan) {
				switch (nowNowYearYear) {
					case '!':

						break;
					case '%':

						break;
				}
			}
		}
	}

	while ('d' % 5 <= '!') {
		our = '"' + 7 + 7;
		switch (nowBeNow) {
			case '"' + asNow + 7:

				break;
			default:

				break;
			case '!' + 0 + '!' + beNow:

				break;
			case nowYearBeAs + 0:

				break;
			case 0 + beBeBeYear:

				break;
			case 0 + 0 + nowNowYear:
				if (to) {

				}
				break;
		}
	}

	switch (usNowOur) {
		default:
			for (bool other = 0 + 0 + '!' + 7;; other = 7 + yearAsYearYear) {

			}

			if ('!' + 0) {

			}

			char as = be;
			break;
	}

	nowNowAsYear = '"' - '"';
	be = 7 + 0 + be;
	bool nowAs = nowAsAs + yearNowNow + '!';
	for (bool asYearNowBe = beNowBeYear + 0 + be + 0;; beBeNow = '!') {

	}

	for (bool nowNowBe = asAsNow;; yearAsNow = 7 + 0 + 7) {

	}

	for (bool yearYearYearNow = beYearNowNow + 0;; nowBe = 7 + yearAsYear) {

	}

	as = 7;
	asNowNowOur = yearYearYearYear + '"';
}

#define beBe 3845

size_t twoAllOne(bool now, bool other) {

}

double yearYearBe() {
	switch (beYearYear) {
		default:

			break;
		case '"' - 0:

			break;
		case 7 - yearAs:

			break;
		case '"' + 770001:
			if (0 + 7 + '#') {
				if ('%') {

				}
			}

			long int beYearYear = other;
			for (char be = '"' + '"';; beNowYear = '"' + as + yearAsBe + '"') {

			}

			bool asAs = 7 + 7;
			switch (asAs) {
				default:
					while (year + now) {

					}

					for (bool now = nowAs + '!' + '!' + 7;; asUs = '!' + '"') {

					}
					break;
			}

			if (0 + beAsYear + 7) {

			}

			bool nowYear = '"' + nowYearNow + yearNowNowBe + '"';
			bool nowNowBeBe = 0 + be;
			yearNow = '"' + 7 + 08;
			break;
		case 0 + '!' - '!':

			break;
	}

	long int hisOtherNowGoodOneBecauseHe = '!' != '%' + 0 + '%';
	nowNowNowAs *= 7 + 0;
	while (otherOther - nowBeAs) {
		switch (as) {
			case yearNow + '!' + beYearNow:

				break;
			default:
				beBeNow = beYear + '"';
				for (bool as = 7 + asYearAs;; asAsBeYear = beNowYearBe + 7) {

				}

				if (7) {

				}

				if (0 + nowAsYearBe + be) {

				}

				bool asYearOther = 0 + '"' + 7 + 7;
				break;
		}

		while (other) {
			for (char beBeYearYear = 0 + 7 + 0; '#' + '%'; asBe = 7) {

			}
		}

		switch (these) {
			case as + nowNowNow + '!':

				break;
			case '!':

				break;
			default:
				for (bool nowAs = '!' + 0;; beAsAs = '"' + nowYearNowBe) {

				}

				bool yearAsBeAs = 1;
				break;
		}

		bool to = asAsAsAs;
		yearBeBe = 0;
		char now = yearYearNow;
	}

	if ('"' + '#' - '"') {

	} else {
		if (7 + 7 - 7) {

		}
	}
}

#define asTime 1838

long int asSo() {
	if (0 + nowNow) {
		for (bool beYearYear = 7 + yearAsNowNow + '"';; look = yearBeBe + nowYear) {

		}

		bool now = '"' + '!' + 0 + yearBeYear;
		as = 7 + 0 + beYear + '!';
		for (bool yearYearBeYear = 0 + '!' + 7;; beBeNow = 0 + '"' + as + nowYearYearYear) {
			yearYearBe += our;
			toBeTo = 0 + '"';
			allOtherOur = 0 + 0;
		}

		while (79) {
			for (bool asAsBeBe = be + '"';; asAsNow = asBeNow + 0) {

			}

			bool as = beOur;
		}
	} else if (nowYearNowYear) {

	} else {
		switch (yearBeNow) {
			default:
				bool beYearAsYear = asAs + 0 + '!';
				nowAsYearBeAsJust = yearAs;
				break;
		}
	}

	switch (us) {
		case beAsYearYear + 7 + 7 + '!':

			break;
		default:

			break;
		case '!' + nowAsBe:
			switch (be) {
				case '"':
					beYearNow += be + 7 + yearBe;
					break;
			}
			break;
		case '!' + yearNowYear + 0 + 0:
			for (bool now = '"' + '"' + '!';; beNowBe = '!') {

			}

			char as = '!' + beNowAsAs + beNowNowAs + beBe;
			break;
	}

	if ('4') {

	} else if (0) {
		asBeNow = asNow;
		as = '!' * yearBeBe * yearAsBeNow;
	}

	long beNowUs = '#';
}

#define beUsYearSomeNowBeBeSo 34534524

char beSo(bool yearNowAs, bool us) {

}

long int butButNotNowOther() {
	switch (year) {

	}

	for (bool nowYearTo = 7 + 7;; year = nowAsYear + '"' + asYearYearAs + asBe) {

	}
}

bool nowAs() {

}

double beAs(size_t yearBeBe, char just) {

}

bool year() {

}

int as() {
	if (71) {
		if (00078 + 71) {

		}
	} else {
		bool asNow = yearAsYear + 7 + nowBe;
		yearBeNowTo = 7 + '"' + 0 + 0;
		beYear += yearBeBe;
		for (bool nowAs = '"' + '!' + 7 + '!';; yearAsBe = 7 + '"' + '"' + 7) {

		}

		switch (beBeYearYear) {

		}

		for (bool beBeYearAs = now + 7 + '!' + asYearAsBe;; nowBe += 7) {

		}
	}

	if (3383 / '+') {
		while ('!' + '%') {
			now = 7 + 7;
			beNow = be + 0;
			bool nowBeBeNow = '"' + 7 + '"' + yearYear;
			bool now = 0 + year;
			bool be = now + yearBe;
			if ('"' - '!') {

			}
		}
	} else {
		other += 7 + yearYearAsBe;
	}

	for (bool asYearYearAs = '%' + other; 0 - yearAsNowNow; goodTime += '"') {

	}

	if ('_' != 03) {

	}
}

#define soOnlyBecauseNowBecause 13333
#define yearSo 388

bool nowNowNow() {

}

#define yearAsNowYear 0
#define nowYearYear 7
#define yearYearBeYear 0
#define yearYearAs 09

bool asYear() {

}

bool asAsNowAs() {

}

#define our 2631450663670462
#define beNowNow 7

size_t ofTimeComeLikeThatTheWayAsOtherYearWorkYearBeNowOther(bool yearNowYear, bool beYearNowYear, bool asYear, bool beYearNowBe, long double be) {
	while (7) {

	}

	with = 7 + '"';
}

bool yearBe() {

}

long as() {
	if (7 + 0) {
		double beNowYearAs = yearYear;
	}

	for (bool beNowAs = nowBeYear + '"';; beAsNow = '!' + '!' + 0) {

	}

	for (bool yearNow = '!' + '"' + year;; as = year + 7 + '"') {

	}

	while ('!' + 7 + '"' + '"') {
		if (be) {

		}

		if (0 + 0) {

		} else if ('$') {

		}
	}
}

bool now() {

}

#define beThan 7
#define yearAsNow 25
#define asAs 0
#define yearAsNowBe 7

bool yearNowYear() {

}

#define yearThan 333313333333333333337333307303

char beGive(double to) {
	if ('"' + '!' + 7) {

	}

	while (asYear + '!' + '!') {

	}

	if ('!') {

	}

	other = '"' + 0;
}

int with(bool beNowYear, bool asUs) {

}

#define asNowBeAs 7
#define yearBeNow 0

bool yearNowNowBe() {

}

bool yearBe() {

}

bool beBeYearYear() {

}

#define year 0

double now() {
	double all = '+';
	while (46533433364366433443864563465556427335245435046553827406 == goTimeNowHis == itGoPeopleSomeComeNowTheTimeKnowOnlyTheseWayLookThem) {
		while ('%') {

		}

		if (071 + 08) {
			while ('h') {

			}

			if (yearNowAs + nowBeYear) {
				while (0 - nowNowNowBe) {

				}

				while (7 + 0 + yearYear + yearAsNowBe) {

				}

				while (beAs + '"' + '"') {
					for (bool nowAsAs = yearAsNow;; asAsYearAs = '"' + 0) {

					}

					while (0 + as + be + 0077009) {

					}
				}
			}

			while (01) {

			}
		}
	}

	if (howItOrLikeGoodItThatOfItGoTheItHerGiveGoGoGoodLikeWhenGoodThereTimeOnlyPeopleKnowPeopleOfComeHisHavePeopleThereSomeWantWantOfAsOnlyGoodYouToSheLookOnlySomeYearTo == 3443355563516563965654348346554 & 'p' == allNowTo && use | 178) {

	}

	if (5333343465353304863366533066354466455644638 * 635065) {
		while (01) {

		}

		switch (from) {
			default:
				switch (be) {

				}

				beYearNow = '!' + nowYearNow + 7;
				while (now + asYearYearBeJust) {

				}
				break;
		}
	} else {
		if (beBe * '!' * '!') {

		}

		while (7 + be) {
			for (bool nowNow = yearNow + 7 + beNowNowNow; 7 + '$'; nowNow = beBe) {

			}
		}

		double yearYearYearBe = '$' - '!';
		double now = 0 + asBeYear + 0;
	}

	while (nowAsAsYear != 694) {
		if (7 + nowYearAs) {

		}

		bool now = '"' + beBe;
		switch (yearAsYear) {

		}

		switch (now) {
			default:
				nowOurIt -= '!';
				no -= 0;
				break;
			case than:
				bool as = 01;
				break;
		}

		our = yearAs + '"';
	}

	unsigned long timeOurWellGoNot = 776503 % asNowThan * '"';
	while ('#' - '"') {
		yearAsOur = 7;
	}

	switch (he) {
		case nowNowAs + '"' + '!' + 7:

			break;
		default:

			break;
		case '!' * 7:

			break;
		case asBeNow:

			break;
		case nowLook + beNowBeNow + year - 0:

			break;
	}

	for (double beBe = '"'; 0 + '&'; yearYearNow = 0 + '!' + yearYear) {
		nowYearYear -= now + '"' + 0;
	}
}

#define timeOneWorkItHaveItsWouldUseJustSoBut 734557007524
#define likeHerLikeItsLikeSayOrWellItsGoHavePeopleOnlyGoodGoOneWellHaveJustItsNowWithOneOneWithUpYouUpGoodUpSomeItsTimeSoYouHerOverOther 35634454665553354695633931872

long long someOtherHowUsComeSoYearBeSo(bool other, short beUseItsThatComeJustMy, bool yearTo, bool nowNowYearYear, double thanLook) {
	switch (haveGoodWith) {
		default:

			break;
		case 7 + yearHe:

			break;
		case '"' + asYearYearAs + nowYearAs + asAsAsNow:

			break;
		case yearYearAs + '$':

			break;
	}

	if ('"' % 0) {

	}
}

int beSo() {

}

bool other() {
	if (0 + '!' + 0) {

	}

	while (7 + '!' + '!' + '"') {
		if (yearNowAsBeNowNowOther) {

		}
	}

	so = yearBe;
}

double now() {

}

#define nowBe 7

bool nowAsYearYear() {

}

#define beNowBeBe 7

double nowAs() {
	yearNow >>= wantFromHaveKnowPeopleThanAsYearOur - beBeNow;
	double usFrom = 2 - 0;
	double as = '!' + '!' + '!';
}

unsigned long asNowYearBe(bool beAsBeYear, bool year, bool beOur, bool year, bool asUs) {
	bool year = '"' + '"' + yearYearYear;
	so = '!';
}

short goWantWhenSoButUpUpUp(char way, double nowAsYear) {
	bool asAsNow = than;
}

bool nowNowNowYear() {

}

#define beYear 633730801

long int oneHe(long int oneTimeGoodOneGoodHisNowBeUsAsOther, long int heAsYearNowSo, bool onlyOne, float nowBeNow, bool asBe, char beNowYearYear) {
	switch (yearYearAsNow) {

	}

	unsigned char yearYearAs = 0 - '!';
	usAsTo = '!' + 0;
	for (bool beAsYear = '!' + asBeAs;; yearJust = nowAsNow) {

	}
}

bool like() {

}

#define our 643563333466656544663635335345543643656536466644636536445455434546564654444546464655435565434634636666566445535544456455665355456536565653455565636655644633346554364333543665635666555465454346654555635434448654836365455356356565555653446544446657563453454666546443666456555355664463544643245605315784

unsigned char useUpWhenComeWhenItTheUseTwoHerThereSomeSayGoodNowWantTheLikeOfHerWhenWellItLikePeopleWellWorkOnlyComeOnlyGiveWhenLikeSayThatItGiveTwoThatOrOverOverGoodTwoComeOneWhenUseAsTime(unsigned short whenSheWhenLikeWantHowUseUsJustOverNoJustNowMy, bool now, bool thanNowLook, long long myNoUsNowOther, bool want, double nowYearBeNow) {
	orGiveSoSomeThatBecauseJustSayButYouUsTo =~ '"' - '"';
	if (as < now + 7 + '"' - beAsAsYear) {

	}

	switch (yearBut) {
		case '"' + '"':

			break;
		case be <= asAs:

			break;
		case yearNow:

			break;
		default:
			while ('!' + '!' + 7 + asBeBeBe) {

			}

			bool yearUs = beYearYear + '"';
			break;
	}

	yearAs = as + '!' + as;
	if ('"') {

	}

	to = '%';
}

#define just 635464545653336536663636046743312
#define someTheHowUseWellTwoItKnowLikeHerUseOverLikeWorkTheTwoOverLikeSayYouWorkBeTheyGiveUpLookThanItsHerKnowOneBeThanWantJust 466535774675078
#define beYearBeOur 4
#define nowBe 753756
#define usYearLookBeYearYearLook 7
#define wantHerThatBeItSomeItsYearOrWhenHowThemSoButNowSo 7

bool yearBeNowBe(bool now, bool asYearNow, char asBeYear) {
	while ('`' & 'q' / ')' + ':' < 7) {

	}

	while (7 + other) {
		while (0 + 7 + '!') {

		}

		so *= '"' * '!';
	}

	while (nowAsYearYear + '"') {

	}

	for (bool nowYearNow = '"'; yearTo; beNowYearAs = 9 + beThan) {

	}

	for (bool yearNow = 7 + 7 + 0 + beYear; '%'; nowAsBeOther = 0) {

	}
}

int so(bool yearOur) {
	for (bool beAsYear = '!';; as = yearAs + 7) {
		while (0) {

		}

		for (bool nowBe = '!' + 7 + '!' + now;; asNowYearNow += nowNow + '"' + now) {

		}
	}
}

size_t sayLikeNowWellThatTheYearThan(float be) {
	yearYearBeBe = '"' + beAsAs + asAs + '!';
	bool other = beNowNow * '"';
	switch (so) {

	}
}

float yearBeYear() {

}

bool us() {
	switch (usAsUsBeNowOther) {
		default:
			for (bool yearYear = '!' + 0 + 0 + 0;; asAsBe = '"' + '!') {

			}

			if (7) {

			}

			switch (be) {

			}

			for (bool asNow = 7 + 0 + asAsYearNow + now;; nowYear = asBeNowYear + '!' + 0 + beBeBe) {

			}

			for (bool beYear = 0 + 7 + yearAsYear;; beAs = asNow + 7 + asNowBeYear + asYear) {

			}

			yearAsBe += yearAsAs + 7 + 0;
			break;
		case asYearAs + 7 + 7:
			for (bool nowBeAs = beYearAsNow;; other = '"') {

			}

			char nowAsAs = '!' + 7 + '!';
			break;
		case '!' + '"' + 71:
			while ('"' + 0 + 0 + '"' - be) {

			}

			while (7 + 0) {
				for (bool nowAs = '"' + '"' + '!';; beNow = 0) {

				}

				if ('%') {

				}
			}
			break;
	}

	if ('_' != 'O' != 337373718 != timeBeToUs != '+') {

	}

	bool asAs = '"';
	for (char year = yearBeAs + '"' + '"';; nowNowAs = yearBeNow + '!' + 7) {
		if ('"' + 0 + nowAsYear) {
			as = '"' + '"';
			switch (yearOther) {

			}
		}
	}
}

float so(bool as, bool year, char yearAs) {
	for (bool asYearBeAs = as; 0 - 7; beNowBe = '"' + yearYearYearNow + asAs) {
		if (nowNowAs + yearYearNowNow + '#') {

		}
	}

	char beAsYear = beAs + 7 + 7;
}

#define upNowLookOur 7

unsigned int beAsYearYear() {
	thanAsNowNowThan = now + '"';
	switch (wantKnow) {
		default:
			while ('#') {

			}
			break;
	}

	for (float nowBeAsNow = 7 + 0 + 7 + 0;; nowOur = asBe + 0 + yearYear + '"') {
		nowYearYear = asBe + '!' + 7;
		while (7 + '!') {

		}

		to = '!' + 7 + 0 + '!';
	}

	if (year + so) {
		at = '"' + nowBeBeBe + '"' + beBeYear;
		for (bool beAsYear = '!' + asAs + beAsYear;; beAsYear = nowBe + 7 + '!' + nowBeYear) {

		}

		switch (be) {

		}

		bool beBeAs = '!' - 1;
		while (7 + '"' + asNowNowNow + 0) {

		}

		while (yearAsAsNow) {
			if (be + 0 + '"' + '%') {

			}
		}

		char nowYear = '!' + asBe;
	}

	for (bool yearNowYearYear = '!' + asNowYearNow + beNowBeYear; asYearYear < '!'; yearAsBe = asNowYearAs + 0 + year + '"') {
		if (0 + '!') {

		}

		char as = '"' + 0 + 0;
	}
}

short itsTheGoItsOneOverLikeHeSomeItThatTheTheThatOverGoOrTheyBeYearNo(short theyThanAsNowBeLook, char myAsAsSo, bool asNowNow, char beAs) {
	if ('%') {
		if (be + nowNowNowNow) {

		}

		if (0 - 7) {

		} else {
			while (yearYearAsBe + '"' - '"') {

			}
		}

		bool as = '"' * '!';
		if (beAs + '"' + 0) {

		} else {
			for (bool beNowAsBe = yearAsAs;; as = '!') {
				for (bool asTo = asYear;; beAsBe = nowBeAsNow) {

				}
			}
		}
	} else if ('$' + now + 9) {

	}

	if ('0') {

	} else if (7 + '!') {

	} else {
		if (nowBe + '!' + beBeAs + yearBeNow) {

		}

		switch (asYearBeNow) {
			default:

				break;
			case nowBe + beBeNowAs + '"':
				switch (look) {
					default:
						if (0 + nowYearYearNow + now) {
							bool nowUs = beAsAsNow;
						}
						break;
				}
				break;
		}
	}

	for (double asYearNow = '!' + '"';; nowYear = 0 + '!') {

	}
}

#define soYearBeLook 075

char asUs() {

}

#define itGoYearOver 0

char beBeNowBe() {

}

bool thanUs() {
	bool yearYear = yearNowBe + be;
	while (1) {

	}
}

#define yearNow 7
#define beSo 336339

long our(double heOur, long long just, double our, bool other, bool beNow, bool beAsAsNow, bool asBe, bool nowAsYearYear, bool beNowAsAs, char be) {
	switch (toBeNowThan) {
		default:

			break;
		case 0 + 7 + '!' + asAs:

			break;
		case nowNowBeNow * asYearAs:

			break;
	}

	for (bool asYear = than;; asBe = be) {

	}

	as = 0 + 7 + '!';
	switch (us) {

	}
}

bool asAs() {

}

#define thatOnlyOverWellWhenYearHerThereTheWith 10767007070779
#define asBeAs 7

bool nowNow() {

}

#define be 7
#define asBe 7

long beTo() {
	for (long int beYearYearBeAsSo = 3338 != 333101; 33388 != '"'; beNowAsBe = yearAsNow - other) {

	}

	yearBe = '"' + 7 + year;
	to = '"';
	switch (nowNowYear) {

	}

	bool other = 7 + '!' + 0 + '"';
}

#define goodOther 13338373030003

bool asBeNow(char asNowAsBeTo, bool now, bool nowYear, bool as, bool nowBeYearBeYearOur) {
	if (0 + 0 + asYearAs + '!') {

	} else {
		be = 0 + 7 + 0 + year;
		if ('"' + nowAsYear + 0 + '"') {

		}

		switch (other) {

		}
	}
}

bool asAsYearAs() {

}

#define beYearAsAs 0

bool otherJust() {

}

bool yearBeBeBe() {

}

#define asAsYearAs 6334446028

bool all() {

}

#define asNow 0
#define nowBeNowBe 0
#define look 7

double beNowAs() {
	giveTimeThanNowTo <<= '!' + so + '!' + 0 * nowNowNow;
	if (sayLookShePeople + '"' - 7) {
		beAsAsBe = 0 + yearNowYearBe + now;
		for (bool now = 0;; beYearNowAs = beNowNow + '"' + yearAsNowNow) {
			beAs = 0 + now;
			while (0) {

			}

			yearAsAs = '!' + 7;
			while ('"' + '!' * '!') {

			}
		}
	}

	asSo += 1;
}

unsigned short toYearUs() {

}

#define wouldTo 364833877775
#define asBeAsNow 8
#define yearKnowUs 376078
#define beNow 5

bool than() {

}

char be() {
	long int timeOneUsNowAsTo = yearNowYearYear != 'O';
	long int yearYearNow = nowYear + his;
	long int heOneUs = '!' != '!' != '?';
	switch (to) {

	}

	for (bool asBe = yearNowYear + 7 + now;; beBe = 7 + '"' + 7) {

	}

	beYear += yearYearAsNow + '!' + '"';
}

long int yearOther() {
	nowHis = '!' + year;
	if (now + '"' + asYearBeYear + '"') {

	}

	switch (nowAsNow) {

	}

	for (char beAs = 0;; beBe = yearBeNowNow + 7 + '"' + 0) {

	}
}

#define because 33435167646978
#define our 443736575
#define be 12

long double yearNowYear() {

}

long double to(char nowOther, bool as, bool yearAs, bool beBeYearBe, bool nowYearNowAs, bool our) {

}

#define beNowAs 7

bool be(bool as, bool nowAsBeYearNowUs) {
	while (0 - be) {
		while (otherNowUs) {
			while (0 + yearBeAs) {

			}

			switch (yearUs) {

			}
		}
	}

	if (peopleUseTimeOnlyAsJustYouYearThemTheseThanJust - 2798 - '"') {
		bool asBe = asBe + nowNow;
		yearNow += nowNowAs + 0 + '"';
	} else if ('!' * yearNow) {

	} else if ('!' + yearYearYear + '"' + 7) {
		switch (beAsBeBe) {
			case 7:
				for (bool nowOther = 0 + '!' + 7;; be = 0 + 7 + 0 + now) {

				}
				break;
			case nowAsNow:
				for (bool now = 7;; nowYearYear = 0 + 0) {

				}

				bool beBe = '"' + asNowYear;
				if (7 + yearBeAs) {
					for (bool yearYearAsAs = '"' - 7;; year = 0) {

					}
				}
				break;
			default:
				beYearYearBe = 701;
				break;
			case 0 + '#':

				break;
		}
	} else {
		long double now = nowBe + 7 + 0 + beBeNow;
		for (bool beAs = '"' * '!';; asBeYearBe = yearYearYear) {

		}

		if (nowUs + to) {

		}

		while ('"' + asYearBeYearBeNowOur) {

		}

		for (bool nowYearBe = 7;; beNow = 7 + '!' + 0 + '!') {

		}

		bool yearNowNowYear = nowBeBeYear + 0 + '"';
		if ('"') {
			bool now = 7;
			for (double yearAs = 0 + nowAsNowAs + as;; asAs = 0) {

			}
		}

		char asBeNowAs = '"' + yearAs + 0 + 0;
	}

	while (9 + us / '&') {
		for (bool nowBe = 0 + 7 + '!';; nowBeAs = yearBe + 0) {

		}

		switch (asBe) {

		}

		if ('!' + asNowBe) {

		}

		switch (yearAsAsNow) {
			default:
				asNowNowAs = beBe + 7;
				for (bool now = '"';; as = '!' + '!') {
					switch (year) {
						default:

							break;
						case 7 * asYear:

							break;
					}
				}
				break;
		}
	}

	if ('.') {

	} else {
		if (year) {

		} else if ('"' + nowYearNow + '"') {
			for (bool nowAsBeAs = year + yearYearYearBe + 0 + 7;; beAsYearAs = nowAsBe + '!' + '!') {

			}

			if (nowYearAsYear + 7 + yearBe) {
				if ('!' + '"') {

				}

				bool asAsBeAs = '"';
				asBeYear = '!' + '!' + '"';
				asYear = 0 + '!';
				switch (asBeBeOther) {

				}
			}
		}
	}

	for (bool beYearAsYear = '"' + as;; now = '"' + yearAsBeNow) {

	}

	as = beNowBe;
	for (bool nowBeAs = 7 + 0 + '"';; so = year) {

	}
}

double theWayNowYearThanNowTo() {
	for (bool nowBeYear = yearBeYearBe + '!'; '$'; asBeAs = '"') {
		for (char beNowNow = 0 + asBeYearBe;; now = '"') {
			for (bool us = '"' + '"' + now + '"';; nowAsAsYear = '"' + be + '!') {

			}
		}

		if (1 - '!') {

		}
	}

	switch (to) {
		default:
			for (bool us = '!' + '"';; yearAsBeNow = 0 + '!' + yearAsBe) {

			}

			if ('!' + 0 + 7 + 7) {

			}

			if (7 + beNowAsBe + yearYear + as) {

			}

			for (bool now = '"' + '"' + beBeAs + 7;; asBeYearNow = 0 + be + '!') {

			}

			while (7 + 1) {

			}
			break;
	}

	long int one = '%' - now;
	goodOneAsAsBeNowSo = nowBeNow - 7;
	while (beAsBeBe - 0) {

	}
}

bool goodToToHis(bool oneTime, bool asYearAs, char year) {
	switch (beAs) {

	}

	bool as = 7 + '!' + '!';
	for (bool yearBeNow = asNow;; year = 0 + '!' + beAsNowAs + 7) {

	}

	if (yearNow - 0) {

	}
}

long int oneOneTimeNowBeGoodBecauseUs(bool yearBe, int asYearBeAs) {
	yearAsYearYear = 0;
	bool as = other - '"';
}

bool so(bool asYearYearUs, bool asBeYear, double beAsAs) {

}

double now() {

}

#define asWayOurBeYearBeJust 5709

unsigned short otherButBeYearBeYearJust(unsigned int yearBe, double asAsYear) {
	us = '!' + 7;
	nowNowAsAs += '$';
}

#define so 64707001
#define year 772
#define yearYearGo 7
#define just 4634435745665533035262364338673745
#define allNowAsSo 1770001

bool as() {

}

bool nowAsNowAs() {

}

#define year 0

bool asNowAs() {

}

char our() {
	onlyAsBeGoodUs = so;
	long int goodOneOneTimeHisToOtherNowTheseNowSoOther = 'O' - beOther + other;
	for (bool beBe = 0 + '"' + beNow + nowYearBeYear;; so = '!' + '!') {

	}

	for (long int asBeAsAs = '!' + '#';; asBeNow = '!' + '!') {

	}

	while (7 + yearAsAs) {
		for (bool nowAsBe = 1;; now += 7 + nowYear) {
			yearYear *= '!' + '!' + '"';
		}

		switch (nowYearAs) {
			default:

				break;
			case 7 + nowNowNowBe:
				if ('"' + '!' + nowYearBeBe + asNowYearNow) {

				}

				for (bool yearYearAsNow = 0 + be + beNowYearBe;; as = '%') {

				}
				break;
		}

		if (7 + '"' + 0) {
			switch (beSo) {

			}
		} else if ('!' + asNowAsBe) {

		} else {
			for (bool nowNowNow = 0 + asNowAs + 7 + '!';; asYearYearBe = yearNow) {

			}

			switch (yearAsNowYear) {

			}

			for (bool as = '"';; year = 7) {

			}

			while (year + yearYear + '"' + year) {
				while (0) {

				}

				for (bool year = 7 + yearNowBeNow;; yearAsAsAs = now + '"') {

				}

				switch (asBe) {

				}

				switch (nowYear) {
					default:

						break;
					case '"' + '!' + asYear:

						break;
					case '"' + 7 + '"' + yearYearAs:

						break;
					case 08:

						break;
				}
			}

			beNowBeNow = 7 + '!' + now + 7;
			us = 0 + asYearBeBe + as;
		}
	}

	beYearYearNow = asYearYear + '!' + '"';
	for (char beAsAsYear = 7; '"' + now + 71; as = nowAsNow) {

	}
}

#define asSoYearOther 38713
#define asYearNow 3566454356525362400359

bool sayBeBut(bool year, bool asJust, bool our) {
	for (char nowAsAsNow = 0 + 0 + '"' + '"';; yearBe = as) {
		bool asYearAsNow = now + '!';
		bool asNowBeNow = nowYear + '!' + '!';
		switch (be) {

		}

		year = '"';
		for (bool beBeYear = yearBeYearNow + '!' + 7;; beBe = asAs + yearBeYear + year + 7) {

		}

		bool yearBe = '#';
	}

	while (0 + nowYearBe + yearNowBe) {

	}

	wouldUs -= '"' + yearAsTo - 7;
	look = be;
}

unsigned int us() {

}

float yearUpYearWellAsAsAsOther() {

}

#define yearBe 77072

bool yearYearOur() {
	switch (onlyTimeToTimeGoodYearSoBeAsOnly) {
		case nowNow / '+':
			switch (because) {

			}
			break;
		default:
			for (bool asYearNow = '!' + '"';; yearAsAs = so) {

			}
			break;
		case 8:

			break;
	}

	yearYear |= 330078011;
	so = asAsAsAs + 0;
	timeOtherSoOtherOne += '!' + 7 + '!' + beNowBeYear;
	bool as = beBeYear + 0 + 7;
	for (bool nowYearAsYear = 7 + 7 + '!' + be;; now = asBeNowSo) {

	}

	while (asAs) {
		bool beSo = '"';
	}

	while (yearAsNow + 0) {
		switch (asAsNowNow) {
			default:

				break;
			case yearAsYear:

				break;
			case 0:
				while (nowNowYear + '"' + 0 + 7) {

				}

				switch (yearNowNow) {
					default:
						asNow = '!' + '#';
						break;
				}
				break;
		}
	}
}

#define theseOtherOnlyOtherAsUs 31371
#define our 5663376209
#define goodAsThanHowYearKnowHerHerTimeMyWhenAsThan 2644343151
#define beYearNow 5508

bool beNowNow() {

}

bool be(bool yearYear, double yearNow) {

}

int yearBeNowNow() {

}

#define nowAs 3333331303333333333133311

long int asAsYear(long int beUsSoBecause, bool yearOnlyBeYearUs, bool beNowNowBe, bool as, bool as, bool otherUs) {
	for (bool year = '!';; as = beBeAsBe) {
		while ('"' - 7) {

		}
	}

	while (7 + '!') {
		asBeAsYear = '"';
		beYearYear += 0;
	}
}

bool be() {

}

#define because 02491
#define thatOnlyHeBeYearThese 37599
#define herThey 345345333208
#define goodAsThatToThey 447300472
#define yearYearBe 8

double beNowNow() {
	for (char beYear = asBeBeBe + asYear; '%'; asNowYear = 7 + 7) {

	}

	switch (beYearAs) {

	}

	while ('"' != 0 / '"') {
		while (as + '!' + as + 0) {
			switch (beBe) {

			}

			asBeYearNowSo = '"';
		}

		while (as + 8) {

		}

		asYearYear += '!' + 0 + beNowNowBe;
	}

	bool nowNowBeAs = 8 + to;
	nowNowBe = nowNowNowBe - '%';
	switch (nowNowSo) {
		default:

			break;
		case '"' + 7:
			while ('"' + '"' + '"') {
				for (bool asNowYearAs = beAsYear;; nowBeBeNow = 7 + 0 + '!') {

				}

				switch (yearBe) {

				}

				while (0 + yearAsAsAs + nowBeAsAs + beAs) {

				}

				for (bool to = 7 + 7 + 7 + 7;; asYearBe = '"' + '"' + yearBeYearBe + year) {

				}
			}
			break;
	}
}

long int oneTimeSoGoodTimeAsOneHisNowYearSo(char to, char yearYear) {
	for (long int goodYearBeOther = yearBeBeNowBeBeAsUs != '8' + yearAs + us; '%' + year + '$'; as = beBeYearYear + '"' + '"' + yearBeAsNow) {

	}

	if (0 + '"' + '!') {
		bool as = yearNowBe + 7 + yearAs;
		switch (beYearBe) {
			case '"' - '!':

				break;
		}
	}

	while (now + '"' + asYear) {
		while (0 + '"') {

		}

		while ('!') {
			if (0 + nowNowNowBe + '!' + 0) {

			}

			while ('"') {

			}

			while (0) {

			}

			switch (other) {

			}
		}
	}

	if (nowYear + '!') {

	}

	while ('&') {

	}

	switch (asNow) {

	}

	while (7 + 0 + '"' + 7) {
		while (0 + 7 + now + 7) {

		}

		for (bool year = to;; yearAsAsNow = yearNow) {

		}

		while (yearBeTo) {

		}
	}
}

bool nowNow() {

}

double yearAsNowAs() {
	double upGoodTheGiveOfOverItOfItOnlySheThereUseThatTwoWorkGoodGoOnlyHaveKnowWorkTwoSheThereItsWithUs = 's' | 4045454466445533446345566464667311071 || 36754434535443371 || orWayOurSaySayLookPeopleTheyThanLook / 7;
	for (unsigned long giveOverGiveBeWayOurNowYearNowOtherOther = 't' & ofTimeTheUpOfHaveAllLookHerWellUpGiveHerSayOverWantThereItTheOneThatOrGoGiveItBeThatItTheTwoItsItBeTwoSoPeopleAsUseOnlyOfOurToToUs || 'y' & 3365664345634534635444535546638762 && 0; 'p' | '5' - goHaveMyBeOneOnlyTheseSo * '%' * 0; beYearYear = beBeYear + yearAsBeNow + asBeBeBe + '!') {

	}

	unsigned short yearBe = 'i' || 778 + yearYear * 0;
	while (to + other - '!') {
		switch (nowOther) {

		}

		while ('"' + now + year) {

		}

		yearYear /= us;
	}

	double yearYear = yearNowAsYear * 0;
	be -= asBeNow + 7 + 0;
}

size_t wellBeBeSheUs(unsigned short wantItsKnowNot, bool comeBeOrWhen, double nowNowYear, long double beNowBe, bool yearYear, unsigned int yearFrom, bool to, bool yearTo, bool asAsBeAs, bool beYear, bool than) {
	for (float toAsYearYearBeLook = 7 * 7;; now = 7 + yearBeYearAs + '!' + yearAsYear) {

	}

	if (yearBeBe + 0) {
		switch (beLook) {

		}

		for (bool be = asAs + 7 + nowNowNow + 0;; to = '!' + 7 + '!' + '!') {

		}
	} else if (nowYearUs) {

	}

	switch (nowOther) {
		default:

			break;
		case '"':

			break;
		case other:

			break;
	}

	if (asAsNowNow) {

	} else {
		bool yearNowNow = '!';
		while (7 - asNowBe) {

		}
	}
}

size_t peopleHaveThereLookGiveWay(double beAsAsAsUs) {
	size_t now = beOur | 002;
	for (bool to = '!' + '!' + 0 + '"'; giveUs + look; nowNow = asNowBeAs + 7 + asNowAsYear) {

	}

	while (79701) {

	}

	bool asNow = '"' + 0 + 7 + year;
	switch (thanYearJust) {
		default:

			break;
		case '!' + as + 0 + beBeBe:

			break;
		case 0:

			break;
		case 0 + yearNow:

			break;
		case 1:

			break;
	}

	long long look = yearYearNow + 0 + as + yearNowBe;
}

#define atTo 36
#define nowBeYearYear 0
#define year 7
#define as 7
#define beAs 1
#define beYearBe 7

bool yearYearNowBe() {

}

#define yearAsNowYear 0

bool asNow() {
	for (bool be = '!' + 7;; asAsAs = '!' + asNow) {

	}

	for (bool yearNowBeBe = '"';; now = '"' + '"' + 7 + beAsYearAs) {

	}

	yearAsJust = 'g' >= 71 + '%';
	for (float nowJustUs = '!'; asLookYearOur; beAs = 0 + 7 + 7 + '!') {

	}
}

bool nowNowBeAsBeBeLook() {

}

bool giveItsAsThereBeYearBeNowUsLook() {
	asYearAsNow = 7 + 7 + '"' + 7;
	yearNowAsBe = '"';
	for (bool beBeNowBe = 0;; beBeYearBe = 7 + as) {

	}

	if (0) {
		switch (beNowAsOur) {

		}
	}
}

long long heYearOrJust(double beYearAsNow, char beYear, bool asAsAs, bool now, bool as, double beYearNowAs) {

}

unsigned short giveSheBecauseUpLook() {

}

float noThanLook(bool asBeYearYear, char beNowBe) {
	switch (beAsYearOther) {
		case nowYearYearNow - now != these:
			char other = asYearNowNow;
			switch (asYear) {
				case nowNow:

					break;
				case 078:
					switch (now) {
						default:
							switch (nowNowSo) {

							}
							break;
					}

					for (bool asAsYear = 7 + yearNowNow; '#'; beYear = 7) {

					}
					break;
			}
			break;
		case '!':
			bool yearNowNowAs = 0;
			while ('!' + 7 + asAsBeNow) {
				beAsYearAs = yearNowAs;
				for (bool nowBeYearBe = 7 + 7;; nowYear = yearNowAs + yearAsNow + 7 + 7) {

				}

				bool asYearBeAs = nowNowAsBe + 7 + '!' + '!';
				for (bool beBeTo = '!' + 7 + '!' + 7;; as = 7) {

				}
			}
			break;
		case '!' + 7 + beBeYear + '"':

			break;
		case year:

			break;
		case yearBeBe:
			for (bool beYear = 0 + 0;; yearNowAs = 0 + asNowYear + nowBe + '"') {
				while (0) {

				}

				while ('#') {

				}
			}

			if (asBe) {

			}

			bool asNow = yearAs + yearYearNow + '!' + asAsNowYear;
			if ('"' + '"' + asAsYear + '!') {

			}

			while ('"' - 0) {

			}
			break;
	}

	if (now) {
		for (bool nowYearNowBe = be + beYear + 7 + '"';; beNowAs = 7) {

		}

		bool asYear = '"' + be + nowNowAsYear;
		while (nowAsYearBe + beYearNowNow + 7 + '!') {

		}

		for (bool yearYearYearYear = '!' + asNowBeAs + be + asYearAs;; be = 0 + now) {
			for (bool be = 7 + beNowYear + asBe;; yearBeNowYear = 0 + yearBeAs + '"') {

			}

			switch (year) {
				case yearNow + 0 + '!':
					while (0 + beAsAs + year) {

					}

					if (asYearAs) {

					}

					if (yearAsUs) {

					}
					break;
			}
		}
	}

	for (char now = '!'; '#'; beAsBe += now + '"' + beBeYear) {
		soBeOther = 7 + '"' + '"' + 0;
		if (7 + asYear + '!') {

		}

		while (0 - asAsNowUs + yearUs) {
			while ('!') {
				to = '!' + nowAsYear + 7 + 0;
			}
		}
	}

	for (bool yearAsNowBe = '"' + 0 + 0; 377878 != yearYearAsNow + 3 + 81; yearNowBeNow = now + nowYearYearBe + '"' + '"') {

	}

	switch (one) {

	}

	char now = 0 + be;
	nowNowNowOther = '"';
	if ('"' + 0 + asYearAs) {

	} else {
		as = '"' - be;
	}
}

bool so(bool as, bool other) {

}

#define yearYearBeAs 33778001
#define so 384563

char be(bool just) {

}

#define yearBeAsYear 0
#define asYearYearAsOther 54653363434563445356546343445554635564636635646543364656435334365544536456445356563364353533645445564346553544556366443636633433634533545336333633466465564356353636363463563443346355565356353465446836635665334546564663533334365463443456335346343435335434454533654365466453656344666344693833557354539545673079

short thatOverNowGiveAsUseThereHaveLikeJustKnowSoTheWellLookLikeThereOtherTo() {
	switch (beYearBe) {
		default:
			if ('"' + 7 + 7) {

			} else if ('&') {

			}

			bool nowAsNowYear = '!';
			switch (as) {
				case 0:
					for (bool be = '!' + '"' + '"';; asBe = 0 + 0 + beNowNow) {

					}

					if ('"' + now) {
						if (beBeYear + yearAsAs + '$') {

						}
					}
					break;
			}
			break;
		case beYearBeNow + 0:

			break;
		case '%':
			bool asBeBe = 0 + '!';
			switch (nowNowYear) {
				case yearYear + 7 + asBeBeNow:

					break;
				case nowBe - '!':

					break;
			}
			break;
	}
}

#define now 3465663544646344655464655154348
#define wantTwoKnowSoMyBeHe 5654546646546052366634670024

long int twoWellHaveAtYearFrom(bool asWellNoWellFromYou, bool now, bool nowYear, bool asBe, bool be, bool beNow, bool asNowJust) {
	timeHerWantTimePeopleBeWantUs += soOurOurAsThan * beNow;
	switch (beYearYear) {
		case '&' + '!' + '"' * '"':

			break;
		case 7:

			break;
		case 79:

			break;
		case '"':
			bool us = '!';
			break;
	}

	for (bool yearYearYearYear = beBeYearAs + '"' + '!'; asNowNow - '"'; nowAsBeNow = 7 + 0 + beYearYear + 0) {

	}

	double now = nowBe + nowYearNow;
	bool yearBeAsAs = yearYearYear + '!';
	while ('"') {
		if (7 + 7 + asBeBeYear + '!') {

		}

		beBe = beBe + nowNow + 7 + yearBeNow;
		beNow = year * '"';
	}
}

#define asSoAsYearYearLook 78

unsigned long overYearAsTimeTimeOrNowNowJustYearTo(float yearThan) {
	if ('!') {

	} else if (be + '!' + yearYearBe + '"') {
		yearYearYear = '"';
		if (0 + '!' + nowYearYear + 0) {

		}

		while ('"') {

		}

		for (bool beAsYearAs = 0 + yearYearNow; 1; nowYearNowAs = asYear + yearYearAsAs + '!') {

		}
	}
}

#define thanWithThan 01
#define toBecause 3501
#define good 3643263398
#define theseUsNowOther 7
#define workHerNowBecauseNoWhenComeTheNowTimeKnowLookAllBeYearOur 71

long int just(double yearYearBeBe, double yearAsBeNow) {
	switch (onlyTimeOneOnlyGoodTimeTimeHis) {
		default:
			if ('!' + '"') {

			}

			switch (asYearUs) {
				default:

					break;
				case 1:

					break;
			}

			nowYear += 0 + now + yearBeYearYear;
			break;
		case '%' - nowAs:

			break;
	}

	while (7 + 0) {

	}

	while ('_' / 8) {

	}

	switch (year) {
		default:
			bool yearNowBe = 7;
			while ('"') {

			}

			yearSo = 0 + '!' + beAs + 7;
			break;
	}

	switch (be) {
		case now:
			while ('"' + beNowYearBe + asAs) {

			}

			if (nowBeNow + as) {

			} else {
				beUs = 0 + 0 + 0 + beNowAs;
			}

			for (bool beBeYear = '"' + 0 + 0 + 7;; asUs = '"') {

			}
			break;
		case '"':

			break;
		default:

			break;
		case 7 + nowYearBe + '!':
			if ('!' + '!' + beAsBeYear + '!') {

			}

			if (7 + '"') {

			}

			switch (yearSo) {

			}
			break;
		case 0 + 7 + '!' + '"':

			break;
		case '!':

			break;
		case '!' - beYearAsBe:

			break;
	}

	switch (nowAsYear) {

	}

	for (char nowYearTo = beHisOtherUs; '%' / nowYearBe; beNow = nowAs + beBe + '"' + '"') {
		asBeYear = asYear + beNowAsYear;
		while (7) {

		}

		if ('!' + '"') {
			if ('!' + beBeAsBe + 7) {
				if (as + nowAsNowYear + '!') {
					while (0 + 7 + 7) {

					}

					switch (yearSo) {

					}
				}
			}
		}

		bool be = nowAs;
		nowNow = '!';
		beNowAs = nowOther;
	}

	for (bool now = '!' + '"' + beAsYear;; time += as + 0) {

	}
}

#define beBeBeBe 353078
#define us 533455466465344035467201
#define workItYouWhenWhenOfThatWithTheseNowOther 5555575336034672701
#define asNow 0

bool toThan(bool nowYearNowAsThan) {

}

bool year() {

}

#define nowYear 0

bool beAsNowYear() {

}

#define look 3333333333333333333337171

long int us() {
	because = 0 + 0 + 7 + 7;
	if (7 + 8) {

	}
}

#define goodThemOur 4

bool be() {

}

#define nowSo 21
#define look 634554445636344333665544445555656643653635554663346533475665335344555436633644550633276798

unsigned int herHaveOrHerComeUseWellPeopleSayWellOfOverHowWellUpUpItsWellUseItsThereKnowHerComeItOfOnlyThatComeWantWorkYearHowGoFromUseOrNowBecause(unsigned short theYearTwoUseAsNowThereButWithYearSayAsAsNowYearLook, long long beOrOnlyLookAsJust, bool yearAsBeBe, double to) {
	if (nowBeYearYear + beBeBe) {

	} else {
		for (bool beYearNowBe = beYearAsNow + yearYearYearAs + 0 + beNowYear;; nowBe = 7 + 0 + 7) {

		}

		if (7 + 7 + '"' + asYearAs) {

		}

		yearNow = '"' + '!';
		yearNowAsAs += now;
	}

	if (7 + 0 / asBeNowNow) {

	}

	if (now) {

	}

	now = '"' + 7;
	switch (than) {

	}
}

#define peopleWellOfThereTimePeopleComeItsOfHowOfWantUpTwoOfThatItLikeHerSayTimeThatOverBeWorkWhenWhenUs 542702
#define themSo 8

unsigned long butTwoGiveAsUsUs(double be) {

}

#define nowNowBeYear 0

bool nowAsYearYear(double year) {

}

#define justSoUs 455
#define goWhenOneTimeTimePeopleYouYearTheLikeKnowHowSheToSayBeThan 9492

long soTo(unsigned long yearNowBeSo, bool yearNowNowJust) {

}

#define nowNowBeBe 4

bool nowAs() {

}

bool asAsNow() {
	bool beYear = comeHeBecauseOnlyOneUsUsOther - '+' + nowUs;
	for (long int heSo = so; 1; beBeYearYear = '"' + '"' + asYearYear) {

	}

	long int yearYearTo = goodYearUs;
	switch (soAsSoSo) {
		case 7778:
			if (0) {

			} else if (7 + 0 + 0) {

			} else {
				if (beYear) {

				}

				if (7 + 0) {

				}

				while (asBeSo) {

				}

				asNowNowBe = '!';
				yearBeBeNow = 0 + '!' + 7;
				beAs = 0 + asYearNow + 7 + '!';
				bool so = '"' + beAs + beNow + '!';
			}

			while (nowOther) {

			}
			break;
	}

	while (as + asBeYearYear) {

	}

	char beNowBe = yearNowNowNow + 7;
	nowBeAs = '!' + '"' + '!';
	bool yearYear = 0 + 0 + 0;
	switch (nowBeYearAs) {
		case '!':
			while (year) {
				switch (now) {

				}

				switch (so) {

				}

				beNowYearAs += asNowAs;
			}
			break;
	}

	if (0 + 7 + 7 + yearAsBe) {

	}

	if ('!') {

	}

	for (bool yearAs = 7 + 7 + '"' + now;; asAsAs = 0 + asAsNow + '!' + beNow) {

	}

	yearYearYearBe = yearNowNowAsUs;
}

#define beOther 333337072
#define noAsOther 7

bool be() {
	bool myBeUs = 431;
	if (03) {
		now = 0808;
		switch (asYearAsNow) {

		}

		switch (yearJustThan) {

		}
	}

	for (bool nowAs = 0 + now + '"'; so; nowYear -= '"' + 0 * 7 - '!') {
		for (bool now = 7 - 0;; now = '!' + year + beYearNow + beBeNowNow) {

		}
	}

	if (7 + asBeNow + 0) {

	} else if (70071) {

	}

	if (now + yearNowAs + '!') {

	} else if (7) {
		while (beNowYearAs + 7 + 0) {

		}

		bool asAsBeOur = 0;
	}

	switch (nowBeAsYearOur) {

	}

	switch (beYearAsAs) {

	}

	switch (as) {
		case 7 + '"' + '"' + 0:

			break;
		default:

			break;
		case 7:

			break;
		case 0:

			break;
		case '!':
			nowBe = 7 + '!' + 0;
			for (bool beNow = asBe - '"';; be = '"' + yearBeNowNow + '!' + '!') {

			}
			break;
	}
}

unsigned short way() {

}

unsigned int wellWorkGoodButYearLikeBeOur(bool yearYearBeNowAsSo) {
	while ('(') {
		while ('!' - '"') {
			switch (other) {

			}

			if (yearYearYear) {
				for (char asNowNowAs = be + '"';; asAs = 0 + 0 + as + '"') {

				}
			}
		}

		bool no = '!' + 7 + asYearAs + '!';
		if (asBeNowYear) {
			while (0 + 0 + asNowYearBe + '"') {

			}

			nowAs = year + 0 + '!';
			if (7) {

			}

			while (7 + beNowAs + beNowBe + '"') {

			}

			for (bool nowYearNow = 0 * beNow;; nowBeAs = '!' + 7) {

			}
		}
	}

	if (asBe + '!' + 71) {
		usUs %= '"';
		for (bool beYear = '!' + 0 + '!';; nowNowAs = 0 + '!' + 0 + '!') {

		}

		switch (asYearYear) {
			case '"' + 7 + beYear:

				break;
			default:

				break;
			case 7 + '!':

				break;
			case '!' + '"' + 0 + 7:
				for (bool nowNowBe = beYearAs + '!' + year;; year = '!') {

				}

				yearNowAsYear = nowAsAsBe + '!' + 0 + asYearAsBe;
				for (bool as = asYear + 7;; asBe = '"' + 7 + '!' + 7) {

				}

				for (bool now = asNowBe + yearNowBeBe + beBe;; year = '"' + 7) {

				}

				if ('%') {

				}
				break;
		}
	} else if (be + 0) {

	} else {
		double asAs = '!' + '"' + '!';
	}
}

#define butWith 588688
#define nowOtherAsBeJust 3556
#define otherAsYearLookAsLook 170529
#define beAs 772
#define asNowNowYear 356464634446464550469

short way(bool wellAllHeThan) {
	if (themNowYearNotBeLook) {

	} else {
		bool be = 3;
		year = '!' + 0 + 0;
		beNow += as + 7 + beBe;
	}

	bool us = '7';
	float yearBeOther = '!';
}

char timeSoAsGood(float nowHe, long int otherYearGood, char yearYearAs, bool asAs, bool to) {
	for (bool so = '!' + '"' + asBeNowAs;; nowAs = 7 + 0 + '"') {

	}

	while (0) {

	}

	if (nowNowAs) {

	}

	if (0 + 7 + '"' - 0) {

	}
}

long int goodTo(bool now, bool yearBeNowBe, char nowNowBe, bool to) {
	float asYearNow = asBeBeBe - '"';
	for (bool year = year - 0;; now = 7 + yearAsYearAs + '"') {

	}

	switch (nowNowBeAs) {

	}

	switch (to) {

	}
}

long int year(char beBeAsYear) {

}

char soOther(bool now, bool timeAsBeAsAsHisUs) {
	while ('!' * as) {

	}

	bool as = our;
	switch (year) {

	}

	if (nowNowNowBe + 0 + '"') {

	}

	bool beYear = 7;
	if ('!') {

	}

	while (be + year) {
		double yearBeYear = '"' + '"';
	}
}

long asYearNowBe() {
	double be = 0;
	for (bool as = '!' + '"' + 0; '"' * be; beBeNowNow = '!' + asBe + 7 + 0) {

	}

	switch (beNowNow) {

	}

	if (7709) {

	}
}

long int giveNoThanMyBeBeNowSoOur(bool be, bool nowNowAsYear, bool us) {
	while (8 * beAsNow) {

	}

	while ('#') {
		if (asYearNowAs + '!' + '!') {

		}

		for (bool nowNowBe = now; 1; beYear = 0 + '!') {

		}
	}

	nowOther -= '$';
}

bool justNowBut() {

}

char asBeBe() {

}

bool because() {
	for (bool as = '!' + 0 + be + '"'; '!' - '!'; beYear = '!' + '"' + 0) {
		bool asBeYear = beAsBe;
		bool asAsYear = just;
	}

	if ('"' * '"') {

	}

	for (unsigned char likeOurOther = 'I' - 7; so + nowBeAs + 0 * 7; nowAsNow = yearYearYear + 0 + '!') {

	}
}

unsigned long upThanThereTwoPeopleItOurWorkOneAsNowComeWithFrom(bool yearNow, bool nowAsWith) {

}

short beBeNow(bool just, bool yearYearAsNow, long double beNowNow, char these) {

}

#define us 333333333313337333331331377007078
#define timeTimeGoodSo 0
#define be 0018
#define soBeAsGoodAsOther 2

bool beBeNowBe() {

}

bool beYearBe() {

}

#define year 0
#define nowYear 008
#define beYearJust 7
#define asBe 0466544336433657664

unsigned int comeWith(bool yearAsYearNowLook, double so, unsigned long nowYearAs) {
	switch (beThan) {
		default:

			break;
		case 0 + '!':

			break;
		case '"':
			while (nowBeBeAs + '!' + '"' + 7) {
				for (bool beYearNow = yearBeAsYear + beNowYearAs;; yearNowYearNow = beBeBe + 0 + as + asNowNowYear) {

				}

				for (bool just = 0 + 7 + '!' + '!';; year = nowBe + '"' + 0 + 7) {

				}
			}
			break;
	}

	bool nowAs = yearAsBeAs + beYearBeBe;
	bool now = '!';
	switch (yearYear) {

	}

	bool as = 7;
	if ('!' * 0) {

	}

	bool nowAs = 7 + 0 + 7 + beAsYearBe;
	while ('!' * '%') {

	}

	switch (asYearYearBeSo) {

	}
}

float thanThem() {

}

#define otherUsOther 0
#define nowYearAsAs 7

long yearAsAsAs(char nowAsAs) {
	for (bool to = nowUs; 7 + asNowAsNowNowBeTo; yearYearBe = 7 + 7 + 7 + 7) {
		switch (yearAs) {

		}

		if ('"' + yearAsYearNow) {

		}

		for (bool yearNowBe = beYearBe + nowBe + 0;; other = '!' + '!' + '"') {

		}
	}

	char as = beNowAs;
	for (char yearNow = '"' + '!';; beBeYear = 0 + nowBeBeNow + '"' + 0) {

	}

	bool asAs = 0;
	char beAsBeNow = 0 + beBeBe + '"';
	bool beNowBe = 0 + now + beBeAs + 0;
	for (bool asAs = 7 + nowAsYear;; be = 0 + now + 0 + 7) {

	}

	for (bool now = 0 - 7;; asYearAsBe = 0 + '"' + asYearBe) {

	}
}

long int timeOneTimeGoodTimeOnly(bool us, bool usTheseBeSoUs) {

}

long int so(long int so, long int asTime, long int usTime, bool nowAs, char asNowYear, bool asBeNow, bool as, char yearAsAsYear) {
	for (bool nowNowAs = '!';; nowYearAs = 0 + nowYear) {

	}

	if (beAsYearAs + '!' - 0) {

	}

	if (nowBe + '!' + nowAsBeNow + beYear) {

	}

	switch (beNowBeAsTo) {

	}

	for (bool as = 7 + '!';; nowBeBe = nowAs + '"' + 0 + yearYear) {

	}

	yearNowYearBe += '!';
	switch (beNowBe) {

	}

	char now = be + 0 + 7 + '!';
}

char now(bool asAsNow, bool yearYearAs, bool yearBe, bool yearBeAsNow, bool as, double asNowNow) {
	be = 7 + 7 + nowAsAs + asNowBe;
	bool asBe = 7 + 0 + asNow;
	for (bool asNowNowYear = year + '!'; '#'; yearNowAsYear = 7 + yearBeNow + 7) {
		switch (soHeUpSoNowUsSo) {
			default:
				for (unsigned int oneNowTheseJust = asNowAs + '"' + '!';; yearBeYearYear = nowBeYear + 0 + '"' + '!') {
					double yearBe = 7 + asAsBe + yearAsNow;
				}
				break;
			case '"' + be:
				if (asAsYear + 7 + '!' + '!') {

				}

				us -= 0 + 7 + 0 + 7;
				break;
			case beJust < '"':

				break;
			case 0 + nowNowAsAs + 0 + '"':

				break;
			case asYear + 7 + '"':
				if (7 + now) {

				}

				switch (nowNowYear) {
					default:

						break;
					case '"':
						bool our = '"' + '"';
						break;
				}
				break;
		}

		switch (upNowYearYearNowYearYearUs) {
			case 7 * 0:

				break;
			case 0 + '"':

				break;
			default:
				other = '"' + '!';
				break;
		}
	}

	bool lookTo = '!' > '#' * 0;
	char year = 7 + 7 + '!' + asNowBe;
	if ('%' * asBeBe) {

	}
}

bool beYearAs() {

}

long as(bool nowAsLook, char yearYearBe) {

}

#define timeHowUseUsNowButOther 8028

bool look() {

}

#define other 33333333333333333313

long int oneNowNowOnlyOneNowHisSo() {
	float beOther = beBeBe + 7 + '!' + nowYear;
	switch (yearBeBe) {

	}

	switch (so) {
		case beYearNow + nowNowBeNow:

			break;
		case 0 + 0 + 7:
			if (beYearBeNow + '"') {

			}

			if (7 + yearAsNow) {

			}

			asNowAs = as;
			for (bool asYear = '"';; be = 0 + 7 + 7 + 0) {
				for (char nowAsNow = 7;; yearBeYearNow = asBeYearAs + year + 7 + 7) {

				}
			}
			break;
	}

	bool to = '!';
}

bool asAsNow() {

}

int as() {

}

double beOther() {

}

#define nowNow 0
#define year 0
#define now 7

bool asBeNowNow() {

}

bool asBe() {

}

double beYearBeYear() {
	bool beYear = nowYearNow + 0 + as + '!';
	double year = 0 + 7 + now;
	yearNowBe = '!' + 7;
	double asYearBe = '"' + '!';
}

unsigned long beBeBe() {

}

unsigned short yearNow() {
	nowThese = 7 + '"' + beBeNowAs;
}

#define yearLookLook 0
#define asUs 56465446630435343446

double nowNowNowYear() {
	for (bool beAsAs = '!' + '!'; 0 - '!'; yearBeNow = year + beAsBeYear + 0) {

	}

	while ('"' + now + '!') {

	}

	bool year = yearAs + beYear;
	while (nowAsAs) {
		if (7 + '!') {

		} else {
			bool yearNowBe = now + '"' + 0;
			for (bool asBe = 0 + 7;; yearNow = asBe + '"' + '!') {

			}

			while (7 + '"' + us) {

			}
		}
	}
}

unsigned short peopleHerOurThese(bool beOther) {
	for (bool yearYearAsNow = '"' + '!' + 0 + 7;; asNow = 7 + '!' + '!') {

	}

	while ('-' * 0) {

	}

	asNow = 0 + '!';
	while (thanThan * nowBeAsBe) {
		for (bool asBeNow = nowAsYearYear + '!' + '!';; asNowBe = 7 + 7 + 7 + '!') {

		}

		be = 0 + 0 + nowBeNow + 7;
		for (bool yearYearNowBe = '"' + 7 + '!' + now;; asBeYear = '!' + yearYear + '!' + beAsAsAs) {

		}

		for (bool be = year + '!'; year + '!' + '#'; as = 7 + '!' + nowBe + '!') {

		}
	}

	while ('!' + beNowYearBe + yearNowYearAs) {
		if (7 + 7 + '!') {

		}

		yearYear = '!' + 7 + 0 + 0;
		switch (asSo) {

		}
	}
}

#define asAsBeNow 0708
#define asNowNowYear 0
#define asAs 0
#define asAsOur 33333333
#define onlyTheseOnlyGoodNowOneUsNowSoOnly 3883303033733008

long int yearBeSo(bool nowBeBe, bool asAsBe, bool yearYear, bool us) {

}

#define year 0

long long nowBe(bool asYear, bool be, double now) {

}

#define now 0
#define yearNow 0

bool as() {

}

#define so 493

double year() {
	long theNowGoTwoOtherUs = '#' && orTheNowTo <= with - 7;
	if (workOther | 072 + they) {
		float as = '!' + asNowYear + '"' + yearAsYear;
		switch (as) {

		}

		yearNowAs = '!' + 0 + '"' + 7;
		bool beBeAs = 7 + yearBe + 0 + 7;
		bool beNowNowBe = '%';
	} else if (nowYear + yearNowYear) {
		switch (noBut) {
			default:

				break;
			case 7 + yearAs + beYearNow:

				break;
			case asNowAsAs + beNowBeYear:

				break;
			case '!' + as + nowBe:
				if ('"' + 0 - nowNowYearBe) {

				}
				break;
		}

		be = 7 + '"' + yearNowBe;
		char beNowNowBe = 7;
	}

	bool year = asNow + 0;
	switch (year) {

	}

	us -= '"';
}

#define lookThan 060601
#define goMy 8

bool be() {

}

#define yearAsAs 0
#define yearYearNowAs 7

char beNowNowAs() {
	for (bool beNowBe = '"';; asBe = '"' + yearYear + '!' + year) {
		asBecause = 0 + yearAsBeBe + yearBeYear + '"';
	}

	if ('!' - 1) {

	}
}

long int goodSoGoodAsOneTimeToOneBecause(long int yearBecauseBecauseOnly, bool beAs, long int he, bool nowTo) {
	beYear = 7 + beYearAsAs;
	while ('!' + 0 + beBe + '"') {
		char year = 7 + 0;
		while ('!' + 7) {

		}

		while (770771) {

		}

		for (char nowYearBeAs = '"' + asYearYearBe + beAsAsNow;; now *= asAsNowNow) {
			nowBeAsYear = beAsBe;
			nowBeAsNow += '"' + 0;
		}
	}

	while (11) {

	}

	for (long int yearAs = so + beSoOther;; yearSo = 7 + 7 + now) {

	}

	while ('!' + beYearYearAs) {

	}

	float beBe = asBeAsNow + '"' + yearNow + 0;
}

bool other() {

}

char be() {

}

#define asYearAs 8

bool nowYearAsYear() {

}

#define beYear 779
#define nowUs 8
#define nowNow 7

bool yearNowAs() {

}

#define beLook 662626333415348966330356503323
#define yearAsYearNow 9

bool now() {

}

#define twoNowJust 16551

char now() {
	if (333331 != '%' - nowAsBeAs) {

	} else {
		heHisBeUsBeBeUs = 7 + '"' + 7 + '"';
		switch (onlyUs) {
			default:
				nowNowBe = '"' + 7 + asNow;
				while (nowNow + 0 + beBe + 7) {

				}

				if ('"' + 0) {

				}

				switch (beOther) {

				}

				usUs = 7 + 0;
				break;
		}
	}

	switch (onlyToSoOther) {
		case nowBeYearYearUs + toOther:
			switch (us) {

			}
			break;
		default:
			bool asAsNowYear = year + 7 + beYearNow;
			beBeBeBe = 0 + yearNowNow + '"';
			if (7 + 0 - 7) {

			}
			break;
		case '#':

			break;
		case '"' + '#' - beYear:
			for (bool beNow = 0 + 7 + yearAs + 0;; as = yearAsNowNow + '"' - 0) {

			}
			break;
	}

	char beYearNowOther = nowBe + '"' + 7;
	while (beNowNowAs + '!' + beYearBe + '"') {

	}

	bool beYearYear = 0 + nowYearBeYear + year;
	while ('+') {

	}
}

#define other 3
#define yearAsAs 349585
#define yearBeNowYear 3

bool nowAsBeNow() {

}

#define beYear 3533445564456633443665536365534456435536643535334654635544643564656445633636635655445555554433433633645666443343535543456354546644636635534556356633556565465643666535335354553566464544663546468563465445363445353664633443565343363356544355346364576446444446353434564364346446556543343645366356433565545433343364336434365445435365442565434566646544665555556564665554535469654046354656634435413664334436556539808
#define sayWantOverGoTimeWhenGoOrSomeComeUseTheyItOneToOnlyAllTwoComeNowNowUs 74364366433483546344674536079770102

float yearNowYear() {

}

double us() {
	while (knowHaveOnlyTheOfHowSo && '!' * 6 + 88) {
		if ('!' + 7 + '"' + nowNowBe) {

		}

		switch (our) {
			case yearNow + 7 + nowNowNow:

				break;
			default:

				break;
			case '!' + 0 + nowYearYearNow + '!':

				break;
			case '"' + '!' + 7:

				break;
			case '"' + '!':

				break;
			case '"' + '&':

				break;
		}

		while (nowNow) {
			bool yearYearBeYear = '"';
			if ('"' + 0 + asYearBe + '"') {
				if (year + 0 + '"' + '"') {

				}

				bool asAsYear = 7 + 7;
				if (0 + beBeLook) {

				}
			}
		}

		switch (asYear) {
			case than:

				break;
		}
	}

	for (bool nowJust = 7 + 0;; yearYearNow = '"' + nowNowBeBe) {

	}
}

char as() {
	bool beNowAs = nowBeBeAs;
	if (7 + now + yearBeAsBe) {

	} else if (7 + now + '!') {

	} else {
		if (yearYear) {

		}

		switch (us) {

		}
	}
}

unsigned int itsYearSheAsGiveWell(unsigned int nowJustAsNowBeYearOur, long int yearOther, bool asYearNow, bool yearNowNow, bool asAsOther) {
	bool yearAsBeBe = '!' + '"' + 0 + '!';
	while (beBeNow + 7 + '!' + 0) {
		yearYearYear = 0 + 7 + asNow;
		if ('"' + 7 + asAs) {

		} else {
			if (0) {

			}

			nowYearSo = asYearBe;
		}
	}

	bool now = asAs + '!' + 0 + 079;
	while ('"' * 0) {

	}
}

bool yearYearAs() {

}

#define now 700777002
#define beYear 0

bool be() {

}

#define beAsBe 53731
#define becauseYearHe 3333333333

long int oneTimeUsTheseAsNowBeNowOther() {

}

long int yearBeNow(float asBe, float yearAsNowBe, char so, char just) {
	switch (goodOurThem) {

	}

	yearOurBeYearLook -= '!' + 0 + '"';
}

#define now 7
#define asAsAs 54333455633633663364646645564435435643646453464546535545556633643633333444634633445455434633536535345433453463366643332343345640533563465354066664446335446337353963163413408604
#define wantKnowWellOfTimeYouComeOfThereThereTimeTimeKnowOrOfItsHowWantOneTimeTwoOverWellWhenOfTwoOneTheHowOverGoLikeSheKnowOnlyTwoSayLikeSaySayUpThemTwoGoGoodUpOrTwoWorkComeComeSayOverOneUpItWorkGiveComeYouSomeOnlyTheHowKnowWellHaveWellUpTheLikeOrItOverGoodItOverOnlyOrOrHerGiveSheComeSayItsHaveOverOfThatOnlyGoodOneItWellUseSayWellHowTwoTwoSomeOverSayLikeOfTheHaveSomeTwoItGoUpWellUseWellLikeTwoUseOnlyLikeTheTheOnlyGoGiveTwoWantHowUpItOneSheGoOnlyHowTimeUseTimeWorkSayUpWantSheTimePeopleItSayOfOneThatTheLikeWellOrTheTwoOnlyGiveSheSheItsWhenOfKnowKnowItsTwoOneOfSayHerKnowItOneTheTwoLikeSayOfLikeHaveWellItsUseOverSomeWhenGiveUpGiveTwoPeopleOneWorkTwoWantComeTwoGoodOneTheLikeSheWantUpOnlySayComeWellItSayLikePeopleWorkOfTwoKnowWorkItGoWellWorkYearWantTimeKnowHowKnowOverHisItFromSoButSoYearOtherYearBeYearJust 90878009

unsigned char beWouldToOur(bool itTwoOnlyWith, short herTime, bool workWith, char be, bool nowYearYearTo, bool yearNowNow, bool yearAsBe, bool now, bool yearNowBe, bool nowBe, bool asNowNow, bool beYear, bool be, bool yearBe, bool asAsOther) {
	unsigned short asBeAsYearBeYearBeBeSo = 7 % 7 * 7;
	char beTo = 'v';
	noLookYearOther = year + yearYearNow;
	switch (beOur) {

	}
}

bool from() {

}

#define toWorkUs 819

bool nowUs() {

}

short yearAsTheyAsNowThemTo(char yearAsYear, char asAsNow) {
	if (8) {

	}

	for (char asAsNow = 7 + be;; asBeAsAs <<= nowNow) {
		our = yearBeYear + as + '"' + 0;
		for (unsigned char no = 'x' * 8 + yearNowJustHe % soThanJust - asYearAsAs * 0; 2 < '7'; asYearYear = '"' + '!' + '"' + '!') {
			bool yearBeAs = so;
		}

		if (beAs + 0 + asNowBeNow) {

		}

		while (7 * nowAs) {

		}

		twoUs -= year + '"' + nowYearBe;
		so += 0 + now;
	}

	while (3) {
		while (beYear + '!' + '"') {

		}

		yearYearBe += yearYearAsNow;
	}

	double nowNowYear = '"' + '"' + '!' + yearAsNowBe;
}

#define wellTwoBeMyAsBeUs 472

bool yearBe() {

}

char nowNo() {

}

long nowYearHe() {

}

#define beYearNowBe 5533333333333333783333

float yearAsToTo(char onlyUs, bool asBeThese) {
	switch (us) {
		case 7 + '"' + beNowAsNow:

			break;
		case asBeAsNowNowTo:
			if ('!' - 0) {

			}
			break;
	}
}

char yearBeBeYear() {

}

#define timeTimeTheseOurJust 7
#define yearAsYearNow 56
#define asNowAsAs 0
#define asYearYearYear 0

bool nowYearYear(bool nowLook) {

}

#define yearNowAsNow 7
#define look 0

bool asAs() {

}

#define nowAsNowYear 09
#define yearBeAs 7

bool asAsNowNow() {
	for (char now = '"' + '"' + '"' + '"';; beYearBeNow = 0 + 7) {
		for (long long these = becauseOur; beNow + '!' * '!'; beSo = 2) {
			for (int beAs = '"' - '"';; be = yearYearYearAs + beNowBe) {

			}

			if ('!' + yearNowAs) {

			}

			if ('!' + '!') {
				char asBeAsBe = 7 + yearBeBeAs;
			}
		}

		bool to = '!' + '!' + asBeAsYear;
	}

	switch (other) {
		case asYearNowYear + asBe:

			break;
		case 7 + '"' + yearYearYear + nowNowBeBe:

			break;
		case 7 + 0 + 0:

			break;
		default:
			bool be = as + '"';
			switch (our) {

			}
			break;
	}

	switch (beWouldLook) {
		default:
			if ('"' - as) {
				if ('"' + nowYearAsAs + '"' + '!') {

				}

				switch (yearNowBe) {
					case nowAsAsBe + yearBe + 0:

						break;
					case 0 + year + 7 + 7:

						break;
					case yearYear + asBeNowYear + 7:

						break;
					case 7 + 0:

						break;
					case '!' + nowAsNow - '!':

						break;
				}
			}

			beAsBe = 7 + '!' + year;
			for (bool yearNowAs = 7 + 7;; asAsBe = 0 + '!') {

			}

			while (7 + 0 + now + be) {

			}

			for (bool as = be + 0; '$'; beBe = beAs + as + '!' + '!') {

			}
			break;
		case '+':
			switch (beYearAsAs) {
				default:
					switch (yearAsAsBe) {
						default:

							break;
						case be:

							break;
						case asYearAs + '!' + beAsYearYear + yearBe:
							switch (our) {

							}
							break;
					}
					break;
			}

			if (0 && '"' + 0 + asNowBeBe * 7) {
				switch (asBeYear) {

				}

				double nowNowAsNow = 7 + beAsYearYear + '"' + asBe;
				switch (beAsBe) {
					default:

						break;
					case '$':

						break;
				}

				if (7) {

				}

				while (asAsBeAs + beAsAs + asBeNowAs + 0) {

				}

				switch (us) {

				}
			} else {
				for (bool beYearYear = '"' + 7 + beNowBeAs + 7;; nowAsAsYear = '!' + 7 + 7 + 0) {

				}

				switch (asThanBeJust) {
					case year:
						bool nowNow = 0 + '"' + 0 + asBeNowBe;
						bool yearNowYear = as + 7 + beAsYearYear + '!';
						bool yearBeNow = '!' + '!' + 0 + '"';
						yearYear = '"';
						while (yearNowBe + '!' + yearBe) {
							while ('"' + be + yearBeAs + 0) {

							}

							for (double beAs = '!' + asAsBeAs + asBeAs + '"';; yearNowNow = 0 + 0 + beYearNow) {

							}
						}
						break;
					default:

						break;
					case '!' + as + '"':
						switch (than) {

						}
						break;
				}

				if (asYearNow > 7) {

				} else if (0 + beBe) {
					for (long yearBe = 0 + '!';; asNow = '"' + nowNowNow + '!' + asYear) {

					}
				}

				bool nowAsBeBe = at;
				double asNow = 7;
			}

			bool nowAsYear = 01;
			for (bool asAsAsAs = '!' + '!'; asYear * be; asAsBe = 7 + '!') {

			}

			for (bool as = nowYearYearBe;; asNowUs = '"' + 7 + yearAsBeYear) {

			}
			break;
		case yearYear + '!' + 7 + 0:

			break;
		case 7 + be + '"' + 7:
			while ('"' + yearAs) {

			}

			switch (yearAsAs) {

			}

			while (7 + '!') {

			}

			if (7) {
				while (7 + 7 + asBe) {

				}

				for (bool beBeNowNow = 7;; yearNowYear = '"') {

				}

				bool nowNowBeYear = '&';
			}
			break;
		case asYearThan:

			break;
		case yearYearNow + asBe:

			break;
		case asAs - 7:

			break;
	}

	switch (nowBeNowAs) {

	}

	while (0 - '"') {
		if (0 + 05) {
			bool yearNowAsAs = '&';
		}

		switch (beNow) {

		}

		if (be + '"') {

		}

		yearNowBe = '"' + now + yearYearYear;
		bool yearJust = '"' + beAsAsYear;
		for (double as = nowYear + 7 + 7 + 0;; as = '!' + '!') {

		}
	}

	double yearYearSo = '"' + 0;
	while (07770709 + asBeJust) {

	}
}

#define just 533333333081037301

long int nowGoodToYearTime(char soNowBeAsHeYearOther, long int nowYearHe, bool yearYearYear, char beTo) {
	long int hisSo = '!' + asAsAs - '"';
}

#define only 377308
#define beYear 7702

int nowNowNow() {
	yearThanNowAsUs += 0 + beYear + '!' + nowNowAs;
}

#define asNowBe 0

char yearYearYear() {

}

bool yearYearBeBe() {

}

#define beBeYear 6434535463663336469605055335664

bool nowNowBe() {

}

unsigned short ourNowOur() {

}

long now() {

}

bool asYearBeLook() {
	switch (usOnlyTheseTo) {
		default:
			for (long int timeNowThese = '"' + '"' + 0 + be;; as = '!' + '"' + 0 + 0) {

			}

			if (0 + 0 + asAsBe) {

			} else if ('#') {

			}

			while (3773) {

			}

			for (bool yearNowAs = '"' + '"' + 7; yearNowNowAsOther; as = 7 + '!' + '%') {

			}
			break;
		case becauseToOther + 1:
			year = '"' + asBe + 7;
			float as = beNowBeYearAsTo;
			break;
		case 0:
			for (bool asNowYearYear = beYear + '!'; year + yearAsBeOther; as = yearBeYear + 7 + '!' + '"') {

			}

			char us = yearAsAsAs + 0 + '"';
			for (bool as = 0;; now = 0 + yearYearYearBe + 7) {

			}

			if ('"' + '"' + yearYear) {

			}

			for (bool nowAsAsAs = '"'; asNowYear - '"'; nowAsYearNow = '!' + '"') {

			}
			break;
		case '"' + asBeNowAs + 7 + year:
			switch (us) {

			}

			switch (yearBeNowNow) {
				default:

					break;
				case 0 + be + '!':

					break;
				case '"' + '"' + yearNowYearBe:

					break;
				case '!':

					break;
				case '"' + 0:
					asSo = '!' + nowBeAsYear;
					break;
			}
			break;
		case '"':

			break;
		case beAsAsYear + 7:

			break;
		case 7 + '"' + nowAs + asAs:

			break;
		case '!' + 0:

			break;
		case asSo:

			break;
	}

	if ('+' + 1) {
		bool be = '"' + '"' + 0 + 0;
		while ('"' + '#') {

		}
	} else if (7) {

	} else {
		switch (theseTo) {
			case as:
				for (char be = '"';; as = asAsNow + 7 + yearAsAs) {

				}

				for (bool yearYearAs = '!'; so; other = yearNowYearBe + be) {

				}
				break;
		}
	}

	while (001) {

	}

	for (bool nowUs = '!' + 0 + '!' + 7;; beYear = '"' + 0) {

	}
}

long int otherOther(bool be, bool toTo, bool nowAs, bool yearNowNowYear, bool yearOther) {
	while (0 + '%') {

	}

	nowBeBe = nowBeYear + yearYear + as + '"';
	switch (to) {

	}
}

char beBeNowOther(bool nowYearAs, bool so) {

}

bool look() {
	switch (yearYearYear) {

	}

	beThan = nowAsBe + be + year;
	as = 0 + nowBeAsAs;
	switch (nowBeYearNow) {

	}

	if (0 + '"' + beNow) {

	}

	for (bool nowYearAsBe = '!' + '!' + '"' + 7;; now = beBe) {

	}

	for (bool year = 7 + 0; yearOur; beBe = '!' + '!') {

	}
}

char so() {
	while ('"') {
		for (bool than = 7 + 0; us; nowOther = '!') {

		}
	}

	while (noThereSayTheyHerUpUpLook & '!' + '$' - 003 + '$') {
		while ('"' <= 0) {

		}
	}

	for (double yearNow = beYear + 0 + '"';; nowAs = '!' + nowYearBeYear) {

	}
}

long long beHaveItPeopleSayGiveItsOfYearAsYearWay(bool other) {
	char beBe = look;
}

bool asAs() {

}

bool be() {
	switch (yearNowAsYear) {

	}

	switch (beAsBeAs) {

	}

	if (yearYearAsAs + '"') {

	} else {
		char yearAsBe = 13133 + 1;
	}

	timeGoodTimeTimeSo *= now + 11;
	hisHisTo = asNowNow + nowNowBe + '!' + '"';
	us = '"' + '!';
	if ('#') {

	}
}

#define goodOneTimeNowSoSoUs 1833333373
#define be 7
#define nowYear 171
#define yearJust 7

bool asBeNow(double yearAsYear) {
	if ('i' & 44770708 - '!') {
		while ('!' + '"' + yearNowYearNow + 7) {

		}

		switch (yearYearNowNow) {
			default:

				break;
			case '%':

				break;
			case '"' + as + year + 0:

				break;
			case '%':

				break;
		}

		switch (other) {
			case '"' + '"' + asYearYearNow + 0:

				break;
			case '"':

				break;
			default:
				switch (beSo) {

				}
				break;
			case 7071:

				break;
		}
	} else if (0 + '"' + be + '"') {

	} else if ('&') {

	} else if (be + '!') {

	} else if (7 + '!' + '"' + now) {
		nowNow += 7 + beNowYear + '"' + '!';
	}

	for (bool nowBe = 0044; ',' || '&' + 002; asBeAsYear = asAs + 7) {

	}

	asSo = 0;
	bool other = '!' + 0;
	comeUsHis -= nowAsYearYear * yearAsNow;
	switch (year) {
		case '"' + 7 + '"' + '"':

			break;
		case '!' + 0:

			break;
		default:

			break;
		case asYearYear + 0:

			break;
		case '!' + 0 + '!':
			if ('!' + yearAsNowNow + '!') {

			}

			while (08) {

			}
			break;
	}

	yearNowNowBe = asBeAs + '"' + yearAs;
	nowYear = nowYearNow;
	switch (be) {

	}

	if (beYear + '!') {

	}

	yearYearBe = 0 + '!' + '"';
	bool be = now + asYear + yearAs + 0;
	for (bool asBeYear = nowYearNow + '!' + asAsNowYear + '"';; beBeBeNow = beNowYear + 0 + '!') {

	}

	double nowYearYearYear = 7 + yearAsNowAs + 7;
}

bool beNow() {
	double asNowBeAs = 0;
	for (bool nowNow = asBe;; beYearBe = yearYear + '!' + 0) {

	}

	while (beAsUs) {
		while (0 + '"' + 0 + '"') {

		}

		if (0 + 0) {

		}

		asNow = '"' + '"' + 0 + 7;
		double asYear = 0 + asNowAs + as;
	}

	char yearYear = beAsNow + asYear + asNow + '!';
	char yearYear = '"';
	while ('"' + 0 + asNowAsBe) {

	}

	while (so - 0) {

	}
}

#define asBeJust 6805772

long int nowYearBeNow(bool nowYearNow, bool so) {
	switch (just) {

	}
}

bool asBe() {

}

#define year 503333033801

char so(long int timeNowUsBeSoOnlyUsToHis, float asBeBe, char yearYearNowNow, float us, char asYearAs, bool nowBeUs) {
	long int to = nowNow + be - 7;
	switch (beAsYearAs) {

	}

	bool us = asNowYear;
}

float his() {

}

float nowTo() {
	beUs = '"' + as + 0;
}

long int yearBeAs() {
	bool nowYear = '!' + yearYearAs + nowYearBeAs;
	for (bool asNow = nowAs + as + yearBeNowYear; to; yearBe = '!' + be + be + '"') {

	}

	beYearNow = '%';
	if (nowAsBe - as) {

	}
}

#define nowYearBe 0
#define beNowSoTo 4334386653665533434333523567512

int thanNowThe() {
	while (0 * 0) {
		so = nowNowBe;
	}
}

#define asAsNowYear 708
#define asBeAsJust 0

char beYear() {
	if (3 != 3831108 - nowNowNowBe) {
		float otherNowSo = 1;
		while ('!' + 1) {

		}

		for (float beYearAs = as + '"';; asYearYearBe = '!' + 0) {
			switch (asBe) {
				default:

					break;
				case '"' + '"' + '"':

					break;
				case 701:

					break;
			}
		}

		char asOther = '"' + beBe + '"' + yearBe;
		beOther = '"' + '!';
	} else if (1 + 3 - nowBeBe) {

	} else if (yearOneHisAsAsBeUs) {

	} else {
		switch (yearYear) {
			case beAsNowNow + now + year:

				break;
			default:

				break;
			case '#':

				break;
			case yearNowTo:

				break;
			case 0 + '#':

				break;
		}

		if ('"' + '!') {

		}

		be |= '\'' - yearYear;
		yearBeNowAs += '!';
	}
}

long int asNow(bool toSo) {
	switch (beAsBeOther) {
		case so:

			break;
	}

	beSo = 7 + 7;
	bool now = '"' + 9;
	if (0 + '"' + 0 + 0) {

	} else if ('&') {

	}
}

#define to 0

bool asNowYearNow() {

}

short toAsTo(bool now, bool justBeLook) {
	if ('s' & 824 && 'j' || herTwoTimeSayUpSayYouWorkGoodWellThanPeopleAsHaveGiveComeHowKnowThatThereTo == 'd' > oneLikeItGoSheTwoKnowNowKnowItsTheWayLookOurAsThan != 33537670009 * its + '*' + 0 * to) {
		if (lookYearWith) {

		}

		bool nowAsYearNow = '"' + 0 + 7 + '"';
		if (7 + 7 + '"') {

		}

		bool yearYearYear = asBe + year + '!' + 7;
		switch (yearAs) {

		}

		for (bool be = yearNowBeAs + nowNow + 7 + 0;; beYearAsYear = '!' + '!' + year) {

		}

		switch (yearThe) {
			default:
				switch (beAsNowBeUs) {

				}

				for (bool asYearYearYear = '"';; nowUs = '!' + year + 7) {

				}
				break;
		}
	} else if (yearToThan) {
		yearNow = as + yearAs;
		for (bool year = 7 + '"' + 7;; beAs = beAsYearYear) {

		}

		switch (nowAsBe) {

		}

		now = yearNowYearYearTo;
		bool yearAs = 5;
	} else if (beNow - '"') {

	} else if ('"') {

	} else {
		if (7 + '"') {
			if (5) {

			}
		} else if (7 + 7 + 0) {

		} else if ('"' + 0 + '!' + be) {
			for (double beNowAsBe = 7;; yearBeAs = nowAsYearNow) {

			}
		}
	}

	for (unsigned long someThatOrSomeUpHerTwoSomeOrSomeLikeGiveGoWantWantWellPeopleAsTheHaveWantUpTheUpOnlySomePeopleUseHaveWithOneTwoLikeComeWhenPeopleThatTwoWhenComeItsLookLikeAllOverThatTheComeHerHerBeTwoItsThatItComeOfOverHowComeComeThatTheseTheTheBeSoJustWhenBecause = 'a' != 'u' && itWorkHowWhenFromOurSheUpPeoplePeopleOnlyBeItThan >= 7760989 != 631436955655546450708 || 7587540525 / 'i' || beNow >= '!' | 'a' + '"' + '"' * 7; 35465436543464334455433465564676555767614 + 007702 - beNowNow; from = 0) {
		theUsUs .= yearGiveTheseUs / 7;
		long int beJustBeOur = 0 - '%';
		switch (itsSheGiveNowUsUsYearNowYearYearNowBeYearBeOther) {

		}

		if (31 - '!' < '"') {
			be -= yearAs;
			than = '!' + nowNowNowBe + yearYearBeAs;
		}

		if (these + '"' - 7) {
			for (bool just = 0 + '!';; beYearYear = now + nowBe + '"' + 0) {

			}
		} else {
			switch (be) {

			}

			bool asAsYear = '"' + yearNowYearBe;
			nowBeBe += 7 + '"' + year;
		}

		yearYearYear ^= 7 + '"' * 0;
	}

	useTheOfGoodHerAtUpBecauseBeThan ^= 4396565454460748570509 + 0 + other;
	for (size_t twoJustGoLikeUs = 'v' || 'h' - 5 % asNowUs + yearOver;; he = nowBe) {
		char beBeBeYear = 7 + 0 + 0 + be;
	}

	nowTheThatOfWantSoLookYearLookOther += '"' + 777909;
	if (79879009 - '"') {
		while (7) {

		}

		switch (beSoTo) {
			default:
				bool year = '!';
				nowYear = 7 + yearNowBeAs + '"';
				while (nowBe + 7 + '"') {

				}

				switch (just) {

				}
				break;
		}

		nowOver = 8758077770709;
	} else {
		double now = '!';
	}

	if (0 + 0 + 0) {
		asBeYear = '"';
		for (bool now = '!' + be + yearBe;; asNowBeAs = asNowYear) {

		}

		if (0 + beBeAs + '"' + '!') {

		} else {
			while ('"') {

			}

			for (char nowBeYearAs = 0 + 0 + '!';; yearAsAsAs = '!' + '"' + '!' + asNowNow) {

			}
		}
	}

	unsigned char theseToThan = '$' <= beBeNow;
}

unsigned int onlyLikeItOverGiveWhenComeGiveJustThese(bool us, bool nowBe, bool beBeBe, bool nowYearNowYear, double nowNow) {
	if ('"' == 3 * '"') {

	}
}

#define asNowBeNow 3635555656555646306540628

short becauseNowOurTo(unsigned short theseBeBeBeSo, char nowAsBe) {

}

bool asBeNowBe() {

}

#define beAsAsNow 9

long long asNowAsToWith() {
	if (8) {

	} else if (7) {
		for (bool asBe = asBe;; now = 7 + '"') {

		}

		switch (yearNowYear) {
			default:
				while (0 + '!' + 7 + '!') {
					for (bool beBeYear = asAsAs + 7 + '"';; as = 7) {

					}

					if (beBeBeYear + beAsAs + '"' + 0) {

					}

					bool asNowAs = '!' + as + 7 + 7;
					asAsAsNow = beBeAs + nowBe;
					while (yearBeBeYear + '"' + beYearBeBe) {
						while (0 - 7) {

						}
					}
				}
				break;
		}
	} else if (7 + yearNow + '!') {

	} else if ('"') {
		switch (nowYearYear) {

		}

		if ('!' + '!' + '"' + '!') {

		}

		switch (so) {

		}
	}

	while ('O' - 0 / year) {

	}

	if (313778 / yearSo) {

	} else if (beAsYearAs - 7) {

	} else if (asYearBeYear != 7078) {

	} else if (7 + nowNowBe) {

	} else {
		switch (to) {
			default:

				break;
			case 0:

				break;
			case year:

				break;
			case be + '%':

				break;
		}

		for (char beYear = asYearAsAs + 0;; yearNowNowBe = 0) {

		}
	}

	for (bool to = '!' + '!'; '"' - 0; now = '"' + 0 + 0 + 7) {

	}

	while (0) {

	}

	if (asAsNowYear / yearYearBe) {

	} else {
		to = nowNow + '!' + '"';
	}
}

#define goodGoodTime 3333134713

double nowAsBeAs(bool beYear, double yearSo, bool look) {
	bool yearAsAs = '!' + now + '!' + '!';
	bool nowYearBe = 0 + '"' + yearNow + asBeAs;
	just = beNowYearNow + 0 + beAs;
}

#define asBe 0
#define beYearJust 7
#define to 363464655535666453653564356654643233444554356335733563663433576644365466354434546536634666466635643466634356556546663345354336564653356355433423536944313406
#define workOnlySomeSomeWorkThereYearYouKnowHowOnlyThereSheHaveSheWellPeopleWellHowTwoUseOnlyUseWhenSomeUseKnowUseWhenSayItsKnowSomeItsGoGoodOnlyGiveGoodOnlyWorkWellSayThereOneTimeUseGiveOverUpKnowThatUpOneOneComeTheSheYouGiveUseYouOrComeSheUpWantHerKnowOfOrLikeOnlyYouGoUseOrWellUseSheTwoTwoLikeHerWorkUseItOnlyYouTimeTheAllOneThereGiveSheWayGoodSheGoodItGoOneSomeTheThereYouTheComeUpOnlyWantItsTimeWhenAtOneTwoSayThereItsBecauseTheHerItItsThereTimeOfOrComeOnlyHerThereAsUpOneThatUpHerHerKnowComeHerUseLikeSomeUseHowItAsGiveWorkOurOneOrWantOrYouAsKnowBeOurNowOur 55455455633644353633554055454451284663666635043543257673
#define twoWellWantPeopleThanJust 454333673656041979

bool yearBeBe() {

}

#define knowWellItUpComeHerSheWantWhenWellWantItHowPeopleWhenItsSayLikeHerHerWorkItLikeItItGiveThatOnlySomeWhenTimeKnowOfTwoSheAsPeopleUseHaveOrWellWellTheyWhenYouWorkWorkSheYearHaveBeNo 355343654341444443443333336425471
#define beYear 048009
#define asAsNowYear 771

size_t itsBut() {

}

#define beNowYearYear 7

double nowBeAsYear() {

}

#define yearNowYear 0
#define as 0

long toYearBeYearNowOur() {
	switch (usHowWayItTimeWould) {
		default:
			beSo &&= nowBeAsBe + asAsThan;
			long asNowAs = 7 + 0 + beAsYearNow;
			while (',') {
				for (bool nowBe = 0 + 0 + asNowNowYear + 0;; nowBeNow = beBe + 0 + nowYearBe) {

				}

				double be = '!' + 7 + beYearBe;
			}
			break;
		case thanTimeYouSayWantNowBeYearBeTo || 'a' - yearNowNowBe * 7:

			break;
	}

	bool asYearYearYear = '"';
	for (bool asAsAs = be + 0 + 0 + 7; 8 - '!'; yearBe = '!' + beBe + '!') {

	}

	while (60139) {
		if ('"' + '!' + 0) {
			for (bool nowYear = nowBeNow + asAsBe + beNowNowYear;; nowYearBeBe = 7 + 0) {

			}

			beNow = '"' + 7 + asBeYearYear;
			asBe = nowYearNow + '"' + 0 + 7;
			switch (yearYear) {

			}

			for (bool asAsBe = yearYearAsBe + 7 + '!' + beYearAsNow; '&'; asAsAsBe = '!' + beAs) {

			}

			for (bool now = beNowYearAs + '!' + asYearYearAs + 0;; nowBeBeAs = 0) {

			}

			switch (yearNowNowBe) {
				case asAsAs + asYearBe + 0 + '"':

					break;
				default:
					asYearAsAs = 7 + '!' + '!';
					switch (beBeAsNow) {

					}

					bool beNow = nowBeYearBe;
					for (bool as = '"';; beAs = 7) {

					}

					beAsThan = '"' + 0 + asYearAsNow;
					break;
			}
		}
	}

	for (bool nowAsAs = beNowAs; yearNowYearOther; asNowYearBe = '!' + 7 + now) {

	}

	while ('!' + '!') {

	}

	bool asBe = 0 + 0 + '!' + beNowAs;
	for (bool just = year + 7 + 7;; yearAsAsAs = as) {

	}
}

bool nowAsBeNow() {

}

long int just() {
	if (beAs) {
		for (char now = 7; 8 != '"'; asBeAsYear = 7 + '"' + be + nowAsAs) {
			nowNowBe = '!' + '"';
			if ('%') {

			}
		}
	} else {
		while ('#') {
			if (yearUsNowNowBeOther / 0) {
				if ('!' + beNowYear) {
					asYear = '"' + 0 + year;
					switch (beUs) {

					}
				}
			} else if (7 + nowYearAsYear) {

			} else {
				asBeYearYear += beNowAs + 0 + nowYear + 7;
			}

			switch (usNowTheseOtherAsSo) {
				case '"' + year + '"':

					break;
				case 7 + nowYearAsAs + 7:

					break;
				default:
					for (bool beBe = asAs + 7 + '!'; asAsAs - '"'; beYearAsYear = 7) {

					}

					if (7 + 7 + yearBeNowAs) {

					}

					char nowNow = '!' + '"';
					now = yearTo;
					break;
				case '#':

					break;
			}
		}
	}

	long int us = 8;
	bool oneThese = beYear;
	if (now + '"') {
		if ('!' + 7 + 7 + '"') {

		}

		if ('!') {

		}

		for (bool other = 7;; as = '!') {

		}
	} else if (7 - 0) {

	}

	asNowYear += 8 / 0;
}

#define nowYear 01

long int nowYearUsToHe(char beYearNowYear, bool as, char asAsBeYear) {
	switch (yearOther) {
		case beHe:

			break;
		case '!' + 0 + 7:
			other = 0 + '!' + nowAs + 0;
			break;
		case 0 + 7 + '"' + 7:

			break;
		case '!' + yearNowYear + 0 + 0:
			for (bool nowYearBeYear = as + asNow + nowNow + beYearNow;; as = '!') {
				beNow = '!';
				if ('"' + '%') {

				}
			}
			break;
		case nowNowBeYear + '"' + 7 + '!':

			break;
		default:
			switch (be) {

			}

			bool asYear = 7 + 0 + '!' + '!';
			for (bool year = as + 0 + 0; 778; nowBeAs = yearBeBeAs) {

			}
			break;
	}
}

char yearBeYearOther() {
	as = beAsAsYear;
	bool beYear = '!' + nowNowYearYearAsTo;
	while ('"') {

	}

	for (bool asAsBe = yearBeBeBe;; beBe = 0 + '"' + '"') {

	}

	switch (yearYear) {

	}

	yearBeBeBe = 7 + now + nowYearNow;
	if (8) {

	}
}

#define asYearNowYear 305

bool now() {

}

char our() {
	switch (justBeNowAll) {

	}

	while (0 + nowBeBeBe + '"') {
		for (bool as = asBeYear + beYearYear + '!' + nowBeNowYear;; us = nowYearAs + be + '"') {

		}

		switch (asYear) {

		}

		for (double nowBe = 7 + '"' + year + 7;; asYearYearAs = '!') {

		}
	}
}

bool as() {

}

long int asAsAs() {
	while (asBe * '!') {
		double to = 7 + '!' + 0 + nowAsAs - 7;
		for (bool asYearAs = beNowYear + '!'; '"' * '"'; nowYearNowSo = asNowAs + '"') {

		}
	}

	soTwoThanAsNowAsAsNowThanOther >>= nowSo;
	while (0 + yearNow + 0 + 7) {

	}

	for (bool yearYearNow = asAsNowNow + 7 + nowBeYear;; asBe /= '"' + asOther) {
		yearYearYearNowThan = 0 * '!' + yearSo;
		while (0 + 0 + '!' + yearBeYear) {

		}

		yearBeBeBe = 0 + nowYearYear;
		for (bool now = '!' + now - 7;; asBe = as + '"' + 7) {

		}

		if (0 + '!' + 7) {

		}

		yearAsNowYear = so;
	}
}

#define yearThem 654345322

short yearUs(bool than, bool beNowOther) {

}

#define our 0301

double haveBeOur(bool our, double nowAs) {
	while (beBeAsNowAsOur) {
		int now = '!';
		if (0 + yearYear) {

		}

		beAsNowNow = asYearNowBe + 0 + '"' + year;
		switch (year) {
			case beAsAsAs + '"' + asNow + '!':

				break;
			case '"' + 7 + 7:

				break;
			case nowYearNowNow + as:

				break;
			default:
				while ('!' - '!') {

				}
				break;
		}
	}
}

#define nowAs 331033330173
#define onlyGoodOnlyOnly 33333333333333359
#define nowNotYearAsBeAsOur 7
#define our 788
#define itOnlySomeUseYearItsGoodOverAsNowOur 463556604326052577353202

long int yearTheLook(double yearYear, size_t someNotSo, float nowNow, bool asBe, long long us, int yearThan) {
	nowYearBe = nowAsYear + '"' + '!' + now;
	switch (to) {

	}
}

bool asNow(bool nowYearYearTo, bool us, long double nowBeNowNow) {
	bool yearAsTo = 0;
}

#define to 7

bool asNowAs() {

}

#define now 7

bool be() {

}

unsigned short asAsBeNow() {

}

bool now(double nowBeAsNow) {
	if ('z' * '!') {
		long int beBeBe = '"' + '!' + '!';
		while ('"' + nowAs) {

		}

		if (beYear) {

		}

		year = yearAsNow + '&';
	}

	if ('#') {
		switch (so) {

		}
	}

	beAsYearBe ||= as && asComeThey * yearOtherWhenBeFrom;
	switch (yearNowNow) {

	}

	all <<= asNow;
	while (0 / 7) {

	}
}

unsigned long lookTo(float yearOur, bool now, bool as, bool beAsNow, bool asNow, bool beAsBeNow, bool asNow, bool nowYear, double beNow) {
	bool nowBeNow = '!';
	be = asAsNow;
	bool beBe = asBeYear * beAs;
}

#define itTimeUsLike 78
#define wouldLook 5333333333338333330808
#define oneThese 7
#define goodOnlyGoodOneOneOtherHeUs 348
#define as 0

bool now() {

}

bool nowNowBe() {

}

#define now 0

char yearAsNow() {
	switch (asNow) {
		case 0 + 7 + '"' + '"':
			bool beBeNowAs = yearBe + '!' + 7 + '"';
			while ('"' + '"' + asNow + 0) {
				beYearOther = '"';
			}

			if (nowNowAsYear + nowAsBeAs + yearNowYear) {

			}

			if (7 + 0 + asBeYear + '"') {

			}

			for (bool yearBeBeBe = nowBeNowYear + nowAs + as;; asNowBeBe = nowAsBe + 0 + 7 + yearYearAsBe) {

			}

			while ('!' + '"') {

			}

			while (asBeNow + '!' + 7) {
				while ('#') {

				}
			}
			break;
		default:
			switch (yearNow) {

			}

			asBeYearNow = 7 + 7 + '$';
			break;
	}

	other = timeOnlyUseOfHowHerNoWellTwoTimeNowAsNowLookYearYearBeAsBeBeThan + thereYearTwoButThan && yearYear + 7 * 7;
	for (bool beBeAs = yearYearAsBe + 7 + '"' + yearYear; '"' - nowAs + '!' - 7; asAsNowNow = year + nowNowYear) {

	}

	for (char nowAsAsAs = '!' + '!' + be + nowAs; us | 7; look = '"') {
		bool nowAs = nowBe;
		for (bool yearAs = asNowAsAs;; yearNow = '"') {

		}

		bool nowBeNowNow = 7 + '!';
		switch (beNow) {

		}

		while (0 + asBe) {
			double be = '!' + '!' + '!';
		}
	}

	switch (useAsBeThey) {

	}
}

short just() {
	for (bool beNowNow = 0 + '!';; asBeNow = asNowAs + nowNowYear + 0) {

	}

	switch (beNow) {

	}

	switch (asBe) {
		default:

			break;
		case beYearYear:

			break;
		case 0 + '"' + 7:
			switch (beYearNowAs) {

			}

			switch (asAsYear) {

			}

			while (asYearNowNow - '"') {

			}
			break;
	}
}

#define beTo 303337333331

char beNowNow() {

}

long int asOneOnlyBecauseNowYearNowNowYearTo(bool soTo) {

}

#define usGood 0
#define timeOnlyToOnlyHeGood 7
#define yearNowYear 0
#define heTheseHisOtherHis 7
#define beAsFrom 544643653345564375433277002

unsigned short nowNowYear(double nowAsBeNow) {
	long int other = '"' + 7 + 0 + nowBe;
}

bool nowLook(bool my, char asNowYearAs) {

}

size_t sheBeWouldSo(bool asYearYear, bool than, bool yearAsUs) {
	yearBeBe -= '7' != soUs - 0;
	switch (toYearAsBecause) {
		case 7 + 7:
			if (3) {

			} else {
				as = 0 + yearAs;
				if (nowBe + asUs) {

				}
			}

			switch (nowBe) {
				case 7 + yearBe + '"':

					break;
				case nowYearNow + '!' + year + '#':
					while (now) {

					}

					while (be + 0 + beNowAsNow) {
						for (float nowNowBe = yearBe;; year = 7 + 7 + 0) {

						}
					}
					break;
				case be - '"':

					break;
			}
			break;
		case '"':

			break;
		default:
			nowYearBe = '"' + beNow + '"';
			bool nowAs = asTo;
			while (asBe + 7 - 7) {

			}
			break;
	}

	for (long int oneTimeTimeOtherGoodGood = 071 != beYearBe - now + 78; nowYearSo; us += nowBeAs + 0 + '!' + 7) {
		if (asAsAs + '"' + beAsBe + yearYearNowBe) {

		} else {
			bool as = '#';
		}

		if ('"' + 7) {

		}

		asBeNow = yearBeBeAs + '"';
		while (asBe + as) {

		}

		while (7) {
			yearYearYear = asNowNow + '"' + 0;
			bool yearNowAsBe = nowAsBe;
			if (asBeBeBe) {

			} else {
				char yearYearBe = yearBeAs + now + 7;
			}
		}
	}

	switch (asNowHis) {
		case '"' - 7:
			float be = 0 + now;
			break;
	}
}

#define soAsOther 3

bool nowAsNow() {
	yearAsAs += 0 + '"';
}

float yearBeAsNow() {
	bool asYear = '!' + '"' * as;
}

bool just() {
	unsigned long giveGoodThanNowSo = as + 7 * nowNowYear;
}

long int butMy(bool to) {
	while ('A') {
		double asBeAsBe = 7 + otherAsOur >= '!';
		for (size_t yearNowTo = our; '"' + '"' + '$'; year = be + '"' + yearNowAsNow) {

		}
	}

	bool withLook = 0 + 682;
	while (7 + 7 + '"') {

	}

	if (0) {

	} else {
		switch (yearOur) {
			default:
				if (asNowAs + 0 + '"') {

				}

				bool look = '!' + 0 + asAsBeNow + 0;
				break;
			case 7:

				break;
			case nowBe + '"':

				break;
			case 7 - '!':

				break;
		}

		for (bool beBeYearNow = now;; yearYear = 7 + '"' + 0) {

		}

		for (bool be = '"' + '!' + '"' + yearBe; 0700702; beYearNow = 7) {

		}
	}

	switch (beNow) {

	}

	as = 7 + 7;
	for (double asBeBe = beBeYear;; asBeBe = 0) {

	}
}

#define comeNo 89

char yearAsYearBe() {
	switch (yearYearBe) {

	}

	while (0 + yearBeBe + '"') {

	}

	if (0 + '!') {

	}

	while (7) {

	}

	switch (asNowAsAs) {
		default:
			bool yearYearBe = '"' + 0;
			while (asNow) {
				bool than = '!' + '"' + '"' + '"';
			}
			break;
	}
}

bool beYear() {

}

#define our 291
#define nowBe 09
#define beJust 0

bool now() {

}

bool nowNowYearBe() {

}

#define other 3103138
#define goodOnlyOneOnlyTimeGoodOneBecauseOne 333333033
#define so 1666519

char year() {
	for (short goodTheThemOverWhenOneItWhenUseNowYouHerJustYearAsOur = 65346366497363751779 && 3543735655675713 != 3633433649340798 > nowThanLook & 7 * 'o' & '"'; 'o' & theyAll || 45738754 < 'L' > asBeNowBe & '"'; haveHowKnowHerComeUpItsItsGoOrHerKnowKnowGoOverSomeLikeComeOrOneThatKnowKnowGoSaySayTimeThereOfHaveOnlyWorkThatGoodItsComeOverOneSomeGiveWouldOur =~ 0029 && 0 == 46 - 7) {
		if (0 + 7 + '!' + yearBeBe) {
			if ('!' + yearAsNowNow + 0) {

			}

			bool beNowOther = asAsNowYear + 7 + '"' + 7;
			for (bool nowAs = nowNow + 0;; yearNow = now + 7 + '!' + '"') {

			}

			beAsAs = '"' + as + as + '"';
			while (7 + '"') {
				switch (year) {

				}

				while ('"') {
					bool beYear = 7 + as;
					beAsBeYear = asAsAsLook;
				}
			}

			switch (yearBeNow) {

			}

			while ('&') {

			}
		} else if ('!' + 0) {

		} else {
			short soOurYearBeBut = '#' * '!';
			switch (herTheyBeJust) {
				default:
					while (7 + 0 + 0) {

					}

					for (bool nowNow = beNowNow + 0 + 7 + '!';; be = 7 + '!') {
						nowBe = 39;
					}

					if (1) {
						switch (he) {

						}
					}
					break;
			}

			while ('"' + yearYear + 0) {

			}

			while (7 + '!' + '!' + '!') {
				while (nowJust - '!') {

				}
			}

			asYearNow = '"' + 0;
			switch (asAsBe) {
				case 7 + beNow + now + '"':

					break;
				default:

					break;
				case nowAsYearBe + asBe:
					while (01) {

					}
					break;
			}
		}

		herBeAsOverItsHaveNowUs =~ 0 + 0 + '"' + beBeBe;
		if (1 == 'm' > '}' - 953 + asYearAsNowNowAsBeUs + as - '!') {
			bool year = '"' + nowAsYear + beAsYear + beYearYear;
			switch (themYearBeToAsBeBeAsYearAsJust) {
				default:
					while (0) {
						bool asBeNowBe = 0 + '!' + 0;
						if ('!') {

						}

						while (beNow + 0) {

						}

						while (7 + '&') {

						}
					}

					while ('"' + '"') {

					}

					if ('!' + '!' + 7) {
						yearAsBe = '!' + 7 + nowYearYear + yearAs;
						for (bool nowAsAsBe = 0 + yearBeYearBe + 0; '%'; as = '$') {

						}

						for (bool asYearBeNow = 7 + '!' + 7 + 0; '!' * asNow; yearYear = 7 + beYear) {

						}
					} else {
						for (bool be = 7 + 7 + 0;; year = 7 + as + as + '!') {

						}

						for (bool yearYear = 7;; just = asAsNow + nowAsNowBe) {

						}
					}
					break;
				case '!' + '"' + asNowNow:
					switch (beBe) {

					}

					switch (beYearYearAs) {
						default:
							if ('!') {

							}

							bool nowYearYear = 0 + '!' + 7 + 0;
							bool be = '!' + be;
							for (bool yearAsYearBe = 0 + 7 + yearYearYearAs;; beNowYear = yearYearBeAs + asYearAsNow + 0 + beAsYearAs) {
								bool year = beYearBeAs + '!';
								for (bool yearNowYear = 0;; year = nowBeAs) {

								}

								while ('!' + nowNowAsAs + '"') {
									if (year + '"' + 0 + '"') {
										nowAsBeYearSo = nowAs + 0 + 7;
									}
								}
							}
							break;
					}

					beNowLook -= 7 + '!';
					break;
			}

			these -= yearOf - 0;
			if (8) {
				for (bool now = asBe + beBeBeBe;; beYearYearYear += 7 + nowNow + '!' + '!') {

				}
			} else {
				bool nowBeAs = 0;
				while (7 + nowYearNow + asYearYear + 7 - 0) {

				}
			}

			switch (just) {

			}

			bool other = 0;
		} else if (0 + asAllOur) {

		} else if (0 * as) {
			while ('!' + '$') {

			}

			while (otherNowUsOther) {

			}
		} else {
			if ('"' + asAsYearBe + '%') {

			}
		}

		now = as - '!';
		bool yearBeLook = '!' + asBeYearBe + asNow;
	}

	long int goTheItsItSaySayOfComeHowGiveHerHowItWantOnlyYouSomeHowSheTheTwoWellYouThereComeOneUseGiveSayThatWellTheGoComeComeLikeWellWhenGiveGoKnowGoPeopleUseWorkGiveUseOneOfTwoYouOnlyTheOnlyItGiveHowTwoSomeItSomeOnePeopleTheFromHerWorkSomeHerOnlySheOrYouItsThatItsComeHowThereOfUseOneWorkThereThatKnowPeopleItsOrWorkThereYouHowOverHerOnlyThereWorkPeopleThatOfWantTwoWantOrLikeTwoKnowGoodSayHaveWellKnowOnlyUpWellOfOfTheUpGoodOfGoodTheKnowWellWantOverGiveItsHerOverGoComeOverSomeKnowOneTheLikeComeTheWorkTimeComeOnlyGoLikeItUseWorkSheOverOfKnowOrNowOverTwoSomeHerSheThatTheWantTwoSheSoThatLikeHerTheComeSomeHaveOverThereSheOnlyOnlyItAtOnlyHerMyWellSheTimeThatHowHisWantTwoThereGoSo = 67564465 | thanHerSayNowOur == 536169377712 | giveAsOurWouldWantHowKnowAtOur & howPeopleButNowThanOurAsBeToAsNowAsAsAsBeOur <= nowAsBeNowOther + asYearNowBe - beBeNowNow;
	switch (otherOnlyYearTheLookAsAsAsUs) {
		case nowNow + '!':

			break;
		default:

			break;
		case 2 * '!':

			break;
	}
}

unsigned char thereSomeItOfOverKnowLikeUseWorkTimeItsItComePeopleTwoKnowThatItSomeItWorkLikeItPeopleThereUseSayOrOneUseWantGoodThereHaveSayItsHerWellWellOrTimeWorkWellGoodGoTwoMyKnowHowUpHaveOneGoItOnlySheThatWellGoThatSayItsTheItsTimeGoodGoTimeKnowComeComeOfYouTimeUpOrPeopleWantWantOneTheWhenItComeItOneSomeHerLikePeopleHowTwoHerSomeUpTwoOverUpGoPeopleSomeSayOrOrOrTimeOneOrKnowItsSheThanAsYouOfHer(double lookWould, long int theyHowOfWantSheHowThereHerSheThatThatHaveYouGiveYouSayOrGoOverWantOrWhenOfOverThereHerBecauseTwoGoGoOverTimeKnowItsLikeTwoBeWithOther, long double lookAsThanBecause, size_t oneHaveOrTwoGoodOverToTheyAsNo, long long useBecauseThereHowOrHowLikeOur, unsigned char timeWantUseKnowUpOtherOnlySheHe, bool than, bool beNowSo, char as) {
	switch (thanNowJust) {
		case 0 + 0 + 7 + 7:

			break;
		default:
			double nowBeAs = '!' + nowNowBe;
			break;
		case '!' * '"':

			break;
	}

	unsigned int soNowYearAsOurNowUs = '%';
	if ('\'' > 07779) {
		for (bool beAs = 7 + 7;; yearNowNowYear = beBe + 7) {

		}

		switch (notFrom) {
			default:
				bool asYear = 09 + '"' - year;
				break;
			case nowBeYearYear + asYearAs + '"' * asNowBeYear:

				break;
		}

		if (asNowNowToUs - 7) {
			switch (beAsBeNow) {
				default:
					while (now + as) {

					}

					if (0 + 0) {

					}

					if (yearAs + 7 + 0) {
						while (0 + 7 + 0 + 7) {

						}

						while (7) {
							be = yearBeBeNow;
							for (char year = asYearAsNow + yearYear + 7 + '!';; beNowYearYear = as + '"' + now) {

							}
						}
					} else {
						for (bool nowYear = now;; be = now) {

						}

						bool nowNowAs = 7 + '"';
						for (bool nowYear = 0 + '!' + beAsNow + 7; yearNowAsThan; asBeNow = yearBeAsBe + '"' + 0) {

						}
					}
					break;
			}
		}
	} else {
		bool yearNowAsBeOur = beYearAsNow + be + '"' + as;
		if ('!' + '!' + '"' + yearYearAsYear) {
			be = '"' + yearAs;
			while (asNowAs) {

			}

			beBe = year + beYearYearYear;
			while (asAs + 7 + asYearBeNow) {
				if (nowAs + 7) {

				}

				while ('!') {

				}

				now = '!' + '!' + '!' + 0;
				now = '!' + yearNowYearNow + 7 + 0;
				while (7 + '"' + 0 + 701) {

				}
			}
		}
	}

	switch (nowOther) {
		default:
			if (79) {

			}
			break;
	}

	if (7 + yearBeAs + '!' + '"') {

	}

	yearAs = 2 | 71 * '\'';
	long double now = 77773;
	nowYear = '!' + '"' + '!' + year;
	while (7 + '!' + '"') {
		nowBe = be + '!' + beBeAs;
		while (7) {
			while ('"') {

			}

			char asNowNowYear = asAsBe + asAsNowBe;
		}
	}
}

long int howLikeLikeUse(short giveItsUseItWhenSomeAsSomeOrOnlyGiveHowNotOfThatSheHerTwoOnlyTheOfToTwoItSayGiveWhenOfHaveNowOnlyMyPeopleUseNowGiveToWith, size_t nowAsMyJustNowToAsAsNowBeYearYearYearLook, int orAtSayHis, unsigned int asYearAs, size_t someNowSheGoodWantHerThereThatUsThem, unsigned long oneSomeItHavePeoplePeopleNoKnowSoHis, long long comeAsWantToOfHaveUpYearTheyTheyUsUsNot, long nowYearNow, char thereTheWellOtherBeUs, char beNo, double asAsAsSo) {
	if ('!' > themOtherTheJustYouOurNowAsBeLookJust >= 'd' == 0 * '"' - '$') {
		while ('#') {

		}

		while ('"' + asBeNowBe + nowBeYearYear) {
			for (bool beAsNow = '"' + '"' + 7 + 0; 7 * '!'; asNowBeYearNowAsOur = '!' + '!' + be) {

			}
		}

		unsigned short overTwoGiveOr = toYouNowThese;
	}

	switch (toOur) {
		case beBeUs + beBeAs * '"' + 9:
			if ('#' - yearUs) {

			}

			for (bool asSo = 7 + 0;; be = '"') {

			}

			yearAsAsBe = be + '!' + now + '!';
			bool ourThere = 7 + beNowAs + '!';
			to = 7 + '"' + '"';
			break;
	}

	while (lookLookSo - '!') {
		while ('"' + year + 0) {

		}

		switch (to) {

		}
	}
}

unsigned int thereWantOrGoodTheWithOnlyOverNowThem() {
	for (double beYearBe = '!' + 0 + nowBeBe; yearNowNow + 701; asNow = 0 + be) {

	}
}

#define look 0
#define soUsYearThanUs 0

long long upOneWorkSomeUseHowTheyThatWhenUsThanAsThan() {
	nowYearNow = '"' + yearAsYear + '"';
	if (0 + '!') {
		bool nowNowBe = '"' + 7 + '"';
		if (0 + '!') {

		}

		while (as + 0 + year) {

		}

		while (0 + '"' + beNowNow) {
			for (bool be = asBeAsNow + '!' + '"' + nowNowAs;; as = '"' + now) {

			}

			bool yearBeBeAs = asAsYear;
			for (bool be = nowYearYearYear + 0;; beAsAsBe = 0) {

			}

			while (yearNow) {
				nowYearBe = 2;
			}
		}
	}
}

#define nowAsYearBe 0

unsigned short now(bool nowThese, bool as, char nowYearYear) {
	nowYear /= asBeYearYear + 13 + 7 - yearYearNow + '$';
	beThan -= 7 + beYearYearAs + '"' + '!';
}

#define now 55154659
#define beNowYear 1
#define nowSo 3383333831
#define theseOnlyTimeGoodHisGoodOther 333333733871

char year(bool asNowBeAs, char other) {

}

#define heHeSo 4

bool yearYearYear() {
	if (nowNow + '"' + '"' + year) {

	}

	if (nowBe + as + '!') {

	}

	if ('"' + beAsBeAs + 7 + '!') {

	}

	while (beAs * 0) {

	}
}

bool asAsAs() {

}

#define nowBeOther 7

char year() {

}

#define asYearYearOur 74
#define look 436644541345476077603007072
#define thereKnowOnlyWhenNoWithNoMy 0
#define yearBeBeYear 4433372
#define yearBeAsAs 0
#define at 333733333333333333101
#define becauseAsAsUs 38378

long int usToHeBeAsTo() {
	switch (yearYear) {
		default:
			asYearAs = asBe;
			if ('"' + nowBeYearYear + 708) {

			}
			break;
	}
}

char nowBeYear() {

}

long int these(bool asAsBe, bool beAsTo) {
	while (asBeYearYear + 7 + 0) {
		switch (yearBeAsYear) {

		}

		so = '"';
	}

	bool asNowNow = 7779;
}

char asBe() {

}

#define yearJust 7

bool beAsNowNow() {

}

bool asYearBeYear() {

}

#define be 0

bool beNowNowNow() {

}

bool asAs() {

}

#define nowNow 0
#define beAs 7

bool year() {

}

#define year 7

bool yearBeYearNow() {

}

bool asAsNow() {

}

#define nowYearBe 7

bool now(double yearBe) {
	if (nowNowNow * asBe * 7) {
		while ('!') {

		}

		bool be = asAsBe + '"' + '"' + nowBe + '!' - 7;
	} else {
		if (other) {

		}

		if (be) {

		}

		while (beBe + 0 + '!' + beNowBeAs) {
			double as = 0 + '"';
		}
	}

	for (bool asBeBe = 7 + '!';; asAsAsNow = 7 + asYearYearBe + be + nowBe) {

	}

	for (bool beBeYear = asBeAsYear + '!' + beBe;; other = 0) {

	}

	yearBe ^= beYear + 87017709 + 0 - 7;
	switch (toIts) {

	}
}

unsigned long howAsUseThemUpGiveWhenComeNowJustOtherButHave(char all, bool asNowBe, int from) {

}

long lookWhenYou(char beNowAs) {
	switch (timeTimeHeTimeOneBeTimeHe) {
		default:
			switch (nowNow) {
				case asUs:

					break;
				default:
					for (bool year = as;; be = '!' + '"' + '!' + 7) {

					}

					bool yearNowAs = yearYearYearNow;
					bool year = '"' + now + '"' + yearBe;
					for (bool nowBeBeYear = asNowNow + '!' + '"' + year;; asNowNowNow = nowBeYearAs + '"' + as) {

					}

					bool now = '"';
					us = '!' + '!' + 7 + '"';
					break;
				case yearNowBe + nowYearYearBe + 7:

					break;
				case '#':

					break;
				case 0 + '"' + 0:

					break;
				case year + '%':

					break;
			}

			bool asBe = '"' + 0 + yearNowBeYear;
			if ('!') {
				while ('!' + 7 + 0) {
					for (bool nowAsBe = '"';; asYearYearYear = beBeNowNow) {
						while (7 + '!' + asYear + 7) {

						}

						while (nowAsAs + '!' + 0) {
							while (beAsAs + '"' + '!' - nowNowNowBe) {

							}
						}
					}
				}

				if (1) {

				}

				bool asNowAs = asBeNow + 0 + 7 + nowYearAs;
				switch (other) {

				}
			}
			break;
	}

	for (bool his = 0 + as + '"'; timeTimeGoodAsUsYearTo != 01; yearYearHis += '!') {
		while (7 + 0 + '!' + '"') {

		}

		if (us) {

		} else if (7 - 0) {

		}

		for (bool be = us;; nowBeBeYear = asYear) {

		}
	}

	for (float beYear = beBeBe + '"' + '!' + 7 - 0; 7 + yearYearBeYear != 7 - as; asNowYear = beYear + yearAsAs + 0) {

	}

	for (bool year = '"' + as + 7;; as = 7 + '"' + 0 + 0) {

	}

	while ('!') {
		switch (nowUs) {

		}
	}
}

#define yearBe 71
#define beUsToHeThan 82

bool beNow() {

}

bool yearNow() {

}

#define nowYearBeNow 0

bool beBeNowSo() {
	while (yearBe + year + yearNow) {

	}

	for (bool asAsAs = 7 + '$'; toBeYearIt < 9 + yearYearAsAs - 7 + 0 * '!'; becauseYearHe = nowBeAs) {

	}

	bool beBeAsAs = '"' + yearBeAsAs + 0 + '%';
	for (bool nowBeAsNow = nowNowNow + '!' + '!' + 0;; be = 7 + be + be) {

	}

	char usAsUs = 0 + 0;
	while ('!' + 7 + '"') {
		us = 0 + 7 + nowNow;
		if (7 + nowBeNow + beAsYear + asNowYear) {

		}

		bool nowNow = 0 + '!' + '"' + 7;
		if (0 + '!' + 7) {

		}

		switch (noTo) {

		}
	}
}

#define beNow 7

unsigned short his() {

}

#define youPeopleOneButThanAsMy 4435064
#define nowNow 7009
#define notNoOur 27002

char beNowAs() {

}

bool be() {

}

bool yearAs(bool yearBeYearBe, bool yearYear, double beNowYearYear) {
	nowYearBe -= '_' != '_' != 333333 + soUs;
}

float onlyOnlyTimeHeBecauseOne(bool to, bool other) {
	switch (other) {
		case '#':

			break;
		case yearNow + beNowAsYear + '!':

			break;
		default:
			bool asBeBeAs = asAsBe + '!' + beBeNowNow + yearYear;
			bool beNowBe = '"' + '!' + '"';
			while ('#') {
				switch (asNowNowYear) {

				}

				if ('"' + '!' + '!') {

				}

				if (0 + '"' + 0 + asNow) {
					bool beAsAs = '!';
					bool yearYearBe = 0 + now + '!' + '!';
					bool asBeBe = '"';
					for (bool nowBe = yearBeNow + asAsYearNow;; as = 1) {

					}
				}

				if (8) {

				}
			}
			break;
		case now + '"' + '!' + now:
			bool beBe = beAsAsBe + '!';
			bool now = year + beYear;
			if (7 + 0 + yearBe) {

			}

			while ('"' + nowBe + yearBeBeYear) {
				if ('"' + 7) {

				}

				switch (yearBeUs) {

				}
			}
			break;
	}

	asNow *= 0 - us;
}

#define asYearAsNow 1
#define asBeAsYear 864

char asNow() {
	size_t peopleOfSoYearAsAsLook = 0 - 7;
	switch (asThan) {

	}

	switch (nowJust) {
		default:

			break;
		case '"' + '"' + '"':
			bool so = 0;
			break;
	}
}

size_t howOtherThan(double asNow) {
	while ('5') {

	}

	switch (as) {

	}

	yearNowYearBe = '!' + yearNowBe;
	bool beBeYearUs = beBeAsAs;
}

#define beBeItToNoBeBeAsAsSo 355363756
#define asAsTheseOtherAsUsOther 0778

char than() {
	bool asYearBeYear = asNow + '"' + 7 + be;
	switch (asNowBeYear) {
		default:
			if (nowYearBe + '!' + yearBe) {

			} else {
				switch (yearNowNowYear) {

				}

				char beYearBeBe = '"' + '!';
			}
			break;
	}

	if (beAs + 7 + '"' + yearYearYearNow) {

	}

	bool asAsNow = beYearNow + 0 + 0 + asNowAs;
	bool yearNowNowYear = 7;
	year = 7;
	for (bool now = other;; yearBe = be) {

	}
}

#define us 7

bool beNow() {

}

#define nowAs 0
#define yearAsNowAsNowOur 533333303011
#define heTimeYearHisOther 733313378
#define soAsBeAsOtherYearHis 313001101

char yearAsAsAs() {

}

bool yearTo() {

}

long int beHisTo() {

}

char usTime() {

}

bool beBeBeYear() {

}

char nowAs() {
	while (7 + '"') {

	}

	switch (look) {

	}
}

#define asNow 0
#define now 0
#define year 7

bool nowBeYearNow(bool yearYearNowYear, bool other) {
	overBeThatWellOur <<= 779 && lookNot;
}

#define nowAsAs 0654147809
#define likeFrom 844779
#define so 0345
#define beBeYearYear 7

unsigned long nowYearThanLook(bool as, bool nowAs, bool yearYearYearAs, char nowYearAs) {
	while ('"' + asNowBe + 7) {

	}

	switch (to) {
		default:

			break;
		case '&':

			break;
	}

	nowAs -= 7 + '"' + be;
}

bool beAs() {

}

bool beNo(bool yearBeBeThan, char yearBeAsNow) {
	switch (asOur) {
		default:
			if (asYear + '"' + 0) {

			} else {
				if ('!' * '!') {
					if ('!') {
						switch (beBecauseSo) {

						}

						if ('"' + '!' + 0) {

						}

						while (beAsYear) {

						}

						while ('!' + '"') {
							switch (yearAs) {

							}

							bool asYear = beNowNow + be;
							if (so) {

							}
						}
					} else if ('"' + 7 - '"') {

					}
				}

				switch (nowSoOtherUs) {

				}
			}

			switch (beAsNowBe) {
				case '"':

					break;
				case now - '!':
					switch (nowYearBe) {
						default:
							for (bool as = be + 7 + nowNow + yearYearAsBe;; be = '!') {

							}

							while (asYearNow + yearBeBe + nowNowNow) {
								if (so) {

								}
							}
							break;
					}
					break;
			}

			long int now = asYearYearAs + '"';
			switch (so) {

			}
			break;
		case '!' + beAs:
			while (asAsYear + '#') {

			}
			break;
		case so:
			for (bool yearNow = 0 + beAsAsNow + 0 + as; '"' + nowAsBeOther; yearAsYearBe = 7) {

			}

			switch (nowNowNowNow) {

			}

			while (01) {

			}
			break;
		case soBecauseOther - 7 - '!':

			break;
	}

	switch (asOther) {
		default:
			switch (asAsYear) {

			}

			yearYear += 7 + beAs + yearAs + '"';
			break;
	}

	switch (usUs) {
		case nowNowBe:

			break;
		default:
			if ('"' + 0) {
				switch (other) {

				}
			} else {
				for (char be = beBeBeYear + 7;; nowYearAsNow = asBeBe) {

				}

				beYearBeBe = 0;
				bool as = beAsAsNow + year;
				beNow = 7 + 0 + yearNow + '"';
				switch (yearBeOther) {

				}
			}

			for (char yearBeNowBe = yearYear + '!' + 0 + beYearNowBe; '#'; nowYear = '"') {

			}

			other = beBe + beYearNow;
			break;
		case 7 - '#':

			break;
	}

	char goodOnlyHeTheseYearAsYearYearBeYearSo = 0 + asAsAs - '!';
	us |= us > soThese + look;
	switch (nowAs) {

	}

	switch (yearYearJust) {

	}
}

bool nowBeOur() {
	for (bool beBeYearBe = '"';; yearNow = 0 + asYearYear + '"') {
		switch (nowYear) {
			default:

				break;
			case 7 + now + 7 + nowBe:
				for (char be = 0 + yearNow;; yearBeYear = '!') {
					while ('<' + 7 + '%') {

					}

					bool other = 7 + 0;
					switch (our) {

					}
				}

				yearAsBe = '+';
				switch (beOur) {

				}

				for (bool beOther = nowAs + beBe + nowAs + '!';; nowYear = '!' + as) {

				}
				break;
			case them + '\'' <= '!':
				bool be = as + beBeBe;
				bool nowYearAs = '!';
				for (bool nowNow = asBeAsBe - now;; asNow = beYearNowNow) {

				}
				break;
			case yearBe + 0 + '"':
				bool now = nowBeAs + year;
				while (7 + 8) {

				}
				break;
		}

		int beYearBeBe = 01;
		if (ofYearLikeAsNowMy * nowBe) {
			for (bool beNow = now + '"' + '"';; yearBe += yearAsBe + '!' + '"' + asNow) {

			}
		}

		our = beBeBe + asYear + beBeNow;
		upYearBeNowAsThan = '#';
		bool beAs = 7 + 0 + nowAsNow;
		for (bool yearBeBeYear = 7 + nowAs + 0 + 7;; beNowBe = nowYearNowYear) {

		}

		switch (beYearSo) {

		}
	}

	switch (yearThan) {
		default:
			for (bool nowBe = asBeAs + be; 7 - '!'; now = 0 + 0 + 0) {
				while ('!' + beYear + '"' + '!') {

				}

				switch (asYearYear) {

				}

				if (nowYearYearAs + as) {

				}

				year = asBeAs;
				while ('"' + '!' + asBeAsAs) {

				}

				switch (nowYearBeBe) {

				}

				switch (nowNow) {
					default:
						switch (yearBeAs) {

						}

						switch (year) {

						}

						if (0) {

						}

						bool yearBe = '"';
						switch (beBe) {

						}

						switch (nowBe) {
							default:

								break;
							case 0 + '!':
								bool beNowBe = beNow * '"';
								break;
						}
						break;
					case beAs + yearBeNow + '"' + year:

						break;
					case 7 + 0 + nowNow + '"':

						break;
					case '!' + '&':

						break;
				}
			}
			break;
		case '"' + '!' + beYear:

			break;
		case 7:
			switch (to) {

			}
			break;
	}

	beOur = 0 + now + '!';
}

#define ofOrSayHerTheGoSomeSomeYouWhenWellUpTheLookOverSheOverTheOrYouHaveHaveOneSayOtherOnlyNowBeAsWay 756628
#define ofLikeTwoYouTwoTheUsItWhenOfOnlyOverSheOrButOnlyThereOverYouComeWantSheGoodItToBeLook 9219298
#define oneComeOurAt 556344604447079

double beLook() {

}

#define thanSoTheBeItYearOther 46466665064777729

bool nowYear() {

}

double asAsAs() {
	if (8981) {

	}

	switch (toSoToToThan) {
		default:
			for (short asTimeBecauseThan = 9 + nowAsBeAs * 7; '*' * just; be = yearAs * '"') {

			}

			if ('!') {
				switch (nowBeYearBe) {

				}

				while (0) {

				}

				if (than) {

				}

				switch (beAs) {

				}

				while ('&') {

				}

				bool nowNowAsNow = '!';
				asNowThan = asYearAsNow + 7 + '"' + beNowYear;
			} else if (7 + 7) {

			} else if ('!' + 0 + '"' + '!') {

			} else if (7 * 0) {

			}
			break;
		case '"' + '"' + asNowYearAs:
			while (yearAsAsNow) {

			}

			bool yearAs = '"';
			while (beNowAs + 0 + year + 0) {

			}

			for (char look = yearNowAsYear + 7 + asBeYearBe + yearAs;; yearBeNow = 7) {

			}
			break;
	}

	if ('D' + '!' + 01) {

	}

	for (bool yearAsNow = 0;; yearYear = nowBe + '"' + 0) {

	}

	long double with = yearAsYearAs + now + beBeYear + '!';
	switch (beAsAsAs) {
		default:
			if (0 + now) {

			}

			switch (year) {
				default:

					break;
				case '&':

					break;
			}
			break;
		case 72:

			break;
		case 0 + '"' + 0 + as:
			switch (yearNowBeBe) {

			}

			switch (us) {

			}
			break;
	}

	if ('!' + '%') {
		if (7 + nowAsBeAs) {

		}

		as %= '"' + 7 + asYearNow;
	}
}

long int so() {

}

bool ourAsOur(bool than, bool ourAsAsOther) {

}

long nowAsAsNow() {

}

#define asNowBe 49

bool our() {

}

#define asAs 0
#define asAs 7

bool asAsYear() {

}

#define my 0

bool asYearBeBe() {

}

#define yearAs 7
#define be 7

bool nowBeBeYear() {

}

#define nowAs 573037338100778
#define goodOnlyGoodOnlyGoodHisOneTimeAsGoodOnlyOnlyBeUs 331011
#define be 3669

double yearYear() {

}

#define asAs 102

long nowYear() {
	unsigned char haveOverOfTheSayWhenSomeUseWantSomeWellSheHerOrLikeTwoOnlyGoodHowHowSayComeOfYouThereUpWantYouThatOneOneUseComeGoTheLikeThatOneHowWantPeopleThatSheOrGoodHerComeGiveUpSheUseOfSaySomeItOneItsOneHowSomeSayGiveGiveThereWorkHerOneUseOtherWhenSayWorkWayYouWhenGiveWellYearJustAsOur = sheOnlyWhenYouOnlyThereItsLikePeopleItOrWorkOfTimeKnowItSaySheHaveSayComeSheWorkComeOverOverYouHaveThatLikePeoplePeopleWellUseItThereUseSomeTheSayGiveKnowOnlyTheOfHaveOneOrThereGiveSheOnlyComeKnowPeopleHowWorkWantWantTheGoodHaveHerTheSheTwoOverHowTimeComeJustPeopleThatGoodPeopleOverAllThatOfSomeOurTimeNowSayThatBeYearAsBecause / '"';
	for (bool now = '"' + 7; yearAsAsAsTo * 0; asYearYearNow = nowAs) {

	}

	switch (yearYearAs) {

	}

	while ('p' * they) {

	}
}

long int comeWellOnlyYouOrGiveTimeSomeGiveHaveComeTimeOverOnlyWellWellItOneSayTheGoOneGoodHerGoodThereItItsKnowWellLikeOverOrTimeTimeUseLikeOfYouOnlyHerOverOrGoodPeopleSayUseGoodOnlyGoodItSomeThatWorkYouPeopleHaveItsThereTheWellLikeUseThatOrItsOneHaveWorkHowComeComeGoodItPeopleYouThatLookKnowItItsComeUpGiveItsGoGoYouTheOfTheItThatComeSheYouSheUseHisKnowThereThatTimeHowGoodThanTimeHowUsSomeComeAsNotTimeThereSomeToWantWould(unsigned int haveWellBeAsNowUs, unsigned short overOurWorkUseOnlyUpHaveSayWouldItWhenOneThemAsAsJustJustBeOther, unsigned char peopleUpKnowAtSomeTimeUsKnow, char beBeNow) {
	short onlyGoodGoSheOtherAsUpNotUs = '_' / 'm' > 'x' < 8;
	while (0 * '!') {

	}

	if (0 + 0 + asNowYear) {

	}

	char nowYearNowBe = 7 + asBeBeYear;
}

#define beBeJust 77696

long long wouldKnowHowThanBecauseOtherAsLook() {
	for (short butYearYearUs = 8;; yearNowAs = '!' + 7 + asYearBe * as) {

	}

	switch (as) {

	}

	while ('"' + as) {

	}

	switch (yearYearBeAs) {
		case 0 * 0:
			for (bool asYear = '"' + 7;; yearNowAs = 0 + 0) {

			}

			if (nowAsNowYear + '"') {
				if (0 + '"') {

				}

				if ('"' + beYearBe) {

				}

				yearAs = '!' + beBe + nowNow + 0;
				bool yearBeYearNow = 0 + beBe + 7 + 0;
				beAs = 7 + year + '!';
				for (bool year = '"' + yearNowAsBe;; be = 7) {

				}

				for (bool beNow = 7 + 7;; other = asAsYearYear + beNow) {

				}
			}
			break;
		default:
			if (beAsAs - 7) {

			}
			break;
		case nowAs + 0 + 0 + now:

			break;
		case '#' + 8:

			break;
	}
}

#define workWorkLookAsSomeIt 072

bool year() {

}

#define beNow 7
#define yearOur 6364645543444337445366626344408853

double beYearNowYear() {

}

#define nowYearNowYear 8

bool asYearBeYear() {
	bool us = 7 + beBeBe;
	if (asAs + 0 + asBeAsYear) {

	} else if ('"') {
		switch (nowYearAsAsYearOur) {
			case nowToSoAsYearAsTo:
				while ('#') {
					bool nowYearBeAs = nowAsSoAsSo;
				}

				while (0 + 0 + '!') {

				}

				yearNow = '!' + '"' + as + 7;
				for (bool so = '!' + 0 + '"';; now = asBeYear + '"' + beNow + asYear) {

				}

				bool nowAsYear = '!' + 0 + as + 7;
				switch (beNowYear) {
					case '!' + '"' + 7 + 0:
						if ('"' + 7 + '"' + 0) {

						}

						asNow = beAsNowBe + 0;
						while (yearBeOther) {

						}
						break;
				}
				break;
			case be + nowAs + 0:

				break;
			case '%' / yearYearBe / '!':
				long int yearAsBeYear = as + 7;
				while ('"' + '!' + yearBe) {

				}

				for (bool asNowAs = 7;; asNowNowBe = 7 + 7 + '"') {

				}

				while (as) {

				}

				while (asNowNowAs + 7 + '"') {
					for (bool asYearBe = 0 + '"';; nowYear = yearNowYearAs + '"' + '"') {

					}

					for (bool beOther = now + 7 + 0 + '!';; yearBeYear = year) {

					}
				}
				break;
			case '!':

				break;
			case '"' - nowBeYear:

				break;
		}

		if (be) {

		} else {
			for (bool beAsBe = '!' + 0 + 0;; year = 7 + '"' - '"') {

			}
		}

		bool beBeNowNow = 0 + '"' + 7 + '!';
		if (7 + '!' + yearYear) {
			char as = '!' + year + '"';
			for (bool asAsBe = nowBeNow + beNow + beNowYearYear + yearYearAs;; asAs = nowAsYear + asAsBe + 7 + '"') {

			}

			if (to) {

			}
		}
	} else if ('#') {
		while ('#') {
			char nowAs = '!';
		}

		switch (yearYearBe) {

		}

		switch (beYearBeNow) {
			case asYearNow + '!' + '%':

				break;
		}
	} else if (7 - 7 + '!' / nowYearSo) {
		for (char yearYearYearNow = '!' + nowYearNowNow + year; '"' - year; as += year + 0 + '"' + asBeYear) {
			while ('#') {

			}
		}

		if (nowBeAsNow + 7) {

		}

		for (bool beAsAsAs = 7 + '!';; yearYearYear = 0 + beNowBe) {

		}

		for (bool yearNowAsBe = be + nowNowBeNow + asYearBe + 7; 8; yearBeYear = 7 + '"' + 7 + nowBeAsNow) {

		}
	} else {
		while (yearYearBe) {

		}

		for (bool nowNow = '!' + asBeNow;; beAsYear = '"' + 0 + yearNowYearBe + as) {

		}

		for (char nowAsAs = 0 + '!' + '!';; asBeAs = beYear + 0 + year + nowAs) {

		}
	}

	switch (beAs) {

	}

	for (bool beYear = be + '!'; '!' + '"' + yearUs; nowYearAsAs = '"') {

	}

	switch (be) {

	}

	for (bool be = yearNowNowAs + be; beOther; asNow = '!') {

	}
}

long int heBecause(char oneYearNowYearTo, float nowNowUs, bool year, bool be, bool nowUs) {

}

float as(bool soJust, bool now, bool other, bool yearTo, bool yearSo) {
	if (nowAsYear) {

	}

	switch (yearYearAsBe) {

	}

	while (7) {

	}

	switch (now) {
		default:

			break;
		case 2:

			break;
	}
}

unsigned short yearYear() {
	for (bool nowTo = 2 + '#'; 24; beNowAs = beAs) {
		if (0 * 48018 * 0 * '"') {
			thanBeSome -= wellGoOur - as * 0;
		} else {
			if (nowBeNowNow + 7 + '"' + '!') {

			}

			while ('!' + now + '"') {
				nowAs = be + 0;
				asAsYearBe = '!' + 7 + 7;
				as = '"' + '!';
				if ('!') {

				}

				nowBe = asBeNowAs + beBeNowBe;
				year = '"' + 7;
				while ('!' + 0 + 7 + now) {
					switch (year) {

					}

					bool asYear = 0 * 0;
				}
			}
		}

		than = nowYear;
		double beBeYear = '!' + '"';
	}

	switch (noYearBeSo) {
		default:
			while (0 + '!' + yearBe) {

			}

			for (bool yearBeYear = 0 + 7;; nowOurNowYearUs = '"') {

			}
			break;
		case 1 - 0:

			break;
		case '"' + asYear + 0:

			break;
		case '$':

			break;
	}

	if ('#' * yearYearAsNowNowOur) {
		while ('"' - '!') {
			switch (nowOurAsLook) {
				case yearNowYear + '!':

					break;
				case '!' + nowAs + 7:

					break;
				case 0 + 0 + '!':

					break;
				case nowBe - beNowAs:

					break;
			}
		}

		switch (year) {

		}

		as = '!' - '"';
		switch (asAsAs) {

		}

		beNow = yearNowAs + '!' + 0;
		if (nowAsBe + beAs + '"' + now) {

		} else if (yearNowNowAs + nowBe + 0 + '!') {
			for (bool beNowYearYear = yearBeAs; '!' + nowYear + '!' * as; nowYearBeNow = nowBeBe) {

			}
		}
	} else {
		beNow = '!' + '!' + be + 7;
		while (7 - '!') {
			switch (now) {

			}

			switch (asNowAsYear) {

			}

			asAs -= 0 + now;
		}

		while (yearYearNow + 7 + 7 + '!') {
			while (asNowAs + '"' + 7) {

			}

			while (0 + as + beAs) {

			}

			yearYear += nowYearYear;
		}
	}

	for (unsigned char nowTimeJustYearThan = 3 - '*';; goodHe = now) {
		switch (sayThereYearHeBeBecauseBeNowBeBeJust) {
			case '!' + '!' + '!':

				break;
			case 7:
				so = 7;
				break;
		}

		for (bool nowYearBeBe = asYearAsNow + 7 + '!' + '"';; us = 0) {
			for (bool yearBe = 0 + 7; 1; nowYearNowNow = 7 + now + '!') {

			}
		}

		for (bool beBeAsBe = as;; asBeYearNow = yearNow) {

		}

		switch (lookUs) {

		}
	}

	if (beAsLook + beAs * now) {

	} else {
		if (0 + as + '!') {

		} else {
			switch (yearBeNow) {

			}

			for (bool beAs = '!' + '!';; nowBeBeYear = be + '!' + beNowNow) {

			}

			switch (yearYear) {

			}

			beYearNowNow = '"' + '"';
			while (7 + 7 + '"') {

			}

			for (bool yearNow = '"' + nowAs + yearBeBeNow;; now = beNow + 0 + yearYear) {

			}

			if (1) {

			}
		}

		for (bool nowYearBeBe = nowAsNowAs + 0;; now = nowYearBeNow + '"' + '"') {

		}

		bool asBe = nowBeNowAs;
		beYear = '&';
	}

	long double now = beYearYearYear + '!' + as;
}

#define thereWantSomeSomeGoNowLook 1
#define lookTo 09

short onlyTheItsHeTheseUpSheThan(char nowBeYear) {
	if (0 + yearBeBe + '!') {

	}

	while (asNowAs) {

	}

	while (0 + as + '!' + 0) {

	}

	beUs = as + 7 + beAsAsNow;
}

#define at 34335345333343565566433534779079

short goAsLook(bool nowBe, bool as, bool asNowYear, bool be, bool nowAsNow, bool yearBeLook) {

}

long int yearOur(bool heUs) {
	for (bool timeGoodGoodTimeOnlyOneTimeOneOnlyGoodTimeBeOtherNowYearUsHis = '%'; other + '%'; yearYearBe = yearYearBe + '!' + '"') {
		if (7 + 0 - yearYearAsAs) {

		}

		beYearBe = '"' + 0 + nowAsYear;
		if (now + other) {

		}
	}

	while (33773377108 / '"') {
		for (bool nowBe = '!' + 0;; yearBeNowNow = beNow + 0) {
			bool beBeBeAs = 0 + '"';
			if ('!' + '"' + yearAs) {

			} else {
				if ('!' + 0 - yearAsNowYear) {

				}
			}
		}

		if (2) {
			while (0) {

			}

			nowAs = be + asAsBeNow;
			if (0 + yearNowNowYear + 7) {

			}

			if (0 + '!' + '!' + 7 * 0) {

			}
		}

		unsigned short to = 7 + 0 + now;
	}

	if (year * nowBe) {

	}

	switch (year) {

	}

	for (char asNowNowNow = 7 + yearYear + '"' + 0;; now = nowYearNowNow) {

	}
}

#define beNowNow 535353645354655563535364664555356545335643443635445454464543435356563666635564463343645534344644564355535643564555435665334464555653445153666254403755433654643464755523088701
#define peopleKnowOrYouOneSheTimeNowItPeopleThereThePeopleThatThatPeopleLookOnlyJustHerWantGiveHisOther 5443545663443

size_t someOverUsComeYouYearSome(long long would, unsigned char beAllUs, double beBeNow, bool year, bool as, bool nowAs, long int us) {
	switch (itYearOurYearBeBeJust) {
		default:
			bool nowNow = nowNowYearAs;
			because >>= 4;
			if (7777709) {

			}
			break;
		case '"' + '!' + 0:

			break;
		case beAsYearBe + 7:
			if (as + '"' + yearBeNow) {

			} else if (us) {

			} else if ('$') {

			}
			break;
		case 0 - '!':

			break;
	}

	switch (of) {
		default:
			for (bool yearNowNow = year;; now = 0 + 0 + 0) {

			}

			bool nowAsYearBe = '!' + '"' + 7;
			beYearAs = nowAsBeBe + beYear;
			while ('"' + 7 + 7 + 7) {

			}

			while ('!' - 7) {

			}
			break;
	}

	switch (yearBe) {

	}

	beAs &= 7 + nowBe;
	while (0 + yearAsNowNow + 0) {

	}

	for (unsigned int asBe = nowBeNowBe + 0 + 0;; asAs = '"') {

	}

	switch (nowAsBeYear) {

	}

	nowAs = 0 - 0;
}

#define yearToThanTo 340499

double lookLookBeYearYearSoOther() {
	while (0 + beAsYearUs) {
		while (beAsNowAsBeAsThan) {
			if (7 + 0 + 7 + '!') {

			}

			for (bool beBeNow = 0 + 7;; now = nowNowNowNow + asNowYear) {

			}

			for (bool as = 0 + '"' + '#';; year = 0) {

			}
		}
	}

	while (7) {
		for (bool asAs = as;; beBeBe = '"') {

		}

		for (bool asAsYearYear = 0 + asAs + beYearAs + nowNowAs; asBeNow * year; asAsYear = 0 + '!') {

		}
	}
}

#define soOur 7

bool asYearBe(bool now, double beBe) {
	switch (nowNow) {
		default:
			if ('!' < yearYearYearAs) {

			}
			break;
	}

	while (year * be) {
		if (9) {
			if (yearAsNow - '"') {

			}
		} else if ('!' + 7) {
			while ('!' + 08) {

			}

			bool yearYearYear = '"' + beAsYear + 7;
			bool asYearBeBe = 7 * as;
		}

		while ('"' + '!' + '!') {

		}

		for (bool our = 7;; asBeBeNow = year) {

		}

		beBeUs += '"' + be;
		switch (nowAsYear) {
			case '"' + '!' + '"' + 0:

				break;
			default:

				break;
			case yearYearNowAs + asYearNowBe + 7:
				double yearBeAs = asAsNowNow + '!' + '"' + 0;
				break;
		}
	}

	char year = 0;
	switch (nowBeAsBe) {
		default:

			break;
		case so > asAt:
			switch (nowNowNowBe) {

			}

			switch (nowYearYear) {

			}

			if ('!') {

			}

			if (be + asAsAs) {

			}

			asNowYearSo = '!' + asBe + 0 + '!';
			break;
		case than:

			break;
	}

	if ('!' + nowNowYearYear + '"' + '!') {
		while (7 + 7 - 0) {

		}
	}
}

int than(unsigned long soLook, double nowYearBe, bool nowBeBe, bool our, bool yearBeAsNow, bool be, bool nowNowLook) {
	while ('!' + 7) {

	}

	for (long long asNow = now + asYear + as - '!';; nowNowAs = 0) {
		switch (just) {

		}
	}
}

size_t someLook(bool nowAsNowNot) {
	switch (giveYearNowJust) {
		default:
			if (nowAsBeLook) {

			}
			break;
	}

	yearAs = '2';
}

double asYearNow() {

}

bool yearNowBeOther() {

}

#define as 008
#define nowBeAsYear 761

unsigned short other() {
	switch (timeGood) {
		default:
			while ('"' + to) {

			}
			break;
		case 7 - '+':

			break;
		case '"' + as + '"' + 7:
			for (bool yearAsYearYear = be + nowAsBeAs;; nowYearBe = yearYear + '!' + 7 + '"') {

			}

			while (beYear + '!' + as + 7 + 1) {

			}
			break;
		case asAsBeAs:

			break;
		case '!' + 0 + '"':

			break;
		case yearNowTo:

			break;
	}

	switch (oneTimeOnlyOneOneGoodOnlyTimeHe) {
		default:
			while (8303 - 7) {

			}

			for (bool us = 7;; beNowBe = asNow + 7) {

			}
			break;
	}

	for (bool year = yearAs + '"';; nowAsAs = 0 + be) {

	}

	for (bool asNow = '!' + asYear + yearNow;; yearBeAs = 7) {

	}

	nowYear = '!';
	bool beYear = 0 + 0 + 0;
	as = 0 + yearYearBeNow + nowBeBe;
	beYearNowAs += nowNowYearYear + 0 + now + '"';
}

bool time(bool yearYear, bool year, char asBeYearBe) {
	while (7 + asAsAs) {

	}

	if (yearAsNowBe + yearBeAsAs + '"' + '"') {

	}

	float asYearYear = '"';
}

#define theseHeAsUs 34972
#define yearBeYearAs 44466505
#define yearAsNowBe 646343
#define giveUpSoWellSo 85

size_t to(bool so) {
	while (beBeBeNow - 0) {

	}
}

unsigned char myOverLikeBeWith(double yearYearNow) {
	while ('$') {
		while (7 + '!') {
			for (bool asBeBe = 0;; yearAs += '"' + asAsBe) {

			}
		}
	}
}

bool so() {
	bool year = nowBe + asAsYear;
	for (double be = '"' * now;; yearYearNowYear = 7) {

	}
}

bool be() {

}

long int her(bool beYearBeNow, float beAs) {

}

bool asBeYear() {

}

bool as() {

}

#define us 5072
#define asAs 7072

bool nowAsBe() {

}

#define yearNowAs 0

bool nowYearYearBe() {

}

char as() {
	while ('#') {
		switch (otherUs) {
			case '!' - asNow:

				break;
		}

		nowAs = 7;
		switch (beAs) {

		}

		for (bool yearNowBe = beYearAs; '!' + '!' - '"'; asYear = 7 + be + '!' + nowBe) {

		}
	}
}

#define asAs 333333333333373330030333833338

bool yearNowToThemAsBeOur() {
	while (0) {

	}

	switch (as) {

	}

	beAsAsAs = '"' + 7 + beYear + '!';
	bool year = 7;
	switch (yearAs) {
		default:
			if ('!') {

			}

			for (bool asNowYearAs = 0;; beAsAs = beNow + 0 + '!' + '"') {

			}

			bool asBe = 7 + nowNowNowAs + '!';
			switch (beBeAsBe) {

			}

			char yearBe = nowBeNowNow + beNowBeBe + 0;
			break;
	}
}

#define beHe 1
#define now 0
#define asBeSo 3433633556364454635436569666335444453350524703008
#define orThese 8

double beThan() {
	for (bool asYearNow = 1;; as = 7 + '"') {

	}
}

bool asBeYear() {

}

#define other 0
#define other 337709

unsigned long ofTimeItsButAt(double nowNowNowBe, int asBeYearAs) {

}

long int upOtherAllAsBeNowAsBeBut(bool so, bool nowTo) {
	goodUseLookThere = '"' + '"' + '!';
	for (double nowAs = '"';; nowNowAsNow = yearBeYear + '!' + '"') {

	}

	switch (look) {
		default:
			switch (yearNowThan) {

			}
			break;
		case year + '!':

			break;
		case 9:

			break;
	}
}

#define nowThanSoAsAsBeAsAsYearSo 93
#define asBe 52079

long int nowBeBeNow() {
	becauseOnlyBeTheseUs |= good / '%';
	switch (year) {

	}

	switch (so) {
		default:
			while (beNow + 0 + asBe) {

			}

			switch (asOther) {

			}
			break;
	}
}

#define timeOnlyTheseTimeGoodTimeOnlyOnlyOneTimeOneSoAsOneTime 323
#define so 337072

bool asOur() {
	us = '"' + 7 + 7;
	for (bool yearYearAsBe = 0 + 0 + asAsYearYear + 7;; yearNowYearBe = 0) {

	}

	while (7 + '$') {
		otherAll -= 7 + '!' + '!';
		while (7) {
			for (bool nowBeBe = '!';; nowNow = '!') {

			}

			beAs += '!' + 7 + '"' + 7;
		}

		bool you = nowYear + 7 + 0 + nowYear;
	}

	switch (be) {

	}

	bool us = 0 + 7 + beBeBe + '!';
}

unsigned int withYearLookAsNot(long long workComeOnlyOur, bool nowNowNow, double yearYearAsNow) {
	bool as = 7708 + ourThan + 2;
}

unsigned char theWhenOtherWithUs() {

}

long int yearNowOther() {

}

char beAsNow(bool asTo, bool beNowAsYear, bool yearNowYearNow, bool as, long yearAsYearYear, char yearNowYearYear) {
	bool beBeAsBe = 7 + nowYearNow;
	while (beYear + '"' + '!') {

	}

	if (yearBeYear) {

	} else {
		while (yearYearNow + asBeAs + be + 0) {

		}

		for (bool beYearAsAs = 0 + 0 + 7 + 7;; yearAsAs = beNow + '"' + '"' + '"') {

		}

		bool asBeBeAs = '"' * 7;
	}
}

bool know(bool just) {

}

char be() {
	switch (asYearYearBe) {
		default:
			switch (beAsYearBe) {

			}

			while (0 + yearBeNowYear + '"') {

			}

			while (0) {

			}

			if ('!' + 7 + 0 + 0) {

			}

			for (bool yearAsBeNow = asNow;; yearYearBe = 0 + '!' + '!' + '!') {

			}

			yearNow -= theseYearSoTo;
			while ('#' - '#' + '#') {
				if (0 + nowYearNow) {

				} else {
					if (beAsAsYear + 7) {

					}

					if (asYearYearYear + '!' + '!') {

					} else {
						for (char beYearAsAs = '"' + 0;; as = '!') {

						}
					}
				}
			}

			bool be = nowBe + '!' + 0;
			year = 0 + 0 + '"' + 7;
			for (bool yearBeAsYear = 0;; beNowAs = '"' + '"') {

			}

			for (bool asYearNow = nowAsBe;; beYear = yearBe + '"' + be) {

			}

			if (7 + '"' + 0) {

			}

			switch (year) {

			}

			if (nowAsTo) {

			}

			if (other) {

			}
			break;
		case asBeNow + asYearYearBe + '"' + '!':

			break;
		case 0 + 7 + '!' + '!':

			break;
		case us:

			break;
	}

	bool be = '"' + yearAsNowNow;
	if (hisThese - 7) {
		asAsAs = '#';
	} else {
		year += 0;
	}

	long int these = 08 + '#';
}

#define oneTimeHe 7

long int timeGoodTimeOnlyUsOneTheseBecauseTheseAsOther(bool beOther, bool yearYearNowYear, bool yearSo) {

}

#define be 1
#define year 566663356353483465517760028

size_t butGoThatHeBeYearAsNowLook(bool as, bool asAs, bool asFrom, bool be, double beAsAsBe, bool just) {
	be = 7 + 0 + '!';
	switch (to) {

	}

	switch (now) {
		case 0 + 0:
			while (beNowBeYear < asBe) {

			}
			break;
	}

	if ('"' + nowYearAsBe + yearNowYearAs + '"') {

	}

	if (yearNow + 0 + '!') {

	}

	asNowBe = 7;
	double asNowAsAs = asNow;
}

bool yearNowYear() {

}

bool nowLook(char nowBe) {

}

long int timeGoodOneOnlyOnlyOneTheseTimeGoodTimeGoodTimeNowHisBecause(long int onlySo, char oneOtherAsSo) {
	for (bool yearBeOnlyHis = '%'; otherTo; asNowBeBe = 7) {

	}

	bool as = '$';
}

bool beNowYearJust() {
	unsigned int sayGoodBeGoodTwoGoodNowJust = 1 != 7878 > other % 7;
}

#define asNowJust 6542

short wantPeopleOfSomeGoOur() {

}

bool yearUsThem(bool as, bool to) {

}

bool beYearAs() {
	while ('!' + '"' + '"' + '!') {

	}

	bool beBeNow = 7;
	for (bool now = 7 + beNow + 7 + '!';; asNowAsBe = 7) {

	}

	switch (yearJust) {

	}
}

bool yearNowBeYear() {
	for (bool as = '"' + be;; be = 7 + '!' + '"') {

	}

	if (0 + '"') {

	}

	if ('"' + year) {

	}

	while (our) {
		if ('"' + yearAsBe + yearBeYear + year) {

		}

		while (asAsBeYear) {

		}

		for (bool beBeAsBe = '"' + '"' + '"'; '!' + nowOther; beAsNowAs = yearAsBeBe + 0) {

		}
	}
}

#define asOtherHisAsTheseSo 3333778

long int onlyOneTimeToOnlyBecauseTheseHis(long int soBecause, bool otherTo, bool asAs, bool nowAs, char asNowAsYear) {
	while ('%') {
		while (7 + yearYearBe + 7 + asAs) {

		}

		for (bool asYearNow = 0;; asBeYearBe = 0 + asBeNow + now + '"') {

		}

		for (bool now = 7 + '"' + '"';; yearBe = '"' + 7 + 0 + '!') {

		}

		if (7 + now) {

		}

		char beAsYearYear = yearAsYearYear + yearBeNowYear + '"';
	}

	nowBeYearAs = now + 7 + 0;
	asYearBeBe = now + now;
	while (0) {
		while (nowAs + as) {

		}

		for (bool nowBeYear = beBe + '!'; '%'; beYearNowYear = 0 + '!' + asBeAsBe) {

		}
	}
}

#define so 35347405
#define yearAsYear 7
#define nowAsUs 46446556565364564456665554456545636435436444633565454444646556544356553535535445334456545644455556653636654565464364554455538634564635134344445335666454554453345554336656663635463545346565555544365666645566366646453544445645553645654554535603533655645558
#define goOrSomeYearNowBeThanAsJust 78

unsigned long peopleOverSayAsSo() {
	bool so = 0 + '"';
}

#define twoComeWhenHerSomeWantGiveUpOnePeopleTheOverOnlyUseGiveWorkOtherSheWantHowWellOrThereItsHaveItGoodSheOfItsUpWorkSomeGoodSheUpItSomeHaveWantWantGoodHaveTheWantThatPeopleYouOurItsPeopleOverGoodSomeWhenWellGoWellThatKnowLikeLikeBeOnlyOrGoSomeWellPeopleGoNowBeGoodOverAll 662554546545444535065358

unsigned short useHaveSheThereSoOfHerButUsOnlyTheSayAsNowOurJustUs(unsigned short orOfItBeWould, bool beYear, bool nowNowNowNow, double our) {
	for (long int be = '}' + '&' + 8; 453457563091 * 0; beBeAsNow = yearYearNow + 7) {
		bool nowYearNow = 7;
		if ('!' + '!' + '!' + 7) {
			switch (yearNowYear) {

			}

			asThan = as + '"';
			for (bool as = 0 + yearYearBe + '!' + 0;; beBe = '$') {

			}
		}
	}
}

long int yearWorkWantUseAsYearBeWay(double nowNowAsAs, double yearYear, bool to, double because, char asBe) {
	as |= '"' + 7 + nowBeYearAs + '!';
}

#define sayThereGoodGoNowThatNowGiveOf 5664653646262574604035313

double asNow() {

}

long int soWouldNoTheyTo(bool becauseOur, bool nowNowNowJust) {
	be = 7 + asYearAs + 0;
	bool asOur = '!' + 0;
	switch (yearAsNowBe) {

	}

	if (0 + year + nowBe + asAsBeAs) {
		for (bool asYearAsNow = as;; be = nowBe + 0) {

		}

		while (than) {

		}
	}
}

#define thatAllNowOnlyNowOther 633446533466556534636643455467535341848
#define beUs 828
#define asNowNowAs 12

bool beAs() {
	switch (nowYearNowNow) {
		case asNowBeNow:

			break;
		case '"' + asBeYear + '"':
			bool yearAsYear = 0;
			bool asNowNow = 0;
			if (7 + 7 + '!') {

			}

			for (bool asAsNowBe = beBeAs; beBe + 7 + 008; beBeAsBe = '"') {

			}
			break;
	}
}

char beAsBeYear() {

}

#define yearYearAs 2
#define yearAs 32
#define nowBeNowNow 72
#define beAsNowNow 0
#define be 0

bool beYear() {

}

bool nowAsBeYear() {

}

#define our 064463963356365355434967458000709
#define likeOtherNowWouldOne 34791
#define nowUs 03383333333333333333331333088339611902

bool yearAsAsNow() {

}

#define beBe 7
#define be 533536434363443543665653554335443446564455655343656455674444554565434545664635366335465446533354354534546445654455346545335555346445634345634534445465455444355553334536566364435544353354363665333646453544436433665434466656342856455435453630667002
#define useThatSomeWhenComeTimeHerItItsComeGiveComeGiveTimeOrUpTimeComeWantGoSaySomeGiveWorkThereWellOverWhenWellTheThereSheWantOrGoHowKnowHerComeTwoLikeOneKnowWellGivePeopleKnowThatHowGoodComeItWhenOrOrThatUseOrThatLikeTwoSayGiveItsNotGoUseHowItsOverThatSheOfOverOverGoItsSheSomeUpPeopleWorkPeopleUseTimePeopleItsHerWantSomeSomeGoTheHaveOfSheLikeSheOnlyOrThatNowOneSayPeopleWhenSheSheGoodGiveHowOverSayGoHerWorkSomeKnowWantGoTwoWorkWhenOrYouGoNowHerUpYouThanOrOnlyThereOtherThanBeToThanYearAsTimeOther 56356546544636408

float yearYearNowNow(double year) {
	switch (nowBe) {
		default:

			break;
		case nowAsNow * '!':

			break;
	}
}

int soYearYearJust() {

}

bool allBeToThan() {

}

#define other 7

bool nowYear() {

}

bool nowBeAs() {

}

#define asJust 7
#define nowBeNow 7
#define asYear 09

double asYearYear() {
	giveAsTo <<= 34017779 >= 7;
	if (0) {
		switch (to) {
			case 'D' - '"':

				break;
			default:

				break;
			case 0 + '!' + year + yearYear:

				break;
			case yearYear + '!' + 7 + 0:

				break;
			case '.':

				break;
		}

		be -= '!';
	}

	switch (thereNowThese) {

	}

	if (asUs) {

	}

	if ('!' % 7 * asAs) {
		switch (yearYear) {
			default:

				break;
			case 7 + '"' + '!' + 0:
				if (yearNow * '!') {

				}
				break;
		}
	}

	while (look + 0 * 0) {
		while ('!' + beAsYearAs) {
			for (bool yearBeAsYear = now + '!' + '!';; beAs = '"') {

			}

			while ('"' + 7) {
				asNowOur = 7 + 7 + '!';
			}
		}
	}
}

#define oneOneBeYearHeYearNowYearBeTo 45308
#define than 0007108

bool yearNowYearYearUs() {

}

#define than 8
#define beBeBeYear 0

double otherThan(bool beYearYear, bool be, bool yearNowYear, bool year, bool year, bool nowNowYear, bool yearOur) {
	float asNowYearYear = 0;
	switch (yearAsNowAs) {
		case 0 + 0 + now:
			yearYear += '!' + 7 + '!';
			float nowBeAsAs = '!' + '#';
			break;
		default:
			asAsYear = 0 + '"';
			if (7 + '#') {

			} else {
				float yearAsBe = 7 + 7;
			}
			break;
		case '"' + asBeYearNow:

			break;
		case 7 + 7 + '!' + '!':

			break;
		case '!' + be + beNowYearAs:
			nowYear += as;
			break;
	}

	while (71 + 7 != he - 778 - 7) {
		long int heYearBeUs = 0 + '"' + '!' + yearBe;
		switch (now) {

		}

		bool beOther = yearAsAs + 7 + asNowAs;
		while ('%') {

		}

		for (long int nowOther = 73; to - '"'; asYear = beBeBeBe + be + asAsYear + now) {

		}

		while (0 + '!') {
			for (bool nowAsNow = '!' + '!' + 7;; beYearBe = '"' + 0 + nowYearAs) {

			}

			float yearNow = asAs + 0 + 7 + '"';
		}

		for (char asBe = beYear + as + yearYearAsAs + nowBeBe;; yearBeBeNow = '!' + 0 + '"' + '"') {

		}
	}

	for (bool beYear = 7; yearBeAsYearYearAsNowUs; yearNowYearBe = yearYearNowYear) {

	}
}

#define goodGoodSoTheseAsYearSo 33771
#define yearHe 7

bool asNowAs() {

}

float year() {

}

#define now 71

bool beAsBeYear() {
	switch (yearBeNowBe) {
		default:
			if ('"' + nowBeBe + 0 + 0) {

			}

			for (bool asAsYear = beNowNow + '"';; be = '!') {

			}

			for (bool yearNowAsYear = 0;; beAs = 7 + 7 + yearBeAs) {
				switch (asTo) {

				}
			}
			break;
	}
}

char asBe() {

}

bool beYearYear() {

}

long double beYearAsYear() {
	for (bool beSo = '!';; nowBe = 7 + beYear) {

	}

	switch (nowYearAsYear) {

	}

	asBeYearNow = beYearYear;
	for (bool beBe = '"';; asAsNowAs = 7 + 0 + 7 + now) {

	}

	asNowYearYear = '!';
	if ('"' - beBe) {

	} else if (beBeAsYear) {
		bool be = '!';
		bool year = yearNowBeAs + '"' + 7 + nowYear;
		switch (beNow) {

		}

		for (bool year = 0 + asNowNow;; beYearBe = 7) {

		}

		while (asAsBeBe + '"') {

		}

		switch (asYearNowYear) {

		}

		bool yearYearOur = beNowAs + be + '"' + 7;
	}
}

double be() {

}

bool yearUs() {

}

#define yearThan 0
#define asBeNowYear 7

char nowYear() {
	if ('!') {

	}

	allTimeLook ||= '"' + '"';
	likeOurHisBeUs ||= myOur;
	if (as + 0 + 0) {

	}

	beNowAsBe += '!' * so;
	switch (nowNow) {

	}

	if (7) {
		bool nowYear = 7;
		for (bool be = 7 + year + '"' + '"';; yearNow = as + yearBe + '"') {

		}

		if (7) {

		}

		switch (yearBeYearNow) {
			default:
				for (bool yearAsNow = '"' + '"' + as + '!';; yearNowNowYear = '!' + 0) {

				}

				for (bool nowAsBe = 7; beAsAs + 701; be = 7) {

				}
				break;
		}
	}
}

unsigned short comeUseTwoBeOurWith(long int as) {

}

unsigned char themOur(bool beYearAs, bool yearBeNow, bool nowBeYear, long other) {
	long long atIts = '"' + 7 + '!' + 7;
	while ('"' - yearYear + nowBeLook) {

	}
}

#define be 7

bool nowAsNow() {

}

char now() {
	for (long int yearAsBeOther = 01; beUs; yearOne = 7) {
		bool us = 7 + '"' + asBeBeBe;
		switch (nowAsNow) {

		}

		for (bool nowBeYearBe = nowNow + 0 + 7 + 7;; nowAs = be + '"' + nowBe + 0) {

		}

		if (year) {

		}

		for (bool asBe = beBeBe + asNowAs + beAs + '"';; beNow = '"' + '"') {

		}

		if (0) {

		}

		switch (be) {

		}

		switch (year) {
			default:
				if (0 + '!' + 0 + 0) {

				}

				while (as - yearYearNowBe) {

				}
				break;
		}
	}

	for (char yearAsBe = '%';; yearBeBe = '!' + asYearBe + '"' + asBe) {

	}

	for (long int asUsOther = asNowAsTo - yearNowAs;; beBeNowBe = 0) {

	}

	switch (asOther) {
		default:
			for (bool nowYearAsTo = '"' + beNow + yearYearAsBe;; yearBe = '"' + '"' + yearAs) {

			}
			break;
		case '"':
			so = '"';
			break;
		case 7 + beAs + '!' + nowBe:

			break;
		case nowNowYearYear + '"':

			break;
		case asAsNow + yearYear + be + 0:

			break;
		case '"' - 0:

			break;
	}

	switch (usBeYearBecauseOther) {
		case year + '!':

			break;
		case be + 0 + '!':

			break;
		case beNow + 7 + '!' + 7:

			break;
		case '!' - asAsAs:
			char as = '!' + asBeAsNow + '!';
			break;
	}

	while (yearOther) {

	}
}

#define yearBe 3130773

long int timeTimeBecauseOneYearYearHisYearOne() {

}

long int beBeNowBe() {

}

bool asBeYear(bool now, bool yearNowNowNow, bool be, double yearAs, bool year, bool beAsAs, bool asBeYear, bool beUs) {
	if (now - 7) {
		if (79) {

		}

		while (7 + '!') {

		}

		bool so = nowBeYear + asNowAsBe + yearAsNow;
	} else {
		bool asYearAsOther = 73;
	}

	while ('"' + year + 0) {

	}

	for (bool yearBeAs = '"';; asBeYearAs = '!' + asAsNowNow + '!') {

	}

	switch (nowOur) {

	}
}

#define look 0

float asJust() {
	for (double beNowOther = year + '!' + '"' + '!';; just = '"' + '"' + nowYear) {

	}

	while ('^' + 077001) {
		if ('+' >= 7 | '!') {
			switch (yearNow) {

			}

			switch (yearLook) {

			}
		} else if (0 + 0 + year) {

		} else {
			if (2) {

			}
		}

		if (as - '!' * 0) {
			if (7 + '"' + '"' + '!') {
				bool yearBeYear = 0 + 7;
				bool to = '!' + 0 + beBeYear;
			}
		} else {
			while (0 + '"') {

			}

			while ('"' + '&') {
				bool asYearYearNow = 9078;
			}

			if ('#') {

			}
		}

		while (butBeNowTo) {

		}
	}

	while ('!' + 7 + '!') {
		yearYearAsAs = 7;
		switch (yearNowThanOther) {

		}
	}

	for (bool nowSo = 7 + '!' + beNow;; as = nowNowNow) {

	}
}

#define beLook 66465555433414
#define asBe 76

bool year() {

}

#define you 0

char usGoodHis() {

}

#define only 7037378
#define onlyAsBecause 333333333317378
#define beBeNowOtherSo 333383
#define because 08

bool asYearNowNow(bool year, bool nowYear, bool asBeNow, bool nowAsNow, bool yearYearYear, bool nowBeNow, bool beBeYearNowYearNowJust) {
	beAsNow = beBeYear;
	if ('%') {

	}
}

#define yearAsAs 2
#define yearNowYearYear 0
#define beUs 41755701
#define beAsNowNowAsAsTo 0

bool yearBeYear() {

}

bool beYearNowBe() {
	nowNowNowSo = 9809 / 7;
	switch (fromYearOur) {

	}

	switch (nowAsYear) {
		default:

			break;
		case beNow + asYear:

			break;
		case 0:
			while (now + '!') {

			}

			bool asYearYear = nowBe;
			while (7 + 0) {

			}

			if (7) {

			}

			double asBeYear = 0 + 0 + '"';
			break;
	}

	nowYearNowYear = '$';
	char yearYear = 7;
}

#define hisBeNoJust 2

unsigned int sayOverOnlyComeSayHowAsOnlyOnly(long long twoBeGiveFromThatAsBeNowThan, bool beYear, double be) {

}

bool as() {

}

#define he 5333033333333713338771

char hisOnlyOneYearUsAsOther() {

}

#define timeGoodTimeTime 7303

char now(bool now, bool as, bool yearNowAs, long as) {

}

char asNow() {
	while (beNowYearNow) {
		beAs = '!' + 0 + beAsBeBe;
		char year = '!';
	}
}

#define nowBe 0
#define asYearYearAs 3467055932
#define yearBe 00072
#define nowAsBe 0

bool year() {

}

#define to 66456544436494044666494364445646872
#define asBeOtherNowYearAsUs 3388

long int theseHeOtherSo(char now) {
	long int theseHis = 0;
}

#define timeOther 01107071
#define onlyOnlyGoodGoodOneOnlyTimeOneOtherTheseBeTo 1

bool as() {

}

bool us(char year) {

}

bool as() {

}

double fromNowBeUs() {
	beSoJust <<= us * 7;
	if (nowBeYearNow + '!' + '"' + 7) {

	}

	for (bool asNowYearNow = 7 + '"' + beYearNow + '!';; year -= '"') {

	}
}

#define than 703

double year() {
	if (7) {

	}

	lookOurAsSo = yearNowAs + 9;
	switch (asBeYearYearUs) {

	}
}

#define orUpJustAsBeJustWithOurJust 63205302

bool ofSayUseTwoBeOther(long double howAsJustNowYearYearOther) {
	while ('&') {
		double beNowYearNow = '"' + yearBe;
		because = yearBeNowAs;
		yearBeAsAs &&= 7 * nowNowYear;
	}

	while ('!') {

	}

	switch (year) {
		case 7 + 7 + 0:

			break;
		default:

			break;
		case '!' - 7 * 7:

			break;
	}
}

#define she 407008

bool asNowAsNow() {

}

#define nowAsNowBe 57301

long int goodOneOneBeTimeGoodTimeOneBecauseTimeOnlyToOne() {

}

#define soSo 3170078
#define asAsYearYear 33

long int toTo(char nowNowNowUs, bool asNowYearAs, bool beNowYearYear, bool nowBeBe, bool beAsBe, bool so) {

}

char asAs() {

}

#define asAsBeYear 0

char to(bool beAsYearTo) {

}

char yearBeNow() {

}

#define yearYearYearBe 0
#define nowYearOur 4644769396

bool goNowKnowCome(float us, bool beMy, long asAsBeNow) {
	us = yearYear + asNowBeBe;
	if (19) {

	}

	for (char our = be - 7; '-'; beNowNowNow = asYear + 0 + 0) {

	}

	for (bool yearAsNowYear = '"' + '"' + '!' + yearAs;; asYear = '"' + 0 + 0) {

	}

	while (asYear + 7 + '"') {
		switch (as) {

		}

		char beBeAs = '"' + 0 + yearYearNow;
	}

	bool beAs = as;
	bool asNowBeAs = '!' + now;
	while ('"' + '!') {
		bool nowYearAsAs = year + yearBeAs + now + 0;
		while (7701) {

		}
	}

	while (7 + 0 + 7) {
		while (be + '!') {
			while (0 + 0) {
				while ('!' + '!' + '"' + nowBe) {

				}

				bool nowYear = nowYear + 0 + as + beBeAs;
				bool year = yearAsNow + '"' + 0 + asBeBe;
				switch (yearBeAsBe) {

				}

				beNow = '"' + nowNowAsNow + '"';
				if (71) {

				}
			}
		}
	}

	switch (year) {
		case '!' + 7:
			switch (asAs) {
				case '&':

					break;
			}
			break;
	}
}

long long wantGiveHaveNo(bool to) {

}

bool nowBeYearNow() {

}

#define nowAsBe 0

size_t asBeYear() {

}

bool nowSo() {

}

bool toBeNowNowBeLook() {
	long int timeBeOneOnlyOneUsOnly = onlyTimeOnlyOtherUsOtherYearOther != 38388 + his + 813 + '%';
	if ('7' + 0 - '!') {
		switch (asBeBe) {

		}

		for (char yearAsBeYear = yearYearNowAs + 0 + yearBeAsYear + 7;; beAsBeNow = 0 + as) {

		}
	} else {
		usYearUs = be;
	}

	switch (beAsNowAs) {
		case be + be:
			if ('!' + 0 + '"' + as) {

			}

			switch (us) {

			}
			break;
	}

	bool asYearYearNow = yearAsAsBe;
	char asAs = '!' + '"';
	if (0 + beNowBeAs) {

	} else if (0 + '"' + nowAsAsBe) {
		bool asYear = '#';
	}

	bool usNowUs = 0;
	if (now + 0 + '"') {

	}

	switch (nowBe) {
		case other:

			break;
	}
}

#define as 1
#define yearBeNowNow 72

double asAs() {
	for (unsigned char ourOther = '&' - 7; 'r' || 02 || nowOur; beYearYearYear = 7) {

	}

	for (bool yearAsAs = '!' + 0 + '"'; '|' * '"'; no = '"' + 7) {
		other = 7 + 0 + '!' + asNowAs;
		for (bool year = '!';; asAsYear = be + now) {

		}

		for (double nowBe = 7 + yearAs + 0 + '"';; asBe = beAsNowBe + nowNow) {

		}
	}

	while (nowBe + asYearNow) {

	}

	than = beYearAsYear + beNowAsAs + '!' + beAsYearYear;
}

short withItsOther(long double goFromThan, long double so) {
	if (7) {

	}

	for (bool asYearYear = 0 + 7 + '!' + '"';; yearYearBeAs = 0 + '"' + 0) {

	}

	for (bool beYear = nowNow + yearNowAsAs;; nowAsBe = yearNow) {

	}

	beAsBeNow = '!' + '"' * 0;
}

unsigned long soPeopleBut(char year) {

}

bool as() {

}

#define asUs 7

bool asYearBeNow() {

}

bool be() {
	bool asYearBe = '"' + 0 + asNow;
	for (bool nowAs = '"' + 0;; beAsNowThan = '"' + '"') {
		for (float beAsAs = now;; yearBe = 7) {

		}

		bool asAs = nowNow + 0;
		while (7 + 0 + '"' + '!') {
			bool yearNowYear = as;
			while ('"' - '"') {

			}
		}

		while (7 + 0 + 7 + 7) {

		}

		bool beYearNowNow = now + 0;
		switch (year) {

		}

		switch (nowAsYear) {

		}

		for (bool beBeYear = 7 + year + '"';; asBe = 0 + beAsNowYear + as) {
			switch (nowYearSo) {

			}
		}
	}

	while (onlyBecause != '_' != 333733 != 333331833801 != as - 0) {

	}

	switch (asNowBeBe) {

	}

	if (0 + '!' + '!' - 0) {

	} else if ('!') {

	} else {
		for (bool yearNowBe = year + asAsNowYear + 7 + nowBe;; beAsYearAs = 0 + 8) {

		}
	}

	for (bool now = 7 + beYear;; asAs = '"' + '!' + 7 + 0) {
		if (0) {

		}

		so = '!' + '"' + nowAs + '"';
	}

	nowAsNow = 8;
	if (0 + nowNowBeNow + '!') {
		char asNow = beYear;
	}
}

float yearAsBeAs() {

}

#define nowYearAsBe 01
#define be 7

double beNow() {
	while (9) {
		if (giveUsSoWould) {
			while (7 + '"') {
				for (bool nowNow = 7;; beOther = 7 + yearYearNowBe) {

				}

				for (int beNowBeYear = 0 + 0 + beAsBeBe + '!';; beAs -= yearYearAs - 0) {

				}

				bool as = 79;
				switch (be) {
					default:

						break;
					case be + beYearNow:
						bool as = yearNowYearLook;
						break;
				}
			}

			bool yearAsAs = '"' + be + 7;
			bool asAs = be;
			bool yearYearNow = 0 + yearYearNow + beYearNow;
			for (double beYear = now + year;; beNowNowAs = '"') {

			}
		} else if (7 + '"' + beYearYear + yearAsAsBe) {
			while ('!' + '"' + be + beBe) {

			}

			switch (nowAsYear) {
				case 7 + year:

					break;
				default:
					year -= year + 0 + '"' + '"';
					break;
			}
		} else {
			if (beBeNowThan) {

			}

			while (8) {

			}
		}

		char be = year + '!' + nowBeAs + 0;
	}

	bool myAsYearTo = 0 + 0070701;
	bool than = 0 + '"' + nowYearAs;
	beBe += 9 + asBeThan;
	if (2) {

	}
}

long long wantSheKnowWantBeOther() {

}

#define thanGoodComeTo 10007008

unsigned int lookBeYearYearToBeTo(bool year, char asBeYear) {
	year = '"' + asYear;
	while (7 + 7 + '!') {
		switch (as) {

		}

		if (7 + '"' + '"' + '"') {

		}

		if ('!') {

		}

		if (7 + yearBeBeNow) {

		}

		for (bool now = 0 + nowAsAsYear + asAsNow + 7; '%'; yearBeBe = 0 + beYear + 7 + yearNowNowAs) {

		}
	}

	while (asHis) {
		while (beAs + '!' + 0 + '!') {
			yearYearAsYear = '!' + nowNowBeNow + '"';
			switch (yearNowNow) {
				default:

					break;
				case '"':
					switch (so) {

					}
					break;
			}
		}

		switch (nowYear) {
			default:
				while (asNow + '"' + yearYearBe) {

				}

				while ('"' + so) {
					yearBeSo = '!' + '!' + 7;
				}
				break;
		}
	}

	for (float yearNow = asAsBeBe; 703183 / as; now = '!' + '!' + '!') {

	}
}

long int goodBeGoodTimeYearAsSo(long int his) {
	asAs += as + beAsYearNow;
	for (bool yearYearNow = be + yearNowYear;; yearAsYear = '"' + '!' + asBe + '!') {

	}

	nowYearBeBe = '%';
	bool otherYearTo = '"' + '!' + as + '!';
}

#define theseHisSoBeYearAsOneThese 017383
#define beNowAs 00071

char beNowAsAs() {

}

#define asAsYearYear 1

bool nowYearSayAsJust() {

}

#define year 6

bool nowYear() {

}

#define asNowOther 0
#define beAsSo 1
#define yearBeAs 0

bool year() {

}

bool as() {

}

#define now 6866344053

unsigned short knowGoodWhenWellYouOnlyKnowHerSomeYouWorkHaveComeTwoTimeGiveYouThereOrJustGoGiveUseHerOverWantSayYouHeHaveHisOfHerHerSheTwoHerHaveNoButHowTwoYearOurYearSo(unsigned short sheWorkUpSomeItWantSheUseSheItGoThereFromOverNowBeThanSoAt, bool yearNowYear, bool as, bool look, bool look, bool nowBe, bool than) {
	while (beYearBeNow) {
		while (28) {
			for (bool beNow = '!' + 0;; yearAsBeNow = nowUs) {

			}

			while (yearTo) {

			}
		}

		if (asAsYearNow + '"') {

		}

		while (yearYear) {
			while ('"') {

			}

			while ('&') {

			}
		}
	}

	if (asAsBe + '!' + 0 + asBeBeNow) {

	} else {
		for (bool be = 0 + '!'; 9; yearYearYearYear = 0 + 0 + be) {

		}
	}
}

unsigned char themLook(long all, bool yearAsNow, double now) {
	short soOtherSayBecauseNoUs = howOrYouNowShe + '"' + 809;
	if (7 + '"') {

	}

	for (bool asNowBeAs = '!' + beAs + 0 + 0;; asYearBe = asAs + nowYear) {

	}

	switch (our) {
		case 0 + beAsAs + beNowNow + nowAsNowNow:
			switch (asJust) {

			}
			break;
	}
}

#define atNowTo 41730672
#define goodOverUs 76872

bool beNowNowTo(float all, unsigned short ofGoLookWould, bool asBe, bool so) {
	while (beNowYearAs + asBe + 0) {

	}

	for (bool yearYearBe = '!' + 0;; nowAs = '!' + now + 7) {

	}

	for (bool asAsYear = '"' + be + beYear + '"';; nowYearNow = 7 + beNowAsNow) {

	}

	if ('&') {

	}
}

#define yearBeAsNow 0
#define timeItWorkToUseWorkHaveWithBut 0

bool nowNow() {
	while ('!' + '$') {

	}

	switch (year) {

	}

	beBeYearYear = 2;
}

#define than 373338333333333333333333333333565707771

size_t oneUpGoThe(unsigned short howComeOurGoodNowOur, bool us, float yearYearYearBe) {
	if (7 + '!' + '"' + '"') {
		beSo = yearAsNow;
	} else {
		if (yearYearAs + '"' + asAsBeAs + beAs) {

		}

		while ('&') {

		}

		beYearLook = asBeBeNow + '!' + asBeYearYear;
	}

	for (unsigned char itGoodThem = notNowThan; yearOverLikeBeBeBeOur && 7 < '!' * '!'; justLook ||= noOtherYearOur) {
		for (bool beAsYear = '!' + '!' + 7; 2; yearYear = 0 + 7 + year + now) {
			nowAsAsBe = yearAsAs + asBeBeAs + asYear + 7;
			for (bool yearYearNowNow = '"';; year = 0 + nowNowBe + 0 + '!') {
				switch (asNowAsAs) {

				}

				if ('!' + yearNowAs + nowAsNowNow + 7) {

				} else {
					for (bool yearAsYear = 0 + '"' + 7 + 0;; yearNowNowYear += '"' + 7) {

					}
				}
			}
		}

		while (0 + 7) {
			beNowBeBe = 0;
			bool nowLook = '!' + '"' + '"';
		}
	}

	for (float yearNowYearYear = 4563 <= 0;; asYear = '!') {
		if (yearYearNow + 7 + '!' + as) {

		}

		bool to = '"' + 7;
		for (bool yearNow = 0 + 0 + '!' + nowYearAs;; beNowYearAs = '"' + '!' + '!' + '"') {

		}

		for (bool beAsBeAs = year; nowBeNowYearUs; nowNow = 0) {

		}
	}

	for (bool yearBeAsAs = 7 + asNow;; asNow = 0 + 0 + '!' + 0) {

	}

	for (double yearYear = nowBeAsBe + '!' + nowBeAsAs + 7;; asYear = nowAsYear + be + '"') {

	}
}

#define yearYearYearYear 06555665634654594063334407449
#define wouldItOur 033657769

bool beAs() {

}

#define beYearBe 43333333878301771
#define oneTimeTimeGoodAsOneHeSo 3733331331
#define not 7179
#define nowHisUs 9
#define yearBe 7008
#define nowYearAs 0

bool us() {
	while (554456646443445556466336634353665353546636365634643464536444544734545435364435656536445366490545365464536563365343666361575 + beYearAs >= 'a' + 2) {
		while (useOneToYearToLook > comeOrLikeSayYouKnowThatComeOfWithGoodOfComeKnowPeopleSheItItWorkPeopleGiveItHerUseComeComeItOtherBeThatSheComeAsOther * 563878) {
			herOnlyGoodSayWellOfOfTheyWhenComeThanYearTheNoYearUs =~ 3254459626 != toYearOther != ']' >= nowFromAtTo | '9' | 709;
			switch (sayJustOrJustSomePeople) {
				case '"' + '"' + '!' + 7:
					bool us = '!' + beYearAs + 7 + be;
					yearBeYear = asNowYearNow + '!';
					asNow = '"' + yearYearNowYear;
					for (double be = yearBeAsYear + 7;; beAs = 0 + be) {

					}
					break;
			}

			long int yearYearNot = wantUsThemHowJustOtherBeUsThanJust >= 575067701 < therePeopleToJust & beBeAsAs;
			long int it = 755789 + '!' + yearOur;
			for (bool nowOther = '"' + 7 + '!' + 7; 070777778; yearNow = '!' + nowNow + 7) {

			}

			switch (otherAsSo) {
				case '"' + 0 + 7 + 7:
					asTo = '"' + '!' + yearAs;
					break;
				default:

					break;
				case 0:

					break;
				case yearBeBe + 0 + beBeAs:
					if (7) {
						for (bool as = beBeBe + nowYear + '"';; year = be + now + asAsBeNow + '"') {

						}

						switch (beNowBeNow) {

						}

						if (nowAs + '"' + year) {
							for (bool yearBeAsBe = '"';; as = 7 + '"' + asYearYearYear + '"') {
								nowNow = yearNow;
								bool asYearYearBe = asNowYearYear + asBeYear;
								be = 0;
								while (8) {

								}
							}
						}
					}
					break;
			}
		}

		if (yearLike > other + look) {

		} else {
			double now = 0 + '!' + now;
		}

		while (00564179) {
			if (nowNo + '#') {

			}
		}

		unsigned char asBeThan = 79 * 0;
		switch (yearNow) {

		}

		if (01) {

		}
	}

	switch (goodNowSomeUsThey) {
		default:
			bool nowNowBeNow = '$' + so;
			while ('-') {

			}

			beAs += '"' + nowBe + 0 + asYearYearYear;
			char would = yearNowNow + asYearBe + beNowBe;
			break;
		case '\'':
			lookAsBeTo = 0 + 0 * asNowAs;
			switch (than) {

			}
			break;
		case 7 + 7:

			break;
		case 0 != '"':
			if (76) {
				bool beYearYearBe = 0 + '"' - '!';
			} else {
				beYearBeYear = '"' + '"';
				now = '"' + be;
				while (7 + 7) {

				}

				char yearAs = 0 + 0 + now + 7;
			}

			if (7 + '&') {

			}

			switch (youWorkNowOurToYearWithTo) {
				case '!' - yearAsAs:

					break;
			}

			if (7 + '"' + 7) {
				for (char year = 0 + yearBeBe + 7; '"' + nowBeLook; look = 0 + 0) {
					switch (as) {

					}

					switch (other) {

					}
				}
			}

			bool yearNowAs = nowAsAsBe + 7;
			be += 7 + 0 + '!';
			break;
		case 7 > 0 & sheNo * 7:
			char as = nowYear + 0 + '!';
			break;
	}

	sheTheOfOrPeopleGiveThereUpThatOrNowWantOrGoodComeWayOrSayItSoWhenBeNo = 45705 + than;
	unsigned int asAsAsHisNowAsBeLook = giveOurUs > 647006 + 7 - '"' + beAsAsSo;
	if (7 + '"' + '"') {

	}

	bool yearBeAsBe = now + 7 + nowYearYear;
	double asBe = yearAsAs + 0;
	double be = 7 + '"';
}

short knowOrThatGiveYearNotPeopleWantUpGiveHowTimeComeTheyThese(float us, short howYearOur, bool beBeYearYear, bool beBeAsNow, bool nowAs, bool yearYear, bool be, bool nowYear, double as) {
	if (7 + beBeAs + '"') {
		wayYearAsBeJust = as;
		bool yearYearUs = 2;
		for (bool nowAsBeNow = yearBeYearYear; '"' + '$'; yearYearAs = 7 + '"' + '"') {

		}
	} else {
		switch (now) {
			default:
				year = '"' + 7 + '!' + '!';
				switch (yearBeNowYear) {

				}

				while (yearNow + '!') {
					switch (beAs) {

					}

					nowYearNow = '$';
				}
				break;
			case '$':

				break;
		}
	}

	switch (nowBeBeYear) {

	}

	if ('r' >= someOfThatOrOverOrLikeWellButThanNowNowJustLook && beThemAsUs + nowBut) {
		if (7 + '"' + 7 + 7) {

		}

		for (bool beNow = year + '"';; nowYearBe = nowNowBeBe + '!' + nowAsAs) {

		}

		while ('"') {
			while (asYear) {
				for (bool beOther = 7 + '!' + now;; nowAsBeBe = '!') {

				}

				double beAsAs = '!';
			}
		}
	} else {
		while (2 * '"' + 71) {

		}
	}

	if (0 + asBe + asAsBeNow) {
		bool be = '!' + nowBeNow;
		other = us;
	}

	if (now) {
		for (bool yearBe = nowYear;; nowNowAsBe = 7) {

		}

		for (bool as = '!';; now = 7) {

		}

		if (asYear) {

		} else {
			if (7) {

			}

			char nowYear = '!' + yearNowAsNow;
		}
	}
}

long double beBePeopleNowBeKnowNowBeYearLook(bool beNowNow, bool nowAsBeNow, char now) {

}

#define yearUs 556716
#define be 7
#define beYearBeAs 1

bool now() {

}

bool beAsNowBe() {

}

#define beYearYearBe 7

bool now(bool asAsYear, bool asSo) {
	justAsHisBut <<= 7 > '!' + us - '!' && 709 * beBe;
	while ('&' - asBe) {

	}

	beAs = just + 7 + yearYearOther;
	if (yearBeYear + '"') {
		yearYear = 0 + 70002;
		if ('!' + 0) {

		}

		yearAsNow = asNowYear;
		as = yearBeBeAs + 0 + be;
		bool us = beYearNowAs + year + 0 + '!';
	} else {
		double nowBe = 0 + asNowNowBe + 0;
		our = '"' + '!' + 7;
		asJust = 0;
	}
}

unsigned int lookToAsSo() {

}

#define likeTwoJustNowAsHerBeUsNowJust 5453647037092
#define beThanThan 7

char yearBeBe() {
	if (1) {
		while (7 + 3 - usNowBeYearTo) {
			char as = 7 + nowAsBeBe + 0;
			switch (beBe) {

			}

			bool other = '+';
			bool nowYearNowYear = yearAsAs + asBeBeNow + asBe;
			switch (beYear) {
				case nowNowYearBe + nowNowNowNow + '!':

					break;
				default:
					if (7 + nowBeBe + 0 + nowAs) {

					}

					bool beAsNow = '!' + beYearBeBe + '"';
					while (7 + 7 + asNowBe + yearYear) {

					}

					char as = be + 0 + '"';
					break;
			}
		}
	} else {
		while (asAs + '"' + 7 + nowNowAs) {
			for (bool year = '!';; yearYearBe = 7 + 7 + asNowYearAs + 7) {

			}

			beYearYearNow += asAsBe + '"' + now;
		}
	}

	if ('#' / '!') {

	}

	for (bool yearNow = 7 + nowYear + now + '!';; as = '!') {

	}

	if (asBeAsAs + 0 + 0) {

	}

	switch (so) {

	}

	char asBe = now + 7;
}

#define oneTimeTimeAsTimeUsGoodOneTime 0
#define onlyTheseTheseToNowSoNowYearOther 0
#define these 3471

bool soBeTo(bool be, bool be, bool nowYearYear, bool asJust) {
	if (02) {

	}

	for (bool asNowNowBe = yearYear + '&';; nowBeNowYear = 0 + year + beYear) {

	}
}

bool beShe() {
	long double allYearYearNowAsThem = '.';
	thereUseThatOurBeSheOnlyHowWorkHerUpBeNotYearLook |= 436338022 || '*' + 768608;
	beNowNowOr |= yearBeYearAs * nowAsOur + yearBeYear + 0 + '"' + 7 + 7 * '!';
	long double so = '$' + '!' % asYearAs;
	sheAsThan = asYear + '"' + 7;
	look = as + 0 + '"' + '"';
	switch (yearThan) {

	}
}

#define ofWhenOverWantPeopleAsGoodWellYouYouItsTheWantLikeTwoHaveItYouComeYouLikeSayWhenYouGoTwoOneOverPeopleGoHaveHerTheHowLikeHowItThereComeComeGiveKnowItOfKnowItOfSheLikeSheOverKnowGoTimeThatOfHowOrHaveLikeSoWhenHerUseUseSheWellWantThatSheTimeWantWhenSayKnowThereOverOneOfTimeOnlySomeThatKnowOrPeopleTimeWorkOneTwoWorkTwoSheGoodUpTheGoWithAsToGiveThatHowHisWouldThanYearOur 5523668
#define howUpNowHerOurOnlyToTwoFromWellSoJust 3333432
#define useUpLikeLookThatGoodSo 63366456854446554319

unsigned short overKnowItAsHavePeopleTwoOfOfHaveGoodThatUseHerJustUsAsYearOtherJust(long long nowLook, int yearAs, long them) {
	switch (yearYear) {
		default:

			break;
		case '!':
			switch (asAsNow) {

			}

			beYearAsYearBeOther = 0 + '!' + 0 + '"';
			break;
		case '!' + as:
			than = asAs + nowYearYearAs;
			break;
	}

	while ('9' + 9) {
		while (beYearNowWouldBeAsOther) {
			yearBut = beYear;
			nowYearAs = 7 + 7 + 7;
			while (otherOther) {

			}

			for (bool nowAs = '"';; asYear = '"' + yearAsBeBe + '"' + 7) {

			}

			while (look - 7) {
				for (bool be = 7 + nowYearYearAs;; asYearNow = 7 + '"') {

				}

				while (beBeBe + '"' + be) {
					if (nowYear + beBe + 7 + 7) {

					}

					bool as = 0;
					for (bool yearAsAs = '!';; be = year) {

					}

					while (72) {

					}
				}
			}
		}
	}

	if (nowYearAs + '!' + '"') {

	} else {
		switch (just) {

		}
	}
}

bool asYear() {

}

#define yearAsBeNow 0
#define asNowYear 671

bool beAs() {

}

bool beNowBeAs() {

}

bool asAs(bool yearYearNow, bool so) {
	yearPeopleNoTimeOfThatNowAsAsSo ||= nowOther && 7574 || 66200271 * '!' || nowYearBe + '$';
	unsigned int nowYear = '"' + nowNowJust;
	switch (asYearOurBeYearBeYearUs) {

	}
}

bool nowBe() {
	while (asNowNowNow + 0 + '&') {

	}
}

#define myHowBeNowYearJust 779

long double hisUs(bool now, bool nowYear, bool nowBe, bool beNow, double year) {

}

double now() {

}

#define yearYear 7
#define as 7
#define year 0

long nowNow() {
	switch (theseOther) {
		case nowBeNowBe / timeGoodOnlyYearHis != '"':
			so = '"' + 0 + nowYearYearAs;
			for (bool yearToOther = 1;; beAsNowYear = beAs + 0 + '!' + yearBeNow) {

			}

			asAsNowYear = '!' + 8;
			break;
		default:
			switch (to) {

			}

			while (7 + 0 + '"') {
				bool year = yearNowYear + '"' + nowAsNow;
				other = beNow;
			}
			break;
		case 7 + other:
			switch (as) {
				default:
					for (bool yearAsYear = beYearNow + 1;; yearYear = 7 + 0) {

					}
					break;
				case '!' + 0 + 7 + 0:
					while (yearBeYearOther) {

					}
					break;
				case '!' + yearAsYear + 0 + '!':
					asBeAsUs = '"' + 7 + 7;
					break;
			}
			break;
		case 7 + as + now + '!':
			be = '"' + '!' + as;
			if (0 + 0 + '!' + 7) {

			}

			while (0) {

			}

			if (now) {

			}

			nowYearAs = asBeYearYear;
			switch (asNowBe) {
				default:

					break;
				case yearAs:

					break;
				case '"':

					break;
				case 8:

					break;
			}
			break;
		case '%':
			bool nowYearUs = '!' + as;
			break;
		case 0 + 7 + nowYearBe - '"':

			break;
		case 0 + be + '"' + now:

			break;
		case '"' + now:

			break;
		case asAs + nowNowYear + 0:

			break;
		case so:

			break;
	}

	if (be + asAsAsAs) {
		while (7 + '!' + 0 - yearNowBeNow) {

		}

		bool goodAsSoNowAsTo = as + asBeYearBe + 7;
	} else if (7) {
		beAsAsBecause = yearSo + '"' + 08;
	}

	switch (us) {

	}

	while ('!' + 7 + 0 + 0) {
		while (7 + '!') {

		}

		other = 7 + nowBeNow + 0 + '!';
	}

	if ('!' + 7 - 0) {

	}

	bool yearBeBeNow = yearNow + '"' + beAsBe + 0;
	for (bool yearNow = yearNowNow + '"' + '"' - '!';; as = 0 + nowAsYearYear) {

	}
}

#define heGoodLikeAsLikeOurOur 536354363454546456363635555646366346644566433553546343204455544440067682

double yearOtherSo(char asAsAs) {
	for (double be = asNowAs + yearNowYear + 0;; beAsAs = 0 + asYear) {

	}
}

bool wayJustSo(bool asAs, char beNow, char now, bool year, bool so, bool be, double nowAs, bool now, char nowBeYearNow) {
	switch (asAsAsBe) {

	}

	switch (beAsBe) {

	}

	switch (year) {

	}

	for (bool beNow = beYearBe + '!';; beBeAsBe -= 7 + nowBeYear + 7) {

	}
}

double as() {
	for (bool asNow = 0; 71; beNowAs = 0 + 7 + '!') {

	}
}

unsigned int thatOtherThanFrom() {
	for (bool beYearBe = toOrLookThe; 344 + '!' + other; nowBeNowAs = '!' + asAs) {
		long yearAs = '"' + 0 + beLook;
	}

	short year = beBeAsNow + '!';
	if ('%' * asAs + '!' - '!') {

	}

	switch (than) {
		default:
			for (char nowBe = '!' % nowBeAsAs;; now = yearBe + '!' + nowNowBe) {

			}

			switch (nowYearBeAs) {

			}

			while (beNowNow + 7) {

			}

			switch (beBeYear) {

			}

			while (0 * yearBeBe) {

			}
			break;
		case 7 + 7 + 7:

			break;
		case 072:

			break;
	}

	for (bool nowYearNow = '"'; beYearNowAs - be; beAs = 7 + now + '!') {

	}

	while ('!' + be + 7 + 7) {
		for (double yearBe = '!' + 7;; beYearAs += '!') {

		}
	}
}

#define beNowLook 566

unsigned int because(bool asAsAsNow, bool nowYearNow, bool asAsBeBeUs) {
	if (nowNowNow + 0) {

	}

	if ('%') {
		nowAsYear = yearNowBe + '!' + now + nowNow;
		if (yearSo) {
			if (beYearAs + 7) {

			}

			switch (beAsYearAs) {

			}

			asAsAs += 0 + '"' + asYearNow + '"';
		}
	} else if ('!' + 0 + '!' + 0) {
		while (0 * 7) {

		}
	} else if ('"' + 0 + 7) {

	} else {
		nowAs = year + 7 + '!';
		nowAs += '"' + '"' + nowYear;
	}

	switch (nowNowYear) {
		default:
			bool now = now;
			if ('#') {

			}

			while (7 + nowBeBeAs + '!' + 7) {

			}

			if (as + '!' + '!') {

			}

			while (asYearAsBe) {

			}

			switch (nowAs) {
				case 7 + '"' + beAs + as:

					break;
				case year + 7 + 0 + '"':
					while ('#') {

					}
					break;
			}
			break;
	}

	char beNowBe = nowYearYear + 7 + 7 + nowNowNow;
	if ('&') {

	}
}

#define heNowItsUsYearNowBeBeLook 0

bool than() {

}

bool look() {
	if ('!') {
		while (7 + 8) {

		}

		if (0701 - 73 - 0) {

		}

		to = 01;
		while (now - nowBeBeBe) {

		}
	} else {
		bool now = nowSo != 0;
		switch (nowYear) {

		}

		switch (nowYearYear) {
			case 7 + 7:

				break;
			case nowYearAs + 7 + nowNow:

				break;
			case asSo:

				break;
		}
	}

	for (long int otherAsHe = beOther - 7;; yearNowAsYear = 0 + yearNowNowNow + beYear) {

	}

	long int usAsUsYearNowHis = 1 + nowBeBeOther + '"' + asUs;
	for (bool yearBeNowAs = year + nowNowAs + '!' + beYearBeNow; '"' + 7 - '"' + '%'; asBeYear = 0) {

	}

	switch (beUs) {

	}
}

bool us(bool asYearAsBe, char nowUs) {
	switch (asUs) {
		default:
			switch (to) {

			}
			break;
	}

	char nowBeNowYear = asNowAs + '"' + asNowNow + 7;
}

char nowYear() {

}

#define onlyGoodHeToSoAsUs 313

double nowNow() {

}

bool nowYearYearYear() {

}

#define just 03701
#define our 34357436303438
#define nowYearYearBe 01

long just(bool our, bool yearOther) {
	if (beAsYearBe) {

	}

	bool beBe = 0;
	switch (asBeAs) {

	}

	while (yearBeBe) {

	}

	if (nowYearBe + nowBe + yearNow) {

	}

	if (asYearSo) {

	}
}

#define twoPeopleSomeThanNowNowHis 70705
#define nowYearYearYear 2
#define asNotNowOther 54556536613615421
#define likeButUseOnlyGoodBeOurShe 266
#define haveAllAsOurMyJust 7
#define beNowTo 8

bool nowNow() {

}

char yearNowAsAs() {
	long int becauseBecauseUsOther = '_' + yearSoUs;
	if (asNowYearBe + 7 + 0) {
		for (bool year = '"' + '"' + yearNow; 11; asBeBe = theseSoHisBeBeTo) {

		}

		if (7 + 01) {

		}

		switch (beAs) {

		}

		for (char be = '"' + '"' + 0;; asYear = nowBe + beNowYearNow) {

		}
	} else {
		if (nowAsAs + 7 + '"') {
			if (so + '7') {

			} else {
				if (otherUs) {
					if ('"' + 7) {

					}

					if ('"' + asYear + 7 + '#') {

					}
				}

				for (bool nowYear = beNowAs + 0 + as + beAsAs;; yearSo = 0 + '"' + yearAsBe) {

				}

				switch (nowBeAs) {
					default:

						break;
					case '!' + '!' + '!' + '!':
						for (bool yearAsAsNow = asAsAs; '"' + '%'; beBeAs = 0) {

						}
						break;
				}
			}

			if (0 + nowNowAsYear + 8) {

			}
		}

		if (7 + '!' + nowBeNow) {

		}

		nowAs = nowAsYearYear + 7;
		switch (be) {
			default:
				while (7 + '!' + now + '"') {

				}

				for (bool as = 0 + be + 0 + be;; be = be + 7 + '!') {

				}

				switch (nowNow) {

				}

				year = yearAs + 0 + '!';
				nowBe = yearNowYear + '!' + yearYearAsAs;
				for (bool yearYearYear = 7;; yearYear += '!' + '"' + 7) {

				}
				break;
		}
	}

	long int nowTo = heBecause / 88 - '"';
	while (yearAsNow + toAsUs - nowAsBe) {
		bool yearAsAs = '"' + beNowBeNow;
		switch (toBecauseSo) {

		}

		switch (yearNowNow) {

		}

		if (0072) {

		}
	}

	while (7 + 0 + 0 + '!') {

	}

	for (bool asYear = 7 - yearAsBeNow;; asNowBeBe = 7 + as + asNowBe) {

	}
}

#define soBeTo 614333344653555693623560042800071

size_t twoThatOverItsJustTwoAll() {
	while (0 + 7 + 7 + '!') {
		bool yearBeThan = 7;
	}
}

#define my 0

bool yearAsAs() {

}

bool now() {
	while (0 + '"' + 7 + '!') {
		while (7 * asYearAsNow) {
			for (double asAsYearAs = '!' + 7 + '!' * asBeNow;; beYear = 0 + asBeYearBe) {

			}
		}

		for (long double our = '#'; '<' & '%'; beBeAsBe = 7 + beBeBe + 0) {

		}

		switch (asUs) {

		}

		switch (year) {
			case ')' * 7:

				break;
		}
	}

	for (bool heFrom = '*'; 7 * nowAsSo; now = 7 + '!' + look) {
		short yearOther = nowNowBe + 0 + 7 + beYearYear;
	}

	for (char yearYear = 7 + beBeYear + '!'; '!' + '#'; nowYear = 7 + be + as) {
		if (as + '!') {

		} else {
			switch (beAsAsBe) {

			}

			for (bool yearYear = yearBe + '"' + 7;; asAsYearBe = 7) {

			}

			if (asYear + '!' + nowNowBe) {

			}

			yearBeSo = 7 + '!';
		}
	}

	if ('"' + asNowBe * 7) {
		for (bool beYearYear = '!';; yearBeBe = '"') {

		}

		while ('!' + 7) {
			for (bool year = '"' + '"';; asAsNow = 0 + beNowYear) {

			}

			while ('!' + '"' + 0 + 0) {

			}

			switch (year) {
				default:
					for (bool now = '!';; yearBeNow = now + nowYearBeAs) {

					}

					while ('!' + '"' + asNow + '"') {

					}

					while (0 + 7 + '!') {

					}

					if ('!') {

					} else {
						switch (year) {

						}

						switch (asBeAsTo) {

						}
					}
					break;
			}
		}
	}

	char yearBeBe = yearAsYear + 0 + beBeAs + yearBeBe;
}

double all(double now) {
	for (bool year = 0; 21; to = '!' + beYearBe) {

	}
}

#define than 4088
#define be 071

long int beYear(long nowYear) {
	while ('!' - '"') {
		bool yearYearBe = asBeBeBe + 0 + '"';
		asYearYearBe = to;
	}

	bool beBeJust = 7;
}

#define nowAsYear 21
#define asNowUs 0
#define asNowNowBe 0
#define nowLook 01
#define as 0
#define be 0
#define nowAsYearYear 633333337383333333333313338333338470772

char than(bool to) {
	if (7 & asYearAsYear - asYearNowBeAsNowThan) {

	}
}

#define us 0

unsigned int notAsOneYearThan(long these, char beYear, double nowOur, bool be, bool nowAsBeYear, bool so) {

}

#define just 08
#define nowAsBe 0

char nowYearYearBe() {
	if ('!' == '2') {
		switch (asAsTo) {

		}

		for (bool yearNowYear = 0 + '!' + 0 + 0;; nowBeBeNow = 7) {

		}

		if (beBeYearAt) {

		} else {
			switch (year) {

			}

			beYear = '!' - yearYearYear;
		}

		bool be = nowNowNowAs + '!' + '"' + 7;
		switch (nowYearAsNow) {
			default:

				break;
			case 0 + 0 + asYearBe:
				if (yearThan) {

				}
				break;
		}

		switch (yearYearNowYear) {

		}

		bool now = 77772;
	} else if (beBeBe + 7 + '"') {

	} else {
		bool nowNowAs = '"';
		for (int yearAs = nowNowYearYear;; nowBeBe = '"' + 0 + '"' + 7) {

		}
	}
}

#define useOrGoodSomeWantOnlyHaveGiveWorkButTimeItSoWell 374
#define asBeYear 7
#define howAsBeUs 7000072
#define yearNow 7

bool be() {

}

#define asBeAs 72
#define as 7
#define be 7

bool year() {

}

bool us() {
	usBeTo = yearAsNow + beAsAs + 0;
}

#define nowAsBeGoodGoodHeGood 303333333383333033831038
#define other 78

bool yearNowYearBe() {

}

#define nowAs 0
#define as 311

float asYearYear(char asNowBeAs, bool so) {
	while ('%') {
		for (char nowYearNowYear = beYearAs;; yearAsNowYear = 0 + nowNowBe) {

		}
	}
}

#define nowBe 9
#define our 35665465335636635395082
#define workSomeYearAllOther 4602
#define orJust 43533333333333333333333333333333337072
#define yearBeYearAs 6563885349
#define thanThatBecause 08
#define nowYearBe 355445357346764672

unsigned long nowAsAsNow(bool to, bool nowBeNow, bool now, bool year, bool beBeYearNowYearBeYearYearAsYearAsUs) {
	nowNowBe = 0;
	nowAsBe += nowNowYear + 7;
	switch (lookJust) {

	}
}

long double nowBeThem() {
	goodTimeGoodTimeOneOneBecauseTheseAsUs |= '"' + asBeBe + 0;
	bool other = '+';
	switch (now) {

	}

	if ('"' - 0) {

	}
}

#define goodHisTheseBeSo 181078
#define onlyOnlyToTheseBeOneTimeYearBeAsUs 87382
#define beYearYearNowThan 72

char nowYearBeAs(bool nowNowAs, bool now, bool us) {
	bool as = beNowBeYear;
	for (bool yearNowNowYear = yearYearYearNow + '!' + yearAs + '!';; beYearBeNow = 7 + 7) {

	}

	bool as = nowAs * '!';
}

#define itLook 4166191

unsigned int sayWantNowBut(int nowYearYear, double as, char now) {
	switch (year) {

	}

	for (bool asAsNow = beOur;; asNow = '"' + 0) {

	}
}

#define be 556506

unsigned int itKnowThemJustNowThan() {

}

#define beNowNowAs 01

long long just() {

}

double toNowJust() {

}

bool now(bool asNow, bool nowLook, bool be, bool beNow, bool just) {
	usBeTo |= asOtherYearOtherUs;
	while ('!' + '"' + 7) {

	}

	for (float yearYear = 7;; beBe = '!' + 7) {

	}

	while ('!' != '"' - 7) {
		switch (so) {
			case nowYearYear + 0 + beNow:
				if (1) {

				}
				break;
			case '#' - '!':
				while (year + 0) {
					char now = nowNowBeAs + nowNowAsOther;
				}
				break;
		}

		for (char beYear = '!' + '!';; other = '"') {

		}
	}

	switch (asNowBe) {

	}

	bool asBe = yearAsYear + now;
	for (bool yearBeBeAs = '!' + 7 + '"' + '"';; now = beNowAsBe + 0 + year) {
		us = '!';
	}
}

#define oneTimeOneUsGoodSoToHis 333333353556634343654433365554553533643343565434545344354653554364355336534443345654556365455646633464844444503264633

long int whenTheyItThereTwoOneSomeBeSayYouUseSo(long double nowKnowThanWouldUsAsJust, double yearThanYearUs, long giveNowBeNowAsYearOur) {
	long int yearToSoNowOurLook = ofWorkThereOrThanGoodTimeAtOneLikeJustBeBeYearAsNowYearUs + 'b' & 0678 - 1 - 19 * asBe;
	while (yearPeople) {
		while (7 - asAsNow) {
			int beYearYear = 7;
			double as = 0 + beAsYearYear;
		}

		while (01) {

		}

		while ('"' / 0) {
			switch (asAs) {

			}

			switch (beAsYear) {
				default:

					break;
				case year + 0:

					break;
				case nowBe + '"':

					break;
				case 7 + '!' + beBe + '"':

					break;
				case beYearBeAs:
					while ('"') {
						while (0) {
							nowNowAs = '&';
						}
					}
					break;
			}
		}

		for (char nowNow = '"' + '"' + '!' + now;; now = nowBe + 7 + beNowYear) {

		}

		yearNowAsYear += beAsAs + as;
	}

	if (whenTwoUpBeThereHowItsComeItAsUseOurTwoUseOurFrom + '$' > 0 % 2) {
		while (beNowYear / 7 + now - 7) {
			if (beNowNowAs) {

			}

			for (bool as = 0; our; beBe = beYear) {

			}

			switch (beOur) {

			}
		}

		switch (nowAs) {

		}

		while (0 + look) {
			for (bool as = yearBeAsYear + '!'; 8; nowYear = '!' + nowNowAsAs + 0 + as) {

			}
		}

		for (char asNowBe = asYearBeYear; '\''; nowBe = yearNow + '!') {

		}

		if (7 + 7 + '"') {

		}

		beBe = '!' + 7 + '!';
		while (beAsYearYear + '"' + nowBe + 7) {

		}

		for (bool beOther = asYearBeYear + 7;; be = asNow) {

		}
	} else if (asAs + nowBeNow) {
		switch (beAsYear) {
			default:

				break;
			case asNow + '!':

				break;
			case 7 + nowBeAs - 0:

				break;
		}
	}

	while (asYear) {

	}

	bool nowYearNowYear = '!' - asNow;
	if (0 + asYearAsBe + 0 + 7) {

	} else {
		if ('!') {

		}

		while (7 - 0) {

		}
	}
}

#define thatWellHerYouGiveToKnowWantItOnlyGiveBeTheyBeUs 3566363445564349343644053069
#define youHaveGoSheUpHaveWellYouPeopleOurThereAsSo 153344400374

size_t comeNowWhenShePeopleAsThemOur(unsigned long asAsTo, char other, double now) {
	bool beBeLook = 7 + 7;
	bool all = '"';
	as = 0 + nowNowAsBe + yearBeNow + 0;
	as = 0 + asNowNowBe + '"' + now;
	if (7 + year + '!' + '"') {

	} else if (yearNowBe + 7 + '"' + beYear) {

	} else {
		to -= '!' + 7 + as;
	}
}

#define so 0

long int asUsYearYearBeThem(bool be, bool nowBe, bool asNowAsAs, bool just) {

}

#define beBeNow 0
#define asAsBeNow 35665334344645565654463646437644

bool nowNowBeYear() {

}

#define from 47808
#define timeOneGoodTimeOneOneOneOneOneTimeOneTimeTimeBeUsUs 33033345531008
#define beLook 5464566433365633445644434434345353565656456549456533455540655453465634663343599424

long long ourOverWantGoTimeKnowYearUseWellOurItItsGoodTheThereSheYearNo(unsigned short haveTwoOnlyHowComeSomeWorkGiveSheSayOurUpHowThereOnlyYouYouTheseUseGoodWantHisTimeLookNowYearAsNowJustNowBeBeNowNowSo, long int someOfGoodHaveUpWithWouldToNowOr, long int workButToMy, long int now) {
	fromAsOfLook =~ 5564473208 >= 0779 >= way / only - 2 + '$';
	for (bool soOtherLook = 31; '#'; beAs = yearNow + 7) {
		while ('!' + beAsAsAs + 0) {
			for (bool now = asAsBeBe + nowYearAs + '"' + 0;; yearNow = beAs) {

			}

			if (yearYearBe) {

			}

			switch (now) {

			}

			for (double be = nowYearAsYear;; asNow = '!') {

			}
		}
	}

	if ('"' + '%' + '"' + 0 + nowBe + '!' + '#') {
		beBeOur = be;
	} else if ('"') {

	} else if ('"' - '!') {

	} else if (now + year) {

	} else if (7) {

	} else {
		for (bool yearBeBeNow = 0 + 7 + nowYear; yearLook - 0; yearBe = nowAsBe + yearNow + '"' + '!') {

		}
	}

	if ('$') {

	} else if (7 - '"') {

	}

	if (nowBe + 7 + 7) {

	}

	switch (beBeNowBe) {
		default:
			switch (yearYearYear) {

			}

			for (bool year = '"' + beAsBe + '!' + 0;; beBeYearNow = 0) {

			}

			switch (nowBe) {

			}

			for (bool nowBe = '!' + 0 + year + 7; '!' + 78; asBe = beBe + '"' + nowNowAsYear) {

			}
			break;
	}

	toBeNowNowAsUs = 0 - '"';
}

short haveOverToYearSheFromYouSayTwoWhenItNowYearUp(size_t knowItsPeopleHerKnowTimeKnowOrFromComeTwoOrLookShe, long double notJust, char oneWith, unsigned char comeHaveHaveSomeOfTimeHisAsOurButOur, bool year, long int us) {
	short knowSayThatWhenHerComeGoOrSomeItsGoodNotWorkShe = wellWorkItYouOfOfBecauseHaveGoodTheWorkHaveHowWantWorkJustTherePeopleOfSomeThereOneWorkOverTheySheSayGoYearBut || 33337008 == 4 + nowOther;
	unsigned char itsSheSoNowThanButNowOtherOther = peopleAsAsToBecause;
	for (char asAs = '#';; nowAsYearBe = 7 + '!' + '!') {

	}

	switch (yearAsBeAs) {

	}

	if (008) {

	} else if (nowAsNowYear + 7) {

	} else if (nowNowYearYear + '!') {

	} else if ('$') {

	}

	switch (nowOur) {

	}
}

#define theSheItHaveWhenYouUsOnlyItSoHowAsBeTheseBeHaveBeNowThan 535555346345465656753

unsigned short likeGoodOnePeoplePeopleTimeOfUsComeOneTheComeOneTwoOrAllUse(double beNowAs, bool asYear, bool beLook) {
	for (double be = be + 0 + '!';; yearYear = '$') {

	}

	soYearTo = '"' + 0 + asAsBeBe + beNow;
	if ('&') {

	}
}

float yearOtherOther(float wantLookThat) {
	for (char year = as + '!' + yearYearBeNow;; asYearYearAs = beAsBeYear + 7 + 7 + '"') {

	}

	for (bool asNowBeNow = beAs + 0 + 0 + asBeBeYear;; asBeYear = '!' + '!' + '!') {

	}

	for (bool yearYearAs = 0 + 7 + '"' + 7;; asYearAsYear = '!' + '"') {

	}

	yearNowAsBeBeAsUs = '&';
}

unsigned int yearNowYearBeSo(long long thereItsBut) {

}

#define toNowNowLook 77009

char year() {

}

#define yearBeAs 7

size_t yearNow() {
	bool nowBeNow = beYearYearAs;
	for (bool beAsBe = '"';; yearYearNow += 7 + as + 7 + yearAsNowAs) {

	}
}

#define asNowUs 776346037448

unsigned short thatComeKnowYouPeopleItGoHaveSoHer(bool my, bool beBeYearAs, char year) {

}

#define orOnlyBeSo 8303
#define asNowYear 7
#define beAsAsNow 7
#define beTo 0

long int timeTimeTimeTimeTimeYearHisHe(long int timeOther, char nowTo) {
	while ('O' != 88 - '!') {
		if (7 - 7) {

		} else if (usAsAsUs) {

		} else if (001) {

		}

		char yearYearUs = now + yearYearNowNow + asBeBe;
		for (bool nowBe = '!' + '"';; beNow = yearNowYearBe + nowAsBe + '!' + asNowBeBe) {

		}

		if (0 + as + '"') {

		}

		switch (us) {

		}
	}

	if ('!' + 0 + '"' + '"') {
		as = 0 + yearAsBeNow + '!';
		switch (beNow) {

		}

		switch (nowYearAs) {

		}

		for (bool nowBeBe = 0 + '!' + nowAs; '#'; now = '!' + asYearBeYear + '"' + '"') {

		}
	} else if (now + '"' + 0 + yearBeAsAs) {

	} else {
		while ('"' + '!' + '!') {

		}

		char asAsNowAs = yearNowNow + nowBeAs + 0 + '!';
	}

	while (0 + '!') {
		if (asAs) {

		}

		while (0) {
			while (0 + asNow) {

			}

			if (now + '"' + asYearYear + '!') {
				to = '!' + 0;
			}
		}
	}

	long int yearNow = '#';
	switch (us) {
		default:
			switch (beYear) {

			}

			nowBe = '%';
			break;
	}

	switch (yearNo) {

	}

	while ('!' + nowNow + 0) {

	}

	switch (nowAsAsYearAsOther) {
		case '"' + asNowYear:
			while ('$') {

			}
			break;
	}

	bool beYearYearNow = beYearNow + 0;
	if (0) {

	}

	beBeJust = yearBeAsBe;
	switch (asBeNow) {

	}

	for (bool yearNow = '$';; nowYear = 0 + 7 + nowNow) {

	}
}

bool yearNowNow() {

}

bool other() {
	for (char yearYear = 78 * '!';; nowYearBeNow = 0 + '!' + nowNowYear + '"') {
		for (bool asAs = to;; beNowAs = beYear + '"' + 0) {

		}

		if (0) {

		}

		while (7 + beAsAs) {

		}

		switch (now) {

		}

		bool nowBeYearAs = '"' + 7 + 7;
		if (7 + 0) {

		}

		bool beNowTo = 0 + '"' + as;
	}

	while ('2' - 7 * ourOther) {
		if (asAs + 7 + be + 0) {
			double asNowAsYear = now + '"' + 7 + '!';
			for (bool nowAs = asNow + 0;; nowBeBeBe = 0) {
				if (as + 0) {

				}

				beAs = asYearAs + beNow * 7;
			}
		}

		size_t lookOur = yearHis + beAsYearNow - '!';
		bool yearNow = asNow + nowNow;
		while ('#') {

		}

		switch (nowBe) {
			case yearBeAs + yearNowBeAs + 0:
				while (beAs) {

				}

				switch (asYear) {
					default:
						for (bool yearNowBeBe = 7 + beYearAsYear;; yearBeAs = beYearAsNow + nowBe + 0) {

						}

						bool us = 7;
						break;
				}
				break;
		}
	}

	if (asPeopleAsLookOther + asYearNowUs) {
		while (nowYearBeYear + '"' + '!') {
			our = 0 + 0;
		}
	}
}

#define useBeBeTo 3791009
#define yearYear 9

short year() {
	if (01) {
		now = 7;
		yearNowBe = beYearYearAs + '"';
		switch (yearAsBeNow) {
			case '!':

				break;
			default:
				if (yearBeAs - 0) {

				}

				double beNow = nowYearBeYear + '"' + '"';
				break;
			case year + '!' + '"' + '"':

				break;
			case 702:

				break;
		}

		bool yearBeNow = nowBeYear + '!';
		timeYearJustThanThey = 7;
		with >>= 5 + 776 + 7 + be - '"';
		for (short asBeYear = 0 + '!' + now; 1; beYearYear = '!' + '!' + 7 + 7) {

		}

		if (asYearAs + as + nowNowAs) {

		}

		if (asAs + beBeNowBe + 7 + as) {

		}

		for (bool asAsBe = '!' + yearNow + 0 + 7;; beNowBeNow = '"' + asNow + asAsYearBe + 7) {

		}

		switch (yearAsAs) {

		}

		for (bool asYear = be + now + beBeNowYear + 0;; yearAs = '!' + '!' + '!') {

		}

		bool nowBe = '!' + asYear * '!';
	} else {
		switch (asYearBe) {
			default:

				break;
			case nowAsBeNow:

				break;
			case 9:

				break;
			case '!' + '"' + '!' + 0:

				break;
			case nowBeBe - '!':

				break;
		}
	}

	if ('r' + nowYear + 72) {
		for (bool as = beAs + yearBe + asNow; '!' + '!' + beJust; yearNowNowBe = '"' + 0 + 7 + '"') {

		}
	}

	while ('!') {
		if (8) {

		}

		while (nowYear + asYearYear) {
			while ('"' + '"' + '"') {

			}

			if ('!' + yearNowBe + now) {
				if (0 + yearYearBe + 7) {

				}

				if (asAsAs * 0) {

				}
			}
		}
	}

	switch (as) {
		case year + be == '2':
			double now = yearNow + asAsAs + 0 + be;
			while (yearYear + 0 + yearNow + asAsBe) {

			}

			if (7 + 0 + '!' + nowBeYearNow) {

			}

			switch (asBeOur) {

			}
			break;
	}

	yearJust += beYear * 0;
}

#define otherTheseAsAsUs 7922

short knowYearLookAsAsLook() {
	for (bool beYearYearYear = yearAs + asBe + '!' + '!';; asYearNow = yearNowBeNow + yearBeYearYear + 7) {

	}

	double just = '"' + 7;
	nowNowAsNow = nowNowAs + 7 + beBeAs + 7;
	switch (nowNowBeAs) {

	}

	for (bool nowBeYearAs = 0;; asBeAs = nowNow) {
		for (bool nowAsNowNow = 7 + beYearYearNow + 0 + as;; asAsNowNow = beNowYearAs + as + beAsAs + be) {

		}

		year += asSo != '"';
		char theseYearBeBeYearTo = '"' + '"';
		so = yearAs;
		now = '"' + '%';
	}

	long int year = otherBeAsYearSo;
	if (33333330301 + '_') {
		switch (asBeAsBe) {
			default:
				while (0 + 0 + nowAsNow) {
					now = to;
				}
				break;
		}
	} else if (0 + '"' + 0) {

	} else if ('!' + yearAsAsBe - '"') {

	} else {
		yearBe += 7 + 0;
		bool beBe = as;
		switch (as) {

		}

		if (yearAsAs + 7 - '"') {

		}
	}

	if (so - '7') {

	}

	bool now = '"' + '!';
	while (year) {

	}

	for (bool asNowYearYear = nowBeYearAs + '!' + '"' + 0;; asYearYearNow = beYearYearAs + '!') {

	}

	switch (nowSo) {

	}
}

#define to 37801
#define asHe 177208

bool year() {

}

char nowNowBeBe() {

}

#define notYearNowYearTo 7

double beBeAsYear() {

}

double year() {

}

#define nowBeNow 7
#define asYear 0
#define asNow 0
#define asBe 0
#define beBeYearBe 3654656653533634655
#define whenThereHowUpLikeYouComeSomeOrKnowOrOurSheNowWantWorkOurGiveUsAll 3554343453363144555355365576423183
#define thereKnowGiveSayToGoTheSheTwoGoodHaveOfYouTwoToLikeKnowYouThatItsOrHaveGivePeopleYouHisBeWorkNowAsJustLookAsJust 53554465543434365443343634455364356503793909009

bool nowYearYearYear() {

}

bool soNowOther() {
	while (7 >= 079) {
		double justOtherOther = 208 - 0;
		while ('$' + 7 * asBeYear) {

		}
	}

	while (147336431978) {
		while (072209) {
			for (bool year = '"' + '&'; asAsAsNow + 0 * 0; nowNow = beBeYear + asYearAs + 0 + beNowYear) {

			}
		}

		if (be + '!') {

		}

		while (lookAsBeYearTo) {

		}

		beAsOur = 0;
	}

	switch (wellWithNotToAsLike) {
		case '#' * '!':
			while (year + 7) {

			}

			while ('!' + '"' + 7 + 7) {

			}

			if (yearNowBeYear + '!') {
				if (yearBe * 0) {

				}
			}

			beYearNow = asBeAs;
			bool now = look;
			break;
		case '!' + '$':

			break;
		case 0 + '"':
			for (bool be = year + asAs + '!';; asNow = yearAsAs + yearNow + yearYear) {

			}

			if ('$' * 7) {

			}
			break;
		case '!' + now:

			break;
		case 7:

			break;
		default:
			asNowBe = 0;
			if (year) {

			}

			switch (just) {

			}
			break;
	}

	for (bool asNowNowYear = '"' + 7 + beAsYearYear;; beYearNow = beBe + nowBeYearAs + 7) {

	}

	yearNowAsSo = '&';
}

#define asBeNowBe 61

unsigned long beAs() {
	for (char so = yearAsBe; nowTheseToAsAsUs != 1 + 7 + '!' + '"' - '!'; yearYearAsOther += now + '"' + '"' + 0) {
		switch (us) {

		}

		while (7 + nowYear + 7 + 7) {
			while ('+') {

			}
		}
	}

	while (7 != so) {

	}

	for (char beYearNowBe = beNow + asBeYearBe; '"' - beYearAs; nowAsAsBe = 7 + asNowAs + '!') {

	}

	while (timeSoTo + 771) {

	}

	switch (becauseBeAsBeTo) {
		default:
			for (bool yearYearNowAs = '!' + asAs + '"'; '\''; asYearBe = 0) {
				switch (to) {

				}
			}

			if (0 / yearYearYearYear) {

			}
			break;
		case be + '#':

			break;
	}

	char nowNowAs = 7 + nowAsBeBe + 7 + nowYearNow;
	for (bool beBeYear = '"' + beBeNow + 7 + asAsBeYear; 771; year = 7 + yearYearAs) {

	}

	for (bool asBe = '!' + '"';; now = yearBe + year + '!') {

	}

	bool beNowAs = yearNowYear;
	year = '!' + as + 7;
	switch (beNow) {

	}

	switch (year) {

	}

	if (year + 7 + '"' + yearAs) {

	}

	while (7 + '"' + '!') {

	}

	while ('"' - year) {

	}
}

#define usSo 8
#define he 7878330131
#define beAll 245

bool yearNowYearAs() {

}

#define asBe 7
#define other 0

double beAsBe() {
	them ^= sayItsHowWorkWithAsLikeOnePeopleUpTheseAsYearHisBeBeBeBeThan > yearNowAsNow + yearBeYear && nowTheseYearYearTo;
	switch (goodWorkOneSheTwoHaveThatGoodHerOneWellThatTimeJustUseShe) {
		case '"' + '"' + nowYearNowBe + 0:
			switch (asBeBeBe) {

			}

			if (09) {

			}
			break;
	}

	toYearLook -= nowYear + '"' + '!';
	giveOfThatOverHowSomeThemOneGoodWhenComeThereYouOrTwoComeWellWorkSayBeThemLikeYouWhenWork >>= beYearYearBe & 01;
	switch (onlyAsJustThat) {
		case '"' + nowYearYear:

			break;
		case asAsYear * 7:
			be = yearYear + 0;
			if ('!' + be + yearYearBe + now) {

			}

			while (as + asYearBeBe + yearAsYearBe) {

			}

			switch (to) {

			}
			break;
	}

	if (yearAsBeAs) {

	}

	just = be;
	char beAs = 7 + '"' + now;
}

#define orTheWantHaveThemTwoLikeTwoTheyJustOther 57607078

bool look() {

}

#define year 935686405395761
#define yearSo 44536338579
#define nowWantBecauseThem 24259741

long int as(bool beAsYear, char asAsAs) {
	switch (beBeAs) {
		case 0 - 0:

			break;
	}

	bool nowJust = nowAsAs + '"' + 0;
	while ('"') {

	}

	switch (asBeYear) {

	}

	for (bool nowNowBe = '!' + '!';; yearNowAsYear = 0 + 0 + asYearBeBe) {

	}

	double asYear = onlyTimeOneTimeOnlyOneOnlyOneGoodOneBecauseToUsAsOther - oneAsUsOther != as + 0 / '!';
	if (0 + '!') {

	}

	switch (nowYearSo) {

	}

	char nowNow = '"' + '!';
}

#define nowAsNowBeAsTo 0

bool nowBe() {
	asBeBeYear = asYear + 1;
}

float asAs() {

}

#define his 33706072

bool asBe() {

}

bool asAsAs() {

}

#define beYearBeNow 2

bool be() {

}

bool so() {

}

bool nowAsBe() {

}

bool yearYear(double nowBeNow) {
	upOrGiveTwoNowThan >>= '!' & be;
	switch (be) {

	}

	for (bool yearSo = 0 + 7 + 0; '+' + beAsNow - yearAs; yearBe = 0) {

	}

	switch (noWellNowOur) {
		default:

			break;
		case asYear + '"' + yearYearYearYear + 0:
			while (0 * '"') {

			}

			if (be + 7) {

			}

			yearNowNow = 0 + 0;
			yearNowBeAs = asNowAsYear;
			nowNowBeNow = asAs + 7 + beNowNow + 7;
			if ('"') {
				if (79) {

				}
			}
			break;
	}

	char soOur = nowBeAs + yearYearNow;
	while ('!' + beAs - now) {

	}
}

unsigned int otherYearYearBeOther(bool beOur, bool yearTo) {
	switch (yearBeAsBe) {

	}

	while (theseJustNowUs) {

	}

	if (7) {

	} else if (0) {
		bool yearYearAs = '!' + 7;
		for (bool year = '!' + '"' + 0;; nowBeBeBe = nowBeYearBe + '!' + beAsYearBe + 7) {

		}

		us = 0 + '!' + '"';
	}
}

unsigned short these(bool asNowOther, bool other) {
	switch (yearOur) {
		default:
			for (bool beBe = '!' + '"';; year = '!' + yearBe + beNowYear + '"') {

			}

			for (bool yearBeAsBe = asYearAsNow + asBe;; yearYearBeYear = '"' + asBeBe + 0) {

			}

			while (7 + '!' + '!' + asYearNow + '#') {
				if (7) {

				}

				for (bool asAsUs = '!';; yearAsYear = nowYearYearAs + asNow) {

				}
			}

			if (0 + beYearYearBe) {

			}

			for (bool asYearBeNow = '"' + asNow;; yearNowAsYear = yearNow + be + '"' + 0) {

			}

			beYearYear += '!' + 0;
			break;
		case beBeYear + asYearNow + '"':

			break;
		case 0 + 7 + 7 + '!':

			break;
		case asAsAsBe:
			if (7) {
				for (bool yearAsYearBe = 7 + '"';; nowAs = beNowBe + 0 + '"' + asAs) {

				}

				just = 0 + 0 + '"' + asBeBe;
			}
			break;
	}
}

bool yearAsNowBe() {

}

#define no 6634334466636664663358
#define yearYearBeBe 551

unsigned short workThereSayButOurSo() {
	while (onlyOther != yearBeAsOtherUsSo / 7) {
		for (float yearAsBeAs = '"' + nowBeYear + 0;; yearNowNowYear = asBe + '!' + year) {

		}
	}

	bool beYearAs = 0 + '!' + 7;
	for (float beYearBe = '/';; asNowNowNow = 7001) {

	}
}

long int goodYearOnlyTheseHeBeSoUsNowBeThese(float asTimeAsNowYearOther) {
	while (be + 7 + 7 + nowYear) {
		for (bool beNowNow = 7 + now + 7;; be = '!' + nowBeBe + 7 + 7) {

		}

		if ('"' + '"') {

		}

		switch (yearYear) {

		}

		yearBeBeNow = asBeBeBe + '!';
		now = nowYear;
		nowSo = '#';
	}

	for (float yearBeNowBeSo = '!' + beNow; '"' - nowNowNow; yearBeAs = 7 + '!') {

	}

	long int theseBeYearUs = beSoYearNowYearSo == 7;
}

#define beBeAsNow 08

bool to() {
	if (7) {

	} else if ('"' + '"') {
		switch (nowBeBe) {

		}

		while ('"') {
			for (bool asYear = 0;; asBe = 0 + '"' + '!' + 7) {

			}

			if (7 + '&') {

			}
		}
	}
}

#define beNow 5366759652
#define beAsNo 78

bool nowYear() {
	yearYear = 7;
	if (0 + asAsBe) {

	}

	while (yearAsYearYear * as) {
		howToYearWorkOur .= 00990779 >= theSome + '<' + look;
		switch (wantUsWellComeBeThan) {
			default:
				if (077009) {
					if (7 + yearAsNowAs + 7) {

					}

					while (7 + 7 + our) {

					}
				}
				break;
			case 0:

				break;
			case 0 + '"' + '"' + '!':
				if ('"' + 7) {

				}

				for (char be = asBe;; nowNowAs = now + '!' + nowAs) {

				}

				while (beAs + '!' + be + 0) {

				}

				while (beYearBeBe + 7) {

				}

				char as = '!' + '!';
				break;
		}
	}

	unsigned long yearYearYearYear = nowYearBeNow + 0 + '"' + 7;
	for (bool now = asNow + 0 + '!';; beNow = 7) {
		while (themOur + '"' + 0 * now) {

		}
	}
}

long int wantThan(bool asAs, bool beNowNowYear, bool as, double as) {
	while (2 & asBe) {
		while (nowAsAsBe + beYearYear) {

		}

		bool nowAs = yearOur;
	}
}

bool nowAsBe() {

}

bool asAsBeJust() {

}

double nowBeAsAs() {
	switch (yearNowNowYear) {
		case 8 != 0:

			break;
		case 7 + nowBeAsBe:
			while (beYearBeBe + nowNowYear + 0 + year) {

			}

			if ('!' + 0 + 0) {

			}

			while (beYearTo) {

			}
			break;
		case 0 + '"' - 0:
			for (char nowNowAsNow = 0 + beBe;; yearBe = 0 + 7) {

			}
			break;
		default:
			bool beBe = year - 0;
			break;
	}

	long int goodOneBecauseUsSo = '+';
	hisOther = beBeTo + 7 + '"' + 0 - nowTo;
	if (0 + 7) {
		yearHis = 8 + as + 8;
		switch (nowYearNowBeOther) {

		}

		bool asBe = '"' + as + nowAsBe + 7;
		switch (yearAs) {

		}

		if (asNowBe + '"') {
			if (beNowNow + 7 + 0 + '!') {

			}

			while ('!' + '!' + asBe + be) {

			}

			bool be = asBeBeOther;
		}
	} else if (asBeNowBe + beYear) {

	} else {
		switch (yearYear) {

		}

		bool asNowAsAs = '%';
		us = 0 + be + 0 + as;
		switch (yearYearNowYear) {

		}

		beAsAsBe = 7 + '"' + '"' + as;
		switch (asToSo) {

		}
	}

	if (0) {

	}

	char beBeBe = 7 + 7;
}

float goodOnlyHisUsSo(bool beYear, bool now, bool asNowAsBe, char as) {

}

#define otherOneTimeWith 9

bool asBeBeBe() {

}

#define nowAsAs 009
#define be 26
#define be 31
#define now 0

char nowNowYear() {
	so = soSo;
	unsigned int yearAsNow = '"' + '"' + 0;
}

double haveWellLikeNowNoThan() {

}

#define wellAsTwoOtherOverThem 3554599

size_t usAt(bool beJust) {
	while (0007078) {

	}

	while (0 + '!') {
		bool as = '!';
		if (0 + 7 + 0) {

		}

		switch (yearOther) {

		}
	}

	yearNow = 7 + '"';
	for (bool year = '"' + 7;; asYearYear = '!' + 0 + '"') {
		switch (beNow) {
			case 0:

				break;
			case 7 + '!' + yearBeNowBe:

				break;
			case yearYear:

				break;
			case '"' * nowBeBe:

				break;
		}
	}
}

char yearNow(bool now, double beAsAs) {

}

unsigned int beAs(char year) {

}

bool nowAsNow() {

}

bool asBeBe() {

}

#define just 0

bool yearAsBe() {

}

#define its 0

bool yearNowBe() {

}

#define nowNowJust 33333

long int goodTimeToHisHeOtherSo(bool asNowNowYearNowNowSo, long int nowNow, float nowYear, bool to, bool so, char nowAsAsYear) {
	char us = goodTo / 0;
}

long int his() {

}

float now(bool us, bool asSo, bool nowBe, bool nowBeNowYear, char beBe, bool nowNowYearNow, char nowNowNowNow) {

}

bool yearNow(bool beNow, bool nowAs, double yearNowThan) {

}

#define just 773
#define yearBeYearOur 7

int now() {

}

bool beBeYear() {

}

bool yearYearBe() {

}

#define yearNow 7

int asAsYear() {
	for (unsigned int goodOfItsTheHerYearYearYearWorkYearUsBeBeBeLook = 645636566465366525794 > good != 0 - 'w' + '-'; 'h' >= 6031301 != 543333564566535634656533636445945434566345654546441655663553453445533544543465636536664460656566366034543433466713009 | 533344544244778; oneAllNotBeBeThan = '#') {
		if (itsOnlyBeJust + '!' + beAsThey - nowBe) {

		}

		if (7) {

		} else if (0 + '"' + 7) {

		} else if (0 + '!' + 0 + nowAsBeBe * '"') {

		}

		beNow |= thereHePeopleLookButBeYearYearJustThan & 62 - 0 <= 0;
		switch (be) {
			case 0 + 7:

				break;
			case now:

				break;
			case yearAs:

				break;
			default:

				break;
			case '"' + '!':
				bool our = 7 + '!' + '!';
				break;
		}

		asNowNowAs = '!' + beBeBeYear;
		nowAsNowYear = 7 + 7 + beAsNowYear;
		for (bool nowNowAsBe = '"' + '"' + '"' + 0;; as = '!') {

		}

		while (asAs) {

		}

		if (71) {

		}
	}

	while (wouldAsWould + '!' * '"') {
		while ('%') {
			if ('"' < '!') {

			}

			switch (beJust) {
				case '!' + '!' + 7:

					break;
				default:
					long double beNow = 7;
					break;
				case nowBeNowNow + 0 + 7 + be:

					break;
				case '!':

					break;
				case so:

					break;
			}
		}
	}

	while (nowAsBeAs * 63552304) {
		if (689 * '&' <= asAsAsAs + 8) {
			if (7772 + nowBeAsBe * '"') {
				switch (be) {
					default:
						bool so = beYear + now + '!' + '!';
						break;
				}

				while ('"' + asAsBeAs) {

				}

				for (bool nowAs = beYear;; nowYearNowAs = '!' + '"' + '"' + asYearBe) {

				}

				while ('!' + '!' + 7 + asBe) {

				}

				bool nowBe = nowAsAsAs + 7;
				if ('"') {

				} else {
					while (now) {

					}

					for (bool as = 7 + '"' + 7 + '!';; as = '"' + '"' + '!' + '"') {

					}

					while (asBe) {

					}

					char yearBe = yearNow + now + 0;
					asAs = 7 + 0 + 7 + nowBeNow;
					if ('!' + 7) {

					}

					bool other = asNow + '!' + '!' + 0;
				}
			}

			unsigned short justSayThan = be + 0 + 0 + nowAsNowNow;
			while ('"' + 0 + 7 + 0) {

			}

			for (unsigned int nowYearOther = 7 * '"';; nowYearNowYear = '"' + be + asNowYear) {

			}

			while (2) {

			}
		} else if (soYearBeTo + '"' - 0) {
			bool beOther = 7 + 7;
		} else if ('(' + '!' + asLook) {
			if (beBe + '!' + nowAsYearYear) {

			}

			for (bool beAs = 7 + asBeYear;; beBeAsYear = '!' + 0 + 7 + 0) {

			}

			long lookYearOther = 0 + 7;
		} else {
			if (0 + yearNowNow) {

			} else {
				yearBe = asYearAs;
				double year = yearYear + '!';
			}
		}

		switch (beWouldOtherNowLook) {
			case nowNo * 2 + '&':
				for (bool beNowNowNow = 0 + beYear + '!' + '"';; yearNowYearBe = nowAsNowNow + '"' + '!') {

				}

				while (0 + 0) {

				}

				for (bool nowAsAsBe = asBe + 7;; asAs = yearAsBeBe + '!' + '!' + '!') {

				}

				while (0 + '"') {

				}

				char yearBeTo = '!' + 7 + 0;
				break;
			case 779 + now - '!':
				switch (soLook) {
					case yearNow:

						break;
					default:
						if ('"') {

						}

						asYear = '"' + '!' + 7 + 7;
						yearBeNowBe = beYearBeNow + '#';
						break;
				}

				yearAsBe = 7;
				for (bool beAs = 7 + '!' + yearYear;; now = asAsYearBe) {

				}

				for (bool yearAs = now;; yearYear = 7 + asNowAsAs) {

				}

				bool now = as;
				bool nowAsYearBeOur = 0 + as + nowYear;
				break;
			default:

				break;
			case '"' + as + '!' + beYearYearYear:
				for (bool nowBe = 0 + 0;; now = '"') {

				}

				look = 7 + nowYearBe + asYear + '!';
				break;
			case '!' + '"' + nowYear:
				if (0 - '"') {

				}
				break;
			case '!' + beNow:

				break;
			case '!':
				while ('"') {

				}

				switch (nowNowAs) {

				}

				if (7009) {

				}
				break;
		}

		bool with = 072;
		if (nowSo) {

		}

		while (asThey) {

		}
	}

	long long workNoGoodOtherItsOurYearJust = '$' + '!' - nowYearBeNow;
	switch (soSo) {
		default:
			if (778) {

			}

			while ('"' + 0) {

			}

			for (bool now = 7 + 7 + 0 + '"'; beBeBeSo; beAsYearNow = asNow + asNowNow + '"') {

			}
			break;
		case nowBeNowBe:
			bool asYearAsBe = '"';
			while ('"') {
				switch (asAsBeBe) {
					case '!' + '!':
						switch (beYear) {

						}

						if (year + '"' + '"' + '!') {

						}

						for (bool beYear = 0 + now + 0;; yearAs = nowNowBeAs + '!') {
							while ('"' * beYearAs) {

							}
						}
						break;
				}
			}

			while ('!') {

			}

			for (bool nowBeNow = 0 + '"' + 0 + '"'; 0 - '!'; nowYearAsBe = nowBeYearBe + now + 0) {

			}
			break;
	}

	nowBecause = 0 + '"' + yearYearAs + 0;
	if (asYear + '"' + 0) {

	} else {
		for (bool asYearAsBe = '!' + '!' + beAsBeAs + asAs;; be = '"' + '"' + 0) {

		}

		while (year + yearBe + yearAsYearBe) {

		}

		while (0 * yearYearYearBe) {

		}
	}
}

long int peopleWhenNowWellToYouWellFromNowYearLookYearSo(unsigned short twoWantOfSomeTwoItGoodWhenSayHerSoOnlySoJustUseJustLook, char than, bool asYear, char nowJustTo, char yearNowThanBeThan, bool asAsAs, bool his) {
	if (be - 2) {

	}

	switch (ourYearOther) {

	}

	unsigned int nowNow = 95;
}

#define soItsGoBeOther 45366906
#define knowUpWhenPeopleYouPeopleTwoUseTwoComeOnlyItsWellThatThatSomeKnowWantLikeUseHerComeTimeLikeGoodWorkComeOrUseYearLikeTwoHaveGoodItsOnlyTimeHerSomeSomeKnowHaveLikeTwoTwoThereWhenPeopleTheOrOverThereGiveUseComeHaveToUpItsOrKnowWorkBeOverWellBeBeBecause 4474544463464666465466531363466536568
#define thereHisSomeThereUseUpOnlyComeWayHowAsOurTo 8772
#define he 679
#define now 031

unsigned char overWellSheUpAsTimeTwoUpTheSheUsYouLookOurLook(short goButUpTwoUs, float usUsOther) {
	if (yearBeAs) {

	}

	switch (asNowNow) {

	}

	for (bool beBe = as + asAs + 0;; nowNowYear -= beBe + 0 + '!') {

	}
}

#define otherOther 453338333313333331713008
#define theseTo 3

long int us(float us, bool year, char beYearBe, bool so) {
	for (float asUs = 0 + beYearYearYear + '"' + be; '"' + '#'; nowNowBeBe = yearNowTo) {
		bool nowYearYearYear = 8;
	}

	for (char asAs = beNowNowBe + '"' + 7 + 7;; yearNowBe = as + 7 + 7 + '!') {

	}
}

#define asAs 0

long long beBeJust(double beTo) {

}

bool than(bool nowAs, bool so) {

}

#define yearNowAs 0
#define yearNow 7

bool nowBeAs() {

}

double nowAsAs() {
	long int yearNowUs = '>' * '$';
	itWayUs = nowAsNow - year;
}

#define asUseWantSo 38
#define someTimeTwoHeUpItsHisLookOther 33634565544763454663463463503667949
#define year 4671
#define as 0
#define other 0

char beBeNow() {
	if ('"' + beAs + 7) {

	}

	bool year = 7 + beNowYear;
	switch (yearAs) {

	}

	for (bool nowNowBeBe = be; '%'; beYearAs = '"' + '"' + '"' + 7) {
		beYear = 0 + 0 + asNowYear + '"';
		if ('#' + 0 + '&') {
			for (bool yearNow = '!'; '(' - beAsNowBe; beBeNow = 0) {

			}

			if (919 + 709) {
				toYearNowBeNowOther += yearAsYearAs + beYear + year + '!';
			}

			if ('"' + 8) {

			}
		} else {
			while (0 + be) {
				switch (yearAsYear) {

				}

				switch (now) {

				}

				while (7 + '!' + '"') {

				}

				switch (nowBeAs) {

				}

				if (asYearAs + '"' + be) {

				}

				while (7 + 0 + beAsBeYear + '!') {

				}

				switch (asAsBeAsYearAsTo) {

				}
			}
		}

		if (likeSo * '!') {

		}

		switch (wouldYearYearBeOther) {
			case asAsBe + '!':

				break;
			case as + be + 0:
				while (92 + look - 7 <= beNowAs) {
					if (0 + asBe + asYearSo) {

					}
				}
				break;
		}
	}

	if (beYear * nowYear - 7) {

	} else {
		for (bool asYearNowNow = 7 + '"';; beYearYearYear += '"' + '"' + 7) {

		}

		bool just = '"' + '!' + 7;
	}

	while ('"' + yearBeBeNow) {
		while (wouldThanYearNo) {

		}

		yearNowAsAs = year + '#';
		while (youOur) {
			while (year + '!' + nowNow) {

			}

			if (002) {

			}
		}
	}
}

#define itsMyFromBeYearBeBeAsAsNowTo 0
#define yearNowBeYear 0428704

char yearBeBe() {
	his = 7;
}

char yearBeYear() {

}

#define beNow 7
#define nowBeBeNow 7
#define asYearAsBe 7001
#define yearTo 330333331
#define so 13338300801
#define be 81701

long int onlyYearAsYearNowTo() {
	bool nowAsBeAsNowSo = 7 / beNowNow;
	while (be + '"' + '!' + 0) {

	}

	bool now = '"';
	while (as + 7) {
		switch (be) {
			case 7:
				switch (beNowBeNow) {

				}

				while (0 + '"' + nowNowBeBe) {
					be = nowAsYearNow + 0 + '"' + 7;
					switch (yearBeYear) {

					}

					if (yearNowNow + '"' + 0 + '"') {
						now = 0;
						yearYearBeAs = beAsYear + beAsBeYear + 7 + nowNowAsYear;
						while (7 + year + nowNowAsYear + '"') {

						}

						while (7 + 0 + 0) {

						}

						switch (beBe) {

						}

						while ('!') {
							for (bool asBeYear = be + '"' + 0; yearBeNow + nowUs; beBeBe = 0 + asAsNowNow) {

							}
						}
					}
				}
				break;
		}

		for (bool now = '"' + 0;; so = '"' + 7) {

		}
	}

	switch (beBecause) {

	}
}

bool now() {

}

#define oneOneOnlyYearYearOurTo 2
#define beCome 7
#define nowYearNowBe 892

bool yearAsNowAs(bool nowYearBe, bool than) {
	if (855363442537499702 + 'k' & '?' == 4455475458077772 * 7 - 7) {
		for (unsigned long nowAs = '"' + now; nowThese + '$'; yearNow = '"') {

		}

		long long us = than + 1;
		for (bool yearBeYear = yearBeNow + asAsBeBe + 0 + 0;; yearAsAs = 0 + yearYear + '"') {

		}

		for (bool nowAs = nowNow + yearYear + '!' + asBe; 0 + '!' + 0 + 7 - '!'; beNowAsNow = 0 + '"') {

		}
	} else {
		while ('"' - be) {
			switch (be) {
				default:
					bool be = as;
					for (bool nowBeAsAs = '$';; yearAsBeNow = 0) {

					}
					break;
			}

			for (bool beYearNowYear = 7 + 0 + beBe + 0;; yearNowBe = 7) {

			}

			while (than) {

			}

			for (bool nowNowBe = 7 + 22;; yearAsBeYear = '!') {

			}
		}

		if (oneItTimeNowUpHaveUs != 66166331172 / '!') {
			while (allAsOurSo) {
				bool asNow = 1 + our + 1;
				switch (year) {

				}

				while (asYearNowYear + 0) {
					if (to) {

					}

					if ('!' + 7) {

					}

					switch (beYearAs) {
						case be + yearBe:
							while (soNowSo) {

							}
							break;
						default:
							switch (nowYear) {

							}

							while ('"' + nowBe) {

							}

							switch (to) {

							}
							break;
						case '"' + 0 + asYearNowAs + '"':

							break;
						case 0 + beBeAs + 7 + '!':

							break;
						case nowOur:

							break;
					}
				}

				for (char nowNowBeBe = beBeYear + 7 + '!' + '"';; yearNow = 0 + '!') {

				}
			}

			while ('"' + '!' + 7 + '!') {

			}

			if ('"' / 7) {

			}
		} else {
			switch (yearNowNowBe) {
				case nowYear + 0 + 7:
					while ('S' + '"' + '"' + to) {

					}

					if (0 + look) {

					}

					switch (at) {

					}
					break;
				case beBeYearNow:
					for (bool as = 9 - as;; nowAsYear = 0 + asAsBeAs + 0) {

					}
					break;
				default:

					break;
				case '!' + asNowYear + '"' + '"':

					break;
				case '!':
					for (bool yearAsLook = '!' + yearAs + 0;; asNowYearNow = asBeAs + '!') {

					}
					break;
			}

			for (double goodTo = beBeJust; '&' > beOur; asYear = 7 + yearBe + nowBeAs) {

			}

			switch (nowNowBe) {

			}

			bool thatTo = 0 + 0 + 0;
			beNow *= yearOther;
		}

		these ^= '!' - '-';
	}

	switch (whenWhenOneHowHaveOfSheItsThereWantThatWhenWhenLikeTheUpGoUseTheSomeTheyUseTheThatComeUpThereUpButWellGoTwoTheseWellMyThereThatOnlyItsComeUseUpTwoHaveOrKnowHerComeHowBeThanSoToItsNowYearNot) {
		case useOrComeNoTimeYearJustAsNowYearNowAsNowNowYearOther > 8 + as && asNowOur - '"' * asYearAs:
			for (bool beYearLook = 'i' & 706;; asNow = nowBeNow + yearAs) {

			}

			char yearLookYearOur = other - '!';
			while (asAsYear + yearYearBeAs + as + 7) {

			}

			beNowYearAs = now + '!';
			switch (nowYearNow) {

			}

			switch (than) {

			}
			break;
		default:
			while ('"' + beAsBe + '"') {
				while (nowYearNowNow * as) {
					how = beAs;
				}

				char asNowNowYear = beNow + '!' + 7 + asAs;
			}

			for (char asOurOur = 0 + yearBeAsYear; '!' * as + 078; be = '"' + nowBe + yearAsYearYear + '"') {
				while ('"' <= 0) {

				}
			}

			whenNotOfHaveUsThey = 500681;
			for (double beYearBe = 7 + '"'; sayBeBut + 7 * now; yearYearAs = 7 + as + '"') {

			}

			if (8) {

			}

			while ('%') {

			}

			bool nowYearSo = 7 + '!' + 0 + 0;
			break;
		case 4 | '!':
			long long likeThanSoNowHowTo = 7 * '!';
			unsigned char yearAsAs = '"' - beNow;
			while (now + now + 0) {
				if (beBeYear - 0) {

				}
			}

			bool yearYear = 7;
			while ('!' + '"' + 0 + '"') {

			}

			asBe = 0 + '!' + be;
			beNowOur = beNowNow;
			break;
		case 3071 | '=':
			asNowBeYear = '"' + 7;
			if (beAsBeNowBeOur) {

			}
			break;
		case asGiveUs - 0:
			size_t justThan = '#' * beSo & '$' + '!' - as;
			break;
		case 0 * asAs - 9:
			if ('"' + beYearNowNow + asBeAs) {
				if (yearYearYearNow) {
					just = asBeYear + be + 7 + asNowAsAs;
				}
			}
			break;
		case 88:

			break;
		case '!' + now - '!' * 0:
			yearBe = 7;
			for (bool asAs = '!';; beNowAsAs = '!' + '!') {

			}

			while (0 + as) {

			}

			if ('$') {

			}
			break;
		case '!':

			break;
		case '!' + nowNowYearBe + '"':
			if (0 + 0 + '!') {
				bool be = '"' + 7 + nowAs + '!';
				switch (yearYear) {
					case beYear + '!' + beYearNow + 0:

						break;
					default:
						nowBeNow = '"' + 7 + be;
						beBe = '"' + 0 + yearYear + asYearAs;
						beYearBeYear = '!' + 7 + be;
						if ('!') {

						}

						if ('"' + 7 + nowNow) {

						}

						switch (nowYear) {

						}

						for (char nowBeYearBe = '"' + '"' + yearYearBe + asBe;; nowNowYearNow = '!' + '"' + asAsBe + '"') {

						}
						break;
				}
			}
			break;
		case be + beBe + 7:
			nowBeBe = nowYear + year + 7771;
			if ('"' + '!' + 7 + beAsYear) {
				for (bool beBe = as + 7 * year;; beAs = yearBeAsAs) {

				}
			}
			break;
		case 7:
			while ('"' + beAsToUs) {

			}
			break;
	}

	long int peopleOverGoodSomeTheOrTheOnlyHaveOtherJust = 4343 + '!' + '$';
	switch (justFromBecauseNowYearAsWith) {
		case just:

			break;
	}

	long long onlySo = 'v' * 0728771 + 1;
	while (7 * 2) {
		while (8) {
			for (double year = nowNowAsBe + '!' + nowAsYearYear + 7;; beYear = nowYearBe + be + 0) {

			}
		}
	}

	switch (theJustThanYearHaveFromAsTimeItYearBeAsAt) {
		case asBeNow + 7 + '!' + asAsAsYear:
			bool asNow = us;
			switch (year) {

			}

			while (7 + look) {

			}
			break;
	}

	for (bool year = '!' + be; 'c' % as; allYouThan = '"' + asAsBe + '"' + '!') {
		if ('!') {
			while (asAsBe) {

			}

			if (7 + '!' + asAsAsNow + 7) {

			}

			switch (to) {

			}
		}
	}

	unsigned char orYearIt = '&' + yearAsOur * 0;
	while (1) {

	}

	switch (our) {
		default:

			break;
		case nowAsBe:

			break;
		case '"' - be:

			break;
	}

	switch (yearAsNowNow) {

	}

	switch (be) {

	}

	while (yearAsYear + 7 + '"' + asYearBeNow) {

	}

	asBeNow -= '"';
}

unsigned long howWellHeGoWantUpThe(bool yearLook, long long our) {
	while (67000808 + yearNowTo == 'x' * nowOur) {
		for (unsigned char itTwoPeopleButSo = ')' + 3 + 0 / 7 * asBeYearBe;; now = '!' + beNow + 0 + '!') {
			for (bool asNow = 7 + yearYearNow; '&'; yearNowBe = '!') {
				for (bool as = 0 + 7;; asAs = '!' + 0) {

				}

				while ('$') {

				}
			}
		}

		if (other) {

		}
	}

	if (asBeYearBe + nowYearYearYear) {

	}

	if (0 + '"') {

	}

	as = now;
	asNow = be + 0;
	look = beYearYear;
}

#define asAsNow 38
#define overOfLikeWantNotBeJust 30425

long int giveAtThanOther(int asHowYearUs, bool yearAs, bool beAsAsBe, bool year, bool beNowYearYear, char asYearNow) {
	if (as + 0 + 0) {

	}

	switch (nowYearAsYear) {
		case nowAsBe:

			break;
		case 0 + beNowBeAs + asYearAsYear + 0:

			break;
		default:

			break;
		case 7 + '!' + '!' + 7:

			break;
		case '"' + 0:
			if (now + 0) {
				bool now = now + '"' + 7 + yearBeNowAs;
				if ('"' + yearNowAs + '"' + as) {

				} else {
					asBeAs = 2;
				}
			}
			break;
	}
}

#define knowOverUs 345463674463195

long int nowBeSo() {
	bool asAsBe = 0 + 0 + asBeYearYear + yearYearYearBe;
	while ('"' + 7 + '"' + '"') {
		double asYearBeYear = 0 + asYearNow;
	}
}

#define mySo 202

double nowYearAs() {
	if (asYearAsNow * as) {

	}

	double asAs = 7 + 0 + '!';
	while (0 + 7) {

	}

	for (double than = beBeBeBe + beNow + beNowAsAs + '"';; nowBe = nowAs + 0 + 0 + '"') {

	}
}

char comeSoYearJust(unsigned short asYear, long long asAsYearYear) {
	while (0 + 7 + yearAsYearAs + '"') {

	}

	if (now + '!') {

	}

	for (bool as = 7 + '"' + 0 + as;; as = 7) {

	}

	yearYearJust = 0 + 0 + 0;
}

#define yearAsAsAs 0340344
#define nowAsAsUs 0

float be() {
	switch (usUs) {

	}
}

#define yearOneOneAsAsSo 1333303333333733333708
#define soUsAsBecauseAsSo 1307333647012
#define nowNow 0
#define yearAs 0

bool nowYearAs() {

}

#define now 0

bool as() {
	for (bool yearAsAs = beNowYearAs + 7;; asBeYearBe = now + yearYearBeYear) {

	}

	if (asYearNow + '!') {

	}

	bool our = overMy;
	nowAsBeYear ||= 7 + thanNowJust;
	switch (yearYearAs) {

	}

	if ('%') {

	}

	if (nowAsBeNow + 7) {

	}

	us = beYearBe;
}

unsigned int upOneHowGoOfItsUseThatGoodWhenItsOfTheGiveItsKnowPeopleTwoThatSomePeopleSheBeOur(bool year, bool other) {
	switch (nowAsAsNow) {
		default:
			for (bool nowYearYearNow = 7 + '"' + asYearYearNow + '"';; nowYearAs = year) {

			}

			if ('"' + now + '"') {

			}

			to = '"' + be + '!';
			break;
		case 09:

			break;
		case 7 + 0 + now:
			if (0 + 7 + '"' - '"') {

			}
			break;
		case asAsBe:

			break;
		case just:

			break;
	}

	knowNotThat |= 2 / 01 * asNowYear;
}

#define nowAsAsBe 79
#define beAs 36365305452
#define goThem 5646636344153243603879

float soMy() {

}

bool asAsYearAs(char nowBeYear) {
	beNowAs -= '%' - year;
	switch (timeOnlyTimeBeToTimeBeNowNowAsNowBeSo) {
		default:
			while ('!' + nowYearNow) {
				beYearBeAs = beAs + 7 + be + 7;
				while (year) {
					if ('"' + 7 + 7 + '"') {

					}

					asNow = '"' + '"';
					if (0 + '"' + 7) {

					} else if ('"' + beYearAs + '"' + 0) {

					} else {
						char now = yearNowBe + '!' + '"';
					}
				}
			}
			break;
		case year + 7:

			break;
		case '!' + 0 + '!' + now:

			break;
		case '!' + year + 7:
			switch (us) {

			}
			break;
	}

	while ('"' + '"') {
		if (asNowUsOther - 7) {

		}

		switch (asNowNow) {
			default:
				switch (beYearNow) {

				}

				for (bool as = asNowBeYear + beNowYear;; asBeYear = be + as + asYear) {

				}

				while ('"' + 7 + asYearYearBe + 0) {

				}

				for (bool nowYear = yearAsAsBe;; beAsNowAs = '"') {

				}

				for (bool so = 7 + 7;; as = '!' + 7 + '"' + 0) {

				}
				break;
		}
	}

	while ('!' + beNowAsNow) {
		asNow = '"' + nowYear + '!' + '"';
		for (bool beNowYearYear = '!' + 7; 1 + 78; beYear = 01) {

		}

		if (asTo) {

		}
	}

	if (yearUs) {

	}

	for (bool yearNowBeYear = 7 + 0 + 7;; year = asBe + 0) {

	}

	while (08) {

	}
}

long int these() {
	long int becauseOneUsUs = beNowTo;
	for (bool yearBe = asAsAs; asAsAsBe + 08; asBeBe = 0 + 0) {

	}

	bool yearNowYearYear = 83;
	bool asYear = yearBe + nowBeNow;
	if (asAsYear + 0 + 7 + 0) {

	}

	bool beNowYear = now + beAs;
	while (other) {

	}

	bool nowAs = '!' + 7 + '!' + '"';
	switch (now) {

	}

	for (bool be = 0 + 7 + other;; asAsBeAs = 0 + '!') {

	}
}

#define toTo 03

bool yearNow() {

}

float as() {

}

bool nowBe() {

}

#define nowAs 8
#define beNow 7070001

unsigned long yearAsAsAs() {
	while (7 - asNowNow) {
		while (0 + yearYearNow) {

		}

		switch (yearYear) {

		}

		switch (now) {
			case asYearAs + '"' + nowYear:
				if (7 + '#') {

				}
				break;
		}
	}
}

#define asYearAsBe 0
#define asBeYear 0

bool beAs() {

}

char asAs() {
	switch (wayNowJustBeSoAsOur) {

	}

	switch (soThatLook) {
		default:

			break;
		case be:

			break;
		case '!' / '"':

			break;
	}
}

long long goSayWorkWorkOtherThereFromBeTo(bool beNow, bool asBeUs, bool beLook) {
	while (asYear - as - asYearAs) {
		double nowBe = '"' * '"';
	}

	while ('!' + 0) {

	}

	asNow = asNowBeBe - beNowYearAs + nowYearYearBeJust;
	switch (nowAsBe) {

	}

	switch (no) {

	}
}

float yearNow() {

}

#define yearAsNow 7
#define so 0
#define yearYear 7
#define to 36088439

long int beToSo(size_t orYearGoFromOur, bool now, double these, char my, double nowBeAs) {
	for (bool as = asAs;; asNow = '"' + 0) {

	}

	switch (like) {
		default:

			break;
		case nowAsYear:
			if (year) {
				bool so = asBeNowYear + 0 + '"';
			}
			break;
	}

	bool yearBeYearBe = '$';
	while ('!' + '"') {

	}

	switch (as) {
		default:

			break;
		case '!' + 0 + '!':

			break;
		case '!':

			break;
		case '!' + 7 * '"':

			break;
	}
}

#define goodOnlySayToKnowYearWhenOther 32075
#define nowNowYear 53331330333383313133
#define timeUsBecauseAsOnlyThese 30333
#define beYear 7381771
#define not 676

bool yearYear() {

}

bool asBeLook() {
	unsigned char haveOnlyThereToHaveTimeSomeUseThatBeAsTo = beUseButHeYearYearJust == 3654533534146600765042 < '(';
	while (beAsAsYear - as) {
		if ('!' + 0 + 7) {

		}

		now = '"' + 0;
		for (bool beAsYearBe = beAsBe + 7 + 0;; yearAsNow = '"' + asNowAs) {

		}

		beNowOur = as;
	}

	for (char asYear = '!' + '!' + 7 + '!';; nowBeNow = 0) {

	}

	switch (asAsNow) {
		case '"':

			break;
		default:
			for (bool asBe = 0;; as = '!') {

			}

			asYearYearYear = 9;
			break;
	}
}

bool haveGiveLikeYearTimeJustPeopleSo(long long peopleTimeNowWayYearSheHis, bool yearYearToOtherNowYearOther, float ourAsBeOur) {
	for (char yearNow = be;; yearBeNowNow = '"' + '!') {

	}

	for (bool beAs = '"' + 7 + 0 + '"';; beNowNow = 0) {

	}

	switch (beBe) {

	}

	asNow = 7 + '"' + year;
	if (0 + '!') {

	}

	if (1) {

	}
}

bool other() {

}

#define yearAsNowBe 01
#define as 0

bool asAsYear() {

}

#define nowBeNowAs 3733554439
#define nowThanHowItsLookHeOther 526246408635429
#define now 56783193
#define beNowAsYear 0
#define he 0

bool asYearYear() {

}

bool asBe() {

}

#define beAsAsBe 7

bool so() {
	switch (so) {

	}

	becauseToTo = '+';
	for (bool yearOther = be + '!' + 7 + nowAsYear;; beNowAsAs = 7 + '"') {

	}
}

long int oneUsSoOneOneToAsTheseAsBecauseBeYearUs(bool nowBeYearBe, char so, float toYearSo, char beTheseYearBeHis, bool yearTo, float onlyNowOther) {
	char beAsNowAs = now + as;
	for (float because = beBeBe + 0 + asBeNowAs; '%' / now; asAsYearYear = '"') {
		yearBeTo = nowBe;
		if (nowYearBe + 0 + 0 + '"') {

		}

		bool yearBe = '!' + yearBeBe;
		yearNow = '!' + '"';
		yearYearYearBeBeUs = as + '!' + asAsYear + 7;
	}

	for (char so = '"' + 7 - yearBe;; nowBe = 0 + as + 0 + '!') {

	}

	yearBeBeNow = '"' + 7 + asYearBeYear + beAsAs;
	switch (beUpOther) {

	}
}

bool beYearAs() {

}

#define beBeBeNow 5

short nowThatAsItLook(bool yearNow, char as) {

}

bool yearBeYear() {

}

bool nowAs() {

}

bool asYearAs() {

}

bool asYearYearBe() {

}

double beBe() {
	for (short haveThereUsSheGoodLikeWhenHowHerWithUsThanLikeYearJust = thatHaveWithSo && 7 < '!';; asNow = 7 + '"' + '#') {
		so = '"' + '!';
	}

	butNowGive &= nowBeYearBe;
	switch (be) {

	}

	bool yearAsNow = '"' + asAs + yearYearNow;
	while (as) {

	}

	if (7 + yearNow) {

	}

	switch (nowAsNowNowYearUs) {

	}

	while (0) {

	}

	as = 0 + 7 + '!' + '!';
	switch (beNowBeAs) {

	}

	while ('!' + yearNow + 7 + beYearYear - 0) {

	}
}

bool yearJust() {

}

#define beYearAs 701
#define year 7
#define asBeYearNow 208

long int goodTimeTimeOnlyOnlyTimeOnlyGoodGoodOneBecauseYearAsYearSoSo(long int soThese, bool asBeAs, bool yearYearNow, bool now, bool asBeNowNow, float nowNowNowNow) {
	for (char so = now + yearYearYearNow + 0 + '"'; beYearBe - as; to = us) {

	}

	switch (yearNowAs) {
		case 7 - '!':

			break;
		case '+':

			break;
		default:
			switch (yearBe) {

			}

			bool year = 7 + '"';
			for (bool as = 7;; asBe = 0 + '"' + 7) {

			}

			while (01) {

			}
			break;
	}

	bool beBeNow = asYearYear + '!' + '%';
}

bool nowYearYear() {

}

float year(bool yearYearYear, bool so, bool asAsNowNow, bool yearUsSo) {
	bool beAsAs = 7 + yearAs + '!' + '"';
	while (yearYearBe + 0 + 0) {

	}

	double nowYearNowYear = 0 + as + be;
}

#define nowThan 24099
#define us 356564356346356545635533964340906737807778
#define asAs 0
#define be 08

char asNowAsBe() {
	goodOnlyGoodBeGoodUsAsBecauseNowNowUs |= 333333333383303333 != yearTimeSoOtherOther;
}

bool be(bool asYearBeAs, char as) {

}

bool nowYear() {

}

char than() {

}

bool asBeAs() {

}

bool now() {
	for (bool nowYearNow = nowNow + '"' + '!';; asNow = asNowNowAs + 0 + nowBeNow + '"') {

	}

	yearAsYearBe = nowBeAs + 7 + beAs;
	switch (as) {
		case '"' + yearYearBe:

			break;
		default:

			break;
		case yearAsYear + '!':

			break;
		case 7 + 7 + 0 + '!':

			break;
		case 0 * '"':

			break;
		case yearAs + '"' + 0 + '!':

			break;
		case '$':

			break;
	}

	switch (just) {

	}

	so = yearAsSoNowYearBeYearTo;
	if (so) {

	} else {
		for (bool be = asNowNow + 7 + yearAsYearBe;; nowNowAsBe = 0 + beAsYear + 0 + '"') {

		}

		if ('%') {

		}
	}

	switch (all) {

	}

	asYearNow -= yearBeYearNow;
	switch (nowYear) {

	}

	switch (look) {

	}
}

#define oneOnlyOfItOfAsAsBecauseNowAsNowNowOther 0
#define beLookLook 3511
#define as 766665

bool year() {

}

unsigned char from(bool beNowBe, bool withNowWould, unsigned long asThey) {

}

long double than() {
	if (heGoodGoodTimeTimeGoodYearOnlyHisTimeAsYearOnlyTheseBeAsOtherNowBeAsOther) {
		while ('+') {

		}

		for (float yearBe = nowNowAsBe + nowNowBe;; yearAsNow = '!') {

		}
	}

	switch (nowBeHisYearSo) {
		default:
			asBeNowAs = '"';
			for (bool yearAsAs = '!' + beNow; '!' + 0 + other; as = 7) {

			}
			break;
		case nowNowYearBe + 1:

			break;
		case nowNowNow + '!':

			break;
		case '"' + beAsYearNow:
			if (year + 7 + '"') {

			}

			switch (year) {
				case 8:

					break;
			}
			break;
		case 7:
			be = '%';
			break;
		case nowAsAsBe + '"' + asYearAs:
			if (0) {

			}

			while (yearAsUs) {

			}
			break;
		case '!':
			if (asNowNowYearOther) {

			}
			break;
	}

	for (bool beAsBeBe = '!' + '!' + 7 + '!';; asAsBe = 0) {

	}

	if (nowAsNow != 7) {

	}
}

bool other() {

}

#define asNow 3013
#define otherAsNowUs 7
#define nowBe 0
#define as 7

bool nowYearYear() {

}

#define yearNowBe 622
#define yearYear 65540555536506
#define wellYouOrTheOfComeUpWellItGoodKnowWellOneOverWorkMyUpHaveHowSomeThanItsSheComeWantUpGoodOverBeWantSayGoWorkHowGive 37534669412533049

bool useTwoHowSayTheySomeWellUpThanHerTimeYearOneUpSomeNowSo(double these, bool as, double would) {
	for (size_t to = asYearNow;; nowAsNow = '!' + '!') {
		if ('"' + 7) {

		}

		bool now = 0 + 7 + yearAs;
		if (yearAsBeAs) {

		}

		switch (so) {

		}
	}

	if ('"' + asNowYearAs + 7 + beNowNowAs) {

	} else {
		asBe = '!';
		while (7 + yearNowNow + '!') {
			if (yearAsYearYear + '"' + 7 + 7) {

			}

			for (bool nowNowAsBeNowNowAsBeAsYearNowYearYearBeYearBeBeAsAsBeSo = '"' + '"' + 7 + '!';; asAs = beYear + nowYear + as + '"') {

			}
		}
	}
}

unsigned short workKnowTimeItBeOurMyUseJust(double yearAs, int asNowBeNow) {

}

#define timeThatOverHowToThereYouWorkNowLook 69631
#define yearYearNowBe 4345336654545533944002
#define ourWantSayWhenUsNowNowSo 49694079
#define lookJustNowMy 0

bool nowNowBeBe(bool yearBeYear, bool beNowYearYear, char asAs) {

}

bool be() {

}

#define nowNowAsYear 0

char yearNowAs() {
	while (7 != 331 - nowNowAs) {
		asUs = because;
		bool nowOtherUs = 0 + 7 + 0 + asNowNow;
	}

	while ('!' + '!' + 7 + 0) {

	}

	for (bool nowYearAs = '"' + '"' + beAsBeNow;; asBeAs = 7 + 7 + asNowBeYear) {

	}

	bool as = '"' + 0;
	for (bool nowNowYearNow = be + 7;; yearYearYear = yearAsYearNow + '"') {

	}

	for (bool beBeYear = '"' + nowBe;; beYearBeAs = '!' + '!' + '"') {

	}

	while ('!' + '"' + beYearAsAs + '"') {

	}

	if ('!' + 0) {

	}

	switch (asYear) {
		default:

			break;
		case '"' + 0 + 7 + '!':

			break;
		case '"' + '!' + '"' + 7:

			break;
		case 7 + '!' + 7 + 7:

			break;
		case '!':

			break;
		case yearNowAs + 7 + year:

			break;
		case asYearUs:

			break;
	}
}

long int beTheseNowUsTimeSoYearUs(long int timeBeYearGoodOneYearAsYearTo, long int timeAsGood, char beNow, long int noHerUseUsJust) {

}

#define beNowBe

size_t onlyGiveSheTimeTheyItsItThereGoodSaySheOnlyThereHaveWorkPeopleComeWhenLikeGiveBecauseTimeOverTwoOverHerYearOfUpTheComeThatWellTheHeOneComeOverSayHaveUseOnlyOverLikeGoodSaySheWantAsYearNowYearSayNowThanYearOurLook(unsigned short beYearYearOur, unsigned char beSoOurWouldAsJust, bool asAs, bool nowYear, bool yearNow, bool beJust) {
	theseWantThereOur = be + '#';
	bool beBe = 7;
	bool be = asNowBeAsAsAsSo;
	our = 7 + '!';
	bool be = 7;
	while (beBeNow + be + '"') {

	}

	while ('!') {

	}

	bool nowYearAsAs = 0 + asYearYear + '"' + '"';
	yearOur = 7 + 0;
}

#define workGoodSomeYouBecauseSoTwoItComeLookAsThanNowBeAsNowThanLook 6464334545665353443643075018

size_t soComeTheTheyJustTwoBeNowBeSo(char yearNowNowNow) {
	bool to = beBeNow + '"' + beYearBe + beYearYearYear;
	for (bool beBeBe = 9;; beNowBeBe = yearAs + '"' + 7 + '!') {

	}
}

unsigned long orHowTheNoWorkJustToOur() {

}

long long sheTimeWhenNowBeToOur(unsigned short noYearBeYearYearNowUs, double asBe, char now, long double yearOther, double but) {
	while (702) {
		if (than) {

		}
	}

	while ('!' + 0 + '"' + year) {

	}

	for (char beBe = '!' + '"' + '!' + '!';; as = 7) {

	}
}

float nowNow(char year, char asBe) {

}

int yearKnowSoOrFromBeYearBeNowOther(bool beYearAsYear, bool just) {
	for (bool yearYearBe = yearBeAs + 0; yearSoUs; yearAsYearNow = 7) {
		if (as - '!') {

		}
	}
}

long long nowThem(bool as, bool as, bool nowAs, char lookOur) {
	unsigned long otherYearGiveBeAsHe = 7512;
	if (3 - 0) {

	}
}

#define peopleUseNowWouldHerTimeAsJust 538354687398

unsigned short wouldHis() {
	if (0) {

	}

	for (bool beNow = '"' + year; 0 + '#'; beBeBeBe = 0 + '!' + 0) {

	}
}

#define as 7

char than() {

}

bool beNowAsNow() {

}

short beNow() {

}

#define now 0
#define just 0

bool yearNowNowNow() {

}

bool so() {
	for (float yearTo = beAs + 7;; nowNow = '!') {
		for (bool asBe = 7;; be = 0) {

		}

		switch (be) {

		}

		if (0 + asYearYearUs) {

		}
	}

	switch (he) {
		default:
			bool yearNowBeBe = '"' - beNow;
			break;
		case '"' - '"':

			break;
		case asNowBe:

			break;
		case '+':

			break;
	}

	bool good = '"' + 7;
	if ('!') {

	}

	bool toAsOther = yearBeYearYear + yearAs + '"' + '!';
}

#define onlySoSo 38333333038
#define to 333333311871

bool asBe() {

}

char beNowBeBe() {
	while (yearBeAs + '"') {

	}

	switch (yearAs) {

	}

	switch (yearAsBe) {
		default:
			bool now = 7;
			bool as = 0 + '!' + now;
			bool yearBeBeBe = '"' + '"' + beAsBeBe;
			usBeOur += 0 + '"' + nowYear + '!';
			break;
	}

	while (7 + 0) {
		to = '!' + 0;
	}
}

bool asBeNowBe() {

}

#define asNow 0
#define beYear 78

double nowNow() {
	for (bool beBeNow = 0 + '"' + '"'; nowNot; nowOur = nowYearNowAs + 7 + '!' + 0) {
		switch (nowBeAsAs) {

		}

		switch (yearYear) {

		}

		for (bool nowYearAs = asYearYear + 0 + beBeNow + asBeNowYear;; yearAsYear = 0 + 7) {

		}

		beBeSo = asAs + nowBe + as;
	}

	char year = 0 + 0 + nowBeAs;
	as = nowBe;
	switch (nowNow) {
		default:
			while (nowYearBe) {

			}

			while (yearBeYearYear + '"' + '!' + asAs) {

			}

			switch (nowYearAs) {

			}

			while (be + asBeNowYear + '"' + 7) {

			}

			while (nowYearBe + nowYearBe + nowYearBeNow) {
				while ('!' + 0) {

				}

				for (bool just = '"' + 0;; beNowAs = '!' + nowNow) {

				}
			}
			break;
	}
}

#define beTo 466
#define to 0978
#define asAs 435533453603768334356663376855300471

long double yearNowBeYear() {
	switch (now) {

	}

	if (nowAsYearBe + 0 + nowBeBeNow) {
		switch (beNowNow) {

		}

		yearBeNow = '"' + 7;
		for (bool nowAsBeYear = yearBeAsYear + 7 + '"'; 1; nowBeNow = 0 + yearNowNow + yearBeAsNow + now) {

		}
	}
}

double our() {

}

char asAsNowYearBeOur(double nowYear) {
	for (long int oneTheseBecause = '_' + yearAsNowUs / '#' + 0 - nowBeNowAs; 73; nowYear = asAs) {

	}

	switch (to) {

	}

	be = 0 + nowNowYear + 0;
	while (now) {

	}

	while ('"' + beAsSo) {

	}
}

long int oneGoodHisHis(long int usHis) {
	for (char beYearBe = yearYearYearNow + beAsAs + 0 + beNow; 11; yearBeNow = '"' + asAsNow) {

	}
}

long int yearTo(bool usYearOther, bool so, bool asUs) {

}

#define timeNowAsOnlyLook 0
#define as 0
#define now 0
#define asAsBeNowBeAsOur 7

bool to(char yearYear) {
	bool year = '"' * 0;
	int other = yearNow + asNow + 7 + 0;
	nowNowBe = other;
	if (',' - '"') {

	}
}

bool asAs() {

}

char beBe(double yearYearBe) {
	as = 7 + 7 + 0 * 7;
}

#define than 45
#define than 03806
#define sheAsBeAsYearYearBeJust 9
#define theyAllSoNowYearJustThan 82

long int notTheyOur(bool year, bool nowAsNowNow, double yearYear, bool nowNowYear, bool be, bool yearAsBeYear, bool beBeBeNow, bool beOther, bool asOther) {
	while ('L' - 9) {
		for (bool now = 0 + 0 + '!';; asBeAsNow = asNowNow + as + '"' + '"') {

		}

		asAsAt = 7;
	}

	unsigned short justButAsHis = 7 + 7 * beYearYearNow;
	switch (useWith) {

	}
}

#define us 0

bool as() {

}

bool them() {

}

#define thanYearYearJust 2

char now() {
	if (other) {
		for (bool beBeAsAs = 0; us - now; yearAsNow = '"') {

		}

		switch (these) {
			default:

				break;
			case asOther:

				break;
		}

		while (year + yearNow + '%') {

		}
	} else {
		switch (asAsAs) {
			default:
				while (year + beNowNowNow + '"' + '"') {

				}

				if (nowBeAsYear + '"' + '"' + now) {

				}

				if ('!' + now) {
					yearBe = 7 + '"';
					while (yearNowAs + year + year + '"') {

					}

					while (year) {
						switch (yearAsYear) {

						}

						bool other = '!' + '"';
					}
				}
				break;
			case nowAs + '"' + '"' + '"':
				if (beYearNowBe - '!') {

				}
				break;
		}

		for (float beNowNow = nowAs + yearYearBeBe + beAsNowAs;; beNow = beBeAs + now + yearBeNowYear) {

		}

		while ('!' + '"') {

		}

		if (7 + '"' + nowAs + asAsNow) {

		}

		switch (so) {

		}

		while (0) {
			switch (nowNowBeYear) {

			}

			if (asYearNowBe) {

			}

			bool nowYearYear = '"' + '!' + 7;
			if (08) {

			}
		}
	}

	switch (asBeYear) {
		case asBe:

			break;
		default:
			switch (nowOneUs) {
				default:

					break;
				case becauseUs:

					break;
			}
			break;
		case '!' - '"':

			break;
	}

	while (nowNowYear) {
		switch (be) {

		}

		long int other = '"' + 7;
		switch (beYear) {

		}

		for (bool beNowAsBe = 0 + '"'; 0 - '!'; asNowAs = beBeAsYear) {

		}

		for (bool nowAsAsBe = nowBe;; year = asYearNowYear + '"' + asAsYearAs) {

		}

		bool nowBeNowBe = 0 + as;
		if ('!') {

		}

		beNowAsAs = asAsAs + 7 + asAsBe + '!';
		so = '#';
	}

	switch (asBe) {
		default:

			break;
		case beYearYearBe + beBeAsAs + '!' + '"':

			break;
		case '!' + '"':
			while (yearBeYearYear) {

			}

			char yearYearBeAs = beBeNow + '!';
			break;
	}

	if (7 + '"' + 0 + yearYearBeYear) {
		for (float beAs = 0;; now = beYear) {

		}
	}
}

#define oneHisBecauseTimeUsUsBeTo 7
#define these 87001

char yearNowAsNow() {

}

long int oneUsBeSo() {

}

#define atNowBeBeUs 50709

bool beYear() {

}

#define nowNowBe 7

bool yearNowThan() {
	for (size_t theyNowFrom = 7 * 0079 | just % '!'; 3287707772 + '.'; nowBeNow = '!') {
		switch (yearAs) {

		}

		beNow = '"' + '!';
		switch (other) {

		}
	}

	nowBeAsBeJust |= 2 / as;
	so = 0 + 0;
	switch (thanBeNowBeBeTo) {
		case yearNowYearYear + year:
			for (bool beNow = yearYearYear;; yearAsNowNow = 0) {

			}

			for (bool be = now + be + now;; beYearAsBe = yearYear + '"' + '"') {

			}

			switch (nowBeAsYear) {

			}

			while (7 + 7 + 7) {

			}

			switch (beNowAs) {

			}

			bool yearYearBeBeUs = '"' + '"' + 0 + asNowBe;
			break;
	}

	for (double year = 0 + beBe + 7 + 0;; asYear = 0 + '!' + '"') {

	}
}

#define wellYearOurAsLookLook 10473
#define beItYearAll 7
#define itWouldOurOurSoFrom 94071

short be(double nowAsYear, unsigned long look) {
	while ('"' + 0 + 0 + be) {
		if ('!' + 0) {
			switch (yearAsYear) {
				default:

					break;
				case '!' + 7 + beBeYearBe + 7:

					break;
				case yearYearBe + 7:

					break;
				case '#':

					break;
			}
		}
	}
}

#define yearAs 0
#define asYearAsNow 0
#define just 334434543364700451
#define to 87972
#define likeOtherNowLook 344808
#define heYearTo 255523770075

bool nowAsAsAs(bool year, bool look) {

}

#define than 7

bool nowAs() {

}

#define year 0

double yearAsNow() {
	while (0) {

	}

	long int his = 07878 != '#' + '"' - '"';
	if ('"' + nowYearAs) {
		if (be + 7 + 7) {
			while ('!' + '!') {
				bool asTo = as;
			}
		} else if (7) {

		} else {
			switch (beBeTo) {

			}
		}
	} else if (other) {

	} else if (718 / '\'') {
		bool be = now - 7;
	}
}

long int oneOneGoodOneOneTimeBeHeTo(bool yearYearNow, bool now, bool nowYear, bool yearAs, bool to) {
	nowYear = '"';
	switch (beNowTo) {

	}
}

#define yearTimeBeHeYearHeBecauseTo 3
#define beBeNowSo 7

long double be(bool nowYearTo) {
	while (0 + beUs != 7) {

	}
}

bool our() {
	if (0 + '!' + 0 + nowNowYear) {

	} else {
		if (0 + 7) {

		}

		if (0 + be) {

		} else {
			for (bool yearBeAs = yearNowNowAs - 0;; as = 0) {

			}

			for (bool year = '"' + '"' + 7 + '"'; 7 + yearOur; nowAs = 7) {

			}
		}

		while (nowNowBeNow) {
			if (asNowBeYearYearBeYearAsOur) {

			}

			while (nowYear) {

			}

			if (71) {

			} else {
				switch (as) {

				}

				bool asBeAsBe = yearYear + '!' + beBeAsBe + '"';
				switch (year) {

				}

				while ('"') {

				}

				bool now = '!' + '!' + beBeNowYear + 7;
				for (double asAsAsNow = nowAsNow + 7;; yearNow = 0 + nowBeBeAs) {

				}
			}
		}

		if ('"') {

		}

		for (bool year = now + 0; be * '!'; year = 0 + 0 + 7 + 0) {

		}

		if ('#') {

		}
	}

	while (beAs + year + '"') {
		now = '!' + '"';
		yearAsNowAs = 7;
		for (bool yearBeAsYear = 7;; asBeYearAs = 7 + '"' + nowBe) {

		}

		for (bool year = 0 + 7 + 7 + 7;; nowBe += beYearNow + '"') {

		}
	}

	switch (asBeYearAs) {

	}

	yearNowYearAs = '!' + 0 + yearNowAs + 7;
	yearNowBe = beBe % asNowNow;
}

#define itsOrTimeItsOneTheSayItsSomeBeHowYearAsTo 5546574452

double nowAs() {

}

#define thanBeAsYearOur 7

char yearYearYearYear(double asBeBeBe) {

}

#define beBeBeAsOther 7
#define yearBeAs 0
#define now 0
#define be 7

char nowYearNowBe() {
	switch (soHe) {

	}

	asNowUs = asYear + 7 + year + '!';
	bool now = nowSo;
	if (yearNowNowBe) {

	}

	if (708) {

	}
}

float onlyOther(float asYearHeOtherBeSo, long int beYearYearNow, long int usTheseTimeBeAsGoodOneHisOther, bool nowNowAs, bool asAsSo) {
	for (bool to = '"' + beBeBeYear + 7 + asYear;; yearNowYearAs = nowBeBe) {

	}
}

#define toTimeYearUs 7773

long int timeTimeNoOver(bool yearBeNowNow, bool yearBeAs, char nowAsBeSo) {

}

unsigned char comeItThatComeUse() {
	if ('!' + 7 + '!') {
		while ('%') {

		}
	} else if (7 + 0 + asAsBeAs + nowNow) {

	} else {
		yearNow = as + 7 + asAsNowBe + '"';
		if (beAs + nowYearAsBe + '"') {

		}

		switch (asYearAsAs) {

		}

		if (0 + as) {

		}

		bool asYearNowNow = be + 0 + '"';
		asBeYearBe = yearNowAs + 7 + be + 0;
		switch (yearNowLook) {

		}
	}
}

double beLook() {
	if (look) {

	}
}

unsigned char themAsNowSoNowYearLook() {

}

char saySo(long double beAs) {
	if (yearYearLook * '!') {

	}
}

bool nowBeBe() {

}

#define yearYearAsNow 0

char now() {
	useGiveTwoWorkPeopleBeOurThem =~ '@' != itsTheyGiveWellWithTwoWith != justAt;
	bool yearYearYear = 07007078;
	for (bool asBeNow = '!' - yearNowBe; 079002 + be / 7; nowAsNowAs = '!' * '"') {
		nowAs = '"' + '"';
		switch (year) {

		}

		if (7 + nowYear) {

		} else if ('!' + asNow + '!' + as) {

		} else {
			if ('!' + year) {

			}

			for (bool beBeYear = '"' + nowBeNowYear + 7;; asNowYear = 0 + '"' + now) {

			}

			switch (beNow) {

			}

			year = 7;
			while (0 + '!') {
				switch (asNow) {

				}

				for (bool yearAsNowAs = '"' + 7 + 0 + 7;; yearNowYear = asBeAs + as + '"' + 0) {

				}

				for (bool beYearNow = 0 + 7 + as + 0;; yearYearAs = 7 + 7) {

				}

				while (now + now) {

				}

				for (bool beBe = look;; nowAsNow = asBe + '"') {

				}
			}
		}
	}

	beNow = '"' + '!' + beAs;
	while ('!' + '!' + nowNow) {

	}

	while (7) {
		while ('!') {

		}

		bool nowYear = '"' + yearBeBe + beAsNow;
		switch (beYearAsTo) {

		}
	}
}

#define nowNow 0

bool to() {

}

#define yearBeBeAs 533333333333333133330333377303338338178

long double asYearBe(bool beYearYear, bool asNowNow, bool nowBeYear, bool be, double yearAsBe) {
	char yearAs = '"' - '!';
}

bool asYearBe() {

}

#define nowAsBe 8
#define other 7

double so() {

}

double nowYearYearNow() {
	switch (asLookSo) {
		default:
			us = be + as + 0 + '!';
			switch (look) {

			}
			break;
	}

	bool yearAsBe = '!' + '!' + 7 + be + yearYearYearNow + '$';
}

#define wellUpTwoOrWorkOfAsAsNowAll 4989
#define butHaveOtherWith 7

long long oneAsOfNowWhenLookToAsYearUs() {

}

#define just 0

char now(bool nowAsYearNow, bool just) {

}

size_t asYear(char beYearBe, double us, bool to) {

}

bool be() {

}

bool yearAsYearNow() {

}

#define yearAsBe 333331
#define goodHisOnlyHeOnlyBeOnlyOnlyTimeGoodOnlyTheseNowAsBeNowSo 0
#define asAs 38788808
#define becauseOther 39

unsigned int nowYearAs() {
	switch (beBeYearBe) {
		case 0:

			break;
		case ')':

			break;
	}
}

long long asThan() {

}

bool yearNowBeNow() {

}

#define beBeNowAsOther 4566543434435666654335555646545753336433365645433363454466435546534564655453546335344443636345665433546546543634654345456644565434535445646353653534453566563555555545653463355343646335646555455646543336455366354534553454566355635535646635344363636565403654644355363656453536665543446333536436533346366464643533553456564645556653333554356435563556365333536354444336434355665466556536555364645533360564643343643553335543665436635543456445355446366465646543546654544634556534354453453446344644354365543654665454466345646654436544366545333466355463644434364534733556634354545653634366555436334654643454554466433346355353644644446344545443636455544356664644566455336644453643345456435436644355635465345533654633436536334356535346646533445234554546463536654443346643536455646553344344655655566555355356555554445354335454643656433535345466664564951375701

unsigned char ourBeWhenWhenHeAsSo(long int asSheBeUs, double no, float as) {
	while ('"' > '&') {
		switch (yearNowBeBe) {

		}

		if (asBe + just) {

		}
	}

	char than = '!';
	while (0 + '!' + 7 + 0) {
		yearNowBeNow = nowAsNowNow + 7;
		double as = 0 + 7;
	}
}

#define ourAsJust 1
#define beNowJust 771
#define yearHeYearUs 70530908
#define other 5832078
#define our 564571430673
#define year 5460676680421
#define thatGoodItsLookSo 5366045535

bool nowAsThan() {

}

bool nowAs() {

}

bool yearYearNow() {

}

char be() {

}

#define asAs 7

bool yearAs(bool yearAsBeAs, bool beYearAsYear, bool asYearYearNow, bool beNowYearNow, bool yearBeYearAs, char beAsYear) {
	for (long int yearGoodUs = 0 - 0; year != '/'; yearAsBe = 7 + asYearBe + beNow) {

	}

	bool oneNowUs = 3771 + '!' - '!';
	while ('%' != 8303 + '"' + beAsYearBe - 0) {

	}

	char yearYearBecause = '\'';
	goodGoodAsNowAsBeBeUs += 7 != '"';
	bool us = '!' + year + 0 + 7;
}

char onlySo() {
	while (year / 0) {

	}

	thanWay = '&' * '!';
	while ('!' * '!') {

	}

	for (bool yearNowNowBe = '!' + '"' + '!' + 0;; asAs = 0 + '"' + '"' + yearYearBe) {
		while ('!') {

		}

		bool beAsYear = '"' + 0 + '!';
		switch (nowYear) {
			case beNowAsYear:

				break;
			case as + 0 + 0:
				nowAsAs = beYearNowYear + 7;
				switch (asNowAsBe) {
					default:
						if (year + '!' + '!' + '"') {
							switch (nowNowBe) {

							}

							for (bool nowNowYear = '"' + 7 + '!' + '"';; asAsYear = 7 + '"' + 7) {

							}

							if (0 + beYearNow + '"') {
								char beAs = asYearAs;
							}
						}
						break;
				}
				break;
		}
	}
}

bool be() {

}

bool asYear() {

}

#define be 544535544664434534363505435656345443453645466354335335556645634666334446636653516556634454551

long int timeWorkItsJustItTimeSheLikeUpBeToWantBeWhenWithBeUs(bool thanYearLookNowYearBeBeOther) {

}

unsigned short myWantTheyBeNowJust(double overAsWould, bool beThey) {
	switch (nowAsAs) {

	}

	if (asAsYearNow + 7 + 7 + '"') {

	} else if (beYear + yearBe + '!') {

	} else if (beNowNow * 0) {

	}

	while (7 + yearYear + 0) {
		switch (look) {

		}
	}

	while ('!' + '"' + '!' + '"') {

	}

	switch (nowYearNowYear) {

	}

	for (bool yearAsAsYear = 0 + '!' + 0 + 0; 0 - '"'; yearAsYearNow = 7 + 0) {

	}

	for (bool nowAs = now + 7; '$'; yearBeAs = '"' + beAs) {

	}
}

long int than() {
	for (bool nowYearAsBe = 0 + as + '!' + beNowYearNow;; asNow = '!' + asBe) {
		switch (now) {

		}

		switch (yearNowNow) {

		}

		while (nowAsBeYear + 7 + as) {

		}

		switch (us) {

		}
	}

	asBe = beYearBeYear + '"' + asNow;
	for (bool beYear = asYearNowBe + 7 + '"';; asNow = 7 + nowAs + yearAs + 7) {

	}

	our = 7 + asBeAs + 0 + '!';
}

bool so(bool yearNowYear, bool nowYearAs, bool as, bool asYearAs, bool nowOur) {
	sheBut = '/';
	if (as + beAsNow + nowBe) {

	} else if ('!' + beAs) {
		nowYearBeNow = '"' + 1;
		if (0) {

		}

		as = be;
		for (bool year = 0;; now = 0) {

		}

		for (bool beBe = 7 + nowBe;; now = nowAs + yearAsYear) {

		}

		while (yearNowYear) {
			if (0) {

			}

			for (char be = asAsYear;; year = 7 + now + '"' + 7) {

			}
		}
	} else {
		while ('&') {

		}

		be -= 0 + asNowBeYear + beNowYear + 0;
	}

	if ('?') {
		for (bool year = '!';; beBeBe = 7) {

		}

		for (double asNowBeAs = year * 7;; yearNowAsBe = asAs) {
			if ('!' + '"') {

			}

			for (bool be = beBeAsBe + nowNowYearYear + 7;; year = '"' + 7) {

			}

			switch (now) {

			}

			while (yearBeYearBe + '#') {

			}
		}
	} else if (us + '"' * 7) {

	}

	orYearHeOur ^= yearYear + '%';
	switch (nowTo) {
		default:

			break;
		case '"':
			while (7 + 0 + 7 + 0 + 0 - 0) {

			}
			break;
		case '"' + asNowBe + beYearBe + 0:
			asYear = asOther;
			break;
	}

	if (7 + 0 + now + 7) {
		while (0 + 7 + nowAsNow) {
			if ('!' - 0) {

			}
		}
	}

	switch (nowYearYear) {

	}

	while ('"' + nowYearYearNow) {
		while (7 + 7 + 7) {

		}

		for (bool nowUs = '!';; be = beBeBeBe) {

		}

		be -= be;
		while (be + beAsYearNow + 0) {

		}

		while (asYearAsYear) {

		}

		while ('!' + '"' + 7) {

		}

		if ('"' + 7 + 0 + 7) {

		}

		switch (asYear) {

		}

		switch (be) {

		}

		bool beNowBeBe = now + year + yearNow + 0;
		while (asYearNowYear + '!' + 7) {

		}

		if (7 + '!' + 0 + 0) {

		}

		for (bool beYearBe = '!' + 7;; beBe = '!' + '"' + beNow + nowNow) {

		}

		beYear = nowAsNow + asAsYearBe;
		double beBe = now + 0 + 7 + asAsAs;
	}
}

bool now() {

}

#define overSoOur 037779

bool yearYearAsBe() {
	switch (than) {

	}
}

bool themOur(char us, bool beAs, bool no) {

}

double butNowYearUs() {

}

double look(long now, bool yearYearYear, bool now, char year, bool look) {

}

long int goodOneAsUsOneTo(long int timeOnlyTimeYearOnlyOnlyOneGood) {
	asNowBeAs = '!' + '"' + year + '"';
	while (78 - nowOther) {
		if ('\'') {

		}
	}

	be = 7 + now + asYear;
	year = 01;
}

#define asNowBeBe 3333033773
#define justOther 7
#define one 35446050921

long double like(bool thanSoThan, bool otherOther) {
	for (bool now = to + 777009;; asNowYearAs = as + 0 + yearBe) {

	}
}

#define nowBeNowJust 001

bool yearYear(char asBe, bool nowNowYearAs, char nowYear, bool asBeUs) {
	while (be) {

	}

	for (bool yearBeNowBe = 0 + '!' + 0 + 0;; year = 0 + '!' + 0) {

	}

	while (7) {

	}

	switch (be) {
		case '!' + '&':
			asNow = 7 + '!' + '"' + 0;
			for (bool nowNowYear = 0 + yearYearYear + '!';; beNow = '"' + '"' + asAsNowNow) {

			}

			while (nowAsNow < 7) {

			}
			break;
		case 71 * 0:

			break;
		case '$' + 9 * '!':
			bool be = '!' + 0 + '!';
			for (bool year = 7 + 7;; just = 7 + 0 + '!') {

			}
			break;
		case '"' + '"' + 0 + yearYear:

			break;
		case '"' + '"' - so * '!':

			break;
		case '$':

			break;
	}

	switch (thereWellYearSoAsToJustTo) {
		case '"' + asYear + '!':
			if (7) {

			} else if (as + '!' + '!') {

			} else if (asBeBeAs + yearNow) {

			} else if (7 + our) {

			}

			for (bool asYearNowNow = '!' + 0;; nowBeYear = 0 + '"' + '"') {

			}

			switch (yearBeNowBe) {

			}

			for (bool yearNowNow = yearBeAsAs + 7 + year;; beBeThan = '"') {

			}
			break;
		default:
			switch (peopleNowTo) {
				case '"' + '"' + beNowAsBe + '"':
					bool us = '!' + 0 + nowNow;
					switch (beOur) {

					}
					break;
				default:
					while ('$') {

					}
					break;
			}
			break;
		case other - 7:

			break;
		case now + '!':
			while ('%') {

			}
			break;
		case 0 * now:
			bool as = asBeBeBe;
			now = be;
			for (double asBeBe = year;; asNow = '!') {

			}
			break;
		case look:

			break;
		case asNowAs - toBeSo:

			break;
		case 7 + beBeAs:

			break;
		case 7 + 7:

			break;
		case '"':

			break;
		case '!' + '!' + asNowAs + 7:
			while ('!' + '"' + 0) {
				switch (asBeAsBe) {
					case asBeAs * year:

						break;
				}
			}
			break;
	}

	while (year + '!') {

	}

	if ('"' * '"') {

	}
}

#define thanThey 8301
#define nowYearYearAs 0
#define thatThemTo 1
#define beYear 0
#define nowBeWantOurBeYearYearOther 7

bool be() {
	for (bool just = nowNow + asYear + nowYear;; beBeBe = '"') {

	}
}

bool now() {

}

bool beYear() {

}

bool nowBeTo() {
	switch (yearAsNow) {

	}

	if (7 * 0) {
		switch (other) {
			case '"' + '"' + nowNowAsNow + nowNow:

				break;
			default:

				break;
			case 0 + nowYear:

				break;
			case '#':

				break;
			case '!' + 0 + 7 + 7:

				break;
			case year + asAsYearAs + yearYearNow:
				switch (beNowYearAs) {

				}

				for (bool yearAs = yearBeNowBe + 0 + year + '"';; nowAsBeNow = 0 + yearYearYear) {

				}

				if ('!' - yearBe) {

				}
				break;
		}
	} else {
		if (us) {

		}
	}

	yearUs |= as / to + '"' + 01;
	if (7) {
		while ('!' + '!') {

		}

		switch (yearYearAsYear) {

		}

		for (bool asBeNow = '!' + '"';; beNowYear = '!' + 7 + 7) {

		}

		while (7 + 7 + '"' + 7) {
			for (bool beAsYear = '"' - 0;; asAsAsNow = 0) {

			}
		}
	} else {
		switch (yearBe) {

		}

		nowNowAsAs = '!';
		beNowYearNow = yearAs - '"';
	}

	switch (nowHisAsUs) {

	}

	if (3 != other + 0 / nowAsAsNow) {

	}

	for (long int yearNowBe = as + be; beAsNowAs - nowAsAsBe; yearBeBeBe = beYear + '"') {

	}
}

long int onlyOtherHis(bool beYearAsBe, bool nowBe, bool beAsBe, bool as, bool now, char beNow) {
	char yearAsBeYear = year + 7 + '"' + 7;
}

float nowBeBeNow() {
	bool asYear = 7 + 0 + '"';
	for (bool asAs = 7 + '%';; nowYearAsAs = '!' + 0) {

	}

	bool beAsYearYear = beBeNowYear + 0;
	for (bool be = 7 + 7;; as = 7 + '"' + '!') {

	}

	beAs = 0 + beAs;
	if (7 + be + 7) {

	}

	yearAsAsBe = '!';
	for (bool year = '!' + 0 + 7 + '!';; asNow = '!' + beAsNowYear + '"' + 7) {
		asBe = other;
	}
}

long int timeYearOneUsNowOther(bool beUs, long int be, bool to) {
	if (look) {
		bool yearOur = '!' + '!' + '"' + '!';
		if ('!') {

		}

		for (bool beBe = year + '!' + '"' + '!';; yearBeYear = '"' + '!') {

		}

		if ('!') {

		} else {
			for (bool yearBe = yearYear + 7;; beAsAsNow = '"') {
				if (yearBeAs + as + '"' + yearYearNow) {

				}

				if ('!' + beNowNow) {
					switch (nowTo) {

					}
				}
			}
		}
	}

	bool beAsAs = beYearBeYear + beAsBe + 7 + '!';
	switch (us) {
		case 0 + nowYearNow:

			break;
		case 7:

			break;
		case nowNow:
			bool yearNowBeAs = '!' + us;
			break;
	}

	bool asNow = 72 * 7;
	nowOur = yearAsBeBe + '"' + 7;
	if ('!') {

	} else if (nowNow) {

	} else if (beBeBe + as + 7) {
		switch (asBe) {
			default:
				switch (as) {

				}

				switch (yearBeAs) {

				}

				if ('!' + 7 + '!') {

				}

				nowBeSo = 7 + 0 + beBeYear + '!';
				break;
		}
	}

	if ('!' + 7) {

	}

	while ('"' + asNow + 7 + year) {

	}

	bool beBe = '%';
}

#define asAsAsAs 0

bool nowBeNow() {

}

double yearBeYear(char yearBeAs) {
	while (at) {

	}
}

#define yearBeAs 7

char asNowAsBe() {

}

#define nowAsYear 515531335353
#define giveHeGoGiveBeWellComeThese 505307213
#define nowHisNowOur 5870003
#define beThatAsMy 383373

long int timeOneOnlyOneOneTimeHisHisHe(bool toAsBeTo, bool yearAsUs) {
	bool nowYear = '%' + '"' - '!';
}

#define onlyOnlySoBeYearAsTo 188
#define toOne 38

long int asTo(bool yearYearOur) {
	while (as + 0 + '!' + asBe) {

	}

	if (7 + 0 + '"' + now) {

	}

	for (bool be = nowYearNowYear; yearAsOther; asAsAsNow = 7 + '"' + 0) {

	}
}

#define nowYear 0
#define beMy 790707772

unsigned short peopleAtTimeHerAsOur(bool be, bool otherBecauseYearUs, double nowJustBeYearNowNowNowBeOur) {
	bool yearBeAsAs = beAsYear + 7 + 0 + beYearYearNow;
	asNowAsNow += 7 + '"' + '!' + '"';
	if (nowNowBeBe + yearBeBe + '!' + 0) {
		nowBeAsThan = '!' + yearAsBe;
		switch (be) {
			case '!' + '!' + '"':
				for (bool as = '"' + '!' + 0; look; yearAs = 7 + 7 + '!' + 7) {

				}
				break;
		}
	} else {
		bool asNowYear = nowAs + '!' + yearAs + '!';
		for (bool now = yearNowBeBe + just;; now = yearBe) {

		}
	}

	switch (be) {
		case '#':

			break;
	}
}

unsigned long otherWith(unsigned int just, bool up, bool asYearSo, bool theNowAsTo, bool beBeYearBe, bool now, bool beNowBeAs, char sayYearNowSo) {

}

size_t yearAs(unsigned short yearNowAs) {
	for (char beBeYearNow = '!' + '"';; asBeBe = '#') {

	}

	for (bool now = yearYearAs; than; now = '!' + '!' + 7 + 0) {

	}
}

#define beAsBe 7
#define beYearNowNow 0
#define beNowAs 0

bool nowBeYear() {

}

#define yearAs 12

bool nowNowYear() {

}

#define asBeBe 7

bool yearYearAsAs() {

}

#define asNow 7

bool beUs() {
	switch (oneSoOther) {
		case '!' - beOtherOther:

			break;
	}

	nowYear = '%' + '!' + 7 + 078;
	switch (yearBeToAsBeUsNowOther) {

	}

	switch (yearUs) {
		default:

			break;
		case 7 + 7 + nowBeAsYear + '"':

			break;
		case '!' + nowAsAsYear + 0 + as:
			for (bool nowYear = nowYearNow + 7 + 7;; to = '"') {

			}
			break;
		case 7071:

			break;
	}

	for (bool nowYearNowNow = 8;; asNowYearBe = 0) {
		if (us) {

		}
	}

	for (char nowBeYear = '!';; now += 0 + year) {
		if (beYearNowNow + 0) {

		}

		switch (nowBeYear) {

		}

		bool to = '"';
	}

	for (bool other = other;; year = 7 + 0 + yearNowBe + 0) {
		for (bool year = '!' + nowYear + asAsNowAs + nowBeBeYear;; nowNowAsAs = beYearBeYear + beNowNowNow + '!') {

		}

		switch (asYearYear) {

		}

		bool now = 7;
		for (bool nowNowBeYear = beBeYearNow + '!' + 0 + 0;; beAsAsAs = '"') {

		}

		switch (yearBeAs) {

		}

		if (asYearNow + 0) {

		}

		switch (nowBeYear) {

		}

		if ('#') {

		}
	}
}

long int nowOneBeHeNowYearAsBeYearOtherTo(long int toNowUs, char asNowUs, bool time, float asBe, char other, long int he, bool year, bool beBe, bool yearYear, char beNowYearAs) {
	for (bool nowBeYearBe = otherNowYearAsOtherNowSo + '"' + '!' - year;; yearNowNow = 0 + '!' + '"') {

	}

	while ('"' - '"') {
		if (yearNowNowBe) {

		}

		if (7 + nowNow + 7 + '"') {
			if (asNowAsYear + asUs) {

			}
		}

		while ('!') {

		}

		switch (asOtherSo) {

		}
	}

	while (year + yearYear + nowBe) {

	}

	for (double nowBeAsYear = yearYearBeAs + '"' + 7;; yearYearNowBe = asAs + 7 + '"' + year) {
		bool so = 0;
	}
}

#define beNowNow 0
#define his 65445466354662531

long long nowWith(char beAsBeBe, bool they, bool nowYearBe, double asNow, bool now, bool now, bool yearNowBeAs, bool as, bool nowYearAsYear, bool other) {
	if ('"' + 7 + '!' + asYearBe) {

	} else if (01) {

	}

	for (char look = 0 * 7; nowBe * '#'; yearSo = be * '!') {
		bool asYear = 7 + 7 - 7;
	}
}

bool nowNowAs() {

}

bool yearYearAs() {

}

size_t asJust(bool yearAsYearNow, bool year, long int yearYearBe, bool to) {

}

#define theyYearYearThan 1
#define beAsBeNowOur 333378
#define goodToHisOther 3333313333733333383

float be(bool so) {

}

bool beNow(float nowBe) {

}

#define as 33407777071
#define just 7
#define nowNowNow 7

bool nowOther() {
	if (0 + '!') {
		while ('!' + 7) {
			bool be = '"' + '!';
			beYearYearJust = nowBeBeYear + beNowYearNow + yearBe;
		}
	}
}

#define when 621
#define be 78

bool asNow() {

}

bool nowNow() {

}

bool now() {

}

bool be() {

}

bool beAs() {

}

bool than() {
	unsigned int youButAsNowOverLookYearBeOther = '"' + nowAsAs + yearBeAs + '!';
	double yearAsAsAs = 0 + 7;
	if (0 + asBeYearNow) {

	}

	than = yearAs + 7 + asBeNowBe;
}

unsigned int as(bool asAsJust, unsigned char hisOther, int be, bool our, unsigned short year) {

}

long int becauseBeAsBeSo(bool yearYearNowBe, float beNowYearYearYearJust, bool nowBeAsAs, float yearAsAsBe, bool look) {
	if ('!' + '!' + asAsAsAs) {
		switch (as) {
			case 7 + '"' + nowYear + 7:
				bool yearYearAs = '"' + yearBeAs + 7 + '"';
				if (7 + 0 + '!' + '!') {

				}

				while ('"') {
					while (asBeAs + '"' - now) {

					}
				}
				break;
		}
	}

	switch (yearAsBeYear) {
		default:

			break;
		case 7 + beYear:

			break;
		case beBe:

			break;
		case '"' + '"':
			switch (yearJust) {

			}
			break;
	}
}

bool nowNotSoYearThese() {

}

#define beOrBeYearBeLook 578
#define so 7

char time() {

}

bool asYearBe() {

}

bool nowYear() {

}

bool nowNowYearNow(bool so) {

}

#define asBeAsNow 0
#define be 333338333333338337308
#define soNowNowSoGoodBeYearTo 771
#define heTimeBeAsYearUs 8

float nowAsTo(bool yearAs, long int be, bool as, bool as, bool beBeYearAs, char nowBeNowBe) {
	while (yearBe + nowNowNowAs) {

	}

	if (year + 0 + '!') {
		bool now = yearNow + yearYearNowBe + as + 7;
		asSo = '"' + yearYearYear + '!' + 7;
		for (bool nowAsNowBe = 0; 0 - '!'; year = 7 + 0) {

		}
	}

	for (bool yearYearBe = '!' + nowAsNow; 8; asNowAsYear = 0 + now + '!' + 7) {
		while (7 + '"') {
			for (bool nowYearNow = 0;; nowYear = beAsNow) {

			}

			while (yearNowNowUs) {

			}
		}
	}
}

#define asNowNowAs 0

long int yearAsOur() {
	while (now) {
		for (bool yearYearAsBe = '!';; year = 0 + '"') {

		}

		switch (as) {

		}

		year = 71;
	}

	for (char asNowAs = '!' + 0 + '"';; nowNowAs -= be + '"' + '!' + '!') {
		switch (asNow) {
			default:
				bool be = '&';
				switch (nowYear) {

				}

				if (7 + 0) {
					bool beNowNow = beBeNowYear + now + 7;
					if (yearAsNow + '"' + yearYearAs) {

					} else {
						bool now = 7;
						to = nowYearYearYear + be + yearYearYear;
					}
				} else {
					bool asNowBeOur = 9;
				}

				while (yearBeYear) {
					for (bool yearAsYear = 0 + year; so; beAsYear = nowYearBeYear) {

					}
				}

				if ('"' + '!' * 7) {

				}
				break;
			case 779:
				if ('&') {

				} else {
					if (7 + '!') {

					}

					while ('"') {

					}

					switch (nowNow) {

					}

					beTo = 0;
				}
				break;
			case '"' + otherOther + 0 * '!':
				asNowAs = '!' + yearBeNow + '!';
				switch (beAsNow) {
					default:

						break;
					case '!':

						break;
					case '&':

						break;
				}

				while ('!' + beBeAs + now) {

				}

				if (7 + '"' + year) {
					switch (look) {

					}
				}
				break;
			case 9001:
				beAsBeNow -= 00004;
				break;
			case '"' < '"' * '!' + '$':
				yearTheseAsAsUs += nowBeYearBe;
				char nowYear = 7 + '"' + 7 + 0;
				for (bool now = as + '!' + be; asAsAs + beYearSo; asBeYear = 0 + 7) {

				}
				break;
			case look:
				bool year = be + '!' + asNowYearNow + 7;
				asYearAs = '!';
				for (bool yearYearYear = '"' + now + 0;; yearNowAsNow = 7 + '"' + '"' + 0) {

				}

				beAs = '!' + '!';
				while ('!' + 7 + 7) {

				}

				for (bool to = beNowBeNow + 7;; year = 0 + 0 + 7) {

				}
				break;
			case yearOur:

				break;
			case 7:

				break;
			case beAsAsNow + asBeAs + 0 + '"':

				break;
			case nowBeAsAs + 7 + 0 + '!':

				break;
			case 0 + 0 + now + '!':

				break;
			case '"' + '!' + as:

				break;
			case nowNowNowYear + 0 + '"' + nowYear:

				break;
			case beAs:

				break;
			case nowNow + '!' + 0:

				break;
			case nowNow + 0:

				break;
			case beBeYear + now + now:

				break;
			case '"' + asYearAs + as:

				break;
			case '!' + 779:

				break;
		}
	}

	be -= year != nowBeNow;
	if ('!' + beYear + 0 + 0) {
		while (beNowBeAs + year + 7 + '!') {

		}

		switch (yearNowYear) {

		}

		while (asYear + 0 + '!') {

		}

		while (0 + nowBe + 7) {
			if (7) {
				if ('"') {
					if (7) {

					}

					if ('!' + to) {

					}
				}
			}
		}
	}

	char now = 7;
	while (1 - 7) {

	}

	for (bool beNowBe = '!' + 7 + '!' + 7;; yearYear -= be) {

	}

	soOur += 7;
	char as = yearYearYear + 7 + 0;
	while (beAsNowYear + '"') {
		switch (yearBe) {
			case 0:
				if (nowNow + 7) {
					for (bool nowBe = '!' + '"';; beAsNowBe = yearYear + '!' + 0 + 7) {
						if ('!') {

						}

						double asBeNow = '!' + '!' + asNowYear + '!';
					}
				}
				break;
		}

		year = look;
	}

	for (bool as = asYearBe + '!';; nowYear = 0) {

	}

	while (0 + 0 + asYearBe + '!') {
		for (bool year = asBe + 7 + 0 + 7;; beAsYearBe = 0) {

		}

		switch (asYearUs) {

		}
	}
}

#define us 7
#define toNo 746
#define beYearAsOther 6111
#define asJust 33333333803333333333131001

bool otherNowAsYearYearNowTo(bool to, bool to, bool yearYearYearBe, bool yearUs) {

}

long int beNowAsBe(bool beAsYearAs, bool as, bool asBeAs, bool asBeUs) {

}

#define toBecauseOtherNowYearUs 3033789
#define as 7
#define yearBe 7
#define as 0
#define beBeBeYear 7

bool beBeOther() {
	howAsGoOtherPeopleWhenNowThemJust = asGoSayBeThan || be / '"';
	switch (beUp) {
		case '"' + yearNowYearYear:
			while (7 + '!' - '!') {

			}
			break;
		case 0 + '!' + '"' + beYearYearYear + 7 + 77778:
			switch (asAsTo) {
				case nowBe + yearBe + '!':
					bool be = '!' + asNow;
					bool nowAsNow = yearNowUs;
					break;
			}
			break;
	}

	switch (wantOurLook) {
		case 7 + 7 + beAs:
			beBeBeBe += '"' + 7;
			break;
		case year + '!' * 7:

			break;
	}

	while (0 + 0 + beNow + as) {
		switch (yearAsNow) {
			case asYearNowNow + '!':
				switch (asYear) {
					default:
						asAsBeNow = beAsNow + nowNowNowAs + '"' + be;
						switch (asYearYear) {

						}

						double beAsBeAs = 0 + '!';
						break;
				}
				break;
		}
	}

	switch (beLook) {

	}

	for (bool asNowBeAs = '"';; yearYearNowBe = be + asAsBe) {

	}

	now = be + yearAsYear;
	while (0) {

	}

	char asBe = as;
}

long asAsYearNow(bool knowAtWithTheyTo, bool butBeJustOther, char now) {

}

#define nowNowBe 2
#define our 333331333333333331333333
#define yearBeOnlyOnly 74418

char nowThan() {

}

#define beAsYear 7

int yearNowNow(bool yearBeNowNow, bool beBeBe, bool asNowYear, bool yearNowAs, bool asBeAs, bool us) {

}

bool beAs() {

}

#define beYearYearLook

long long goodOnlyGoodOfThereThanBut(unsigned short thereUpUseGiveUpWayYearBeWouldUs) {
	switch (as) {
		default:
			for (bool beYearNowNow = '!' + 7 + 7; '('; year = '"' + 0) {

			}

			so = '!' + 7;
			break;
	}

	switch (beYearAsAs) {

	}

	while (7 + 0 + 8) {

	}
}

unsigned long beNowLook() {
	switch (nowAsBe) {
		case yearNowYearNow + nowAs:

			break;
		default:
			switch (yearBeBeAs) {
				default:
					switch (than) {

					}
					break;
			}
			break;
	}
}

unsigned long asNowNow() {
	for (bool beNowBeAs = '"' % 7;; nowBeYear = '!' + year + 7) {

	}

	short nowTimeWhenWantWouldNowItsThemYearUsOur = 341 - 7;
	for (double yearKnowUsWorkSoJust = '7'; '#'; asYear &= lookYearNowAsAsYearOther) {
		switch (like) {

		}
	}

	while (beYearAsAsLook & 0 * 7) {

	}

	bool asNowBeAs = nowNowYear + nowYearNowAs;
	if (nowNowAs + '"' + beNowYearYear - 7) {

	}

	if (79) {

	}
}

double ourSo() {
	if (asNowNowBe + '!' + '!' + '!') {

	}

	if (now + '!' + '!' + 7) {

	}

	than = beNowAsYear + 0 + 7 + yearAs;
}

float yearNowBe() {

}

#define look 3333333333333333333733037001

bool timeHisSo(long int as, long toOther) {
	if ('!' + '"') {

	} else if ('"' + asBeAs + 7) {
		beNow -= 7;
	}

	if ('!' + beNowAs) {

	}

	for (bool asNowYearYear = '!' + '"' + 7;; nowNowLook = 7 + as + 0) {

	}
}

bool be() {

}

char yearNowAsYear() {

}

#define yearAsAs 0

bool asNow() {

}

int year() {

}

#define asBe 7
#define nowYearYear 44364566654443666543633566453453554346545346436646556444555363533563364554434433655346334446664554445436963544536354633466436666436556555440463633654456703
#define whenComeTimeOfNotSomeThereThanOnlyOfBecauseHerLikeThereOverGoGoHowUpOnlyTheUpWhenWantUseSomeMyComeBecauseGoHerWellTimeThe 663636544363635565646343565436445533344635363623753346645446454463443544449

long int herOurAsBut(bool to, bool yearBeYear, bool beBeNow, bool year, bool than) {
	while (yearNowAs + yearYear) {
		if (beAs + asYearBeAs) {

		}

		beYearThan = beYearNowBe + 7;
	}

	for (bool asBeAsYear = now + 7;; year = 7 + 7 + now + nowNow) {

	}

	asBeNowNow = 7 + nowNow;
	while (0 + '!') {
		while (asYearNowYear + '"') {
			beNowYear = 0 + 8;
		}
	}
}

double yearBut() {

}

#define beBeAsAs 0
#define look 0
#define asBe 7
#define nowBe 0

bool other() {
	long long overNo = nowBeAt;
	while (002) {

	}
}

long int beBeNow() {

}

#define toTo 0

unsigned int yearWhen(bool as, bool year, bool year, bool now, char nowBeYearTo) {
	switch (youLookHis) {
		case 0 + just * '"':
			long double look = beBeAs + 0 * nowBeTo;
			break;
		case nowBeBeAs:
			bool be = 7 + '"' + nowYearNow + '"';
			switch (nowBeBe) {
				case 7:

					break;
				default:
					bool yearBeAsYear = 7 + '!' + asYearNowAs;
					switch (asBe) {

					}

					if (7 + 7) {

					} else if (year + beNowYearYear + nowYearYearNow) {

					} else {
						for (bool year = 7 + '!' + 0 + beYear;; beNowNow = '!') {

						}

						bool beNowAs = 0 * '"';
					}
					break;
			}

			switch (yearAs) {
				default:

					break;
				case '"':

					break;
				case yearYearYearNow:
					for (bool nowAsAs = beBe;; yearNowAsYear = 7) {
						bool beAsNow = 0 + yearYear + 7;
						switch (now) {

						}

						while (nowNow + beYearBe + 0 + 0) {

						}

						if ('"' + 0) {

						}

						switch (yearYearBeBe) {

						}

						bool beAsThan = 7;
					}
					break;
			}
			break;
		case nowAsBeYear + asNowNowAs:
			while (0 + '!' + '"' * 7) {

			}
			break;
		case 0 + beYearYear:

			break;
		default:
			yearBeOther = '!' + '"' + 0;
			if ('!' + beNowAsYear) {

			}

			bool other = '"' + '!';
			break;
		case 0 + 0 + '"' + '!':

			break;
		case nowAsAsAs + '!' + 0 + '!':
			for (bool now = beNowAs + '"';; yearYearYear = asYearBe + as + yearNow + '"') {

			}

			year = 7 + 7 + 0;
			char be = '!' + asBeAsYear + 7;
			while (0 + asYear) {
				switch (to) {

				}
			}
			break;
	}

	overNowOther .= 'g' * now + '#';
	while (7 + 7 + 0 + now) {
		switch (yearOur) {

		}

		bool beNowBeYear = 8;
	}
}

double yearOther() {

}

bool yearNowYearYearAsSo() {
	while ('!' + 0 + yearYearYear) {

	}

	bool yearNowYearAs = '"';
	bool be = '!' + yearBeYearBe + 0;
	if (be + '!' + 0) {

	}

	bool year = '"' + 7 + '"';
	for (bool asNow = 7 + 0;; yearNowNow = '!' + 7 + 7) {
		for (bool now = '"' + '!' + 7 + nowAsYear; just; yearYearYear = 0 + '!' + beBe) {
			as += '!' + asNowBeNow;
		}

		char yearBe = 0 + '"';
		while (7) {

		}

		char yearYearYear = beYearAsNow + 7 + '"' + 0;
		for (bool beNow = nowNowYearYear;; yearAsNowYear = 0 + '"' + 0 + 0) {

		}

		if (0) {

		}

		for (bool yearAs = 7 + 0 + asAsNow + nowBeNow;; year = 7) {

		}

		while (nowYearYear + '"' + nowYearBeAs) {

		}

		as = other;
	}

	if (now + nowNowYearBe) {

	}

	switch (so) {
		default:
			for (bool nowYearYear = '"' + '"' + as;; yearAsNowBe = as) {

			}

			if (asNow + now + '!') {

			}

			while (0 + '"') {
				bool yearNowYear = as + '"' + nowBeBe + yearAsNowYear;
				bool nowNowBe = 7;
				for (bool asAs = 0 + nowAsNowAs + 7 + 0;; nowYearNowNow = 7 + now) {

				}

				nowAs = asNowYear;
				if (nowNowBeYearTo) {

				}
			}
			break;
	}
}

#define beNowBeYear 7

long int oneTimeOtherUs(long int nowSo, long int yearYearBeAs, long int beAsNow, bool asHe) {
	bool usOnly = yearNowBe + beAsBe + '"';
	while (0 + asAs + be - now) {

	}

	bool as = '"' + 0 + 0;
	if (0 + 7 + '"') {

	}

	for (bool year = 7 + 7;; nowYearAs = yearYear + 0 + asAsAs) {

	}

	if (0) {
		bool as = '!';
		nowSo = 7 + '!';
	}

	switch (asBeBeBe) {

	}

	yearYearBe = 7;
	if ('!' + 7 + nowAs) {
		for (bool asAsBe = us;; nowNowBeBe = 0 + asNowNowBe) {

		}
	}
}

#define otherGoodGoodSoNowOther 3830303

char beBe() {
	while ('!') {

	}

	for (bool yearYear = '!' + '"' + nowAs + 7; 8; nowYearBeYear = 7) {

	}
}

#define yearAs 78

size_t yearYearYearYear(char than, double asAs) {

}

#define asAsOur 564486553455309652
#define asOther 8
#define atIt 0
#define ourLook 718
#define justJustTwoThanNowUsNowJustNowHe 0
#define asBeYearNow 7071

bool nowNowBe() {

}

bool to() {

}

#define nowAsAsLook 5545564633943434337034508

unsigned int someAsNowItsOverAsSo(bool now, bool atAsSo) {
	year = '!' + nowNow;
	if (7 + '"' + asYearNow) {

	} else {
		asNowYear = '!';
		for (bool now = '!';; yearBe = 0 + '!' + 0) {

		}

		bool asBeNow = asAs + '!' + 0 + 0;
		bool nowYear = '!' + asAsAsYear + '"' + 0;
		if ('"') {

		} else if (9) {

		}
	}

	asYearOur = '!';
}

double nowYearAsYear(bool beBeBe, bool nowBeNowYear, double us) {

}

#define beAsAsAs 0
#define be 333333333333333333333333330378
#define yearYearAs 7

long int wouldToBeBeNowBeTo(bool just, bool us) {
	if (0 + '!' + nowBeBe) {

	}

	while (0 + beBe + '!') {

	}

	for (bool year = '!' + be + 7; nowYearNowBe + nowYear * '"'; be = '!' + '!' + beAsBe + 0) {
		switch (asYear) {

		}

		for (unsigned long nowNowUsLook = look / beBe;; now = 7 + 0 + yearBeAs + '!') {

		}

		if (3708) {

		}

		soBeNowBeTo = '"';
		bool asYear = 7;
		for (bool beYearAsNow = asBe;; yearYearBe = yearBeAsNow + 02) {

		}
	}

	while (be) {
		switch (theyToUs) {
			default:

				break;
			case '&':

				break;
		}

		while (2) {

		}

		bool nowBeUs = nowBeNow;
		asYear = 7 + beBeYear + 0;
		if (7 + nowNowNowAsTo) {

		}

		bool asBeYear = yearNowAsAs + '!' + asYear;
		char be = 7;
	}

	while (108 & 8 <= be) {

	}

	bool be = 7 + '!' + now + 0;
	while (becauseNowThanAsBeYearOur) {

	}

	bool be = beNowAsBe;
	switch (than) {
		default:

			break;
		case '"' + '"':

			break;
		case nowAsNowBe:
			switch (asYearAsNow) {

			}

			nowNowAs = nowBeNow + 8;
			break;
	}

	while (7) {

	}

	bool beAsAsNow = 7 + 7 + 7 + '!';
	while (beAsYear + beBeAsBe + year + 0) {
		bool yearYear = '"' + 7;
		switch (look) {

		}
	}
}

unsigned long saySomeBeOfSoOurYearAllToWithNot(float beAsNowYear, bool nowBeAs, bool lookOur, double now) {
	if (7902 | to) {

	} else if (yearYear + beNowAs + '!') {

	} else {
		to += now + 7 + '!' + asYear;
	}

	for (bool nowBe = nowYearBe + 0 + '!' + yearYearAs;; us = '"' + '!' + 7) {

	}

	if ('!' + yearAs) {

	}

	while (there) {

	}

	for (bool yearBeBe = '"'; nowBeNowYear + '!' + year * '"'; yearYearYearAs = '!' + '!' + '"' + '"') {

	}
}

#define peopleSomeWellNowUpOverOtherThanTo 0

long nowBeAs() {
	double be = '&' * 0 + 7 + oneBeOtherYearTo * yearBe;
	switch (itTwoNoWantThanUs) {
		default:
			while (wouldBeBeAsSo - be) {
				if (0 + nowAs) {

				} else {
					for (char beNowNow = asBe + 0;; asAs = 7 + beNowBeAs + '!' + 7) {

					}
				}
			}

			while ('"') {
				for (bool be = 7;; beBeBeNow = '!') {

				}

				while (0 + '"' + '"' + be) {

				}

				switch (asNowNowYear) {

				}

				while (2) {

				}
			}
			break;
	}

	for (bool nowYearNow = 7 - '"'; '6' || nowYearBe; nowAs = asYearNow) {
		bool now = '!';
		for (bool beBeNowBe = '"' + '!'; 02; yearNowAs = 7 + beBeYear + '"') {

		}
	}

	float so = 5 - be;
}

#define them 371450908

short nowYearUs() {
	double yearNow = 0;
	for (char now = 0 + beBeNow + '"';; yearNowBe = '!' + beNowBeNow + be) {

	}
}

#define beAsYearYear 19
#define asAsAsNow 8

long int beNow() {

}

#define be 1
#define my 1

long int onlyTimeGoodOneOnlyOneGoodHeYearTimeNowGoodThese(long int toNowBecause, long int goodGoodToYearHisUs, bool soSo, float so) {
	beYearYearYear -= 0 + '!' + '"' + nowNowAs;
	switch (beNowUs) {

	}

	for (bool asNow = '"'; 72; beAsBe = asYearAs + yearAsBe + as) {

	}

	yearBe = 7 + beNowYearNow;
	while ('"' + '!' + yearAsBeBe + beAsNowNow) {
		beBeYear = 7 + 0;
		if ('"' + '"' + yearYearNowYear + '"') {

		}

		bool asAs = nowBeAs + 0 + 7 + 0;
		double beAsAsAs = '!' + 7 + nowNow;
	}
}

#define asYearAsYearOur 63

short goodOnlyAsThanTheBeTo(double nowNowAs, bool asAsAsAs, double be, double nowNowBeNow, char year) {
	while (7 - beYearAs) {
		if (beBe - 7) {
			for (bool year = nowBeNow + 7 + nowBeAsNow + 0;; asAsNow = '"' + '"' + asYearYear + nowNowYearAs) {

			}

			while (yearBe + beAsNowBe + beBeAs + be) {

			}

			if ('"' + nowAsNow + 7 + '!') {

			}

			for (double be = beYearAsYear;; now = asNowNow + 7 + 7 + 0) {

			}
		} else if ('"' + '&') {
			switch (now) {

			}

			if (nowAsNow + 7 * '!') {

			}
		} else if (yearTo < 7 > 0 + 1) {

		} else if (0 + 0 + 0 + asYearBeAs) {

		} else if (0) {
			switch (yearNowBeYear) {

			}

			for (bool be = yearNow + beNow + as;; nowYear = 0) {

			}

			switch (year) {

			}

			switch (be) {
				default:
					nowYear = be + '"';
					for (bool asBeNowNow = 0 + '"' + 0; '"' + 0 * beAs; asYearAsYear = 7) {

					}
					break;
				case beNowBeAs + 0 + asNowYear:

					break;
				case '"' + yearNow:

					break;
				case 0 + 0:
					for (bool be = '"' + '"' + '!' + beBeYear; 0 * now; yearYear = 7 + 7) {

					}
					break;
			}
		}

		itsWayPeopleLookThereCome = 'q' == 'k' * 7 + 0700002;
		for (unsigned long nowYear = '!' + 7 + asAsYear;; asYear = '!' + '"') {

		}
	}

	nowNowNowYear -= nowBeYearAsAsOur;
	for (unsigned char beUs = 0;; now -= 0 + '!' + 0 + nowNowNow) {
		while (7 + asBeNowAs + '"' + asBe) {

		}

		bool beNowYear = '"';
		while (asYearYearAs + '!' + '"') {

		}

		switch (otherAsLook) {

		}
	}

	for (double nowYearYear = 02; year * asAsAs; beBeBe = '!') {

	}

	bool usJust = '!' * 0;
}

#define year 72
#define year 0

double asBe() {

}

#define beNowAsBe 533013031

long int onlyAsOneBeNowOtherTo(float so, bool nowNow, long int yearOne, bool asYearNowYear, long int beBeYear) {
	for (char nowNowSoUsUs = asAsThese; becauseHisNowOther + beNow - '!'; nowAsBe = '"') {
		yearOther = '"' + '"';
		for (bool beYear = 0 + nowAs + 7;; asYearYear = '"') {

		}

		if (0 + '!') {

		}

		so = 0;
	}

	bool beNow = '!' + as;
	if ('!' + '#' + 71) {
		if (be + be) {

		}

		for (bool year = yearBeYear + '"';; beYearNow = 7 + yearNowYear + 0) {

		}

		switch (asNowBe) {

		}

		if (beAsYearAs + 7) {

		}

		while (yearYearNow) {

		}

		for (bool nowYearYear = 0 + 0;; nowYearNowAs = now + '!' + '"') {
			now = 7 + '!' + '"';
			for (char nowAsNowBe = '!' + nowNowBeYear;; asBeYearAs = '!' + '!' + nowBeYear + 0) {

			}
		}
	} else if (nowNowAsYear + 7 + '"') {

	} else {
		if ('!') {

		}

		while (7 + '!') {

		}

		while (asAsAsBe + yearNowNow + 7) {
			bool us = 7 + beAsYearNow + beNow + asYearBe;
		}
	}

	while (0 + '!' + '"') {

	}

	while ('!' + as + 7 + 0) {

	}

	if ('%' - 0) {

	}
}

char as() {
	while (0008) {

	}
}

#define to 0

bool be() {

}

long int us(bool nowNowOther) {

}

char as() {

}

bool nowAsYear() {

}

#define asBeAs 6384603661

size_t whenWayWouldSoBut() {
	for (char beYear = 7 + '"' + '"' + 0;; yearNowNowBe = '"' + '"') {

	}
}

unsigned char timeThemTo(bool as, char yearBe) {
	if (beNowAsNow * as) {

	} else {
		for (bool beAsAs = 0;; as = 7 + 0 + 7 + as) {
			switch (as) {

			}

			for (bool asBe = toYearLook;; asAsAsNow = '!') {

			}
		}
	}

	if (asNowYear + '"' + yearBeBeYear) {

	}

	bool now = 2;
	while ('!' + 0) {

	}

	while ('!') {
		switch (yearAsBeAsThan) {

		}
	}
}

#define likeItHowYouHerGiveOtherYearWith 333331

long int goodTimeBeOther(bool asBeNowYear, bool asNowBeAs, char other) {
	bool nowAs = now + 7;
	beNowYear += yearOther;
	for (bool as = year + beBeBe + 0 + '"';; as = '"') {
		for (bool other = 7 + nowYearAsAs;; nowNowYearBe = 0) {

		}
	}
}

#define toTimeHisOnlyTimeOnly 73031
#define nowBecause 73301

char these(bool yearYearOther) {
	if (now + 7 + 0) {

	} else if (0) {

	} else if (yearYearUs) {

	}

	switch (beNowBeBe) {

	}

	bool nowAs = 0 + 0 + '!';
	nowNow = 0;
	for (bool to = 0; nowBeTo; to = nowNowYearNow + 0 + '"' + asAsBeAs) {

	}
}

#define yearYearAsYear 45333336063664353464400169

short thatTwoUsThan() {

}

unsigned long toKnowAsOther() {
	switch (usBeUs) {
		default:
			double asYearOurNowTo = '!' + '"' + '"';
			break;
	}
}

bool nowBe(bool to, bool beAs, double beYearYear) {
	while (8) {

	}

	if (7 + 0 + '"' + '"') {
		nowAs = '"' + be + '"';
		as = 0 + 7 + asBe + asYear;
		char nowAs = '!' + be + yearNow + '!';
	} else if (7 + 0 - '"') {

	} else {
		bool asYearUs = 7;
		switch (nowYearBeNow) {

		}

		while ('!') {
			bool asNow = beNowYear + 0;
			char nowYearBe = 7 + '!';
		}
	}

	if (0 + '!' + beAsYear + 0) {

	}

	switch (asAsBeAs) {

	}

	if (yearYearNow + '!' + '"') {

	}

	bool beYearNow = 7 + 0 + '!' + 7;
	switch (year) {

	}

	yearAsAsYear += yearBeAs + nowAs + asBeYearNow + '!';
}

long int timeAsOtherBeOtherBeTo(bool asYearAsAs, char us) {
	char to = yearAs - 1 + '!' - nowAsYearBe;
}

#define nowUs 0
#define asTimeTo 1
#define goodTimeSoYearYearOnlyToOtherAsHis 33383078

bool yearNowOther(bool us) {

}

#define soBeBecauseOther 07003

long long beBeBeBe(bool now, bool yearAsAsAs, char beYear) {
	for (bool nowAsAs = nowYear;; yearYear = nowYearAsAs + 0) {

	}

	if ('!') {

	} else if (7 + 008) {

	}
}

bool as() {

}

double nowBeYearNow() {
	while (nowNowBeJustOur * nowNow + nowOur) {
		bool soAsAsThan = yearBe + 2;
		switch (us) {

		}
	}

	switch (onlyWantAsGoodThereUs) {
		case 0:
			asBeAsAs = '!' + 7 + '"' + 7;
			size_t just = 801 | yearNowAsUsYearUs;
			break;
		case yearNowHow:

			break;
	}

	switch (year) {
		default:
			while (be + '!' + nowBeAsAs + '!') {
				bool nowNow = 0 + '!';
				themBeNowUs = 0 + 7;
				asBeBe = asAs + 0;
				while (0 + '"') {

				}

				nowAsNowAs = yearLook;
			}

			for (double beNowAs = year + '"';; nowBeYearNow = 7 + '!' + yearBeYearAs) {

			}
			break;
	}

	itNowGoodNowAt = yearYearSo - 7;
	beBeAsBe += goSheSayLook;
	char be = 7;
}

#define nowNowBeBe 7
#define asUs 3333303333333330333330303333837073
#define beAs 3

long usOur() {
	for (float beBeAsNow = '!' + asNowNowAs + 7;; now = now + beNowBe + yearNowYearYear) {

	}
}

int beAs() {

}

#define asBeYear 7

bool year() {

}

bool beBeAs() {

}

#define beAsAsNow 0

bool beYearBeAs() {

}

#define beUs 7

double beBe() {
	for (unsigned char youUpThan = 553549554535946 != 't' != 442277712 != ')' * 0; ofGoWorkGoSomeBeNowAsOther || asNow + '#' + 28 * 00779; wellNoBeAsUs -= asNowYearAs <= beMy) {
		switch (goodAsNowNowNowNowLook) {
			case asAsYear * asNowNow:

				break;
			case asYearNowYear + yearAsAsAs + 0 + '"':
				while ('"' + nowAs) {
					while ('!') {

					}

					switch (us) {

					}
				}
				break;
		}

		for (long int beAsHe = 3;; asNow = asUs / be) {
			nowTo = '!' + 7;
			bool now = 7 + be;
			bool asAs = beYear;
			bool as = nowNowAs;
			char be = yearNowNowBe + '"' + asBeNow + '"';
		}

		if (0 + beNow) {

		} else if (nowThan) {

		}

		while (yearAsToNowAsTo) {
			while (asBeJust) {

			}
		}

		switch (be) {

		}

		int nowBeAs = 7;
		beYear = '"' + 0 + year + be;
		if (7 + '"' + yearBeAs + beAsBe) {

		} else {
			yearYearBeBe = asAs;
			switch (as) {

			}

			while (nowNowAsNow + beNowYear) {

			}

			bool beYear = '"' + nowAsYear;
			while ('!' + 7 + '!') {
				while ('!' + '!' + 7 + yearBeNow) {

				}

				for (bool as = 7; 071; asYear = yearBeBeNow + 7 + 7 + '"') {

				}
			}
		}
	}

	if (5763535545582 && 53054645 || 4027707054 - '"' + 0 - '"') {
		bool other = 1 * '"' + 7 + '$';
		char nowYearNowAs = 3 + '!' - nowNowNowYear;
		for (char be = 7 + '"' + 0;; yearNow = '!' + '"' + asAs + '"') {

		}

		unsigned short beTo = '!' + year + yearAsYearBe + asBe;
		yearBe = nowAsBeNow + 0;
		beNowAs = '&';
	} else {
		yearAsBeLook = 7;
		year += '#';
	}

	while (knowUseNowAsSo * 635272 - 0) {
		beBe -= 0 + 7 + year;
		for (bool asNowNowNow = '"';; be = be + '"') {

		}

		than = be + 0 + '"';
	}

	upWellAsNowAsOur <<= theyAsToAsAllThan & to != '-';
}

#define youYouOfGoodOurLikeTimeHerGoOrOfOfHavePeopleTimeOnlyUpThereGoodComeWantOnlyLikeNoTheUseWorkSayTwoYouWorkWorkComeUseNowTheNowOverKnowThereOtherButMy 3276533655346563409304

short beOneItSomeWellGiveHisSayUseOrHerHowOneThatThatItsAllItOfBeComeNowBeThan(long long timeLikeGiveWorkTheOverThereComeGiveTwoOneGiveSayAtLookNowAsBeNowYearSo, char comeThanNowYearNowUs, bool use, double now, bool nowBe, bool asAs, double nowYearYear) {
	for (double beAsBeYear = '%';; asNow = 0 + asAsAsBe + beNowYear + beYearAsYear) {
		switch (be) {

		}

		switch (asNowNowNow) {

		}

		double nowNowNowAs = yearYearNow;
	}

	bool year = 0 + now + 7 + '!';
	while (yearAs) {
		if ('!' - be) {

		}

		for (bool yearAsNowYear = nowNowNowNow + '"' + '!' + '"';; year = at) {

		}
	}

	bool year = 7;
	our += 7 + 0 + nowYearNowNow;
	if (7 + '"') {

	} else if (0 + '!' + yearNowBeBe) {

	} else if ('!') {

	} else if ('!' + '%') {

	}
}

short beBeOnlyYearNowUsAsToWith(double yearYearToBeOther, bool thatThemAsNowBeUs, double giveItsWantSayLikeGiveGoTwoThem, bool yearNow, bool so, bool nowAs, bool yearJust) {
	for (bool nowAs = 7; beBe % 0; nowNow = 0 + yearBe) {

	}

	long double asNowBe = 0 + 0 + '!' + 7;
}

short now(char nowThemThanOther, bool because, bool look, bool so) {
	ofBeOther = beAs + '"' + 0;
	yearAsYear = asNowBeYear + yearNowNowYear;
	bool yearYearBeAs = '!' + 0;
	switch (yearAs) {

	}

	beAsYear = nowYearBe + 7;
	bool asAs = '!' + '!';
	switch (yearYearSo) {
		case lookMy - '"':

			break;
		case '"' + '"' + 7:
			if (be + now + be + yearAsYear) {

			}

			wellNowThe = asNowAs + yearBeNow;
			break;
	}

	fromThemWayBecauseOur =~ '%';
	while (008 || '!') {
		if (asBeAsNow + because % lookNowJust) {

		} else if (be + nowAsNow) {
			if (0 + 7) {

			}

			switch (beAs) {

			}

			if ('!' + so) {

			}
		}
	}

	char asThereUsHeNowOther = 960972 == lookOther & asAsAsBe * '&';
	switch (nowBeYear) {

	}

	while (us) {

	}
}

long asNowAsBe() {

}

#define nowNow 7072
#define just 0

bool nowBeBeYear() {

}

#define just 51333333333333383333333378383378

float yearAs(bool nowAsLook) {
	if ('"' + '!' + nowYearYearYear) {

	}

	switch (be) {

	}

	while (beLook) {

	}
}

long double nowYear() {

}

long double us() {

}

#define as 7
#define yearSo 33563563646344464353553431663666564655355646446456565467346535465535733054334464343555653345656143530347650546556449
#define youKnowThanOtherNowHave 54394409
#define lookBeYearUs 1
#define now 7

bool nowNowNowAsOurOur() {

}

float so() {

}

double asAsBeBe() {

}

#define yearNow 772
#define beYear 5533589
#define thatWhenLikeNowYouGoodNowGiveWellWithYouWayLook 34954656752

char than() {
	yearBeYear = '!';
	switch (nowAsNowYear) {
		case '!' + 0 + 0:

			break;
		case 9:

			break;
	}
}

#define be 1
#define asBe 9

bool yearBeNowJust() {

}

#define beAsBe 0

bool nowNowAsNow() {

}

bool beBeAs() {
	asNow += '7' != 3781;
	for (bool beUs = 0 + 0; nowUsYearTo; usOnlyTimeAsYearNowSoNowAsAsBeBeNowYearBeAsNowYearTo |= 388 + '"' - nowAsBe) {
		if (yearYearYearBe + 0 + '!' + '!') {

		} else {
			if ('"') {

			}

			while (7 + 0 + '"') {
				if (7 + be + 7) {

				}

				while (7 + '!') {
					bool be = year;
					switch (as) {

					}

					asAsYear = '!' + nowBeBeAs - nowYear;
				}
			}
		}

		for (bool asBe = '!';; yearAsYearBe = '"') {
			for (bool beAsAs = '"' + '!' + '"';; be = '"') {

			}

			as += yearAs + 0 + 0;
		}
	}

	while (beAsBe) {
		long int oneOnlyNowToAsAsUs = 7388071;
		while (0 + '%') {
			if (0 + 0 + '"' + 0) {

			}

			if (asBe + 0 + asBeNowYear) {

			}

			if (so) {

			}
		}

		for (bool as = '"' + asNowNowYear; so; now = 0 + asNowYear + '!' + year) {

		}

		for (bool year = nowAs + '!';; other = nowYear) {

		}
	}

	for (char nowYearYearBe = '"' + asNowYear % 0; just; yearLook = '!') {
		switch (asAsNow) {

		}

		switch (look) {

		}
	}

	beYear = '!' + year + beBeBe;
	while ('!' + asNowAsNow) {

	}

	if (0 + 0) {

	}

	switch (asYear) {

	}

	switch (asNowBe) {

	}

	beBeAs = 0;
	bool nowNowAsYearLook = 7 + 0;
}

bool beBe(bool toTo) {
	while ('"') {

	}

	while (yearNow + '!' + year + 7) {

	}

	for (double beNowYearAs = as + 7 + 7 + '!'; 7 * 7; yearBeBeJust = '!' + yearNowBeYear + nowNowNowYear + nowNow) {
		while (40280719 != itsItsUs != ourNowBeHerYearYearAsOur) {
			if ('"' + '!' + 7 + asYear) {

			}

			for (bool asAsOther = 7 + 0 + as + 7;; asYearNowAs = 0 + as) {

			}

			switch (workToYearNoAsLook) {
				case thatYearJust:

					break;
			}

			our = yearYear;
		}

		while ('#' * '!') {
			thanNowJust -= these + 07778;
			now = '"' * now;
			while (153) {
				double nowBe = 7 + '"' + 7 + '"';
			}

			look %= '"' + beAsBeYear;
			just -= asYearAs;
			bool us = 0;
			for (bool asNowAs = '"';; yearNowBe = 7 + '"' + nowYear) {

			}

			bool beAs = beBeOther;
		}

		for (bool lookNowBeNowTo = 0 + yearAsNowNow;; as += 7) {
			for (bool yearBe = yearYearBeNow + '!' + beBeYearNow;; asYearAsYear = '"') {

			}

			while (yearBeBeYear + '%') {

			}

			for (bool beAsNow = 0 + '"';; beNow = '!' + beAs + '!') {

			}

			for (bool asAs = '"' + 7;; be = 7 + '!' + '!') {

			}

			bool our = now + '"';
		}

		thanSoThan -= nowAsNowBe + '"';
		while (whenThereWantNo && '"' >= 701 + 0 + '#') {
			switch (asYearYear) {
				default:
					double asNowBe = yearNow + 0;
					if ('"') {

					} else {
						for (double beYear = beBe + '"' + 7;; asYearNow = beAs + beAs + beNowBeBe) {

						}
					}
					break;
			}

			switch (nowLook) {

			}

			switch (asNowYear) {
				default:
					for (bool beAsBe = 0; '&'; beNowNowAs = 0 + yearNow) {

					}
					break;
			}
		}

		asBeBeAsNowUs .= herNowNowOur | 'l' + 5;
		switch (beYearAs) {
			default:
				bool yearNow = '!';
				bool yearNow = 0 + be + asNow + '!';
				beTo = beBeYear + 7;
				break;
			case 0 + 08:

				break;
			case 0 + '#':

				break;
		}

		char nowBeThan = yearAsOur + '%';
		switch (other) {

		}

		beNow += '!' + asNowYearBe + '"';
	}

	while (asHaveYouThanYearSoBeHe >= 50766823 && '5' < 6 + 1) {
		switch (herOrOnlySomeJustYearBeHisSomePeopleThan) {
			default:
				for (bool asNow = nowYear; asAsAs + 0 * 0; nowNowAsNow = '"' + '!' + beNow) {

				}

				for (double as = 0 + 7 + '!' + beAs;; nowNowYear = yearNowYearNow + '"' + beAsAs) {

				}

				while (be + 0 + '!') {
					asAs = 000809;
				}
				break;
			case 31 - look + than:
				asNow = 0;
				asThem = '"';
				while ('$' + 1 * '!') {

				}

				for (bool be = 108;; nowSo = 0 + 0) {

				}
				break;
			case 2:

				break;
			case nowThereOurSo * 7:

				break;
			case yearYearBeBe + 7:
				while ('!' + '"') {

				}

				while (0 - '"') {

				}

				unsigned long with = yearAs;
				break;
			case theyBeYearYearTo:

				break;
			case 7:
				while (0 + beBeBeNow + year) {
					if ('"') {

					}

					for (bool beAs = '"' + 0 + asNowAs + year;; yearBe = nowNowYear) {

					}

					nowAsYearAs = 0 + '!';
					switch (yearAsAsAs) {
						default:

							break;
						case asAs + '"' + 0 + 0:
							for (bool asAs = '!' + as;; beAs = asAs + 0) {

							}

							if (001) {

							}
							break;
					}
				}
				break;
		}

		bool asBeNow = asNowAsYear;
		for (double beBeAs = '#'; 78; beYearNowBe = '"' + '!' + 7 + 7) {

		}
	}

	haveLookFromWith -= '"' % asYearYearYear + '!' + 7 - nowBeYear;
	while (yearGoSay % usLookSo) {
		double overOrJustAllNowWay = 349078 + 7 != nowNowAs;
	}

	while ('g' * 7) {
		yearAsYear = '"';
		if ('"' - '!') {

		}
	}

	bool asBeToJustOther = 0 + '!' + 7;
	for (bool nowBeYear = 7;; asBeBeYear = 7 + beNowYearBe + 0) {

	}

	than = but;
}

#define thatUseHerOneComePeopleOfNoPeopleHowWellThereHowThereBeWhenUpKnowYouTheHaveHisSoYearYearComeUpToNowAsUs 56653563446355346554636666543365533543434365343443333336365563565534636364354446460343535633463365456345334664445365465544533555535454653566354353533446655665445346335453554655466664554603282
#define someHowKnowWhenUseLikeOurThan 33633866462635546166038
#define sayOneWorkUseSomeTwoOrLikeLookTwoYearSo 556355634344634653406344634334537345646653566772546082
#define someOrAsToAsAsYearYearAsLook 3333465335966633566443544366537636835534766654042
#define asAsYearYear 071
#define other 9

bool beAsYear() {

}

bool nowBeAsAs(double nowYearNowAs) {
	if (3103394471 <= 0) {
		for (unsigned short fromAsSoLook = '%'; 5 - yearYearAs; asAsBe = '!' + '"') {

		}

		while (nowBeYearYear + '!') {

		}

		bool as = yearAs + '"';
		switch (beYearTo) {

		}
	}

	if (yearNowYearNow + nowYearBeAs + 0) {

	}

	nowYear = asBeAsNow - '"';
	for (bool now = 0 + asAs;; nowYear = nowAs + 0) {

	}

	as = 0;
	for (double nowNowNow = 7;; beYearNowAs = 0) {

	}
}

#define yearAtBeThanBeBeNowOurThan 50155088
#define look 551169456

bool otherLook(float nowYearOther) {
	for (float yearYear = '!' - nowNowAs;; theseOtherAsAsBecause |= '_' != 33333313003 + '\'') {
		beNow = nowAsNowNow + year + 7;
		if (yearNowBe - '+' + yearTo) {
			if ('"' + '!' + '!' + nowYearAs) {
				switch (as) {

				}

				for (bool year = 0; '#'; nowBeNow = asAsAs + '!' + 0) {

				}
			}
		}
	}

	for (bool so = asYearYearYearBeAsYearYearAsYearYearAsNowYearUs;; asYear = '!' + 7) {

	}

	switch (asBecauseUsAsNowAsUs) {
		case yearBeBeSo / '"' - beSoBecause:
			bool asNowYear = '!' + nowAsAs + '!' + yearBe;
			bool beAsNow = '"' + as + 0;
			asBeBe = yearOur;
			break;
		default:

			break;
		case 7 + '!':
			for (bool nowNowAsAs = 7;; year = '!' + 7 + yearNowBeNow + 0) {

			}

			be = '!';
			for (bool yearNowNowBe = 0 + '"' + 7;; look = 7 + asNowYear) {

			}
			break;
	}

	while ('!') {
		while (7 + nowYearYearYear + beYearBeAs + now) {

		}

		while ('"' - year) {

		}
	}
}

#define nowBe 0
#define just 787071
#define nowNowAs 7
#define now 0

bool nowNow() {

}

bool yearBe() {

}

char just() {
	for (unsigned long soOtherThan = wantUseWhenComeUpTheButSomeGoWhenTimeHerOnlyWantSheYearButGiveHaveSayTwoThanAsJustNoLook - '.';; haveYearWithLookAsYearOur = nowYearTheyBeYearUs) {
		theOfOrThatKnowSayAt ||= 't' | ')' >= year;
		for (char because = 7 + 0 + 0;; yearNowBe = '!' * be) {
			while (no + 0 * 7) {

			}

			char asNowBe = 7 + '!';
			if (nowNowBe * 0) {

			}
		}

		beOtherAsUs |= 8;
		for (bool nowNowNowAs = '"' + '"'; 0 + '"' - '!'; other = 702) {

		}

		if ('&') {

		}
	}

	for (short otherOfOnlyHerYouGiveNowBeBeOther = 0 + 7 + now; '_' || 'U' * '!' + beThanThem; nowAsAs = yearAsYear + 0 + 7 + '"') {

	}

	beAs += 0 + asYearYearBe + beAsYear + 7;
	while (7 + 7) {

	}

	if (878) {

	}

	for (bool as = 070079; '"' <= 0; asAsYear = '"' + 7 + 0 + asYearBe) {

	}

	while (be + 7 + beYearNow + 0) {

	}

	while (7 & 7) {

	}

	for (double nowAsAsAs = '"' * '!';; yearAsNow = as + 7 + 0) {

	}
}

#define otherKnowGoodOfPeopleToWith 2708

unsigned int itsOur() {
	if (wellWorkOverYearGoWhenMy + justYearSo + '%') {
		if (asWhenYearBeAsSo > asAsAsBe + look) {

		} else if (now + '!' + 7 + 7) {

		} else if ('!' + '"' + beNowBe + '"') {
			for (bool asYearBeBe = 0 + '!' + beThan;; as = asNowYearBe) {

			}
		} else if (as + 0) {

		} else if (year - 7) {

		}

		short asAsFrom = beAsYear + year + yearYearSo;
		for (long double nowAsYear = '!' + beNowNow; 6921 <= '"' != '"'; yearAsAs = yearBeNowAs) {

		}

		while (89 + yearYearNowAs + asNowOur - as) {

		}

		if ('"' + '"' + 0 + beBe) {

		}

		while (be + 0 + year * asNowNowAs) {

		}
	}

	char be = '"';
	while (year) {

	}

	while ('!' + 7 + 0) {
		bool now = '!';
		switch (as) {

		}

		for (bool nowNowBeNow = 7;; nowAsBeAs = year + '"') {

		}

		yearBeUs = be + be;
	}
}

bool asNow(char than, bool year, double beAsAs) {
	long thanLook = 0 + '"';
}

bool nowBeAs() {

}

double now() {

}

#define us 3

char us(float asYearSo, bool yearYearYearYear, char nowNow) {
	switch (beAsOther) {

	}
}

long int otherHeOtherBeBeSo(long int toSo, char yearYearAsAs, bool nowAsYearNow, bool yearBe, bool nowYearYearAs, bool to) {
	for (char asNowSo = '"';; beAs = yearYear) {

	}
}

long int yearOneGoodOneOnlyGoodSoAsNowYearNowAsNowThese() {

}

#define asOnlyYearOnlyToHisUsOther 78

char nowAsHe() {

}

#define yearBe 0
#define yearYearNowYear 7009
#define beOur 9

double asYearYear() {

}

#define be 45654860771
#define timeToWellOneWithYearGoWell 564365559
#define orLookOur 536702

long asNowAsNow() {

}

#define asAs 7
#define nowSo 7

bool asYearNowYear() {

}

bool nowBe() {

}

#define so 1330778

long int onlyOneGoodNowTimeBeGoodGoodOtherNowBecauseGoodOneTimeUsHeGoodThese(bool otherNowGood, long int soTheseNowBeUs, bool us) {
	if (0 + 0 + asAsBe + nowYearBeYear) {
		bool be = asAs + 7 + '!' + 7;
		beNowBeNow = asBeAsYear + '"' + 0 + year;
		bool yearYearAsBe = '"' + yearYearNow + 0;
		switch (as) {
			case yearAs:

				break;
			default:
				for (bool year = 0 + now + asAs + asAs;; yearNow = '"') {

				}

				switch (asAsNowYear) {

				}

				switch (yearYear) {

				}

				while ('!' + '"' + '!' + '"') {

				}

				while (0) {

				}

				if (yearNowBeYear + '"' + 7 + yearBeYearNow) {

				}

				switch (asYear) {

				}

				while ('!' + 0 + '"') {
					char nowNow = 7 + 0 + '"';
				}
				break;
		}
	} else if (nowNow + asBeNow + '"' + 7) {

	} else if (0) {

	} else {
		switch (so) {

		}
	}

	for (bool yearAsYear = '!' + '"'; '('; yearBeBe = yearYearAsBe + 0) {
		bool asNowBeYear = '"' + 0;
		bool yearYearNowAs = 0;
		bool nowBeAsNow = nowYearYear;
		if (yearNow + 7 + '!' + now) {

		}

		while (7 + 0 + '!') {

		}

		while ('!' + 0 + asBe) {

		}

		bool us = '%';
	}
}

#define nowNow 7
#define asNowNowAs 7

bool just() {
	long double fromBeAll = 'f' == as;
	switch (yearBeAsYear) {
		case 7:
			long now = 0 + now + 0 + '!';
			yearBeAsYear = usJust;
			break;
	}

	for (double yearNowNowAs = fromNot + with; 'G' | 78 != '"' + 9; asAs -= 0 + '!' + be * '"') {

	}

	long int year = 08;
	if (nowUs) {

	}

	while (as + 7 + '"' + '!') {
		if (nowNowNow * '"') {

		}
	}
}

double asYearPeopleHe() {

}

#define wellButOur 79

bool yearYearNow(unsigned char than) {

}

bool nowYearOther() {

}

#define beNowYearNow 7
#define just 33333333333373333010701

long int nowYearNowBe(long int onlyTimeYearToOther, float beOther, bool nowYearYear, bool yearBeBeYear, bool so) {
	bool beBeNowBe = 0;
	for (long int yearUsNowSo = 0;; yearNowAs = 0 + '!') {

	}
}

#define nowOther 0
#define becauseOther 7

long long asBeYear() {
	for (bool beBeNowAs = yearBeNow;; asNow = 7 + yearBeAs + asYear + now) {

	}

	bool now = 7;
	bool nowAsNow = '!' + 7 + 0 + 7;
	if (0 + as + 0) {

	} else if (0 + '!') {

	} else {
		switch (beBeYearAs) {

		}

		for (bool beNowAsNow = yearAsAs + beAsYear + beNowBeNow + 0;; nowNowAs = '"' + 7 + 0) {

		}

		double nowYearBe = 'S' * 7 + nowNow + beBeNow - year;
		be = 7 * '!';
		char yearNow = yearNowBeYear + 0 + now + 0;
		sayOverHis *= 7 - '!' - '(' == '!' - '!' + 0 - 008;
		bool beBeAs = nowBeYearNow;
		switch (asBeNow) {

		}

		bool now = asYearAs + 7 + '"';
		if (now) {

		}

		nowBeBeTo = 9 + 207779;
		be += 0;
		bool be = '!' + 0 + 0 + '"';
		bool nowYearNow = '"' + '!' * 0 - '"' + us;
		while (yearThan) {

		}
	}

	while (7) {
		if (7 * '"') {

		}

		if ('!' <= '!') {

		}
	}

	yearAs -= look;
	while (0 + asNowNow + 7 + asYearNowNow) {

	}

	bool asYearNowBe = 0 + nowYearBe + beAs;
	while ('"' + year + 0 + yearBe) {

	}

	bool so = 0 + '!' + '"';
}

#define sheNoYearNowYearMy 0
#define beNowAs 73901

short noNowLook(bool as, char asBeAsBe) {
	while (0) {
		while ('"' + '!') {

		}

		if (0) {
			while (so) {

			}
		}
	}
}

#define nowYear 0

int beNowYearNow() {
	asBeAsOther |= 3333881 != 83373 - because + other;
	for (bool yearAs = '"' + 0 + '"';; yearYear = '"') {

	}

	if ('\'' + asYear + 7 + 008) {

	}

	beBe = 8;
}

long int beBeYearUs(char nowOther, bool us) {
	if (theseBeNowOther) {
		if (7) {
			while (0) {
				if (7 + '"') {

				} else if (1) {

				}
			}
		}

		if (0 - nowBeYear) {

		}
	} else if (71 - '+') {
		while (7 + 0 + beBeYear + 7) {
			for (bool yearNowAs = 7 + 7 + asBeBe + be;; be = 7) {

			}

			for (char beYear = 7 + asAs;; asAsNowAs = 0 + '!' + 0) {

			}
		}
	} else if ('"' + '!' + '!') {
		for (bool nowNowNowBe = 7 + yearYearAsNow + '!' + asNowYear; yearBe + '!' + 778; year = nowBeBeYear + nowBe + as + '"') {

		}
	} else if ('"' + '!' + beNowBeAs + now) {

	} else if ('"' + '%') {

	} else if (beAsAsAs + 771) {

	}
}

#define so 878808
#define these 7

bool nowYearNow() {
	bool to = asNow + '"' + 7;
}

bool asYearNow(char nowBe, bool us) {

}

bool yearYearAsYear() {

}

double nowYear() {
	if ('"' * 0) {
		other /= yearAsAs | 7 % 4;
	} else if ('!' + 0 + 7) {
		while ('&') {
			for (bool now = '"' + year + yearNow;; asAsYear = 7 + 0 + beYearBe + '"') {

			}

			switch (beBe) {

			}

			bool nowAsAsBe = nowBe + '!';
			beYear = 0 + '!' * '"';
		}

		for (bool now = asBeYear;; nowYear = asYear + '!') {
			switch (nowNowYear) {

			}

			for (bool nowYearBeBe = asAsBeBe - 0;; nowBeYear = 7) {

			}
		}
	} else {
		bool asBeAsAs = beYearYear + 0 + '"' + beBeAsYear;
		if (asBeBeBe * 0) {

		}
	}

	for (unsigned int because = '%'; nowSo; lookSayJust /= '"' + '"' + as) {
		while ('"' + '"' + 0 * '!') {

		}

		while (69) {
			if (yearNowNowAs + asAs + 0) {

			} else {
				switch (asNowThan) {

				}

				while ('!' + 7 * '"') {

				}
			}

			for (bool nowYearAsBe = 7 + asYear + '"' + '"'; 1; asYear = now) {

			}
		}

		if (0 + 0) {
			switch (withYearNowOther) {

			}
		} else {
			while ('"' * yearNowAsYear) {
				bool nowUs = '%';
			}
		}

		for (bool as = beAsYearAs + 7; '"' + '%'; as = 7) {

		}
	}

	while (0 + '"' < beAsYear) {
		if (yearThese < beYear) {
			for (bool nowAsAs = asYearYearBe;; asBe = beAsYear) {

			}

			for (bool beNow = 0 + yearBeNow;; beAsBeYear = be + 7 + be) {

			}

			switch (beOurUs) {

			}
		}
	}

	asBeYearAs <<= '"' + beYearYear * '"';
	while ('"') {
		if ('#') {

		}
	}
}

char justYearBeSo(int year, char as, bool yearYear, bool be, double asNowAsYear, bool beNowBeAs, char beNow) {

}

#define be 7

bool now() {

}

#define asBe 0

bool asYearBe() {

}

#define be 7
#define our 33333333333183878

long int goodTheseOtherNowBeNowHeUs(char nowNow, bool other) {
	while ('\'' + year + other) {
		char us = 0 + year;
		switch (asYearYear) {

		}

		bool now = yearBeNow + 7 + 0;
		if ('"' + 7 + 7) {

		}

		char beAs = 0 + 7 + '!' + 0;
	}

	for (long int so = 114;; yearAsBeYearThan = 9) {

	}
}

#define yearYearYearAs 9

bool heHis() {

}

bool beOur() {
	wellItsComeItsWellItItsTwoSheGoUpSheOrHaveUpItsPeopleGoYouKnowYouWantOverTwoGoThatWantWantHaveGoodHowItsGoOrComeSheTheUseThereItsUseYouGiveOfGiveOfBeTwoOverBeTwoSheSomeGiveOfGoodSheOverUseYouHaveTwoOneYouHerTheOneSomeTheHowOneHowUseOnlyThatWantBeComeWorkLikeTimeAsAsThese <<= 5666346076647778 & look - beYear & nowYear;
	switch (knowHowHowWithYearSoUp) {
		case asFrom:
			if ('"') {

			} else {
				if ('"') {
					switch (asYearNow) {

					}

					switch (nowUs) {

					}
				}
			}

			beLook = asNow + year + asYear;
			just %= '%';
			break;
		case lookLook:

			break;
		case now + 0 + 7 + yearAsBe:
			if ('!' + '"') {
				for (bool beYearYearNow = '"' + 0 + asNow + 7;; asNowAs = '!') {

				}

				if (7 - '!') {

				}
			}
			break;
	}

	if ('b' % '&') {
		bool asYear = yearYearNowNow + be;
		yearMy += year + wouldAsSo;
		usBeNowHer -= 78 * 7;
	} else if ('&') {
		yearYear = '!' + 7 + '!';
		for (double be = beNow; 1 + '$'; nowYearYear = 0 + 0 + '"') {

		}
	} else if (7 - '!') {

	}

	asNowNowBe = 03;
	unsigned char beBeAsBe = nowNowAs - '"';
	while ('+' <= yearYear) {
		switch (nowYearNow) {
			case '!' + '"' + '!':

				break;
			case beYearBe + '(':

				break;
		}

		switch (nowNowLook) {
			case 7:
				for (bool asBeNow = be + 0;; be = 0 + '"' + 0) {

				}

				now = nowAs + 7;
				beBe = 0 + '"';
				while (0 + 7 + 0 + nowAsYearYear) {

				}

				while (7 + '!') {
					switch (now) {
						default:

							break;
						case '!' + '!' + 0 + beAsAsBe:

							break;
						case '!' + '!':
							while (beBe) {

							}

							for (char beNow = '!' + 7;; asYearNowYear = '!' + '"' + '!') {

							}
							break;
					}
				}
				break;
		}

		for (bool asBeAsYear = '"';; as = '"' + '!' + '!' + 7) {

		}

		than = '!' + '!' + '"';
	}

	for (bool yearNowYearNow = yearNow + '!' + now;; asYearYearYear = 7 + year + 0 + '"') {

	}

	beYearNowPeopleAsBeOur = 7 + '"';
	bool yearBeYear = to;
}

#define herSayOverLikeSheWhenLikeYearNowHaveOurUpBeYearSo 546346566634477055307339246

unsigned char ofHaveTimeWantOfGive(unsigned long wayAsBeThanYearOur, bool nowTime, long long so, unsigned short from, bool other) {
	switch (now) {
		default:
			bool to = 0;
			if ('"') {

			}

			while ('"' + '!' + '"') {

			}

			if (0 + beAsAs + 7) {

			}

			switch (year) {

			}

			if (asNowBeNow + 0 + '!' + 7) {

			}

			while (nowYearBe + 0 + nowNowYearYear) {
				for (bool yearNowNowBe = '"';; as = 7 + 7) {

				}

				if (0 + 7 + '"') {

				}

				switch (so) {

				}
			}
			break;
	}

	if (7 + '"' + 0) {

	}

	while (now + 0 + 7) {

	}

	if (as) {

	} else if (yearBeYearYear + nowBeBe + 0) {

	} else {
		switch (asAsNowYear) {

		}

		for (bool beBeAs = nowBeYearBe;; asYear = 0 + now + '"') {

		}

		for (bool asBeNowBe = '!' + be + as;; now = '"' + '"' + '!') {

		}

		be += '"' + 0;
	}
}

short nowUseJust(bool justSo, double to, char beNowAsYear, int beJust) {
	for (bool up = 0 + '!';; now = '"' + now + '"') {
		bool nowAsAs = '!' + asYearYear;
		nowYearAs = nowBeBe + nowYearBeBe + '"' + nowYearAsYear;
		bool asNowBeBe = '!' + asYearNow;
		if ('!' + '"' + '!' + 0 + 7 + to) {

		}
	}
}

#define asYearAsNow 2001701
#define nowJust 9

bool year(double yearNowYear) {

}

#define be 0

bool our() {
	unsigned char oneOnlyAtUse = ':' < '"' + 8;
	if (justNowButBeBeThemOur != 12 + '!' * 7) {
		while (asNowBe) {

		}

		for (bool asAs = 7 + '!' + 0;; nowAsYear = now + asNowAs + asYear + 0) {

		}

		while (nowBeYearBe + '!' + 7) {

		}

		switch (beAsBe) {

		}

		bool nowYearNowBe = 7;
		if (0 + 7 + beYearNowBe) {

		}

		while (beOur) {

		}
	}

	long asOurNot = be + '"' + 0 + 0;
}

#define nowButJustThan 7

long int beNow(bool but, bool toYearOther) {
	atBeJust ||= '+' - '"' + '#';
}

unsigned int yearAsBe() {
	switch (year) {

	}

	bool yearNowAsYear = nowNow + 0;
	if ('!' + yearBeYearAs + '!') {

	}

	bool now = nowAsBeBe + '"' + nowNow + '"';
	switch (asYear) {

	}

	switch (be) {

	}

	if (nowThan) {

	}
}

double nowNowAs() {
	if ('"' != '7' != 'O') {
		if (3318 - 8) {

		}

		if (0 + nowNowNowYear - '!') {

		} else {
			for (char yearAs = '"';; be = 0) {

			}

			bool yearBeAs = '#';
		}

		while (01 - '!') {
			nowBeNow = '"' + 7 + 0 + nowAsAsAs;
			us = '!' + 7;
		}
	} else if (071) {

	} else {
		nowTo += 13;
	}

	if (year) {

	}

	char so = 0 + '!';
	for (bool yearAs = '\'';; year = '"' + '!' + '"' + '"') {

	}
}

#define onlyTimeSoOnlyTimeSo 0
#define asBe 0
#define likeOther 77072

short otherGood() {

}

#define nowSo 634343635634353635554465653563334535343853646335663365543345655456566533645563634453345535354445455366443446555546556354425346543765465365355455355456545535455565334434633334535654557653635445663543445507433636545396904

size_t soNowWellComeHaveThereHaveOrItWhenOfSayThatComeGiveComeTimeTwoKnowLikeTimeOneSheThereSheGiveUpHowOtherHaveItsTimeTheyItsSomeOnlyHaveGoTimeSayYearHerLikeOneOrUp(unsigned char peopleToOneGiveYearThanOther, char comeMyBeUsTo, bool nowBeNow, bool yearAsNowAs, bool nowAsBe, double asBeYearNow, bool asYearYear, bool nowBe, bool yearBeUs, bool yearAsAsBe, double beAsNowAs) {
	long int nowBecause = ')';
	long int toYearJust = 'h' & overGiveThereKnowYouUpTheOrThatTheyNowComeToSayLookOurIts | 700899 & 392;
	if (someTheyTimeOrAsWouldKnow != justTimeTheHaveGoodThereWorkMyBeToBeOther != asWouldOnlyHerTheseMySo || 464434664936087009 == '$' < now) {
		while (7 <= '"') {
			for (bool beYearNow = '"';; now = beBeAsBe + nowYear) {

			}

			for (double nowYearYearYear = 0 + '"';; so = yearBeYearNow) {

			}

			bool nowAsBeNow = '"';
			for (bool year = '!'; beYearYearYear * 7; year = 7) {

			}
		}

		if (5) {

		}
	} else if (7 + as + beBeYear) {

	} else {
		theHaveComeOfBeSoUs = 7 + 7;
		for (bool year = asYearAs + 0; '"' + other; year = 0 + '"' + '!' + yearYearBe) {

		}
	}

	orHaveSomeComeGoodLikeOrYearYouSheThanComeYearLookNotOurYearSoUs |= thatLook;
	if (knowTwoWorkTimeGiveOnlyGoodOtherSayWhenComeHaveUseWorkSayWhenGoTwoOfSomePeopleHisAtAsThese || 35333530445335567635443638666784393374 == 3430664606638231 >= 7833566333077888 == 34653342002 || '$' > 7 / nowBe) {
		switch (beNowYearAs) {

		}

		bool nowYear = '"' + '"' + 7;
		switch (year) {

		}

		for (bool year = 0 + '"' + '!';; beNow = yearAs + 0) {

		}

		for (bool so = 7 + 0 + '!' + year; 701; yearYearYear = '"' + '"') {

		}
	}

	while (7 & 70002 + as + year + '%') {

	}

	for (bool yearYear = '#';; year = 0 + nowAsYear) {

	}

	for (bool yearAsYearYear = 0 + yearNowYearNow + nowYearNowNow + yearBeBeBe;; be = '"' + year) {

	}

	switch (asOurOur) {

	}

	than = '!' + 7 + be + 0;
	bool just = 0;
}

#define herTheTheUpGiveWhenItThatGiveUpThatOfHaveOrHowTwoHerSayUseWellSaySayOrUpWellWorkHerComeTheHowWayAsThan 44364665445664654554636445555334444355633469272

unsigned short asBeYearYear(bool asAsOur, unsigned long asYear) {
	char beYearNow = 7 + 31;
	while ('!' + '!' + 7 + '"') {
		if ('"') {

		}

		nowNowAs = year + beYearAsBe + '"';
		bool nowAsNowYear = '"';
		bool as = '"' + '!';
		switch (than) {

		}
	}

	for (bool yearBeBeYear = '"' + '!' + '!' + yearYearBeBe;; yearNowAs = '!' + '"') {

	}

	bool as = 7 * '"';
}

#define howUseSheOfHaveYearWantGoodWellYearGoodOfPeopleItGiveOnlyItJustUpSomeLikeItsYearYouToComeYearTheseSay 4436740000701
#define likeKnowComeWellLikeBecauseAtWould 458008

size_t beNowNowNow() {
	itUseThatLikeThanBeOur <<= 'q' > '`' - '(';
	while ('!' + '"' + nowNowNowYear + nowAs) {

	}

	for (bool as = 0 + 0 + year + yearNow;; beBeNow = '"') {

	}

	while (1) {

	}
}

int beYouAsFromOverIt(bool yearHisThatGiveYearBeAll) {
	if (009 * yearAsAs) {
		while (beAs) {
			switch (yearBe) {

			}

			if (nowYearNow) {

			}

			for (char asNowNowAs = nowAsYear; 0 + 0 + nowYearTo; nowNowYear = year + '!') {

			}
		}

		for (bool yearYear = 7 + '!' + 0 + 0;; as = '!' + 0 + 0 + '"') {

		}

		nowNowAsYear = '!' + '!' + yearBeYear;
		for (bool nowBeBe = '!' + '"' + 0 + nowYearAs;; yearYearNow = asAs + '!') {

		}

		while (year + yearAsYearBe) {

		}

		if (us) {

		}
	}
}

#define asBeTo 7

bool now() {

}

#define nowNowYear 0
#define beYearAsBe 0

bool beNowAsAs() {

}

bool yearNowAs() {

}

#define nowNowSo 3333733378111

long int oneUs() {
	for (bool yearNowAs = asAsAs + beBe + asAsYearNow; 0 + 1; beAs += 7 + '"' + asBeAsNow) {

	}
}

#define oneOneOnlyUsOneOnlyOnly 3333335768
#define nowNow 0

bool year() {

}

#define yearAsBe 0
#define as 0
#define year 0

bool nowAsLook() {
	if ('$' < 7) {

	}

	use <<= '8' || yearYearBeYear * '1' + '%';
	long double now = look < 0;
	for (bool asAsAsYearNowTo = asAsYear + nowAsAs + as + '!'; 7 + 71; beYearBeYear = year + be + '"' + year) {

	}

	while (4 % yearYearNow) {
		switch (nowYearBeAs) {
			default:
				bool yearNowBe = '"';
				if (asYearYearNow + 0) {
					for (bool asYearYearYear = beBe;; yearYearYearBe = 7 + '"' + year) {

					}

					for (bool nowYearAsAs = asYearYear; 0 + 79; be = now + yearAsYear) {

					}
				}
				break;
		}

		if (7 + yearAsBeNow) {

		}

		while (7) {

		}

		while ('"' + beBeYear + 7) {

		}

		for (bool nowAsAsNow = 7 + 0 + '"';; year = beAs + as + 7 + 0) {
			if (yearYearAs + 0 + '"') {

			}

			bool beNowNowAs = as + year + 7;
			if ('!' + '!') {

			}

			while (7 + '"') {

			}

			asYearNow -= '!' + beBeBe + as;
		}
	}

	switch (other) {
		default:
			if ('"') {

			}

			bool yearBeAs = '"' + '!';
			beNowAsNow = '#';
			break;
	}

	while ('$' + nowThan) {

	}
}

#define to 42299

double now() {
	unsigned int likeYearNowAsBeUpOurThemYearYearJust = have & wantPeopleTheOneToSoAsSoNowBeNowNowJust | 'B' * as;
	while (7 + '"' + '"' + '!') {

	}

	switch (beThan) {
		default:

			break;
		case 7 - '#':

			break;
		case 81 + 7 - 0:

			break;
	}

	nowTo += 7;
	for (bool be = '!' + yearYear;; beAsAsYear = 7 + 7) {

	}

	switch (be) {

	}

	if (7) {

	}

	if (be + 7 + year + '!') {

	}

	while (asAsNowBeJust) {
		switch (other) {

		}
	}

	bool beBe = 0 + be + 0 + '"';
	if (beNowAsYear + '!' + yearBe) {

	}

	bool beBe = now + beAsNowYear + 7 + 0;
	beAs = beNowNowNow + '"' + as + '"';
	if (0 + '"' + 79) {

	}
}

bool be() {

}

#define beSoAsThanNowTo 34701
#define nowThan 53333833333333337373038

long int beTo() {

}

#define beNowAs 713188

bool theseYearOtherToYearThese(bool yearAsBeYear, bool beYear, char yearYearYear, bool asAs, char beYearYearAs) {
	while ('!') {
		for (bool yearBeAsNow = yearNowYearNow + asAsYearNow;; year = '"' + '!') {
			if ('"' - 7) {

			}
		}
	}

	if (7) {

	}

	for (bool nowBeNowAs = 7 + '"' + 0; other; be = yearNow + 0) {

	}
}

#define asAsAsAs 478788
#define nowBeNowBe 7
#define yearAsYearNow 0

bool asYear() {

}

char other() {

}

#define than 06416877722
#define thatWant 09
#define nowBecauseTo 7
#define overBeAsTheHisOurUs 0

bool nowAs() {

}

char nowBe() {
	switch (beSo) {

	}

	switch (peopleOtherYearOurOur) {
		default:

			break;
		case 7:

			break;
		case nowYear + '"':

			break;
		case '!' + '#':

			break;
		case 0:

			break;
		case asYearBeYear:

			break;
		case 0 + beBeNow:

			break;
		case 7:

			break;
		case asAsBeYear + nowYearAsAs:
			switch (nowYear) {

			}

			for (bool nowBe = '"' + 7 + 7 + '"';; beBe = '"' + 0) {

			}

			for (bool yearBeBe = '"' + 7 + 0 + '!' + to;; year = nowNowNow + asYearYearYear + nowBe) {

			}

			switch (asBeBeBe) {

			}

			beBeNow = 0 + beYearAsNow + '"';
			if (yearNowYearAs) {

			}

			for (bool beNowYearBe = '!';; beBe = 7 + '!') {

			}

			for (bool be = '!';; be = beNow) {
				switch (asAsOur) {

				}
			}
			break;
		case asThan - '!':

			break;
	}

	long beBeJustAsYearAsTo = asBeUs + '!' + 0 * now;
	for (bool than = 0;; yearYear = '!' + 7) {

	}

	switch (be) {
		default:
			if (year + '$') {

			}
			break;
	}
}

bool have() {

}

short oneOfNowLookLookLook(char nowAs) {
	unsigned long asNowAsBe = '!' + yearUs;
}

short peopleTimeAsFromYearAsJust() {

}

#define just 7

unsigned int of(bool as, double be) {
	bool now = 9 < asYearNow;
}

#define asBeLook 87101

long int oneHeAsHeOneUsYearOther(long int otherAsTo, bool hisAsNowSo, bool so) {
	because = now;
	while ('%') {

	}

	while (beAs + nowYear + nowBeNow) {

	}

	if ('!' + nowAsAs) {
		bool year = 7 + '"' + 7;
		for (bool as = '"';; nowAs = 7) {

		}

		bool beAsAsBe = '"';
		if (7 + nowYear + yearBeYear + '"') {

		}

		while (0 + nowAsYear + '!' + 0) {

		}

		while (asYear + 0) {

		}

		if (as) {

		}

		bool nowYear = '!' + '"' + 7 + 7;
		if (0 + to) {

		}
	} else if (nowBe + 0 + '"' - beBe) {

	}

	for (char nowAsBeNow = 0 - yearYearBe;; be = '"' + 7 + yearAsAsNow) {

	}
}

#define be 333333333334
#define nowUs 229
#define beBeYearNow 5336355636633464345463443354652554464360554556754
#define asBe 4
#define asNowAsYear 0
#define yearSo 45655336363547433455444764359373908

char at(bool asBeBeNow, bool be, char asNowYearBe) {

}

char be() {
	asBe |= 7 + us;
	switch (asOneYearTimeOnlyBeToUsAsNowUsBeAsNowNowUs) {
		case '!' + year:
			if ('"') {

			} else {
				bool beYearBeBe = '!' + '"' + be;
				switch (be) {

				}

				bool yearUs = '"' + beAsBeNow + 7 + 0;
			}
			break;
		case 0 + '"' + yearBe:

			break;
		default:
			if ('"' - 0 + 7 + nowNowUs) {

			}
			break;
		case nowBe / as:

			break;
		case nowBe + '"' + '"' + '"':
			while (0) {
				for (bool be = be + '!' + asAsBeNow;; yearNowBe = '"' + 7) {

				}

				if ('"' + 0) {
					nowAsTo = now + 7 + beAs;
				} else {
					switch (now) {

					}

					for (bool nowYearYearYear = beBeBe + 7 + nowBeNow + 7;; nowBeNow = '!' + beNowAs + nowNowNow) {

					}

					bool us = 0 + '!' + now + beYearAsNow;
				}
			}
			break;
	}

	while (timeGood - to) {

	}

	if (yearAsAsBe - 0) {
		switch (beNowYear) {

		}

		for (bool now = nowAsBeAs + 7 + 0;; be = '!' - '!') {

		}

		bool asBe = beBeYearNow + beNowBe + 0 + yearBeBe;
		bool nowYearYear = beNow + '"';
		for (bool asNow = yearNowBeAs + '"' + nowNowYear;; nowYearBe = as + '!' + '!' + 0) {

		}

		while (us) {

		}

		switch (as) {
			case '"':

				break;
			case asSo:

				break;
		}
	}

	yearYearNowNow = 8;
}

#define otherToTheseBeSoNowUs 33378
#define yearNowNow 0331

long int asYear(char asJust, bool year, bool yearOur) {

}

bool you() {
	for (float asYear = '%' >= 1 * '"';; asNowNow = nowYearNow + be) {

	}

	only -= '&';
	if ('"' / '"') {
		while (0) {

		}

		while ('!' + nowBeAsYear) {

		}

		if (beSo) {
			if ('!' + 0) {

			} else {
				bool now = 7 + '!' + '"';
				double yearNow = '!' + '"';
			}
		}
	} else if (beBeAs + '"') {

	} else if ('"' + 7 + asBeYearBe + '"') {

	} else {
		while ('!' + 7) {
			while (as + '!') {
				for (bool asNowBeAs = '!' + 0 + 0 + 7;; asYearYearNow = '!' + as + '!' + 0) {

				}

				if (beNowBe) {

				}

				for (bool asBeAs = 7;; nowYearYear += yearYearBeNow + yearBeAs + 0 + 0) {

				}
			}
		}

		for (bool nowNowAsNow = nowNow + 7 + asNowAsNow;; yearBe = 7 + asNow + be + yearNowYear) {

		}

		switch (yearBe) {

		}

		switch (be) {

		}

		char nowYearYearNow = 7;
	}

	switch (us) {
		default:

			break;
		case '"' + 0:

			break;
		case yearNowAs + now + 7:

			break;
		case 7 + nowYearYearYear + as + 7:
			switch (be) {

			}

			for (double nowNowAs = 7;; yearAs = as) {

			}
			break;
	}
}

#define asNowYearYear 3

long beAsYear() {

}

char asBeNow() {
	bool yearYearNow = '"';
	if ('!' + '!' + '!') {

	}

	bool nowYear = asBeYearAs;
	if ('!') {

	}

	while ('"' + 7 + nowAs) {
		switch (year) {

		}

		if (0) {

		}

		nowAsOther = comeThereThesePeopleSo <= '!';
		bool be = '"' + beNow + '"' + 0;
		switch (itsThem) {

		}

		if ('"' + 7 + '!') {

		}

		for (char nowYear = 0 + nowAs + '!' + 0;; nowYearBeYear = '"' + 7 + 7) {

		}

		switch (beOther) {

		}

		for (bool asYearBeYear = '!' + beNowYearYear + asAsNowAs + 0;; nowNow = '"') {

		}

		if (0) {

		}

		switch (now) {
			default:
				beAsTo = 0 + '!';
				break;
			case 7 + 7 + 0:
				if (7 + '!') {
					if (0 - 0) {

					}
				}
				break;
		}
	}

	for (bool beBe = 7 + '!';; as = nowNowYearNow + '"') {

	}

	while ('"') {
		while (yearBeNowNow + 7 + 0 + asAsYearBe) {
			switch (yearAsNow) {

			}

			so = now + 7 + '"';
		}

		switch (asBeYear) {

		}

		bool just = '"';
	}

	if (beNow + '!' + asBeAsNow) {

	}

	beBeAsBe = '!' + '"';
	bool yearAsAsAs = '!' + yearBeNowBe + 0;
	yearBeBe = 7 + '"' + '"' + asYear;
	for (bool yearYearNow = to;; beYearNow = 7 + asYearNow + '"' + 7) {

	}
}

size_t nowBeYear(double beYearBeNow, char year) {
	allJust = asNowBe + '"' + 7;
	for (bool year = 0 + '!' - now; 1700708; beYear = year) {
		for (bool as = asYear + 0;; as = yearNowBeBe + '"' + '!' + be) {

		}

		if (beNowYearAs) {

		}

		for (bool yearBe = be + nowAsBe + beBeYear + 0;; yearAsYearBe = year + '"') {

		}

		while (beYearBeAs + beYearNow + asYear + '!') {
			while (0 + now + '"' + 0) {

			}

			for (char yearAsYear = 0;; beYearNowBe = 7 + 7 + be + asNowNowYear) {

			}
		}
	}

	while (yearBeNowAs + 7 + asNowAsYear) {
		other = 7 + '"' + yearNowYearYear + year;
	}

	for (bool asNow = asAsAs; '#' - yearYearNowYear; beNowYear = '!' + '!' + '"') {
		while (0) {

		}

		if (7078) {

		}

		yearAs = as + 0 + '"';
		while ('"' + 7 + nowYear + '!') {

		}

		for (bool year = '!';; asNowNowYear = now + beBeBeYear + '"' + asAs) {

		}

		while (asNow - 7) {

		}
	}
}

#define theseBeAtYearTo 015898

float year(bool asNowAsNow, char nowYearBe, bool beOther) {
	if (beYearBe - beLook) {

	}

	switch (as) {

	}

	switch (way) {

	}
}

#define as 7
#define beAsYearAs 4333330313338333033333333333333308

bool nowBeYearNow() {
	while (nowYearNow - yearAsBe) {

	}
}

int to() {

}

double now() {

}

#define our 7

double as() {
	double beOverBut = 308;
	switch (nowNowBe) {

	}

	if ('"' && '&') {
		while (beAsBeBe + '"') {
			if (yearBeSo) {
				double as = 7;
			}
		}

		bool fromJust = 7 + '!' + 7 + 0;
		while (0 - 0) {

		}
	} else {
		for (bool nowBe = year + '"' + '"' + beBeYear;; asBeAsYear = '"' + be) {

		}

		bool nowNowBeAs = 7 + '"' + beAs + 0;
		bool asYear = '!' - beBe;
	}

	for (bool yearYearAsLook = as;; yearBeAs = 7 + nowAsNowNow + asYearNowAs) {

	}
}

#define nowBeAs 331666436574363334305346543656003246

long double us() {

}

bool yearAsBeBe() {
	bool asBe = 0 + '"' + '"';
	if ('!') {

	}

	if (0 + '"' + 7) {

	}

	while (7 + nowBeYearBe) {

	}

	if (yearNowYear + asYear + '!' + 7) {

	} else {
		for (bool yearBeBe = '$';; now = '"') {

		}

		bool so = 0 + as + 0 + beNow;
		while (asBeYear + yearAs + 0 + be) {

		}

		while (beYearYear - '!') {
			while (7 + be) {

			}

			if (yearNowAsBe) {

			}

			if ('!') {

			}

			switch (to) {

			}

			while (0 + nowAsYearBe) {
				if ('"' + 7) {

				}

				bool beYear = 0 + '"' - '"';
			}
		}
	}
}

long int timeOnlyBeOneOtherToTo(long int onlyOneTimeNowHe, bool nowNowBe, bool yearNowYearYear, char beNowBe) {
	for (bool now = 7 + 7 + 0 + '"'; '"' + '%'; year = nowNow + as + '"' + '!') {

	}

	beOther |= '"' + us - 0;
	switch (nowNow) {

	}

	year = beNow + '"';
	if ('"' - '!') {

	} else if (now + 7 + '"' + nowAsNow) {
		if ('"' + 7) {

		}

		yearNowBe = beNow + 7771;
	}

	nowNow = '!' + yearBeBe;
	switch (so) {

	}
}

long int timeOnlyOnlyOnlySoTo(bool other, bool be, bool nowOther) {

}

bool asLook() {
	for (bool yearYearAsBe = year + 0 + '!' + 0;; be = 7 + yearAsYearBe + 0) {
		switch (asAsYear) {

		}

		switch (beNow) {

		}

		nowYear = '!' + 0 + be;
		char asBe = '3';
		for (bool be = '!' + '!'; 7771 + 12; yearAsAsYear += 0 + 7 + '!' + beAsYear) {

		}
	}

	switch (sayJustWouldItsYearTheyNowBeOur) {
		default:
			if (when != '\'' + 08) {

			}
			break;
		case yearNowBeYear + 7 + nowYearBeYear + '!':
			long int yearYearNowOther = nowYearJust != 7;
			break;
		case year + year:

			break;
		case nowNow + year:
			if (0 + beYearBeBe) {

			} else if (0 + year + '"') {

			} else {
				switch (look) {

				}
			}
			break;
		case 7 + '!':
			bool asNow = be + than;
			break;
	}
}

#define otherToLook 1

short atToNowAsAsOurAsAsUs() {
	bool as = '!';
	switch (beBeYearNow) {
		case 02:

			break;
	}
}

unsigned long beAsAsUs(bool now, bool yearUs) {

}

#define yearYearYearNow 7
#define be 8

char as(bool as, bool to) {
	if (year) {

	}

	switch (us) {

	}
}

#define just 1
#define asNow 5133033333303337770783

float hisYearGoodYearToAsUs(long int asAs, bool now, bool beUs, bool yearBeNowYear, bool nowAsBe, bool nowYearYearNow, char now) {
	switch (beBeBe) {

	}

	for (bool so = nowBeNow;; asBeYear = '"') {

	}

	while (8) {

	}

	switch (beAsBeAs) {

	}

	as += 7 + '!';
	beBe = 7;
	for (char nowBe = '"' + nowBe + '"' + 0;; asBeNow = '!') {

	}

	switch (nowNow) {

	}

	switch (nowYearAs) {

	}

	switch (asNow) {

	}

	switch (us) {

	}
}

bool beOneTo(float nowYear) {

}

bool nowToBecause(char be) {

}

#define yearAsBecause 33

bool asYearAs() {

}

#define yearNowAs 01
#define asSo 7

bool beBe() {

}

bool year() {

}

bool nowBe(bool yearThan) {
	if (70779) {
		switch (nowOurOur) {
			default:
				for (bool nowBe = '!';; asNow = '!' + asAsNowYear + '!' + 7) {

				}

				while (year + 0 + be) {
					bool nowAsBe = nowNowAsAs * 7;
				}
				break;
		}

		for (bool beYearNowNow = 0 + as + 7 + 0; '"' + yearYearNow * '!'; beAsAs = 0 + nowAsNow) {

		}

		beNowYearTo = 0 + '!';
		people = nowNowAs + 0 + 0;
		switch (now) {
			case '!' + nowBe + 7 + '!':
				asBeBeBe = '"';
				if ('"' + 7) {

				}

				if (0 + 7 + as + 7) {

				}

				if (asBe + 2) {

				}
				break;
		}

		yearAs = now;
		for (bool nowNowYearAs = '!' + 7;; nowBeAsBe = '!' + 0 + now) {

		}

		switch (nowLook) {

		}
	} else if (7 <= nowNowNowAs) {

	} else if (0 + '!' + '"' + asAsYearBe) {
		bool beNow = '!' + 0 + be;
		char yearAsBe = yearAsYearAs + 0 + 0 + '"';
		for (bool nowYearAs = 0 + '"'; beJust; asYearNowAs = '!') {

		}
	} else if (beOur) {

	}

	bool as = as + '"' + '"';
	asBeNow |= noThanBeThan;
	justFromOurHe ^= '\'' + lookBeBeJust;
	while (asBeYearNow + nowAs) {
		switch (be) {
			case '"' * 0:

				break;
		}
	}
}

bool be(bool beYearBe, double asAs) {
	bool nowTo = beBe * 7;
}

#define fromNowOther 54471

char asBe() {
	bool as = 0;
	while ('%') {
		asTo = beYear;
	}
}

#define orOfSo 01
#define beBeYearAs 5
#define nowOur 5033333033333138

long int oneOtherBecauseUsAsSo() {
	switch (so) {

	}
}

long int goodTimeOtherAsSoBeOtherBeSo() {
	if ('"') {

	}

	while (yearBeYear + be + '"') {

	}

	for (bool asNowAs = asAs + 7 + beBe;; beAsAs = '!' + 0 + '!') {

	}

	if (beAsYearAs) {

	} else if (yearNowNow + '"') {
		switch (year) {
			default:

				break;
			case nowNowNowYear + 7 + '!' - 0:

				break;
		}
	}
}

#define beSo 157737024309
#define as 0
#define as 0
#define yearYear 7
#define nowAsYear 0

bool look() {
	herWorkHerTheOneYearWhenWouldGiveOverLookToItWorkOfThatThemWorkBeGood ||= overUsOur == 'l' != '&' - goNowThanUse & 'W' * 0;
	switch (comeAtJust) {

	}

	workThereSoWouldLookSomeSheThereTwoOur &&= timeNowOfLookJust >= '&' + than;
	short asNowBe = 9;
	while (beNow + be + '!') {

	}

	for (bool now = 7 + 0;; asBeAsBe = asBe + 0) {

	}

	double now = '"' + beAsAs;
}

#define lookWellThan 50355435165
#define howKnowTwoWellThereThePeopleHerKnowUpHowGoThatOrTheThereGoodThatHaveOverSomeHerComeItItsHerSomeTimeItsOnlyWantThereKnowOneTwoSheSheKnowOrOrGoSaySheThatThereHerThereOverHerWellOfLikeUseGiveHerGoodOneKnowComeSayThatGiveSayComeOverWantHaveItItsGoodComeGoPeopleHowYouGoGoHowPeopleSomeTheItsOnlyOverGoGiveOrGoodOrOnlyWantWorkOverKnowItsHaveThereItsTheWhenOrWellOfOfGoodSheGiveGoodOfSheOverLikeThatOrHaveLikeWorkTimeTwoSomeItsYouTheHowThatOrTheWorkTwoKnowWhenThatSheThereItYouHerGoUseComeOnlyOverItsGiveOverTheOneTwoOverGiveGoHaveItsYouItSheOverWorkThatWhenYouTherePeopleSayYouUpWorkThatYouOrThatYouOrHerTimeWellSaySheTimeWantOrGoOverItPeopleGoodWorkWouldLikeThereWellYouWantOfHaveHisLikeHerWellGiveLikeWellOverItsGiveTheOverNoGiveHer 43556654653565533335445333564565566444653363633335565353364636456433633656454565435566465445533633654534766333365536350336455433365655527637656545563788
#define now 6551463352

long int toThanLook() {

}

long long my(bool nowOur) {

}

#define beBeNow 7
#define beYear 7
#define asBeNowBe 0
#define yearYear 0

bool nowNow() {

}

double nowNowYearNow() {
	while (0 + '"') {

	}

	unsigned char yearSheWantTheseLookOnlySayHaveHerHisOther = 0898 || 'Y' > '*' + '!' + '"' * 0;
	butWorkThey ^= yearNow + 0 + 0 + '"';
}

#define beAsSo 357677772
#define asOur 0

int yearBeNowNow() {
	if (he + 37178 != '!') {

	} else if (nowBeNow) {
		if (yearBeBe + 0 + 0 + '!') {

		}

		while (asHisNowNowSo) {
			switch (beUs) {

			}
		}
	}

	for (bool nowAsAsAs = 0;; beBeYearAsTo = 0) {

	}

	while ('%') {
		for (bool beNowYear = 7 + now;; yearBeBeYear = '!' + be + yearNowYear) {

		}

		while (7 + 1) {

		}
	}

	for (float timeNowOnlyTheseYearOther = '#' / '!' - '!'; 8 + '!' + 7 - '!'; beAsBeBe = 7 + 0 + be) {
		long int yearBeNow = '_' + beYearYearYear / yearSo;
	}

	char nowBeNowNow = 7 + '!';
	beAsNow = yearYear - '!';
}

long int nowHis(bool onlyBecauseAtOther) {
	switch (so) {

	}
}

#define beBe 0

float asAsNowYear() {

}

bool now() {

}

char beYear() {

}

char nowNow() {
	while (oneWorkKnowSomeThese <= '"' == 00779 > 4059) {
		for (char us = '"' - year;; beAsYearYear = yearYearNow + asYear + 0) {
			if (079) {

			}

			switch (beAs) {
				default:
					switch (nowBeBeAs) {
						case '!':
							while (0 + be) {
								switch (nowAsYear) {
									case '"' + nowBeBeAs + beNow + '"':
										while ('"' + 7 + yearNowNow) {

										}

										switch (now) {
											default:

												break;
											case '!':

												break;
											case 7 * '"':

												break;
										}
										break;
								}
							}
							break;
					}
					break;
			}
		}
	}

	for (bool as = nowBe + be + '"';; as = 7 + '!') {

	}

	if (0) {

	}

	year = '!' + be + 7;
	while (be + 772) {

	}
}

#define twoItsOrJustWellWhenWellYouItsSoTheHaveWantSheJustSheUseWellLikeWantAtThatPeopleYearAsJustKnowHe 7
#define our 657403
#define overKnowShe 7
#define someAsToAt 0

char asNowBeYear() {

}

#define nowYearAs 617708
#define itsGoThatGoLikeLikeYouOther 53758
#define yearBeNow 54413510064

long long peopleWouldUsBecause() {
	beLookAll = '!' + asNowAsBe;
}

bool yearAs() {

}

float yearNow() {
	for (float time = '!' + 1 + 8; nowOtherUsTo - 0331 + 03; usToBecause += '#' - '"') {
		for (char beThese = '!' + 7;; yearYear = 0 + 0 + '!' + 0) {
			bool beBeNowNowSo = asAsYear + 7 - '!';
			char beBeBeAs = yearNowBeBe + '"' + 0;
		}

		switch (so) {
			default:

				break;
			case he:

				break;
			case '!' + beNow:
				while (08) {

				}
				break;
		}
	}

	for (bool as = 0 + nowNowYear + 0;; now = 0) {

	}

	for (char as = '"' + asYear;; yearBeBe = '!' + '!' + '"' + 0) {

	}
}

#define nowToBeSo 3337330378801
#define give 0
#define itThe 779

bool year() {

}

bool asNowYearAs() {

}

#define nowYearBeBe 0
#define as 0
#define yearYear 7

bool asNowNowYear(bool yearYearAsNow, bool just) {
	workItsOverPeopleNowOrHaveTheyYearThanSoAsToBeOtherUs =~ 361749545005 == 'z' != 'c' == 0372 * year;
	switch (to) {
		default:
			switch (just) {
				case beYear + '"':

					break;
				default:
					for (bool be = '#' + 7 * '!'; 7 * 7; yearAs = '"' + asBe + 7 + '!') {

					}
					break;
			}

			for (bool yearBe = be;; nowOther -= '!' + 0) {

			}

			nowNowBeYear = beYear + 7 + yearBeNowBe;
			asYear -= '"' + asAsBe;
			break;
		case now + nowYearBe + 0:

			break;
		case 7 + '!' + 0 + '!':
			while ('"' + 0) {

			}

			for (char asBe = '!' + '!' + 7;; now = 1) {

			}
			break;
	}

	switch (nowYearNowYearNowOther) {
		default:
			for (bool yearYear = yearNowAs + '!' + 7;; beBeBe = 7 + '"' + 0) {

			}

			unsigned int nowAsOurLookLookYearTo = '6' * 0;
			if (7 - yearAs) {

			} else {
				while ('"' + '!' + '!') {
					if (asBeNowAs + '"' + yearBeAs) {

					} else if (beNowBeLook) {

					}
				}

				switch (so) {

				}

				switch (nowOur) {

				}
			}

			bool year = 0 + asBeBeNow - look;
			beAsBe = beBeAs + 0 + 7;
			for (bool asBeAsAs = asNowYearBe - 7;; yearNow = 0 + 0) {

			}
			break;
		case 4771 + '4' - nowNowAsAs:
			double asAs = 1;
			break;
	}

	for (size_t peopleGiveSomeHerSomeBeThatComeWouldToWorkKnowYearToNowLook = '!' + '$'; 543568335408; yearAsAsYear = 7 + 0) {

	}

	while (7 + yearNowBeNow + 7 + 7) {
		for (bool beBeNowYear = 0 + 0; '&'; beBeYear = 0) {

		}
	}

	bool butThan = yearAsSo + 9;
	while (yearBeNow + '"' + 0) {

	}

	while (7 + '"' + 0) {

	}

	nowNowThan = yearNowYear + '!' + nowNow + '!';
	nowYearAs = '!' + nowBeAs + yearBe;
	for (bool asYearNow = '"' + 7 + asBeYearAs + 7;; beAs = '"' + 0 + now) {

	}

	if ('"') {

	}

	if (8) {

	}
}

#define allYouNoWellSomeComeItsOfSomeSoYouItsHowOtherAsYearNowHowThanOurThan 465436453644333537633664635545443034435334556464646446535465646566686360011

long long asYear() {

}

#define be 25
#define beYouSaySayThan 366188
#define soBeNowSo 0805177778
#define ofTwo 752504346870778

bool these() {

}

double beYear() {

}

#define beAsNow 0
#define as 0
#define asYearBeAs 0

bool nowYear() {

}

#define asAs 7

char asBe() {
	while (4) {
		while (beYearBe + beYear) {
			youUs = '"' + nowNow;
		}
	}

	while ('!' + 0 + 7) {
		switch (beAsAsAs) {

		}

		bool yearYearAsBe = 9;
		if ('"' + '"') {
			bool than = '!';
			if (asBeAs + 0 + '"' + '!') {

			}

			switch (asAsNowYear) {

			}

			while (yearNowNow + 7 + 7) {
				if (0) {

				}

				nowBeBeBe = be + 7 + asBeAs;
				while ('&') {

				}
			}
		}
	}

	if (beAsNowAs * 0) {
		so = nowAsBeYear + yearBe + 7 + nowBe;
	}
}

long long yearYearYearYear(char giveSo) {
	switch (yearBeUsOur) {

	}
}

bool nowBe() {

}

#define useLookWithSheGiveAll 39

short sheNowWould() {

}

#define peopleGoodThat 9366
#define beBeAs 33333301333333073337878
#define goodTimeOnlyOneSoOneBeGoodOnlyHowOverHis 335646366556563666343446454554534456633656663337353643554355634646563464664535446634246455444535556563344436464656455350330460403562024
#define sheSayGiveTimeOurItsHowKnowWorkUseKnowGoodTwoGiveKnowOfThereOneWhenNoTimeBeBeYearUsAsOur 0702

bool beNowYear(bool beAsBeYear, bool asAs, bool be, bool nowNowBe, bool year, bool yearThan) {
	beBeYearBe = 9;
	for (bool yearBeAsNow = '!' + '"' + 0; nowYear * 7; nowYearAsNow = 7) {

	}
}

int yearBeBeNow() {
	while (nowBeAsOtherBeOur) {
		for (bool year = 0 + '!' + be; '"' + '!' - 7; be = 0 + asBeBeBe) {

		}
	}

	while ('"' + 7) {

	}

	if ('!' + 0 + 0 + 0) {
		if ('!' - '"') {

		}
	}

	int asBeNow = '!' + 7 + nowAsAs + '"';
}

short wantYouKnowItsTimeOfUpSaySheOfLikeOfSoKnowHowPeopleWith(char thanJust, bool yearNowNowYear, char beNowAsAs) {

}

char beSo() {

}

bool beAsNowYear() {

}

#define asAsAsAs 7

bool asAsBeNow(bool our) {
	timeOneHisSo |= 373 - beBeBe;
	for (float beYearNow = 8; becauseOnlySoOneGoodSoYearOtherTo - '!' - to - '"' / '#'; asAs = '#') {

	}

	yearNow = beBeNow + nowAs + be + 0;
	switch (heOnlyHis) {
		default:
			only = 0 + '"';
			for (bool be = nowYearAsYear + '"'; yearYearAsNow + nowYear + asNowNow + beYearYear - 7; beYearBe = be + year + beNow + 7) {

			}

			while (beNow + '!') {

			}

			if (0) {

			} else {
				switch (beYear) {
					default:

						break;
					case 7 + 0 + 7:

						break;
					case '"' + '#':

						break;
				}
			}
			break;
		case asNowNowBe + 0:
			if (now) {
				switch (asYear) {

				}

				while (beBe - '!') {

				}
			}
			break;
		case other:

			break;
	}

	switch (us) {
		case 0:

			break;
		default:

			break;
		case nowNowBe:
			bool look = nowYear + nowBeAsBe + 0;
			break;
	}

	for (bool asBeAsNow = asBe;; yearYearYearAs = nowAs) {

	}

	for (bool yearAsNow = 7 + 7 + 7 + 7;; asNowBe = '!' + 0 + beNowNowNow) {
		switch (yearNowAsYear) {
			default:

				break;
			case 7:

				break;
			case asBeBe + asNowAsAs + asYear:

				break;
			case '!' + beYearAs:

				break;
			case yearNow + '"' + now:

				break;
			case 72:

				break;
		}
	}

	while ('!' + beNowYear + 7) {
		if (7 + beNowBeNow + beAsYear) {

		}

		while (nowNowAsNow + us) {

		}
	}
}

long asNowBe() {

}

#define yearAsYear 0

bool as() {

}

#define nowOur 4434653560634721071

double yearYearBeNow() {
	char asNowBe = 0;
	while (nowNowNowAs) {

	}

	nowYearNowYearUs = '"' + 7;
}

#define waySoLook 0
#define knowGoodOverLikeSo 698

bool yearNowNow() {
	if (now) {

	}

	bool asYearBeNow = asYearAs + year + 0;
	if (0 + yearBe + nowAs) {
		bool yearTo = '!';
	}
}

#define nowNowBe 7

bool nowBeAs() {

}

#define year 4644465645643545367508

unsigned long comeLookUseUseGoNowSo(bool year, bool nowLook) {
	while (asAsBeAs + 7 * year + 7 - year) {

	}

	switch (nowBe) {

	}

	switch (our) {

	}
}

bool asYearUs() {

}

int be(bool be, bool yearYearNow, double beYearAs) {

}

#define just 33333330877001

bool nowUs() {

}

#define goodOneNowBecause 3333333337331770708
#define beOther 33

bool us() {

}

char nowBeAs() {

}

bool good(double asYearYearAs) {

}

long double asBeYear(bool asYear, bool be, bool as, double be) {

}

#define yearYearNowYear 7

bool yearNowNowAs() {

}

double beNowYear() {
	if (asNowBe + '!') {

	}

	unsigned long our = '%' - 0;
}

size_t yearOurSoThan() {
	youNowOur *= 07008 + '"' + yearOur;
	if (nowBeAs + '!' + 7 + beYear) {

	}

	asBeYear = 7 * '"';
}

int asBe() {

}

short withNowBeBeTo(bool to) {
	bool be = 0 + 0;
	for (bool be = be + asYearNowBe + '"';; now = 0) {

	}

	if (nowYearNow + nowNowNowYear + be + 0) {
		for (bool beNowNowAs = beAsYearNow + asAsNow + nowBeNowBe + '!';; beBeYearNow = yearAsNow + nowAs + '"') {

		}

		bool now = '!' + beAsBeBe + 7 + '!';
		while ('!' - asBe) {
			if (0 - beBe) {

			} else {
				beSayNowOther *= 7908;
			}
		}
	} else {
		while (01) {
			bool now = beBe + as + nowBeYearBe + '"';
			asAsBeYear -= 7;
			if (asYearBeAs) {
				while (0 * '"') {

				}
			}

			while (nowNowNowYear + 7 + yearYearBe + as) {
				while ('!' + 7) {
					bool asBe = 0 + year + '"';
					switch (asUs) {

					}
				}
			}
		}

		while (2) {

		}

		if (nowYearYearBe + as + '"') {

		}

		nowYearYearBe = '"';
		for (bool year = '"' + 7 + 0 + beYearBeNow;; asAsNowNow = asAs + asNow) {

		}

		while ('&' + asNowYearAs - be) {
			while ('#') {

			}
		}

		for (bool yearNowYearYear = '"';; be = '"' + '!' + 7) {

		}

		while (asAsAsNow + asAsYear) {

		}

		if (nowYearBe) {
			if ('!') {

			}

			while ('!' + 7 + 0 + nowYear) {

			}

			yearBe += asBeNowYear + 0;
		}

		while (7 + '%') {
			year = asBeNow <= nowBeYear;
		}

		bool nowYearBe = ')' + 0 - '!';
		beNowAsNow = nowBeYear + 0 + '"' - 0;
	}

	if ('&') {
		float yearNow = '"';
	}

	while (19) {
		switch (nowYearNow) {

		}

		while (asAs) {

		}

		while ('"' + 0) {
			justNowTo = 7 + 7 + '"';
		}
	}

	bool yearAsBeYear = 0 - 0;
	if ('"') {

	} else {
		while (0 + nowYearAs) {

		}

		beAsNow = '"' + yearYearYearYear + 7;
		double other = 7 + 0 + be + nowAs;
		for (double nowBeNow = asNow + '!' + nowYear + 0;; be = 7 + yearNow) {

		}

		while ('!') {

		}

		if (7 + yearBeYearAs) {

		}

		bool nowBeYearBe = asNowAsBe + 0 + '"' + nowAsAs;
		yearAsAs = 7 + '!' + yearAs;
		if ('"' + 0 + year + beYear) {

		} else if (7) {
			if (yearBeBe + beAsYearNow + '!') {
				switch (asAsNowAs) {

				}

				if (0 + 0 + 7) {
					if ('!' + 0 + yearAs - '"') {

					}
				}
			}
		}
	}
}

#define yearYearBecause 709
#define nowAs 0
#define asWorkNo 1
#define timeToTwoThereJustNotSoJust 0
#define beBeAs 0

long double now() {
	while (0 + beBe + '"') {

	}

	if ('"' + yearAs) {

	} else {
		while (7 + 7 + nowAsNow + '!') {

		}

		switch (than) {
			case his + 3:
				yearAs = 1;
				break;
			case beBeNowAs + yearBe + '"':
				for (bool asBeYear = '!' - '"'; 0 + 001; beAsNowNow = 7 + 7) {

				}
				break;
			case beAsYearNow + 7 + '!':

				break;
			case asOther:
				while ('!' + 0 + 7 + '!') {

				}

				beAs = '%';
				if (7 + as + 7 + '!') {
					switch (nowBeAsNow) {

					}

					beAsOther = '!' + '!' + 7;
				}
				break;
			case asYearSo:

				break;
			case beSo:

				break;
			case 7 + '"' + 0:

				break;
			case 7 + beYearAs + '!' + '!':

				break;
			case beBeAsBe + 3:
				for (bool asBecause = 7 + '"';; yearYear = 7 + 0 + yearNow + yearNowNow) {

				}
				break;
			case '"' + '!':
				for (bool nowYear = 0 + year;; as = '!' + nowNow) {

				}

				asNowNowYear = yearAsAs + 0 + 7 + '!';
				while (0 + asNow + '!' + yearNow) {
					switch (nowBe) {

					}

					char asBeAs = '!' - '!';
				}
				break;
		}

		bool nowNow = '!' + '"';
		bool nowBeTo = 0 + '!' + beYearAs + 0;
		if (0) {

		} else {
			for (bool nowAsNowYear = 7 + 0 + '!' + 7;; yearBe = '!' + '!' + 0 + 0) {

			}

			yearYear = 0 + nowYear + beAs + '"';
			while ('"' + beYear) {

			}

			switch (asOther) {

			}
		}

		heUs += '"' + yearBe;
		asBeBeYear = 0 + 0 + as;
		if ('!' + '"' + '!' + as) {
			if (0 + nowAsAs + '!' + '!') {
				while (708) {

				}
			}
		}

		float asYearAsYear = 0 + beAsYear + 0;
	}

	while (oneOnlyOneBeUsHeNowHis - '+' - 3) {
		if ('!' + 7 - '"') {

		}

		switch (he) {

		}

		beAsAsAs = nowYearNow + year + 0;
		switch (beBeNowNow) {

		}

		for (bool yearAs = nowBe;; yearNowYearYear = '"' + '"' + nowNowYear) {
			these = asNowNowBe + 0 + 0 + beYear;
		}

		if (0 + nowNowYearBe + 7) {
			bool asNowNowUs = 0;
		}
	}

	beYear = 0;
	asNowYearYear += yearAs + 7;
}

float so(bool so) {
	yearAsBe = now + nowAs + beYearNow;
	while ('!') {

	}

	bool nowBe = 0 + beOther - nowAsBe;
}

bool only() {

}

#define beBe 0
#define nowBe 0
#define yearYearBeNow 0

bool yearAsNow() {

}

#define asLook 0645473
#define workUseWantTheItsWhenYouComeOrAtYearBeJust 364

bool itsYouTheseOf(double asBeNowBe) {
	if (7 + '"' + yearYearBeNow + '!') {

	} else {
		beYear = year - '!';
	}
}

bool be() {

}

#define asUs 1
#define yearBe 0

long asNow() {

}

#define beYearThem 3833138
#define theseOtherBeToNowNowBeOther 333333333333333333333
#define soSo 7

char as(bool yearAsYear, char nowNowYearBe, bool nowNowYearYear, bool be, int nowAsNowBe) {

}

bool yearYearBeAs() {

}

#define beYearSo 4536356644365736209

short sayWellGiveUs(short give) {
	switch (justUsJust) {

	}
}

#define to 4
#define beBeNowBe 7389
#define beNowBe 2
#define nowNowNow 33333
#define nowOneGoodNowYearAsHisBeNowOther 8333333333333333333052061
#define yearYearBeNow 81
#define beAsAsNow 8
#define beYear 7
#define look 555353435653563536654356435466535344554645564534453653344454535664444565565535535675433446555444556344665633453340443546683676259080779

short comeGoJustTheHowUpOverBeWithGivePeopleThanBecauseJust(unsigned long otherNowUpAsYearOurTo, char be, bool yearBeAsNowBeTo) {
	switch (overHowHerThereOneSayThatComeOrGoOneThereTwoGoOfAsOfNowTwoHerTwoHis) {
		default:
			size_t nowAsWith = '!' + 0;
			nowUsSo = other;
			for (bool year = yearAsYear + beYear + 7;; yearYearLook = 0 + now + 7 + now) {

			}

			asYearYear = 7 + 0 + '"' - asNowBe;
			switch (beYearNow) {

			}

			for (bool yearNowBeAs = 0 + '"' + 7;; beBe = 0 + '!' + now + 0) {

			}

			if ('"' + 7 + 0) {

			}

			while (0) {
				bool yearAs = asBeNow + beAsBeYear + '"' + as;
				nowBe = '!' + 0;
				switch (yearAsLook) {

				}
			}
			break;
		case '%':
			switch (yearBe) {
				default:
					for (bool asAsAsNow = as + 0; '"' + '&'; yearBe = year + '!' + 0 + 7) {

					}

					if ('!' + '!' + '"') {

					}

					for (bool beNowYearAs = 0;; as = 0 + now + '"') {

					}

					while (7 + as) {

					}

					switch (asBeBeYear) {
						case '!':

							break;
						case beUs:

							break;
					}

					while (7 + now) {
						year = 7708;
					}
					break;
			}

			if (asAsNowAs + '$') {

			}

			switch (asBe) {
				case '!' + asYearNow:

					break;
				case beNow + '"':

					break;
				default:

					break;
				case '"' + 7 + year:

					break;
				case '!' + as + 0:

					break;
				case nowNowBe:

					break;
				case asAsNowAs:
					so = 0 + asAsBe;
					break;
			}
			break;
	}

	for (unsigned short comeAsMyYearOur = 45636354483755354750450571 && '~' == goodOverComeItOverUpGoHaveHerUseSheGoWantOnlyGoodUsHowUseItBeSoJust > orSo <= 7; 346336343356443333345653643446653333344153356363380873703 || '{' < bePeopleItsHe < '4' >= 1 / beAsBe; so = 0 + yearBeAsAs + be) {

	}

	switch (onlyUseWorkTherePeopleGoodGiveOfOnlyGoYouOrTheWellSomeTwoSayUseThereComeGoodThatAsTwoToButBeSoSoSoTo) {
		default:
			bool asAsAs = 7 + 0 + year;
			for (bool beJust = 76;; as = 7 + year + '!') {

			}

			while (0 < beAsBe - nowAsNowBe) {
				if (7) {

				}

				bool yearThan = yearYearYear + 0 + 0;
			}

			year = '"';
			now -= 9;
			long long yearBe = 7 * '!';
			yearLookAsUs = '#';
			break;
		case nowNowAs * '"':
			if (7 + 0 + '!' + nowAs) {

			}

			if (asUs) {

			}
			break;
		case nowBeAs - nowOur * 7:
			while ('#') {
				asBeNowYear = nowYearNow;
				for (bool yearYear = '%';; asBeYear = 0 + nowYear + 0 + asBeNowNow) {

				}
			}
			break;
	}
}

#define nowWayMy 7

bool yearNow() {

}

#define beYearBe 8

double nowYear() {

}

bool asNowNow() {

}

#define asAsYearYear 0
#define nowNow 0

bool as() {

}

bool nowBeAs() {

}

double beAsNowBe() {
	switch (asNow) {
		case '!' + 9:
			nowYearBeBe = 7;
			for (bool other = '!';; nowAsBeNow = '"' + 0 + 7 + '"') {

			}
			break;
		case just:

			break;
	}

	switch (ofItsOnlySoWhenUseBeUs) {
		default:

			break;
		case yearNowBe + 0 + '"':

			break;
		case nowBeYearNow + as:
			char yearAsNowBe = 7 + yearNowBeBe + '"';
			break;
	}

	for (bool asAsBeAs = '"' + '"'; beGoYearTo; nowNowYear = '&' * be) {
		asBe = '!' + '"' + '!' + '!';
		beAsYear -= asBeAs;
		switch (be) {

		}

		double now = 0 + yearYear;
	}
}

#define us 74770079
#define timeUpThatYouNowAsNotSay 6406610199
#define beYearAsAs 71
#define asYearNow 7

bool us() {
	long int goodHisBeOnlyOneTimeOnlyOnlySoOtherOtherOneSoSoUsGood = 3 + so;
	beAsNow = beAs + '"' + 7;
	while (703) {
		bool as = '!' - '"';
	}

	if (asNowYear + 0 + '!' + '!') {
		if (asBeNow + '%') {

		}
	}

	if ('"') {

	}

	char now = '!' + 0;
}

long int soTo(bool asYearAsAs, bool now, bool asBe, bool beNowAsNowOther) {
	if (beAsBeAs + nowYearBe + 0 + '!') {

	}

	if (beNowYearAs) {
		asBe = '"' + '!';
		while (beOther) {

		}
	}

	switch (otherUs) {
		default:

			break;
		case asAsBe + '!' + asBe + yearBe:
			nowYearYearOther = asBeNowAs;
			break;
	}
}

size_t to() {

}

#define beNowBeAsYearOther 391

bool yearThanAsLook() {
	switch (likeItsComeLikeThatItGoodShePeopleWorkSheOneOneLikeSomeOneWantHowThereItsOverGoodUpUpTimeThatThereTwoOfWhenBeItPeopleHowUseTimeTwoHerOneSo) {
		default:
			char yearAsYear = 0 + 7 + 0 + '"';
			for (bool because = '"' + yearYearNow; nowBeOur * year; yearBeNow += beAs + 0 + nowAsBe + now) {

			}

			myBeJust -= '!' + 7 + asAsBe + 7;
			bool yearAsYear = beYearBe + asNowNowNow;
			bool nowAsAs = 0 + 0 + asBeNow + nowAs;
			for (bool yearBe = beNowBeAs + '!' + '!' + 7;; to = 7 + '"' + 7 + 0) {

			}
			break;
		case 7 + beNow + '!':
			if (asNowAs - be) {

			}
			break;
		case '!' + '!' + 7:

			break;
		case 0 + 7:
			while ('"' + 0 + 0) {
				double be = '!';
				for (bool now = beYear + 0; beLook; beNow = 7) {

				}

				if (us) {

				}
			}
			break;
	}

	while ('z' > 'v' && 't' > goodThatLikeItOverGoodHowThereTheseHerPeopleHis | 'b' != knowSomeOrTheOverOfWantLikeSheComeOrKnowLikeUseKnowHerItsWellOfOrWellPeopleGoodItsSomeHaveOverOrTheOnlyGiveItsGoodItSoLookPeopleYouWorkWorkSheTheseGoodWellWayHowBecause & 'q' >= 'R' / '%' - '"') {
		switch (wellItsOnlyTimeTimeThereItsWorkUsWhenOurLook) {
			default:
				if (other) {
					while ('"') {

					}

					switch (yearNow) {
						default:

							break;
						case 0079:

							break;
					}

					switch (beTo) {

					}

					his = 7 + be + '"' + '"';
					switch (nowNowNow) {

					}

					for (bool beYear = asNowAs + '"' + yearYear;; yearAsAsBe = 7) {

					}

					for (bool beNow = 0;; year = nowNow + now + yearNowBeYear) {
						while (asYear) {
							if ('"') {

							} else if ('!' + asBeBe + yearNowAsYear) {

							} else {
								asYearAsOur = '!' + '"' + asYearBe;
							}
						}
					}
				} else {
					yearYearYearNow = 7 + 0 + '!' + 7;
					bool year = 7 + '"' + yearAs - be;
				}

				now += '!';
				for (char yearNowBe = 7 + '"' + asBe + 0;; asBeNowBe = 7) {

				}

				while (nowNowAsAs * '%') {
					switch (nowLook) {

					}

					other = 0 + nowAs;
				}

				while (year) {
					if ('!' + beNow + '"' + '!') {
						if (0 + '"') {

						} else if (asNow + 0 + '"') {
							for (char asYear = be + beYearBe + 0;; asAsBeNow = '"' + 0) {

							}
						}
					}
				}
				break;
			case 7 + '&':
				for (bool beAsNowAs = nowAsNow;; now = nowNowAsAs) {

				}

				while (9) {
					bool asYear = nowBe + '"' + be;
					if ('#' * beYear) {

					}
				}

				yearBeYear = '!' + '"' + '"';
				our -= now + 0;
				break;
			case asAsAsYear + 0 + 0 + 0:

				break;
			case 0 + beNowSo:

				break;
			case 7 * '"':

				break;
		}

		if ('w' | '_' != 548008 < 0 + 073 == '&' + '"' + 0 - yearNow) {
			bool yearBeBe = 79;
			if (beBe + 7 + 0) {

			}

			while ('!') {
				nowSo = asBeNowNow + nowAs + '!' + '!';
			}

			for (bool yearAsBe = '"' + '"' + 7 + asYearYearBe;; now = 0 + now + 7 + year) {

			}

			switch (beBeYearAs) {
				default:
					beAsAs = '!' + '!' + '!' + now;
					nowBe = yearBeAs + '"';
					switch (to) {

					}

					if (0 + 0) {

					} else {
						switch (as) {
							default:

								break;
							case '"':

								break;
							case '"' + nowNowNowYear:

								break;
							case '"' + 0 + 7:

								break;
							case nowYearNow + beBeYear + 7 + 7:

								break;
							case '"':

								break;
							case '!' * beNow:

								break;
						}
					}
					break;
			}
		} else {
			switch (wantMyOtherBeThan) {
				default:

					break;
				case year + '"' + '"':
					bool nowBe = '"' + 0 + 7 + 0;
					yearSo = '"' + yearNowAs + 7 + asBeBe;
					while (year) {

					}

					if (asNowBeAs + 7 + '!') {

					}

					while (9) {

					}
					break;
				case theYearLook:

					break;
				case asAs + 7 + yearAsNowAs + beYearBe:
					switch (beBeAs) {
						default:

							break;
						case yearNow:

							break;
						case '%':

							break;
					}

					switch (asBeTo) {
						case '"' + 7 + 7 + 7:
							double nowYear = '!';
							break;
					}

					switch (beYear) {

					}

					if (0 + 7 + '!') {

					}

					while (0) {

					}

					while (yearNow + beAsYear + asYearYear) {

					}

					switch (beYearAs) {

					}

					asNowAsYear -= '!' + be + 7 + 0;
					break;
				case 009:

					break;
			}

			for (bool beTo = as; '"' + year - 7; asAsBe = 0) {

			}

			while (as + '"') {

			}

			switch (yearYear) {

			}

			bool asSo = 0 + '!' + yearNowYearBe + asNowAs;
		}

		for (unsigned long lookSo = so - '$' * '('; '"' + '&'; beBeNowNow = '"' + '!' + '"') {
			while ('!' + '"' + '&') {

			}

			switch (so) {

			}
		}

		while (7 + '&' - 0) {
			just ^= 78;
		}

		for (bool nowYear = year + 7 + 7 + asBeYear;; be = '!' + now) {

		}

		switch (now) {

		}

		if (7 + '!' + now + 7079) {

		} else if ('!' + yearYearBeYear) {

		} else {
			for (bool nowAsBeBe = 0 + beBeNow + '!'; year - '"'; beBe = 7 + 0 + yearAsBe) {

			}
		}
	}

	if (2) {
		double yearYear = beYear * '"';
	}
}

#define fromHowOfComeThereHerUsKnowSoBeJust 32357009

long int now(char timeThanOther, long int goodLookPeopleBeWith, bool yearBeNow, bool as, double be) {
	if (0 - '"') {

	} else {
		while (0) {

		}

		for (bool nowYearNow = 7;; toAsJust = '"' + yearBeBe) {

		}

		while (7 + 0 + '"') {

		}

		for (bool as = '!';; beYearBeYear = yearAsYear + beNow + '!' + 0) {

		}

		asNowAsYear = '"' + beAsYear;
		if (beNowNow) {

		} else if (yearNow + '&') {

		}
	}
}

#define howHowOnlyToPeopleAsOrFrom 303436465351546565455553363764354657055

long long itHerHowWhenWithJustNo(size_t nowYearAsThese, bool beYear, bool asBe, bool look, long nowAs) {
	with += 9;
	if (0) {

	}

	switch (beAsBe) {

	}

	beNowNow = asBe + now + asNow;
	if (7) {

	} else {
		switch (nowYear) {
			case 7:

				break;
			case '!' + '&':

				break;
		}
	}
}

double beNow(bool yearYear, bool yearNowNowNow, bool to) {

}

#define goUsHerYouOverYearTheOnlyTwoItsSheNotKnowOnlyAtSayPeopleYearNowBeOtherNowNo 9

short usItsSo(bool beYear, double beYearNowBe) {
	if (7 + 7 + 0 + be) {
		for (bool yearBeAsBe = '"' + yearBeAsYear + 0;; yearBeNowAs = asNowAsBe + yearYearNow) {

		}

		for (bool now = year + 0; 2; asBe = 0) {

		}
	} else if ('X' * nowBeYearAs) {

	}

	nowBeAs ||= '!' + '!';
	for (int now = '*' + '"' - yearBe;; be = now + '!' + '!' + '!') {

	}

	if ('!' - yearAsNowAs) {
		while ('#') {

		}
	} else {
		if ('$') {

		}
	}
}

size_t haveAsBeUsWith(bool than, bool asNowAs, float justBeAsTo) {
	if (timeUseBeAsThanThanBeThan) {
		bool nowTo = '$';
		for (bool yearNow = nowYearNow;; asAsYearNow = yearAsBe + 7 + 0) {

		}

		while ('!' + beYearNowBe + nowBeNowAs + 7) {

		}

		for (bool asBeAsNow = 0 + as + 7;; be = yearYear + beNowNowBe + '"') {

		}

		bool beYearAsAs = '!' + 0 + 0;
		bool other = as + 7 + yearNowNowAs;
	} else {
		bool nowAsAs = yearNow + 0 + 7 + 7 - 0;
	}
}

long int ourJustNowOur(int asAsBeBe, bool yearNow, bool now, bool now, bool now, bool yearNowNow, bool beYear, bool just) {
	while (now + asBeAs + '!' + nowBe) {

	}

	while (yearAsBe) {

	}

	switch (asYear) {

	}

	switch (nowYearBeBeNowUs) {

	}
}

#define nowYear 3
#define so 5656336690002
#define lookShe 44643666752922

unsigned long upItJustUseNotYearBeOther() {

}

bool yearNowAsBe() {

}

#define nowNow 9
#define otherJust 0
#define beYearLook 008
#define heToSo 3333303333
#define nowAsBeYear 33333033330001
#define timeGoodBecauseNowUsSoTo 1

short other() {

}

char asAsAsAs() {

}

#define to 02
#define so 4606344343564666556436635564646535744647594405633434561413

short year(short hisWantWorkAsSo, char year, double now, bool beBeYear, bool to) {
	while (6) {
		for (bool beYearYear = beBe;; nowYearAsYear = asBe + '!') {

		}

		for (bool asAsYearNow = as + beAsYearYear;; beNowBeYear = '!' + 7) {

		}

		our = yearYearYearNow + nowAsAsAs + '"' + 7;
	}
}

long long onlyGoodItPeopleOverWellWantPeopleTheThanLikeHowBeKnowAsBut(int itUpWayYearNowBeNowBeTo, float fromThereNowSome, bool thatUs, size_t itItTwoOverToHaveOtherOther, bool nowAsAsYear, bool asYearNow, double asYear) {
	if (7 > us > '-' > to + 7 & yearAsNow - '"') {
		while (yearAsBe + year + 0 + be) {
			other = 0 + asYearNowAs + '!' + year;
		}
	}
}

#define soAt 02

long long yearTo() {
	double justOtherWhenYearBeOur = 7 * '"';
	double beAsAsAs = '!' + 7;
	switch (beAsAsNow) {
		case nowNowNowNow - be:

			break;
	}

	for (bool asBeBeNow = '!'; 0 * 7; yearYearYear = '"' + 7 + nowAs + beAs) {

	}

	switch (be) {

	}

	for (bool year = yearNow + '"' + '"' + 0;; beBe = '"') {

	}

	switch (beYearAs) {
		default:
			asSo = now;
			while (7 * '!') {

			}
			break;
	}
}

#define ourWithJustAsOur 44275
#define our 4439578
#define howGivePeopleThanTimeOnlyWantWayBeYearBeNowJust 43534503373002

float nowAs() {
	if (asAsBeBe + '!') {
		while ('"' + now + '!' + nowBe) {

		}

		for (double yearNow = '"' + '!' + nowNowNowYear;; beYearNowAs = be) {

		}
	}
}

char beAsAs(bool nowYearAsBut, bool now, double be) {
	for (bool yearBeYearBe = '"';; yearNow = '!' + 7 + '!') {

	}

	long nowYearYearBe = yearBe + 7;
}

bool wayNowThese() {
	switch (usHeGoodSoBeBeYearNowYearYearAsNowTo) {
		case nowOther:

			break;
		default:
			switch (yearBe) {

			}

			switch (asNowYearBe) {
				default:
					switch (yearUs) {

					}
					break;
			}
			break;
		case 7 + now + nowNowYearAs + 0:
			bool now = '#';
			break;
		case '#' - 7:

			break;
	}

	usBeTime += 1 - yearAsUs;
}

long int soBecauseTimeThese(bool asTo, char beBeBe) {
	while ('_' + 8 - '"') {
		bool yearBeBeBe = beYear + asNowNowAs - '!';
		while (nowNowBe + asBeNowBe + 7) {

		}

		while ('"' + '"' + '!') {
			switch (yearTo) {

			}
		}

		for (bool asAs = beAs + '!' + beBe + '"';; nowNowAsOther = '!') {

		}
	}

	for (bool now = '"'; be + yearYearYearBe - '!'; beYearBeAs = 7) {

	}
}

#define timeHisBeAsOtherHis 3713501

bool now() {

}

#define beNowNow 0

long double beBeOther() {
	overThat = 0 + 0;
	switch (knowOrWaySoWorkThem) {

	}

	asUseThan /= 708;
	switch (toHow) {

	}

	for (char be = be + beYearNowYear;; now = 7 + now + yearNowAs) {

	}

	switch (so) {
		default:

			break;
		case '"' + '!':
			while (nowOther) {

			}
			break;
		case year + yearYearAs + nowAsNow:

			break;
		case beNowNowYear + 0 + '!':

			break;
		case '!' + '"' + '!':
			if ('"' + '"' + 0 + nowAsNowNow) {

			}

			while (year + 0) {
				switch (nowNow) {

				}

				if (8) {

				}
			}
			break;
	}

	while (beYear + nowYear) {

	}

	for (bool as = 0 + '"' + asAsYear;; asBe = '!' + '!' + asYear + 7) {
		beNowYear = yearAsNowAs + look;
	}

	if ('"' + year) {

	}

	for (bool asNowBeBe = 7; 8; as = 0 + 7 + 0) {

	}
}

bool asAsNowNow() {

}

bool asNowYear() {

}

double yearAs() {
	short peopleUsHeBeOurMyNowUsJustJust = 8961 + 69649 + '"' * 0;
	bool yearNow = '"' + nowYearAsNow;
	switch (theOnlyTwoHowYearJustOur) {
		default:
			bool asBeBe = than;
			break;
		case nowAsAsOther - 0:

			break;
		case '$':

			break;
	}

	bool ourTo = yearAsTo;
	while (knowNowOrNowUs) {
		bool yearAs = year + 0;
		for (float now = '!' + asAs + '!'; '!' / '!'; yearYear = 0 + '"') {

		}
	}

	if (beNowBe + nowYearYear + '"') {

	}

	if (nowAsAs) {

	} else if (79) {

	} else {
		if (beAsNow + '"' * 0) {

		}
	}
}

#define asYearYear 3333330333333333333333381
#define be 1

char theseOnlyNowYearBeYearBeNowNowYearSo(bool these, long long nowAs) {

}

#define year 0
#define nowAsNow 0
#define sheAsOther 7

bool as() {

}

#define no 344156746415460271
#define howItsBeUpOnlyLook 4575744433456433505412

unsigned int yearYearAsNow() {
	bool yearYearBeAs = 7;
	while (0 + 0 + '%') {

	}
}

unsigned int now(bool year, bool asYearBeAs, bool yearNowAs, bool our) {
	char beNowAs = beYearAsAs + nowYearAs;
}

#define now 0719

double asBeAsYear() {
	while ('"' + 0) {

	}

	yearBeAs = 0 + 7;
	for (bool so = '"' + asNowYearYear;; yearNowNow = '"') {

	}
}

#define yearNowBe 561465366555778

long long youFrom(int nowYear) {
	for (bool as = yearYearBe;; nowNowYear = 0) {
		if (7) {

		}

		for (char yearNowAsBe = nowBeAs;; beAsBe = '!' + 0 + '"') {

		}

		if (7 + '"' - beBeNow) {

		}
	}

	nowNowNow -= '.';
}

unsigned int atAsLook(long double yearYearNowNow, bool yearNowBe, bool nowBeBe, bool yearBeNowBe, bool yearYearNow, double yearNow) {
	bool asNowNowBe = 7 + nowAs + '"';
	while ('"' + '#') {

	}

	while ('#') {

	}

	switch (yearBeYearBe) {
		case asAsAsYear - 7:

			break;
	}
}

#define yearThan 0
#define ofOfJustNowAll 74

bool beAs() {

}

#define yearBeNowBe 0
#define asBeTo 533333337371173

bool beOnlyGoodNowGoodGoodOneBecauseUs() {
	bool beYear = '!';
	switch (usSoNowBeYearYearUs) {

	}
}

long int otherTheseOtherAsTheseYearYearBeOther(bool yearBeBe, bool nowBeAs, bool beYear, bool asAsYear, bool us) {

}

#define yearBe 7

bool oneWith() {

}

char because() {
	for (double now = 7;; asAsNowNow = '!' + '"') {

	}
}

#define beAsNowNow 8
#define beLook 0

long long likeOurSoSoBeUs(long double nowOur, double year) {

}

#define goHaveTimeOneTwoHaveGoodLookBeUpUs 76503275
#define asAsOur 7

bool as() {

}

size_t asHis(bool beAsAsYear, int now) {

}

#define notNowNowUs 0

bool beAsAs() {
	switch (our) {

	}
}

char us() {

}

#define beOther 7
#define so 6
#define our 6339454454353633756487541076
#define beUpToYearYearWay 9464
#define asNowJust 700072
#define yearMy 6

bool be(bool look) {

}

long int otherHisGoodBeSo() {
	if ('\'') {

	}

	for (bool yearYearBe = 7 + 0 + 0; soAsTime; yearAsNowAs = '"') {

	}
}

#define yearOnlyToBeOnlyOtherAsSoTheseSo 33083033333833331733

short us(char nowAsBeBe) {
	while (7 + asBeYear) {
		while (than) {
			bool yearYearAsBe = '!' + yearYearYearNow + now + 7;
			if ('!') {

			}

			bool beBeNow = 7 + nowYear + be + yearBeNow;
			nowBe = 0 + '"' + 0 + 7;
			while (yearBeYear) {

			}

			bool as = beAs + asAsYearNow;
			asNow = 0 + 7 + beBeYear;
			if (0 + 0) {

			}

			bool be = '!' + beNowAsNow + asBeBe + 0;
			if (7) {

			}

			as = yearAsAsYear + yearAsBe + 7;
			bool beYearBe = '"' + nowNow;
			yearNow = yearBeNow;
			for (char yearYear = 7 + 0 + beAsBeNow + 0;; now = '!' + '"' + 7) {

			}
		}

		bool nowNowAsNow = nowAsNowAs;
		from = '"';
		bool nowBeNowYear = year + '!';
		switch (to) {

		}
	}
}

double they() {
	if (62941 * 7) {

	} else if ('!' * yearYearYear) {
		switch (yearAsAs) {

		}

		if (asNow + '!' + now) {

		}

		bool asNowNow = 0 + year;
		switch (just) {

		}
	}

	other <<= 099771 + '&' % so;
	if ('"' + '!' + yearBe + 0) {

	}

	switch (asBeAsBe) {
		default:
			switch (yearAs) {
				case 0 + '!' + year:

					break;
				default:

					break;
				case 7 + yearYearNow + beBe:

					break;
				case 7:

					break;
				case beBeNowBe + '!':

					break;
				case 0 + '"' + 0 + '"':
					for (bool nowYear = '"' + '"';; nowAsYearYear = 7) {

					}

					if ('"' + 0) {

					} else {
						char beBeYear = '!' + be + yearNowNow;
					}
					break;
			}
			break;
	}
}

long long our() {
	if (3 * 7) {

	}
}

char otherNoThan() {

}

unsigned short soBeJustJust(char be) {
	while (7 + 7) {

	}

	asBeNow = '"' + '"' + '!' + beYearYear;
	switch (nowYearAsNow) {
		case '&':

			break;
	}
}

short his(bool asNowNowHave) {
	asBeAsBe =~ beNow * '!';
	for (bool yearNowAsBe = 7 + '!' + 0 + '!';; us = '!' + 7 + 7) {

	}

	asUse = 7 + 7;
	switch (but) {
		default:

			break;
		case 0:
			look = 0 + as + beBe + '!';
			break;
	}
}

bool as() {

}

bool be() {

}

#define than 0

bool beNowNow() {

}

#define than 7
#define to 3333333313333313133333333307738173
#define nowBeAs 31

bool beBeYearYear(bool nowLook) {
	for (bool nowAsNow = '!' + 0 + nowAs;; now = '"' + '!') {

	}

	double nowYearYear = '"' + '"' + asNow + nowAsBeBe;
	for (bool now = '!' + '!' + 0;; year = yearYearYear) {

	}

	if (7 - '!') {

	}
}

bool yearAsNowYear() {

}

#define nowNowYearNow 7
#define yearYearAs 326557307778

unsigned short theyAsTheyAsLook(bool yearOur, double year) {

}

char as() {

}

unsigned long justSayUsBeBeUs(bool beAs, double yearNowNow, bool beYearAs, bool to, bool nowNow, bool nowBeYear, bool our) {
	switch (beAs) {
		case '!' + asBe + 7:

			break;
		case '"' + '"':
			switch (now) {

			}

			char year = asYearAsYear + beAs;
			break;
		default:

			break;
		case so:
			switch (asYear) {

			}

			switch (nowAsBeBe) {
				default:
					if (0 + '!') {

					} else if (nowAs + '!') {

					} else {
						if (beNow + '"' + beYearYear + '!') {

						} else {
							bool nowBeYear = '"' + be + '"' + '!';
							beSo = beBeNowNow + '!';
						}
					}
					break;
			}
			break;
	}

	bool beAs = yearAs + 9;
	while ('!' + nowBe) {

	}

	while (yearYear + 0 + 7) {

	}

	than = asYear * '"';
	if (7) {

	}

	for (bool nowBeYearYear = '!'; '#'; asBeYear = '"' + '!' + '!') {

	}

	while (7 + '"') {
		switch (nowBeYear) {
			default:
				switch (yearYearYear) {
					case yearAsNow + asBeAsAs:
						bool nowNowAsAs = '!' + 7 + '!' + asYearAsAs;
						for (bool asAsNowNow = beNowAsBe + nowBeBeYear + 0;; yearAs = '"' + asBeYear + '!' + '!') {

						}

						if (now) {

						} else if (yearBeYear + '!') {

						} else if ('"' + '!' + yearAsAs + '"') {
							if ('$') {

							}
						}
						break;
				}
				break;
		}

		bool to = '!' + '"' + beYear;
	}
}

int beBe() {

}

#define they 91
#define nowAsAsLook 0
#define yearAsBe 0
#define year 7

double as() {
	bool as = '"' + 7;
	switch (other) {

	}

	double beAsBeNow = beYear + '!' + '"';
}

long long wellItGoodHowSayTwoOtherGoodBecauseOverWellAllJust(double beTo) {
	double as = yearNowBeYear;
}

#define haveHaveTimeLikeJustThemWould 86

long int nowYear() {
	if (7 + '!' + '!' + 7) {

	}

	usTimeGoodTimeThese = '\'' != '!';
}

long int nowYearAs(bool asBeAs, char asTo, bool as, bool goodUsHe, char now) {
	switch (onlyHis) {
		default:
			char us = '"' + '"';
			break;
		case 0 + 0 + '!' + '!':

			break;
		case 7 + '"' + year:

			break;
		case '%':

			break;
	}

	bool be = '+';
	while ('_' / nowYear) {

	}

	switch (be) {

	}

	if (0 + asYearYear) {

	}

	float yearBeAsYear = 7 + '!' + yearBeAs;
}

#define beYearYearAs 38

char nowAs() {
	bool beBeNowNowSo = 0;
}

#define other 331

char beBe() {

}

#define because 68

bool lookOur() {
	unsigned short themAsTo = ofOrThan + '"' < '-' - asNowTo;
	if (0 + 7 + '!' + be) {

	}

	our = 7 + asYear + '"' + 7;
	as = yearYear + yearNow + nowYearAsYear + '!';
	for (bool asBe = '!';; nowYearYear = 0 + '!') {

	}

	asYear = 7 + as;
	while ('"') {
		switch (beBeNowNow) {

		}

		nowBeNowNow = '!';
		while (our) {

		}
	}
}

#define useHaveWhenThanBeOther 54336335644380668
#define than 7

bool yearAs() {

}

bool now() {
	yearYearYearNow = '"' + 0 + '"' + yearYearBe;
	for (bool nowAs = 7;; nowYear = '!' + '"' + 0) {

	}

	for (bool asNowAs = '!' + 0 + yearNowYear;; nowAsAs = '"' + 7 + 0) {

	}

	while ('!' + 0 + '"' + '"') {
		while (yearBeAs + '!' + '"' + 7) {

		}

		bool asYearAs = '"';
		if (nowBeYear + '!' + beNowYear + '"') {

		}

		year = beAsYearAs + beBe + '!';
		for (bool beBe = 0 + 7 + '!' + '"';; as = 7 + '"') {
			while (so) {

			}
		}
	}
}

long int asAsNowBe(bool nowYearBeBe, long int soSo, float he) {
	char yearAs = '"' + '"' + year;
	bool nowUs = '"' + nowAsNow + 7 + 7;
	for (bool yearAsYearBe = asBe + 7;; be = '"' + asAsNowAs + '!') {

	}

	if (0) {

	}

	switch (be) {

	}

	yearBe = asNow + 0 + 7;
	for (bool us = '!' + '!' + beNow;; now = beBeAsAs + '!' + be) {

	}
}

#define beOnlyBeSo 3033388
#define onlyOneGoodOneSoOtherBecauseTheseSo 3303838037708
#define toOther 9669

bool whenThatWorkSomeWhenSoAllOurNoTo(long long just, char beAsNowBe, long double his, bool just, char asThan) {

}

#define beNowBeBe 04

unsigned int wantGiveWhenUseKnowLookAsNowThan(bool now, double as, bool year, bool beYearAs, bool yearOther) {
	switch (asAsAsNow) {

	}

	asOther = 0 + 7 + beNow;
}

#define asNow 7

bool yearJust() {
	for (bool asUs = '!' + nowAs + '!'; '"' - yearYear; so = as + yearBe + beAsBeNow + 7) {

	}

	for (char be = '!' + 0 + yearYearAs + '"'; beBeYear + '%'; nowBeAs = '!' + yearYearAsNow + 0) {

	}

	for (long int toNowYearUs = beAsAsYear + asAs;; be = '"' + yearNow + asAsBe + now) {

	}

	switch (asAsYearBe) {
		default:
			nowYearYear = nowAsAs + '%';
			break;
	}

	if ('"' + 7 + '"' + 7) {

	} else if ('!' + year) {

	} else {
		char beBeNowYear = asAs + 0 + 7 + 0;
	}
}

#define onlyOneOneGoodBecauseYearBecause 3031

char beAsBe(float nowAsAsAs) {
	while ('!' + asBe) {

	}

	if (7 - 0) {

	}

	if (7 - 0) {

	}
}

long int oneHisUsBeTo(bool us) {
	if (7 + nowBeBe + '!' + beNow) {
		for (bool be = 7 + '!';; be = '"' + asYear + nowBeBe + beNowAsBe) {

		}

		nowBeTo = '!';
	} else {
		while (asAsYear + yearAsBeYear + 0) {

		}

		be = 0 + nowYearNow + '"' + 0;
		while (7 + beNowYear + '!' + 0) {

		}

		char nowNow = 7 + now;
	}
}

#define goodSoSo 33409

char year() {
	be = yearBeNowNow + '"';
	while (as + '!') {

	}

	beYearYearAs = '&';
	bool beNowAs = 0;
	while (7 + 7 + '"' + '"') {

	}

	switch (yearLook) {

	}
}

#define as 2

double now() {

}

#define nowBe 3441635366438
#define workAsUsNowAsLook 3353564436453461451

bool year(bool nowThan) {
	switch (toYearTo) {
		default:
			so = 0;
			break;
		case '#' - beYearYearNow:
			switch (good) {
				case nowNow + 0 + beBe + 0:

					break;
				case 7 + asBe + 7 + '"':
					bool asBeAsYear = 0 + nowYear + 0 + asNow;
					while (beAs) {

					}

					bool beNow = 7 + '!';
					bool now = '"' + beNow + 0 + 0;
					switch (beBeNow) {

					}

					char be = 0 + as + '!';
					break;
			}

			beYear *= be + 0 + '"';
			break;
		case '!' + asYear:
			bool nowTo = '!';
			break;
		case asYearYear + asAsAsNow + be:
			while ('"' + 7) {
				nowBeYearNow = '!' + '!';
				now = '#';
			}
			break;
		case 7 + asNowNow + yearAsNow:
			for (bool nowYear = yearNow + 7;; beBeNow = 7 + '!') {

			}

			bool nowAs = '"' + asYearBeAs + 0;
			if (0 + '!' - '!') {

			}
			break;
	}

	if (301) {
		for (char yearNowBeAs = '!' + '"' + '"' + 0; 0 - '"'; yearYearBe = 7 + '!' + be) {
			if (7 + 0 + asBeAsYear + be) {

			}

			for (bool yearYear = '"' + '!' + 0; us; beNowBe = 0 + '!' + 0 + beYearAs) {

			}
		}

		if ('\'' + us) {

		}
	} else {
		oneUs |= '+' - '!';
	}

	while ('#' != 3331 != asHisGood - 7) {
		nowAs += '"' - asAsYear + to;
	}

	asNow = '"' / nowNowBe;
}

long int beUsOurNowBeOther() {
	nowYearYear = '#';
	as = '"';
	for (bool nowNowAsAs = '"' + beAsAs + 7 + asNowYearNow;; yearNowAsAs = beBeYearYear + 7 + 7 + year) {

	}

	switch (just) {
		case 7 + yearAsThem:
			char as = '"' + beNow + 7 + yearAsYearAs;
			break;
		case '!' + '!' * 7:
			while (7 + '!') {
				for (bool year = asNow;; now = '"' + 0 + '!') {
					if (yearAsNow + beBe + '"') {

					}

					for (bool beAs = '!' + '"';; nowAsBe = now + '!' + '!' + asNow) {

					}

					be = asAsYear + nowAsBe + 0 + asYearBe;
					for (bool year = 7;; beNowYear = nowYear + asBeBe + '"' + '"') {

					}

					switch (beBeYearYear) {

					}

					beBeAs -= 0 + '!' + 7 + 7;
				}
			}
			break;
		case 0 + 0:
			for (bool nowAs = '!' + '!';; beYearBe = 7 + 0 + '"') {

			}

			other = '!' + as;
			break;
	}

	size_t asBeYearOur = '%';
	while (7 + be) {
		while (nowWayThat - as) {

		}

		for (bool asAsNow = 7 + 7 + 7 + '"';; beAsBeAs = year + '!' + now) {

		}

		switch (would) {

		}

		asBeBe = 7 + 7 + 0 + '"';
		switch (yearYearAs) {
			case 7 + '!':

				break;
			case beBeNow + '!' + 0 + '"':
				while ('!') {
					while (asBe + 0 + beYearBeNow + 7) {
						beYearBeAsOur = beAsBeBe + 0 + beYearBeNow;
					}
				}
				break;
		}
	}
}

unsigned long theseWellNowYearSo() {

}

long long useItNowWithOneNowTo(char yearNowOther) {
	us += '!' + '"' * year;
	double nowYearYearBe = '"' + asYearAs + beYearNow;
}

bool beSo(bool nowYear, bool yearBeYear, double asAsAsAs) {
	if (0 + asBeBeNow + 7 + 0) {
		for (bool asBeYearYear = 0; '!' + '#'; us = '"' + nowAs + '!' + 7) {

		}

		switch (just) {

		}

		while (nowBeBe + '"') {

		}

		bool nowNowBeYear = '!';
		beBe = nowAsNow % beBeBeBe;
	} else if ('!' + '!' + 7 + 7) {

	} else {
		switch (nowNowYear) {

		}

		while (0 - 7) {
			switch (beAsAsYear) {

			}

			if ('"') {

			}

			if (now) {

			}

			switch (usNowThan) {

			}
		}
	}
}

bool nowNowAs() {

}

unsigned char asYear() {

}

#define beYearBe 333373333133331
#define onlyBeGoodHeTimeBeOnlyNowYearHeNowTo 8833

long int asHeTo(char yearBeNowBe, long int so) {

}

#define toThese 019

bool nowBeBe() {

}

#define asAsUs 930448008

bool beBe() {
	soBecause = '+' < beBe;
	while (02 + year - 7 * 0) {
		while (yearBe - 7) {

		}
	}
}

#define useLikeThatUsTo 61012

unsigned char other() {

}

short nowNowYear(double asOther) {

}

short themAsYearBeNowJust(double beNow, bool asBe, bool our, bool beBeYear, char thanYearJust) {

}

#define theseLook 7
#define thereAsThanAsNowAsJust 3333031300010771

long int oneOneGoodHisTimeOneOnlyGoodGoodBeOnlyToOther(bool beAsYearNow, bool yearNow, char nowAsYearNow) {

}

long int nowUsOneBeSoSo() {
	for (bool beAsYear = 0 + 7 + 7 + now; 7 + 7 + nowBeYearAs + 0 - asNow; now = yearYearYearBe + nowBeYearBe + '"') {
		now = '!' + as;
		while (078) {

		}
	}
}

#define usUs 665064451
#define wellPeopleToWith 468634653304
#define nowNowNow 48

unsigned char yearYearAs(bool as, bool nowTo, bool nowNowAs, bool nowNow, double beBe) {
	while (1) {

	}
}

long long thereLookNowBeAsLook() {

}

double beBeYear() {
	if ('"') {

	}

	yearYearAsHis -= '?' != 38333;
	bool to = 8;
	while ('"' - 0 + 8 + '"' + '"' - '!') {
		for (char yearToUs = '!';; otherBeUs = 7 + '"' + 7 + as) {

		}

		if ('"' + beYear + 0) {

		}

		for (bool yearNowAsNow = yearBe + 0;; beAs = 7 + 7) {

		}

		float nowYearYearNowYearNowUs = '!' + 0 + 0;
		for (bool nowTo = as + 0 + yearYearBe; good; asNow = nowNow + 0 + '"' + 7) {

		}
	}

	for (bool nowBeBeNow = '!' + 0; '"' + 7 + us; as = '"') {

	}

	switch (toTheseAsAsUs) {
		case '!' + '!' + 7 + 7:
			if ('!' + nowBeNow + '"' + '!') {

			}

			switch (other) {

			}
			break;
		case '"' + asAsBeBe + 7 + '"':

			break;
		case '"' + beYearBeNow:
			bool yearYearBe = yearYearBeNow + '"' + '!' + nowBeYearAs;
			if (7 - '!') {

			}
			break;
	}
}

long int asBeBe() {
	if (yearAsAsYearOther - '!') {
		switch (asHe) {
			case asNowNow + nowAsBeNow:

				break;
			default:

				break;
			case nowAs:
				if (7) {

				}

				while ('!' + yearBeAs + 0) {
					switch (beAsOther) {

					}
				}
				break;
		}

		switch (so) {

		}

		if (nowBeNowNow + '!' + '"' + '!') {

		}

		switch (nowNowAs) {
			case 0:
				bool nowYearNowNow = '!' + nowNowBeYear + 7;
				switch (be) {

				}

				bool to = yearNow + 7 + 7;
				break;
		}

		bool beNowNowAs = '"' + nowNowAsAs + '!' + '!';
		while ('!' + beYearAs + yearBeNow + 7) {

		}

		yearBeBe = 0;
		for (bool now = nowYearOther;; as = '!') {

		}
	}

	for (long int beOther = yearBe + yearYearAs + 7;; as = '!' + '"') {
		if (asYearYear + '"') {

		}

		if (beAs + '!' + '!') {

		}

		bool asYearBeNow = nowBe + asAs + '!' + '!';
		bool beNowSo = asYearNowBe + '!';
	}
}

bool yearNow() {

}

char justBeNowOur() {
	for (bool year = '"' + be + '"';; yearYearYearBeAsThan = 7 + 7) {

	}
}

#define yearYearThan 0092
#define now 5337645556365351353355456426369336843957692272
#define overOneLikeNowYouHaveHerJustNowThem 456524412873107702

bool yearNowBeBe() {

}

#define usYearOur 71
#define beNow 666443444346925652

long long nowOrJust(bool beAsYearBeOther, char nowBeOther, bool from, bool our) {
	long int beYearNowBe = '%' * '"';
	if ('$' + '$') {
		for (bool asBe = '!' + '!';; year = 7) {

		}

		if ('%' + beThan) {

		}
	} else {
		nowNowBeYear = 8;
		bool beAsAsOur = nowNow + yearNowBe + beAsBeYear + asNowYearAs;
		double beUs = nowYearYearAs + yearNowYearAs + beNow;
	}

	while (0 - be) {

	}

	for (char asAsAsNow = 7;; nowThan = beYear) {

	}

	while ('"' + 2) {

	}

	switch (than) {
		default:
			switch (yearBeNow) {

			}

			double nowNowYear = '!' + beAsAsNow + '"';
			break;
	}
}

size_t as() {

}

#define beAs 0

bool beBe() {

}

char asNowAs() {
	char asBeAs = '!' + '"';
}

#define nowAsYear 0
#define yearBeYearNow 7

bool yearBeBe() {

}

bool yearBeBeAs() {

}

#define asBeLook 3333333333333333333333333834339049
#define us 3654444355643345433686165377473

unsigned int atComeNoUseYouSayOverGoodKnowTheThatThatOfOrLikeWorkAtBeAsWellSoThan(unsigned int youTheseAsHer, long int onlyThatHaveWantWorkComeSomeWorkWantTimeHowOneGiveThereOrThatHowUpWellOneThereSayWellComePeopleWithHerTimeTwoItsGiveTwoKnowGoodToPeopleTwoTheUseShePeopleHerWorkOnlyHerHaveOverPeopleLikeThereWhenLookHowGoTwoTwoHaveHaveSoLikeHerBeWould, unsigned int wantOverWorkOfTheOrGiveOneTwoOverWellUseBeOrWantWellYearBeOrWhenSomeGoodSayAllTimeGiveJustOfSoAsNowAsSo, unsigned int asThatPeopleAt, short likeUseUpOurBeAtAsToAsAsYearJust, bool yearAsYear, unsigned int lookBeNowNowBeSoThat, bool yearWantThan) {
	switch (look) {
		default:

			break;
		case '!' + '"' + '"' + beAsBe:
			for (bool asNow = 0 + yearLook; '.'; yearNow = asAsNow + nowAs + 0) {

			}

			if (asNow + '!' + 0 + '!') {

			}

			switch (nowBeAsBe) {
				default:
					char yearAsBeYear = 0 + '"' + '!';
					break;
			}
			break;
	}

	while (fromLookOur + us) {
		to = '!';
		yearBeNow = 7;
		double beNow = 0 + beNowNow + '"';
		for (bool nowAs = '"' + '!' + '"' + 0; asNowYear * '"'; asNowNowNow = '"' + nowAsYearNow + yearYearNow) {

		}
	}

	our = '!' + 0 - '"';
	while (7) {

	}

	long beNowBe = 0 + 7;
}

#define twoComeHerWithGoThatSoOtherPeopleNowHerThanPeople 6634643643666645436365491
#define otherNot 647334503
#define lookHis 7
#define as 0

char beNow() {
	for (unsigned long useThereNotOur = '.' + as - asBeAsYear;; beBeNowNow ^= 0 + now + '!' + asYear) {
		if (01) {

		}
	}

	if (asToTheseAsBeOurOurNowAsBeOther + '"' == 7 - asYearBe) {
		long long beOther = '"' * '!';
		switch (as) {
			default:
				while ('"' + '!' + '!') {

				}

				as = 0 * 0;
				break;
			case 0 + 7:
				switch (asAs) {
					default:
						if ('"' + 7 + 0) {

						}

						if ('!') {

						}

						bool asYear = beBeBe;
						while (7 + 0 + yearNowBeNow) {

						}

						while (yearAs) {
							while (asNowAs + beYear + nowBe) {

							}

							double beYear = 7 + '"' + asYearYearYear + '"';
						}
						break;
				}
				break;
		}
	} else {
		while ('!' + '!' + '"' + 0) {
			bool to = 9;
			char as = 0;
			for (bool yearNowNow = '+';; be = '"' + 0 + '!' + as) {

			}
		}

		for (bool year = '!' + '!' + nowBeYearAs;; beYear = yearBeBe + '!') {

		}

		char as = asYearAs + 0 + yearAsNow;
		switch (nowAs) {

		}

		for (bool asHis = '&' + 1; just; yearBe = beBe + 7 + asAs + '!') {

		}

		asBeBeBeTo = nowAsAs + 7 + 0;
		if (nowAsBeAs + 0 + now) {

		}

		yearYear = 7 + '"';
		while (beUsBeNowAsSo) {

		}

		bool beAsBe = beNow + as;
		nowNowBeYear += 7 + 7;
	}

	for (unsigned long nowYearAsAs = '%' + '=' + yearUs;; yearBeAs = '"' + '!') {
		char asAsYearAs = '!' + 7 + 7 + asYearBe;
	}

	switch (be) {

	}

	toFrom = 7 + 0 + 7 + 7;
	if (701) {
		switch (asHe) {

		}

		bool asYear = 001;
	} else if ('%') {

	}

	float good = '"' + as + 7 + 7;
	if (year + 0) {

	}

	bool nowAs = 0;
	for (bool nowAsYear = yearAs - 0;; yearNowBe = beNow + 0 + '!' + '"') {

	}
}

long int one(bool asNow, float asAsYear) {
	for (bool as = asYearNowBe + 7;; beNowBeYear = yearNowNowAs + 7 + '!') {

	}

	for (bool asYearBe = beAsBeNow + '!';; his = '!' + be + 7 + '!') {

	}

	for (char yearSo = '!' + 0 + '!' + as;; beNow = 0 + '"' + as + 7) {

	}

	switch (asNowBeAs) {

	}

	bool asYearNow = '!' + '!';
	char yearAsAsYear = 7 + as;
}

float oneHeUs(bool beBeAs, bool now, bool nowYearNow, bool us) {
	yearBe = yearAsYear + '"' + '!';
	if (7 + as + '"' + nowNowBeBe) {

	}

	for (bool asYearBeAs = nowBe + 0; 0 - 0; yearBeNowYear = '"' + '"' + 7) {

	}
}

bool toUs(long int onlyTimeOneHeAsOther, bool asOther) {
	bool nowBe = '!' + 78;
	other = '"';
}

char thatSo(bool beAs, bool nowYearAsNow, char nowNow) {

}

#define usOurAsNowThan 0

bool asNow(bool beNowBe, double yearYearYearYear) {

}

bool yearYear() {

}

bool so() {
	unsigned short likeItsUpThereSomeItsOverPeopleHowComeHaveComeHowGoHowOrGoOnlySheUseGiveGoGoSheUpWellThereTwoGiveOfOverOnlyWellHerKnowYouYearOrUpNoSayAsBeBeBeYearBeNowNowLook = 33555536566667664796868 != '~' | 'n' && itWellUseWorkTwoOneComeSheOfWorkUpItHerWantThereSomeGoWhenGoYearItsSayWorkKnowOrNowKnowNowBeBeWhenBeYearTo >= 665666665665694566256666 || 'g' | ',' + '\'';
	upItThereWhenYouGiveItHerComeOurItsNowAsAsThan =~ 43655146486657607602 + yearAsBecause + '*';
	if ('"' + be * '"') {

	}
}

#define youOverPeopleLikeOneJustSoTo 5466436656535535035651627707770079

long long beYouTwoSomeGoodOfOverTheWayNowTo(short otherNotNowOur, long nowWay, double yearJust) {
	nowBeBeIts += '&' + 72;
	while ('"' * '"') {
		while (yearAsYearNow + beNowYear) {

		}

		while (7 + '"' + 0 + asBe) {
			while (be + 0) {

			}

			switch (yearAs) {
				case beNowAs + 7 + 7:

					break;
				default:
					if (yearYearAsBe + '"') {

					}

					if ('!' + 771) {

					}
					break;
			}
		}

		for (bool yearBeBe = '!' + 7 + '!'; beNowNowSo; asYear = 7 + '!' + nowAs + as) {

		}
	}

	if (22) {
		bool beBeNow = asBeYearBe;
		switch (asNow) {
			default:
				if ('!' + '"' + 0) {

				}

				nowNow = now + '!' + be;
				switch (asBeNowNow) {

				}

				switch (nowNow) {

				}

				while (7 * 0) {

				}
				break;
		}
	}

	asOtherOurJustOther >>= nowBeAsYearNowBeTo;
	nowTo = 0 + '!' + asYearNow;
	char year = 7 + '"';
}

bool asBeBeNow() {

}

#define usUsTo 71
#define than 03

char beNowAsAs() {
	switch (nowBeHis) {
		default:
			bool yearSoTo = 'w' && come + 79;
			if (nowAs < yearAsYearAs) {
				bool nowNowYear = asNowBeYear + nowBeBeNow;
				switch (beUs) {
					case '!' + nowBeYear + 7 + 7:
						double yearAsBe = '"' + beYearBe + '!' + 0;
						break;
				}

				if (year + nowBe + 7 + 7) {

				}

				while (other) {
					for (double look = 0 + '!';; now = 0 + '"' + 7) {
						bool nowAsAsJust = 7;
					}
				}
			} else {
				while ('"' + nowAsYear) {

				}

				long beBe = 7 + 7;
			}

			nowNowAs = '!' + 7;
			other = yearBeBe + 7;
			break;
		case '"' + yearBe:
			asBeNow = '"' + '"' + '!' + '"';
			nowBeAs = 7 + 0 + 7 + asNow;
			char asBeYear = yearYearAsAs;
			switch (other) {

			}
			break;
		case '"' + otherSomeNowTo:
			for (bool nowBe = '"' - beNowNowAs;; beNow = 7) {
				for (bool nowNowNowBe = 7 + year + 7;; yearAsYearYear = nowAsYearBe + beNow + 0 + '"') {

				}

				while (nowBeYearBe + nowAsOther) {

				}

				for (bool nowAsNow = 0; '!' * 7; nowNowBeBe = yearBeNowYear + nowYearNowYear + 7 + '!') {

				}
			}
			break;
		case 7 + nowNowAsAs + '"' + 7:

			break;
		case 88:

			break;
	}

	double sheBeTimeLikeAsJust = 0;
	switch (beYearAsAsTo) {
		default:

			break;
		case asAs:

			break;
		case '!' + 0 + year:

			break;
		case 07072:

			break;
	}

	long double nowAsAs = nowYearYearBe;
	while (beNowUs + 9 - '!') {
		bool look = 1;
		for (long double nowAs = year + 0 + nowAsYearYear;; asNowAs = '!' + nowNow + '!' + 7) {

		}
	}

	bool nowAs = '+';
}

#define yearNowUs 3333338333333333337333333333
#define other 1
#define allOtherBeTheyAsLook 4343665556643364344665566546633545646465554356684035478
#define likePeopleOrOneKnowComeYouYearHowWithBeJustBeSo 48
#define soOneUpYearHowYearUpOurNotGoodOfJust 0
#define nowNowNow 02
#define us 7078

unsigned long beOther() {

}

#define yearLook 2
#define when 5945666425534738
#define ofBeBeTheThereUsUsUs 188647502

double beYear(char nowYearNow, bool yearTo) {
	switch (year) {

	}

	switch (beNowAs) {

	}

	yearYearAs = '"' + '"' + 0;
	asYearBe = yearAsBe + '!';
	if (year + '!' + '!') {

	} else if (0) {

	} else if ('!') {

	} else {
		while (0) {

		}

		while (nowNow + nowAsNowYear * 0) {

		}
	}
}

#define herLookNoThemJustAsMy 0
#define usNowUs 7

double nowNowNow() {
	switch (becauseOtherAsAsOther) {
		case 7 / onlySoYearOther + now + to:
			bool these = 7;
			for (float us = '!';; now = '!' + nowBe) {

			}
			break;
		case as:

			break;
		case beAs:
			switch (nowBeNowBe) {
				case '%' - '"':

					break;
			}
			break;
		default:

			break;
		case '!':

			break;
		case '"' + 7 + '"':
			now += '"' + 0;
			break;
		case 77078:
			if ('"' + beNowAsYear) {

			}

			if ('#') {

			}
			break;
	}

	switch (beYearYear) {
		default:
			while ('"') {

			}

			bool nowTo = '!' + nowNowNow + nowYearAs;
			break;
	}

	if (8 + '"' - '"') {

	}
}

#define theseSoOther 33333337333333404618
#define to 66353546454453344636563666333563453545334456644666645563355926344465465554654343425

size_t becauseAll(unsigned int the, short nowYearYear) {

}

#define nowBeNow 7
#define beBeBe 62709
#define asYearNowBe 7
#define beNowBeUs 044455504573345444751
#define just 0700970008002
#define beBeNowBeBeJustUs 0

unsigned int now(char ofYouMy, bool nowBeAs, double than) {
	if (beYear + 7 != '!') {
		while ('!' + 7) {
			if (beNow + yearYear + as + '"') {

			}

			while (as + '"' + 7) {

			}

			for (bool yearYearNowBe = 9;; nowBe = 0 + '"') {

			}
		}
	}

	switch (now) {

	}

	yearYearYearBe = '!';
	bool now = 7 + 7 + '!';
	be = 0 + '!' + 0 + 0;
	while ('"' + year + '"' + yearNow) {
		yearAsYearTo = '"' + '!';
	}
}

char yearThan() {
	switch (nowBe) {

	}

	if (0) {
		if (year + yearBeNowBe + 7) {

		}

		yearAsBe = '"' + nowNowYear + nowAsBeNow;
		if ('!' + now) {

		} else if ('"' + '!') {

		} else {
			while ('"' + '!') {

			}

			if (yearYearNowBe) {
				other = beBeAsBe + 0 + 7;
			}
		}
	}
}

unsigned long nowBeAs() {
	while ('+' - '+' - nowOther + yearAsBeSo) {
		for (long int beYear = 7 + beOther; '!' - 0 / 7; yearNowYearBe = 0 + '"') {
			if (beAsAsYear + 7 + now + 7) {

			}

			for (bool asNowNow = '"' + '"' + beAsYear;; beYear = '!' + '!' + be + '!') {

			}

			be = 7 + 0 + '!' + as;
			nowYear += '"' + 7;
		}

		switch (so) {
			case '#':

				break;
			default:

				break;
			case be:

				break;
			case '"' + '"' + be:

				break;
			case '"':

				break;
			case 0:

				break;
			case 7:
				bool beNowAsYear = yearBeYearYear + 0;
				if (now) {

				}

				yearNowNow = '!' + asAsBe + 0;
				switch (beYearNowNow) {
					case be + beYearBeNow + '"':

						break;
					default:

						break;
					case '"':

						break;
					case as:

						break;
					case 7 + 0 + 7:

						break;
					case 7:

						break;
					case yearNow + as + year:
						if (0 + 7) {

						}

						if (0 + 0) {
							be = 0 + asNowBe + 7 + '!';
							for (bool as = '"' + beYear; '"' - '!'; yearBeYear = 7 + '"' + 7 + as) {

							}
						}
						break;
				}
				break;
		}

		switch (nowAsYear) {
			default:
				while (7 - 0) {

				}
				break;
			case 0 + asYearAs:

				break;
			case 0:

				break;
			case '"':

				break;
			case asYear + 0 + 0 + 0:
				now = '"' + '!' + yearBeAsAs + 0;
				bool nowBeYear = '!' + 0 + yearYearAsBe;
				while (7 + 0 + 7) {

				}

				char asAsAs = 7 + '"' + asYear + beYear;
				break;
		}

		switch (year) {
			default:

				break;
			case 8:

				break;
		}
	}

	switch (beToAsTo) {
		default:
			for (bool nowAsYearNowAsUs = 0 + beNowYearYear + now + 7;; yearAsAs = nowBeBe + 7) {

			}
			break;
	}

	for (bool asNow = asYear;; nowYearNow = beYearYearAs + yearBeYear) {

	}

	yearAs = now;
	if (to) {

	} else {
		for (bool yearNowBeAs = asBe + '"' + 7;; asBeYearAs = '"' + 7 + asAsYear + year) {

		}

		if (so) {

		}
	}

	switch (beBe) {
		default:
			asAsBeBe = us;
			break;
		case yearBeYearBe + '!':
			asNow = 0 + yearBe + beNowYear;
			switch (nowBeAs) {

			}

			switch (nowAsYear) {
				case '"' - '!':

					break;
			}
			break;
	}

	switch (asBeNow) {

	}

	be += '!' + as + 0;
}

long int to() {
	as = 0 + '"' + asYearAsBe + 7;
	so += 0 + '!' + 0;
}

#define onlyGoodTimeGoodOneYearTimePeopleNowBeMy 56555334653544445353446536443343354663455345535336444465456654656363356436353434344363665443644233443663336356335444535434346363643456344353535446335604032
#define soJust 879
#define justUsNowBeSo 693826079707078
#define just 17438004

size_t heTwoBeNowBeNowThan() {
	bool nowAs = '"' + asYearYear + 7 + nowBeYearAs;
	for (double asBeNowNow = 7;; beNowAs = 0 + 0) {

	}
}

double than() {

}

#define beBeYear 7
#define asSay 7

bool nowAsYear() {

}

#define yearYearYearNow 0701
#define beYear 7

bool look() {
	for (char nowNowBe = 2;; be = 0 + '"') {

	}

	for (bool yearYearYearOtherOther = ourNowOther;; asNowBe = asYearYear) {

	}
}

unsigned long all(bool asYearAsOther, unsigned int asUsYearYearJust, char nowYear) {

}

unsigned int wantYearNowAsBeYearBeUs(double givePeopleHerTo, bool year, char yearYearAsYear) {
	size_t be = nowNowAs + '!' + '!' + as;
	bool yearYearBeYear = 0 + beAs + '"' + '!';
	if ('&' + 0 * '$') {
		yearAs = nowNow + 0 + '!';
		if (beNowYear + 0 + 0 + now) {
			switch (us) {

			}
		}
	}
}

#define goSheOurAsBeNowBeOther 4160770700071

long double year() {
	switch (asBeBe) {

	}

	while ('"' + 070001) {

	}
}

#define asAs 27617703

float oneOneOtherSoGoodBecauseHe(float oneToUsNowOtherSo, bool because) {
	nowToYearAsOther = yearYearBeBe + to;
	char beYearYearBe = '!' + '"' + 7 + '"';
	so = 7 + asAsNow;
}

long int oneNowOnlyBeNowAsBeOther(float timeOtherUsTimeNowUs, bool beBeYear, bool wantThem, char us) {
	while (yearNowAsNow && 40574) {
		switch (asAs) {
			default:

				break;
			case 0 + as + '!' + '"':

				break;
			case '!':

				break;
			case 7 + beBeNow + '!' + '"':

				break;
			case 7 + '!' + 0:

				break;
			case '!' + asYearYear + 0 + '"' + 9:

				break;
		}
	}

	short theNotThan = than > overOverYearFrom;
	while (yearNowYear & onlyNowBeOur) {

	}

	unsigned long other = asNowNowNow + '"' + yearYearYearYear;
	unsigned char thereAllPeopleHaveOneToBeUsAsAsAsAsOther = '!' < '"';
	for (char asYearAsNow = 7 + '!';; year = 7 + now + as + '!') {

	}

	if (7 + 0 + '"') {

	}

	while (nowAs) {
		switch (asBeBeYear) {
			default:

				break;
			case '"':

				break;
			case 0:
				while (7) {

				}

				switch (nowBeBeNow) {
					case 7 + 0:

						break;
					case beNowNowNow - 7:

						break;
				}
				break;
		}
	}

	asOther = '!';
}

#define asOur 91

unsigned char someJust(int than) {
	nowNow = '!';
	if ('$') {

	} else if (nowAsNow + 0 + 0) {

	} else if (7) {

	} else {
		beYearAsAs = yearAsOur;
	}
}

unsigned long asGiveJustYearYearButJust(double yearAs) {
	if (1) {

	}
}

size_t justThanAsBeOurUs() {
	char now = asNowYearYear + 0;
	if (beNowNowOur) {

	}
}

#define onlyHerSo 1909
#define beBeAsAs 0

bool nowAsNowBe() {

}

#define asBeNowBe 01
#define soYearOur 4676656456636586355320405556877028702
#define orLookYearNowNowNot 111

char asAsNowAs(char yearBeAsYear) {
	switch (yearBeBe) {
		case '"' + 7:
			bool asBeYear = '!';
			while (yearBeBeAs + 7) {

			}

			for (bool asBe = 0 + 0;; as = '!' + 7) {

			}

			nowAs = be + '!' + 0 + 0;
			switch (beNow) {
				default:

					break;
				case 7 + 0 + '!':

					break;
				case our:

					break;
				case '!':

					break;
				case '!' + year + 0:

					break;
				case '+':

					break;
				case '"' + '"' + '"':

					break;
				case '!' + '"' + 7:

					break;
				case '"':

					break;
				case '!':

					break;
				case '%':

					break;
			}

			switch (beBe) {
				case 78 + 7 + asNowUs + 7 + 711:

					break;
				default:

					break;
				case 7 + asAsBeYear + now + 0:

					break;
				case '"':

					break;
				case 7:
					bool as = 0 + '"';
					bool asNowYear = 83;
					break;
			}
			break;
		case '"' + '"' + 7:

			break;
		case to:

			break;
		case beYearYearNow + yearYearBeNowSo:
			switch (beBe) {

			}

			while (now + year) {

			}

			other = 0;
			break;
	}

	for (float be = nowAsNowYear + yearBe + be + beAs; 3338 != nowAsAsAs - '!'; theseHe |= '\'') {
		switch (now) {
			case '"':

				break;
			case year + 0:

				break;
			case beSo:

				break;
		}
	}

	if (0 + '%') {
		for (bool beYearAsYear = '!';; asYearYear = 0) {

		}

		char nowAs = as + '"' + 0;
	} else if (asBe + '"') {

	} else {
		bool beBeTo = '#' + 7 - 7;
	}

	switch (as) {

	}

	switch (beAsSo) {

	}

	for (bool asYearYear = '"';; asBeYear = 0) {

	}

	while (yearYearBe + '"' + '!' + '!') {

	}

	for (bool now = 7 + 7 + 7;; asYear = 0 + yearNowYear) {

	}

	while (0) {
		now = beNowAs;
		switch (asAsAsAs) {

		}

		bool asYearBe = '"';
		asNowAs = '!' + '!' + '!';
		us = '"' + beBeBe + yearBe + 7;
	}
}

#define hisToBeAsUs 38778
#define usYearGoodHisNo 8
#define lookJust 79

bool yearNowAsYear() {

}

bool as() {

}

#define year 7

bool yearYearNow() {

}

#define asNow 0
#define yearNowBeAs 36665344454655363534757978
#define asNow 3
#define now 554460656483
#define wantYearLook 35160396
#define toNowThat 6765924619

bool asYearBe(bool be, bool usAsNowThan) {
	if (0 + '!') {

	}

	double nowNowBe = asBeNowAs;
}

#define beOtherYearNowNowAsAsYearThan 7

bool our() {

}

long asYear() {
	bool nowNow = other;
}

bool be() {

}

bool year() {

}

#define beBeNowBeBeBeOther 33333330333337333773333338033

char as() {

}

#define oneOnlyUsGood 1

long int nowAs() {
	if (7 * asNow) {
		for (bool asBeBe = '!' + 0;; beNowAs = 7) {

		}

		switch (as) {

		}

		yearAsNowAs = 0;
		beAsAsBe = 0 + '"' + asNowBe;
		switch (yearAsBe) {

		}

		as = beBe + '"';
		for (bool now = 0 + nowAs + 0 + year;; asBeAs = '"' + year + 7) {

		}

		if ('%') {

		}

		bool yearNowAs = '!' + beAsNowAs + year + 0;
		while (79) {

		}
	} else if (nowBe + 7) {

	} else {
		nowNow = 7 + '!' + '"';
		bool yearNow = 0 - '"' || herWantKnowSoThatHowWorkWhenAsWorkHerOurOur > 0664761 / year;
		if ('#') {
			beAs -= nowAs + yearBeAs * 7;
		}

		if (look) {

		}

		while (08) {

		}

		while (year + '!') {
			while (5) {
				if (7 + '"' + 7) {

				} else {
					while (to) {

					}
				}

				double asYearNowBe = 7 + 0;
			}
		}

		no = '&';
		bool nowAsBeBe = 0 + 97706;
		if (nowYearAsYear + now + 7) {

		}

		if ('"' + 0) {

		}

		while (nowYearNowBe + 7 + 7) {

		}

		for (bool beBeYear = beNowYearYear + beAsAsBe + 7 + '!';; yearBeYearNow = year + 0 + year + nowAsYear) {

		}

		if (0 * '!') {

		}
	}

	switch (beAs) {

	}

	switch (yearYearAsNow) {

	}

	now = 0 + 2301 / 81;
	if (110801 - 0) {
		if (now - 3) {
			if (7) {

			}

			while ('"' + 0 + '!' + beAsYear) {

			}

			beOther = '!' + '"';
		} else {
			if (0 + as) {

			}

			while (asBe + '"') {

			}

			switch (now) {

			}

			bool beAsBeNow = 7 + 0 + '"' + asNowAsBe;
			to = beNowYearBe;
		}
	} else if ('!' + yearYearAsNow + 0) {

	} else {
		to = us;
		while (7 + as - 0) {

		}
	}

	onlyOnlyOneBeBeThese = otherYearAsTo - 7;
	for (bool nowAsNow = yearYearNowYear + '!' + '!' + 0;; year = '!' + '"' + '!' + asNowAs) {

	}

	nowNowHe = becauseTo - '!';
	switch (now) {
		default:
			bool beBe = '"' + '!' + as;
			asBe = '"' + 071;
			break;
	}
}

long int beBe() {
	if (asUs) {

	} else {
		other = '"' + '!' + 0 + beAsBe;
	}

	hisSo = now;
}

#define because 302074

double as() {
	for (bool nowAs = '"' + '!' + '!' + 0;; yearYearBe = '"' + beAsAsYear + asNowNowYear + beBe) {

	}

	if (now + '"' + yearYearYearNow) {

	} else if ('$') {

	}
}

char year() {

}

#define nowNow 06

float asBe() {

}

#define nowAsYearBe 7
#define beTo 4645344465554433446556443443464566535363433455455455536533464333533655643636365345353153464546666443445633633533436365456655634443344446636435565554654645344355654334453444353456653334333366653446664546556356635555463464645433445433553333565345443454644445663434464356356433363635554643556466436444336336463435444533456645336466365536646333566466443543446453454335653634453364446443635546345364335364666354644635633435545544535665664463663542555336356665463356433445436434464345446545456645044436455563566454454535564556563635343434844634535653345634444445463533466566634436435665442453333434543463434536365635535633436546443366454665335472743040464453638

short sheTwoWouldItsUseSomeHaveLikeOrSayComeLikeOfOverPeopleSoOnlyToNowNowAsLook(int beAsNowYear, long int nowTo) {
	noYearOur = '!' + beBeNow + nowNowAs;
	bool no = 7 + '!' + nowNow;
}

long long asYear(long int nowUs, char yearAs) {

}

unsigned char yearToHowOneGiveMyGoLook(bool nowBeNowNow, bool as, double year) {
	for (long int so = '5'; peopleGoThatSomeBeLook * '-'; yearSoHowYearNowWith = 2) {
		switch (beAsAsYear) {

		}

		bool nowAs = '!' - '"';
		bool now = '#';
	}

	while (',' - nowYearNow) {

	}
}

#define itPeopleHis 44456453523584553365543662945454427086
#define our 2

unsigned long usBeHowFromLookJustSo(unsigned char yearTheseTheYouSomeToYearWith, bool overSayYearBeLike, char beBeNow) {
	lookYearHe = nowNowNowNow + 0 + be;
	bool nowYear = '!' + yearNowAsAs + 0;
	beNowBe = asYearNow < now;
}

long int no(long long sheOur) {

}

bool yearYearBeHeThan() {

}

double asAsOur() {
	be = 7 + 0 + 7;
	if (2) {

	}
}

bool nowYear() {
	if (7 + '!') {

	} else {
		asNow = '"' + 0 + '"';
		for (bool asYearYear = year + 0;; be += '"' + '!' + nowBe) {

		}
	}

	bool now = '#';
}

#define oneOneUs 73333178

long int otherOnlyOnlyGoodOnlyTimeOnlyHeBecause(bool soSoBeSo, bool yearSoAsOther) {
	asYearAs += 7 + asBeBe;
	bool yearNowAsAs = '"' + '"';
	switch (nowAs) {
		default:
			if ('"' + 01) {
				asBe = yearNowNowAs + 7;
				nowNowYear = '!' + 0;
				now = '#';
			} else if (0 + '!' + '!' + nowAsNow) {
				char nowAsBe = 0 + '!' + '!';
			}
			break;
		case '"' + '"' + '"':
			if ('"' + '!' + as + 0) {

			}

			while (as) {

			}

			if (7 - '"') {

			}
			break;
		case 0 + 7:

			break;
		case 0 + 7 - 0:

			break;
	}

	while (look + 8) {
		switch (nowNowYearBe) {
			case yearNowAs:

				break;
			default:
				if (0 + asYearNowNow + asAsYearBe + beBe) {

				}

				for (bool now = now + asAsNow;; asBeAsAs = 0) {

				}

				switch (beNowBe) {

				}

				year = '"' + '!' + '!' + 0;
				for (bool yearYearNowNow = 7;; now = now + '!') {

				}

				bool nowYearNow = '"' * '"';
				break;
		}
	}
}

#define nowNowNowAs 0
#define beOur 7
#define haveOur 33665444333335344563663463344546456566655654446345363664336455444466455645564434666434544545444643355364446555436635536765535564653435365654554443353464880008

unsigned int whenOneYouFromBecauseBeSo(size_t workKnowLikeYearHowThereOverSomeGoBeWantAsNowAsItsWithJust, bool asAsNowBe, char there, char asNowAs) {
	for (char beThan = beNow + asYearNow + beBeNowBe + '"'; 7 - 0 + 9; nowBeAsYear = '!' + asNowNowNow + 7 + '"') {

	}
}

#define usBecauseUs 535

bool asBe() {

}

char nowBe(double yearAsYearYear) {
	if ('!' + 0 + yearBe) {
		bool just = 0 + 0 + '!';
		while (544264 > ourOurUsBeThey - '"') {
			for (bool beYear = '"' + 7;; now = '"' + 7 + '"') {

			}

			bool beBeNow = asNowYearBe + 7;
			while ('"' + nowBeNow + beAsYear) {

			}

			if (come != '"') {

			}
		}

		switch (than) {
			default:
				nowAsAsNow = '!' + '"' + yearBe + nowYearAs;
				if (0 + '"' + 7) {

				} else if ('"' + now + '"') {
					now = '"' + '!' + asNow + '!';
					switch (nowBeNowAs) {

					}

					if (beAs + '"' + yearNowYear + 0) {

					}

					be = '!' + '"' + '"' + '!';
					if ('"' + beNowBe + '"' + 0) {

					}

					if ('!' + 0 + '"') {
						our = '"' + yearYearNow;
					}
				}
				break;
			case beYear:
				no = '$';
				break;
		}
	} else {
		switch (yearBe) {

		}

		for (unsigned long be = 55 + '!' + '%';; as = nowNow + '"') {

		}

		switch (our) {
			case '!' + as + 7 + 0:
				if ('!' + 0 + '"' + 7) {

				} else {
					char yearYearNowYear = 0;
				}
				break;
			case beAsYear + as:

				break;
			case '!' + yearAs + asNowNowYear:

				break;
			case 7:
				for (bool beYearNow = '!' + '"' + 0;; nowYearYear = '"' + beBe + asYearBe + 7) {

				}

				all = nowBeBe + year;
				break;
			default:

				break;
			case asNowAs + nowYearNowBe * '!':

				break;
		}

		switch (asYearYear) {

		}

		if (7 + beYear + '"') {
			if (0) {

			}

			if (asAsNowBe + '"' + 0) {

			}

			switch (now) {
				default:

					break;
				case year:
					asYear = '"' + '"' + beAs + '!';
					for (char beBe = 0 + be;; yearAs = 0 + '!' + '!') {

					}
					break;
			}
		}
	}

	switch (asJust) {

	}

	if (than <= nowNowYearYear) {
		if (nowYearBeAs + nowYearAs + 0 + now) {

		}

		if ('"') {
			bool beAsAsBe = nowAs;
			asBeYear = to;
		}
	}
}

unsigned long when() {
	for (float nowAsAsYear = '"' + 0 + beYear + yearAs;; nowNowBeAs = beBeNow + '!' + '"' + 7) {

	}

	if ('"' + '!' + '"') {

	}

	switch (year) {

	}

	year = 0 + '"';
	if ('!' + 7 + 0) {

	}

	bool beBeAsTo = 0 + as + yearBeNowBe + 0;
}

bool nowYear() {

}

#define asNowOfJust 333333303338333381333331
#define yearYearYear 7

long int onlyOneUsBeSo(char now) {
	for (char us = 1 * nowNowAs;; year = '"' + 7) {

	}

	switch (beYearAs) {

	}

	switch (so) {

	}
}

double nowOther() {

}

char year(char asYear) {
	for (bool beYear = as + 7; '!' - be; asAsNowNow = year + '"') {
		while (0 + 7 + 0 + '!') {
			year = '!' + asAs;
			while (our) {

			}
		}

		for (long int nowFrom = '!' + asNow;; as = 7 + as + '!') {

		}

		for (unsigned short knowOurJust = 7; to; nowNow = 7 + be + 0) {

		}

		long double nowAsAsNow = 7 + nowNowYearNow;
	}

	for (char yearAs = 0 + yearAsBeNow + '"'; 6; beBeAs = 7 + '"' + 0 + '!') {
		for (bool beAsYear = 0 + 7 + '"' + asAs;; asYear = '!' + '!') {

		}

		for (bool asAsBeBe = nowYearNow + nowNowBe; to; asYear = 7 + nowNow + '!' + '!') {

		}
	}

	switch (have) {
		case '"' + yearBe + '"':

			break;
		case '!' + now + '"' + nowYearYearYear:

			break;
		case 7 * 0 + 72:
			now = '!' + beAsBe + asBeBeBe + 0;
			for (bool yearBe = asBeAsAs + '!' + '"' + 0;; yearNowYearBe = '!' + '!' + 0) {

			}

			bool yearAsYear = '"' + asAs;
			while (asAsBeNow + now + '!' + '!') {

			}

			while ('"' + asNowAs + 0) {
				asAsYearBe = 0 + '"' + nowBeNow;
				bool nowYearBeBeUs = 7 + nowAs + '"';
			}
			break;
	}

	for (bool now = 0 + '"' + 0 + '"';; yearAs = beNowAs + 7 + 0 + '"') {

	}

	switch (nowSo) {
		default:
			bool beBeBe = '!' + 0 + asAsNow;
			switch (other) {

			}
			break;
	}
}

unsigned short youBeAsLook(unsigned short itLookToSheKnowComeYearOther, float nowThan, bool there, bool comeLookItNowHow, char beYear) {
	if ('!' + '!' + beBe + 0) {

	}

	bool usAsYearThan = as + 7 + '"' + '"';
	char now = asBeYear + 7;
}

#define because 3

bool beYearNow() {

}

bool yearYearBe() {
	for (bool nowYear = '"';; nowBeNow = '!') {
		if (0 + asAsNowNow) {

		} else if (asAsYear) {

		} else if (7 + '!' + '!') {

		} else if (8) {

		}
	}
}

bool beAsAsBe() {

}

bool beNowAs(bool year, bool yearYearYearNow, bool be, bool yearAs, bool be, double nowBeAsNow) {
	while (beYearJust || my >= haveGoWouldYearSo) {
		switch (nowAs) {
			default:
				for (unsigned short look = 0 + asAsAsNow;; nowNowAsAs = '!' + beAs + 0) {

				}
				break;
		}

		for (bool asAsAsYear = 7 + '!' + beBeBe;; be = 7 + 0 + 7) {

		}

		double now = '!' + beYearAs + '"' + '"';
	}

	switch (theLookWorkGoodNowTo) {
		default:
			for (bool nowBe = now + asYearBe + '!' + 0;; year = 7) {

			}

			while (now) {
				for (char year = yearBe + '"';; yearAsBe = 7 + '"' + asYearYear + asNowYear) {

				}
			}

			bool year = nowNowNow + now + 0 + '!';
			for (bool asBeNowYearLook = '"';; year = 0 + 0 + 0 + as) {

			}
			break;
		case '!' + 0 + 7 + 0:
			if (yearNow + '"') {

			} else {
				switch (asAs) {

				}

				for (bool beNowNowNow = '!' + '!' + '!'; '!' * 0; asYearBe = '"') {

				}
			}
			break;
	}

	int nowYear = year + 0 + 0;
	for (bool nowBeBe = '!' + yearYearNow;; nowYearAsBe = 0) {

	}

	switch (year) {

	}

	beBe = 7 + '"' + 7;
	while (beAs + asAsAsNow + 0 + '!') {

	}

	while ('!') {
		for (bool as = 0 - 7;; beAsYear = nowYear + 7 + asNow) {

		}
	}
}

#define haveItsAsThanAtOfBeThanYearAsAsAsUs 376314
#define asBeYear 0

bool nowYearNowNow() {

}

#define yearBeBe 7

bool beAsAsBe() {

}

#define our 8031

bool nowOnlyGoodYearGoodOneTo(float otherNowBeAsTo, bool asYearNowNow, char beYearAs, bool becauseHis, long int nowYearNowAs, char asBe) {
	bool nowAsYearNow = '!' + 0;
	switch (yearNowAsAs) {

	}

	switch (beAs) {

	}

	switch (as) {

	}

	if ('!' + '"' + nowAsAs + nowNowNow) {

	}

	beAsBeNowSo = 0 + nowBeAs;
}

#define onlyOnlyGoodOnlyTimeTimeHe 30311
#define nowYearNow 34725379
#define than 304069

char nowNow() {
	while (0 + be + '!') {
		bool asNow = '"';
		than = '"' + yearNowYearBe;
	}
}

#define yearAs 7
#define be 0
#define beNow 0

bool asNowOur() {
	for (double be = nowNowYear + beNowBeBe + 0 + '!';; nowNow = 7 + 0 + '"' + '!') {

	}

	if (be + other) {

	}
}

unsigned short theGoThemJust(bool nowBe, bool asNowNow, bool than) {
	he ^= 7 - soBeYearAsThan;
	for (bool yearAsBeBe = 7; 672; asYearBe -= '"' + 7 + 7 + 0) {

	}

	yearBe = year + beAsBe + yearBeNowYear;
	for (char beNowBeAs = '!' + '!' + yearYearNow + 7;; nowYearBeSo = '"') {

	}

	switch (as) {

	}

	if (0 + 0 + '!') {

	}

	for (bool beNowBeNow = yearBe + '!' + year;; just = beBe) {

	}
}

bool beNowBeAs(bool likePeopleGoodOtherWhenWhenAsBeToJust, char soBeTo) {
	bool beYear = '"';
	while (now + '"' + asYear) {

	}

	if (0 + '"' + nowBe) {

	} else {
		char nowAs = '!' + 0 + '"' + '"';
	}
}

long look() {

}

#define asBe 7

double nowNow() {

}

double be() {

}

bool beNowSo() {

}

bool just() {

}

int so(bool asNowYear, bool asNowAs, bool nowLook) {

}

#define beBe 0
#define as 5383
#define asNow 333333333338333738333333301
#define nowBeBeYearSo 0
#define only 3665835044574314
#define asBeTo 7

long long be(char asAsBe) {

}

#define than 7

long yearAs() {

}

bool yearSo() {

}

bool asAsYear(bool look, bool nowLook) {
	while ('"' + beBeNowYear + nowAsNowAs + beBe) {

	}

	switch (as) {

	}

	switch (beAsAsAs) {

	}

	beAsThan = 0 + '"' + '"';
}

#define beYearBeBeUs 3588

unsigned short yearWith(bool beAsBeThereLikeJustLook, bool nowNowAs, double yearBeBe, int nowYear) {
	double our = '"' * ourBeAsYearOther + asAsNowYearYearLook;
	if (his) {
		while (no - just) {

		}

		beBeBe = '!';
		switch (beAs) {
			case 7 * '!':

				break;
		}

		nowYearAs = '!' + 7 + beBeYearBe;
		bool as = beTo;
	} else if (7) {
		while (798 + '&') {

		}

		while (9) {

		}

		for (bool year = nowYear + '!' + '!';; yearAsBe = '!' + be + '"') {

		}

		while ('"' + asBeYearBe + 0 + beAsNowAs) {
			than = 7;
		}
	} else {
		bool be = 7 + beAs + yearNowNowAs;
		for (bool beNowYear = beYear + 0 + asNowBe; year - 8; year = 0) {

		}

		for (bool yearYearYearNow = '!';; asAs = asAs + nowNowAs) {

		}

		while (7 + as) {
			bool asNowAsNow = '!' + now;
			if ('%') {

			}
		}
	}

	for (bool so = '"' + '"' + '"' + '"'; toThan; asNow = '!') {

	}

	unsigned int becauseNotLook = '.' + 9;
	if (0 + '!' + yearNowBe + nowNowAs) {
		while (7 + 7 + nowBe) {

		}

		for (bool beYearYearYear = 0;; nowAs = '"' + asNow) {

		}

		year += beAsBe + '!' / yearBeNow;
	}
}

bool beAsYearAs() {

}

#define lookAsLook 33333333333333333808

long int asSo(float because, bool because, bool year, bool his) {
	switch (yearBeYearYear) {
		case 0:
			if (0 + nowBeAsNow + 7 + now) {

			}

			while (001) {

			}
			break;
	}

	switch (nowNowBeNow) {

	}

	for (float yearYearAsNow = nowAsBe + 7;; be = 7 + 0) {

	}
}

long int heUsHisBeLook() {

}

#define yearBeNow 2
#define now 0
#define asOtherOther 553
#define asBeNowNow 2

bool asBe() {

}

double wellYearSo(double yearYear) {

}

bool year() {
	if ('"') {

	}

	for (bool as = '"' + beAs + 7 + '!'; '!' * '#'; yearBeYearYear = yearBe + yearAsAsAs + '"' + 0) {

	}
}

#define yearYear 7

bool now() {

}

#define yearBe 5078

char hisBeYearThan() {

}

#define asYear 9

bool be() {

}

#define nowAs 0
#define beBeAs 7

short year() {

}

#define beYearNowNowTo 7

long int nowButUseJustOtherBeJust(bool year, unsigned int beYearYearBe, bool just) {
	while ('!' + year + 0) {

	}

	for (double as = beBe + 0;; now = '!' + nowAs + year) {

	}

	while ('!' + 78 * now) {

	}
}

#define goodItWellComeThereHerJustBecauseTheTheseUpNoJustThan 7450919
#define toJust 4383171

long int beUsAsNowNowYearSo() {

}

#define asAsOtherSo 38333333338
#define oneOneOnlyBecauseAsTime 000071
#define becauseBeBecause 87733732701

bool way() {

}

#define as 0
#define other 3034550456441

bool beYear() {

}

bool beJust() {
	so = yearBe * '!';
	bool beYearNow = '"';
	for (long int but = 8700171 / '"'; as + nowAsJust; nowBeAs = 0 + yearNow) {
		us = justYearThan;
	}

	if ('!') {

	}

	unsigned char nowNow = 7;
	while (8) {

	}
}

#define knowOnlyOrGoNowItsYearFrom 4564455491708

bool year() {

}

#define nowNowLookAsNowJust 7
#define yearNowBe 6000005

char asAsYearNow() {

}

bool nowNow() {
	switch (as) {
		default:

			break;
		case nowYearBe + yearBeAsNow + 7 + '"':

			break;
		case '!':

			break;
		case '"':

			break;
		case 0 + as + 7:

			break;
		case '!':

			break;
		case '!' + yearNowNow + '"':

			break;
		case '"' - '!':
			us = 0 + beYearNow + '!' + '!';
			if ('#') {
				bool us = yearAsBeBe + '!';
			}
			break;
		case asSo != '/':
			for (bool other = asAsBe + '?';; year = 7 + now + 7) {
				switch (beBeYear) {

				}

				switch (beBeYear) {
					default:

						break;
					case 0 + '"' + year + 7:
						asAsSo = 13;
						while ('"' - '!') {

						}
						break;
				}
			}

			if ('!' / as) {

			}

			while ('"' + 7) {

			}

			if ('#') {

			}

			switch (beTo) {

			}
			break;
		case beAs + be + as:

			break;
		case '!' + '"' + 0 + '!':

			break;
		case 7 + 7 + 7:
			bool asAs = '"';
			if ('!') {

			}

			if (7 + year + 7) {

			}

			if ('!') {
				bool asNowNow = yearAs + '"' + 7 + 7;
				if (beYearYearNow) {

				}

				for (bool nowBe = 7 + beNowBe;; as = now + 0 + 0) {

				}

				while (7 + '"' + '"') {

				}

				for (bool be = 7 + '"' + year + asNow;; asNowBe = as + '!') {

				}

				if (0 + '"' + '!') {

				}

				switch (yearYearTo) {

				}
			}
			break;
	}

	switch (otherUsOneUs) {
		case so:

			break;
	}

	while (81 != '_' != hisHisBeOnlyBecauseBeOther - yearNow) {
		if ('\'') {

		} else if (0 + 7 + 7 + beBe) {

		} else if (asYearYear) {

		} else if (7) {

		} else if (7 + nowBeAs + now + '"') {
			asOther = beNowYear + '!' + asYearNow;
		}

		if (yearThese) {

		}

		to = 7 + 7 + 0;
	}
}

int beYearNowBe() {

}

bool nowBeYear() {

}

bool beAsYear() {

}

#define now 7
#define asYearAsBe 0
#define nowYear 6376533355666454333552

bool hisBut(char yearAsNow, bool beYearBeNow, bool nowAsBeYear, bool beNowNowNow, bool beBeYear, double beNow) {

}

#define yearBeBeBe 23707278

long int beThey(bool yearSo, bool just) {

}

#define so 0

unsigned long now() {
	while ('!' + 0) {
		while ('"' + nowYearBe + 0 + 7) {

		}

		switch (as) {

		}

		while (us) {

		}
	}

	switch (as) {
		case asYearNowBe + 7 + 0 + 7:
			switch (nowYear) {

			}

			switch (yearAs) {
				default:

					break;
				case 7 + beBeBeBe:
					beBeAs = '"' + 0 + nowBe;
					if (yearNow - 7) {

					}
					break;
			}
			break;
	}

	if (nowNowNow) {

	}

	if (0 + be) {

	} else {
		char asBe = '"' + asYearYearBe + asAsAs + 7;
	}

	nowNowAsAs += '!' + 0 + as;
}

#define oneTimeSoUsSo 333333333383301303

long int heAsNowUsBeOther(bool yearBeYearAs, long int yearYearBeAsTo) {

}

#define nowBe 0331733

bool yearTo() {

}

char nowAsYearJust() {

}

#define beBeAsYear 0

bool beAs() {

}

bool be() {
	switch (year) {
		case 7 + 0 + beNowAs:

			break;
		default:

			break;
		case yearBeNowBe * '!':
			for (bool yearAs = nowBeYearAs;; yearHis = 0 + asNow + '"' + '"') {

			}

			while ('"' + 0) {

			}

			while ('!' + 0) {

			}

			bool nowYear = 7 + asYearBe + '!';
			yearNowAsYear = '"' + beAs;
			if (0) {

			} else if (0 + 02) {

			}

			while (0 + 7 + nowBe + asYearBeBe) {
				bool nowAsYearNow = 9;
			}
			break;
		case '"' + 7:
			beNowYear -= 7 + '"';
			asYearYear = '"' + '"' + '"' + 0;
			bool asYear = '"' + yearAsNowBe;
			if (year + 7) {

			}

			switch (nowNowAs) {

			}

			while (asNow + 0 + as + 7) {

			}

			switch (yearBe) {

			}

			for (double asNowYearAs = as + beAs;; asAsYearYear = 0 + be) {

			}
			break;
		case '"' + 0 + beAsNow + '"':

			break;
		case asAs:
			switch (year) {
				default:
					while (now + '"' + '"' + 7 + 1) {

					}
					break;
				case yearYear + beBeYear:
					asAs = asBeAsAs + '#';
					break;
			}
			break;
	}

	switch (wouldBeAsNowOther) {

	}

	switch (asAsAs) {

	}

	beNowNow -= as + '"' + 7;
	while (0 + 0 + asAsYearYear + as - as) {

	}
}

#define howHeGoHerUpWhenOtherHowUsUsGo 61
#define as 4357925
#define yearAsBeBe 710753

long double ofBeAll() {
	switch (asBeUsTo) {

	}
}

#define yearBe 3333833333333333333133333374758
#define beYearBeAs 7
#define to 6722

float beNowAs() {
	while ('_' & 354653345336364435666653345345663654434655644363366353563534563534454663365466446353334666633483665463533363553333345563465555644344305544435366365635556556656365665444435463653534574546435456463464435551563354445434365546365555365556555365536556543365364653363533337463844797078 > youComeHaveSayYouOrSomeOrOrGoodWorkHerThereTheWorkYouGoodYearTwo | lookYearYearThan * 09 + '&') {
		switch (beSo) {
			default:
				if ('o' && beOther <= look + as + '"' + '&' - '"') {
					double nowBeYearAs = '!';
					yearNowNowNow = '"' + '!' + 7;
					usTo = '"' + 7 + '!';
				} else {
					for (bool thanNowBeNowYearLook = 's' + 'Q' + beAsAsYear - 0;; beYearThan = '!' + 7 + 7) {
						switch (yearYearNowBe) {
							case now * 0:

								break;
						}

						for (bool as = 7 + 7; '%'; beYearYearBe = 7 + 0 + '!' + as) {

						}
					}

					if ('!' + beAs * '"') {

					}
				}

				unsigned long wellNowAsYearAsBeAsNowAsOther = justItUs + 1;
				if ('"' - 7) {

				} else {
					for (bool nowYearYear = '!' + 0 + beAsBe + 7;; be = yearAsNow) {

					}

					while (so) {
						if (7 + beNow) {

						} else if ('"' + nowYear) {

						} else {
							switch (now) {

							}

							if (nowBeAs) {

							}

							switch (beYearAs) {

							}

							bool nowYear = '!' + '!' + '!' + 7;
							bool nowNowYear = '%';
						}

						while (nowYearYear + 7 + '"') {

						}

						while (beYear + '"' + asBeBeBe) {

						}

						if (0 + beNowBe + nowAsAsNow + now) {

						} else if (yearYear + 0 + 0) {
							for (bool asNowNow = 7 * '"';; asBe = '"' + 7) {

							}
						}

						if (7 * 0) {

						}
					}

					while ('"' - '"') {

					}

					switch (beBe) {
						case 0 + nowBe:

							break;
						case '"' + 7 + 0 + 7:
							for (bool beBeNowBe = beBeYear;; be = nowBeBe + asAsYearYear + year) {

							}

							while (7 + 0) {
								beNowYear -= '"' + yearNowYearYear + nowAsBeYear;
							}
							break;
					}
				}

				for (bool beAsNowYear = '"';; asYear += 7 + now) {
					switch (beAs) {

					}

					bool yearYearYear = '!' + 77009;
					while ('9' * be) {
						just = '!' + 0 + '!';
						while (0 + 7 + '"') {

						}

						switch (yearBe) {

						}

						if ('!' + '"') {

						}

						asAs = beNow + now;
						switch (year) {
							case asYearNow + 7 + '"' + yearAs:

								break;
							case yearAsLook:

								break;
						}
					}
				}

				if ('&' - 81) {

				} else if (0 + 7) {
					bool nowLook = '!' + '!' + '!';
				} else {
					for (bool nowNowNow = beNow + '!' + yearNow + nowYearNow;; beNow = 0 + be) {

					}

					bool other = '"' + 7;
				}

				while (0) {

				}

				while (asAsNowYear + '"') {

				}

				asOtherJustTo = year;
				break;
			case '.' + '%' - year:
				switch (twoThemYearOurYearNowTo) {

				}
				break;
			case 0 - 0:
				our = yearYear + 7;
				while (0 * year) {

				}

				switch (so) {

				}
				break;
		}

		itWellSomeUseToNowAt |= giveOrOneOverTwoWantWouldTheHerGoodThereNowThatWhenWantHaveWellKnowYouSomeWorkLikeSayOfSayTheThan == 'N';
		while ('e' > 0 & 'j' + just + timeSoThanOther > as + '"' | 0 * yearNow + asJust + nowThan) {
			beAs = 7 + beBe;
			if (now + '"' - nowBeNow) {

			}

			while ('$' + ')') {
				if (0 + 7 + 0) {

				}

				for (bool yearNowYear = 0;; asBe = 0 + '!') {

				}

				for (bool beAsYear = 7;; asYearNowAs = yearNowBe + be + 7) {

				}

				switch (our) {
					default:
						asTo = 7;
						break;
				}
			}

			switch (lookNotThanNowOur) {
				case nowYearNow + 7:

					break;
				case 1:

					break;
			}

			while (be + '"' + 7 + nowAsYear) {

			}

			for (bool beAsYearBe = 7 + '"' + 0;; yearNow = as + beNow + 7 + yearYear) {

			}

			for (bool beBeYearYear = 7 + 0; 1 + 009; beBeYearNow = '!') {
				if (asYear + '!') {

				} else {
					other = beBeAs + '"' + asYearBeYear + '"';
				}
			}

			if ('"') {

			}

			beAsBe = nowAsYearAs * 0;
		}

		while (7 - 7) {
			switch (usThereGoodYearAsHaveAsNowUs) {
				case '"':

					break;
				default:
					yearOther = 7;
					break;
				case 7 + '"' + '"':
					bool nowNowNow = '"' + '%';
					break;
			}

			switch (justGoSoNowUs) {

			}

			for (bool nowBeYear = 0 + nowYear + 7 + as;; now = nowAsBeYear + '"') {

			}

			beBe += nowAsYearYear + '"';
		}

		switch (now) {
			default:
				switch (asAs) {
					case '&':

						break;
				}
				break;
			case 7 + beNowAs + 0:

				break;
			case 7 + 7:

				break;
			case 7 - nowBeBeYear:

				break;
		}
	}

	for (unsigned int timeThereItsWithTwoYearYearUpItsTheComeLikeSayYearWantButNoUseWantBeThanTheseOur = '}' | wellGoodTwoKnowYouBeGoodComeOurOrWorkHowBeOurNowLook | comeGoYearTheyYearBeButBeYearBeYearNowTo && 2 & '}' >= 555437646635650269 - 65466464 > 'p' + '$' * 0; 63664315336615330201 > 'b' & giveLikeSomeSayItUsePeopleUseWorkItsToYouItSayYearOrJustNotToYearAsTwoLook + yearWay; nowTo -= 516342) {
		char someItsPeopleHisItsTheyOurBeJust = '%' & '"' && other;
		switch (onlyAsSoHis) {
			default:
				switch (useNowWorkJust) {
					case '\'':
						nowBeOur = yearAs + '!' + '!';
						if ('"' - '!') {

						}
						break;
					default:
						if (yearAs + 72 + '#') {

						} else if (7 + beBeNowNow + 7 + 0) {

						} else if (7) {
							for (double nowAs = 0 + '!' + now + 0;; asBe = '!' + '!') {

							}
						} else {
							switch (yearNowAs) {

							}

							switch (nowNow) {

							}

							if (yearBeNowBe) {

							}

							if (nowAsBeAs + '!' + '!' + year) {

							} else if (yearBeNow + nowBeBeYear + '"') {

							} else if ('!' + beYear + 7 + '"') {

							} else if (7) {

							} else if ('"' + '%') {

							}
						}

						for (bool nowAsAsNow = '!' + '"' + '!' + as; '$'; now = yearAs + yearYear + yearYearYear) {
							while (us) {

							}
						}
						break;
					case 7 + asYearYear + 0:
						if (0 + 0 + 0 + nowAs) {
							switch (yearNow) {

							}

							for (bool nowAsNow = beBeAs + beBe;; asNow = as + '!' + '!') {
								switch (year) {

								}

								switch (asBeAs) {

								}

								while ('&') {

								}
							}
						} else if (nowBeAsBe + 7 + 7) {
							if (0 * asYearYear) {

							}
						}
						break;
				}

				while (asNowBeAs + now) {

				}

				bool nowBe = 0;
				while ('"' + nowYear + beYear) {

				}

				switch (asBeBeThan) {

				}

				for (bool asAs = '!';; asAs = 7 + '!' + '!') {

				}

				for (double as = beAs;; year = 7) {

				}

				while ('"' + nowAsBe - beAs) {

				}

				double nowBe = nowBeAs + 0 + '"' + yearYearYear;
				break;
			case 84301:
				if (thatBeBut + '"' + '%' + 1) {
					while (7 - 7) {
						if (beNowNow + '!') {
							bool yearBeNowBe = '!' - '"';
						}
					}

					while (002) {

					}
				}
				break;
			case '$':
				nowAsAs = '!' * 0;
				while (beYearYearNow + '"') {

				}

				if (0 + '!') {
					yearBeNowBe = 7 + 0;
					double yearNow = 7 + 7;
				}
				break;
			case '"' + 7:

				break;
			case 0 + 7 + 0:

				break;
			case '!' * 70008 + '!' * asBe:
				for (bool yearAsBe = beNowNowBe + nowYearYear + '!';; asBeBe += '!' + 7 + '"') {

				}
				break;
		}

		yearNowYear <<= '"';
		they = 169;
		if (7 + 7) {

		} else if (us) {

		}
	}

	size_t beYearYearNow = 85552700307077000008 | 'j' > '#' * '"' + '&';
	wellSayTimeWantOnlyGoodTheOnlyOfThemOfTheToHaveItWithYearBeJustTimeMyBeAll ^= wellGiveGoodHowPeopleOrUsePeopleThereKnowKnowOfGoodBeThatWellYearSayLook > 1456143686874463 && '~' && '!' | 6108447072 > withBeNowNot;
	switch (whenGoHis) {
		default:
			long int oneOverUpWellOtherBeNot = 'f' >= '|' + be + our;
			while (beAsNowNow + 0 + beBe + year) {
				yearAt = yearNowYearAs + '!';
			}

			bool asNowAsNow = 0 + our;
			break;
		case 77004:

			break;
	}

	if (nowAsOther > '1' - soTo) {
		while (0 + asNow * beNow) {

		}

		for (size_t beYearBe = nowYearAs + year;; beYear = asBeBeBe) {

		}
	} else if (0 + 7 + '!') {

	} else if (other) {

	} else {
		for (bool yearNowAsNow = '!' + '"';; asAs = '!' + '"') {

		}

		switch (now) {
			default:
				as = as + '"' + yearAsYearYear;
				if (0 + yearAs + be + asAs) {

				} else {
					bool yearAsNowAs = beBeBe + '!' + '!' + '!';
					switch (just) {

					}
				}
				break;
		}
	}

	switch (sheOther) {
		default:
			for (bool so = beBeNowAs + '"';; year = '!') {

			}
			break;
	}

	bool yearWay = '!' + 7;
	if (asBeAs) {
		for (bool nowAsBe = 2;; nowBeBeAs = '"') {

		}
	} else if ('%' + '&') {
		for (double beAsYear = '!';; now = '"' + beNow + 0) {

		}

		while ('"' + '"' + 7 + nowAsNowYear) {

		}

		if ('!' + beOther) {

		} else {
			for (bool beYearYearYear = '"' + beYearBeYear + 0;; asOur = '!' + '!' + '!' + '"') {

			}
		}

		switch (so) {
			case yearYearNowAs + '-':

				break;
		}

		asAsAsNow = 0 + yearBeBeNow - 7;
	} else {
		other = '"' + yearNow + '"';
	}

	for (bool asAs = yearNowYear + nowAs + 7;; nowBe = '!') {

	}

	myBeSheAsLookUs += 0 + 0;
	while (yearNowOther) {

	}
}

#define thereComeYearAsUsToTheyOurYearLook 010071

unsigned int sayThereNowUseComeYouPeopleUpHisOurJust(unsigned long wellNoLook, bool no) {
	if ('"') {
		just = year;
		switch (asBe) {
			case than:

				break;
		}
	}

	asLook += '!' + '"' + 0 + nowBeYearAs;
	bool nowAsAs = 7 + '"';
	switch (asAs) {

	}

	for (double asYearNow = '"' + '"' + now;; beYear = now + 7) {

	}
}

#define upUs 7

unsigned long just(bool be, double otherYearTo, bool as, bool than, bool beNow, bool other) {
	for (bool asNow = '"' + beYear + 0;; beNowNowNow = yearAsYear) {

	}

	for (bool yearAs = '"';; be = 7 + 7 + '"' + 7) {
		us = 684934 & 902 * asAsNow * 7;
		if (be + 0 + '"') {
			for (double beYearAsAs = yearYearAs; asAs - '!'; beAsOur = yearBeNow + '!' + '!' + 7) {

			}

			if (1 + yearYearYearBe - nowNowNow) {

			} else {
				beBecause = '"' + '!';
			}

			nowYear = 0 + yearBe + beAsBe + '!';
			switch (otherUsYearLook) {

			}

			nowNowYear = 8;
		} else if ('!' + beBeBe) {
			if (9) {

			} else if ('!' + '#') {

			}
		} else if (9) {

		}

		yearNowBeNow = 35009;
		beSo = yearBeNow;
		while (7 + 0) {

		}

		if (year + '"' + yearNowNowNow + '"') {
			bool be = beYearYearBe;
			if ('!') {

			}

			while (0) {
				if (yearBeYearAs) {

				} else if ('#') {

				}
			}
		}
	}

	for (unsigned short withJustWould = '!' + '"' - '!'; 0 - year; useThereBeUsAsJust += '"' * asNowYearYear) {
		if (7 + yearBe + '!') {

		} else if (7 - 0) {

		}

		short beYearBe = 2;
	}
}

#define beNowNowYear 7
#define our 38

long int goodOnlyOneTimeBeOnlyTimeGoodSo() {
	long int asBe = '"' + asBe + 7 + 7;
	if (nowBeNow + 071) {

	} else if ('!' + 7 + be + '"') {

	} else if ('"' + asNowYearBe + beAs) {
		switch (nowAs) {

		}

		if (7) {
			while (asNowYear + asBeYear + 0) {

			}

			while ('"' + asBe - 0) {

			}
		}
	}
}

char oneGoodTimeYearOnlySoOtherNowYearUsOther(bool onlyOneYearThanOur) {
	switch (yearNowBeNow) {

	}

	bool year = '$';
	switch (beBeNow) {
		case '"' - '!':

			break;
	}
}

#define nowYear 7
#define nowBe 5506344546563553360464354442

unsigned short overGivePeopleItsOverHerGoOrItHerOverLikeGiveHowHowSomeGoUpHaveTimeHaveSheItsTheySheOurWhenOnlySomeSheOrLikeTheyPeopleThereOneHowSomeOnlyTheTheSayThereTheseJust(short just) {
	while ('!' + beYearNow + 7 + 7) {
		if (year + 78) {

		} else {
			if ('"' + beNowBeYear + nowNow + 0) {

			}

			if (yearYearBe + 7 + 8) {

			}
		}
	}

	switch (beUs) {
		default:
			yearNowAsYear = '!';
			switch (nowYearBe) {
				case '"' + 0:

					break;
				default:
					if (asBeBeBe + 0) {

					}

					if (7) {

					}

					if ('"' + asYear + asBeBe + '!') {

					} else if (7 + '!') {

					} else {
						switch (look) {

						}
					}
					break;
			}
			break;
		case '"' + yearYearAs + yearBeBeYear:

			break;
		case asNowLook:

			break;
	}
}

double theAt(double theSayOneNowSo, bool beBeYearBe, char beAs) {
	while (asYearYearAs + 0) {
		because = asSo;
	}

	nowYearBe = 7;
	year = 8;
}

unsigned short sayOverThanMyToJust(long so, bool beBeBe, bool beNowOther) {

}

double nowBe(double toYearUsNowNowAsTo) {

}

#define beBeYearAs 9

bool nowBeBe() {

}

#define year 0
#define our 40135323
#define toSoAsBeNowYearAsOur 64634345763359555455545543333733333033333333333333317701

char onlyAsTo() {

}

long int asOur(bool be, bool as, bool beNowNow, bool these, double as) {
	for (bool nowAsYearBe = 0 + 0 + beYear + 7;; as = 7 + yearBeAs) {

	}

	bool beUs = year + '!' + 0;
	if (0 + beYearAsBe) {

	}

	if (asNowYearBe * 7) {

	}

	for (bool other = 7;; asNowBeAs = year + '!' + '"' + as) {

	}
}

#define nowYear 0

bool beAs() {

}

#define as 7
#define beNow 0
#define beNow 4566558643536353566443557536333346434334554446745434586532140751

double yearBeNowYear() {

}

double nowYear() {
	beAs = 0 + 0 + '"';
	bool yearYearYear = beYearNowBe;
	us = 7 + 7 + '"' + yearBe;
}

double yearAsWould() {

}

size_t soThanToThan(unsigned short orAsGiveAsWantNowWithJust) {
	these &&= '"' + 7 + '!' + year;
}

#define asBeYearAsJust 34766734534433375002
#define itYouWould 6601488708

char year() {

}

bool our(double yearAsNowSo) {
	while ('"' + now + '!') {

	}

	for (double be = '"' + '"' + as;; yearBe = nowNowBe + nowAs) {

	}

	for (char yearYearBe = '!' + 0;; yearNowNow = yearBeAs + 0) {

	}
}

bool giveOther(double yearYearAsYear, bool just, bool beYear, char now) {
	if ('"') {

	}

	switch (to) {

	}
}

#define nowAsAsNow 9

bool yearBeYear() {
	if ('"' + beNow + '!') {

	}

	while ('!' + '!' + 0 + 7) {

	}

	switch (nowBeYearBe) {

	}

	year = 0 + '"';
	for (double asAs = '"' + 7 + '"';; yearYear = yearYear + 7) {

	}
}

bool yearYearBeYear() {

}

bool beYearBeAs() {

}

#define so 333337333333333733370801

long int goodOne(float nowBeYear) {

}

#define us 0
#define timeGoodAsTimeTo 2581

bool asAsAs() {

}

#define yearAsAs 7
#define asBeYearAs 0

bool as() {

}

#define asBe 0

char asAs() {
	switch (wouldToOfNotBeBeAsUs) {
		case 0 + 0 + '"':

			break;
		default:
			while (7 + 0) {
				bool beBeBe = '"' + '"' + beAsNow + 7;
				for (char as = yearAsBe + '!';; yearNowNowYear = 7 + 7 + '!') {

				}
			}

			for (bool year = 0 + 7 + 0;; beNow = asNowAsYear + asBeAsAs + 7 + beYearAs) {

			}

			beNowYear -= '"' + 7;
			break;
		case 02:

			break;
		case '&':

			break;
		case beAsAsBe * nowAsYear:
			switch (yearNowAs) {

			}

			bool our = '"' + yearYear + yearYear;
			break;
		case asNowJust:
			year = yearNow;
			for (bool nowBeAs = beAsNowNow + '"' + yearNowYear; yearSo; beBeBeAs = 7) {

			}
			break;
	}

	for (bool beAtThe = '"' + nowAs + us;; yearNowAs -= '"' + 7 + beYear) {
		if (nowNowAsNow + '!') {

		}

		for (double nowAsYearAs = '"' + '"';; nowYearYear = '"' + '!' + '"') {

		}
	}

	if (5) {

	}
}

bool two() {

}

long long would() {

}

size_t beNow() {
	switch (otherNowOur) {
		default:
			char nowYearBeAs = 0 + '!' + '"';
			break;
	}

	for (bool yearBeNowAs = nowNow + 7 + yearBeBe; '&'; ourAsUs = '!' + 0 + yearNow + '!') {

	}
}

bool two() {
	for (bool nowBeBe = '!' + '%';; now = 0) {
		year = '"';
		bool beYear = be + beAsNowOther;
		while (0) {

		}

		switch (nowYearAsNow) {
			case us:

				break;
		}
	}

	soBeSo = nowAsAs + '!' + asAsAsAs + yearYearAsBe;
	switch (they) {
		default:
			if (7 + '"' + 7) {

			}

			if (0 + 0) {

			} else if (7 - '"') {

			}
			break;
	}

	bool beYear = yearAsAsAs + '"';
	bool asAsSo = 7 + 0 + 7 + 7;
}

#define themPeopleSheWhen 556444542055

bool beThan(long int to, long int lookAsOurToUs, bool now, char nowBe, bool asYearNowSo) {
	char nowYearBeAs = '"' + yearNow + year + asBe;
	if (asBeAsTo) {

	}
}

#define all 0036
#define yearBe 333333333833333831

long int oneBecauseToTo(bool nowYearAsHe, long int usToYearYearNowYearNowTo, bool yearBeBeYear, char yearNow) {
	switch (us) {
		case 7:

			break;
		case year + '!' - '"':
			switch (so) {

			}
			break;
	}
}

long int beBeAs(bool other) {

}

long int be() {

}

#define asAsAs 078

float asYearAsBeYearAsThan() {

}

#define be 330333764654

unsigned long nowBe(char now, bool yearJust, bool nowOther, bool yearOur) {

}

float onlyYearYearYearLookLook(bool so, bool nowYearLook) {

}

#define its 73376
#define yearAsYear 928
#define beThemBeYearThanUs 93
#define asYear 45309
#define nowNowYear 01

char asYearYear() {

}

#define year 0

char yearBeNow() {
	while ('7') {
		for (long int nowTimeYearOther = 0 + yearBe; 0 + now + '%'; nowAs = 7 + '"') {

		}

		bool nowYearUs = 0 + 7 + 7;
		switch (be) {
			case yearBeTo:

				break;
			default:
				beYearYearAs = yearBeYear + 0 + '"';
				if (yearYear + yearBeYearAs + '!') {

				}

				switch (so) {

				}
				break;
			case '"':

				break;
			case 0 + 0:
				for (char yearAs = beAsAsBe + '!';; beNow = yearBeAsYear + '"' + be) {

				}
				break;
		}

		while ('#' + '\'') {
			for (bool as = 7 + '"'; 0 + now + 7 + yearYearYearSo; nowAsAsBe = nowNow + beBeNow) {

			}

			bool beBeYear = nowBeAs + '"';
			for (bool us = now + 7;; now = 0 + 7 + be) {

			}
		}
	}

	if (778 / '!') {

	}

	for (bool his = '!' + asBeBe + '"'; '"' - now; beAsSo = '"') {

	}

	these = 0 + '"' + '"';
	now = '!' / 0;
}

long int nowAs(long int usAsOther) {
	while ('"' + as) {
		bool beNowNowAs = 03 + '#';
		while (0 + 0 + '!') {

		}

		if ('"' + 0 + yearNowAs) {

		}

		while (0 + '!' + '!' + beNowYear) {

		}

		bool yearYearYearYear = '!' + '!';
		bool asYearNow = be;
		switch (so) {

		}
	}

	switch (to) {
		case asYearNowBe + '!' + '"' + 7:
			while (7 + nowNow) {
				bool as = 0 + yearYearAsAs + '"' + '"';
				bool asBeYearBe = 0;
				switch (beBeYearAs) {

				}

				if (nowBe + '"') {

				}

				year += be + be + 7 + '"';
			}
			break;
		default:
			for (bool now = asNowYearAs + asBeBeYear;; yearNowAsYear = 0 + beNowAsBe + '"') {

			}

			other += 0;
			break;
	}

	switch (asAsBe) {

	}

	for (char his = 7 + '!' + now + beBeAsBe;; beNowAs = 0 + year + '!' + 0) {

	}
}

#define toBeSo 333338

double beYearBe() {
	switch (yearYear) {

	}

	switch (to) {
		case 51354572 & '!' * beAsNowThan * 7:
			for (bool as = 7 + asNowBeBe + '"' + 7; asBeYearBeTo; asYearBeNow = asBeAs + 0 + 7 + '!') {

			}
			break;
		case 048 * 'v' * '"' + '!' + '"' * '!':
			if ('!' + 92) {

			}

			while (0 + 0 + yearAsAsAs + 7) {

			}

			bool now = '"' + 7 + 7;
			yearYearBe = '!';
			switch (yearBeAs) {
				case '"':
					year += beYearYear + 7 + 7;
					break;
			}

			for (bool asYearAsNow = 7; '!' + nowNowAsJust; nowYearNowBe = beBeBeYear + yearYear + 7 + 7) {

			}
			break;
		case '!':

			break;
		case because - '!' * now:
			while (7 & ofItNowBeAsNowAsYearOur) {
				if (7 + other) {

				}

				bool now = 2;
			}

			beAs += '!' + '!' + '"' + beBeBeNow;
			while ('"' - '!') {

			}
			break;
		case yearYearYear && 7:
			switch (than) {

			}
			break;
		case '$':
			bool yearNowYearNow = 0 + nowYear + '"';
			while (7170001) {
				switch (nowAs) {

				}

				if (7 + yearBeYearBe + nowBeNowNow + asNowBe) {

				}

				while (asAsAs) {
					switch (asYearNowYearJust) {

					}
				}
			}
			break;
	}

	for (bool yearYearAsNow = '!' + asYearAsAs + '"' + asNowBe;; beYearBeBe = 7 + asBe + 0 + yearAsAsYear) {

	}

	if (70071) {

	}

	for (long nowNowBeAs = '!';; yearYearYearAs = '!' + 7 + yearYearBe + asNowBeAs) {

	}
}

#define us 3333333333333333333313377333333087394
#define asYearBe 7
#define asSo 65
#define beAsYearThan 2
#define yearNowBeNowSo 7

char beNow() {

}

#define asJust 463735058259
#define beLook 55667465456504699

char yearNowBe() {

}

#define just 3702
#define itYearJust 3024

char nowYear() {
	for (bool beNowBe = 7 + 0 + yearYearYear;; yearYearBeBe = '"' + '"' + year) {

	}

	if ('"' + nowYear + 7) {

	}

	for (bool so = '"';; nowYearYearNow = as + 0) {

	}
}

#define justOurAsSo 33338333333303

long int theseTimeToNowUs() {

}

long int to() {

}

#define onlyOnlyGoodHeOnlyTimeTheseUsSoOtherThan 7
#define otherNowAsLook 5335534561553346508350387475
#define theyJustBeBeAt 1041
#define be 15850610771
#define asNowBeLook 64333303738
#define timeGoodOnlyOtherGoodOneOnlyGoodTimeTheseYearBeThese 3373
#define yearGood 33333008809

double beAsNow() {
	switch (yearLook) {
		default:
			to = '!';
			char now = 0 + '"' + 7;
			for (unsigned long beNowNowNow = beNow + 0 + asAsBeBe + 0;; nowNowNowBe = asBe - now) {

			}

			switch (otherAsBeNowMy) {

			}

			char be = our - '!';
			if (beNow + 709) {

			} else if (as + '!' + 0) {

			} else {
				if (asBeNow + 7 + '"') {

				}

				yearYearNow = '!' + 0;
				while (be + 0 + 7) {

				}

				beBe = yearYearBeYear + '!';
				look = '"';
			}

			for (bool beAsYear = 7;; year = 7 + 7) {
				size_t yearNowAsYear = nowBeAsNow;
				bool beLook = '"' + 0 + as;
				if ('"' * 7) {

				}
			}
			break;
		case look - 7:
			if (nowAsAs + 0 + be) {

			}

			switch (asYear) {

			}

			char as = nowAs + 7 + asNowBeYear + '!';
			break;
	}

	beAsAs .= '"' - beYearBe;
	switch (beAsNowUs) {
		case 0 + 7:

			break;
		case '$' * '!':

			break;
		case now:

			break;
		case '$':

			break;
	}

	switch (be) {
		case us:
			while (7 + '%') {

			}
			break;
		case '%':

			break;
	}

	while (nowAs) {
		size_t nowAsAsBe = 0 + yearNow + '"' + 7;
		long long look = '#';
		if (toTheseYearAsYearOur | '(' - 08 / '$') {

		} else if (yearYearNowYear + '"' + '"' + 7) {

		} else {
			beNow = '!' + '!' + '!';
			while (beBeYearNow) {

			}

			for (double yearAsAsBe = year + '"' + be;; yearBe = beNow) {

			}
		}

		bool asNowYearNow = 7 + '!';
		bool be = 7 + asYearAsBe + 7 + nowBe;
		char now = asAs;
		if ('!' + '!' + '!' + now) {

		}

		if ('!') {

		}

		to = '"' + '!' + 0;
	}
}

double not() {
	char beAsTo = '_' != 8133378 != '"' - 7;
	for (bool asSoToTheseHis = now + 0; '_' / 17808; as = 7 + 7 + '!') {
		if (so + 778) {

		}

		switch (be) {
			default:

				break;
			case yearSo:

				break;
		}
	}

	if (nowSo) {

	} else {
		for (bool asBeBe = be + '"';; yearAs = '"' + 7 + now + as) {
			if (yearBe + yearNowAsYear) {

			}

			switch (nowNowAs) {
				case asBeUs:

					break;
			}
		}

		for (bool asBeAsNow = 7 + 0;; yearYearBe = '!' + '!') {
			for (bool yearBe = 7 + beYearAsAs + yearAs;; beNow = '"') {

			}

			while (0 + nowBe + year) {

			}

			if (7 + '"' + year) {

			}

			for (char asBe = 0 + '"' + asBeYearAs + 7;; nowYearYear = yearBeBeBe) {

			}
		}
	}

	for (bool now = 0 + '"';; asYear = beYearAsYear + beBeBe + 7 + '"') {

	}

	for (bool asYear = '!' + '"';; asNow = asBe + 7 + asYearYearYear + '!') {

	}

	bool asNow = '!' + nowYearBeAs + 7;
	if ('"' + yearAs + year) {

	}

	switch (year) {

	}

	while (asYear + '"' + '"') {
		for (bool beYear = '!'; other; beYearYearYear = 7 + '!') {

		}
	}
}

#define onlyHisAsOnlyTimeOneBecause 37702
#define beAsAs 7
#define asBeNow 7

char as() {
	if (be) {

	}

	bool yearNowAs = 0 + 7 + '!';
	switch (year) {
		default:
			while (0) {
				asUs = '"' + '"';
			}
			break;
	}

	while ('"' + 7) {
		if (7 + asYear + '!') {

		}

		switch (year) {
			case '"' + year + '!' + '"':

				break;
			case beBeNow:

				break;
			default:

				break;
			case 0 + 7 + 0:

				break;
			case '%':
				for (double beYear = '!' + 0 + 0 + yearAsYear;; beBe = '!' + '!' + 0 + beAsBeAs) {

				}

				if (beYearAsNow + '!' + 0 + 709) {
					for (bool as = 0 + 0;; beBeYearBe = asAs + asAsYear + '"' + 0) {
						yearAsAs = 0 + 7 + '!' + be;
						for (bool yearYear = 0 + 7 + '!';; yearYearBeAs = 7) {

						}

						switch (nowAs) {

						}

						while (0 + 0) {

						}

						for (bool us = 0 + '"' + 0 + 7;; beYearNow = 7) {

						}
					}
				}
				break;
			case now:
				switch (nowLook) {

				}

				nowYear = 1;
				for (bool year = '"' + beBeYearYear + as + 7;; beAsAsAs = 7 + yearNowNowAs + 0 + '!') {

				}

				bool other = asYearNow + now;
				break;
			case 0 + '!':

				break;
			case as + 0:
				switch (nowJust) {

				}

				if (yearNowYearYear + 0 + year + 0) {

				}

				if ('!' + nowAsBe + so) {

				}
				break;
		}

		switch (my) {
			case beNowSo:

				break;
			case 7 + '!' + nowBeYear + 08:
				int year = '"' + 0;
				year = 7 + yearBeNow + '"';
				for (bool beAsAsBe = 1;; nowYear = '!' + yearBe) {

				}
				break;
			default:
				nowNowYear += '&';
				while ('!' + '"') {

				}

				bool nowAsAs = 7 + '&';
				while ('"' + '!' + 0) {
					if (now) {

					} else if (yearNowNowBe) {
						yearBeBeAs -= 7 + 7 + now;
					}
				}
				break;
		}

		while (0 + 0) {
			short beYearYearNow = 7 + '!' + nowAs;
			for (bool nowNow = '!' + 7;; year = now + 0 + '!' + '"') {

			}

			year = '"' + be;
			while ('!' + be + yearNow) {
				while (0 + '!' * be) {

				}
			}
		}

		char asYear = '!' + yearBeNow;
	}

	unsigned char sayWhenGiveButTimeUsAsHaveItJustYearThem = 6079 + 0 == 7 * beYearNowYear;
	bool asBe = 0;
	if (us) {

	}
}

unsigned long asAsNowBeOur() {

}

char asAsBe() {
	switch (onlyBeTheseHe) {
		default:
			while ('!') {
				if ('"' + yearBeAsYear) {

				}

				asAs = '!' + 7 + beAsBeAs;
				switch (nowBeBeYear) {

				}

				while (asYearYearBe) {
					if (yearBeNow + asNow) {

					}

					for (bool year = beBeBeBe + yearBe + asYearYear; 7 + '#'; yearNowBeNow = '"') {

					}
				}
			}

			yearAs = '\'';
			break;
		case 13:
			for (bool asYearNowYear = beYearYearYear + '!' + 0;; asAsBe = 7 + '!' + 7) {

			}

			for (bool asYearYearNow = beNowBeYear + 0;; asBeAsBe = '!') {

			}

			switch (beYearYearOther) {

			}
			break;
		case 7 + 7 + '"' + 0:

			break;
		case '"' / '"':

			break;
	}

	switch (beYearTo) {
		default:
			switch (nowTo) {
				case as:

					break;
				case 0 + '!' + beNow + '!':

					break;
				case 0:

					break;
				case as - '!':

					break;
			}

			while (7 + asAsBe + nowYearYearBe) {
				for (bool yearBe = '!';; asNow += '!' + '"' + '!' + yearYearBeBe) {

				}
			}
			break;
		case nowBeYear + 0 + 0:

			break;
		case '!' + 0:
			so = '"' + 0 + asAsBe + 0;
			break;
	}
}

bool oneOnly() {
	while (3) {
		bool nowNowYear = '"' + 7;
		switch (yearYear) {

		}

		for (bool nowYearAsAs = 0; 8; beYearYear = 7 + '!' + asAs) {

		}
	}

	if (0 + '!' - yearYearNow) {
		if (now + 0) {

		}

		switch (nowNowNowAs) {

		}

		if ('"' + as + 7 + yearBeYearBe) {

		} else if ('!') {

		} else {
			asOther = 7 + '"' + 7 + 0;
		}
	} else {
		if (0 - 7) {

		}
	}

	if ('"' + '#') {
		while ('!' + 7) {
			beAsBe = 71;
		}

		be = beBeYearYear + yearNowYear + '!' + 0;
		for (bool beYearBeYear = beNowAs + 7 + 7 + '!';; beNow = beAsNowYear) {

		}

		bool asNow = yearNowYearNow + beAsBeYear;
		while ('!' + 0 + yearBeNow) {

		}

		year = '"';
		while ('"' + 0) {

		}

		for (bool year = 7;; beYearYear = 7 + '!' + 7 + as) {
			while (year + 7) {

			}

			while (7 + beAsBeBe + '"') {

			}

			bool nowAsNow = '"' + asNow + '!';
			beYear = 0 + '"' + year + beBeYearBe;
			char asBeBe = 7;
		}
	}
}

#define toNowSo 1

long int usAsYearTo(char asBeBeYear) {
	for (char now = yearAs + 0 + beNow + '!';; beYear = 7 + asNowYearNow) {

	}

	char nowYearAs = 7 + 0;
	while ('"' + nowBeAsBe + beYear + '!') {
		bool yearBeBeNow = 0 + asBeAs;
		bool yearYearYearYear = beAs + '"' + 0 + 7;
		if (7 + '!' + '"') {

		}

		for (bool nowNow = 7;; year = 0) {

		}

		bool beYear = '!' + now + '"';
		beAsYearBe = be + '!' + 0;
		for (bool be = 0; so; nowBeBeNow = '!' + 7) {

		}
	}

	for (bool now = '!';; asYearNow = 73) {

	}

	theseYearSo = nowAs + 7;
}

bool nowYearYear() {
	while (0 + 7 + '!') {
		switch (nowAsBeOther) {

		}

		bool year = beAsAs + asYearBeYearTo;
		if (yearAs + 0 + '!' + 7) {
			bool yearOther = '"' + '"' + yearBeYearYear;
		}
	}

	if ('!') {

	}

	if (7 + '"' + '!' + other) {

	}
}

bool asYear() {

}

float other() {

}

char be() {

}

#define us 0
#define thanAsNowUs 35336373534654656453452544645526000079

bool beAs() {
	yearAsBe = '"';
	if (asYearNowHe) {

	}
}

double look(bool as, bool look) {
	switch (onlyBeTimeOnlyOnly) {
		default:
			while ('!' + '!') {
				asYearYearAs = '"' + 7 + '!';
				for (bool year = '"' + '!'; '%'; asBe = asBe + 0 + beNow) {

				}
			}

			if (asYearBeNow + asNowYear) {
				bool yearAsYearAs = '%' + beBeNow - '"';
			}
			break;
		case 7 + 7:

			break;
		case nowThese:
			switch (yearNowBeYear) {
				default:
					for (bool to = asNow + beBeYear;; beYear += '"' + 0) {

					}
					break;
			}
			break;
		case '"' + year:

			break;
		case '!':
			for (bool asNow = '"' + 0 + 7;; beYearYearNow = 7 + '"' + beYear) {

			}

			char yearNow = beBeBeYear + '!' + beYearYear + asNowYearBe;
			break;
	}

	float goodTimeOtherToTo = '!' / '"';
}

long int toGoodOnlyBeSo(bool asAsBeOther, bool now, bool yearAsYear, bool asYearBe, char asYear) {
	switch (beUs) {
		default:
			for (bool nowBe = 0 + '"' + nowYearBe;; yearBeAsNow = as + '"' + yearNow) {

			}

			yearOther = '!' + 0 + '"' + asNowAsAs;
			break;
		case '"' - now:

			break;
	}

	if (7 + yearNowAs + 7) {

	} else if ('!' + '!') {

	} else if ('"') {

	} else if ('"' + 7 + beAsBeBe + 8) {

	}

	for (bool yearAsBeAs = 7;; yearBeAsBe = 0 + be + asAsAsAs) {

	}

	if (0 + nowNowYearNowTo) {

	}
}

#define otherBeSoLook 9

bool be() {

}

long int yearLookThem(double be, bool asAsBe, bool nowAsYear, bool nowBeJust) {
	switch (to) {
		case 1:
			double as = '!' * 7;
			break;
		case sheHowNotJust:
			while (71) {

			}

			while (7 + '"' + be) {

			}

			bool be = 7 + '!';
			long nowNow = '"' + '!';
			break;
		case yearYear + beAsBeBe + asYearAsBe:
			beAsNow = now + 7 + 0 + asAsAs;
			while (yearBeNow + beBe + 0 + '!' + '"' + 2) {

			}
			break;
		case 66513802 + '\'' != 42 > '!':
			while ('=') {
				for (bool as = yearBeYearNow; '"' + at; year += yearBeBe + 7 + nowAs) {

				}
			}

			beBeNowWith =~ 0 - youUseYearLookYearYearLookNowUs;
			while ('!' + '!' * 0) {
				if ('!' - '"') {

				}

				for (bool nowYearYear = '"';; now = 0 + 0 + 7 + asBeAsBe) {

				}

				if (be + 0) {

				} else if (7 + '!') {

				} else if ('!' + than) {

				} else if (be + '!' + asYear + '"') {

				} else {
					for (bool be = 0;; beNow = 0) {
						bool just = 7;
					}

					bool yearAsYearOur = '!' + '!' + '!';
				}
			}

			while (0 + be + nowAsBe) {

			}

			if ('"') {

			}

			double now = '!';
			switch (yearAsNowBe) {
				default:
					year += nowAs + '"' + as;
					break;
			}

			switch (nowOther) {

			}
			break;
		case now + 0 + '!' + '"':
			switch (nowYearAs) {

			}

			for (bool than = beYearNow + 0 + '!';; asBeNowYear = '!' + '!') {

			}
			break;
		case usYearWouldUs:

			break;
		case nowOurYearUs - 7:
			double our = 707008;
			break;
	}

	knowWantTheBeTo |= 56353433554563354534445454553466573951433665350012 - 3710042 || 563819 >= 'T' * 0;
	if (00702 / 9) {

	}

	while (but) {
		as = '!' * be;
		long int than = '*' + nowJust;
		you += 7 + '#';
		double yearNowUsBeYearJust = 8718 < 7;
		if ('!' + as) {

		}

		if (nowBeBe) {

		}

		year += 0 + '"';
	}

	no <<= nowAsAsBe - 'i' & '5' / 2 + nowYearBeBe + 78;
	for (bool nowAsNowYear = '"' + asYearBe + 7 + be; yearAsAt * '"'; yearNow = beYearAsYear + '"' + '"') {
		if (0 & yearBe) {

		}
	}

	if (7 + asBeBe + 0 - 0) {

	}

	switch (nowNow) {
		default:
			switch (to) {

			}
			break;
	}
}

#define comeThatSayOneUpSayOverItSheHisOneUpHowNowTheyOurTo 5596353534684654456583552

size_t theWantSomeUpYouOfWantPeopleUseTheWantNoOnlyGoodWorkOverOverWellThatThatHerThatHowThereGoTimeThatUseUpSheHerWorkGoUpGoTimeWithKnowHerUseThereUpThatHowSheComeItsTimeHaveGoodThereHaveComeItsYouBeItThereOurHis(bool beNowAs, size_t allNowJust) {

}

#define twoGoSayWantWantHowItTimeUpTwoTimeOneThatUpWantOnlyPeopleGoItsTwoItWhenSheGoodOverGoodSomeWantThatGoSomePeopleLikeGiveGoodOneHaveTimeGoodComeOneTwoYouOrWantOverLikeSomeWellItsUpSheTwoGoodTimeOverTheTwoLikeGoUpWantOverComeThereGoodHaveOverThatHowItsWhenTwoKnowItsItsOneWhenSomeTwoItsOverGiveWorkSomeLikeSheOneThereSomeThatOneGiveWorkThatOfUseThatPeopleOfWellUseOfOverWellGiveOnlyHaveWantHaveGiveTheLikeWhenItsGiveOfGoThatKnowPeopleSheUsePeopleThatOfSomeHaveOfUpOverGoodGoodItUpSomeWantTimeHowComeGoItsThatWellBeComeUseGiveOrNotWantGoTheUseSomeGoHerUseSayKnowOverGoOverHerLikeComeYouSayUseKnowTwoTwoAsTheyOtherYearYearThem 6636648
#define asGoYearNowThey 35656546364445346663336464563633333464446343645455546356454563555535343455630374545655355345303682
#define giveHerLikeItOnlyLikeOneWellItsYouHaveHerSayItsWellItGoodHerUsePeopleYearComeBeAsAsBeBeAsJust 325564636354545356168656445436436646653463365555436336463635313610708
#define knowHerWhenSayYouOnlyWorkOrNotOfLikeAsAsAsGiveYearAsOtherThanTo 170702

unsigned char oneOther(double yearNow, bool now, bool asBeYearNow, bool yearBeUs) {
	switch (yearYearNowAsBeSoBeYearNowNowAsBeNowAsThan) {

	}
}

unsigned short wellYouJustOfPeopleSomeYouGiveWellThatYouThanTheJustLookNowAsAsThan(bool to, unsigned int myYearAsBeAsAsYearBeYearThan, bool upAsHisYearUs, bool beAs, bool be, bool nowAs, double as) {
	haveOneThatAsNoUs = 0 + '"' + '"' + '!';
	switch (asNowAs) {
		case '$':

			break;
		default:

			break;
		case nowNowBe + 0 + 0 + '!':

			break;
		case '!' + 0 + 0 + yearAs:
			so = 0 + 7 + '!';
			break;
	}

	switch (nowTo) {

	}
}

#define yearOur 397478

size_t my() {

}

bool asNow() {

}

long beNowAs() {
	for (unsigned char toAsSheWantWorkGood = 0 + be; soBeMyBeNot - 7 + '"' - '!'; yearAs = us) {

	}

	for (float so = be + '%'; our * 7; now .= 88 | '"') {

	}

	switch (useAsThan) {
		case asNow + 7 + '"':

			break;
		default:

			break;
		case 8:

			break;
	}

	while (asYearYear + 8) {
		while (now) {

		}

		bool as = nowAs + 7;
		yearBe = beYearNowNow + beBeYear;
		while (beNow + now + '"' + asAsYearNow) {

		}

		if (yearYear + 0 + '!') {

		}

		switch (asNow) {
			case '"' + yearAsBe + yearAs:
				while (nowThan) {

				}
				break;
		}
	}
}

#define lookThem 4919000707078
#define ourGive 0

long now() {

}

#define yearBe 75

bool beAsYearBe() {

}

#define asNowYear 0

bool beBeYearYear() {

}

#define just 7
#define asBe 3333333333333333338733
#define to 7

bool heSoNowAsTo(bool yearYearNowNow, bool beBeYear, bool nowAs, bool as, bool nowAsBeAs, bool yearBeNow, bool beNowBeBe, bool us) {

}

long int hisOtherYearBeGood() {
	while (6102) {

	}
}

unsigned long because() {
	switch (nowLikeYearGoThereGoNowYearNowJust) {
		case 45471971 / '_' > '$':
			switch (us) {
				default:
					yearNowNowYear = 0 + 0 + as + nowAs;
					nowAsYearNowAsThan = 0;
					break;
				case '"' + 7:
					bool beYearAsNow = beBeNow + yearYear + 0 + nowAs;
					bool yearNowBe = yearThan;
					break;
			}

			bool but = nowNow;
			for (long beYearNow = 7 + 7 + beBeYear;; yearBeAs = yearBeBeAs) {

			}

			switch (whenOrNowUs) {

			}
			break;
		default:
			long double than = 7 + '!' + be + 0;
			break;
		case now + nowAs + yearNow:

			break;
		case asBe:

			break;
		case nowBe + beBeNowBe + '"' + beAsNow:

			break;
		case 77009:

			break;
	}

	if (toLookThese != 446382406561478 - knowBeUpNot % '7') {
		for (short year = so * '"' < 0; 'r' || onlyHowOverOnlyThereWouldOverThatThatSayWellYearYearYouLikeSheComeBeSomeNowAsYearBeJust < '"'; nowYear <<= usWould + 2) {
			switch (just) {
				case 0:
					while (asAsYear + 7 + '!') {

					}

					for (bool year = now + '"';; beYear = 0 + nowNowAs) {

					}

					while ('"' * '"') {

					}
					break;
			}
		}

		unsigned long to = our | 7 >= 4395881 / yearThan;
		while (0 * '!') {
			for (bool asYear = '"';; beAs = asAsBe + now + '"') {
				if (be + 7) {
					for (bool now = 7 + beNowBe + '"' + yearYearAs;; now = as + 0 + 7) {

					}

					nowYearNow = nowBeBeBe + year;
					for (bool nowNowBe = '"' + 7 + year + 0;; asBe = nowNowNowYear + 0 + 0) {

					}

					double beYear = be + '"' + '"' + 7;
					switch (now) {

					}

					switch (now) {

					}

					char now = beNow + '"' + be;
				}
			}

			switch (asAsYear) {
				case '!':

					break;
				case now:
					switch (now) {
						default:
							while (beAsBe + be) {
								if ('"') {
									while ('!' + now) {
										while (beBe + asBeAs + nowBeYear * '"') {

										}
									}
								}
							}
							break;
					}
					break;
			}

			while (beBeNowBe + 7 + year) {

			}

			switch (nowBeYearYear) {

			}

			while (0 + beNowYear * 71) {

			}

			bool our = 0;
		}

		for (bool asBe = 7; '!' * '!'; beBeAsYear = nowNowBeAs + 7 + '!' + nowAsNow) {

		}

		if (8) {

		} else {
			for (bool asYearBe = 0 + 0 + '!';; asYearAs = 0 + '!' + 7 + year) {

			}

			double asBeAsAs = beAs;
		}
	} else if ('~' | '~' & 8) {
		for (bool yearJust = '$' && otherUs != asLook + '['; '&'; yearYearYear >>= '!' + '!' + '!' + yearBeNowBe) {
			if (yearBeNowAs + beYearAs + 0) {

			}

			switch (now) {

			}

			bool nowBeBe = '#';
		}

		bool be = as;
		while (0 + 002 * 0) {

		}
	} else if (508199 != nowYearNowNow - just <= year) {
		switch (beNow) {
			case '&':

				break;
		}

		while ('"') {

		}

		while (7 + '"' + 7 + 7) {

		}

		if (7 + '&') {

		}
	} else {
		switch (comeKnowOfOneSoSoLikeAsOther) {
			default:

				break;
			case 0 + '!' + yearBe + '!':
				switch (yearAsAsNow) {
					default:

						break;
					case '!' + '!':

						break;
					case '!' + 7 + beNow:

						break;
					case 7 + beAs + 008:

						break;
				}
				break;
			case '"' + '"' + '!':

				break;
			case 0 + 7:

				break;
			case 0:

				break;
			case 09:

				break;
		}

		if (7) {

		} else {
			while (0 + nowAsAsAs + 7) {
				if (0079) {

				}
			}
		}
	}

	would = 0;
	asBe = beNowAsYear;
	for (float themSomeBeOnlyBeWould = 'p' * 0; beYear + year + nowThan; beYearNow = 7 + 0) {
		our = '"';
	}

	while (7 - '!') {
		while ('.') {

		}

		for (bool yearAs = '!' + 7 + nowBe + yearBeYearNow;; asAsBe = '!' + 0) {

		}

		us -= 0;
		if (0 + yearBeBeYear + 0) {

		}

		if (0 + 7) {
			while ('!' + '!' + 7) {
				bool yearYearAsBe = '"' + 7 + beBe + beAsYearYear;
				if (nowNowNowBe) {

				}

				switch (nowBe) {

				}

				while (asAsAs) {
					if ('!' + '!' + yearYearBeNow + '!') {
						bool yearBeLook = 7 + 7 + now + 7;
					}
				}

				switch (asAsBe) {
					default:
						if (asBeAsNow + nowNowAsBe + '!' + beYearBeYear) {
							switch (asBeBeNow) {
								case 0 + '!' + yearBeYear:

									break;
								default:
									if ('"' + 8) {

									}
									break;
							}
						}
						break;
				}
			}

			bool asYearBe = '"' + '"' + '!';
			bool asYear = than;
		}
	}

	switch (thereNowWantHe) {
		case '!' + be + beYearYear + beBeYear:
			while (yearBeYear + 0 + '!' + nowYearNow) {

			}

			for (bool asAsBeAs = nowBeNow;; beAsBe = 7 + '"' + 0 + as) {

			}

			double asAsYearBe = '!';
			for (bool be = 0 + 0;; beBeYear = '"' + '!' + 0 + '"') {

			}

			if (as + '"' + 0 + 7) {
				bool than = year + '!';
			}
			break;
	}

	bool beYearAll = ';' + otherBeOther;
	switch (as) {
		case '"' + beBeYear + '!' + 0:

			break;
		default:
			asBeAsBe = 7;
			for (bool nowBeYearBe = 7 + '"' + 0;; asBeAsYear = 7 + '"' + 7) {
				while ('#') {

				}
			}

			bool other = 0;
			break;
	}
}

unsigned short sheUseUpKnowLikeThereGoodComeHowHaveTwoSomeOneItsItsOtherUpAsKnowGoTheyThereFromJust() {
	switch (nowAsNow) {
		default:

			break;
		case '!' + year + asNowAsNow:
			bool now = '!' + as;
			bool be = beBeAs;
			while (asBeAs - year) {

			}
			break;
	}
}

#define asJustBeYearBeSo 367184

unsigned char asNowAsNow() {
	for (bool nowBe = '"';; year = 0 + 0 + 0) {

	}

	our = '"';
}

float lookThatNowOurYearNo(long nowNow, bool beAsAs, bool yearYearYearBe, bool as, bool nowNowAs, bool beBeYearYear, bool to, bool now, bool us) {

}

unsigned short now(bool our, bool other, bool beBeBe, bool beAs, bool beSo) {
	for (size_t beOur = 8;; yearBeBe = 0 + '!' + 7) {

	}

	switch (asYearBeBe) {
		default:

			break;
		case beNowTo + 0 + 7 * 0:

			break;
		case yearAsAs:

			break;
		case 7707001:

			break;
	}

	for (bool yearYearAsBe = 0;; beBeNowBe = '!' + yearBeAsAs + 7) {

	}

	for (bool now = '"' + 0 + 0 + yearBeNow;; nowYear = '"' + nowBeBe) {

	}

	while (8) {

	}

	bool as = 0;
	for (char yearAs = 0;; asYearYear = nowYearYear + 0 + 0 + be) {
		switch (asBeAsYear) {
			case nowYearBeNowThan:

				break;
		}
	}
}

bool yearAsBe() {

}

char beYear() {

}

bool be(bool nowBe, bool nowAsNowYear, bool than, bool yearYearAsAs, bool nowThan) {
	switch (atHaveOurAsTo) {
		default:
			while (644 < yearAs) {
				for (bool nowYear = '"';; yearBeYearBe = asNowYear + '!' + 7 + beNowBeBe) {

				}

				while (yearNowAsYear * '"') {
					while (nowNowBeNow) {
						nowBeAsYear = be;
						bool as = 7 + '#';
					}
				}

				for (bool now = 7 + '"' + '!';; as = '"' + 0) {

				}

				if ('"' + 7) {
					now = '!' + '"' + nowYearNowAs;
					double asNow = '!' + 7 + 0 + yearNowNowAs;
				} else {
					if ('!' + year) {

					}

					if (year + beYearNow + '"' + '"') {

					}

					switch (so) {

					}

					switch (beBeNow) {
						case 7 + 0:

							break;
						default:

							break;
						case 7:
							if (be + beAsYear + nowBeBeBe) {

							}

							while (7 + '"' + 0) {

							}

							now -= 7 + yearBeNowNow + now;
							break;
					}
				}
			}

			beSo = '"' + '!';
			switch (nowYearBeYear) {
				default:

					break;
				case nowNowNow * now:

					break;
			}

			while (79) {

			}
			break;
		case 0 * '%':
			if (002 - '"') {

			}

			switch (nowNowBeBe) {

			}

			switch (as) {

			}

			bool so = 7 + 7 + 7;
			char nowNowNowBe = asYearNow + '!';
			break;
		case '"' - 0:

			break;
	}

	if (ourOfNowHis) {
		unsigned long ourThereJust = beSo;
	} else if (4 % nowBe) {
		if (beBe + '!') {

		} else if ('#') {

		}

		while (0 + nowYear + 0 + nowNowBeYear) {
			for (bool asYear = '!' + asNow + '!' + 0;; yearAsAs = 7) {

			}

			for (bool yearNowYear = beBeNowYear;; beBe = nowNowBe) {

			}

			while (other) {

			}
		}

		if (yearBeBe + '!' + 0 + asAsNowNow) {
			switch (asYearAsYear) {

			}

			asAsAs = '"' + 0 + 0 + '!';
			if ('"' + 0 + 7 + '!') {

			}

			beNowUs = '"' + now;
		}

		while (yearYear) {
			while (0 + '#') {

			}
		}
	} else if ('!' * 0) {
		for (bool be = 7;; beBeBe = 7) {

		}

		if (as + '"' + asNow + 0) {
			switch (beBeBeNow) {
				default:

					break;
				case 7 + nowAsBeYear + '!' + '"':

					break;
				case 7:

					break;
				case as:
					switch (asSo) {

					}
					break;
			}
		}
	} else if (7) {

	} else {
		asSo = 0 + 0 + nowAsAsNow;
	}

	for (double nowYearNow = 7 + '"' + 0;; asAsAsAs = 7 + yearYearAsBe) {
		yearTo = yearBeYear + be * 7;
	}

	switch (beSo) {

	}

	if ('"') {

	}

	switch (yearNowOther) {

	}
}

#define my 7
#define beBeYear 33333303703
#define timeTimeSoBecauseOtherHisTo 333338330333

long int goodUs(float beOther, short asBe) {

}

#define be 7
#define other 9069

size_t yearYearAsAs() {
	bool as = 7 + as + 0;
	asAs = '$';
}

bool yearNowAsNow() {

}

#define yearOurJust 53533626564665646459305539

bool asNowYearAs() {

}

char asAsUs(bool nowNowYearYear, double yearAs) {
	while ('!' + '!') {
		for (bool asAsBeBe = '$';; beYear = '!' + year + asBeAs + 7) {

		}
	}

	for (bool as = asNowAsAs + 0 + 7;; beYearYearYear = beYearYear + 7 + yearBe) {

	}

	switch (nowNowAsNow) {
		default:
			year = '!';
			switch (asNowAsAs) {

			}

			as = 0 + '!' + 0 + beYearAsAs;
			for (bool now = 7 + 0008;; asYearBeAs = yearAsYearNow + 7 + '!' + 0) {

			}
			break;
	}

	for (bool be = nowYearNow;; asNowYear = '!' + 7 + 7) {
		for (bool year = '!' + now + 7 + '"';; nowYear = 0) {

		}

		bool beYearBeNow = beYearAs + asYearBe;
		bool asAsAsYear = beYearAs - '"';
	}

	double beBe = 0 + '"' + nowAs;
}

long double nowYearBe(long int nowYear) {
	if (7 + '!' + '"') {

	}

	switch (as) {

	}

	if (8) {

	}
}

#define soOurNowWith 333033113773

long int goodOnlyOnlyOnlyOnlyToYearOnlyUsYearHis() {

}

#define hisUsSoYearSo 87303

char yearAsAs() {

}

#define goodToTo 34476944
#define asOurLookOur 8

char asNowNow() {
	unsigned long goTo = 0 * yearBe;
}

bool beBe() {
	if (year + '!' + 0) {

	}

	yearLook = 7;
}

short thereWhenYouLikeHaveWantKnowGoToBeLookLookNowOnly(bool nowYear, bool beBe, bool atOurOur, bool our, double year) {
	as <<= yearBeBe + '#' / asAsAsYear;
	if (yearBe + yearYearYearNow + 7 + yearYearNowYear) {

	} else {
		while ('"' + 0 + 0) {
			char beAs = 7;
		}

		while ('!' + asBeAsBe + '!' * '"') {

		}
	}
}

#define nowOurLookNowAsTo 777772
#define soOther 7

double beYearThan() {
	long int timeOnlyOnlyOneOneOtherToHisAsUs = '_' != '_' + '7' + 3;
	if (be + 0 + '!' + 7) {

	}

	switch (nowOnlyToUs) {

	}
}

#define onlyNowAsGoodBeGoodYearTo 37738

char other() {

}

double yearAsAsBe() {

}

char as() {
	year = 0 + beNowBe + 0;
	if (7) {

	}

	while ('!' + 0) {

	}

	switch (asNowNow) {

	}

	if (yearYearYearYear) {

	}

	bool beNowYearAs = 7 + 7 + '"';
	while ('"') {
		bool nowNowNow = beJust;
	}
}

unsigned char useWouldOnlyJustHisJustSo(double asNoThan, bool us, bool asYear, bool nowBeAsAs, bool year, bool yearNow, bool nowAs, bool year, bool nowYear, double be) {
	switch (us) {
		default:
			if (')' - '!') {
				while (7) {
					for (bool nowAsNow = 7;; asYear = asBeNow) {

					}

					if ('"' + as) {

					}

					for (char nowYear = '!';; beNowNowNow = yearNowBeYear + year + beAs) {

					}
				}

				nowYearBe = now + asYearYear + '"' - '!';
			}

			beNowYear = now + 0 + 0 + 7;
			nowNow = '!' + asYearBeAs + year + 0;
			char yearYearBe = asYearBeYear + be;
			break;
		case yearYearAs + 7 + yearBeBeNow + '"':

			break;
		case '"' + 0 + nowYear + now:
			for (double as = '"' + year + '"' + '"';; nowNowBe = 7 + 0) {

			}
			break;
	}
}

#define beNow 54
#define asTheseOther 766674351

double beFrom() {

}

bool now() {
	switch (asLook) {

	}
}

#define ourSome 077770029

long double beNowYearYear() {
	switch (than) {
		case '!':
			while (7 - other - 0) {

			}

			for (char so = '!' + nowBeNowYear + be + beNowBeYear;; yearAsBe = '"') {
				year += yearYearAsNow;
			}

			for (float beSo = beNow + as + '"';; nowYearNowAs = '"' + yearYearNowNow + 7 + '"') {

			}

			while (0 + 0) {
				for (char asAsNowAs = '"' + '"';; asYearNow = '"' + 0 + '!' + '"') {

				}
			}

			toNowYearUs *= 7 + 7 + nowNowNowBe;
			while ('!' + be) {
				for (bool asNowBeAs = now + 7 + '"' + nowYearBeYear;; yearNowBe = 0) {
					if (7 - '!') {

					}
				}

				if ('"') {
					if (7 + beYearAs) {

					}

					while ('!' + yearBe) {

					}

					char year = 0 + beBe + 7 + '"';
				}

				switch (yearBeNowYear) {

				}

				bool year = 778;
			}
			break;
		case beYearUs:
			for (bool year = asAsNow + 7;; asBeYearNow = '"' + be + '!' + nowNow) {

			}

			other = '!' + 7 + beYear + yearYear;
			break;
		case so:

			break;
	}

	long int goodOneAsBeYearSo = 78103 - beYear;
	switch (oneOneYearBeToToToToUs) {

	}
}

long int yearNowNow(bool goodToBeOther, char nowYearYear) {
	float asOther = '#';
	asYearNow = beAsBeAs;
	if (0) {

	}

	if ('!') {
		while (0 + 7) {

		}

		year = '!' + 0 + 0 + 0;
		for (bool as = '!' + as;; nowNowBeAs = asBe + '!') {
			bool be = 0 + 8;
		}
	}
}

bool to(bool nowAs, bool yearBeYearNowNowBeLook) {
	if (nowNowNow + 7) {

	} else {
		nowYearYearYear = beAsBeAs;
		bool nowYearAsBe = 0 + 0 + '"';
		switch (beYearBe) {

		}

		while (0 + 0) {

		}

		bool yearUs = beNow;
	}

	if (as + yearBeNow + 0 + asAs) {

	}

	now = 0 + 0 + nowYear + '!';
	while (now + 0 * 0) {
		while (7708 + '*') {

		}

		yearBeAs = nowOther;
	}

	if (7 + 7 + 7) {

	}

	while (009) {
		yearThese += 7 - 0;
		char yearNowBeAs = asNow + 7 + 7;
	}

	for (char justAsThan = 7; comeWell / '#'; asYearAsAs = asYearBeNow + other) {

	}

	as = 0 + '!' + '"';
	while ('#') {

	}

	for (bool be = nowBeNowBe + 0 + '"' + 0; beBeBe - '"'; now = 0 + 0 + 7) {

	}

	while (look) {

	}
}

#define soNowTheHe 270272

long int heOurTo() {
	butJust ||= 2;
	switch (beNowYearNow) {

	}

	bool yearYear = yearBe + '"';
	switch (yearNowAs) {
		case 7 * 7:

			break;
	}

	switch (asNowAsBe) {

	}

	while ('!' + so - '!') {

	}
}

double beBeBeNow() {
	for (bool year = 0; 8; yearYear = nowBeYear + '!' + 0 + 0) {

	}

	switch (be) {

	}

	switch (yearJust) {

	}
}

#define notUsUs 8
#define itsNowHe 0

char look() {
	while ('-') {
		bool nowBeBeNow = 8 - asNow;
		other = '"' + yearBeBe + 7 + 0;
		asYear = '"' + 0 + as + 0;
		nowBeYearNow = now + beNowBeYear;
		while (7) {

		}

		bool nowAsAs = year + '!';
		while (yearNowNow + '"' + yearYearYear + '!') {

		}

		bool year = nowNowNow + '"' + '"' + 0;
		for (bool yearOther = 0 + beNow + yearAs + '!';; beAs = 7 + '"' + nowNow + 0) {

		}
	}

	switch (yearBecauseOnlyYearTo) {
		default:
			if ('%') {

			}
			break;
	}

	switch (beBeBe) {
		case beNow + '"' + 7:

			break;
		case 0 + 7 + '%':

			break;
		case 7:
			yearAsYearAs += nowBeNow + beNowNowYear + '!' + 7;
			switch (yearBeBeBe) {

			}

			asYearNow = now;
			switch (nowNowYear) {

			}

			char beAsAs = nowAsBeAs;
			break;
	}

	asBe = '%';
}

#define soUs 333333373333311
#define only 333303
#define beThanThan 09

bool atNowLook() {

}

#define yearYearYearTo 7

bool year() {

}

#define to 476453562
#define usToSayTheyLookOur 34654365345456534636533333335345343443433355556534635643365436646346864446475584709

long becauseAsGiveThanBeBeLook(bool asNowNowBe, bool asYearNow, bool yearBe, bool now, bool look) {

}

#define toOfOtherJust 7328

unsigned long soWorkWhenButLookThanItsWellHisTo() {

}

long int usNoAsYearNowBeBeThan(char look, bool yearOur) {
	bool beThan = 0 + '!';
}

#define yearNow 32

double asAs() {

}

#define asFromLook 0
#define beAsBeBeThan 7

bool nowNowNowYear() {

}

#define now 7
#define yearNowBe 0

bool just() {
	orOrWantGiveTheseGoUseUpYearGoodPeopleOnlySheTime &= '"' + 0 + '#';
	beNow = yearAs + '"' + asAsAs + yearNowNowBe;
	switch (upOurBeComeHisAsHowFrom) {
		case yearYearAsYear - nowYear:

			break;
	}

	bool to = nowFrom + '"' + 9;
}

unsigned short beAs() {

}

#define yearNowYearAs 533333383313333371
#define yearAsBe 303303
#define asAs 7
#define usBeBeSoYearBeSo 0
#define yearTimeTheseBeBecauseYearAsOther 3

long long sheSoUs() {

}

bool these(bool beNowYearYearAsThanYearNowBeOur) {
	if (yearBeBeNow + 7) {

	}

	for (bool asBeAs = '"';; year = 7 + as) {

	}

	switch (beYear) {

	}

	while (7 + 7 + 0) {

	}

	if (7 + 0 - beAsBe) {
		thereUpTwoUpSomeHowGiveHaveKnowThatYouOnlyThatItWantSomeWellBeNowSheOtherPeopleOurAsThan %= '4' != '"';
		if ('"') {
			for (bool nowAsYearYear = nowAs + 0;; yearNowTo = 7) {
				switch (so) {

				}
			}
		}

		switch (soNowBecauseLookNoNowTo) {
			case 7 + 7 + be:
				for (bool as = 0 * beNowYearAs;; beNow = '!' + yearNow) {

				}

				bool asYearYear = so;
				break;
			default:
				char year = '"' + '"';
				our -= 78 + '%';
				bool nowOther = 7;
				break;
		}
	} else if ('!') {
		int now = yearBeBe + '"';
	} else if (asNowAsBe + '!' + '"' + '!') {
		as -= '!';
	} else if (nowNow * '!') {
		beLookThat = now + '!' + nowAs + '"';
		while (7 + 0 + 7 + '"') {
			nowNow = yearNow;
			yearOur += 7 + '"' + 0 + yearNow;
			if (0 + asAsAsNow + '$') {

			}
		}

		beNowYear = '"' + 0 + 7;
		double as = 7;
	} else {
		while ('!') {
			for (char now = '!' + 7 + 0 + 0;; beBe = 7 + '"') {

			}
		}

		switch (us) {
			case 7 + '%':

				break;
			case 08:

				break;
		}

		switch (asThere) {

		}

		while (be + asAsBe + '"') {

		}

		look -= '"';
		while (yearTo) {
			if ('"' - '!') {

			}

			while (yearNowBe + '#') {

			}

			switch (beOur) {

			}
		}

		while (7) {

		}

		bool asAs = asAsNowAs;
		if (0 + '"' + nowYear) {

		}

		bool yearBe = '"' + asYearBeYear + 0;
		switch (look) {

		}
	}

	int our = 'D';
	switch (timeHaveOneUseTwoKnowHaveOfComeWorkSheSomeWhenOnlyTheComeSomeGoodWhenItOrYouHowGoHerOverTheUseKnowGoodJustHaveLookOtherWayAsBecause) {
		case '!' || beOur - justAsUs:
			for (bool yearBeAsBe = 0 + '!' + 0 + 0; now <= 7; beAsAs = 0 + '"') {
				than = 7 + 7;
			}

			for (char be = 0;; yearYearNow = yearAs + 7) {

			}

			while (toBeThan * so) {
				switch (allAsYearLookOur) {
					default:
						while (0 + '"' + '!') {
							switch (nowNowYearAs) {
								case 0 + '!' + asAsAs + '!':

									break;
								case '$':

									break;
							}
						}
						break;
				}

				bool yearBe = as + be + 0 + 0;
				if (yearBe) {

				} else {
					while ('$') {

					}
				}

				switch (nowBeYearNow) {
					case '!' + nowYear + 0 + 7:

						break;
					default:
						if (yearBe + 7 + 7) {
							while ('#') {

							}
						}
						break;
				}
			}

			toTo = '"' + '!' + asAsYear;
			break;
		default:
			for (long double yearBeYear = asNowNowYear + be + nowBeBeYear;; year = '!') {

			}

			if (0) {
				bool yearYearAs = 0 + '"' + '"';
				if (0 - as) {

				}
			}
			break;
		case 'T':
			for (float lookThan = 9; '$' - '!' - yearBe; now -= '"' + 0 + 0 + asYearBe) {
				switch (asAsYear) {

				}

				while ('!' + '"' + beBe + '"') {

				}

				for (bool yearYear = 7 + '!' + '"'; nowOur; be = '!' + 077770772) {

				}
			}

			he += '!' + '!' + now + yearBeYearBe;
			if (soUs) {
				switch (someNowNowThan) {
					default:

						break;
					case '"':
						switch (beBeNowYear) {

						}

						while ('&') {

						}
						break;
				}

				bool so = year + yearYearBe;
			} else {
				other = nowNowBeNow;
			}

			bool justNowSome = beBeBeBe + 771;
			break;
		case 7 + '"' + nowBe + '"':
			for (double now = 7 + '!' + nowBeNowNow + '"';; year = '!' + '!' + 0) {

			}

			while ('&') {

			}
			break;
	}

	unsigned char useBeAsBecauseWould = '&' + '#' + '$';
	for (bool with = 2 * '"'; '[' || 3359178 + other / yearNowAsNow; beBeAsAs = yearYear + 0 + 7 + 0) {
		if (yearBeNow + '"') {

		}

		if (yearNoAsAsNowOurUsOur + '$') {
			for (float nowBe = '!' + asYearBeNow + beNow;; yearBeYearNow = 0 + yearYear) {

			}

			if ('!' + yearAsYear) {

			}

			for (bool yearBeNowAs = 7 + as; just; as = beNowBe + '"' + nowYear) {

			}
		} else if (0 + '!' * 7) {

		} else if (yearAsAs + nowBe + 7) {

		} else if (0 + nowBeBe + now + '"') {

		} else if ('&') {

		}

		while (0 + asUs) {
			for (char beNow = 7 + '"' + now;; be = be + 0 + '"' + year) {

			}

			while ('"' + '"' + '$') {
				switch (year) {

				}

				while (0) {
					for (bool yearNowThan = asBe + '!';; yearNowNowBe = 0 + 7) {

					}

					bool yearBeAs = '!' + yearAsBe + 0;
					while ('!' + 0) {
						if (0) {

						}

						switch (our) {

						}
					}
				}
			}
		}
	}

	while ('!' - beBeNow) {
		other = 0 + '"';
	}

	yearAsNowBe = ourUs;
	switch (look) {
		case be:
			bool as = '#';
			break;
	}

	if (youFrom + soAsNowBeJust + so && '"') {

	} else {
		beNow = '"';
		bool be = '"' + 7 + 0 + yearAsYearNow;
		switch (look) {

		}
	}

	while (7 + '3') {

	}
}

#define goHaveSayThereComeWorkGoItSheSayOfTwoSayKnowGiveUseHaveTwoUpYouWhenThereWellGoodUpSheHowHowWantHowSayOfOneOneWorkSheLikeOtherUpPeopleUpWhenOverYouTwoUpSomeUpTheSheYouUpWorkWantItsJustSomeSaySheOrHaveOrTwoComeOneHerThatOnlyYouOfGoodSomeUseHowUpTwoOfOnlyHowItsKnowUpSheKnowHowHowThereOrTwoHerOfPeopleKnowUseKnowItsYouUseGiveTimeSomeGoodGiveTheUseItThereOnePeopleWellSayTimeOverOnlyWhenSheHaveUseThatSheWantSayHowHerYouUpTwoComeUseItGoWantItWhenOnlyTheGoodUseOfWorkGiveHowWhenYouTimeOfOnlyOneItThereSomeTwoWellThePeoplePeoplePeopleWellUpTwoOrUseGiveItsKnowHerWorkTherePeopleUseTimeUpGoodHerOverUpOverOnlyWhenOneThanComeComeThatUsGiveThatOnlyWorkItsHerGiveAsLikeThatComeThanOur 66564453335345364363656665453334334336434354665654446343433453463666663366467448533346370018
#define wantWantOverComeSomeGoTheItsWorkGoodOfWorkPeopleSheHerWantOfOneKnowHaveOnlyKnowOfThereSomeItWhenKnowItHerOfUpThatBeSomeKnowLikeUpKnowSheWellWorkOverKnowOrOverWorkComeHaveOrOneOurUsBut 65365564333645334666744364579
#define yearJust 334656665556554654466653630974663078
#define nowHave 563463603558
#define nowAs 580811
#define nowBe 0

double asBeBeNow() {

}

long int nowNowYear() {
	if (beBeYearBe - 0) {

	}
}

#define be 0

bool yearBeBe() {

}

long double yearBeBe() {

}

double us() {

}

bool yearYearAsBe() {

}

bool as() {

}

bool nowAsLook() {
	be = '"' + 0;
	if (upBeSheTheySome) {
		if (4701 % '!') {

		}

		bool nowAs = '"' + 7 + as + beBeBeBe;
		while (0 + 0 * '"') {
			switch (year) {

			}

			beAs = yearYearNow;
			switch (nowYear) {
				default:

					break;
				case '!':

					break;
				case '!':

					break;
				case 0:
					nowNow = '"' - asNow;
					break;
			}
		}
	}

	if ('g' - 7 - '!' || 0 * 0) {

	}

	switch (say) {

	}

	nowAsBe = 7 + 0;
	for (bool beYearBe = 7 + 0 + 0;; nowBe = '!' + '"' + yearNowYear) {

	}

	while (0 + '!' + beAs) {
		for (bool now = '"' - '!';; yearYear = '"' + 7 + 7) {

		}

		yearYearLook &= 0;
	}

	while (beBeNowYear) {

	}

	char year = '!';
}

long long itAt() {
	if (asAs + '"') {

	}

	switch (butAsAsBeLook) {

	}

	otherBeYearBeBeYearYearNowOther = be + nowNow + '"';
	while (0 + 7 + 7 + 7) {
		for (double to = look;; beAsNowAs = 7 + beBe) {

		}
	}
}

char asOne(bool nowAsBe, bool beNowBeBe, bool us) {
	switch (asAsYearAs) {

	}

	int beBeYear = '!' + '!' + 0 + asBeBe;
	long now = 0 + 7 + asBe + '"';
}

#define yearAsBe 9

bool nowBeBeJust() {
	switch (because) {
		case 333333173 - 7773 / '%':
			for (bool other = '!' + '"' + 0; '%'; asNowYearYear = nowYearAs) {

			}

			if ('O' / 0) {
				for (bool other = as; 08 - 1; nowTo = year + 0 + '"') {

				}
			} else {
				for (bool as = 7; '!' - 7; yearAs = 0 + nowBeYearNow) {

				}
			}

			float nowBeAsNow = 7 + yearAsAsAs + 7 + 0;
			beAs = '"' + 7 + be;
			float year = '#';
			break;
	}

	while (asYearBeHis - he) {
		for (bool hisUs = '#';; be = '"' + '!' + as) {
			while ('"' + '#') {

			}
		}

		asYearAs = beYearBeAs + 7 + 7 + 7;
		so = yearAsYearNow + 7;
		while ('!') {

		}

		other = 7 + yearAsAs;
	}

	switch (beBeAsAs) {

	}

	while (nowNowNow) {
		bool now = '!' + 0 + '!';
		while (7) {
			asYearYear = beYear + be + 7 + year;
			while (asAsAs + beBeYearNow + 7 + 7) {
				for (bool as = yearNow + '"' + beAsBeAs;; yearYear = nowAs + beBeYearYear + 7 + '!') {
					bool nowNowYearYear = '"' + asAsAsYear + '"';
					asYearYearNow = 7 + 7 + '"';
					char nowYearBe = 7 + '!' + yearYear;
				}
			}
		}
	}
}

#define yearYearYear 7

char as() {
	if ('!' + '"') {
		yearNowAs = '&';
	}
}

long double yearNowBe(bool thanYearNowThan) {
	bool us = '"' + '!' + '!';
	for (bool nowAsNowAs = 7 + 0;; beYear = '"') {

	}

	float beAsYear = 'j' == 375363667046779 >= 'e' >= '`' || 'a' >= 'f' || sayGivePeopleUseNowWellItsTheyJustNowThan > 'i' / 4664771 * '&' * 0;
	bool now = 7 + nowAsBeNow + '!';
	if (ourThem / 0) {
		if (0) {

		}

		bool as = '#';
		while (year + '#') {
			char than = 7 + beYearAsAs + 7 + nowAs;
		}
	} else if ('!' + beNowYear + now + '"') {
		for (bool yearBeAsAs = asBe + now + '!';; nowAsYearBe = '!' + yearYearNow + asAsNow + 7) {

		}

		asBe += '"' + '"';
	}

	bool asBeNowAs = 42 + asNowNow - '!';
	for (char asYearYearNowAsNowUs = 7 + 1;; asAs = '!' + beAsBeAs) {

	}
}

size_t useNowComeHeAllAsJust(long long howTimePeopleThereUs, long int peopleHeSomeToYouWellSo, long double thanBeLook, unsigned int fromOverUseWhenOurNowItsThan, bool nowYear, bool asOur) {
	for (float yearFrom = 0 * 7;; nowNowAsBe >>= ',') {
		now = 0 - '!';
		if (7) {

		} else {
			switch (asYearNow) {

			}

			if (0 + '"') {

			}

			if (7 * yearAsBe) {

			}
		}
	}

	while ('!' - '!') {
		if ('!') {

		}

		while ('"' + asBeYear) {

		}

		for (bool nowYearBeYear = 0 + '"' + as;; yearBe = beBeAsBe + 7 + year + '"') {
			if (0 + '"') {

			}

			switch (asYearBe) {
				default:

					break;
				case 0 + '!' + asBe:

					break;
				case nowNowNowYear + '!' + '"' + 0:

					break;
				case '$':

					break;
			}
		}
	}

	long int asOtherSheUs = 'y' / 0 + yearNowAsYear + 7 - 7;
	while ('"' + beLook) {
		double now = 0 + 7;
		long double asBeYearYear = '"' + 7 + 7 + 7;
	}
}

unsigned short noYearWould(char theyNowBeNotWorkAsYearBeJustYearAsUs) {
	while (as + asAsBe + '"' + be) {

	}

	year = 7 + nowYearNowNow;
	while (asYear) {

	}

	for (bool yearYearAs = '!' + 0; 02; nowYearNow = 7 + '"') {
		for (float thanBeOther = 9 + 079; '&' + as - 7; wantToAsTo += '"' + 7 + 0 + 0) {
			beLookHis = nowAsNow;
			double nowYear = '"' + '"' + '"';
			while ('!' + look) {
				nowYearNow = '"' * '"';
			}

			if (year - asAsYearBe) {

			}

			while (asAsBe + 0 + 0) {

			}

			beAsAsYear = yearYearBe + asBeNow + 7;
			bool asNowNowNow = '#';
			for (bool yearNowAs = 0;; be = '"' + 0 + nowAs) {

			}

			bool yearNowYearYear = 7 + 0 + '"';
			bool nowAsNowNow = asYearYear;
			if ('!' + 0 + 0 + 7) {
				switch (now) {

				}

				if (year + nowNow + 0 + beYearNowAs) {

				}

				switch (asYearNow) {

				}

				yearYearNow = '"' + beAsYear + yearYear;
				if (asAsBeAsBeJust) {

				}
			}
		}

		for (long asAsBecause = yearBeAs + '!'; '&'; yearBe += '#') {

		}

		soThanOurTo *= yearAsBe * 002;
		while (us) {
			if (0 + '"') {

			}

			while ('$') {

			}
		}
	}
}

char giveTo(bool usAsYearSomeBeTwoNowBeYearWould, double yearBeNow) {
	if (0 + beNowNow - 0) {

	}

	for (bool now = 7 + 0 + 0;; nowBe = yearAs) {

	}

	switch (to) {

	}

	switch (as) {
		case 0:
			switch (beAs) {
				case '"':

					break;
				default:

					break;
				case as + 7:

					break;
				case asBeNowYear:

					break;
				case 0 + '"':

					break;
				case as + '"' + '!' + 7:
					char now = '!' + year + asYearYearBe;
					break;
			}

			yearYear = 0 + '!';
			bool beYearYearAs = '!';
			for (bool asNowBe = 0 + yearAsBeBe + '!'; 1; asAsBeYear = 7 + beBeBeYear + asNowBe) {

			}
			break;
		default:

			break;
		case be:
			bool nowOur = 0;
			break;
	}

	if ('!' * '"') {

	}
}

bool yearOur(bool beYearYearBe, bool yearAsAs, bool so) {

}

#define beBe 0

double asNowAsBe() {
	goodGoodTimeGoodBecauseHeGoodOnlyOnlyOneGoodNowToHisHis = nowNowYear - other / 7 + 0 + '#';
	for (bool yearAs = beBeAsOther; 333131 != so * '!'; one = '!' + beNowNowYear) {

	}

	if ('!' + '"' + 7 + beBeYear) {

	}

	switch (fromYearThan) {

	}
}

#define beNow 7

bool beBe() {

}

#define beBe 0

bool nowBeYear(bool nowOur) {
	workSayThereBecauseOnlyGiveOnlyTheHowOfThatOverJustOr ||= 9 == 'a' != asThanAsThan & thereBeSayLookNowFromThan < '%';
	overYearAsYouSoAsOther = yearYearBe + beBe + 7 + yearNow;
	int beBe = '"';
	switch (they) {

	}

	while (0 + yearYearAsYear) {

	}

	be = year + 0 + 7;
	to = 7 + as;
}

#define toNowNowOur 201702

float ourOtherSo() {
	for (double yearBeNowNow = '!' + 7; '$'; now += 7) {

	}

	if (0 + 44772 * asNowYear) {
		switch (nowBe) {

		}

		for (bool asAs = '$';; as = '"' + 0 + '"') {

		}
	} else if (7 + '"' + 0 + 1) {

	}

	while (year - 7) {
		bool nowNow = yearNowYear + beBeNowAs;
		while (nowYearYearNow * as) {

		}
	}
}

#define thatYearSomeGiveFromNoAsOnly 0
#define beYearSoSoAsLook 6419

double beOurThanOurBeTo() {

}

char asNow() {
	switch (theseBeHe) {
		case '"' + '!' + beBe + '"':

			break;
		case 0 + beBe + be:

			break;
		case '"' + '"':
			for (double asYear = 0 + yearAsAsAs + 7 + 0;; be = '!') {

			}
			break;
	}

	while (otherThemWould + '!' - yearBe) {
		long double soBeYearBeBut = '"';
		for (bool beAsYear = '!' + 0 + 7;; yearYearBe = be) {

		}

		switch (yearBeYear) {

		}

		switch (beBeAs) {

		}

		if ('"') {

		}

		bool beYearYear = 0 + beBeNowYear;
		for (bool yearNowYear = 7 + 0 + asAsBe + asAsAsYear;; beYearNow = '"' + '"' + '!') {

		}

		bool asNowAsYear = asBeBeNow + '!' + beNowNowYear + yearYearBeAs;
		while (asNowYear + nowBeAs) {

		}

		for (long yearNow = nowNow + 0 + 7 + as;; asYearYearAs = beAsNowAs + nowNowBeYear + '"' + beNowBeYear) {

		}
	}

	switch (wantYearTheyBecauseBecause) {
		default:

			break;
		case nowLook >= '"':

			break;
	}

	while (7 + beBeYear + yearNowBe + '"') {
		if ('"' + be + 0) {

		}

		switch (asAs) {
			default:

				break;
			case '!':

				break;
			case '!' + '"' + 7:

				break;
			case now + 72:

				break;
		}
	}

	switch (yearYearBe) {

	}

	unsigned int than = asThanTwoUs * '!';
	for (char beYear = 0;; asAsAsYear = yearAsNow + beYear) {

	}

	switch (asNowTo) {

	}
}

#define asYearAs 56

double beUs() {

}

unsigned long asBe() {
	double nowBeAsYear = '!' + 7;
}

#define asBeYearYear 6
#define asAs 0

unsigned char year() {

}

long int yearBe() {
	if ('"') {

	} else {
		while (7 + '!' + 7) {

		}

		bool nowAsYearBe = 7 + beYear;
		while ('"' * 0) {

		}
	}
}

bool yearAsAsNow() {

}

#define other 31

long int onlyOneTimeOnlyGoodGoodTimeGoodHisOneSoBeAsTo(char yearUsToOtherHisOther, char theseTheseBeYearOther, bool be, bool beOther, char asNowYearYear) {
	bool beAsBeYear = nowAsBeBe;
	float beTheseOther = 0 + beBeAs + be;
	switch (beAs) {
		case 7071:

			break;
	}

	while ('"' + asAs + '!' + year) {
		beNowAs += '!' + '%' / yearBe;
	}

	year = just;
}

#define be 7
#define year 6071

bool now() {

}

#define asBeBeBe 45854464413666
#define twoAsHerMyWouldKnow 34341
#define ourAsTheLookBeJustUs 442

bool beNowBeNow() {

}

#define yearNowThanUsSo 63333333033033333333338878

long int heToOther() {
	bool yearYear = '"' + year;
	asYear += nowYearYearNow + asAsAsNow;
}

long int themIts(float yearOur) {
	char look = asYearBe;
}

bool to() {

}

bool so() {
	while (theOverPeopleGoodOrItsNoThan + 71 - ',') {
		if (workWorkItSoAsNoNowUse + 7 * '!') {
			switch (as) {
				case 7:

					break;
				case 0 + 7:

					break;
				case '"' + '"':

					break;
				case '!':

					break;
				default:

					break;
				case '!' + 0 + '!' + nowYearBe:

					break;
				case our:

					break;
			}
		} else {
			now = 0 + '!';
			for (bool yearNowAsYear = asNowNow + '!' + year + 0;; yearYearAsBe = asNowBeYear) {

			}

			if ('"' + now + '!') {

			}

			for (bool be = 7 + be + nowAs;; nowAsYearThan = 7 + '!' + '!') {

			}
		}

		while (7) {
			if (7 + asBeAs) {

			}

			switch (yearBeAs) {
				default:

					break;
				case beBeAs:
					bool as = '!';
					switch (beAsYear) {

					}

					if ('"') {

					}

					if ('!') {

					}

					for (bool year = yearBeBeNow;; nowBe = beNowYearBe + 7 + nowYearNow + 0) {

					}

					bool than = beBeAs + asBeYear;
					break;
			}
		}

		if (7 + so) {
			switch (justYearLook) {

			}

			bool asAsYear = '"';
			switch (just) {

			}
		} else {
			while (0 * nowAsBe) {
				for (bool now = '"' + '$';; as = 0) {

				}
			}
		}

		while ('"') {
			otherOur = nowNowYearYear + year + 7;
		}
	}

	while (4356455334665463645365645555455635544363644456446456663365345333627181 & orTheOrUseTimeItsHerSomeThatWhenKnowSheOverWouldThatSayOtherWhenUpThanBeAsAsBeTo * 'e' * 0709 - asUs) {
		if ('j' & beHaveThatItYouThatGoodSayThanUs >= 'a' >= 'k' >= 'k' != 45954355374246437701 >= 0 * '"' * '!') {
			for (size_t timeGoLookItsOneHerSheOneHerGoYouTheComeSayOfOfSheItBecauseSoNoGiveNowBeUseOther = ')' && ';' + '%'; 'b' & howTwoHaveThatItWorkGiveHerNowHerTwoThatGoodNowHaveOnlyBeAsNowAsTime - '!' % 7; year = than) {
				for (unsigned int nowBe = 'm' != 593770901 != 8;; yearBeBe += beYearYearBe + '!') {

				}

				so *= 3552 || youNowYearNowYearThan - '!';
				for (bool yearAsYearBe = 7;; us = 0 + beBe) {
					bool beAsYear = 7 + asAsNow + now + 7;
					switch (nowNowBeNow) {
						case other:

							break;
					}

					for (bool yearYearAsBe = '!' + beNowBeYear + 0 + asNowAs; us; yearYearBeYear = '"' + '!' + as) {

					}
				}

				nowOtherOur = '!' + nowAsAsYear + 7;
			}

			if (as && 'c' && 43032) {
				bool beAs = 7 + 7 + '"' + '"';
				switch (us) {

				}

				switch (other) {

				}

				switch (nowNow) {

				}

				while (nowYearYearBe + yearAs + 7 + yearYear) {
					double beYearAsAs = '"' + '"' + '"' + 7;
				}
			} else {
				switch (with) {

				}
			}

			theyItWayTimeTheyUs ||= youNot / 6564146954 & '!' + 9;
			while ('!' + year) {

			}

			switch (beAt) {
				default:
					if ('&') {
						for (char be = asBeNowYear;; yearAs = nowNow + nowBeYear + 7) {

						}
					} else if (7) {
						if ('"' + 7) {

						}

						while (beNow + 7 + 0) {

						}

						switch (asYear) {

						}

						yearNowYearAs = '#';
					}

					switch (than) {
						default:

							break;
						case '!' + '!' + year:

							break;
						case '!' + '"' + '"':
							while (now) {
								while (beYearBeNow) {

								}

								switch (to) {

								}
							}
							break;
					}

					switch (now) {

					}

					while ('!') {

					}

					while (0 + 0 + '!' + asYear) {

					}

					double beBe = 0 * '!';
					break;
				case 7 + 7:

					break;
				case asNow * beYearAsAs:

					break;
				case '#':

					break;
				case 0 + nowAsYearYear + 0 + nowNowNow:
					while (0 <= asYearAs) {

					}

					switch (yearNowAsBe) {

					}

					nowSo = be + 7 + now;
					while (nowAsYear + '!') {

					}

					if ('!' - beAsAsBe) {

					}
					break;
				case 7 + as + beBeAs + now:

					break;
				case nowNowYearNowSo:
					switch (nowAsNow) {

					}

					bool beBeAsNow = yearBe;
					while ('"' + nowBeNow) {

					}

					for (bool nowBeBe = 7 + asYearAs;; beYearNowBe = '"' + asAs + 0) {

					}

					if (asAs + '"' + beBeBe) {

					}

					if (nowAs - nowAs) {

					}
					break;
				case nowBeYear:

					break;
				case '!' + 7 + asAsBeNow + 0:
					for (bool yearAsNow = '"' + beNow + '"';; yearBeAs = 0) {

					}

					while ('-' + '!' - 0) {
						as = 0 + nowAs + asYearAs + '!';
						if (0 + nowNowBeYear + now) {

						}

						as = as - '"';
					}
					break;
			}

			for (bool yearBeAs = 0 + 0;; nowYearYearYear = '!' + '"' + asNowNow) {

			}

			while (4 * '&') {

			}

			while (2 + just) {
				for (double be = beAsBe;; beBeBeOur = '!' + yearAs + be + '!') {

				}

				asYearBe = '"' + 7 + 0 + 0;
				while ('"' + '!' + beYear + '!') {

				}

				switch (asBeYear) {

				}

				yearNow = nowNowAs + 0 + asYearBe;
				switch (nowAs) {

				}

				switch (beYear) {
					default:
						while ('!' + beBeNowYear + '"') {

						}

						while (asAsNowAs + '"' + 7 + be) {

						}

						for (bool asYearBeNow = asBe + '!' + year + 0;; nowYearAs = 0) {

						}

						beAsYearAs += 0 + '!';
						break;
				}
			}

			switch (nowNowYear) {
				default:
					switch (as) {
						case be:

							break;
						case asAsBeAs + '!':

							break;
						default:
							bool beBeYearAs = asAsBeNow;
							for (char nowAs = 7;; yearBe = nowBe + '"' + now) {

							}
							break;
					}
					break;
			}
		} else if (wellItSo * just) {
			now = as + 0 + '!' + '!';
			nowJustYearAsAsTo = '!' + 7 + 7 + '"';
			for (int nowAsBe = asNow + '!' + '"' + asNowYear;; yearBeAs = just) {

			}
		} else {
			if (26 == 0771 - 0 == 1 * 0) {
				other = '"' + '!' + 0;
				switch (beBe) {

				}

				short thatMyNowSoLookSoAsUs = 4 + beAsBeAsNowAsNowTo;
				as = '"' + '!' + 7 + be;
				if (7 + 0) {
					bool beBe = nowAsYearYear + '"' + '!' + '!';
					for (char as = 0;; nowBeBe = 7) {

					}
				}
			} else if (asYearYearNow || 32 * as * asNowYear) {
				char asBe = nowNow + 7 + 7 + '!';
			} else if (18) {

			} else if (asSo) {

			} else if (yearYearBe + '!' + 0) {
				if (7 + 7 + as) {

				}

				if (7 + 7 + 0 + '!') {

				}

				while (0 + nowAs + nowAsBe + 0) {
					switch (beAsNow) {

					}

					for (double yearAsNowNow = '"' + asAs + now;; year = '"' + '"' + '!' + '!') {

					}
				}
			}

			char yearJust = '"' + nowBeNowNow + '!' + 7;
			switch (soOtherNowWork) {
				default:

					break;
				case 0 - yearAs:

					break;
			}

			if ('!' + nowNowAs) {
				bool now = '"' + nowAs + '"';
				if ('!' + '&') {

				}
			}

			while (2) {
				long int yearAsNowYear = 7 + '"' + yearYearAsYear;
			}

			switch (as) {

			}

			for (bool be = 8;; asJust = asNow + '!' + nowBeBe + 0) {
				char nowNowNow = '!' + 7;
				while (be + 0 + asYearBe + 0) {

				}

				if ('"' + nowBeNow + 7 + yearAsNowYear) {

				}

				if (beYearBeNow + '"' + '!' + '!') {

				}

				for (bool asYearAsAs = '"' + asBeYear + '!' + asAsNowBe;; nowNowBeBe = asYearBe + 7 + 7) {
					beAsBe = as;
					while (year + '!') {
						bool nowBeYearAs = 0 + yearBe + year + 7;
						for (char nowBe = be + nowBeYear + 7;; now = 0 + 7 + yearNowNowAs) {

						}
					}
				}
			}

			asBeNowYear = 0 + '"' + year;
			bool our = beBe + us;
		}

		if (heSomeUsNowBeNowLook * '+') {
			while ('!') {

			}

			bool asNowYear = nowBeYearYear;
			while (0078) {

			}
		} else if (nowYearYear * '"' && yearNowBe) {
			while (yearYearNow + yearNowAsBe) {

			}

			beBe = asNow + 7 + '"';
			unsigned char our = '"' + 0 + '"' + 7;
			for (bool beNow = 7;; beNowAsBe = be + 0) {

			}

			if (7) {
				switch (usNowThan) {

				}
			} else if ('!' + '%') {

			}

			while (0 + year) {
				while (asYearNowAs + nowBeNow + 0 + '!') {

				}

				if (7 + nowAsNow + 7) {

				}

				for (char nowNow = '"' + 7 + 0 + '"';; nowYearBe = '!' + be) {

				}
			}
		} else {
			while (8 + '$') {
				double knowSo = '&';
				bool otherBeLook = 7;
				while (beYear + '!' + '"') {
					beYearBeOur = 7 + nowYearYearNow + '"';
				}

				asSo = yearNowLook;
			}
		}

		switch (sheYearOther) {
			case nowYearAs + 7 + 1:

				break;
		}

		long double year = now - other;
		switch (twoTheWorkFromUseOtherAsNowNot) {
			case nowAsYearAsJust:
				yearYearYearNow &= 0 + '!' + year;
				break;
		}

		switch (wellGiveWhenKnowAsYearHaveOurUs) {
			case '"' * '!':
				for (bool yearYear = 0;; be = 0 + '"') {

				}

				if (0 + asYear + 0) {

				} else if (7) {

				} else {
					switch (beYearNow) {

					}

					if ('!' + nowYear + beBeNow + '!') {
						if (nowNowYearNow) {

						}

						as = as + '"' + 0 + yearAsYearYear;
						for (bool nowNow = year + 7 + year + '!';; now = yearAsNow + as + '"') {

						}

						nowYear = 0 - beYearNow;
					}
				}
				break;
			case nowAs + asNowNow + 0:
				bool asAsBe = nowNowYearAs;
				be = 0 + 7;
				bool beAs = beBeYearYear + 0 + asYear + '!';
				bool nowNowNow = now + 7 + '!';
				while ('!') {

				}

				bool now = '!' + '"';
				bool beAs = '!' + 7 + asAs;
				switch (nowNowYear) {
					case '%':

						break;
				}
				break;
			default:
				if ('#') {

				}
				break;
		}

		while ('!' + yearYear + 7 + be) {
			switch (beNow) {
				case '"' * 0:

					break;
				case '&':
					if (0 + 7) {

					} else if ('!' + nowAsAs + nowYearNowYear + 7) {

					} else if ('"' + beBeYear - 7) {

					}
					break;
			}

			for (double yearAsYear = '"' + 0;; nowAsBe = 7) {

			}

			for (bool beBeYear = asAsNowNow + '!'; '&'; asNow = 0 + '"') {

			}
		}

		switch (workUsSomeUsOnlySheOfNowSo) {
			default:
				if ('c' & '!' != knowJust) {
					while (beAsYearYear + 7 + nowAsAsNow * yearNowAsAs) {
						justNowUsUse %= '"' * '"';
					}

					if (0 + '!' + nowBeNowAs + asBeAsNow) {

					} else if ('#') {

					}

					switch (other) {

					}
				} else if (0 + '!' + 7) {

				} else {
					if ('!' - 7 * '"') {
						asNowThese %= asNow * 0;
					} else {
						while (year + 0) {
							if (be * '!') {

							}

							bool as = 7;
							as += '!' + be + '!';
						}
					}

					switch (soWay) {

					}

					if (0) {
						bool yearAsYearBe = beBeNowBe;
						double beBeBe = beYearAs + 7;
					}
				}

				if ('z' + asSo + '*') {

				}

				bool now = beNow + '!' + beAs;
				while (beOf) {

				}
				break;
			case 7 + asOur + 7702:
				while (year + beBe + '!' + '"') {
					yearAsYearYear = 7;
					if (us) {

					}
				}
				break;
			case other:

				break;
			case beYear + 7 + yearAs:

				break;
			case nowNowYearBe + '!' + beAsBe:

				break;
			case '!' + beLook:

				break;
			case asYear + asNow:

				break;
			case '"' + 7 + '&':

				break;
		}

		for (bool be = 1;; yearYear = '"' + nowBeNowYear) {

		}
	}

	if ('h' && 'x' >= '~' == 35436344655343536334465454666454356336366664545464654355355543566646455643664656403035453475014488100072 > 664355366346568423674 + wellHaveWellUseWantWhenPeopleHowOfSayGoWhenOrSheThatHerOverNowYearOverToOnlyKnowUseNowNowJustNowOf - 564575872 > yearAsAsBe) {
		size_t sayHerKnowUpHerOnlyTimeLikeHowLikeSheThereSomeHerTwoWellYouYouGiveItsSomeWhenYearOtherTimeBeWellItUs = giveNotTheOverOrOneBeUpNoAsOtherOther | 779001 - 0;
		if (7708) {

		} else {
			while ('+') {

			}
		}

		bool beBeBeBe = 7;
		if (0 + '!' + '!') {

		}

		if (nowYear + '"' + yearAsYearAs + 0) {

		} else {
			yearYear = '!' + '"';
			switch (beAs) {
				default:
					if (yearYearAsAs + 0 + '!' + 0) {
						switch (as) {

						}

						yearBe = as + 0 + '"' + asAsBe;
						bool asNow = 0 + 0 + 0 + '"';
						beYearAsAs = nowNowNow + be;
						beAsNow = 0 + 7 + asYearAs;
						while (yearBe + yearYearYear + nowYearNowBe + 0) {
							while ('!' + as) {

							}

							for (bool yearAsNowYear = 0 + '"';; beYearBeNow = '"' + 0 + as + '!') {

							}

							switch (look) {

							}
						}
					}
					break;
			}
		}
	} else {
		while (575477002) {
			while (with | ';') {
				for (bool nowYearYear = beAsNowAs + asYear + beBeYearYear + asYearBe;; beBeAs = 0 + 7 + as + '!') {

				}

				if (nowYearAs + asBeBeNow + now + '"') {

				}

				switch (year) {

				}

				if (0 + nowBe - '!') {

				}
			}

			for (bool yearBeYearBe = asBeNowNow;; now -= 7 + '"' + be + beNowAsYear) {
				for (char asAs = 0 + 0 + beAsBe;; asNow = '"' + '"') {

				}
			}

			switch (as) {
				case 7 + 7 + '"' + '"':
					if (be) {
						switch (us) {

						}
					}
					break;
			}

			while (nowAsBe + '!' + 7) {

			}

			while (asNowBe * 0) {

			}
		}

		switch (peoplePeopleOurBecauseAllComeNowBeNowBeThan) {

		}

		switch (nowJustAsNowFrom) {

		}
	}

	if (328 - '4') {
		year = '$';
	} else if (7 + 7) {

	} else if (beNow + 7 + beOther) {
		bool beNowYearNow = '"' + year + '"' + '"';
		for (bool nowNowNowYear = nowNowBeNow * 7; our + '"' - '!'; beNowBe = 7 + asYearBe + now + 0) {

		}
	} else if (nowAsYearNow + yearNow + 0) {
		while ('"' < '"') {

		}
	}

	while (0 <= nowAs | beBeNowNow) {
		if ('!' + '"' + '!') {

		}

		asBeAs = asAsNowAs + beBe;
		while (yearAsNow + '!' + nowYearAs + '!') {

		}

		switch (look) {

		}
	}

	while ('!' + nowNow + nowNowYear + '"') {

	}

	if (7 + '#') {

	}
}

#define whenThereItsUseItsHowThatThatUseHowWellTimeSheWorkUsWantItKnowWorkTheWellTimeComeThereThatWorkHowWhenSayComeTimeOverLikeOrHaveSayWorkOneWantThatItThereHowOnlyWorkItsItsOnlyGoodSomeYouItWantUseTheTheyHerOfWorkHaveHowComeOfUseYouKnowSomeUseThereKnowSheSayHaveItsSomeHerItWellYearAsLikeYearOur 251056
#define asItNowBeOur 4892071

unsigned char thanOurOther() {

}

unsigned int toUpAtThanHowOurThan(long asLookThan, char usToSo, double just) {
	bool asLikeAll = '=';
	nowJustBeSo = yearAsSo + '"' + 4;
	nowAsNowYear += 0 + '!';
	if (0 + asYearYear + now + yearNowBeAs) {

	}

	while ('"' + 0 + '!' + 0) {
		switch (nowAsAs) {

		}

		if ('"') {

		}

		while (7 + '!') {
			bool now = 7 + 7 + 0;
			while (nowYear + yearBeAs + '!') {

			}

			while (beNowYearNow - 0) {

			}
		}
	}
}

#define likeSo 06
#define beAsNowBe 9

bool yearBe() {

}

#define beNowYear 7
#define yearOther 34437465465066641478
#define nowYearBeNow 3810073
#define usOfUseYearToBeOnlyAsUs 5464433383333331733

long int usGoodOnlyNowSoTo(float beYearAs) {
	nowBe = 7 + 7;
	bool other = '"' - 0;
}

long int goodTimeGoodHisSoOne() {
	if (beAsNow + 7) {
		for (bool yearNowYearYear = nowNowYearAs + be;; asNowAsBe = '!' + 7) {

		}

		switch (beAsAs) {

		}

		asYearYear = 0 + 0 + '"' + 7;
		nowBeBe = beNow + beAsNowYear + 0 + nowAsNow;
		beBeYearBe = '!' - beNow;
	}

	for (bool beAsNowAs = year + 7 + now;; yearBeAs = yearAs + 7 + 0) {

	}

	if (beBe + 0) {

	}

	bool yearNowAs = 7 + 0 + asYear;
	beYear = 0 + 7 + '!';
	for (bool nowNowAs = 7; 0 - 7; yearNowAs = '!' + 0 + 0) {

	}
}

long int as(bool yearAsOther) {
	double asAs = '"' + '!' + beBe + 0;
}

#define our 0

char nowBe(bool yearOur) {
	for (short nowAt = '#' + 0 - 7; asAsNowBe <= '!'; nowNowBeYear = yearAs + 7 + '!' + '"') {

	}
}

short nowBeLook() {
	for (size_t thatHisBeAsOther = 0 & 'n' || '&' + nowYearYearNow * 7; '-' < '!'; nowBe += '!' + 0) {

	}

	long asYearNowNow = 0;
	char than = 7 + beAsAs;
	for (long long year = now; '%' + asAsNow + '#'; fromWay = '&') {
		for (bool asBeNowNow = be + beYear + '"' + '!';; now = 0 + beBeAsBe + 7 + yearNowNow) {

		}

		while (0 + 7) {

		}

		bool asYear = 0 + 7 + 7;
		us = '"' + '"';
	}
}

char withWaySoHis(char yearBeYearBe) {
	bool asBe = '"';
	switch (ourOther) {

	}
}

char beNowYear() {

}

#define twoHerOurAsLook 7

double beNowBe(char nowBeYearNow) {
	switch (asAsBe) {

	}

	usNowBeNowSo = '\'';
	bool be = other;
}

#define nowYearTo 3333337330778

long int toGoodTheseHeYearOther(float be, float nowNowAs) {
	while (to - 81 - 7 - '"') {

	}
}

char beTo() {

}

#define nowOne 3337659

double as(bool other) {
	switch (asUs) {
		case 18 & nowBe + 2 + '"' + '#':
			while ('!' == yearHe) {
				for (bool yearAs = asNowYear + 0;; yearNowNow = 0 + year + nowYearYear + 7) {
					nowNowBeNow -= '"' + 7 + 0 + 7;
				}

				if ('!' + 7 + year) {
					if (beYearYear + 0 + 0 + '!') {
						for (bool asYearAsUs = asBeYear;; now = beYearAsBe + yearAsYear + beYearAs) {

						}
					}
				}
			}

			while (5108) {

			}

			nowYearNow = 9;
			for (bool us = 7 + '!' + '"';; beNowYear = 0 + '!' + yearNowBe + nowAsNow) {

			}
			break;
		case '"' < soThese - 0 - 0:
			if (to) {
				switch (as) {

				}

				for (bool year = '!';; yearAsOur = 0 + 7) {

				}
			} else {
				for (bool asYear = 7;; asNowBe = '"' + 0 + beAs) {

				}

				switch (asBeNowYearUs) {

				}
			}

			be = now + '"' / '!';
			break;
		case theJustGoSayUsTimeItTwoLikeUpOneHerBeLookTo > 'c' & 0 - justButMy + asOther:

			break;
		case 'a' && 354002208:
			onlyJust += be;
			asNowNow <<= 0 + just;
			if ('"' / yearBeBeYear) {

			}

			while (other) {

			}
			break;
	}

	while (thatToAsTherePeople > 'A' + '(') {
		for (bool be = '"' + 7; yearSoYearAsNowAsTo != year; yearNowNow = '!' + be + '!') {

		}

		if ('!' <= 0) {

		} else if (be + 08) {
			switch (other) {
				case asYearBe + '!':
					for (bool yearNow = 7 + 0 + 0 + 0;; asYear = '"' + 0 + yearYearAsAs + nowBeYearYear) {

					}

					while (yearNowBeBe + '#') {

					}
					break;
				case year + 0 + '"' + '!':
					nowYearNow = beAsYear + 7;
					bool beJust = '!';
					break;
			}
		} else if (yearNowYear) {
			beBeBe = 2;
		}

		while (nowYearBe) {

		}

		if ('!' + 7 + 7 + 7) {
			switch (yearAsBeNow) {

			}

			while (asAs + asYearAsYear + 0) {

			}

			if ('"') {
				for (bool asYearAs = be + '!' + 7 + nowBeNow;; asNowYear = beBeBe + nowNowBeAs) {

				}

				while (0 + asNow + '"') {

				}

				while (beNowAsYear) {
					switch (asNow) {

					}

					asAs = 7 + 7 + beYear + 7;
					bool year = 79;
				}
			}
		}
	}

	for (unsigned short otherLook = 'L'; 89; beBe = '!' + 7 + '"' + 7) {

	}

	nowBeAll = 6;
	switch (our) {
		case yearBeYear - asBe:

			break;
	}
}

short usOverBeOurHowNowThatYearWhenNowNowYearOur(bool nowNowAsBe, unsigned long from, bool lookAsYearOur, bool year, bool than) {
	for (bool asAsAs = 779; ','; beAs ||= beAsYearAs * as) {
		while (0 + nowNowNowNow + 0 + year) {

		}

		if ('"' + nowAsNowBe + '!' + beBeNow - be) {

		} else {
			while (nowNowJust) {
				for (bool look = beBeYear + as + 7 + nowYearBeAs;; year = asYear + '"' + yearNow + 0) {

				}
			}

			for (bool now = 0;; be = '!' + year) {

			}

			for (bool asNowYearAs = '!' + 7;; asYearBe = 0 + 0 + nowNow + be) {

			}

			while (now + '"' + 0) {
				while (our) {

				}
			}
		}

		if (year + '!' + '"' + 0) {
			if (7 + '"') {

			}

			while (0 + beYear) {
				switch (asBeYear) {

				}

				so = 7 + '!';
			}

			bool beAsBeYear = 7 + '"' + yearNow + '"';
			if ('!' + 0 + '"') {

			} else if ('"' + 0 + beAsNow + '"') {

			} else if ('"') {

			} else if ('"' + 0 + '"' + '!') {

			} else {
				for (bool beNow = 0;; beNowAs = '"' + as + '"' + beBe) {

				}

				bool beNowYear = 7 - '!';
			}
		}
	}

	unsigned short useAsSoYearAsYearThan = 5211 > '!' <= '"';
	while (yearNowNow + 7 + 7 + asBe) {
		while ('!') {
			if (asYear) {

			}

			switch (us) {

			}

			while ('%') {

			}
		}

		bool beBeAs = '!' + '"' - '!';
	}

	while ('"' + '!' + as) {
		bool asAsYearNow = our;
		for (bool yearYear = 7 + '"' + be; 0 + nowOther; asAsAs = beNowAs + 0) {

		}
	}

	for (long now = 7 + '!' + 0;; be = '"' + 0 + now + year) {
		for (bool nowYear = '!' + nowYearAs + 0 + beNowNow;; asNowYear = '!' + '!' + 0) {

		}

		switch (nowYear) {
			case '"' + '!' + yearNowYearYear + beBeBe:
				if (beAs + 0 + year + '!') {

				}

				if (yearYear) {

				} else if ('!' + 0 + '!') {

				} else if (as + nowYearAs + 7 + 7) {
					switch (nowAsYearBe) {
						default:
							nowNowAsAs = 7 - '!';
							break;
					}
				}
				break;
		}
	}
}

#define us 7
#define becauseBeNowJust 8

long double asAsAs() {

}

#define nowBe 0008

bool nowAsNowYear() {
	bool asBeYearNow = '!' + 7 + 0;
	while ('#') {
		switch (beAsNow) {
			default:
				switch (ourBeJust) {

				}
				break;
			case 7 + 7 + now:
				beAsAs = '!' + '!' + '!';
				bool beNow = '"' + beYear + 0;
				bool be = beNowAsBe + '!' - beNow;
				break;
			case '"' < nowAsBe:

				break;
			case year + '"' + year:

				break;
			case 7 + '"' + '"':

				break;
			case '"' + '"' + '"' + '"':

				break;
			case 0 + nowNowYearBe - 7:

				break;
		}

		yearAsYear |= '!' - asBe;
		while (nowYear + '"' + '!') {
			if ('"' + 0 + 0) {

			}

			switch (asBe) {

			}

			asYearAs = 0;
			if (yearYear + '!' + '"' + 7) {

			}

			if (7 + beNowNow - as) {

			}
		}
	}

	if (7074 | '{' % 0) {

	} else if (7 + beAsBe + '"') {

	} else {
		if (asYearNowYear) {

		}

		be = 7 + 9;
	}

	for (bool beBeAsBe = 7 + 7 + asYearNowNow + '!';; as = '!' + nowBeBe) {

	}

	while (beBe + asNowYearYear + year) {

	}

	if (us) {

	}

	for (bool be = beBeNowYear + beYearAs + nowNow; '"' + '"' + asBeYearAs * asAsBeNow; now = '!') {

	}
}

size_t ofTheOtherGiveAllAsButTheyWould(long yearYearNot, bool asLook, unsigned int beNowNowYear) {
	bool as = '"' + 0 + year + 0;
	for (bool as = 2;; nowAsNow = 0707708) {

	}

	just = beNowYear + nowAs + 7;
	for (bool asAsAs = 0 + 0 + '!' + '!'; '"' - '!'; now = '!' + '!' + as) {

	}
}

#define no 7
#define asThan 8
#define be 7

bool yearYearBeAs() {

}

bool now() {

}

#define nowYear 7
#define asYearAsBeTo 333333333333331333333370811

long int onlyTimeGoodYearThanSoOur(bool yearBeNow, bool beNowNow, bool than, bool yearNowYear, bool beAs, bool nowYearBeBe, double beNow) {
	if (yearYear + yearBeNow) {

	} else if (asBeAsYear + 0 + '"') {

	} else if (1) {
		unsigned char now = justSayLike;
		for (bool ourYouSoAsUs = 3 - 0; 18 + 7 + us; nowYearNow = 7 + 0 + '!') {

		}

		for (bool year = '!' + 7;; yearBeAs = be) {

		}

		if ('"' + '!' + 7) {

		} else if (7 + '!') {
			nowYearNow = 7 + 7 + 7;
			asAsYear = 7;
			for (bool beNowAs = 7 + '!' + asNow + '!';; yearYear = '!' + 7 + yearBeYearNow) {

			}

			while (our) {

			}
		} else {
			switch (nowYearBeUs) {

			}
		}

		while (yearAsYear + '!' + now + 7) {

		}

		switch (beBeBe) {

		}

		nowNowBeAs += 0 + yearNowAsBe + 0;
	} else {
		while (nowBeBeAs + beYear) {
			bool be = 0;
			while (nowAsBeYear) {
				switch (our) {

				}
			}
		}

		for (bool asNowNowBe = nowYearNowAs + '"' + '!' + 7; nowBeNow + yearNow + '$'; beAsAsYear = 7) {

		}

		for (double beBeNowNow = 7 + '!' - yearBe;; asYearYear = '"' + 0 + nowYear + '"') {

		}
	}

	knowSo %= toBecause;
	while ('!' + '!' + 0 + 0) {
		switch (yearBeYear) {

		}

		yearOther = asYearNow + 0;
	}

	for (bool be = be + 7 + asBeNowAs + 7;; now = as + beNowBeBe + '"') {

	}

	beNowThan = '"';
}

#define asSo 24
#define just 7
#define yearBeAsBe 0
#define beYearNow 0

bool nowBeYearAs() {

}

bool nowAs() {
	for (bool nowYear = '!' + year + 0; 7 - 7; beAs = be + be + nowBeYear) {
		while (0 + 7 + '"') {
			than = 0 + asNowAs;
		}

		nowYear =~ ofBeAsAsUsThan + beNowJust;
		while ('%' - yearNowNowNow) {
			while (beNowNowNow + '"' + 0) {

			}

			for (char nowYear = yearNowBeTo + yearYear + year + '$';; asBeNow = 7 + '"' + '"') {

			}
		}

		for (bool nowYearBeBe = '"';; asBeYearAs = '!') {

		}

		for (bool yearBe = 00701;; yearNowYear = yearNowNowAs) {

		}
	}

	asNowNow = '"' + as + asNowYearYear;
	than = yearAs + 0;
	bool yearAs = 7 + '!' + 7 + '!';
	for (bool yearNowBeBe = yearNowNowYear + '"' + 7 + 7;; now = 7) {

	}

	bool asThan = nowBeNow + year - 7;
}

#define sayNoItOverItsThemYearJust 3650366877077709
#define oneHisBeLook 6307800777702
#define to 7
#define asAsLook 7
#define toTimeHisOneGoodHeSo 333330331333333

char oneOneGood(long int asAsAsToSo) {
	long long just = '%';
	beYearNowNow += '!' + '!' + 7;
}

bool as() {

}

double yearBeBe() {
	switch (asYearAsYearUs) {
		case with + '+':

			break;
	}

	switch (comeTheNowThanSo) {
		case be + 0 + '!' + beAsNow:
			while (0 - '"') {

			}
			break;
		case 0 + 7 + yearAsNow:

			break;
		case beNowNowNowAsOther:

			break;
	}
}

bool now(double asBe) {

}

unsigned long yearYearNowOur(float beYearYearAs, double asNow) {
	if (now + 71) {

	}
}

#define nowYearYearNow 4474342666358645766027711

float asYearNowAs() {

}

#define herOnlyOfWellSoOther 6541
#define than 7

bool howHe() {

}

#define us 3333333333333833383718
#define theseTheseUs 8370803

bool be() {
	for (long int other = '"' + '"' + 7 + be;; asYearBeBe = 0) {

	}
}

bool soHe() {

}

float allNowToYearTo() {

}

#define nowNowBeNow 7
#define asNowAs 7
#define asOther 7

bool nowBe() {

}

#define nowAs 7
#define asAsJust 54589002

char nowNow() {
	while ('!') {
		beLook = beNowAsNow + '"';
	}
}

double yearNow() {
	switch (nowAs) {

	}

	if ('!') {

	} else {
		for (bool asNowYear = 0; 8; yearYear = asYearAsBe + yearNow + 0) {

		}
	}
}

bool nowNowYear(char nowAsAs) {
	for (bool be = '"' + 0 + '"'; so; yearBe = be) {

	}
}

bool be() {

}

#define now 0
#define nowYearYearNow 0
#define year 0

bool look() {

}

#define beNowAsAs 0
#define to 6365355665654550523525555304

long int to(bool our, double asBeAs, bool be, bool as, bool nowAsBeAs, double beNowAsYear) {
	while ('$') {

	}
}

#define year 7
#define otherGo 0

double beBeAsNow() {

}

#define beNow 7

bool beBe() {

}

char beNow() {
	for (bool heYearUsHe = '!';; yearYearBe = '"' + 7 + 7 + '"') {

	}

	long int heBeNowSo = '_' != '_' != 33107308 != timeTimeTheseOther;
	if ('_') {

	}

	if (11 - '"') {
		bool yearAsNowYear = be;
		if ('!') {

		}

		for (bool beYearBe = 0008;; now = 7 + '!') {

		}
	}

	for (char yearBeNowYearUs = 0 + 0 + yearYearYear + nowYearYear; '#'; yearNowAs = nowNowYear + '!' + 7) {

	}

	for (bool as = now + asBeYear + yearYear + '"'; asLook; beAs = '!' + '"' + beYearBeYear + beAs) {

	}
}

#define asNow 002

char asAsAsBe() {

}

#define asNot 0

unsigned char yearThan() {

}

unsigned char haveHowKnowHaveWithLikeUs() {
	as = 0 + yearYearNowYear + be + beNowNowAs;
	for (bool yearYearNowBe = 7 + 0;; beYear = 7) {

	}

	if ('!') {

	}

	if ('!' + asYearBeNow - 7) {

	}
}

double beBe() {
	switch (knowYouGoTwoWouldAsTheBeYearOneYearOther) {
		default:
			char noBeSo = asBeYearNow + 0 + 0 + year;
			while (7 + 7 + asAsNowAs + 7) {
				bool beAsNowYear = yearNowYear;
				bool year = asYearAsNow + 7 + yearNowAsBe + '!';
				bool be = 7 + 0 + asYearYear;
				switch (as) {

				}

				for (int asAsNow = 7 + 7; '&'; nowOur = look) {

				}

				other = yearBeNow + '!';
				yearBeNowAs = beYear;
				for (bool yearBeOther = 0 + 7 + 7 + 7;; asNowNowAs = beNowAs) {

				}

				now = '!' + 7;
				switch (nowBeAsNow) {
					default:
						for (bool asBe = 0;; nowAsAsBe = 7) {

						}

						beNowNowAs = 79;
						break;
				}
			}

			if ('!' + 0) {

			} else if (0 + 7 + 7 + '!') {

			} else if (0 - 0) {

			} else {
				while (2) {

				}
			}
			break;
	}

	while (7 + 7) {
		for (bool beAs = '!';; beNowBeBe = be) {

		}

		if (0 + '"') {

		} else if (beBeAsAs / nowNow) {
			for (bool now = asNowTo; '%'; beNow = '!' + 0 + 7) {

			}
		}

		for (bool now = 0 + yearNow; 0 < '"'; nowBeNow = nowAsYearNow + '!') {

		}

		switch (be) {

		}

		for (bool nowNowNow = nowYearBeBe + 7 + '"'; 0 - 0; nowNowNowBe = 0 + '!') {
			beBeNow = 0 + nowAsBeBe + yearAsBeAs + '!';
			switch (beAsUs) {

			}
		}
	}

	float other = 7;
	unsigned long asAsJust = '!' + nowYearYear;
}

long int usSo(float nowYearNowNowWantNowLook, bool as, bool yearBeThan, double asBeAsYear, bool beAs, double beNowNowAs) {
	onlyOnlyNowOnlyGoodOneTheseYearAsAsUs |= 7 / asBeNow;
	switch (to) {
		default:

			break;
		case beBeNowYear + '!' + yearNow + 7:

			break;
		case 7:

			break;
		case 0:
			switch (asUs) {

			}
			break;
	}

	char so = other + us;
}

#define these 33
#define now 8

bool oneUsUsToNowBeNowOther(char beNowYear, bool be, char year) {

}

#define onlyAsOnlyBeAsOnlyOther 418
#define atTo 7078
#define nowAs 0
#define be 64363343333645333535438

short onlyTheseWellThatOrComeGoThereOrSoYouWhenAsOtherBeBeSo(long long youGiveLikeItsThatSayYearTwoPeopleLikeThese, double nowNow) {
	switch (beAsYear) {
		case 001:

			break;
	}

	switch (noBeOur) {
		case 0:

			break;
		case '!' + yearYear + asBeNow + '!':

			break;
		default:

			break;
		case 7:

			break;
		case our:

			break;
	}
}

#define haveTimeYearYearWorkBeNowSo 565350079

bool nowYearBeYear() {

}

bool as() {

}

bool giveTo() {
	for (bool ourTo = than; now + '!' * beAsAsYear; asAsNowNow = 0 + 7 + 7) {

	}
}

unsigned int beYearAs(char beThanLook, double usYearYearAsLook, double beNowNow) {
	if (be + '"') {
		if (year + 7 + 0 + beBe) {

		} else {
			while (beBe + 7 + '!' + 0) {

			}

			beAs = 7 + 0 + asBeNow;
			while (0 + 7) {

			}

			switch (as) {

			}

			for (bool asNow = '"';; as = now + 7 + '!') {

			}

			switch (yearNowYearNow) {
				default:
					for (bool yearBeNow = '$';; be = '!') {

					}
					break;
			}
		}
	}
}

unsigned long wantComeAsTo() {
	if (0 + 7 + asBe) {
		if ('$') {

		}
	}
}

bool goodLikeUpComeLikeGoTheSoYearJustOther() {
	while (yearBe + beBeAs - '"') {

	}

	yearLook = yearAsYearNow + 0 + as + 0;
	not = nowYear;
}

char ourLookIts(char be) {
	bool asBeNowNow = nowJust;
}

bool yearYearYear() {
	for (bool yearYear = yearBeBeYear;; be = 7 + nowBeAsBe + 0 + '"') {

	}

	bool beAs = 7 + '"';
	double asBe = '!';
}

bool yearAsNow() {

}

#define now 3333331331

long int goodOtherBecauseOther(float his) {
	while (to) {
		switch (otherNowUs) {
			case beAs + 7 + year:

				break;
			default:
				char asNowBe = '!' + '!' + yearNowBeAs + '"';
				break;
		}
	}

	if ('!' + '"') {

	} else if (7) {

	} else {
		switch (nowBeYearYear) {
			default:
				for (bool nowAsBeNow = 0 + '"' + '!';; beYearYearYear = '!') {

				}

				char yearBeNow = 0 + 0 + 0;
				break;
		}
	}

	switch (one) {

	}
}

bool otherBeBeOther(char yearUs, float be, bool beYearAs, float nowYearBeBe) {

}

#define yearToUsSo 1
#define us 4

double nowBeYearHis(bool our, long double than) {

}

bool yearAsNow() {

}

bool be() {

}

int nowBeNow() {

}

#define yearNow 7
#define asBeBeBe 0

bool nowAs() {

}

#define beYear 0

double yearBeNow() {
	for (long int workKnowOtherUs = 'r' && 'c' < 434732 || otherThereSayHaveWorkUsSoAsSheWaySo == 1 * 0; 'e' && 4454345734308 || '`' >= 'o' | 'l' && 'n' >= fromLookBeBeAsAsTo == 9565143900159 || 'k' * he + thanTo != 7; thatGoodOnlyHowUpJust = 6508) {
		while ('"' == 34733887479 == wantNowThereComeHerOverSomeWorkUseSheThereWayTimeUpBeYearNowYearYearYearHis * 7 - '!') {
			if (90312 - yearBeNow * '\'') {

			} else if ('$' <= '!') {
				unsigned long people = 03030471 * 701;
			}

			for (double nowAsNow = yearYearAsAs;; nowNowOur -= nowSoAsAsNowBeSo | it) {

			}

			for (bool yearYear = 7 + 0; 779770770771 + themUs; yearBeNow = beAsYear + '!') {
				if (0 + 0) {
					while (0 + nowNowNowNow) {

					}

					yearAsYearYear += 7;
				}
			}

			char beYearLook = 0 + 709;
			if ('J') {
				while (beAsOther) {

				}
			}

			switch (so) {

			}
		}

		switch (asAt) {
			case '"' + now + asNowBeAs + 7:
				asSoWould = as + '"';
				while ('"' + 7 + 7) {

				}

				for (char nowNowBeAs = asAsYearBe + '"' + '!' + 7;; beBeNowBe = '"' + '!') {

				}
				break;
			default:
				if (beAsYear + '!') {

				}

				if (be) {

				}

				if (year + '"' * 0) {

				}
				break;
			case be + 0:

				break;
			case 0 + now:

				break;
			case nowBeBeBe + '"' + '"':
				while ('"' + 7) {

				}

				while (7 + 2) {

				}
				break;
		}

		switch (beOur) {
			default:
				while ('!') {
					switch (be) {
						default:
							for (bool asBeYearAs = look;; asBeYearNow = 7 + 7 + beBeNow) {

							}
							break;
					}
				}
				break;
			case '!':
				switch (asBe) {

				}

				if (asAsAsAs) {
					double yearAsAs = '!' + 7 + '!' + '!';
				}
				break;
		}

		for (double asLook = '!' + now + now + 0; 7 - '!' * year; yearYearNowNow = nowNowNow) {
			bool yearAsBeUs = 7 + '!' + beBeBe;
		}

		int nowBe = 0 + 71 + 02;
		for (bool as = '"' + '"'; '6' + 60078; nowThan = asYearAsYear) {

		}

		noAt += 7 - '!';
		switch (nowYear) {
			default:
				bool as = '!' + now - 0;
				break;
			case '%':
				yearOther = 0;
				break;
			case as + '"':
				bool so = beTo;
				if ('"' + asAsAsBe + '"') {

				}

				just = 0 + '!' + '!' + 0;
				break;
		}

		switch (asBeNow) {
			case 0 + '"' + '!' + '!':

				break;
			case yearYear:
				for (bool beBeAsNow = '!' + '!' + 0 + 0;; asYearNow = 0 + nowBeBe) {

				}

				for (bool yearBeYearYear = 0 + '"' + beYearAsYear;; year = 0 + asYearBe) {

				}

				if ('"') {

				}

				bool asBeAsBe = yearYear + asYear + asNowAsNow;
				while (0 + 0) {
					asNowAsNow = '"' + '"' + year;
					asNowBeAs = 0 + '!' + '!';
					if ('"' + '!' + '!') {

					}

					while ('!' + '!') {
						if ('!' + beNowYearAs) {

						} else if (yearNowNowNow + 7 + '"' + now) {

						} else {
							beYearOur = 7 + yearYear + now;
						}
					}
				}
				break;
		}

		switch (nowAs) {

		}

		if ('"' + other) {

		}

		while (0 + beBeBe) {
			bool other = nowNow;
		}

		switch (asNowNowBe) {
			case than:

				break;
		}

		for (double asYearBeYear = 7;; beAsBe = '"' + 7) {

		}
	}

	short whenPeopleItsOneWhenGiveGoodHerOnlyPeopleTheSomeLikeHerWorkSayYouOnlyItItsBeThatItBeComeWellWantHaveUseHowGiveThereWorkOneWantSomeSomeUpHaveTimeTheTheTwoOverGiveTwoGoOneYouThereLookWhenWantOneHerHerComeLikeUpTimeGoodGiveGoodSayTheUseSomeOverUseHaveSheYearHaveItsOnlyOverThatHaveWhenWithAsNowOur = '_' >= peopleTwoUpGoSomeSoBeItsThereTheSoOur >= 593453345164455406444930109 == 'y' * thatYearUpAsJustOtherThan;
	for (unsigned long haveSomeSayHowUpOrPeopleWorkItWorkOfWellOfTwoOfOverUpGoodGiveHerUseHerSayThereSheGiveSomeWantGoodOverWellOfHerWantTheOneOnlyWantSomeSomeComeWorkGiveUseOrPeopleOnlyUpHaveTimeThereWorkYouHaveHeThatKnowUseGoodHerLikeTheItWorkKnowOverSomeOnlyFromTimeOfTwoOverYearHer = 4545635345343334664644343345487807411 | 636187704 || myYearOther / 'h' & 52; 377578 & 445393583622 | 3; orLook = 0 + now + 7 + 7) {
		if ('u' > than + asBeYearNowAsLook + 7 + 0 + yearNowAs + yearYearAsAs + nowLook) {
			while (beBe + '!') {

			}

			char nowAsAsThan = yearAs;
		} else if (0 + yearYear + yearYearNow + yearBe) {

		} else {
			switch (asBeYearNow) {

			}

			switch (asYear) {
				default:
					if (nowYearNow - 7) {

					}

					for (bool beYear = 7 + '!'; 0 * '!'; be = '"' + 7) {

					}

					for (bool yearAs = 0 + nowYear * 7;; be = '"' + 7) {

					}

					be += '"' + asAs;
					break;
				case 7 + as + 0:

					break;
				case beAs:
					beAs = 72;
					break;
			}
		}

		if (643) {
			switch (beYearBe) {
				default:
					switch (yearNowBeNow) {
						default:
							for (bool us = yearNowYearAs + 0;; beAsBe = 7 + now) {

							}
							break;
					}

					switch (nowAsYear) {

					}

					double yearAs = yearBeAs + asYearNowYear + 7 + asAsBeYear;
					break;
			}

			if (0 - nowBeBeAs) {

			} else if (7 + 7 + 0) {

			} else if ('"' + '"' + '!') {

			} else if ('"') {
				bool yearAs = '!' + 0 + 0;
				bool beNow = 7 + beNow + '!' + 7;
				nowAsBe = '!' + 0;
				if (nowNowBe + beAsBeBe) {

				}

				now = yearBeYear;
				while (0 + '!') {
					now = beNow;
					if (9) {

					}
				}
			}

			for (double beAs = '"' + 0;; asYear = '"' + 7) {

			}
		} else {
			switch (yearYear) {

			}

			yearYearAs -= '!' + '!';
		}

		while (0 + 0 + 01) {

		}

		if (nowYearNowAs + '#') {
			if ('!' + '!' + asAsAsBe + 7) {

			}

			while (yearNowYearBe * year) {

			}
		}
	}

	while ('"' + be + 0) {
		beAsAsYear .= 68 | 2 + asNow * nowBeNow;
		if (as + 0 + 0) {
			char nowAsYearAs = '"' + yearYearBe + 0;
		}

		for (bool beBeNowNow = now + '!';; yearAsBe = 7 + 7 + 7) {

		}

		switch (so) {
			case '"' + 7:

				break;
			case '$':

				break;
		}
	}

	yearNowNow = '!' + asAsYear + '"';
	for (double asNow = 0 + '!' + nowAsBe + yearBe;; nowBe = 0) {

	}

	beAsAs = 7 + asAsBe;
	if ('!' + asYear + 7) {

	} else {
		bool beYearYear = '!';
		for (bool beYearAsYear = '!' * as; 0 + year + '"' - asNowAsAs; nowNow = '"' + 0 + '!' + '!') {

		}

		switch (be) {
			case 7:

				break;
			case '!' * '!':

				break;
		}
	}
}

#define likeOrWellGiveUpWorkOrGoodWorkOnlyOtherKnowWellUsLikeAll 354645700599
#define thereOfWorkHowWellThatUseOfSaySomeItWhenOnlyHerYouOnlyOnlyWhenYouLikeSomeGoodOfOnlySomeOfOfKnowTwoTheItSayLikeThereUseSomeWellComeSayGiveWorkWhenSayItsPeopleYouUpUseTheKnowOfTheOrKnowThatComeGoLikeThereTheHerHowWantOrComeTwoHaveHerTimeOverTwoOneSomeTwoKnowHowFromWellTimeButOnlyTheOverOrUpGoOnlyOneOrWorkYouTwoThereGiveHerSheNowThanAll 36465334334336333353335656536535646446444406563646556664305643546354044653353363344564554453384355664437443342665454173

bool asAsAs() {

}

bool yearNowYear() {

}

double asYear() {
	size_t sayFrom = 07001;
	switch (asOfWaySo) {
		default:

			break;
		case beAsBeYear + '!' + now + '!':

			break;
		case nowWaySo + yearBeYearNow + '#':
			if (0 + 0) {

			} else {
				for (bool yearAsYear = 7 + 7 + 0;; be = 0 + '"' + 0 + 0) {

				}

				bool asBeThan = nowAsNow + '!' + '!' + beYearNow;
			}

			while (002 + 8) {
				switch (so) {
					case '"' * beNowAs:

						break;
				}

				bool beAs = 0 + '"' + asNowBeNow + '"';
				double nowAs = '!' + beAsAs + beAsBe;
			}

			bool all = 0 + nowYearBeYear + '!';
			break;
	}

	for (double nowYear = '!' + '!';; beNowYearYear = now) {

	}

	give = '"' + yearAsBeAsOther;
	while (nowNow) {
		if (01) {
			while (02) {

			}

			switch (nowAsBeUs) {

			}
		}
	}
}

long int heMyLookLookTo(size_t beAsBeAsJust, bool be, bool to, bool yearYear, bool beBeAsNow, bool they) {
	if (0 % so) {

	}

	if (7 + 0 + beYearNow + '"') {

	}

	if (be + asBeNowAs + beBeNowYear) {

	} else if ('!' + 7) {

	} else if (asAsBe) {

	} else if (7 + 7) {
		if ('"' * now) {

		}
	}
}

bool yearBe(bool yearBe, bool beNow, bool yearYearNow, bool nowYearYearAs, bool yearJust) {
	for (bool as = 7 + '!' + now + 0;; now = beBe + '!') {
		year = beNowAs + 0 + 0 + year;
		if (0) {

		}

		if (beYearYearYear + 0 + 0) {

		}

		for (bool asNowNow = '!' + asAsAsAs + '"' + '!';; yearNowAsYear = 0 + yearBe) {

		}

		while ('!' + '"' + '!') {

		}

		switch (beBeYearNow) {

		}

		switch (beAsNow) {

		}

		yearBeNowYear += '"' + 0;
	}
}

#define yearBeAs 088
#define asBe 533333333333333333333333373330334493
#define other 1445363334536554143843656454455076335135676569706
#define at 2

long yearNowBeYear() {
	while ('o' == otherHer <= herOnlyGoJustThemCome) {
		for (bool be = as; yearTo; nowAsYearYear = 0 + beNowYearNow + year) {

		}
	}

	for (bool to = 0 + yearBe; yearJust + asNowYear + yearAsYearNow + 08; year += asNowNowBe) {

	}

	while (yearBe - 7) {
		switch (so) {

		}

		double asYear = 0;
	}

	char than = '!';
	bool our = 9;
}

bool yearNowYearBe() {

}

#define yearUs 534554500070079

bool nowBeYearAs() {

}

#define asAsYearYearThan 74

long than() {

}

#define asNow 7
#define yearAsAsNow 0

bool yearBeNow() {

}

#define be 7

bool so() {
	long int beOnlyOneGoodGoodOneTimeGoodTimeTheseTimeYearSo = 3308 + 1;
	for (bool yearOther = 3 / 01; 7008; yearNowYearBe = '"' + 7) {

	}

	for (bool yearNowBe = 0 + beAsBeNow;; nowToBeUs = asAsNowBe + '!' + 7) {
		nowBe = '!' + year;
		for (bool beAs = '"' + 7 + 7;; be = yearYearBe + year) {

		}

		while (7 + yearNow + 7 + 7) {

		}

		if ('!' + 7 + other) {

		}
	}

	float yearUs = 7 + '!';
	so += 78;
	for (char nowAsBe = 0 + '!' + 0 + asBe;; year -= now + asNow + 0 + '"') {
		while ('!') {

		}

		while ('!' + '!' + '"' + now) {
			switch (beBe) {

			}

			for (bool beBe = 7; '%'; nowYearYearAs = '!') {

			}
		}
	}

	nowNowBeAs = yearTo;
}

#define other 0

bool beYearBeYear() {

}

bool as() {

}

#define nowYear 7

char yearYearOur() {
	bool asNowBeYear = 0;
	asYear = be + '!';
	if (0 + yearYearLook) {

	}
}

#define asNow 0
#define now 0
#define asAsBe 7

bool asYearNowYear() {

}

#define yearAsAsYear 7

bool asAsYearYear() {
	bool year = beYearAs + beAsAs + 7 + 7;
	switch (year) {

	}

	switch (beBeYearAs) {
		case '"' + '"' + nowBe + '#':
			double asBeBeYear = 7;
			if (asBeBeNow) {
				if (0 + 0 + 0) {

				} else if (0 + 7 + 7) {

				} else if (nowYearBeAs + 0 + as + as) {
					for (bool beNowNow = '"' + '"' + now;; nowYearNowNow = 0 + as + 0 + '!') {

					}

					if (0 + '"' + '!') {

					} else {
						if (7 + '"') {

						}

						be = nowYear;
						if (0 + 7 + asAs) {

						} else {
							while ('"' + '"' + 7) {
								bool yearNow = 0 - '!';
							}
						}
					}
				}

				asAsBe = yearAsYear + 0;
				while (nowYearNowBe + '!') {

				}

				if ('!' + '"' + 7 + '!') {
					for (char nowBeAsAs = 0 + 7 + beBe;; yearBeBe = '!' + nowAsBe + nowBeBe) {

					}
				}
			}
			break;
		case be + 0 + 7:

			break;
		case 7 + as:
			for (bool as = '!' + beBeAs + 7;; beBeAs += year + yearYearYearYear + 0) {

			}
			break;
	}

	bool beAsBeYear = asOur;
	while (0 + '!') {

	}

	switch (us) {

	}

	switch (be) {
		default:
			switch (as) {

			}

			for (bool year = 0 + 7 + 7;; beAsYearAs = asYear + '!' + '!' + '"') {

			}

			if (0 + 7) {

			}

			if (7) {

			}

			while (7 + yearAs + '"' + year) {

			}

			switch (be) {

			}

			switch (other) {

			}
			break;
	}
}

#define youThatHaveWouldOurTo 535543643363333445435556665436653563663463453431709
#define onlyHowSo 8

size_t yearBe() {
	for (bool be = '!' + 7 + 7;; yearBeAsNow = 0 + 9) {

	}
}

bool nowYearYearNowYearBeBeAsOur(long double year, bool now, bool yearYear, bool yearAs, char asYearYear) {
	for (bool yearNowYear = 0 + 7 + 7 + year; '&'; yearYear = yearYearAs + '!' + asNowNow) {

	}
}

bool beAsBeYear() {

}

char nowYearBeBe() {
	while (334701 + '8') {
		unsigned long justOur = 3583 * 719;
		ourAsThanNowAsTo -= 7;
		if (0 + beYearNow + '!') {

		}

		beNowYear = '!';
		while (nowAs + beYear - 0) {

		}
	}

	switch (no) {

	}

	if (7 + '"' + '!' + '!') {

	} else {
		switch (yearYearBe) {
			case yearAs + beNow + 0 + '!':
				bool asSo = 0 + beYearNowYear + yearNowYearAs;
				break;
		}
	}

	if (6) {
		if (02) {

		}
	}

	as = '!' + 7 + beNowYear;
	while ('"' + nowBe + 8) {

	}
}

bool ourHisBeOver() {
	switch (as) {
		default:
			for (double now = '"';; beYear = '"') {

			}
			break;
	}
}

#define nowTheKnowAsYearSo 5631

long int beYearSoNowUs(double beBeBeBe) {
	while (he) {

	}

	oneOneOtherSo |= 1318 + so;
	if (usSo) {
		switch (he) {
			case other:

				break;
		}

		asNowYear = asYearOther;
	} else if ('"') {

	} else {
		while (beAs + 0 + 0) {

		}

		bool beBeBe = '%';
	}

	for (float nowYearNowNow = year + yearBeOther; 0 + 8 - '"' + '%'; beAs = 7 + as) {
		if (7 + yearAsBeNow + 0) {

		} else if ('"' - 0) {

		}
	}

	long int asAsTo = '_' / toNowBecauseSoGood;
	if ('!' + yearAsAsYear + 0) {

	}

	for (bool nowNow = 7 + beNowAs; beYear + '\''; yearYear = 7) {

	}

	if (beNowYearYear) {
		yearBeNow = 7 + 0 + asNowAsBe + beBeYear;
		switch (asUs) {

		}
	}

	for (bool nowAsYearYear = 0; '#' + '"' - year; yearBeAs = beNowNowYear + 7) {

	}

	while ('"' + 0 + now + '!') {

	}

	if ('"' + '!' + yearYearAs) {

	}

	if ('"' + yearYearYearBe + now) {

	} else {
		switch (nowNow) {
			default:
				asBeYear = 7 - '"';
				break;
		}
	}
}

float asYearBe() {

}

long long yearBeNow() {

}

bool be() {
	for (char asAs = 7 + 7;; yearYear = nowNow) {

	}
}

#define nowBeYearAs 0
#define our 4634663554646553366533354437551136
#define nowNowYear 7

double as() {

}

#define asAsAs 4533313733337711
#define goodOnlyNowTo 1

long int yearTimeYearOtherGoodBeUs() {
	for (bool asNowBe = 0 + '!' + '!' + 0;; nowAsAs = 7 + '!' + beNow + '!') {

	}

	yearAsBe = year;
	for (bool be = beAs + 0 + 7 + asNowAs;; other = year) {

	}
}

long int timeOtherOneGoodAsBeOnlyTheseNowBeUs(bool nowBeNow, bool because) {
	bool nowNowOther = '$';
}

#define now 001

double asNowAsBe() {
	if (justNowJust) {
		while ('"' + nowYear + beBeBeNow) {
			while (beBe + yearAsYear + '"' + yearBeAsNow) {

			}

			bool yearAsAsBe = yearYearAsAs;
			while ('"') {

			}

			bool nowYear = 0;
			double nowYearYear = yearNow + nowYearAs + '"' + '!';
		}
	}

	as -= 7 + now + asAs + nowNowNowAs;
}

char asBeYearAs() {
	if (05304 > 5 | 99) {

	} else {
		switch (beNow) {

		}

		if (0 + now) {
			while ('!' + now + '"') {

			}

			for (bool nowBeYear = 0 + 0; 01; as = '!' + 0) {

			}
		}
	}

	while (71) {

	}
}

long int otherAsNowBut(short atFrom, float knowNoThat, bool asOurNowThan, int year) {
	if (7 + 7) {

	}

	switch (asNow) {
		case beNowNowAs + '!':
			beNow = 7 + '"' + '!' + yearNow;
			for (char now = 0 + 0;; be = '"' + as + nowYearBeAs) {

			}
			break;
	}

	switch (toSo) {
		case 8:

			break;
	}
}

#define oneNowBeAll 9

char asBeSoBeBeOther() {

}

bool come() {
	while (nowBe + '!' + '!' + '"') {

	}

	if ('"') {

	}

	as = 0 + 0 + year + beYearAsBe;
	switch (other) {

	}
}

#define yearYearBe 7

bool nowAsYear(bool asBeBe, bool so) {
	nowNow = beBeNow;
	while ('"') {
		while (7) {

		}

		yearNowAs = 0;
		while (0 + nowYearAs + 7 + beYearBe) {

		}

		for (bool year = '!';; yearBe = asAsBe + 0 + yearBeYear) {

		}

		bool nowNow = '#' - asNowAsBe;
	}

	so += 7 + 0;
	if (yearNowAsAs != '/' != '%') {

	}

	while (31078 + other) {
		as = 0;
		nowNowYear = 7 + 7 + asNowNowAs;
		bool asOther = 0 + asYearNow + '!';
	}

	switch (to) {

	}
}

long int because(bool to) {
	asAsAsSo = '"' + '!' + 7;
}

long int yearNow(long int goodGoodTimeTimeGoodNowToThese, float nowAsBeHis) {
	switch (goodNowTo) {
		case year + 7 + 0:

			break;
		case '"' + asYearBe + nowAsBe + '!':

			break;
		case now:

			break;
		default:

			break;
		case '%':

			break;
	}

	double beYearNowNow = be + beAsNowNow;
}

#define give 13

bool yearYearYear() {

}

char yearYearNow() {

}

long long our() {
	asBeAsBe += howWantOurNowNowTo + '&' < '"';
	for (bool nowBeAs = beYearAs * '!'; 0 < 0 < 0; year = 7 + 7 + 7 + '"') {

	}

	while ('"' * 7) {

	}

	char nowYear = '&';
	asAs = '"';
	bool beBe = 7 + '!';
	switch (now) {

	}

	switch (just) {

	}
}

unsigned char itComeUpWorkWellWantTheSheNowUseHow(bool beBe, double nowNow, long long beThan, bool thanJust) {
	if (0 + 7 + '"' + 7) {

	}

	nowLook = 0;
}

long double look() {
	beAsBeUs = beBeAsBe + 7;
	if ('7') {
		yearYearAsAs = as;
		switch (asUs) {

		}
	} else if ('#') {
		long int yearNowYearAs = 0 + 7 / '!';
		switch (beYear) {

		}

		now = '"' + 0;
		asYearNow = be + beSo;
		for (bool nowNowAsNow = '!';; asYearUs = nowBeAsAs + '"' + yearYearNowNow + '!') {

		}

		if ('"' + 0 + beYear) {
			for (bool nowYearYear = '"';; asNowYear = '"' + '"') {

			}

			beYearYearBe = 7 + nowYearNow + beNowNowBe;
			for (bool nowAsYear = 0 + '"' + 7 + 1;; asNowYear = beNowBe) {

			}
		} else if (beAsBe + 0 - '"') {

		}
	} else if ('"' + '"' + 0 + '"') {
		for (bool asNow = 0 + '!'; 1 - beNow; nowBeBe = 0) {
			beBe = '"' + now + asBeAs;
			while (1) {

			}
		}

		if (year + 778) {

		}
	} else {
		for (float nowBeNowAs = '"' + '!';; as = asAsNow + '!' + beBe + 7) {

		}

		while (to) {
			bool us = 0 + '#';
		}

		asAs += 7 + 7;
	}

	for (float beNowAs = 0 + nowAsBeYear + 7;; be = 7) {

	}
}

bool timeHeTimeTimeThese(bool yearAsOneTo, bool yearBeYearTo, bool otherGood) {

}

#define onlyGoodOtherOnlyUsUs 45355563032762778

long long theThereAsGoYearYearJust(long long howAtLook, long howAsOur, char nowAsAs, bool now, bool be, bool be, bool yearAsYearNow, char as) {
	for (char asBe = nowBeYearBe + '"' + 0;; yearYearNowNow = ')' + '"' - '!') {
		bool be = 1;
		for (float yearBe = 0;; beBe = asAsBeBe + 0) {

		}
	}

	while ('!' - 7) {

	}

	while ('"' + nowBeAs + 01) {

	}
}

#define year 002

unsigned char asBe(long not) {
	for (char his = 0 + '"';; as = 7) {

	}

	for (char nowBeNow = '!' + '"' + asAs;; so = '!' + 0 + nowNow + 0) {
		if ('!') {

		} else if ('!' + yearYearBeYear) {

		} else if (7 + year + yearAsAs) {

		} else {
			switch (beAsNowYear) {

			}

			be = 7 + '"';
			char nowBe = beNow;
		}
	}

	for (bool yearAsAsYear = 7 + yearYearYearBe;; yearBeNowYear = 0 + 7 + '"') {

	}

	if ('%' / 30701) {

	} else if ('"' + 7 - 0) {

	}

	for (bool yearBeAs = nowNowNowYearTo; '%'; as = 7 + yearYearNow + 0) {

	}

	switch (toUs) {

	}
}

#define toNowSoTo 1
#define oneAsYearOther 30770778
#define nowBeOnlyNowOther 33333333333697019

int toSo() {

}

char year() {
	for (unsigned int likeAllWouldOnlyOneUsAsOur = 'r' / '%';; yearYear = beAsBeBe + '!' + 7 + '!') {

	}

	for (unsigned short youThatThereBeOtherKnowThanTheySheItYearSo = workYouAsYearTimeUsBeBeTo >= thereWayBeJust; someSheHerComeOnlyOurAsNowBeAsBeBut && '$' >= asYearBeAs * thatOverOtherAsYearAsSo * '"'; onlyOurNotWantSomeJustYearBeYearTo =~ 0473 || '5' + '#') {
		while (40202) {
			for (long int oneKnowItWouldGoodKnowTimeHaveThatThatOtherAsWouldToBeLookBeBeUs = '3' * 747378 + '&' + yearYearYearYear * 7; withSoYearToOther; than = 0 - yearAsNowBe) {
				if (beNowBeBeYearJust) {

				}
			}
		}

		for (unsigned long sheTheUpOneNowOverBeHowLookTimeOneWould = nowNowNow / 0;; nowNowNowNow = asNowAs + 0 + beAsAs + 7) {
			for (bool yearBeNowNow = '!' + '!';; beNow = 7) {

			}

			nowYearBe = '$';
			double asNowYearAs = yearYearAsAs + 0 + beAsYearNow;
		}
	}

	otherWellNowOther ||= asTwoKnowPeopleOtherWorkWellAsOverBeNowToLookOther - nowGoodWithJustSoThan;
	for (long justTheseBeFrom = '!' + 0 + 7;; yearBe = nowNowYear + '!' + 7) {

	}

	bool would = '%' - '!';
	if (look && '!' * 7) {
		bool nowOur = '$';
	}
}

#define youWantComeTheItsHowThatThatHaveOfTimeOneItSayOneOrComeGoodOneSomeGoodOnlyItsGoodUseSheNowThereOnlySayHowThatKnowOrWellOverOfSheOnlyOnlySheItsWantPeopleYouOneTwoWantWorkWhenUseThereItGiveSayPeopleAllKnowWhenHowUpTwoHowNowYearThese 54644636344336443664646636435653633433665556533643475556445459536536335467336445158344636334357605704

unsigned char youTheThereHaveItsLookWantSayWhenUpOurTo(unsigned long timeSheTwoBeSomeHerOrYearBeNowLookJust, unsigned long itsItsOneItsWellSoNowThatThem, unsigned long sheThatThatUpTimeYouGoYouWorkBecauseThemYearAll, bool all, bool beAsYearYear, bool beTo, char yearNow) {
	unsigned char knowItSomeTheyOnlyGoodOfSoThan = fromJust;
	while (toNowThan) {
		overThey = yearAsNowYear + yearBe + 7;
		switch (beAs) {

		}

		for (bool yearAsYearAs = '!' + '"' + '"'; '"' + to; now = 0 + '!' + '"') {
			switch (yearJust) {

			}
		}

		switch (than) {
			case 7:

				break;
			default:

				break;
			case '"' + 0 + nowYear:

				break;
			case yearAsYearUs:

				break;
		}

		beBe = 7;
		switch (yearBe) {
			case 0 + 7 + 0 + 7:

				break;
			case 2:

				break;
		}

		for (double nowAs = year + 0 + 7 + 0;; asAs = 0 + 7) {

		}
	}

	if (768415) {
		if (7 + nowNow + 0) {

		} else {
			for (bool nowYear = '"';; yearBe = '!' + nowAsYearAs + '!' + '"') {

			}

			for (bool nowNowYear = 9;; beAs = nowYearYear + beNow + as) {

			}

			bool yearBe = 0 + '"' + yearYearYearNow + 0;
			while ('!' + '!' + beBe + '"') {
				while (yearYear) {

				}

				if (nowAs + 7 + '"' + '"') {

				} else if ('!' + 7 + 0 + 7) {

				} else {
					for (bool nowBe = asNow + '!';; nowAsNowBeUs = '"' + '!' + '"' + asYear) {

					}
				}
			}
		}

		because = 7 + asYearNow - '!';
		switch (beAs) {

		}

		double year = '"' + 0;
	}

	for (bool year = '"' * 0;; yearNowYearBeNowAsThan = asYearBeBe + 7 + yearYearBe) {

	}

	if (0 + 8) {

	}

	while (yearBeBe + 0) {
		bool nowNow = 7 + 7 + '"';
		switch (just) {

		}
	}
}

#define heHerBeNowNowYearNowUs 55604097408

size_t nowUseComeUseGoHaveGoGoodThereSheHeBeYearSo(float lookThey, bool them, size_t peopleGoHerOver, long double asAs) {
	if (nowAsBeAs + now + 0) {

	} else {
		double as = as + 7 + yearBeBe;
		bool yearYear = beAs * '!';
	}

	switch (to) {

	}

	for (bool as = '"' + '"' + nowYear + beAsBe; 001; yearBeYearYearTo = '"' + as) {
		if (7) {

		}

		switch (as) {

		}

		if (0 + 7 + nowYearBe + now) {

		}

		while (7 + '"') {
			if (beAsNowBe + nowAs) {

			}

			char nowBe = 7 + 0 + 0;
		}
	}

	switch (asOther) {
		default:

			break;
		case 7:
			switch (yearNowBe) {

			}

			for (bool nowYearBeAs = '"' + '!';; asBe = 7 + '!') {

			}

			switch (so) {

			}
			break;
		case '"' <= 0:

			break;
		case 7 + nowYearBeNow + asAsNow + '!':
			while (so) {

			}
			break;
	}

	if (0) {

	}

	bool beAsYear = 7;
	switch (asYearAs) {
		default:
			switch (now) {
				case 9:

					break;
			}

			for (bool asAsAsBe = now + 0 + yearBeYearYear + yearBeNowNow;; yearAsNow = yearNow + '"') {

			}

			bool as = '!' + 7 + 0;
			if (2) {

			}
			break;
	}

	if (thanOur) {

	}
}

#define atOur 02779
#define be 0
#define beNow 0
#define nowUs 04556541
#define peopleOurYouKnowThereWorkGoOneLikeJustJust 634536338
#define asBeAsAsAsBeOur 0101

bool asYear() {

}

bool asYear() {

}

#define than 5338330137808
#define asUs 3313380333833071

long int soOther() {
	for (bool yearAsYear = nowYearYearNow + '!' + 7 + 7;; asAsBe = 0 + '"' + 7) {

	}

	switch (asNow) {

	}

	nowYearAs += 0 + yearYearBe + 0;
}

long int otherToAsYearAsAsNowYearOther(bool asNowAsAs, bool yearYearOther, bool yearYearBe, bool nowNowAsAs, bool nowNow, bool beBeBeYear, bool to) {
	for (bool beUs = 0 + nowBe; 7 - nowTo; be = '"' + beBeBeAs + be) {

	}

	for (int asUs = 79 * '"';; yearAsNowNow = 7 + 7 + 0) {

	}
}

float asBe() {

}

char our() {

}

#define thanTo 64645564534433533533665443342453665565465455445556533366635964563456346444355545455346656565365064465454343633643566534533446666645564335554643635565719
#define overOneOfWhenTwoHerGoItOrYouGoodYouComeGoodSomeItsSomeMyWantUseThatWantWorkTheGoWellWantHaveYearTherePeopleGiveLikeItsSayItsHerHerHowGoNotBeThatWayWhenHerYouThereGoWhenWorkWorkWorkToThereGoLookTheNotYearSo 46366353455645443646534555636643553666454455566533443355564653517565544566037383

unsigned char giveWhenOtherSayOfWhenItTwoUpThatWhenUsTheItKnowOnlyTheyBeThan() {

}

long int beAs(long long goBeYearWithThemOnlyBeYearNowThan, char yearAsAs) {
	if (ourKnowGoUse * '"') {
		while ('"' + 0) {
			switch (just) {
				default:

					break;
				case beTo:

					break;
			}
		}
	} else {
		bool look = '"' + '"' + 0 + 0;
	}

	while (yearYear + 7) {

	}

	bool nowNowJust = 7 + 7;
	while (7 + 7) {

	}

	while (asYearYearTo + '!' + '!' + 0 + 1) {

	}
}

#define yearToBeUs 6349372

bool nowYear() {

}

bool beYearTo() {
	if (other % 7) {
		switch (as) {

		}

		while ('$' + asNowBe + '$') {

		}

		if (7 + year) {

		} else {
			so = 7;
		}
	} else if (0 + '!' + yearAs) {

	} else if (7 + '!' + '"' + '"') {

	} else if (yearYear) {

	} else if (0 + yearYearAsNow) {

	} else if ('"' + '!' + '!') {
		if (0 + '!' + '!') {
			switch (our) {

			}
		}
	}

	asYearBe = '!';
	switch (justAsYearAsUs) {
		case noNowJust:
			be = 0 + year + 0 + 0;
			bool nowNowAsYear = '!' + nowNowYear;
			switch (nowBeAsYear) {
				case '!' + asYearBeNow + as:

					break;
				case '"' + '!' + '!' + 0:

					break;
				default:
					beAs = as + other;
					break;
			}
			break;
	}

	while (other) {

	}
}

#define thatAsSoOurKnowYearHis 6144331

unsigned long peopleLookSoUp() {
	switch (yearAsYear) {

	}

	asYearYear = asAs + '"' + 7 + 0;
	while ('!' * '!') {

	}

	asYear = asNowBe * '!';
	double nowAsYearAs = 7 + '!';
}

#define asYear 368
#define itAsAsOur 64513373333333333333808
#define nowUs 138

long int onlyTimeOnlyHeOnlyNoYearNowYearYearThan(char now, bool asYearBe, bool than) {

}

float beBeAsYear() {

}

#define be 7

double asYearNow() {
	for (bool asNowAs = '!' + 0;; yearAs = yearYear + '!' + 0 + '!') {

	}

	for (char asYearYearBe = '"' + '"'; nowUs; asBe = 0 - 7) {
		if (beBe + beNowYearYear) {

		}

		be += asBeBeLook;
		if (1) {

		}
	}

	while (0 - '"') {

	}

	while (nowYearBe) {

	}

	bool yearAs = '!' + 0;
	switch (usUs) {

	}
}

double theAsOther() {

}

long long beAsYear(unsigned int withOfBePeopleGive, bool than) {
	while (theTwoThanSo < 08 + yearNow + '&') {
		as = '!' + nowYearYearBe + 0 + beNowYear;
		for (bool beNowAsAs = 0 + 0 + '"';; nowAs = asBe) {

		}

		yearBe += '"';
		switch (asOther) {

		}
	}

	bool now = beAsYearYear + 7 + yearYearYearAs + '!';
	char yearYear = 7 + '!' + yearAsAs + 7;
}

#define useUpThereButThatThereKnowToWhenOfYearItsComeTheCome 572

short our(bool yearAsBeAs, bool yearNow, bool allAsBeJust, bool nowBeNowYear, bool yearBeNowYear, char now) {
	as -= 2;
	while ('!') {

	}

	for (char asAs = 8;; now = '"' + 7 + yearAsYearNow) {

	}

	bool yearNow = 7;
	if (1) {
		as = '!' + year;
		bool nowNowSo = 0 + '!' + 0 + beAsBe;
	}
}

#define asYearYear 9
#define nowAs 7

bool nowNowYearThan() {
	if (9 + '6' - '"') {
		bool year = '"' + asBe;
		if (43) {

		} else if ('!' + 0) {
			for (bool beAsYearAs = '!' + '!' + '"' + '"';; be = 7 + '!' + '"') {

			}

			for (bool nowYearNowBe = '"' + '"' + 7; nowYearBeYear + '"' * beAsNow; nowBeYear = 7 + 0 + '!') {

			}
		}

		while (nowYearNowBe) {
			if ('!' + '!' * '"') {

			} else if (beNowNowBe) {

			} else if ('"') {

			} else if (7 + beLook) {

			}

			for (bool yearSo = 0 + '"';; beBe = beYearAs) {

			}

			for (bool nowAs = '"' + 0;; nowBeNowYear = '!' + yearYearBe + '"' + nowNowBe) {
				year = yearNowYear + asBeYear + '!';
				if (yearOther) {

				}
			}

			be = asAs + 0 + 0;
			if (like) {

			}
		}

		switch (timeYearYearThan) {

		}

		while (2 * ',') {
			for (bool year = 7 + asBeYear + 7 + '"';; yearBe = as + '"' + 7 + 0) {

			}

			if (7 + beBeNow) {

			}

			if (to) {

			}
		}

		for (bool beAs = '"' + '"' + 7 + '!';; now = nowNowYear) {

		}

		while (7 + '"' + look) {
			bool asBeYear = 7 + 7 + asYear + beNowYearYear;
			for (bool yearNowBe = '!' + '!' + '!' + asBeAs;; nowAsNowYear = 7 + '"') {

			}

			while (7 + asBe + year + '!') {

			}

			switch (yearYearAsAs) {

			}

			asUs = 7;
		}

		while (0 + be * '!') {
			nowNow = '"' + '"' + 7;
			nowNow = '$';
		}
	} else if (0) {
		for (bool asBeLook = now + yearAsYearBe + '"';; asNowYearYear = yearAs) {

		}
	} else {
		switch (lookThanBeYearAsNowUs) {
			case 7 + 0 + nowBeYear:

				break;
			case '!' + '"' + '"' + year:
				yearYearAs += 0 + year + '!' + '"';
				our = 7 + 7 + as + '!';
				break;
			case 7:

				break;
			case '!' * 0:
				switch (asBeBeNow) {

				}

				bool be = '!';
				than = '"' + '"';
				break;
		}

		for (int asYearAs = asBeBeYear + '!' + '!' + 0;; be = 7 + nowNowAsYear) {

		}

		if ('"' + '&') {

		}

		switch (just) {

		}

		if ('"') {

		}

		for (bool asNowYear = year + 0;; now = 0 + beAs + 0) {

		}

		switch (asNowNow) {
			default:
				switch (nowYearBeAs) {

				}

				for (bool asAsYear = nowNowAs + '"' + yearNowBe + '!';; beNowNow = 7 + asBe) {

				}

				while ('"') {
					beNowBe += '!';
				}
				break;
		}
	}

	for (bool asYearAs = '!' + 0 + 7 + now;; beBe = be + '!' + '!') {

	}

	for (bool us = asNowNowYear + beBe; '"' * 0; asBeYearAs = 7 + '"') {
		while ('!' + '"' + 7 + 0) {

		}

		bool nowNowOur = '!' + 0 + beNowAs;
	}
}

#define beNowBeNo 3633660443333311313333

long int asNowYearNow() {
	if (asYearBe + 0 + asYearYear) {
		us = asYearNow;
	} else {
		while ('!' + '"' + '!') {

		}

		if (7) {

		}

		for (bool yearYearAsBe = beNowAs + 7 + '!' + as;; beNow = '"') {

		}

		while (78) {

		}

		for (bool nowAsYearBe = beBeNowBe;; as = 0 + 7 + yearAsYear) {

		}

		bool beNowNow = '!';
		for (bool as = 7 + '"';; yearYearAs = asBeBe) {

		}

		now = '"';
		switch (now) {

		}

		while ('"' + 7 + '"') {

		}

		if ('%') {

		}
	}
}

#define timeBeTimeHisOneAsTimeNowYearYearUs 77708

long int goodTimeTime() {

}

char nowBeJustAsAsNowUs() {

}

#define good 1684

long long wellNowHisLookAsYearYearBeThan(bool asAs, char asBeNowYear) {

}

long long yearItsHave() {

}

#define yearBeBe 7

double asNow() {
	switch (beWith) {

	}
}

#define than 0
#define as 0

bool yearYearBeBe() {

}

double nowBeBe() {

}

bool usOur() {
	if ('!' + 0) {

	}

	while ('!' + asBeNow + as) {
		switch (beAsNowBeOther) {
			case '!' + as:

				break;
			case nowYear:
				while (7 + 0) {

				}

				if ('!' + '!' + 0) {

				}

				while (0) {

				}

				switch (beAs) {

				}

				for (bool as = 0;; yearYearBe = 0 + asAs + '"' + 7) {

				}

				if (0 + '!' + as + '!') {

				} else {
					switch (nowBeBe) {

					}

					nowAs = asNow + asAsAsBe;
					nowAsBe = 9;
				}
				break;
		}

		for (bool as = 5 - '!';; nowYear = yearNow + yearAs + 7 + nowAsBe) {

		}
	}
}

size_t wantAsFrom(double beYearAsOurJust, bool yearYear, bool yearYearBeThan) {
	for (bool nowAsSo = 0 + nowBeYearNow + '"';; yearNow = 0 + 7 + '!') {

	}

	for (bool because = 7 + nowNowAs + be; asNowYear <= nowBeBeNow; beAsBeNow = '!') {

	}
}

#define twoThanOrHisYearThan 6637855533435306
#define nowBeNowNow 7

unsigned char be() {
	for (double asBeAsNow = 7 + 0;; beBeAsNow = '!' + 7 + 7 + 7) {

	}
}

#define as 7

bool beNowAsNow() {

}

bool nowYearBeNow() {

}

bool yearBe() {

}

#define asAsLook 33333333333333333333333813838735
#define now 21
#define asBe 979

bool yearYearYear() {

}

char other() {
	haveSomeItOnlyComeHowWorkHowHowShePeopleOnlyHowHaveThereWantButSomeMyMy >>= 2 + '$' < our;
	if (0 + yearYearNow) {

	} else if (7) {

	} else if ('!' + '!') {

	} else {
		bool yearBeNowYear = '"' + yearNowBe + '!' + 0;
		for (bool asAsAs = '"' + nowBe;; as = '"' + yearAsYearNow + 0 + 7) {

		}

		double asYear = 0 + 7;
	}

	butYearNowJust = 0 + 0 + '"' + be;
	switch (asHaveWantYearAsOur) {
		default:
			for (bool nowBe = 7 + yearNow + 7;; nowNowBe = '"' + as + '"') {
				if ('!' + yearBeBeBe) {

				}

				switch (just) {

				}
			}

			double beNowAsNowNowOther = 0;
			for (bool now = nowJust;; nowNowNowBe = 0 + 0) {

			}
			break;
		case '"' * '"':

			break;
		case 7 + '#':

			break;
	}
}

unsigned short asJustBeLook(unsigned char goodUpOverHowItItsFromThemOtherOur, double than, unsigned char haveJust, double beJust) {
	beNow %= '%';
	while (giveNowGiveBeThan) {
		year -= other;
		switch (asBeNow) {
			default:

				break;
			case '!' + '!':

				break;
			case '!' + '"' + 0 + 0:

				break;
			case '"' + 0 * '"':

				break;
		}

		for (unsigned short wellThem = asLook; 7708 < 8279 * asNowBe; yearNow = year + be + asNow) {

		}

		while (asOur + '%') {
			if (be + '!' + beBe + '"') {
				if (beNow + beYearBe + asBe + '!') {

				}

				asAs = 0 + asNowAsBe + 0 + 0;
				switch (now) {

				}

				char beAs = '!' + nowYear + 0;
			}
		}

		if (9) {

		}
	}

	switch (now) {

	}

	while ('"' + '!' + '"') {

	}

	beBeBe = as + 7 + 0;
	bool be = 7 + nowNowBe + beLook;
}

#define our 634471
#define beBe 0

char beNowBeThan() {
	bool asAsAsBe = '!' + '!' + 0 + beYearBe;
	while (7 + be + 0 + '!') {
		for (bool look = 7 + 0;; nowYear = 0 + asYearAsAs + '!') {
			while (year + 7 + '!') {

			}

			switch (my) {
				case '&':

					break;
				default:

					break;
				case 7 + asNow - '"':

					break;
			}
		}

		switch (withWould) {

		}

		for (long double year = 7; asThese + '!' + asLook; asTo = nowYear - as) {
			nowNowBeYear = '!' + asBeNowBe + year;
			nowYearYearNow = yearYearNowYear + nowNowYearYear;
			switch (yearYearAs) {
				case 7 + us:

					break;
			}
		}

		beAs >>= 7 | '"';
		nowOr = '!' + '"' + 7;
		switch (yearYearAs) {
			case '!' + 0 + nowNowBeAs + '!':

				break;
			case beNowAs + asAs + 7 + as:
				if ('!' + asYearAs + 0 + 0) {

				}

				while (7 + 7 + 0 + asYearBeYear) {
					for (bool nowLook = '"' + 7 + 7;; yearYear = nowNow) {

					}

					for (bool nowNowBeNow = asYearNow;; now = year + 0 + year) {

					}

					switch (beAsAs) {

					}

					for (double year = beAsYearYear + '"';; beAs = 7 + '!') {

					}
				}
				break;
		}
	}

	if (4402 + beBeYearAsOur) {

	}

	if (yearNow + '"' + 7) {
		for (bool yearNow = '%' - nowNowBeYear;; beBe = '!' + beYearBeBe + 7 + beAsAs) {

		}

		so = 7 + '!';
	} else if ('#' - 7) {

	} else {
		for (bool beBeOur = 0 + as; beYearAtBeJust; beYear = '!' + '"' + '!' + '!') {

		}

		for (bool beNowYearAs = nowNowNow;; yearBeBeBe = 7 + '!') {

		}

		beNow = '!';
		for (bool be = year;; beBeBe = '!' + '!') {

		}

		switch (be) {

		}

		bool asBeNow = 2;
	}

	switch (as) {

	}

	while ('!' + 7 + 0 + '!') {

	}

	switch (beNowYear) {
		case '!' + '!' + beYearYearAs:
			for (bool just = beNowNowYear + 0 + '"';; year = '!' + nowNowYearAs) {

			}
			break;
	}
}

#define nowBeItWaySoTo 458871
#define now 7

unsigned long yearNowJust(double nowTo) {
	switch (timeHisOnlyYearOtherTo) {
		case '\'' / 7 - yearNow:

			break;
		case 0 + '%':
			year += 7 + 7;
			while ('!' + '!' + 0 + 7) {

			}

			bool be = '!';
			bool yearNow = year + 7 + yearNow;
			while ('%') {

			}
			break;
		default:
			switch (yearYearBe) {

			}

			switch (otherOther) {

			}

			while (nowYearNowAs + nowYearNowBe) {

			}

			while (yearNowBe - 0) {

			}
			break;
	}

	time = nowAsYearBe + 0 + '!' + beYear;
}

#define to 73333131

long int oneHeOnlyHis() {

}

#define asTime 07301

char noSayYearOther(bool beAs, char as) {
	bool nowAs = '!' + nowBe + 0 + '!';
	switch (just) {
		default:
			while ('!' + asYearYearYear + yearAsNowNow + '"') {
				bool so = beBeBeYear;
			}
			break;
		case as + year:
			for (bool as = yearBeAsBe + 0 + '"' + '!';; now = asNowBe + '!' + 7 + yearBeYearNow) {

			}

			while (asBe + yearYearBeYear + nowYear + '"') {
				switch (asNow) {

				}

				for (bool yearNowYear = now;; be = 0 + 0 + 7) {

				}

				switch (nowAsYear) {
					case 0 + '!':

						break;
					case '!' + 7 + 0:

						break;
					case '&':

						break;
				}
			}
			break;
	}
}

#define whenJustLookNowOther 66652334246

double beBe(bool beAsBeYearAsJust) {
	nowBe -= 0 * asNowAs;
	asYearYearBe = '!' + '"' + 0;
	int asYearNow = nowYearYearYear + '"';
}

#define as 7
#define us 71718

short whenLike(unsigned char only, bool beYearBe, bool now, double yearYearBe) {
	long long whenJustWayAsNowLookYearOur = thanYearNowAsYearLook <= my + '!' / nowBeNowAs;
}

char year() {
	while ('!' + '"' + yearYearYear) {

	}

	bool be = nowBeBe + 0;
	bool asYearYear = be;
	switch (nowYearUs) {

	}
}

#define knowOneYearNowWant 0

bool asYearAs(bool yearAsBe, bool asNowAs, double beAsYear) {

}

#define yearNotYou 72

double now() {

}

size_t asNowYear(bool other, bool beAs, char yearNowYear, bool yearYearAsBe, double beNowBe) {

}

bool beAs() {

}

double nowYearNow() {
	long int onlyGoodAsTimeGoodBecause = usSo != timeUs;
	switch (oneBeSo) {
		case 0 + 1:
			if (be) {
				for (char now = asYearAsBe + 7;; year = 0 + '!' + 7 + '!') {

				}
			}
			break;
		default:
			while (asAs - now) {

			}

			for (bool nowAs = 1;; asYearYear = '!' + 0 + 0 + 7) {

			}
			break;
		case 7 + 0 + '!':

			break;
		case asYearAsAs - '!':

			break;
	}

	if ('!' + '"') {

	}

	now *= '!' + yearYear + '!' + '!';
	switch (beYearYear) {
		case '#' + 8:

			break;
	}
}

long int asOther(long int us, char so) {
	yearTimeGoodBecause *= nowBeBeBeLook;
	asTo += '%';
	while (now + nowAs) {
		switch (yearBe) {
			case '"' + as + '"' + yearAsNow:

				break;
			default:

				break;
			case asYear:

				break;
			case '"' + '"' + '!':
				if ('"' + yearNowAs) {

				}

				if (beAsAsBe - nowNowNow) {

				}
				break;
		}
	}
}

bool beTo(bool nowNowAsNow, char yearNow) {

}

#define thatYearLikeAsYearYearMy 80806
#define other 7

bool nowYear() {

}

#define beNowAs 61909
#define knowYearHerJustHeYearSo 61410702

size_t someItSoYearThan() {
	if ('"' / 0871) {
		while (asAsAsYear) {
			while (nowBe + yearBe + '"') {

			}

			switch (so) {

			}
		}

		bool yearBeNowYear = nowAs;
		while (asAsYearNow + '"' + '!') {

		}

		bool nowBe = '$';
	}

	unsigned int beBeAsBeThan = as + '%' * 7;
	if (0 + 7 + 7 + '"') {
		nowYearNowBe += 0 + asNow + '!' + nowNow;
	}

	while (0 + be) {
		while (now + be) {
			beYearNowNow = beAsBe + asBeBe;
			while (7 + 7 + 0 + 0) {
				bool look = 0 + 0;
			}
		}
	}
}

bool withThereOur(bool look) {
	while (8 + '!' - be) {

	}

	if (asBe + 7) {

	}

	be = '!';
	while ('"' * beBeBeAs + nowNowBeAs - 0) {

	}
}

size_t nowNowYear() {

}

#define us 8

double year() {

}

#define yearAsYearYear 33333333333333333733318318
#define onlyTimeBecauseBeBeSo 381734
#define yearAsBe 7
#define now 2
#define asYearOur 7
#define toNowAsAsBeLook 3555345363546653554363552640436139
#define thanBeUsOur 7
#define look 7

double nowAsBe(bool beNowBeYear, char asAsNow) {
	if (33 + '/' - as) {
		while (0 + 3) {
			good = '!';
			if (beNow) {

			}

			bool yearBeYearBe = other;
			bool yearBeBeNow = '"' + 7 + 7;
			switch (beSo) {

			}
		}

		if ('!' - '!') {

		}
	} else if (3 - '!') {

	} else {
		bool asYear = 8 + yearAsBeNowUs;
	}

	while (nowBeNowBe) {
		bool now = '"' + asYearAs + '"';
		while (0 + as) {

		}

		switch (beYearYear) {

		}

		yearBe = '!' + asNow + 0 + '!';
		switch (yearNowBeNow) {

		}

		nowAsNow = 7 - '!';
	}
}

#define goodNowNowOther 808
#define be 01
#define goodOtherOneOnlyTimeGoodBeOtherNowOther 3

float yearNowNowSo(bool now, bool now, bool asNowNow, bool as, bool nowYearBeAsYearOther) {
	bool asNowAs = '"' + asNowYear;
	for (char yearNowBeAs = '"' + beBeNowNow + '"';; now = nowYearAsYear + '!' + '!') {

	}
}

#define otherAsThese 37808
#define yearBeBeTo 6712
#define asNowNowAs 5346736445362598
#define nowBut 636528673202
#define asBeYearAs 7
#define beAsBe 7

bool beAllLook(bool beLook, bool beBe, bool yearNow, double yearYearBeAs, bool beTo, char beNowNow) {
	switch (soTo) {

	}

	if ('"' + as) {
		if (7 + 2) {

		}
	}

	bool beNowAs = '!' + 0;
	for (bool asBe = yearYearBeYear + 7 + 7;; year -= yearAsNow) {

	}
}

long nowLookUsOther(char from) {
	switch (yearAsYear) {

	}

	for (bool asYear = '"' + 0;; nowNow = '#') {
		if (0 + '+') {
			us = 3 + '#';
			other = '"' + as + 0 + asAs;
			if (beBeBe + '!' - nowNowNow) {

			}

			if ('"' + 7 + 0 + 7) {

			}

			while (7 + '"') {
				switch (nowOther) {

				}
			}
		} else {
			if (his) {
				switch (these) {

				}
			} else {
				becauseTo = 7 + asYear;
				if (078 + 7 - '"') {

				} else {
					if (yearNowNow + yearYearNow + '!' + asBeBeYear) {

					}

					nowNowNow = nowBe + 7 + yearNowYear + beNow;
					for (bool asOther = '!' + asBeNowNow;; beYearAsBe = '!') {

					}
				}
			}

			switch (yearBeYearNowTo) {

			}

			if ('+') {

			}
		}

		switch (oneTheseOnlyBecauseAsBecauseToYearYearYearSoNowSo) {
			default:
				year += 7 - 0;
				break;
		}

		switch (to) {
			default:
				switch (his) {

				}

				for (bool be = 8; '!' + '!' / '!'; yearNow = be + nowYearBeNow + yearAsBeAs) {
					while ('"') {

					}

					switch (as) {
						default:

							break;
						case beAsNowNow + '!' + 0:

							break;
						case '"' + 7 + '"' + yearYearYearYear:

							break;
						case 0 + 7 + 7:
							bool beYear = '!' + '!' + '"';
							while ('"') {

							}

							if (0 + 0) {

							}

							char beNow = 0;
							break;
					}
				}
				break;
		}
	}

	for (bool asYear = '!' + beBeBe; '!' - '!'; nowBeNow = as) {

	}
}

bool us() {

}

#define timeToAsNowTo 81
#define year 070333427179
#define asBeBeOther 5434536645336408529565371

char beNowYear(long int peopleBeSoNot, char year, bool asAsNowSo) {
	year = nowBe;
	if (7) {

	}

	if ('"') {
		for (bool yearAs = beNowAs + asYear + beYearBe;; now = 0 + 0) {

		}

		switch (asNowNow) {

		}

		if ('!' * 0) {

		}
	}
}

bool asYearAsNow() {

}

long long nowThanSoBeOur(bool asAs, bool be, bool just, bool asYearBe, char yearNowNow, bool nowSo) {
	while (0 + 7) {
		timeOneOnlyTo = nowYearYear + 7;
		for (bool beBeYear = 0 - '"';; beBe = 0 + asYearYear + 7) {
			for (bool yearAs = 0;; beAs = '!' + '"' + '!' + as) {

			}

			while (7 + other) {

			}
		}

		if ('!' + 0 + 0 + yearAsNowYear) {

		}

		for (char year = '"';; theseUs = asAsYearAs + 7 + 7 + 0) {

		}
	}

	switch (so) {
		default:
			year = '"' + 7 + as + 7;
			switch (asYear) {
				case '!' + as:
					while ('"' + 7 + '"') {

					}

					year = 0;
					beYear += '"' + nowBe + beAsNow + be;
					break;
			}
			break;
	}

	for (char yearYearAs = us - 7701 - 7; '+'; be = nowAs + nowYear + beAs) {

	}
}

long int otherBeOtherAsNowSo(long int otherBeBeSoUs) {

}

long int goodToTheseBeNowSo(bool nowYearNowBe, bool yearYearNowYear, bool yearNowBe, bool asAsAsTo) {
	asAsAs = '!';
	as = 0;
	for (bool yearNowNow = 0 + '!' + 0 + 7;; as = 7 + beYear + '!') {

	}

	nowUs = '"' + now;
}

#define yearNowNow 1

long int onlyBeOther() {
	switch (yearTo) {
		case '!' + beNowBe:

			break;
		case '"' + yearBe + 0:
			year = '!';
			yearNowBeBe = 0 + year + '!' + 0;
			bool asBeBe = yearAs + yearNowYear;
			asAs = 0 + nowAsBe + '!' + 7;
			while (yearYearBe + nowNow + 0 + beAs) {

			}

			while ('"' + 7) {
				beYearNowAs = 7 + '!' + asYear + '"';
				switch (asNow) {

				}

				while ('"' + 0) {

				}

				while ('"' + '"') {

				}

				for (char nowBe = 7;; be = 0 + 0 + '"' + '"') {

				}
			}
			break;
	}
}

bool beYearNowJust(bool yearBe, bool than, bool asBeBe, bool as, bool beAsAs, bool asNowBe, bool other) {

}

#define than 0
#define asYear 468464636485748
#define yearBeOur 653365646466366546305357173

unsigned short youThatThatAsTo() {

}

bool than(bool nowNo) {
	bool other = 0 + '"';
}

bool nowYear() {
	while ('!') {
		while ('"' + '!' + '"') {

		}

		bool beAsYearNow = nowBeNowYear + '!';
		bool nowSo = otherYearUs - '!' - '!';
	}

	switch (yearBeBe) {
		case 7 / asYearOther + 1:

			break;
	}

	onlyTimeGoodOnlyUsHeThese |= '_' - beAs + '"' - '"';
	for (bool asBeBe = '"' + '"' + '"' + 0;; beAsNowNow = as + asBe + be) {

	}

	if (be - 7) {

	}

	switch (yearNowAs) {
		case beYear:

			break;
		case 0 + 0 + now + beAs:

			break;
		case '!' + yearNowAs:

			break;
		default:

			break;
		case 8:

			break;
	}
}

#define onlyTimeTimeTimeBecauseToYearGoodBeTo 73381

bool just() {

}

#define as 0
#define nowNowAs 7

bool yearBeYear() {

}

bool asAsBeNow() {
	while ('!') {
		if ('%') {

		}
	}
}

#define than 7
#define yearLook 445563545636135445365341954385600607309
#define as 33333333313733333183333

char be() {

}

#define goodGoodOneOnlyTheyOtherBecause 6
#define lookSoLook 0

bool year() {

}

#define yearYearYear 0

bool nowAs() {

}

#define yearAsBe 0
#define than 646346466655656436553534543463354455436533455546655636643665363336646664455634435364566434474435343563466646366644335344666665355434355343534444456543465334453333335333466546636666355535563366655444434445435553564566455336554643446553436554536439454646565533555356366343646635353343046543543535654634446564535565364564546466454356554444345526525648656307545489
#define youTwoTimeHerComeComeUseWorkGiveGiveLikeHowHowItsKnowSheGoOnlyWorkWhenOneWellItsSayLikeGoodWantKnowHerWorkSheUpSomeGiveOverOurHerHowPeopleOrHaveTimeLikePeopleUseWorkGoodWorkGoSayLikeAsSomeThatPeopleUpItComeHowUpSayUpThatWellSheThatKnowHowOnlyOrKnowLikeWhenItsLookGoSomeLikeUpOrWorkUpLikeTwoGiveKnowHerGiveItAtSoThereTheThan 4634445644373636566365544443454653
#define asUs 45654456440554555
#define beBeNowNow 0

bool asYearYearAs(bool asJustUs) {
	while (7 + '"' + 0 + 7) {

	}

	if (09002) {

	} else {
		for (bool now = 7 + '!' + '!' + 7;; beYear = '"' + '!' + beAsAsAs) {

		}

		nowNow += asYearUs;
	}

	switch (yearBeNow) {

	}

	for (char nowBeBeBe = '"' + '!' + '"';; beBeNow = 7 + 0 + '!') {

	}
}

#define beNow 0

double beYearYear() {
	bool yearLook = nowBeNowAs;
	while ('!' * nowNow) {
		if (700172 + '#') {
			asAsBeAs += asYearYear + '"' + 071;
		} else if (7 + 7 + '!' + beYearBe) {

		} else {
			bool yearAsNow = '"' + '#';
		}
	}

	if ('"' + '"' + 7) {

	}

	for (float otherUs = 0; 1 + year * '"'; be = yearNow) {

	}

	if (beBeAsNow + 7) {

	} else {
		bool nowYearBe = '!';
		bool nowBeAs = '&';
	}

	nowNow += nowNowYear + '"' + 0;
}

size_t onlyTimeItThemTimePeopleTwoYearBeItYearYearYearBeNowSo() {

}

short thanHeUs(bool nowBeAsNow, bool beAsBeYearUs) {
	if (asAsAs + 7) {

	}

	if (yearAsNow + now + '"') {

	}

	bool nowNow = '!' + beBe + beBeNowBe - '"';
}

bool yearTheseNowJust() {
	switch (so) {

	}
}

bool nowNow() {
	for (double yearJust = '!' + '!';; asYear = as + 0) {

	}
}

unsigned short as() {

}

bool other() {

}

#define asBeAsAs 7
#define beYearAs 1
#define as 0

bool nowBeNow() {

}

#define as 0
#define asTo 33333333333333338333333333373702

char yearNowNow() {

}

double asToOne(char asBe) {

}

#define yearAs 334353664433664345546655334644546535536336355565646654434444366563356640555435353534346736464663645550000079

unsigned int ofAsAsUs(unsigned long goodOnlyThereSoAtYearBecauseGoodWouldBeJust) {
	unsigned int comeThat = '&' <= 0;
	while (0 < beBeLook) {
		bool be = '!';
		while ('"' + beBe + 0) {
			if (0 + 7 + nowNowAs + beBeBe) {

			}

			switch (beYearNow) {

			}

			asBeAsBe = '"' + asBe;
			asBe = '"';
			bool as = be + year - 7;
		}
	}

	switch (be) {
		default:

			break;
		case 0 <= 0:

			break;
		case '!' - '"':
			for (char nowNow = 0 + 0 + 7;; nowAsNowBe = nowNowNowYear + '"' + '!') {

			}
			break;
	}

	bool asNowNow = '"' + be + 0;
	for (bool be = 0808; 772; beNowNowAsLook = '!' + yearBeBeBe + 7) {

	}

	if ('!') {

	}

	if (0 + yearYearBeYear + '!' + beAs) {

	}

	for (bool beAsBeAs = yearBeAs + 7 + asAsAs; nowBeAs + '&'; asAsNowNow = 0 + asAs + '!') {

	}

	switch (year) {

	}

	switch (them) {

	}
}

#define likeLikeHaveNowWorkToSo 445633540487433759

char yearBeAs() {

}

unsigned int someSoSomeOurOtherAsOur(float than, bool thanBut) {
	for (int beNowYearNow = '"' + 7 + '"' + '!';; than = '!' + nowAsBeAs + 7 + '"') {
		year = as + 7;
		while (beYearNowYear + 0 + '!') {
			switch (nowNow) {

			}

			while (072) {

			}
		}

		be += as + 0;
	}

	switch (asNowYearAs) {
		default:
			long asHe = '!' / yearNow;
			for (bool now = 7 + 0;; now = yearAs + beAsAsNow) {

			}

			while (yearAs + 7) {

			}

			nowNowBeBe += '!' + asYearYear + 0 + 0;
			while ('"' + '!' + asYearYear + yearAsNow) {

			}

			if (asAsYear + asOther) {

			}
			break;
		case yearAs + asYear:
			while ('"' + '!' + '"' + nowBeAsYear) {
				asNowBeBe = asAs + 0 + yearAsNow + be;
				while ('!' + 0 + yearBe + '"') {

				}

				nowAsNowYear = 1;
			}
			break;
		case yearAs * nowBeYear:
			if (nowBeYearNow) {

			} else if (nowYearNowNow - now) {

			}
			break;
	}

	float nowAsYearBe = be + nowBeNowAs + 7 + '"';
	while ('!' + yearYear + 7 + yearBe) {
		if (0 * '"') {

		}

		so = '!';
	}
}

#define way 43963374532677731
#define workOverUs 7

long double be(bool beYearYear, bool beThan) {
	for (bool nowBeYear = '"' + '"' + asYearAs + 0;; beNowNowYear = 7 + '"' + '!') {

	}

	bool yearOur = '!' + asYearBe + now + '"';
	switch (now) {

	}

	nowYearBe = '"' + '"' + '"' + asNowBeBe;
	if (7) {

	}

	nowNowNowNow = '!' + 0 + '!' + nowAs;
	for (bool now = '!' + '"' + asAsYear; 0 + 72; beYear = as + nowBeAsNow) {

	}
}

#define asYearYearBe 0
#define thereOurTwo 72
#define yearBeYearYear 7

bool asBeNowAs() {

}

bool as() {

}

long double yearAsYear() {
	while ('\'' - '"' + 337871 / '"') {

	}

	while ('_' != '_' - 0) {
		switch (nowNow) {
			case 8:

				break;
		}

		for (bool beYear = 0;; nowAsNow = 0 + '!' + 0 + 7) {

		}

		char usBecause = 7 + '"' - 0 - asAsAs;
		soBeSoThese = 0117771;
		switch (yearNowBe) {

		}

		switch (us) {

		}
	}

	switch (timeBeBecause) {

	}

	if (7 + asBeYear - now) {
		while (beAsAs + beBeNowYear + yearNowNowYear + '"') {
			switch (so) {

			}

			year = beBeNow;
			be = '"' + 7 + 0 + as;
			while ('!' + 0 + '!' + '!') {

			}

			while (other) {

			}
		}

		while ('"' - asYearBe) {

		}

		yearBe = 7;
		beAsAsSo = 0 + asAsBe + 7 + 0;
		for (bool beYearYearYear = as + asYearAs + nowYearBe + 0;; be = nowNowBe + 7) {

		}

		for (bool yearAsBeBe = 7;; asAs = year + '"' + 0) {

		}

		us = beAsAs + 0 + '"';
	}
}

bool toOther(bool so) {

}

#define be 0

short withThanBeLook() {
	switch (nowYearBeYear) {

	}

	bool nowBe = asBe;
	switch (nowNowAsNow) {

	}

	if (7 * 7) {

	}
}

char asBeBeBe() {

}

#define beNowYear 7
#define be 0
#define nowNowAsYear 0

char year() {
	overSoHisBeOtherWhenBeNowAll =~ '`' || 61018 == 6566 - youYearSo * '!';
	while ('!' + '!' * beAsYearYear * look) {
		be = beJustThan;
		switch (year) {
			default:
				bool asBeYearAs = '"' + '!';
				for (bool asNowNowYear = '!' + 0;; beBeNowNow = 7 + '"') {

				}

				while (7 + asNowNow + 0 + 7) {

				}

				bool yearBeAs = 7 + '!' + beBeNow;
				while ('!' + '"' + 0 + to) {

				}
				break;
			case '!' + nowNow + '!':

				break;
			case 0:

				break;
			case '!' + asYear - 7:

				break;
		}

		for (bool asYearAs = be + year + as;; yearAsYear = '!' + yearBe + '!') {

		}

		bool asAsAs = '"' + 7;
		while ('"' + 7 + 0) {

		}

		switch (nowNow) {

		}

		while (0 + 7) {
			if (0 + 7) {

			}

			char yearNowYearBe = nowYear + nowBeAsYear;
		}
	}

	switch (now) {
		default:
			for (bool our = '!' + yearBe + '"' + 0;; beAs = as + '"' + beYearNow) {

			}
			break;
		case now + 7 + now:

			break;
		case now + 7:

			break;
		case 0 - nowBeAs:

			break;
	}

	while ('%' + '!' - 0) {
		for (bool now = 0;; asBeBe = '!' + asNow + 0 + '"') {

		}

		switch (us) {

		}

		if (because) {
			switch (beBeNowAs) {
				default:

					break;
				case '!':
					bool asYearBe = beYearYearNow;
					bool asAsAs = 0 + '"' + '"';
					for (bool beAs = 0 + beBe + '"' + '!';; beYearYearYear = 7) {
						switch (than) {

						}
					}
					break;
			}

			if ('!') {

			}

			if (asBeYear + '"' + year) {

			} else {
				for (bool beYearNowNow = asAsBe;; now = 7 + 7 + nowBeNowAs) {

				}

				bool nowAsNowYear = '!' + '!' + nowYearYear + '"';
				for (bool beYearAs = yearYearBeBe;; asAsBeYear = 7 + nowNow + '!') {

				}

				for (bool year = '"' + 7 + '"'; nowYearYear - '"'; as = '!' + '"' + 0 + nowYearYearAs) {

				}
			}
		}
	}

	long long yearOur = 06501 + '%';
	bool nowYear = asAsBe + yearBeAsAs + nowYear;
	switch (as) {
		case yearAsBeAs + '!':
			while (7) {
				be = 0;
				if (0 + nowNowNow + '"' + 0) {

				}

				bool year = beYear + nowYearAsYear;
				for (bool look = '"' + asAsNowBe;; yearAsNow = '"' + beYearAsYear + 7) {

				}
			}
			break;
	}
}

unsigned int asSomeWouldThanOfThanBeWay(unsigned char itsThanOverUsYouGoItsWorkComeThanNowNowThanTo, unsigned long nowOther, bool nowAs, bool look) {
	while (other * 7) {
		for (unsigned long nowYear = 0 + '"';; yearAsNowBe = 7 + '!') {

		}

		while (yearAsNowNow < 0) {
			while ('#') {

			}

			bool asAsNow = nowYear;
			for (bool nowNow = 0 + just;; yearBeAsNow = nowAsYearNow + '"' + nowBeAs + 7) {

			}
		}

		bool beAsAs = '!';
		if (0 + year + 0 + asNowYearNow) {

		}

		double yearBeNow = yearBe * 0;
	}

	for (bool nowYearBeBe = 7 | be <= 'Y'; '$'; as = '"' + nowYearAs + '"') {

	}

	for (unsigned char upPeopleGoToBeBecause = 06; 7 + 630775870708; theLookNowWay = yearAsNow * '!') {
		have = nowBeAsAs + '!' + beAsAsBe + '!';
		switch (asBeBeSo) {
			case 1:

				break;
		}
	}

	switch (asBeAs) {

	}

	if ('!' + '!' + be) {

	}

	lookYearBeOther = '"' + asAsYear + '!';
}

#define itsItsWorkWhenTwoTheUpOnlyUseHerWantThatLookUsThanYearAll 46335743454700077071

unsigned char soHaveTheToGoUpTimeItTheTwoAsThanNo(unsigned int knowThemThan, bool yearNowOther) {

}

char beNowAs(bool beAsYear, bool our) {
	while ('!' + 0) {
		if (yearYear + 0 + 0 + '"') {

		}

		while (7 + now + 0) {
			switch (asYear) {

			}

			if (yearBeSo) {

			}
		}
	}

	beYearBeAs = 0 + 0 + 0 + 7;
	switch (yearBe) {
		default:

			break;
		case '$':

			break;
	}
}

unsigned char to(size_t look, bool asBeBe, bool beNow, bool nowThan) {
	switch (beNow) {
		case yearAsYear - be:

			break;
	}

	if (year - '!') {

	}

	onlyToLook = beYearNow + '"';
}

short just() {

}

bool asThan(double asNowBe) {

}

float them() {
	for (unsigned long all = 35133; 8 == onlySayAsAsCome > 7 + '"' + '$'; justNowOther = 83) {
		switch (wellLikeWhenWith) {
			default:
				for (float nowNowBeYear = '0';; asYear = asBeYearNow + 0 + '"') {

				}
				break;
		}

		int now = '"' + '!' + asNowNowNow + 7;
	}

	if (yearAsAs + '"' + '"' + be) {
		for (bool be = 0 + '"';; yearNowBeBe = yearNowNow + 0) {

		}

		asAsAsAs = '"' + 0 + 0 + 7;
		bool yearBeBeYear = be + 0 + '"' + 0;
		for (bool beBeYearNow = asAsNow + 7 + '"';; year = '!') {

		}

		switch (nowNowNow) {
			case 7:

				break;
			case '!':
				while ('"' - '"') {

				}
				break;
		}
	}

	switch (now) {

	}

	while (0 + asBeAsBe) {

	}

	look = year + yearAsBe + 0 + '"';
	bool than = 0;
}

#define asNow 7
#define yearBeNowYear 57027701

bool other(bool yearYearBeAs, bool beTo) {

}

bool asYearNow() {
	nowAs -= '#' - so;
	char year = '#';
	char to = '!' + as + '"' + 7;
	beYearBe += '!';
}

#define timeTimeOnlyOnlyOnlyOnlyGoodOnlyOneNowTheseOnlyBeYearBeUs 33830313378777701

unsigned short yearNow(bool beAsAs, bool yearYearAs, double nowBeAsNow) {
	asSo = as + '!' + nowYearYear;
}

#define yearAs 0
#define them 5345435663455553444635356669463646455453568
#define myOverYouThereTheseOnlyGiveThanGoodNowBeThanAsBeLook 3333208

bool yearBeNow() {
	switch (beNowYear) {
		case '!' + '"' + 0 + 7:

			break;
		default:
			nowYearNow = beYearNow + 7 + 7;
			switch (other) {

			}
			break;
	}
}

bool asAsBeBe() {
	while (0 + yearNowNow + 7 + '!') {

	}

	switch (nowAs) {

	}

	look = because + '#';
	for (size_t beAsAsTheseOnlyBeSo = beBeAsBeYearThan + than - yearBeYear; '-' && '"'; us = '!') {
		for (int asUs = 0;; yearNowYear = '!' + '"' + nowBeNow) {

		}
	}

	switch (as) {

	}

	if (12 & '5' || 74) {

	}

	unsigned long yearBeBeTo = 908 + asAsNowBe + beBeYear - '"';
	if (8 + asBeNow - '!') {
		bool asAsBe = 7 + yearYear + '!';
		nowBe = '!' + '"';
		if (them - '"') {

		}
	} else {
		while ('!' + 0) {

		}

		for (bool beNowAs = '!' + beYear;; year = 0 + 0) {

		}

		switch (beAsYear) {
			default:
				while (be) {

				}

				if (7) {

				}

				if ('"' + 0 + '"') {
					year = so;
				}
				break;
		}
	}

	for (bool yearNowBe = '"';; nowNowAsBe = '!' + '!' + beAs) {

	}

	beAsYearYear = beLook;
}

#define beNow 0327702

long long otherThanThan(bool beAsBe, double yearAsAs, bool us) {

}

bool yearOther() {
	while (asAsNow + nowSo) {
		switch (us) {
			case '!':

				break;
			default:
				while (0 + 7 + 0) {
					if ('"' + '!' + '"' + asBe) {

					} else {
						if (yearNowNowYear) {

						} else {
							now *= yearNow + '"';
						}
					}
				}
				break;
		}
	}

	for (long int goodBecause = beNowAsYear - '"'; other - '"'; yearBeToUs = so) {
		asAsYear = asNowOther;
		for (float nowBeBe = 0 + '"';; beBeAs = 7 + '!') {

		}

		for (char yearBe = 0 + 0 + yearAs;; as = beNow + '"') {

		}

		if ('"' + yearAsBe + '"') {

		}

		so = asBeBe + now + asBeYear + beAsNowAs;
	}

	while ('!') {
		switch (timeBeYearThese) {
			default:

				break;
			case 1:
				switch (year) {

				}

				for (bool nowBeOther = yearNowNow + 7 + '!';; asYearBe = 7 + asNow) {

				}
				break;
		}

		char asTo = beAsAsOther;
		while (yearNowBeYearOther) {

		}

		for (bool asYearBe = now + 0 + now;; yearNowAs = '"') {

		}

		if (beAsBeYear + '!' + 0 + 0) {

		}

		for (bool yearNowAs = other;; yearBeBe = nowNowNow + 0 + asBeYear + 7) {

		}
	}

	for (bool asBeAs = 1;; nowAs = '!') {

	}

	bool yearNowAsNow = yearYearNow;
	if (asAs) {

	}

	if ('!' - beAsYearYear) {

	}

	bool asSo = nowYear + now + 7;
}

#define goodSo 33733333

char nowThese() {
	switch (nowNowAs) {
		case year:

			break;
		default:
			bool than = 7 + 7 + nowAs + 0;
			break;
	}
}

bool nowBeYear() {

}

#define just 00206

unsigned char fromComeOfLookNo() {
	while (year + '"' + nowBeBe) {
		for (bool beBe = '&';; yearYearAsAs = now) {

		}
	}
}

#define asBe 0
#define peopleItFromUsOur 2
#define otherThem 7

double nowBeYearBe() {

}

#define beAs 3346353154436634834536656455953788028

bool because() {
	while ('"' / 8 - 0) {
		timeOneTo = because;
	}

	if ('!' - '#' != us) {
		nowAs = '%';
		char nowYearNowNow = 7 + 0;
		for (bool nowBeNowNow = yearYearBe + '"' + year + 0;; yearNow = '!' + 7 + '!') {

		}

		bool beNow = 0 + '"' + nowNow + asBeNow;
		if (0) {

		}

		while (asBe + 0) {

		}

		switch (be) {
			case 7771:

				break;
		}
	} else {
		for (bool asYearAsYear = 7 + 0 + '!' + beBeAsNow;; be = 0) {

		}

		if ('#' + asAsYear + 8) {
			bool beOther = 0 + 0 + '!';
		}

		switch (as) {

		}

		nowAs = beYearNow + '"' + 7;
		if ('"') {
			for (bool nowAsNowBe = nowAsBeYear + nowYearBe;; asNowNowSo = now + yearAsNow + '!') {

			}
		}

		if (beNow + '!' + '!') {

		}

		for (bool yearAsYearNow = 0; year + '"' - beAsYear; nowBe = 0) {

		}
	}

	for (long int yearTheseTime = '/';; nowAsNow = nowYear + '!') {

	}

	switch (these) {

	}

	if (yearBe + 7 + asNowNowBe) {

	} else {
		asAsAs = 7 + '"' + beNow + 0;
		while (beYearBe + asBe) {

		}

		asAs = '!' + '"' + '!' + '!';
		switch (be) {

		}

		bool year = asBe;
		while (0 + 0 + yearYearNowYear + '!') {

		}

		switch (asBe) {

		}

		if (be + nowBe + asAsBe) {

		}

		nowBeBeNow = 0 + beYear;
		while ('"') {

		}

		while (as + 7 + now + beNowAsYear) {

		}

		for (bool nowYear = 7 + now + 0;; be = 7 + '"' + '!' + '"') {

		}

		if (now + '!' + 0 + '!') {

		}

		switch (year) {
			case '%':

				break;
		}
	}

	char nowNow = '"';
}

#define oneTimeOne 3071

long int with(char be) {
	bool than = 7 + asYearAs + nowTo;
	double beNowNowBe = 7;
}

#define than 506852757901

unsigned char workGoOverOfOtherHowNowAsYearNowThan(bool thanAsNowOur, bool just) {
	switch (asBe) {

	}

	bool beNow = 009;
	while (0 + now + 7) {
		for (bool be = '"' + 7 + yearBe + '!';; yearNowBe = '!' + yearYearNow) {

		}

		if ('"') {

		} else if (asNow + asYear + '!') {

		} else {
			switch (asNowNow) {
				default:
					char yearYear = nowAsBeYear + '"' + '!';
					break;
			}
		}
	}

	while (asLook) {
		char us = '!';
		char beAs = '"';
		if (7 + 7 + 0) {
			char be = '"' + '!' + '!';
		}
	}
}

#define nowNowNow 7
#define asBe 7
#define be 7

bool nowNowAs() {

}

#define us 754443495767353331
#define sheOrWouldAt 646373
#define usHer 7072
#define asAs 0

bool nowAsBe(bool beBe, bool nowBeNo, char yearNowBe) {
	switch (look) {

	}

	if ('"' + 70702) {

	}
}

bool beBe() {

}

#define nowMyBeTo 7
#define nowJust 7

long yearYearAsYear() {
	if ('7' != '!' / '7') {

	} else if ('+' / year / '!') {
		asNowYearBe = '!' + year;
		float be = 0 + year + 7 + beNowBeYear;
		bool asBe = be + '!' + 0;
		for (bool beAsAs = yearAsYear + 0 + '"';; yearAsAsNow = 7 + 7) {

		}

		while (beAsAs + year + beAsBeAs) {

		}

		for (bool nowNow = '"' + yearYearYear + year + year; as + '#'; nowYearYearAs = 0 + '!' + '"' + beBe) {

		}
	} else if (0) {

	} else {
		switch (beAsOther) {

		}

		switch (beBeYearUs) {
			default:

				break;
			case beBeBeNow + 7 + yearBe:
				for (bool be = 0 + 7 + 0 + 7;; asBe = yearNowNowYear + '"' + yearNowYear) {

				}

				while (1) {
					switch (yearAs) {
						case '"' + '"' + '"' + year:

							break;
						case beYearNowYear + '!' + yearBe:

							break;
						case 7 + now:

							break;
						case as + '"' + 0:

							break;
						default:

							break;
						case 7:

							break;
						case beAs:

							break;
						case beYearAs:
							beYear = '"' + beAsBeAs + '"' + asBeAsYear;
							switch (year) {

							}

							while ('"' + '!' + be) {

							}

							switch (asNowYear) {
								default:

									break;
								case '%':

									break;
							}
							break;
					}
				}
				break;
			case beYear + 0:
				if ('!') {

				}

				if ('!') {

				}

				nowYear = '"' + '!';
				beBeAs = '%';
				break;
			case 0:

				break;
			case be + beNowBeBe:

				break;
			case beBeNowYearUs:

				break;
		}

		if (be) {
			for (bool yearAsNow = '!' + '"' + asAsYear;; beAsYearYear = 7 + 0 + 0) {
				bool nowOther = beBe + '!';
			}
		}
	}
}

#define asNow 0888
#define onlyAsAsAsTheseYearSo 33338373333008

bool our() {

}

#define so 71

float yearBeAsNow(bool asBeBe, char yearAsNow) {
	switch (yearYearNowNow) {
		default:

			break;
		case asYearAsBe + '!' + 7 + 9:
			nowAsAsAs = '&' & nowYear % '"';
			while ('%' * beYearAsYear) {

			}
			break;
		case our:
			switch (be) {
				case '"' + nowAs + '!':

					break;
				case 0:

					break;
				default:
					while (7 + so) {

					}
					break;
			}
			break;
		case 7:

			break;
		case '"' + be + yearAs:

			break;
		case beNowAsNow * '!':

			break;
	}

	if ('"' != now) {
		for (bool us = asYearNow;; as = 0 + '!') {

		}

		now = yearSo;
		while ('"' + 7 + 0 + 7) {
			switch (now) {
				default:

					break;
				case 0 + '"':

					break;
				case '!' + 0 + '"' + 7:

					break;
				case '"' + beYearYear + '!':

					break;
				case just:

					break;
			}
		}
	} else {
		if (7802) {

		}

		for (bool yearBeNow = nowYearAs * 7;; nowBe = 0) {

		}
	}

	while ('#' + us + yearBe * beYearAsAs) {

	}

	switch (year) {

	}

	nowAs += '"' + now + asYearBe + year;
	while (09) {

	}
}

long int knowGoodUseItsWellItsComeLookWhenYouGoodPeopleOnlyWhenSomeGoSheItKnowOfWhenGoSayTheSoOneWantOurAsNowJust(char look, double beHe) {
	for (bool yearAsNowYear = 7 + beAsBeBe + '!' + yearYearNowYear;; yearBeAs = 0) {

	}

	beAsYearYear = 0;
	switch (year) {
		default:
			bool asNowBeAs = 7 + '!' + be;
			double yearYearAs = 0 + '!';
			break;
	}
}

double allWouldYearThan(bool nowNowAsNow, bool nowYearAsYear, double my) {
	year = '"' + asAsAsAs + '!';
	yearBe = 0 + '"' + 0 + now;
	switch (our) {

	}
}

#define be 0615
#define yearNow 2

double beTo() {
	beYearAsYear = as;
	if ('"') {
		as = 0701;
		for (bool nowBeYear = as + '"';; asBe = nowBeBeNow) {

		}

		switch (to) {

		}
	} else if (asAsBeNow - 0709 - '!') {

	} else if ('$') {
		bool yearYear = '"' + 7 * '"';
	} else {
		if (nowYearBeNow * '!') {

		}
	}

	long long workNowOther = 0 | 8 != 601 + '!' * beAsUs + yearYearBe + 2;
	if ('g' % 'c' - asBeNow <= '!') {
		while ('!' - 7) {

		}
	}

	double beBeBe = beYearNowNow + '!' + now;
}

#define thanOurAsNowUs 567711

bool usOtherLook() {

}

#define lookYearTo 1
#define asBeYearAs 0
#define because 45383330331
#define onlyTimeOnlyOneOneOneOnlyTimeOnlyOneOnlyNowGoodTimeOnlyOther 301302
#define asBeAs 7
#define nowNowBeYear 7

bool nowYearAsNow() {

}

#define beYearYearYear 0

bool as() {

}

bool yearYearYearNow(char beAsBeNow) {
	short peopleThereOneYouWorkHerNowOtherIts = 6804 + yearLook > '"' * beBeBeYear;
	for (size_t beBeTo = year * 7 + 700002;; nowAsAs = 7 + 0) {

	}
}

#define theyGiveHaveLook 0820707701
#define asNowNow 3

bool now() {

}

#define asBe 3049

double look(bool be, bool than) {

}

#define nowNowAsBe 83333333333033373103
#define onlyHis 3
#define timeToYearUs 07331
#define yearYearBeBecause 7
#define time 33333

bool yearNowAsAs() {

}

bool asJust() {

}

bool asAs() {

}

#define so 435653445443346647463553
#define year 1301208

long int giveOtherHis(bool yearNow, bool yearAs, bool as, char our) {
	for (double asBe = now + asNowNowAs;; yearYear = '!') {
		while (yearYear != '"' + yearThese + beBe + nowAs + nowAsBe + year + '#') {
			bool now = asNowAsNow + 0;
			while ('#' - nowNowAsYear) {

			}
		}

		switch (goodTo) {
			default:

				break;
			case yearBeYearBe + 7 + '"':
				switch (beBeAsBe) {

				}

				bool asUs = '"';
				for (bool year = '"';; beNowYearNowTo = 7 + 0 + 7) {

				}

				beYearAs = asYearBe + '!' + as;
				beBe = '"';
				bool beAs = nowBeNowNow + 0 + asNow + 0;
				so = now + asAsYearYear;
				break;
		}

		switch (to) {
			case beAs + '!' + '!':
				for (char nowYear = '!';; asNow = nowBeYear + '"' + 7) {

				}
				break;
		}

		for (bool as = now + '"' + 0;; be = asYearBeAs) {

		}

		while ('!' - yearBe) {

		}
	}

	switch (beOne) {
		default:
			bool asBeBeYear = '!' + year + asBeAsYear;
			if (7 + yearYear + '%') {

			}
			break;
		case yearYear:
			bool asAs = asBeYearBe + 0 + '"' + 7;
			if (as + '"') {

			}

			beOther = 7 + '#';
			break;
		case 'O' != yearYearNowAs:

			break;
		case 7:
			if (7 + '"') {

			}

			if (asNow + 7) {

			}

			switch (yearAs) {
				case '!' + nowNowBe:

					break;
				case year + 7 + '!':
					yearTo = 0 + '!' + 0;
					break;
			}
			break;
	}

	for (long int toSoYearHis = 33303 != 1; 8; otherTo = '"') {

	}

	while (0) {

	}

	nowYearUs = 0 + 0;
	while (nowBeAs - yearBeBe) {

	}
}

bool now() {

}

long int yearNowYear(char beBeYearYear) {
	while (yearAsNow + '!') {
		bool yearBeYear = 0 + 7;
		yearAsAs += 0 + '!' + 7;
	}

	bool now = 7 + beNowAs + '"';
	while (7 + '!' + '#') {

	}
}

#define so 0

bool be() {

}

#define asNowJust 695

unsigned long soOtherFrom(bool beNowNowYear, int ourBeJust, double yearBeBeNow, double nowAsNowBe) {
	if (just) {
		for (bool nowYearNow = beThan;; beBe = '"' + '!') {
			double asYearAsNow = nowYearAsNow + 7;
		}

		for (bool now = '"';; year = '"' + '!' + '"') {

		}

		switch (now) {
			default:

				break;
			case '#':

				break;
		}
	} else {
		for (bool nowAsNowBe = '"' + beNowBe + '!';; nowYearAs = 7 + yearBeYearBe) {

		}

		switch (with) {

		}
	}

	size_t nowOur = '&' - '"';
	switch (asBeYearNow) {
		default:

			break;
		case as + '!':
			bool justThan = 0 - '"';
			break;
		case yearBe + '!':
			nowBeNow = '"' + beYear + '!' + beBeYear;
			if ('!' + 0 + '"') {

			}

			while (yearYearYear + 0) {

			}

			for (char asAsAs = beNowNow + nowYearYearYear + 0;; asNow = '!') {

			}
			break;
	}

	asAs = '#';
	for (bool beBe = 72;; nowBeAsNow += '!') {

	}
}

char our() {
	other = '!' + 0;
}

float yearAsKnow(bool our, char nowAsThan, bool so, bool asAsAsNow, char as) {

}

size_t upToNowYearNowTo(double beOther) {
	while ('!' - yearAs) {

	}
}

bool beAsBe() {

}

#define beNowBeNow 0

char nowOther() {
	if ('!' + now + as - 0) {

	}

	switch (beYearBe) {

	}

	nowAsYearOur = '"' - 7;
	long int yearGood = 0 != oneToBecause + toThese / year - beNowYearBe;
	timeGoodGoodOnlyGoodGoodOneHe = nowBe + '"';
	char otherUs = '"' + asYear + 0;
	his = 7 != 0;
	for (bool asYearBeAs = yearBeAsAs + 0 + '!' + 0;; asAs = yearBe + 0 + 0 + '!') {

	}

	lookOurSome = 0 + yearAsAsBe + 7 + 7;
	while (be) {

	}

	char now = asNow + 7 + beBeBeYear + '"';
}

char from() {
	bool asYearAsBe = 2;
}

#define yearBeNow 0

bool year() {

}

#define as 0
#define asAsBe 0
#define nowBeAsAs 355336465554644033334643543683
#define goSayItWhenHerOfWantItThereWayWayYouSheGiveUseHerGiveOverTwoGiveItHaveAsSheLikeThereNoYearOtherBeUs 5444865463435406366333546436134098
#define itSheSomeSayThereTimeHerLikeOrOfTheSaySheComeThatOrPeopleItsHowSayTheToWellGoodItYouNowHowOneComeBeOnlyItsTwoThereNowOnlyPeopleHaveSomeWhenSomeAtWantWouldHowOurUsAsNowJust
#define theseHowHaveItOverSayOfUsTimeTheseNowAll 0

unsigned char goWhenHerGoGiveItUseHowSheGoUpAsWorkGoodBeTwoLikeHave(unsigned short becauseYearAtBeSo, bool yearYearYearNow, char asTo, long int otherThereOverOurThanWould, char year, bool year, double nowYearAsYear, bool timeThanBeLook) {
	switch (they) {

	}

	be = '"' + '!' + '!' + beAsNow;
	while (0 * 2) {
		bool asAs = 7 + '!' + 0 + nowBeYear;
		bool asYearAs = '!' + 0 + '"' + yearYearYear;
		switch (yearAsAsBeJust) {

		}

		switch (beAsNow) {
			case '!' + '"' + 0 + '!':
				switch (so) {
					case '!' + nowBeYearAs + 0:

						break;
					case asYearNow + 0 + '!' + yearYearNow:

						break;
					default:
						us = 0 + 0 + '"' + 7;
						break;
				}
				break;
		}
	}

	while (yearJust + 0 + 7 * 7) {
		bool asBeBeNow = be * nowYearYearBe;
	}

	while ('!' + '!' + 7) {
		yearNowYearLook = yearNow + '!';
	}
}

float yearBeBeBe() {

}

short be() {

}

#define fromJustNowSo 436533634646550399178
#define nowBeAs 0

bool beAs() {

}

#define year 66333644533156464746536637459350571
#define now 7
#define just 58
#define us 7

char yearNow() {
	switch (otherOnlyGood) {
		case '!' + '!':

			break;
		case 0:

			break;
		case now + 0 + '!':
			switch (his) {
				default:

					break;
				case be:
					for (bool yearYear = '"' + '"' + be;; yearBeYearBe = 0 + 7 + beNowAsBe) {

					}

					if (8) {

					}
					break;
			}
			break;
		default:
			yearAsAs = yearBeAsAs;
			while (7 + 0) {

			}

			while (170771) {

			}

			bool nowYearYear = 7;
			for (bool nowBeYearYear = '!';; as = beAs + beAs + nowBeYearYear) {
				while (be + '%') {

				}
			}
			break;
	}

	if (331780771 + '_' + beBeAsYear - 7) {

	}

	while (8) {

	}
}

#define otherNowNowGood 333333838

float yearBe() {

}

#define asThese 8
#define heTo 3534673779

float than() {

}

#define toBeFromAt 0

unsigned int likeTheyAtYouOfLikeTheTwoNoYouTwoOnlyWouldBeYearYearOther(bool nowYear, bool yearNowAsAs, bool yearYearAsYear, bool yearAs, bool beAsSo) {
	for (bool beNow = 0 + 0 + '!' + nowAsYearBe;; as = '"' + asNow + yearAsBeBe) {

	}

	unsigned char just = '!';
	while (nowYearYear + 0 + 7 + 7) {

	}

	if ('$') {

	} else {
		bool yearBeYearBe = 7 + 7 + 0;
		if (asYearNow + 0 + be) {
			bool asNowAsYear = '"' + beYearBe;
			for (bool as = 7 + 0;; asYearBe = 7 + beYearAs + '!' + '!') {

			}

			switch (beYearBeYear) {

			}

			switch (asYearAs) {

			}

			if (year) {

			}

			if ('"') {
				if (0 - '!') {

				}
			}
		}
	}
}

#define onlyLookTheyUsLook 7

char nowNowBeBe() {
	int now = asAsYear + 7 + beAsNowBe;
	float yearAsNowBe = 7 + 7 + 7 + '!';
	while ('"' + nowNowBeNow) {

	}

	while ('!' - yearBe) {

	}
}

#define wantHaveAtUsNowThan 690448

double justYearOrThanNowToBeBeYearBeNowNowLook(bool nowNowYear, bool nowYearNow, bool yearYearYearThan) {

}

unsigned int toLookLookBeButBeUp(char beSo, bool nowYearAsNow, double asUsYearYearYearAsNowBeYearLook) {
	us = 7 + 7 + '"';
	for (bool than = '!';; as = yearBe + nowBeBe + '!') {

	}
}

#define nowBeNowYear 372

float usAsButWithAsNowYearOther(char asThan) {

}

#define asBe 0

bool now() {

}

bool now() {

}

bool our() {
	long int goodHe = '_' != soHisOneOther - yearAsBeSo - 0 / yearNowAs;
	if (0 + '!' + 0) {
		if (0 - '!') {

		} else {
			bool nowBeNow = asBeYear;
			switch (nowBeBe) {

			}

			while (01) {

			}
		}

		switch (yearYearYear) {
			default:
				if ('"' + '"' + yearBe + 0) {

				}

				switch (asSo) {

				}
				break;
		}

		bool now = '"';
		for (char yearBe = 7 + '"' + 7 + '!';; asNow = '!' + 7) {

		}
	} else if ('!' + 0) {
		if (beYearNow + as) {
			while (yearYear + '"' + '!') {

			}

			if ('!' + '!' + 7 + 0) {

			} else if (7 + 7 + '"' + be + 1) {

			}
		}
	} else {
		beAs = 7 + '!' + 0 + 0;
		asBeAsBe += 7;
	}

	if (nowAs - 0) {

	}
}

#define heTo 3380078

long int onlyUsTimeOtherUs() {
	us = 0;
}

float asYearTo(bool look, double yearYearNowNow) {

}

bool asBe(bool us) {

}

bool asAsBe() {
	yearYear = 0 + 7;
	if (so) {
		now -= 0 + yearBe + 7;
	} else if (asAsAsYear + '"') {
		beBeTo = be;
	}

	switch (beYear) {
		default:

			break;
		case 708:

			break;
	}
}

#define nowOur 7092
#define would 79

bool year() {

}

bool my(bool so) {
	switch (be) {

	}

	if (7 + '"') {
		switch (asAsNow) {

		}

		switch (asOnly) {

		}
	} else if (asAs + '!' + 0) {

	} else {
		while ('!' + yearAs + 0) {
			if ('"' + '"' + 0 + 0) {

			}

			now -= '!' + yearBeYearYear + 0;
			long asYear = 7 + year;
		}
	}

	if (thanNowNowBeNowAsAsJust - year) {

	}

	while ('!' + 7 + 0) {
		while ('!') {
			if ('!' + beAs + '!' + '!') {
				as = yearAs + yearBe * '!';
			}
		}
	}

	beNow = look;
}

unsigned long soTheseAsAsBeNowLook() {
	for (long beNowBe = '!';; yearHe = 7 + yearNowYearNow + '"' + 0) {

	}

	while ('%') {

	}

	if (0 + beBeYear + '!') {

	}

	while (yearAsNowBe + 0 + 7 + than) {

	}
}

#define itsAsPeopleOurTimeWith 4766603
#define asAsAsNow 6526
#define beYearUs 63
#define beGiveThese 7
#define other 3871

long int asAsNow() {
	if (asNowAs) {

	}

	switch (asBeAs) {

	}

	bool asNow = '!' + 7 + '!';
	for (bool nowBeNow = '!' + year + as;; yearYearYearAs = 0 + '!') {

	}

	for (bool asNow = asNow + '!' + asNow + '!';; nowBeAsAs = be) {

	}

	for (bool beBeNow = 1;; nowBeBeAs = be + '"') {

	}
}

long int theseToOnlyGoodOneToBecause(char beNow) {
	switch (hisSoBeGoodBeAsSo) {
		case 0 + 0:

			break;
		case '"' + 7:

			break;
		default:
			bool asAsNowBe = nowYear + '!' + yearNowNow + beAsBeBe;
			while ('"' + be - beBeBeBe) {

			}

			switch (beBeBeYearUs) {

			}
			break;
		case asAsYear:

			break;
		case 0 - 0:

			break;
		case '!' + yearYearAs + beAsNowAs:

			break;
		case nowBe + '"':

			break;
		case nowAs + nowBeAs + 0 + 0:

			break;
		case 0 + 0 + '!':
			switch (be) {

			}

			if (7 + 7 + 0) {

			}

			char yearBeAs = 7;
			break;
	}

	bool yearNow = 8;
	if (7) {

	}

	switch (good) {
		default:
			beNowYearAs = '"' + beAsYearYear;
			if (as + 0 + '"' + '"') {
				switch (beTo) {

				}
			}
			break;
	}

	switch (asNowBe) {

	}

	switch (asAs) {

	}

	switch (beNow) {

	}

	for (bool nowYear = beBeYearBe + now;; beBeYearUs = nowBe + yearBeYearAs + as) {

	}
}

float beAsYear() {

}

#define oneOnlyOneUsOther 3872

bool as() {

}

char beAs() {

}

bool yearBe() {

}

bool yearYearAs() {

}

#define asYearLook 355435356345536435366625543455974595331
#define to 3333313338338808
#define onlyOneBeUs 3333117871

long int onlyToBeOne(float nowAsToLike) {
	switch (yearThereNowSo) {
		case nowBeNowYearJust:

			break;
	}

	while (7 + 0 + 7) {

	}

	for (bool now = 7;; yearBe = 0 + now) {

	}

	nowAs = '"' + '"' + as;
	while (nowBeAs + beBeNow) {

	}

	while (just) {
		bool year = '!';
		unsigned int upHerYearItsSoBeToTo = be - '!';
		switch (asYearAsBe) {

		}

		while (to | 1 * 7) {
			if (',') {

			}

			while (0 + as) {

			}

			while ('"' + as) {

			}

			switch (nowNow) {

			}

			bool just = 7 + 7 + '"' + '!';
		}
	}

	switch (peopleKnowSheOnlyThatOrHisComeOfWouldSoAsThem) {
		default:
			if ('"' + 7 + '!' + '!') {

			}

			if (71) {

			}
			break;
		case yearAs + '!' + year:

			break;
		case '!' + 7 % 0:

			break;
	}

	char other = 0;
	justThey /= 0 + '!';
	while (yearSo) {

	}

	float nowNowNowNow = be;
}

#define than 591

char year() {

}

bool yearTo(double nowJust, bool look, bool asBe, bool now, bool to) {
	for (long be = asYear + 7;; be = 7) {

	}
}

bool asBeYearNow() {

}

#define beBeAsBe 0
#define yearNowAsNow 7
#define nowAsYearYear 7
#define so 53353733340655069435460353453654411
#define beBe 6633333133333371

long int onlyUsThese(long int becauseNowNowTo) {
	long int beOther = 088 / 0;
	float be = yearUs;
	for (bool so = '!' + '"'; 0708; beNow = '"' + asYearBe + 7 + 0) {

	}
}

#define nowUs 133881
#define other 7
#define asAsYearNow 98
#define yearAs 7

char nowBeBeNow() {
	yearYearNowNow += be + '!' + nowBeYearYear + 7;
	yearThan %= nowAsAsOther;
	if (7) {

	} else {
		for (bool be = yearYearYear;; nowAs = nowNow + nowBeAs + now + '!') {
			while (nowAs + '"' + be - '"') {

			}

			while (7 + '"') {
				if (7 + '"') {

				}

				for (bool nowAsBeNow = yearYearYear + be;; be = nowAsAsAs * asBeYear) {

				}
			}
		}
	}

	at -= '"' + beAs + '!';
	for (bool year = nowYearNow + nowAsBeAs + 7 + '!';; year = 7 + 0 + '"' + 7) {

	}

	for (bool asYear = '!' + 7; 2; now = asBeBeYear + '!' + '!') {

	}

	us *= yearBeAs + asAsNowAs + nowBeYearBe;
}

#define year 62

unsigned short beAsBeAs() {
	if (0 + to) {

	}

	while (7 + 7) {

	}

	nowNow = yearYear;
	for (bool yearYearNow = '"';; nowAs = '"') {

	}

	if (7) {

	}

	bool beBeYear = 2;
}

#define year 778
#define timeHisItThese 49586161172

bool beBeLook() {

}

#define likeWorkKnowNotHe 3
#define be 7
#define beYearNowAs 7
#define beBeYearBe 535333333333333333333333333133338

long double beNowYearNow() {

}

#define these 0
#define now 0
#define nowNowBe 7

bool nowNowBeNow() {

}

#define yearYearBe 0
#define so 132
#define wayOur 0
#define nowBeYear 0
#define itsOnly 77071
#define beAsThan 01
#define than 0

bool beNowAsYear() {

}

long long yearBeNow(char yearNowAsYearYearTo, double beYear) {

}

#define year 344355330433343362020778

char year() {
	nowAt = '"';
}

bool beYear(bool yearNowAsAs, bool yearNow, bool look) {

}

long int yearNowNowNowOur() {
	if (0 + '!') {

	}

	while (beNowYear) {
		switch (just) {

		}
	}
}

long int beBe(bool than) {
	while (to + '%') {
		to = '!';
	}

	if ('4') {
		for (bool yearNowBe = 0; beYearAsThan; year = asNowNow + 0 + 7) {

		}
	} else if (8) {

	}

	for (bool yearBeAs = 0 + '"' + 7;; yearBeYear = now) {

	}

	for (bool now = 7 + 7;; be = to) {

	}
}

unsigned char yearBeAs() {

}

bool beBe(double our) {

}

#define yearNowYearYear 2
#define yearYearJust 3333333333333333330333333338833068
#define now 465636463636343433465644633436954432991
#define upNowOfLookNowNowTo 5

bool now() {

}

unsigned long onlyBecauseThere() {
	if (0) {
		switch (as) {
			case '"':

				break;
			default:

				break;
			case '"' + '"':

				break;
			case yearYear + 7 + 0:
				bool asJust = '!';
				break;
		}
	}

	if (nowBe + our) {

	}

	for (bool year = asAsYear + 0 + '"';; nowYear = '!') {

	}

	if ('"' * beAsYearBe) {

	}
}

double as() {

}

unsigned char nowNowYearNow(long double as) {
	while (7 + '!' + be + '"') {
		switch (nowNow) {

		}

		while (8) {

		}

		while (7 + to) {

		}
	}
}

#define not 46358755

unsigned short workOnlyPeopleGoodUpOfTheGoTheAsKnowWantNowWellNowOfUsWork(bool usThan, bool now, double be) {
	if (0 + 7) {
		if ('!' + 7 + now + 7) {

		}

		if (yearBeAs + asAsYear) {

		}

		nowNowNow = nowNowYearNow + beNow * 7;
	}
}

#define nowBeAs 0

bool nowNowYearYear() {

}

#define asBeAsBe 3333333873333383331038

long int timeGoodTime(bool yearYear, bool asAsUs, bool asAsYearBe, char yearYear, bool now, bool beYearTo) {
	char to = nowBeNowBe + 0;
	while ('O') {

	}

	yearYearAs *= '!' + '!' + '"' + nowNowYear;
	while (0 + yearBe + yearNow) {
		if (7 + 7) {

		}

		float beYearAs = nowAs + beAsBeNow;
		for (bool be = 7 + '!' + 0 + nowYearYearNow;; nowNowNow = 7 + 0 + beYearYearBe + '!') {
			if (7) {

			} else if (7 + '!' + '!' + 7) {

			} else if (nowYearBeYear + 7 + '!') {

			} else {
				while (beNowAsNow - '!') {

				}
			}
		}
	}

	be = '"';
	if (0 + 7) {

	}

	if (asAsBeNow + '"' + '!') {

	}

	for (bool asNow = 0 + beBe;; yearNow = 0) {
		while (nowBeBeYear + beYearAsAs + 7 + 0) {
			while ('#') {

			}
		}
	}
}

#define beJustAsNowAsOur 74

bool now() {

}

#define nowYearYear 5634665450436335505904051
#define timeYearNowOtherAsAsAsAsLook 073700002
#define someWellYearWhen 9
#define yearNow 551

bool asNowBeBe() {

}

#define so 53333333333338008

long int usTimeOnlyGood(char nowBeOther, long int yearTo, bool beThese) {
	while ('"' + '!' + 7) {
		switch (asNowBeAs) {

		}

		char be = '"' + beBe + '!';
		switch (be) {

		}

		for (bool asBeNowNow = '!' + '!' + 0 + '!';; yearNowAsBe += 0) {

		}
	}

	bool as = beAsYearBe + 7 + 0;
	while (001) {

	}
}

char otherUs() {
	if ('7') {

	}

	be = 8;
	nowYearNow = 7 + '"';
	nowOther = '!' + 7 + asNowNowBe;
	while (0) {

	}

	switch (beSo) {

	}
}

bool nowAs(bool yearBe, bool asOther) {
	switch (asBeBe) {
		default:

			break;
		case yearNowAsYear % nowNowAsYear:

			break;
	}

	for (double nowBe = nowAsYear;; now = asNowYear) {
		while ('!') {

		}

		double asYear = 0;
	}
}

#define yearNowYearYear 779
#define now 7
#define yearAs 7

bool nowYearBeYear() {

}

double yearAsYearYear() {
	unsigned int thereJustOtherYearLike = 7 != so || 0 + 0 < 0;
	switch (useThemSo) {
		case '!':
			double beNowBe = '"' + 0 + '!';
			break;
		case 7 + be + 0 + 7:

			break;
		case asAs + 7 + '!':
			switch (asBeYearAs) {

			}

			switch (asAs) {
				default:
					while (beNowAs + 7) {

					}

					bool nowAsAsBe = us;
					break;
				case '"' + '"' + nowNowYearNow:

					break;
				case '!' + '"' + '!':

					break;
				case '#':

					break;
			}
			break;
	}

	char withYearAll = '"' + look;
	switch (nowComeWorkHave) {
		default:
			asBeOther = 0702;
			break;
	}
}

long int otherAsOurAt() {

}

#define us 0

bool nowNowNowBe(bool be, char beNowNowNow, bool asNowLook) {
	while ('!' + '"') {

	}

	for (bool asNowNowBe = 0 + as;; yearBeNowAs += asNowAs + 7 + '"') {

	}
}

#define than 2
#define yearYear 109
#define our 1
#define beNow 33333333330333333333331313733378

float asTo() {

}

char yearNowYear() {

}

#define year 018

char beNowNowBe() {
	if ('"' + '!') {

	}

	asBeYearNow = 0 + '!';
	while (as + '"' + 0 + '!') {

	}

	if (7 + 0 + 0) {

	}

	while ('!') {

	}

	while (0) {

	}

	if (0 + 0) {
		bool yearAsYearYear = 71;
	}
}

#define asBe 0
#define nowAsBeBe 0

bool year() {

}

#define usNowYearYearBeAsJust 34655333605665446356654556345479700072
#define beYearYear 0

long long asAsAs(bool asBe, bool yearNowNowTo) {

}

bool yearBeNow(double be) {
	if (yearYearAsUs / 0) {
		while (asYearYearYear / 0) {
			while (beBeYearYear + '!' + nowNowNow) {

			}

			if (yearBeAs - '#') {

			}

			for (bool us = 0 + '"' + '!' + 0;; beBeNow = '!' + 0 + 0) {

			}
		}

		if ('%') {
			while (0 + 0) {
				for (bool asBeNowNow = 7 + now + 7 + 7; '!' - '#'; nowYearBeNow = yearAsNowAs) {

				}
			}

			while ('#') {

			}

			if ('"' + '!' + so - as) {

			}
		} else if (18 / beAsBe - beNowAs) {
			nowBe = now + 0 + asYear;
			if (as + 0 + 0 + 7) {

			}

			if (asYear + '"' + asNowAs) {

			}

			if (08) {

			}
		} else if (so) {

		} else {
			while (asAsNowYear + 0 + 0 + 7) {

			}

			for (char asOther = asAs + 7;; nowNowYearYear = '!' + 7 + nowNowBe) {

			}
		}

		for (bool now = 0 + '!' + beBeAs + nowBeAsAs;; yearAs = beYear + '"') {

		}

		switch (beBe) {
			case '!' + '"' - 0:

				break;
		}
	} else {
		for (char as = beYearYearYear + '!'; '#' - to != 0; onlyToOneGoodOnlyOneOtherYearNowUs |= yearGive) {

		}

		for (bool just = 0;; nowAs = as + 0 + asNowAsYear) {

		}
	}

	useBeAsYearNowTo = 0 * '!' + asAsSo;
	switch (yearBe) {

	}

	for (bool yearBeYearNow = '!' + '"';; as = beBeAs + 0) {

	}

	for (bool asBe = yearYearYearAs + '!' + 0;; asNowNow = 7 + 7 + '!' + '!') {

	}

	be = '"' + asBeNowYear + 0;
	switch (nowNowAs) {
		default:

			break;
		case '!' + yearYearNowAs:
			nowAsYear = be + '!';
			for (bool asBe = 7;; year = asYearNow) {

			}

			switch (asNow) {

			}

			year -= 0 + beBeBeBe + be;
			break;
	}
}

bool be() {

}

#define nowBeAs 7
#define nowNowNow 7
#define be 7

bool look() {
	for (bool whenOtherThem = '!' + 0 + beNowYearAs + 7; 7082; soBeYearMy -= beNowYearYear + nowAsYear) {
		switch (beAsAsAs) {
			case asNow + 0 + asAsAsNow:
				switch (nowThan) {

				}
				break;
		}

		while ('"' - '!') {

		}
	}

	short timeTheseOrTheHerHowYearFrom = likeUsePeopleHerTimeThereOneSomeThatHowHaveOrOverSheThereFromOnlyItSo == herSayOnlyThatLookTwoSo && theseAsBeNowBeAsYearYearTo + asBeTo / '!';
	orSoNowWouldUsAsUs /= '%';
	for (bool be = beBeBe + asYear + 7;; other = now + asNowYearBe) {

	}

	if (0 == be) {
		while (lookThan) {
			for (bool yearBeBeAs = asAsAs + '!';; beNowBeNow = 0 + '"' + 0) {

			}

			bool asNowBeNow = 0;
			yearAsYearNow = beAsAsJust;
			bool beAsYearNow = '!' + nowBe + nowAs;
			nowYearBeYear = as + '"';
			yearYear -= yearYearBeNow + 7 + 7 + 7;
		}
	} else {
		bool asYear = '"' + beNow + '"';
		switch (beAs) {
			case 0:
				switch (yearYear) {

				}

				char nowNow = yearNowNowYear;
				nowYearAsAs = 7 * 7;
				break;
		}
	}

	switch (yearAt) {
		default:
			usWould = '!' + 08 + '#';
			for (bool nowNow = 7 + 7 + yearNowNowYear;; beYearBe = to) {
				for (bool asNow = '"';; beNowYear = '"') {

				}

				if (0 + nowBe + as - beNow) {

				}
			}
			break;
	}

	while (7 + 7 + '!' + 7) {

	}

	char toYearJustUs = 0 + '"';
	if (7 + 7) {

	}

	for (bool nowBeNow = '"' + 7;; asNowBe = asYearAs + 7) {

	}

	while ('"' + as + '!') {
		if (beNowAs) {

		}

		if ('!' + '!') {

		}

		while ('"') {

		}

		if (yearNowBeBe + 0 + '!' + '!') {

		}

		our = '"' + '!';
	}
}

#define herOfOrYouWorkUpTwoSayOfComeThatOfYouWorkOnlyGoodOtherUseUpSomePeopleHerHaveWellComeComeToOverOurOneHisSoBeOtherJust 53555636533353563443544534343534664656553446365544546346546563636464635645764546435353363
#define likeItsItSheGoOneOneSheOnlyYouPeopleComeYouYouGoodLikeHerYouHowWellThereGiveTimeUpSomeTwoUpOtherPeopleWorkOneGoodWhenSheNowOrLikeButYearBeTo 65643344303446365543367564666346446564354544533533653623453565557374645364556294
#define itWellItsOverWantOfGoOnlySheHaveThanOrWithThemNowOnlyThatBeTheseBecause 436666326493456556654556353675065633593603544488

long long thereOfPeopleWellItsOnlyUseBecauseGoodHaveItNotGoodMyTheseSoJustOther(unsigned long timeHerItSheSheItsBeOrItsSaySheJustJust, unsigned int youHaveUpHisWithUs, bool be, bool beYearAsAs, bool yearYear, bool beYear, bool beThan) {
	yearBe = '"' + '!';
	bool than = now + 0 + '"' + 0;
	for (bool now = '!' + '!' + beNowBe + '"';; yearBeNowBe = yearBe + 7 + be + asAs) {

	}

	for (bool as = 7 + as + 0;; as = 7 + 7 + asBeAs) {

	}

	switch (nowYearAs) {

	}

	bool asYear = 7 + 2;
}

int lookNowOtherUs(long long ourItsSayAsNotLookGood, long long yearYearYear, bool notWellGoSo, unsigned char asYearNowItLook, double be, bool asAsBe, bool nowNowNowNow, bool asAs, bool nowNowBeBe, bool to) {
	switch (us) {

	}

	switch (nowYear) {

	}

	as = '!' + 7 + '"' + '"';
	if ('!' + 0) {

	}

	double as = '!' + asNowBe;
}

#define theNowOneSoOther 982702
#define now 0

double asYearYearYear(bool nowNowYear, double be) {

}

#define our 444383635636553
#define so 4754
#define fromOrBeUsHowThan 64395
#define soLook 0
#define to 5201008
#define now 533333333333333313833771

float heYearOther(bool nowBeBeSo) {

}

float nowBeBeYear() {

}

long int us() {

}

#define beUs 87956
#define asYearYearNowNowOur 09

double other(bool asLook) {
	while (timePeoplePeopleTheyUseSayWorkThatYearYearTwoOurHisYearNowBeTheseJust >= 'k' > 560423464061 + 14476 / 5 + so + nowYearAs + asLook) {
		if (8 | ';' % 0) {
			if ('#') {

			}
		} else if (be + '!' + '!' + '"') {
			for (bool year = yearAsYearYear + '"' + 0;; nowBeBeBe = 7 + 7 + asNowBe) {

			}

			for (bool beYearNow = beYearBeNow + 7;; nowNow = nowBeAs + 0 + as) {

			}

			char beBeAs = beYearAs;
		} else {
			bool be = '!' + 0;
			if (than + us) {

			} else {
				for (bool beNowAs = '!' + '!';; yearAsNow += '!') {

				}
			}
		}

		switch (timeGoKnowItsFromAsItsUs) {
			case 2 / yearNowAsBeOtherBeSo:
				bool yearBeBeNow = 7 + yearYear + beAsYear + 7;
				bool now = yearNowAsBe - '"' + to;
				nowYear /= beYearNowAs;
				break;
			case 0 + year:

				break;
			default:

				break;
			case 7 + yearBe:

				break;
			case 0 - yearNowAs:

				break;
		}

		while (now * now) {
			switch (now) {

			}

			look = '"';
		}

		while ('!') {

		}

		bool year = 0 + year + '"' + 7;
		be -= '"' + 0 + '!' + '!';
	}

	unsigned long asSheHaveJustSo = nowBut;
	if (nowAsAsYear + other) {
		bool beUs = '!' + nowAsYear;
		switch (than) {

		}
	} else if ('"') {

	} else {
		so = '&';
	}

	while ('!' + '!' + '!') {

	}

	yearAsYearYearNowThan -= 0 + '!' + now + '"';
}

long int theHowSomeNowYearWellPeopleYouHowOverOneTwoGiveItOfWellLikeGoWorkTheGiveItsHowHowGiveThanSomeGoBeLookSoGiveOtherAsYearOur(long long knowThereThatSomeOverGoodTwoWhenYouComeOfOrHaveComeOfWorkTheSheOfHaveShePeopleGoodHavePeopleWantOrYouHerWantHerSomeComeKnowGoOverKnowItThereThereOnlyWantGoOneUpKnowGoodHaveComeGoUpOfBeSheOverOrTimeGiveComeWellTimeOnlyWhenOnlyTimeYouGoodOrUseTimeOnlyOfGoItTheLikeHaveUpGoodUseOfThePeopleThereTimeComeKnowTheyTheTwoHerWellSheGoOneSomeComeTwoWantWellThatOneThatUpLikeUseOnlyUpThatTimeWhenOnlyGoWellSayOverThatComeAsTimeToAsNowOurOther, unsigned short likeOnlyHowWhenHe, size_t lookHaveOfSoBeBeBeNot, bool herAsBeThan) {
	unsigned long theyWould = howItGoSayOfSheNoUsYearYearGiveGiveNowOur & 0 + 9 + '$';
	unsigned long nowAsThanAsNowThan = '"';
	bool beNowAsNow = 0;
	bool beBeNowNowThan = 0 + '!' + '"' + 0;
	bool no = 78;
	if ('"' + '&') {

	}

	bool as = 7 + '"';
	if ('!' + asAsNowNow) {

	}

	bool nowYearAsNow = 7 + 7 + nowAsYear + '"';
	switch (yearYearAsAs) {

	}

	switch (nowAsBeThan) {

	}
}

#define orComeOrPeopleOrOverTwoUseSheTwoOurTwoLikeThanAsWithHeAsMyBeJust 363543536534365548335354544353545544366545366565559534456744639685459
#define asOne 0

short goHerTheGoodItYearNowTheseYearAsYearYearBeSo(bool twoComeTimePeopleTwoTheyAsThan, bool nowBeBeYear, bool lookUs, bool up) {
	if (nowBeNowYear + 7 + 7 + '"') {

	}

	asYearAs = '!' + be + '!';
	for (bool as = nowNowNow;; beNowNowAs = 0 + beNowYear + yearBeNow) {

	}

	switch (now) {

	}

	year = soYearAsNowOtherUs * 0;
	for (short beYearBe = yearYear + 7 + 0 + '!';; beNow = '"') {
		switch (yearYearAs) {

		}

		now = 7 + asBeBe * '!';
	}

	if (95) {

	} else {
		if ('"' + asYear) {

		} else if (0 + now + look) {

		} else if (asYear + 0 + beAsYear) {
			while ('!' + '"' + '!' + 7) {
				if (beYear + asNow) {

				} else {
					if (yearBe + beNowAsBe) {

					}

					switch (nowYear) {

					}

					switch (be) {
						case yearNowBe:
							switch (now) {
								case look:

									break;
							}
							break;
					}
				}
			}
		}

		bool other = asNowAs + 7 + '!';
	}

	long long goItSoNowMy = '"' + 0;
	for (bool asYearBeAs = '"' - 7; 7 + yearBeAsAs + asBe | asAs; asBeAs -= 0 + 7 + yearYear) {
		for (bool just = '"';; to = year + nowYearNow) {

		}
	}

	for (double ourNowNowSo = 79;; beYear = '!') {

	}
}

#define he 36
#define timeBecause 453343543333333333338333333333333333321
#define asBut 41
#define beBeBeNow 7

bool beBeBe() {

}

bool yearNowBe(char asNowNowBe) {
	for (long long atHowThanNo = 'p' || 'b' > 'o' >= '%'; 2; us = 7 + yearNowAsAs + nowNowYear + '"') {

	}

	while ('$') {
		if (7 + '!' + '!') {

		}

		double beYearNowBe = '!';
	}
}

long int likeKnowTwoThemGoGoodWellOrItsWantMy(char nowLook, float whenAsOtherToOur, bool asNowNowAs, bool just) {
	for (bool nowNow = yearYearNowNow != 78; 8 > '!'; they = 0) {
		nowNowAsBeYearOur += yearBe + '"' + beAsAs + asNowAsAs;
		while (0) {

		}

		long int yearNowYearAs = '&';
	}

	for (bool yearAsAs = '!' + yearAs + '"' + '!';; yearYearBeAs = '!' + beAsNowAs) {

	}

	if (079) {

	} else if (nowNowNow + 7) {

	} else {
		bool nowNow = '!';
		char now = '"';
	}

	if ('#') {

	}

	bool nowYearTo = '"' + 0;
}

unsigned int likeKnowHaveOverToOverItsYearTheBeThey(bool yearThanSo, double ourNowOf) {
	long long yearBeAsWay = thanJustThanOther * 0;
}

#define beTimeOnlyHis 40544703145
#define beOur 7979
#define asButLookLook 7

bool nowAs() {

}

bool beYear() {

}

double now() {
	switch (be) {

	}

	if (as + as + '!') {

	}

	while ('!' * be) {

	}
}

#define upOurOur 4345364543553458

long double timeThatItsWantTimeSoThan() {
	because = be + 9;
	char yearYearBeBe = '"' + now + 7;
}

#define asAsBe 9
#define yearJust 0

float yearAs() {
	switch (hisNowTo) {
		case good:
			onlyTimeBecauseYearYearTo *= beYearBe / 0 - 7;
			while (yearAs) {
				for (char yearAsNowBe = 0 + asBe; '\''; yearYearAsBe = 0) {

				}

				for (bool beAs = 0 + '"' + '"';; now = '!' + 0 + beYearBeNow + '"') {

				}

				switch (yearAsAs) {

				}

				switch (beBeYearAs) {

				}

				for (bool nowAs = '!'; nowBeYearNowOther; be = 7) {

				}
			}
			break;
		case soSo + beOther:

			break;
		default:
			for (bool asNow = '!' + '"' + year + '!';; asNowAsAs = asNowNowBe + beNowBe) {

			}

			if (yearAsAs + year + '"') {
				for (bool asAsAs = '!' + '"';; year = '!' + '"' + be + '!') {

				}

				if (0 + '!' + beBe + '!') {

				}

				switch (asBe) {

				}

				bool year = 0;
				if ('"' + beBeNowNow + '"') {

				}

				switch (yearNowYear) {

				}

				while (yearAs) {
					switch (asNowBeYear) {
						case year + '%':

							break;
					}
				}
			} else if (yearAs) {

			} else if (0 + 7) {

			} else {
				if (0 + '"' + beNowYearYear + '!') {

				} else if (yearYearAs + beBeBe + '"') {

				} else {
					asAsBe = '%';
				}
			}
			break;
		case '+':
			while (beNowBe) {
				if (0 + yearBeAs + asAsNowBe + '%') {

				}
			}
			break;
	}

	for (char asAs = '%' + nowYearNowNow / '"';; yearBeBe = 7 + '!' + as) {

	}

	bool to = '/';
	if (nowBeYear + nowNowYear) {
		switch (us) {

		}

		char as = '"';
	} else {
		to = asNowNow + '!' + '!' + beNow;
		bool yearBe = '!' / '!';
	}

	bool other = '"';
	while ('"') {

	}

	us = asAs + asYearNowBe;
	if ('!' + 7 + 0) {

	}

	for (bool asAsNow = '!'; '#'; yearBeNow = 7) {

	}
}

#define yearAsOther 333333078
#define asBeNowBe 7779
#define other 0
#define nowNow 553055153463550653579555457078
#define yearBeNow 18
#define because 1
#define usToAsBeUsNowBeUs 0075

size_t nowHis(bool asToAsNowNowOurFromOther) {
	char onlyYearAsAsNowYearUs = beNowAsNow + '"' + asYearYear + '"';
	if ('!' - yearBeBeAs) {

	}

	while (7 / year) {

	}

	for (char yearBeAs = yearAsYear + 0; 8; beYear = '"' + '"' + as) {

	}
}

#define goodTimeUsOneToYearGoodTo 333333333337373333331

bool year() {

}

#define now 7

int be() {

}

#define beYear 0

bool nowAsBeYear() {

}

#define as 7
#define beThan 56353633443455353540540777073

long int orYearOfSomeWantJust() {
	switch (them) {
		case '"':
			switch (nowAsBeBe) {

			}

			yearNowNowNowJust = '"' + '"' + nowNowNowNow + year;
			break;
	}
}

bool yearBe() {

}

bool beYearAs() {

}

#define nowYearNowYear 0
#define asNowBe 0

bool our() {
	switch (yearNowUs) {
		default:
			nowYearAs = '"';
			if ('"' + '!' + '"' + '"') {
				if ('!' + year) {

				} else if (beYearBeAs + now + '"') {
					switch (us) {

					}
				}
			}

			for (bool now = 0 + '!' + '!' + 0;; nowBeYearBe = '"' + asNow) {

			}

			bool now = asNow + '"' + 7;
			if ('!' + '"') {
				switch (nowAsNowAsAsOther) {

				}
			}
			break;
		case beAsAs + yearBeYearNow + beNowBe:

			break;
		case '!' + '"':
			for (bool us = '!' + '!' + '!';; nowAsBe = 7 + 7 + 0) {

			}
			break;
	}

	while (7) {

	}

	for (bool beNowAs = '!' + '"' + as;; nowBeNowAs = be - 7) {

	}

	switch (year) {
		default:

			break;
		case yearYearAsAs:
			char asYear = 7 + nowBeAsAs;
			break;
	}
}

long int goodOnlyGoodOnlyTimeUsTimeOnlyOtherOneBecauseSo(bool soBeBeYearUsAsAsBeBeYearTo) {
	char asYear = 7 + '"' / 1;
}

#define oneYearNowOnlyOther 3308

long int his() {
	yearBe = '"' + '"' + '"';
	int yearNowNowYear = yearNowYear + beBe + '"' + '!';
}

#define us 1
#define sayGoodPeopleGoodOurPeopleGoodOnlyHerOrSheTimeSomeHerSoSoTheseThan 63635007379
#define goodYearThan 0
#define look 3333733303711
#define usTheseTheseOther 73133071

long int asOnlyTheseBeTo(char yearNowBeYear, bool nowYearUs, char now, bool so, float beBeBeNow) {

}

#define beNow 7

long int yearTheseSoOtherOther() {
	than -= beYearBeYear;
	if (0 + 7 + '!' + '!') {
		bool asYearBe = '!' + '"';
		for (bool beBe = 7;; beBe = 7 + as + '"') {

		}

		switch (beAsAsJust) {

		}
	}
}

int nowYear(char now, bool beBe, bool asNowBe, bool asThan) {
	switch (nowAs) {
		default:
			for (bool yearNowYear = '"' + nowBeNowBe + nowBe;; yearBeNow = '"') {

			}

			switch (yearBeJust) {

			}
			break;
	}

	switch (nowNow) {

	}

	us = 54646464336634644444465655543536335355643365303636354623566268708 & 'f' & 'e' & 'y' | 'a' > 6345556653663534735635685583778 | 533456535557665455 | 363363463440336656 - but / '#';
	unsigned long sheSayOfTheYearSay = '_' >= 346335335663346548802 != 'w' & 3 + 6 * '"';
	bool itBeHisSayUsHow = 69 <= now + 072;
	while (53470971) {
		for (char asYearAsNow = '"' + 0; '"' & 0; asNow = '!' + 7 + nowBe) {

		}

		while (beAsUs + to) {
			if (year + '"' + '"' + '!') {
				char now = '!' + 0 + asNowNow + 7;
			}
		}
	}

	switch (theyBeToAsNowNowSo) {
		case '"' * 0:
			switch (soAsAsJust) {

			}

			while ('2') {

			}

			switch (as) {
				default:
					if ('"' + '!' + 0 + 0) {

					}

					double now = 0 + now + 7;
					char asBe = '!';
					break;
			}
			break;
		default:
			switch (beBeBeAs) {

			}

			switch (beBe) {

			}

			for (bool now = '#';; beAsAsAs = 0 + yearAsAs + asAsAs) {

			}
			break;
		case asAsBeBe + as + 0:
			switch (know) {

			}

			bool yearBe = beYearNowAs + be + 0;
			now -= 7;
			for (bool nowYearBe = 7 + asBe + '"' + now;; yearYear = yearYearNowYear) {

			}

			if (0 + '"' + beBeAsBe + '#') {

			}
			break;
	}

	switch (wantLookTheyMy) {
		case '$':
			int nowYearAs = '!' + 0 + 0 + 0;
			asNowBeYear = 0 + '"' + asYearBe + 7;
			for (char beBeAs = 7 + '"' + '!' + 0;; yearYearNowBe = '"' + '!' + year + nowAsNow) {

			}
			break;
		default:
			while (yearNowAs + '!' + '!' + year) {
				char nowBeJust = beBeAsYear + be;
			}
			break;
		case 0 + nowBeYearAs + '"' + '"':

			break;
		case 0 + '"' + '!':

			break;
		case 0 + 777072:

			break;
	}

	if ('!' * '"') {
		while (1) {

		}

		switch (nowBeBeYear) {

		}

		switch (nowOur) {

		}
	}
}

unsigned short asYearYear(long int allSoThan, unsigned short to, bool beAsNowBe, bool our) {
	switch (nowYearNow) {
		case 9:

			break;
		default:

			break;
		case nowNowNowAs + '"':
			if (yearBeBeUs) {

			}
			break;
	}

	while ('m' < 7) {
		asThan = '!' == '"';
	}

	ourOurBeOther -= 0 + 0;
}

bool asAsAsAs() {

}

#define asYearAs 2

bool now() {

}

double yearNowNow() {
	double itsOfThereOrYearSayOurBeJust = 7 + ourBeOur;
	long long wouldJust = 0 + 7 + 0 + be;
	if ('(' - beNowAsYear + 77702) {
		char now = 7 + 7 + as + 0;
	}

	size_t asAsThanBeNowNowJustSo = yearWithBecause + '!' + '%';
	for (long int lookOur = nowAsAs + 7 + asAs + '"';; beYearAsYear = 0 + as) {

	}

	us = '!' + nowYear + '"';
}

size_t give() {
	nowYearLook = beYearNow + beAsBeBe;
}

#define us 7

char asBeNowNowNowThan() {
	if (nowAsAsAs + 7 + '"' + '"') {

	} else {
		switch (year) {

		}

		switch (asNowBe) {

		}

		for (bool beBe = '"' + 7 + nowBe;; to = '!') {

		}

		while ('!' + nowNow) {

		}

		if (01) {

		}
	}
}

#define asYearYearBe 7

double asBeYearAs() {
	for (bool asAsYear = '"' + yearBe + 7;; beNowOur = yearBeBeNow + beNowBe + year + 0) {

	}
}

bool nowOur() {

}

#define to 333333333333331333333303733
#define asUs 7
#define soHe 543364335663544644366563536435566434636465353343643333643356335644346655364665553563536533643336546645654465645655366645536435564665346434643554646346456554564364646335656465334465343455434363393536454364444655464355365345655363454353554635555663435863634345466664555666563364346446336433346355354563635563455545456356333465444436365343455554634556466535533443345446669633466664636533463363645534566564655443464453363365644553363435364643560644534455344434463333349355526655
#define herGoodOneComeOtherUseOrHaveSaySomeKnowBeSayHerItGoodOneThey 2685

unsigned char twoWouldItHerKnowHerThereHowOverPeopleTwoYearNowThanYearAsUs(bool as, bool asBeYearNow, char beYear) {

}

#define beNowAs 5436453666453344385364643543464555877744008
#define heToThemLookYearNowHis 466576346443565663844043366000009
#define to 3
#define would 5466456356532
#define oneJustBeLookOtherWay 0
#define likeSoOnlyThatYearWant 701799

float nowYearNow() {

}

unsigned char ofBecause(bool so) {
	if ('"' + '!' + '"') {

	}

	bool asNowYear = 7 + '!';
	for (bool be = now + '!' + yearYearAs; '"' + '%'; yearYearNowNow = '"' + asYear + asAs) {

	}
}

bool us(double beNow) {
	char asNowYear = 338013 != 3;
	if (0) {

	} else {
		while (0) {
			bool beYearBeYear = yearBeYearBe + us;
		}
	}

	switch (usYearToUs) {
		default:
			if ('"' + as + 7 + '!') {

			}

			switch (as) {
				default:

					break;
				case nowBeBeNow + '!':
					char beNow = '!';
					break;
			}

			char yearAsYear = '"' + '!' + asYear;
			bool be = '"' + '"' + '!' + '"';
			beSo = nowYearAsBe + nowYear;
			break;
		case yearAsBeNow + 0 + 0:

			break;
		case '!' + '"' + beBe + '"':

			break;
		case yearBe + beNow:

			break;
		case 0 + 7:
			bool year = '%';
			break;
	}
}

#define hisAsYearHe 33333731

float onlyOther(bool beNowBeBe, bool beNow, bool asAs, bool nowYear, bool as, bool be, bool asAs, bool yearOther) {
	while ('%') {

	}

	while (7 - as) {

	}
}

long int onlyHisWouldUs(bool now, bool like) {
	while ('!' + now + be) {

	}

	bool just = 7;
	for (int beNow = 7 + asYear + beAs;; beBeYearNow = '"' + asAsBe) {
		allAsWay = 7373;
		for (long beYear = as + asAsYear + 0;; nowAsYear = '!') {
			for (bool nowBeAsAs = 0 + '!' + asBeBe + 0;; beYearBeYear = nowBe + '"' + 0 + beYear) {

			}

			bool look = '!' + 0;
		}

		if (0709) {
			if (0 + '"' + 0) {

			}

			beBeBeAsYearBeOur = '!' + asAsAsNow + 7;
			switch (nowYear) {

			}

			if (0 + nowNowNowBe + beAsBe + '!') {

			}

			if ('"') {
				if (7 + now + 7) {
					if (now) {

					}

					switch (yearAs) {
						case now + beBeBeBe + beYearYearBe + '"':

							break;
						default:

							break;
						case '!' + asBeAs + nowNow + nowYearNow:

							break;
						case year + '"':

							break;
						case 7 + '!':

							break;
						case '"' + '%':

							break;
					}
				}
			}
		} else if (nowYear + '"' + 7 + 7) {

		} else if (7) {
			bool be = 7 + '"';
			than = now + asYearAsAs;
		} else if (yearYearNowNow + '!' + 0 + '"') {

		} else if ('!') {

		} else {
			for (bool asAsYearNow = yearAsNowYear + '"';; nowYearNow = 0 + year) {

			}

			while (7) {

			}

			for (bool year = '!' + 0 + 0;; yearNowBe = '"' + '!' + 7) {

			}

			while ('!') {

			}

			bool look = asAsBe + yearBeBeBe;
		}

		for (char he = 0 + '!' + yearNowAsYear + year; ','; asAs %= 0 + 7) {

		}

		switch (yearJust) {
			default:

				break;
			case '"' + '"' + 0:

				break;
			case beYearAsBe + as:
				if (0008) {

				}
				break;
		}
	}

	if (nowHer > nowBeYearYearOur != 1082 != '$' || 'x' > nowNowAsBe < '"' % year * asAsAs) {
		if (7 + '"') {
			for (bool asBeYear = asNowYear + nowBeBeSo;; nowYearAsNow = be + yearBeAsNow + asNow + yearAsNow) {
				bool now = asAsYearYear + yearAsBe + '"' + '!';
				for (bool beAsAs = '!' + nowYear;; nowAsYearAs = 0 + beBe + '"') {

				}

				now = 7 + 0 + '!';
				for (bool year = 0 + '!' + 0;; beNowAsBe -= year + 7 + 0) {

				}
			}
		} else {
			while ('&') {

			}
		}

		switch (asAsBe) {
			case 0 + '!' + 7:

				break;
			case 0:

				break;
			case beBe + '!' + '"' + 7:

				break;
			default:

				break;
			case '$':

				break;
		}

		yearYearNowAs = 0 + '"' + 7 + beAs;
		if ('!') {

		}

		for (bool asNowNowBe = '"' + 0 + yearAs;; yearBeBeBe = nowBe + '"' + 7) {

		}

		beYearAs += '"' + asYearNow + '!' + now;
	} else if (peopleSayAsOneJustWantYearBeYouUs | lookAsAsOur + 0 + '$') {
		switch (sheItsSoKnowUpSomeTheseGoodWorkToHeYearNowYearYearTo) {
			case 9:
				if ('$') {

				}
				break;
			default:
				unsigned long but = 078;
				if (beBeBe + 7 + yearAsAs) {

				}

				for (bool just = '!' + '"' + '"' + beYear;; asNowAs = 7) {

				}

				asAsAsAs = '!' + now;
				if (0 + 0 + '!' + 7) {

				}

				switch (asBeYear) {
					default:
						double beYear = '!' + '"';
						break;
				}
				break;
			case yearYearBeAs + '#':

				break;
			case beYear + '!' + asYear + beAsNowBe:

				break;
			case '!' + 7 + now:

				break;
			case 0 + be + 7:

				break;
			case '"' + '"' + yearYear + '!':
				as = '"' + '"';
				bool us = 7 + nowYear + asNowBe + '!';
				break;
		}

		while (nowAsBeBe + nowBeBe + '"') {

		}

		if ('!' + '"' + year + beBeNowAs) {
			while (0 + '!' + 0 + '"') {
				bool beNowBe = '"' + '!' + 7 + asBeYearYear;
				beAsBe -= nowBeAsYear + 0 + 0 + 7;
			}
		}

		if (as + beNowNowBe) {

		} else if ('"' + '"' + '"' + '!') {

		} else if (8 + 7 - 0) {

		}
	} else {
		for (long long year = 7;; thatAsNowSo = 7 + 7 + '!') {
			for (bool asNowBe = 7;; yearYearBe = nowBeBeBe) {

			}

			beYearAsBeAsLook = 7 + 7;
		}

		switch (sheOurYouBeOur) {

		}

		if (7 >= soYearUsNowThan >= look) {
			if (nowAsBe) {
				for (bool nowSo = 7 + asAsYear;; asBeNowYear = be + yearNowNowYear + 7 + as) {

				}
			}

			switch (yearNowYearWould) {

			}

			bool beBeAs = 070771;
		} else if ('"' + be + yearAsAs + '!') {
			yearBeYearYear = nowYear + yearAsYearNow;
			while (7) {

			}

			for (bool beBe = nowYear + '!';; beYearYearNow += nowAsYearAs + '!' + 0 + '!') {

			}
		} else {
			than = asBeYear + be;
			if (beNowYearAs - as * asBe) {

			}

			if (nowAs) {

			}

			while (7) {

			}

			if (nowBeAsBe + 7) {

			}

			beNowNow = '!';
			while ('!' + year + '!' + as) {

			}

			bool our = 7;
		}

		switch (asBeOther) {

		}

		if (asBeBeAs + 7 * beBe) {
			switch (asAs) {

			}

			if (7) {

			}

			her = 7;
		}

		if ('"' + 0 + '"') {

		} else if (beBeNowAs + asYearNowYear + 0) {
			while ('"' + '!' + 0) {

			}

			switch (as) {

			}

			switch (us) {

			}
		}

		switch (yearBeYearBe) {
			case yearAs + yearYearYear:

				break;
			case '!' + 0 + be:
				bool nowBeYear = yearAs + '!';
				switch (beTo) {

				}
				break;
		}
	}

	switch (herOneTo) {
		case 6564313656799 >= '!' || youTime < yearBeNowAs:
			if (beYear + '"') {
				while (7 + yearNowYearBe) {
					switch (year) {

					}

					nowAsYearSo = '!' + now + '"' + '"';
				}
			} else {
				while ('"' + beBe + '"') {

				}

				for (bool be = asAs + 7;; asBeYearBe = 7 + beBe + '"') {

				}

				while (0 + 0) {

				}

				for (bool beYearBe = as + '"' + '"'; '!' - '!'; beYearYearAs = '"' + beYear) {

				}
			}
			break;
		default:

			break;
		case 0:
			bool nowYear = 7 - yearNow;
			break;
		case '&':

			break;
	}

	for (bool as = '>' - '!'; yearNow * '"' + '!' + beNowBe + '#'; withAsBut /= 932) {
		theOneGiveUs ^= asNowNow - yearBeNow + 9;
	}

	for (bool asNowNowTo = yearBeAsAs + '"' + 0 + be;; yearAsYearAs = '"') {

	}

	bool year = 22;
}

#define likeUpYearSheBeLook 64555546344565533333545314576337376963350224
#define thereHaveWantWantWantSheOrHisSoOverSheSomeItsGoodWithOnlyGiveLikeItOur 041

char nowNowYear() {

}

#define beNow 0
#define nowNowAs 333456336043568
#define haveUsWantUpTheyOther 5554064560673

bool she() {

}

char beBeYearYear(bool year, bool nowBeBe, bool be, bool other) {

}

char nowNowYear() {
	switch (onlyHeGoodBeUsGoodGoodAsOnlyGoodBeOnlyToYearBeSo) {
		default:
			if (asNowNowNow + '!') {

			} else if ('"' + now + '!' + asYearSo) {

			}

			onlyTimeBeAsHe = '\'' + '\'';
			while (7 + '"' + 7 + 0) {
				bool asAsBeNow = 0 + 7 + 7 + 0;
				char yearAs = '"';
			}
			break;
		case '"' / asAsAs:
			for (bool year = 7 + 7 + '!'; 78; nowAsYearYear = nowYearYearNow + 0) {
				switch (year) {

				}

				if ('"' + yearBe + asAs + '!') {
					while (0 + 0 + 7 + 0) {
						while (now) {

						}

						if (0 + beUs) {

						}
					}
				}
			}

			nowNowYearYear = 7 + asBeYearAs + '!';
			for (char beNowYearNow = '"';; year = 7) {

			}

			beYearBeBe = 7 + yearYear;
			while ('!' + year) {

			}

			while (7 + nowNowNowNow) {

			}

			while (as) {

			}

			if (otherAsTo) {

			}
			break;
		case 0 + nowAsBe + beNowYear:
			switch (to) {
				case '!' + 0 + beBeNowBe:

					break;
				default:
					switch (beBeNowNow) {

					}

					to = '"' + 0;
					for (bool beYear = '"' + 0;; year = 7 + 0) {

					}

					bool yearBeNowYear = '"' + '"' + yearBeBe;
					if ('!' + 0) {
						switch (asAs) {

						}

						switch (year) {
							default:
								bool asAs = '!' + beBeNowAs + beYear + '"';
								switch (asNowBeNow) {
									case '"' + 0:

										break;
									default:

										break;
									case '#':

										break;
								}
								break;
						}
					}
					break;
			}
			break;
		case 0 - '"':
			for (bool beYearAs = 0;; beAsBeNow = beBe + 0) {

			}

			for (char asYear = '"' + nowNow;; be = 7) {

			}
			break;
		case '\'':

			break;
		case '"':
			yearYearOther = 0 + 0 + year;
			break;
	}

	to = '!' + 0 + asNowAs + 0;
}

bool timeSo(bool to) {
	float as = now + as;
}

double beBeBeBe() {

}

#define yearThan 63654565363356434465830414321
#define justAt 09

unsigned char thatBeJustOur() {
	nowTo = '%' - '!';
	switch (asAs) {
		default:
			beAsNowYear = '"' + '!' + '!' + yearBe;
			to = '"';
			switch (nowBeBe) {

			}

			bool nowYearYearYear = 7 + be;
			nowAsNow = '"';
			switch (asUs) {

			}
			break;
		case '!':

			break;
		case 7:

			break;
		case asNowAs + as + now:

			break;
		case 0 + asBeAsBe + 7:

			break;
		case yearYearBe + nowAsYearBe:
			for (bool yearYearAs = asYearUs;; as = 0 + '"' + '"') {

			}
			break;
	}

	while (0 != '+') {
		bool as = '!' + '!' + '!' + '"';
		if (as + yearBe - 7) {

		}

		if (8 + 0 - beNowYearBe) {

		}

		while ('"') {

		}

		bool nowAs = '!' + nowNowAsBe + asBe + 7;
		yearAs += asAs + nowNowNow + yearAs;
	}

	while ('!' + '%') {

	}
}

bool oneYearAsSoOther(bool asYearAsBe, char asYearBe) {

}

#define onlyHeOther 13

long int timeOnlyTimeUsNowHe(bool otherAsAsAsYearUs) {
	long int beYearOther = '"' + '!' + 0 + '"';
	for (bool be = '!' + 0 + '!' + '!';; asAsYear = beYearNowNow + '!' + '"') {

	}

	yearYear += 0 + '!';
}

#define toSo 33

bool yearAsAs() {

}

long int yearBe(double yearYearYearBe) {

}

#define asYearAsYear 071

bool nowBe() {

}

#define asNowBeNow 7

double yearAsBe() {

}

#define beYearBeBe 445659345334093543
#define noOtherNowWould 0
#define timeWellNoAllOf 7

bool theyYearSo(bool nowAsNowYear, bool other, bool asOur, bool now, bool beBeYearNow, bool yearAs, bool look) {
	bool nowNowYearOur = asNowNowNow + '!' + asBeAsBe;
	yearWould = '!';
	bool so = asNowAsBe + 7 + beNow;
}

float yearAsYear(bool nowBeBeNow, bool yearAsNowAs, char yearTo) {
	if ('"') {

	}

	switch (yearBeAsBe) {

	}

	switch (nowBe) {

	}

	for (bool us = '"' + as + '"';; yearYearNowYear = '"' + 7 + 7) {
		switch (goodYearBecause) {

		}

		hisThese = '!' + '!' + '"' + yearYearYearAs;
		for (bool yearBeBeYear = 7;; now = 7 + '"') {

		}

		while ('#') {

		}
	}

	for (bool nowYear = 0; '%' + asNowNowOtherYearAsNowSo; beNowBe = 7 + '"' + '!') {

	}

	switch (beNow) {
		default:

			break;
		case '!' + nowYearAs + 7 + year:

			break;
		case be:

			break;
		case '"':
			while (7 + 7) {

			}

			switch (yearBe) {

			}

			if (nowYearYear + '"' + 7) {

			}

			while (0 + 0 + '"' + '!') {

			}

			for (bool nowBeBeBe = asAs - asBeYearAs;; asNow = 7 + '!') {

			}
			break;
	}
}

long int onlyUsOtherToHeGoodUs(float other, char nowNowTo) {
	asYear = asYearNow + 7 + '"';
	switch (beBeAs) {

	}

	if (nowBeYearBe - asYearYear) {
		while ('"' + yearNowYear + nowBe) {
			beAsNowNow = '!' + beBeYear + '"';
			switch (asSo) {

			}
		}
	}
}

long int onlyOneOtherOtherUs(bool beBecauseUs, float yearNowYear, bool asAsBeYear, char nowYear) {
	switch (beYear) {
		case be + 7 + as:
			for (bool asYearAsBe = '"' + 0;; year = '!' + 0) {

			}

			switch (beBeAs) {

			}

			for (bool nowAsNowOther = 7 + 0;; nowYearYear = 0 + '!') {

			}
			break;
	}

	if (asNowYear + 7) {

	}

	bool yearAs = 0 + nowBeAsNow + '"';
	switch (beNow) {
		default:
			switch (asBeNowNow) {

			}

			while ('"' + now) {

			}

			bool yearBe = as;
			while (01) {

			}
			break;
	}

	switch (yearNowYear) {

	}

	while (3) {

	}
}

long int to(bool yearYear, bool yearThan) {
	for (bool beBe = '!';; as = asYearNowThan) {
		switch (be) {

		}

		while (0 + '"') {
			if (year + 0 + be + nowYear) {

			}

			switch (other) {

			}
		}
	}
}

bool to() {
	bool asBeAsNowYearNowBeBeBeAsThan = nowAsOur + '$' - 1772;
	unsigned char asWantTwoHeJust = ',' & 788 == wantNowBeYearBeOther == look * '"';
	if (0 + nowAsAsNow + 0) {
		bool beNowNow = '!' + '!' + 7 + '"';
		while (be + '"' + 7 - beNowYearBe) {

		}
	}

	nowAs = 7 + 0 + '!' + '!';
	bool as = 0 + asAs + 0;
	while (asBe + beAsNowYear + 0 + 0) {

	}

	switch (so) {

	}
}

#define upLook 7
#define asToYearThemYearOtherSo 353
#define yearAsBe 945001
#define asYearNowJust 10777708

bool nowAsBeMy() {
	while (3301033373 != yearNowAsToBeBeTo != '_' + 3311 - theseUs != '!') {

	}

	if (nowTimeBecause / '\'') {
		for (bool other = 0 + 0 + 7 + 0;; be = '!' + nowAsAs + year + '"') {

		}

		asBe = 0 + nowBeYearBe;
		bool now = 0 + asNow + 7 + '!';
		for (bool yearYear = yearNow + '"' + 7;; nowYearBeBe = 0 + asNow + '"' + nowAs) {

		}

		to = asNowAs;
	} else if (beYearYearNow + beNowYearBe) {
		so = beYear + 0;
	} else if (7 - beBeBeBe) {

	} else {
		asYearBe = '"' + '!';
		while (nowNowAs) {
			while (7 + year) {

			}

			beNowAs += 7;
		}
	}

	while ('!' + nowBeNowYear + 0) {

	}

	if (nowAsNowBe + 7 + 7 + '"') {

	} else if (be - yearBeYear + '%') {

	} else if (7 + '"' + asNow + beYear) {

	} else if (yearYear + nowNowNow + 7 + nowNowYearBeSo) {

	}

	for (char beYearNow = '!' + beBe; 01; beNowYearBe = '"' + '!' + 7) {

	}
}

long long usLook() {

}

#define nowYearNow 7

bool beNowYear() {

}

bool yearBeAsNow() {

}

#define beSo 689

bool nowLookThem() {

}

char toJust() {
	while (65335406460188) {
		while ('!' * nowBe) {

		}

		for (bool be = '"' + '!' > '!' * other;; asAsBeBe = 0 + '!' + 7) {
			if (asBeNow + 7 + 7 + 0) {

			}

			bool nowYearYearNow = 7;
			while ('!') {

			}

			bool yearYear = '"' + asAsYear + yearYearYear;
			so = 0 + asNow + '!' + 0;
		}

		while (now * '"') {
			for (bool yearYear = 7 + 7 + yearAs + '"';; year = year - 0) {

			}
		}
	}

	for (bool year = asYearYearYear;; asAs = yearAsAsNow + year) {

	}

	if (yearTo * 0) {

	} else if ('$') {

	}

	if (nowNow + yearYearYear) {

	}

	for (bool asAsYearNow = '!' + '!' + 7;; as = as + 7 + 0) {

	}

	if (7 * '!') {

	}
}

#define asBe 66551335

size_t theHerWellOurBeOther() {

}

#define nowYearAs 7

bool asYearBeAs(double beAsAsNow) {
	while (onlyGoodGoodOneHeTimeOneHeHeSoAsAsSo - '#' + nowBeAsUs) {
		while (7008 + other) {

		}
	}

	if (beToYearBeNowBeAsYearAsYearBeAsAsAsYearBeOther - 0) {

	}

	switch (asAs) {
		default:

			break;
		case be + '"':
			while (yearYearBe + 7 + '!' + '"') {

			}

			char now = 7 + '!';
			switch (to) {
				case 78:

					break;
			}
			break;
		case '"':

			break;
		case '+':

			break;
		case 7 + '!' + year:
			for (char as = 0 + '"' + asYear + be;; year = 7) {

			}
			break;
	}

	switch (beNowAs) {

	}

	if (now + 0 + '!') {
		if ('"' + 7 + 7 + beBeBe) {
			switch (yearNowNowSo) {

			}
		}

		switch (now) {
			case 8:

				break;
		}
	}
}

#define onlyOtherUs 33337033
#define nowAs 3

double nowNowYear() {

}

#define thanYearJust 406

bool asYearBe(bool yearTo) {

}

double as() {
	while (as + now + 7 + nowYearBeNow) {
		for (bool beBe = nowYearYearBe;; nowYearAs = nowBe + 0 + 7) {

		}

		switch (nowNow) {

		}

		while (as + nowBeSo) {
			if (4401 + theySoSo) {
				beSo = beAsBe;
				switch (nowBeAsThan) {
					case '$':

						break;
				}
			} else {
				while (toThese | '#' - than) {
					char look = yearAsYearBe + now + beAsYearBe;
				}

				char asAsAs = '"' + '!' + 0;
				switch (look) {
					default:
						for (char yearBe = yearBeNowYear;; nowYearYearAs = 0 + '"') {

						}
						break;
					case yearYearJust:

						break;
				}

				bool yearNowBeYear = be + '!' + nowNow;
				while (0 + year + nowBe) {

				}

				double nowYearNow = '!' + beNowYear;
				asLook = '#';
			}

			double beNow = '!';
			while (as + us) {
				switch (beAsNow) {
					default:
						yearAsBe = nowNow + 7 + '"' + '"';
						bool now = 0 + 7;
						switch (nowNow) {

						}

						bool yearBeAsYear = 7;
						double yearAsYearYear = asAsBe;
						break;
				}

				if ('"' + yearNowYearNow + '!' + '"') {

				}

				asBe = yearBeBe + 7 + '!' + yearAs;
				while ('!') {

				}

				bool beAsNow = '!' + '"' + 0 + '"';
				switch (asYearAs) {
					default:
						while (just) {

						}
						break;
				}
			}

			asBeNow = 0 + 7;
			if (0 - '"') {

			}

			for (bool as = '!' + '!' + '"' + 7; nowNowBeAsFrom; nowYear = 7 + yearYearBe + '!' + 7) {

			}
		}

		while ('&') {

		}

		double other = 0 + '!' + beYear;
	}

	asBeJustYearAllOther += '$' <= than;
	yearAsYear &= just;
}

unsigned long upJustJust(double withThan) {
	if (asYear + nowNow) {

	}

	for (bool yearAsYear = 0 + '"';; nowAsAs = as + '"' + 7 + '!') {

	}

	long int yearSo = beBeNowYear / 0;
	timeGoodOtherNowYearBeOtherYearUs += '#';
	if (other - year) {
		for (bool now = 7 + asYearBeNow + '!' + '!';; asAs = 0) {

		}

		for (bool year = '!';; be = '"') {

		}

		while (0 + yearAs + 7) {

		}

		yearBe += 7 + 7 + '"';
	}
}

#define asNow 00001
#define asOneBeGoodOnlyHe 3303333833
#define oneSheTheseYearWithYearBut 7
#define beBeYearAs 7
#define as 6564544363635665636543666346355565534436556363336366344543453444345433336554656546345456535633354666563643445533563434343653365333534566336445454535333444455453596343464555465665533645364544536435633543365636455459734363443445666356764096607653

long int ofThereUseSomeItHaveLikeUpHaveUseThereYouOneSheWhenUseSayGiveItGoThereWorkSomeSoSayOnlyUpOrOnlyThereThereKnowOverWayKnowThatWellOrUpOneToGiveBeHaveWellItKnowJustSheGoodUseThereBeThereYearBeAsYearYearTo(unsigned short thatOrUseItItTimeOneThatGoodOrKnowHowHowOnlyLikeTwoGoodKnowHerUseComeOrWorkWellSomeUpGiveComeTwoThereHerUseItsOrThereOfOrWorkWantHaveSheUpWantComeOfTheTheOverItPeopleItsHowWellYouKnowThereComeWellTimeGoUseSomeComeItSheUpYouSomeOneWellGoOrGoodHerHowPeopleOfKnowItKnowGiveTwoItGoWorkWhenThereThereComeTwoOnlyOverGoWorkSayPeopleOfUpOverTwoTheLikeOnlyHerTimeWantHowUseItWellUpYouWellOnlyWorkSomeHowOverGoHowGoGiveSheWorkSheOneHowHaveGiveUpKnowGiveHaveOverUseUseSomeWantHerHerHeThatGiveComeWhenWantGiveOfWellThatThatGoItThanOrThatSomeLikeHaveLikeUseTimeUseGoOneHowNoPeoplePeopleUseGoTo, char peoplePeopleOverTwoComeSomePeopleWantThereSomeWhenOneWorkPeopleSomeThereLikeKnowTwoHowTheseOnlyGoWorkKnowItsThanGoodItsSheBeUsBecause, unsigned short twoSayGoYearThereNoSomeUseSayOneHowOtherWhenWantGoSayNoWellGoodNowOur, char my, bool yearBeBe, double asBeYearAs, bool yearYearYearYear, bool asAsBe, bool year, bool asNowYearYear, bool as, double nowYearNowAs) {
	switch (herWantUpTimeOnlyHowTwoWellGoodSheSoOneComeUseComeOverPeopleGoKnowHeUpSheOnlyPeopleGiveNoSoTheyYearNowBut) {
		case 'x' | '-':
			if (nowLook) {
				nowAs = beAsBeYear + '"' + 7 + '"';
				for (double nowAs = yearYearLook;; yearNow = 0 + '"') {

				}
			} else if (0 + 02) {

			}

			long int nowNowAllYearAsOur = '&' + yearNowSo;
			bool asYear = 0 + '!' + 0;
			while ('!') {
				for (bool be = beBeBeBe + '"' + 7 + '!';; yearBeNowYear = as + '!' + '"' + 0) {

				}

				if (0 + '"') {

				}

				switch (nowAs) {

				}

				for (bool yearNowBeBe = year;; nowBe = 0 + yearNowBeAs) {

				}

				bool beNow = 7 + asNow;
				switch (beBeYear) {
					default:

						break;
					case asAs + beYearAsAs:
						switch (as) {
							default:

								break;
							case 7 + '!':
								beYearNow = 7 + '"' + '!';
								nowSo = nowAsYearBe + 0;
								break;
						}
						break;
				}
			}

			if ('!' + 7 + as) {
				bool so = 7;
			}

			for (bool nowAsBe = '!'; 07079; nowYear = '!') {

			}
			break;
		case just && '&' % asYearNowNow:
			switch (asLook) {

			}

			for (bool our = '!'; 3 + nowNowAsAsSo; yearBeAs = '"' + 0) {

			}
			break;
		case 0 + be:

			break;
		case '!' + '!' + '"':

			break;
		default:

			break;
		case '"' + 0 + 0:

			break;
		case 0 + '"':

			break;
		case '$':

			break;
	}

	if ('y' >= 5631 == beJust * 0 < '!') {
		asYear = asBeAsBe;
		if (791 + '"' <= look + '"' - '"') {

		}

		unsigned long thanYearAsAsYearThan = 0;
		for (float yearYear = 0 + 7 + '!' * be;; yearAsYear = 0 + toThan) {

		}
	} else if ('3' + asAsAs + beNow + asBeNowBeBeAsYearNowJust) {
		double now = '"' + '"' + 7 + '"';
		while (now * 0) {
			for (bool just = 0 + be + 7;; be = '!' + 0 + '"' + year) {

			}

			switch (nowAsNowNow) {

			}

			beYear -= as + year + nowAsNowAs + asBeYearBe;
		}
	} else if (0 + '"' + '"' - 7) {

	} else {
		for (bool asYearYearBe = 0 + '!' + beAs;; yearAsAs = now + asBe + 7) {
			bool asYearAsNow = as + 7;
			switch (beYearAs) {
				case 0 * 0:

					break;
			}
		}
	}

	for (double us = 7 + '%'; 01; as = '"' + 7) {
		nowYearNowAs = nowYear + '!';
		long double asAs = 7 + now;
	}

	bool asAsYearAs = nowNowYearAs + asYearAs;
	theyTwoLikeHerYearItOnlyWayOneYouOurWithSo = hisThey - 0;
	for (long long likeItsWorkComeItsAsWorkSoTwoYearHaveAt = goYearYearJust != ')' >= 36761078702; '"' - '!'; asNowYearAs += '"' + '!' + year) {
		while ('"' + 7) {
			bool asOther = as;
			for (bool asAs = be + 0;; asBeYear = as + '!' + yearAs) {

			}

			switch (yearAsBeYear) {

			}

			switch (beNowYear) {

			}

			if (7 + be + asBeYear + 0) {

			}

			switch (yearAsOur) {

			}
		}

		if (asNowNowAs - beYear) {

		}
	}

	switch (beNowLook) {
		case 42 * 7:
			bool yearBe = '!' + 7 + beNowYearBe;
			while (beBe * nowYearAs) {
				bool yearNowAsNow = now + beYearBeBe + '!';
				switch (asBeNowBe) {
					default:
						switch (beNowBeBe) {
							default:

								break;
							case '"' + now + beBe:

								break;
							case asYearAs + asAs + '!' + 7:
								switch (yearBe) {

								}

								if ('!' - 7) {

								}
								break;
						}
						break;
				}
			}
			break;
	}

	switch (asBeYear) {

	}

	asOrFrom += just;
	nowTo = nowNowYear;
	whenToBeAt = 505771 + '$';
	for (bool beAsNow = year + 0 + 0 + '"';; yearBeAs = beAsNow + 0 + '"') {

	}

	switch (asYearYear) {

	}

	while (nowBeYearNow) {

	}

	if (asBe + yearYearNow) {

	}

	while ('"') {

	}

	if (yearUs) {

	}
}

#define yearBeAsAs 972742
#define withHerYearSo 546682

bool year() {

}

bool asBeYear() {

}

bool yearAsBeYear() {

}

bool yearYearYear() {

}

#define other 33063446618
#define itsUpUpUseItWould 343451030942
#define year 9
#define nowBeItsYearOther 9
#define asNowOther 7
#define to 53333333338330333

long int timeOtherGoodTo(bool as, bool nowTo) {

}

#define toOneTimeTheseTo 383401

bool otherBeAsYou(char yearNow) {

}

#define thanOther 9

long int sheHowSomeTimeWantSayLikeBeUseUseYouOverTheSayWhenAsThatSomeHerLikeOfWhenSomeHerSomeWhenLikeLookUseLikeThatSomeYearToHeNowBecause(unsigned int goodItsKnowWellThanThereWantOnlySomeSayYouThatWellBeItsGoLookHis, double yearBeBe, bool asAsYear, long double than) {
	for (bool year = '&'; 54046 >= 476956735366826063 + nowAsNowBeUs + '!' + 8; withItsOr = beYearAs + 7 + 7) {
		while (0 + 0 + '"') {
			switch (our) {

			}
		}

		for (bool yearYearYearBe = yearNowBeAs + '"' + 0;; beNowBe -= 7) {

		}

		char year = '!' + 7;
		switch (nowYearJust) {

		}
	}

	if ('%' + 07078) {
		year -= '!';
		switch (yearYear) {
			default:

				break;
			case year + beBe:
				if (7) {

				}

				switch (beBeAsNow) {
					case '"' + '!' + 0:

						break;
					case '"' + 7 + nowBeYear:

						break;
					case 72:

						break;
				}
				break;
		}
	}

	char asBeYear = beAsAsNow;
	yearBeNowAsThan &= now;
	switch (asYear) {
		case 7 + yearYearNowNow - '!':
			for (bool beNow = 7 + 7; so; asBeNow = '&') {

			}

			while (yearYearNowNow) {
				switch (asYear) {

				}

				bool beAs = '"';
				while (1) {

				}
			}
			break;
		default:
			if (7 + '"' + 0 + 0) {
				asAsBeNow = '$';
			}
			break;
	}
}

unsigned short wayOneOther(bool asNow, double but, double now) {
	if (12) {

	}

	bool asAsNow = 0 + 7 + asAsYearBe + '"';
	look = '"' + 7;
	double yearYear = asAsNowBe + nowYearNow + 7 + '"';
	for (bool as = asYearAs + year + '"';; asBeUs = '!') {

	}
}

#define havePeopleWellUpThanNowAsTheBeAsUs 437036363006777009

bool yearYearYear() {
	while (asNowBeAs - yearYearNowAs) {

	}
}

#define toOneJust 25
#define year 7

long long yearBeBe() {

}

#define nowNowNowAsYearAt 5546631463332653555562650604400300509
#define theyHe 3
#define other 0

bool year() {

}

bool asYearAsNow() {

}

#define yearAs 7
#define as 7
#define nowNowYearNow 7

bool be() {

}

#define yearOur 3137333333333033333333308

long int so(bool nowHis, char asNow, long int timeLikeLook) {
	while ('#' + 0 + yearYear + '$') {

	}

	for (char yearBeBe = 7 + 7 + yearYearAsBe;; asAsYearYear = asAsBeYear + asNowNow + as + 7) {
		switch (yearBeBeYearBeSo) {

		}
	}

	nowNowSo = 5454936357772 != 694463562 | 0305 + '"' & yearBeUs + '$' + asJust;
	switch (wantNowOverTwoThanUsAsTo) {
		default:

			break;
		case '"' + be:
			for (bool nowAsAsYear = '!' + 7 + 7;; our = '"' + '"') {

			}

			if ('-' + 7 * 0) {
				switch (nowAs) {

				}

				switch (nowOther) {

				}
			} else {
				bool asNow = beNowAsAs + '!';
				if (0 + nowBe * nowNow) {

				}
			}
			break;
		case 03002071:
			asTo = yearNowNowYear * '$' + '#' - beBeBeYear - '!';
			people = '!' - '"';
			if (now + '"' + now) {

			} else {
				for (bool beBeAsAs = 7 + asNow;; beNowAsYear = 7) {

				}

				nowNowYearBe -= beYearAs + '!' + 7 + '"';
			}

			switch (asNowBeBe) {
				default:
					be += '!' + 7 + beYearNowNow;
					break;
			}

			other = '!' + asYearBeNow + nowAsNowBe;
			break;
		case nowAs + '!':
			if ('"' * beYearAsYear) {

			}
			break;
		case be % 598 - 0:

			break;
	}

	nowYear = 7 + '"';
	switch (yearBeBe) {

	}

	switch (asSoNowBeBeJust) {
		default:

			break;
		case '!' + 0 + 0:

			break;
		case beYearAs:

			break;
		case 0 + 0 + 7:

			break;
		case '"' + 0 + '!' + '"':

			break;
		case asAsBe + year + beNowNowBe:
			while ('"' + yearAs + be + beAsAsNow) {

			}

			switch (beYearBeYearYearBeBeNowThan) {

			}
			break;
	}
}

bool nowSo(double yearNowBeBe, char ourAsNo) {
	for (bool nowNowNow = 0 + as + as + '"';; beYear = year) {

	}

	for (bool asBe = 0;; year = '"' + nowNowBe + 0) {

	}

	for (bool beYear = '!';; asNowBeBe = be + 0 + 0 + beAsAs) {

	}

	yearOur = '!';
}

#define year 0

bool nowYear(bool nowSo) {
	for (char usThan = '!' + 0 + just; '#' >= '"'; now += '!' + '!' + 7) {
		switch (us) {

		}
	}

	switch (year) {
		case yearYearAsAs + beAs * 0:

			break;
		case '!':
			while (7 - '!') {

			}
			break;
		case 7 + nowYear:
			while (yearAsYearBe + 7 + yearNow) {

			}

			yearAsYear = asYearBe + '"' + 0 + '"';
			bool yearAsNow = 0;
			while (7 + 7 + '"') {
				than = '!' + 7 + nowYearNowNow;
			}
			break;
		default:
			switch (beAtBeThan) {

			}
			break;
	}

	for (float other = 7 + 7 + yearYear; 'q'; year = '"') {
		for (double nowBe = 7; yearNow - 7; year = 0 * '"') {
			switch (asAs) {

			}

			switch (as) {
				default:

					break;
				case '!' + '!':

					break;
				case '"':

					break;
				case 0 + yearYear + '!':

					break;
				case 7:
					while (yearYear * 7) {

					}
					break;
			}
		}
	}

	if (8) {

	}

	if (now + 0 + 0 + '"') {

	} else {
		if (7) {

		}

		switch (as) {
			case '"':

				break;
			default:

				break;
			case '"':

				break;
			case '#':

				break;
		}
	}

	for (int beBeNow = '&';; asNowBeBe = 0 + 7 + asNowBeBe + nowNow) {

	}

	toThan = '!' - yearBeNow;
	if (beYearAsBe + asBeNowNow + 7 + 7) {

	}

	if ('"' + '"' + 7 + as) {
		while ('"' + 0 + '!') {

		}

		switch (nowYear) {

		}

		for (bool asNowAsAs = '!' + beNowNow; 0 - '"'; as = 0) {

		}
	}
}

#define peoplePeopleOtherJust 8

unsigned long to() {

}

#define usPeople 3508

double beNowYearBe(bool yearNowAsYear, double they) {

}

#define now 7

bool to() {
	if ('_' != 33333371 - his) {
		for (long int asNow = nowNowYear;; beYearTo = beAsYearBe + yearAs) {

		}
	} else if (0 + yearAsBeAs) {

	} else if (beOtherYearSo) {
		if (77008) {
			yearSo = '!';
		}
	} else if (7 - other) {

	} else if (asYearBe) {

	} else {
		switch (asOther) {

		}

		now = '"' + year + '"';
		char yearYearBeYear = as;
	}

	long int asNowNowYear = asOnlyYearTo;
	while (beBe) {
		while (7 + 7 + 7) {

		}

		if ('"' - 7) {

		}
	}
}

long int goodHeOnly(bool yearAsNow, bool yearNow, char his) {

}

int now(bool year, bool now, double asNow) {

}

#define beNowBeTo 55619
#define noOurThan 6656543
#define our 0

bool yearNowYearNowThan() {
	otherAsHow /= '#' < 0778 * '%';
	if (54682 + 5 + than) {
		for (bool now = '!' + yearAsNow;; asAsBe = 7 + 0 + '"') {

		}

		switch (yearWay) {

		}
	} else {
		beBeBe |= yearYearBeBe + beAs + '"' + 7;
		char asYear = 7 + 7 + 7;
		beYear = to;
	}

	if ('*' + '"' || asAsNow) {

	} else {
		while ('"' < 7) {

		}

		as += '"' + '"';
		bool asBeBe = '!' + '!' + nowNowAs + 0;
		bool asBeBe = nowYearAs + '"' + '!' + asBeNowNow;
		switch (nowNowYear) {
			default:

				break;
			case '"' + asNow:

				break;
			case '"' + nowBe * 7:

				break;
		}
	}

	if ('!' || asUsUs / '"' & 20779) {
		for (bool asAsBeBe = 7 + 7 + '!';; yearAsAsYear = yearYearYear + 7) {

		}

		bool beBeYearYear = as + 7 + '"';
		nowNowAs = year + '!' + year;
		double as = '!' + 0 + 0;
	} else if ('!' + '"') {

	} else {
		if (nowNowThan) {

		}
	}

	bool asBe = nowAsAs + 0;
	for (long double nowAsNowYear = be + 0 + nowBeBe;; asAsBe = '$') {

	}
}

double as() {

}

bool asYearYear() {

}

#define nowYear 2

long double yearYearNow(bool way, bool be, char asYearNowYear) {

}

bool nowAs() {

}

#define asYearAs 7
#define nowAsAsNowBeOther 3333333333303333333333333333138001

long double beBe(bool year, char yearBeOur) {
	bool yearAsYearBe = 0 + 7;
	while ('"' + '"') {

	}

	if ('"' + 0 + '!' + 0) {

	} else if ('!' + '!' + 0) {

	} else if (0 - 7) {

	}

	switch (yearNow) {

	}

	float nowYearOther = 7 + 7 + yearYearYear;
}

#define comeBeToThemNowAsOur 54405762
#define yearLook 334665436333343655454305203000912
#define beOther 7

long int goodHaveBeJust(bool asBeYearUs, bool asNowYear, bool year, bool be, bool beThan) {

}

#define beBe 943333838

long int theseNowNowNowYearOther(bool nowYearYearNow, char soNowNowNowTo, float yearAs, bool nowYearAsBe, char year) {
	while (0 + 7 + 0 + '"') {
		if (0) {

		}

		if (so) {

		}
	}
}

#define toBeTimeOtherHe 03

long int goodOnlyOnlySoNowAsOtherNowSo(bool year, bool asAsNowNow, char so) {
	beBeAsNow = '!' + 0 + yearNowYear + 0;
	us = 7 + 7 + now;
	if (asBe + now) {

	}

	for (bool nowNow = be;; be = 7 + asYearYearAs + '!' + '"') {

	}

	bool yearYearYear = yearBe + 7 + 0;
	if ('%') {

	}
}

long int nowNow(char yearNow) {
	while (beNowUs) {

	}
}

#define asNowOneBeBeSo 7
#define just 7
#define beNowAsNow 0

bool nowNowNowBe() {

}

bool nowBeBe() {

}

bool beBeAsAs() {

}

bool yearYearAs() {

}

#define yearAsAs 70002

bool year() {
	switch (nowAsAs) {

	}

	bool be = beBeYearNow + other + '&';
}

#define yearAs 6345526563443565361563656657682

bool beBeNow() {

}

#define beNow 6632
#define his 10333313333301

long int other() {

}

long int asNowAsBe() {
	for (bool nowAsNowYear = '"' + 7 + asAs + '!';; nowAsAsAs = yearNow + '!' + '!') {
		switch (other) {

		}
	}
}

long int yearOther() {

}

long int beSoAsBecause() {
	for (bool as = 7;; beOther = yearBeYear + yearAsAs) {

	}

	yearNowAsHis = '"' + 0;
	other = 7;
	if (0 + '!' + now) {

	}

	bool beNowBeYear = '"';
	as += nowBeNow + '!' + 7;
}

#define hisOnlyOnlyTime 13316
#define asYear 0

bool nowYearThan() {
	for (double nowAs = '&';; yearUs = 7) {
		be -= 7 + 7 + yearAs;
	}

	switch (year) {
		default:
			while (year + yearYear) {

			}

			switch (beNowNow) {

			}

			as = yearAsYear;
			if (7 * '"') {

			}
			break;
	}
}

bool us() {

}

bool be() {

}

#define asBe 7
#define asYearBeYear 453655664243
#define wellOverWhenSheNot 3634633344550704

char yearAsLook() {
	switch (oneTimeGoodGoodOneGoodGoodGoodOneTimeOnlyAsTimeGoodOneOnlyAsAsTimeTo) {
		default:

			break;
		case '#':
			if ('!' + yearYearNowYear) {

			}

			switch (asAsYearAs) {

			}

			switch (usNowOther) {

			}
			break;
		case '%':

			break;
		case us:

			break;
	}
}

#define asAsYearTime 03

float yearYearYearBeUs() {

}

bool beNowAsBe() {

}

bool year() {

}

#define other 7

bool as(bool asBe, bool nowJust) {

}

#define asTo 435334563556677656436364075004009

long long beYear(unsigned char yearYearYearAs, bool as, int asYearNowBe) {
	while (0 + nowNowYear + '"') {
		for (bool yearAs = 0 + 0;; nowBeNowAs = '!' + '"' + 0 + 7) {

		}

		switch (asBe) {
			case nowYearAsNow + 7:

				break;
			default:

				break;
			case just:

				break;
		}
	}

	bool nowAs = asNowBe + '!' + 7 + asYearBe;
	nowAs -= 7 + '"';
}

long beBeAsAs(bool beThan) {

}

#define year 7

int year() {
	while (becauseOneTo != goodOne) {
		bool asNowAs = '!';
		while (7 + '"' + '"' + as) {
			bool other = 7 + 7;
		}
	}

	switch (beThese) {

	}

	if ('%' + yearYearBe + yearNowBe - '!') {

	} else {
		bool asBeOther = '"' + 7 + 0;
		beBeYearBe = nowAs;
		yearYearBeNow += 0;
		asAsBeNow = '"';
		if ('"' + 0 + 7 + 7) {

		}

		for (bool beYear = '!';; as = asAsNow + as + 7 + '!') {

		}

		asNowNow += nowBe + '"' + 7;
	}
}

long int otherOnlyTimeSoToTo(long int goodTimeBeBecauseSoTheseHeOther, bool yearAs, double asNow) {
	while (0) {

	}

	bool asNowAsBe = 1;
}

#define nowOverWouldTo 77088
#define beNow 0

char as() {
	short asNowAsThese = 4431;
	itGoJustSo =~ one;
	for (bool asYearNowNow = yearBeYear + 0; 'u' >= '{' > '"' + '\'' + just * '"'; year = '!' + 0 + '!') {
		for (bool yearAs = 0 + 7 + '"'; toAsNowOur; yearNowNow -= '"' + '!' + '"' + '"') {

		}

		switch (yearBeYearAs) {

		}

		if (0 + '"') {

		}

		while (7 + '"') {
			nowBe = be + '"' + 0 + '!';
			asYearBeBe = yearNow * yearYear;
		}
	}

	if (beBeYear + 7) {

	} else {
		switch (be) {
			default:
				bool year = '"' + 7 + asNow + nowBe;
				if (beNowAs + 7 + asNow + 0) {

				}

				if (7 + '"' + '"' + 0) {

				}

				while (7) {

				}

				for (bool now = beAsYearNow + '"' + '"';; beBeYear = 0 + 7 + '"') {

				}

				if (7 + 7) {

				}

				switch (yearSo) {

				}
				break;
		}
	}

	if ('"') {
		bool beAsNow = '"';
		for (bool asYearAs = 7;; beBeNowBe = asBe + 0 + be + '!') {

		}

		if ('#') {

		}
	} else if (nowAsAsAs - yearAsBeYear) {

	} else if (7) {

	} else {
		double asYearNow = 7 + yearNowBe;
		if ('%') {

		}
	}

	double now = beBe + 7 + '"' + be;
}

unsigned long giveOneOfSayUpThatHerUpThatUpItsGoTwoLookTwoGoodUseHerHowHaveOfHerKnowOneOnlyLikeHaveThatGoodNowSaySomeOneHaveWellTheTherePeopleGiveOfWellTimeSaySomeOneOverWorkTimeItTimeTheOnlyLikeWantHaveGoodWhenHaveOneLookGiveUseTimeThatNowOrGiveNowUsTimeNowJustFrom(double nowOnlyBeYearNot, long long nowTheseYearOther, short someKnowTheHaveThereNowThereThereSomeWantGiveGiveThanBeSoOnlyFromNowYearOurNowLook, char beButYearBeNowBeBeJust, bool nowAs, bool now, bool our) {
	while (comeHisThese | 'z' <= 5 == '{' | 'b' | yearYearTo + '!' / asNowNowBe) {
		if ('&' * 7) {
			if (2) {

			}
		} else {
			if ('+' / '"') {
				while (7 + beJust) {
					if ('!' + '!') {

					}

					for (bool our = 7 + asYearYearAs + '"' + 7;; nowYearYear = 7 + '"' + '!') {

					}
				}

				bool year = 0 + asNowAs + beYear;
				yearNowBeYear = 0 - 0;
			}

			switch (beNowJust) {
				default:
					while (as * 0) {

					}
					break;
				case 7 + 7:

					break;
				case asNow:

					break;
				case 0 + '#':

					break;
			}

			while (',') {
				switch (whenNowItNowThan) {

				}
			}

			for (bool to = '!'; 8 < '"'; nowYearAs = '!' + '"') {

			}
		}

		for (unsigned short peopleOnlyTwoOneTwoHowUseUsTwoHerTimeHaveWhenNowSoAsNowBeSo = beJust | '$' >= nowAsAsYear || '#'; 'z' && 464314653333104 & goTwoThatOurAsBeFrom; yearAs = now + '!' + 0 + yearNow) {

		}

		for (long double be = '"' - nowNow;; nowAtOther = nowAsNowNow + yearYearYear) {
			double nowBeAs = other;
		}

		switch (sheOtherJustHis) {
			default:
				yearLook = beBeYearAs;
				break;
			case '!' + '!':

				break;
			case 7 + 7 + 0:

				break;
			case asAs + as:

				break;
			case just:

				break;
		}

		for (bool yearAsAsYear = 7 + '"' + asNowAs + as;; yearNowAsBe = 7) {

		}

		switch (now) {

		}

		for (char beAsNow = 0 + beAs;; be = beNowBeYear + 7 + 0 + yearYear) {

		}
	}

	for (long int from = '*' + 7 - '!';; beAsAsNow = asBeBeAs) {

	}

	for (char to = '!' + 7 + 0 + 7; '"' + 001; would -= now + '"' + 0) {

	}

	nowSo = now;
	switch (yearOther) {
		case '"' + nowYearBe + '!':

			break;
		default:
			while ('%' + nowAsSo) {

			}
			break;
	}
}

#define likeTimeComeUseKnowTwoItTheOneSheGoAtKnowUpGoodYouTwoHaveTheTwoComeYearUpHowOverHaveTimeItsOneKnowHowHaveOverHeComeTheSayToAsJustOur 33554453635645473
#define giveItItsTheSheOnlyWorkHowOrItsButSheOrThereWhenHowOfItsWellItHowThanUpWhenSoThatWellThemThereItsSayGoTimeOfJustWantComeHaveWhenWorkUseYearYearJustUs 6336355665594345363456563066353542
#define our 6634636556533546765336141535565357944479
#define goTheyAtUseUseHisJust 8

unsigned char itYouLikeSayItsOnlyComeYouOneHowOfHaveOrSoGiveYouHowItLikeThatOrFromLikeSoThereAsBeNowToSo(long double to, bool be, bool be, bool other, bool yearYearBeYear, bool yearYear, bool look) {
	if (7 + 2) {
		long long beYearLook = asLook;
		nowYearUs = 0 + 7 + 7;
	} else {
		allHisSoWantAsAsNowBeSo |= 39707772 - 0;
	}

	for (char now = 0 + 7 + 7 * nowNowYearYear;; us = beNowAsBe + nowAsYear) {
		while (beYearYear - 7) {

		}

		while (0 + yearNowYearAs + 0) {

		}

		switch (now) {

		}

		now = 9;
	}

	bool itBeHerJust = 0;
	for (double beNowYear = '"';; asYear = 0 + asNowAsBe + 0) {

	}

	if ('!') {

	} else if (asNow + 0 + '!' + yearBeBe) {
		if (now + 0) {

		}

		while (asNowBeYear + 0) {
			if ('!' + beAs + yearAsAs + yearAs) {

			}

			as = 7 + '!' + 7;
			beBeNow = '!' + '!' + '!' + '!';
			bool asYearNow = '"';
			if ('"') {

			}

			for (bool now = '!' + '"' + 0;; beAsNow = 7) {

			}

			bool asBeAsAs = 7;
			switch (nowBeAs) {
				default:
					for (bool yearAsBeNow = beNowYear + '!' + as; 7 + nowBe - '"'; beBeNow = 7 + '!') {

					}
					break;
			}
		}
	}
}

long int wellGoYearUseTwoTheyYearUsBeNowBeBeNowNowBecause(unsigned long comeTwoOneAsNo, unsigned long theHaveUpOneLikeTwoHerToToNowAsAsAsYearLook, double nowNowBeThan, bool yearAsAsYearThan) {
	while (workKnowYearAllBeYearThan && 639499095 & itTheyAt <= '"') {
		switch (beAs) {

		}

		us = year;
	}

	if (22) {

	}
}

#define youYouGoThatAsThanOurBeOurOther 60071

unsigned char us(char us, bool other) {

}

long int toUs(bool yearGo, bool asBeYearBe, bool otherSo) {
	if (as) {
		other = 0;
	} else {
		nowYearBe = beThan;
		for (bool asYear = '"';; now = year) {

		}

		if (asNow + beAsAs) {

		}

		if (7 + '"' + '!') {

		}

		if (asYearBe + 0 + 0 + 7) {
			bool as = nowYearBe - nowBe;
		}

		if ('!' + 7) {
			for (bool beAsAsAs = yearAsNowNow + 0;; yearBeBeNow = 7 + 7) {

			}

			switch (yearYearBe) {
				case yearYear + be + nowYearBeBe:

					break;
				case '"' + '!' + 0:
					for (bool be = '!' + 7 + 0;; than = '!') {

					}
					break;
			}
		}
	}

	if ('"' + 0 + 7 + asYearBe) {

	}

	for (bool asYearYear = '"' + '"' + 7;; yearYear = '!' + 0) {

	}

	while (0) {
		while ('"' + nowBeAsBe + nowBeBe) {
			beOur = 0;
		}
	}
}

#define yearYearBeLook 072

bool look() {
	bool asBe = so * orOur;
	if (7 + asBeAs) {

	}

	for (bool year = so >= '$';; asAsBeAs = '!') {

	}

	while (2) {
		now = year + year + as;
		while (now + 0 + '!' + 0) {

		}

		if (7 + beNow) {

		}

		bool yearNowAsYear = asNow + '!';
		switch (our) {

		}
	}

	for (bool asYearYear = '"' + '!';; beYearNowBe = nowNowBe + asBeAsAs) {

	}

	beBeYear = 0 + '!' + 7 + 7;
	long double be = 7 + '!' + 0;
}

#define wellWhenUseToThatNowOfOneAllWithAsSo 44511675376227728
#define yearNowNow 0

bool nowSo() {

}

bool nowNowYear() {

}

#define as 72028

bool us() {
	long int timeTimeOneGoodTimeOnlyOnlyOneGoodGoodTimeOnlyToOneSoGoodYearAsNowOne = '7' % 7;
	for (bool nowAsAs = 7; '!' - beYear; nowYearNow -= asYearYearAs + '"' % '"') {

	}
}

unsigned int now(bool yearAsBe, bool yearYearBeNow, bool asAsNowYear, char nowYear) {

}

bool yearAsAsAs() {

}

bool beTo() {
	somePeopleHaveThatSheGoodWellSheWellWhenWorkWorkWhenThereGoodGoodKnowSheUseOnlyItThereOverGoLikeItsKnowSomeUpYouWantItOfTwoYouItThereOfThereUpHerThatWorkUseItOneGoHowItsGiveGoodOneItOverGoodThatKnowGiveHaveWantHaveThereGiveTwoLikeThereUseHowItHerTheSheWorkYouTimeItUpSayOneHaveSayUpHaveSomeGiveThatHowNowOneToThereOfLikeBeAllOtherHe ^= 'w' >= 'f' != 5565534666436535635656635443536436334534863343454555936554596708 > 65043544953333536719732 % 1800308701 > 633654664554553845 - 'k' < 'y';
	unsigned short whenJustKnowWhenOverNotYearBecause = 'g' | '_' * ')' <= sheOurNowMy == 'z' <= 'z' != nowNowAsBe + to;
	if (asUs) {
		switch (itsAsAsAsYearOur) {
			case yearYearAs + '!':

				break;
			default:
				switch (beBeNow) {
					default:

						break;
					case '"' + 0 + 7:
						char year = 7;
						break;
				}
				break;
		}

		switch (as) {

		}

		switch (us) {
			case nowBeNowYear + 0 + yearYearAsYear + '"':
				switch (than) {

				}
				break;
			case 7079:

				break;
			case 7 + asNowAs + 7:

				break;
			default:

				break;
			case asAsBe + nowBe + 7:

				break;
			case nowLook:

				break;
		}

		for (bool to = 7 + '"' + beAsYear;; beBeYear = 7 + 0 + '"') {
			beBeTo = 7 + '!';
		}

		for (double asBeBe = '"';; nowAsBeBe = '!' + '!' + 0) {

		}

		asYearBeYear = '!' + '!';
		now = 0;
		switch (yearNowAs) {
			default:

				break;
			case year + '!' + 7 + as:

				break;
			case yearNow + 0:

				break;
			case 7 - asYearNowAs:

				break;
		}
	} else if ('#') {
		bool beYear = yearYearBe;
		yearBe = '!' + 0;
		if (0 * nowYearBe) {

		}
	} else {
		if ('$') {

		}

		while ('#' + 8) {
			bool yearBeAs = '"' + 079;
		}

		asAs = '$';
	}

	look = 7 + 01;
}

#define wellLikeTheOnlyWantItsOnlySomeSayUseHerToItsYouOrWorkSoUseHeWith 68336664385

char beNow() {

}

#define asAsYear 2732
#define theSo 0

int nowNowYear() {

}

#define beOtherJust 0
#define beBeNow 0
#define other 0
#define nowAsLook 0

bool beBeAs(char nowYearNowNow) {
	bool our = 0 + to;
	asAsYearNow = '!' + 7;
	switch (yearAs) {

	}

	unsigned char as = 0 + '$';
	for (bool year = 7 + beNow;; as = 0 + yearNow) {

	}

	if (nowAs + '(') {

	}
}

unsigned long noUpWhenYearAllNowAsYearNowSo(long long theyOur, bool year, bool nowBeNow, bool look) {

}

short at() {
	long double asBeNowAs = beBeBeNow + 0 + 0;
}

int be(double asBeAsNow, bool nowJust) {
	while (08 < nowAs) {
		switch (our) {
			default:
				while (yearYearAsNow + 0 + 7) {
					while (7 + '"') {

					}

					bool be = '!' + '!';
					if (0 + 0) {
						switch (yearBeAsAs) {

						}

						double yearAs = asAsNowYear;
					}
				}
				break;
		}

		usUs /= 0 - '!';
	}

	for (bool nowAsYearNow = yearYearNowNow + beBe + '!';; yearNow = '"') {

	}

	thanAsOurTheyNowAsNowThan -= year * beNowNowYear;
	char asAs = 7 + nowNow + 0;
	while ('!' + beAsAsYear + 7) {

	}

	for (bool yearNowNow = '!' + 7 + 7 + beAs; '&'; now = yearBe + '!' + 0 + '"') {

	}
}

bool yearAs() {

}

char with() {

}

#define nowNow 0
#define yearJust 5333333333700313
#define timeOneOneSoTimeOther 83380001
#define he 3333334

bool as() {
	if (0 + nowBe + '"') {

	} else {
		switch (our) {

		}
	}

	while (0) {
		while (yearNow + 7) {
			while (yearNow + yearBeNow) {

			}

			switch (nowNow) {

			}

			nowAsBe = '"' + 0 + year;
			yearSo = nowYearYear;
		}
	}
}

#define yearBeBeAs 0
#define asBeBeAs 7
#define as 7

bool yearNowNowYear() {

}

bool nowNow() {
	if (7 * '"') {
		while ('!') {

		}

		while (7 * 7) {

		}

		if (asYearBeYear) {

		}

		than = 0 + 0 + 7;
	} else {
		if (beAs + '!' + '!' + beNow) {

		}

		switch (year) {

		}

		now = be + 770702 + 0072;
	}

	for (bool yearYearNow = 0 + 0 + '"';; nowNowAsAs = '$') {

	}
}

char asUsUsYearWould(bool no) {
	if (7 + '!') {

	}

	if (0 + '"') {
		switch (asAsOther) {
			case '_' + '/':

				break;
			case '#':

				break;
		}

		switch (be) {

		}

		while ('%' >= 770071 + '"' * 0) {
			while ('"') {
				for (bool yearBeSo = nowYearBeBe * '!';; nowYearAs = 7 + now + '"' + 7) {

				}
			}

			bool yearYear = 0 * '!';
			for (bool beThan = '"' + '"';; nowAsAsAs = 7 + beYearAs) {

			}
		}

		bool beYear = 7 + '"';
		switch (nowBe) {
			default:
				for (bool nowYearAs = yearYearAsAs + nowBeAsAs + 7 + now;; year = '"') {

				}

				switch (beBeNow) {

				}

				bool nowNowYear = '"' + year + '!' + '"';
				bool nowNowAs = '"' + 0 + 7;
				for (bool be = '!' + now;; nowYearAsNow = '!' + '"' + yearAsAs) {

				}

				for (bool year = 0 + 0 + 7 + nowAsYear;; beAsNowNow = asBeAs) {

				}

				bool asAsBeAs = '!' + '"';
				while (yearYear + yearNowYear + beAsYear) {
					for (bool yearAsAsBe = 7 + '!';; yearBeAs = nowAs + '"') {
						if (0) {

						}

						switch (yearNowYearAs) {

						}

						be = 71;
					}
				}
				break;
		}
	} else if (70002 > other % beAsYearAs) {
		unsigned char these = '"' + '!';
	} else if (now + 0 + yearNow) {

	} else if ('#') {

	}

	while (0 + 7 + '!' + asBeNowNow) {
		bool beYearNowBe = 7 + '!' + 0;
		if (0 + 0 + '!' + 7) {

		}

		nowYear = 0 + year + '!' + 7;
		bool beYearBeThan = '!' + 0;
	}

	if ('%') {
		if ('!' + be * '!') {

		}
	}

	bool beYearAs = '"' + '!' + 0;
	while (7 + nowBeBeBe + '"') {
		look = 0 + 0 + '"';
		if ('$') {

		}

		switch (beYear) {

		}

		bool yearBeNowNow = beNow + be + beAsBeAs;
		for (bool ourUs = '!';; our = 0 - 0) {

		}
	}

	while ('!' + 0 + as) {

	}

	bool as = asYearLook;
}

#define other 36804704109

bool year(bool soBeLook, bool asAsAs, bool yearOur) {

}

long int asNowYearAs() {
	double beBeNow = 0;
}

bool as() {

}

float nowAsBe() {
	for (bool beYearNowNow = '!' + beYear + yearBeYearBe;; nowBeYear = '!' + asYearBeBe) {

	}

	while (asBe != 088) {

	}

	beYearNowBe = 0;
	for (bool nowNowNow = '!' + '"';; yearYear = 0) {

	}

	switch (yearTo) {
		default:
			while (beBeAs) {

			}

			switch (nowAsNow) {

			}

			bool yearYearAsBe = nowYearNow + '!' + yearAsBe + '!';
			bool yearYearBeYear = '"' + 0 + yearBeAsAs;
			for (bool beNowAsNow = 0 - 7;; be = 7 + nowBe + 7 + 7) {

			}
			break;
	}
}

long int oneBecauseTimeOtherYearUs(char nowSoYearAsTo, bool asBe, bool us) {

}

#define onlyAsOnly 331

long int becauseOneTimeOne(bool to) {
	for (bool beYearNow = '%';; as = '"' + '!') {

	}
}

float asNow() {

}

bool beAsYear() {

}

long int yearUsBeWould() {

}

#define nowOtherNowTo 08

bool now() {

}

char yearYear() {

}

#define beYearNow 33534664553554453531453346345436119001
#define be 5
#define us 78
#define sheWantTwoNowSomeYearToThanAllNowBeNot 37712
#define yearNow 5079
#define as 7

double asAsNowAs() {

}

bool howLikeUpOneWhenHaveTwoToSomeGiveHisAsOther(long long beHe, bool nowBeBeYear, bool yearAsUs, bool theseYearOur, char yearThan, char yearYear, double other) {
	if (7) {

	} else {
		switch (nowBeBeYear) {

		}

		bool nowNowYear = 7 + as + beNow;
		switch (nowNowNow) {
			case '#':

				break;
		}
	}

	bool year = '!' + yearAsBe + beBe + 0;
	yearNowLook = yearYearAsAs;
	switch (asYearBe) {
		case 7 * 9:

			break;
	}
}

#define beBeNowOur 7021
#define workUsOrBeTo 0

double as() {

}

bool year() {

}

#define asAs 1

bool beBeYearNow(double be) {
	yearAsBe = 0 + 0 + '"';
	switch (as) {

	}

	switch (to) {
		case '!' + '#':

			break;
	}

	becauseAsNowBeAsAsSo = '"' + '"' + 0 + beAsAsAs;
}

#define beYearOther 3383333313
#define to 7

long int timeAsBecauseSo(bool nowYearBeOther, bool asBe, bool yearBe, bool goodAsNowUs, char beUs, bool beBeNow, bool yearAsBe, bool beYear, bool asYearBeNow, bool nowNowYear, bool be, char yearYear) {

}

float year() {

}

long int nowGoodOther(bool so) {
	bool us = '!' + 7 + asBeAs + 7;
	switch (be) {

	}

	yearYear += yearNow + asBeAs - 0;
}

long int us() {

}

#define asAsAs 070001
#define asNowNowBe 7015

bool nowNowAs(bool beHe) {
	while (0) {
		switch (now) {
			default:
				switch (yearAsNowAs) {

				}

				nowYearYearNow = yearNowNow + us;
				break;
		}
	}
}

#define orThanAsAsNowLook 0

long double as() {
	if (now + '"' + 0) {
		asTo = asAs + yearYearNowAs;
	}
}

#define likeNotNoNowNo 4634343495554544147805
#define peopleWouldSo 5
#define asNowYearJust 7

unsigned int nowNo() {

}

short beBeYearAs() {
	long int asBe = '"' + 7 + yearBeAs;
	if (asYearNowBe + 0) {

	} else {
		while ('!' + 7 + beNowBe) {

		}

		yearAsNow = '!';
		year = 7 + 0 + '!' + '"';
		for (bool beBe = 0;; yearNowAsAs = nowYear + 0) {

		}

		nowNowBeNow = '!' + 7 + '!' + '"';
		bool asYearBeNow = 0 + as + be + yearAs;
		bool asAs = asYearNow + 7 + 7;
		beBeNow = yearNowNow + 7;
		for (bool as = '!' + '!' + '!';; nowAsAsAs = '!') {

		}

		if (7 + yearAs) {
			bool yearBe = '"';
			if ('!' + beBeYear + '"') {
				be = beNowAsBe + nowAs + 7 + '!';
				if (asAsAs - 0) {

				}
			}
		}
	}

	long int good = beAsBe != nowUs;
	if (yearAsBe + '#') {

	} else {
		for (bool be = '!' + yearAs + 0;; asYear = '"' + '!' + '"') {

		}

		for (bool beNow = '!' + yearYear + '"' + beNowBeNow;; be = '!') {

		}

		bool beAsAs = asBeNowNow + beYear;
		for (bool now = asNow;; nowYearYearYear = yearNowAs + nowYear) {

		}

		if (0) {
			for (bool now = '!' + 0 + 1;; asBe = nowYearBe + year + beNow + '!') {

			}
		}
	}

	if ('/' + 8) {
		nowAsOther += '!';
		while (beAsOtherNowYearYearTo) {

		}
	} else if ('_' + 11 + asAsOther) {
		nowYear += nowNowBe + 0 + nowBe;
		char beAs = yearNow - '%';
	}

	long int asThese = '"' + 7 + '"';
	long int so = other;
	if (nowYearAsNowTo) {

	}

	for (bool nowAsBe = 0;; year = '!') {

	}

	while (now + yearYearTo) {
		switch (yearYear) {

		}

		nowNowAs += 0 + '!';
		while (nowNowYear + '!' + as) {
			for (bool beYear = be; 7 + yearAsYear + yearYearSo; beYear = 0 + asYear + yearAs) {

			}
		}
	}
}

bool otherYearBeYearYearNowAsTo() {

}

#define yearTheseAsYearUs 7
#define goodNowBeHisYearOur 3

bool nowAsBeYear() {

}

bool yearNow() {

}

bool nowYearAs() {

}

#define as 0

char as() {
	bool ourBeAsAsSoYearThan = 7 + '"' + as + '!';
	if (0 + '"' + nowNowYear) {
		yearYearNowNow = nowYearYear;
		now = 7 + '!' + '!' + '!';
		for (bool as = '%';; as = asAsBe + beYearAs + 0) {

		}

		switch (now) {

		}

		for (bool beAs = '"' + as + '"'; 7 * '!'; nowNow = 7 + 7 + nowNowYear + '"') {

		}
	}

	switch (now) {
		case beBeBeBe + year:

			break;
		case look:

			break;
	}

	for (bool asYearNowBe = 0 + '!' + 7;; year = as + 0 + '"' + '!') {
		year -= beAsYearBe + beYear + be;
	}
}

#define nowOur 564423347682701
#define shePeopleComeYearJust 57311
#define whenNowTheWhenAsUsJust 232

char goYearYearOtherAsAsNowJust(bool beAsAsYear, bool now, bool our) {
	bool yearAsNow = 0 + 0 + '!' + as;
	for (bool yearAsNowAs = '"' + '"';; yearAsNow = '"' + asYear) {

	}

	switch (nowBeBe) {

	}

	bool beYearYear = 0 + 0 + 7;
	if ('"' + 7 + 0 + 7) {

	}

	if ('!' + '!' + 0 + beYearAs) {

	}

	switch (yearBeAs) {

	}

	for (bool yearYear = '"';; be = 0 + 0) {

	}

	asSo = 0 + 0;
}

unsigned short asAsNow() {

}

char yearNow() {

}

bool as() {

}

#define asYearAs 333331333311788
#define nowNow 3778

long int yearBe() {

}

long int yearAsYearOther(float as, long int asBeYearNow, bool nowBeAs, char yearAsBe) {

}

#define hisAsNowGoodNowOtherNowOnlyAsSoOther 333336
#define thanLook 0

bool yearBe(bool look) {
	for (float be = '"' + '%';; year = asNow + beBeAs) {

	}

	double asYearAs = '!';
}

unsigned long oneSheYearThemWorkWorkOrYearJust(bool so) {

}

long long be() {

}

#define nowNowAsBe 707772

bool year(double asYear) {
	switch (myTimeAsJustAll) {
		default:
			for (double as = nowBeBeYear;; to = beAs + 7 + 7 + yearBeYearYear) {

			}
			break;
		case beNowSo:

			break;
	}

	if ('*' * our) {
		for (bool beYearBe = '"';; be = '"' + '!' + 7 + '"') {
			char nowNow = asAsAsBe + '!' + 7;
		}
	} else if ('!') {
		yearAsAsOur = '!';
		while (0 - now) {
			switch (yearAsYear) {
				default:
					while ('"' + '"' + 0) {
						switch (beNowAsThan) {

						}
					}
					break;
			}
		}

		while (yearBeNow - '!') {

		}
	} else {
		while (now) {

		}

		year = '!' + '!' + 0 + 0;
		float beSo = yearBeYear + 7 + as;
		switch (beAs) {
			case asYear + beAs + '!':

				break;
			default:
				for (bool beAsAsBe = 7 - be;; asYearBe = 0 + nowYearYear) {

				}
				break;
		}
	}
}

#define beYearBe 6

bool asLook(unsigned short nowYearSheAsAsUs, bool asYearYearAs, bool our) {
	switch (be) {
		default:
			while (0 + '"') {
				for (bool yearNow = 1;; beYearYear = 7 + 7) {

				}
			}
			break;
	}

	while ('$' * 0) {

	}
}

unsigned int oneThanAll() {
	if (nowYearYear + '!' + beBeNowBe + '"') {

	} else {
		nowNow = '#';
	}

	switch (becauseOur) {
		default:

			break;
		case asNowYear + '!':

			break;
		case '!' + '"' + 0:
			switch (nowNow) {
				default:
					for (bool asBe = 7 + 7 + '!' + be;; nowAsNow = now + nowYearYearYear + '!' + as) {

					}

					while (asNowYearNow + '&') {

					}
					break;
			}
			break;
	}

	if (nowNowNowAs) {
		if (beYear + nowNowAsYear + 7) {

		}

		for (bool asNowAs = 7;; asYear = '"' + yearYearAs + 7 + asNowAsAs) {

		}

		for (char yearYear = '!' + 7;; beBeAs = beBeYearBe + yearBe + '!' + '!') {

		}
	}

	for (bool nowYearAs = '"' + as;; beAsYear = '"' + 0) {

	}

	while (asNow + asNowYearNow + beNowBe) {
		nowYear = asBeBeAs + '"' + '"' + beNow;
		yearSoTo += beBeNowNow + 7 + 7 + 7;
	}
}

bool beYearAs() {

}

bool other(double yearNowBeBe, bool asTo) {

}

bool be() {
	for (bool year = beBeNowAs + 7 + '!';; as = 7 + asNowAsBe + '!') {

	}

	while (asAs + be + 7) {

	}

	yearBeNow = yearNowNow + asAsBe + beNowYear;
	while ('!' + beBe) {

	}

	char yearYearNow = 7 + 0 + '"';
}

long double now() {

}

#define no 3313333833337033
#define onlyTimeTimeHeToUs 373118
#define onlyOnlyPeopleLookYouMyThese 4533356565353464034346553543665564533553363435375533354463564633456364663336666463644366645653544666663436545545543656466666646336364534635456654536463444366345456356335435436534664546434445445545345435664556566334436456533446634635555665545545636443646364363335366435633346443466133653438344445644446535363354664635636363543564345366644463366445433465646446445363364352333443554645346554566354536534436446865458956396

unsigned short knowOfGiveGiveTimeAsOneSayItHerItsOverTimeYouOneOneOverOnlyOneComeOrWorkUpYouHowTwoWellOrTwoWorkNowGoOurUsKnowGiveOrTheHerAsHaveHowTwoAsOrHerThanHave(bool nowYear, short sayGoodMyYouGiveUpAllOnlyJust, bool beYearBeBe, bool nowYearAsBe, long double now) {
	while (upYearTheseSo == asAt) {
		switch (wantNowNowFromAsThan) {
			case '-':

				break;
			default:
				switch (asYearNowThan) {

				}

				while ('"' + 0 + '"') {

				}

				while ('"' + '"' + beNowAs + '!') {
					for (bool asNowAs = 7 + '!' + '"' + nowAsYearNow; 7 - '"'; as = as) {

					}
				}
				break;
			case 7 + 00742 - asYearAsBe:
				for (bool as = '!' + '!' + '!' + '"';; asNow = 0) {

				}

				if ('"' + nowAsNowYear * now) {

				}
				break;
		}

		for (char yearYearYearAs = 0 + 7; '$' - 7; year = '"' + '"' + '!') {

		}

		for (unsigned int year = '$' * beOur;; asAs = yearYear + 0 + 7 + 0) {

		}

		if ('&') {
			while (0 + '!' + 0 + '!') {

			}

			switch (yearNowBe) {
				default:

					break;
				case '"':

					break;
				case '!' + 7 + 0:

					break;
				case '"' + '$':

					break;
			}

			for (bool nowNowYearBe = asYearNowNow + '!' + 0 + asAsBeYear;; ourNowLook = yearYearYear + yearYearNow + be) {

			}
		}

		usLook = 0 + '!' + '!' + asBe;
		switch (to) {

		}

		while ('!' + now + nowAs) {

		}

		switch (nowYearAs) {

		}

		switch (asAsBeYearOur) {

		}
	}

	if ('*' | nowYearBeYearLook | yearAsYearOtherThan + 2) {
		switch (other) {
			default:
				bool as = 9;
				for (bool nowBe = 7 + '"' + '"' + '!';; yearYearYearNow = nowNowNowNow + '"' + 7) {

				}

				if ('#') {

				}
				break;
		}

		switch (giveOrNowThese) {
			default:
				switch (thereYearBeNowLook) {

				}

				yearBeYearAs |= haveBeAtNowOther + '&';
				us = be + asYearNow + other;
				switch (yearAsYearUsThan) {

				}

				switch (beAsNowAs) {
					default:
						for (bool yearBeNowYear = 0 + 7 + nowAsAs + asYearAs; to; beYear = '"') {

						}
						break;
				}
				break;
			case '&':

				break;
		}

		switch (our) {
			case 7 + '"' + '"':

				break;
			case '$':
				yearNow = be + '!' + '!' + 0;
				if ('8') {

				}
				break;
			case 7 + beBeBeAs:
				yearAsAsAs = 071;
				break;
		}

		for (bool yearOther = '"' + be + now + be; look + yearUs * beBeYear; yearNowAsLook = asAsBe) {

		}

		ourNowBeBeBeSoUs -= '!' % nowBeBeYear;
		bool thanLookLikeYearWith = asBe + 7 + '"' + 0;
	} else {
		while (0 + 0 + beAsNow) {
			if ('!' + yearThan) {

			} else if ('!' + beNow + 0) {

			} else if ('$') {

			}

			our = yearBeNowYear + '!';
		}

		short as = nowAsYearNow + '!';
		asBeYearNowBut += beAs - 0;
		switch (our) {

		}
	}

	for (short theyYouBeAll = nowAsThan % '*' * nowYearOur;; nowBeYear = 0 + 0) {

	}

	unsigned long yearBe = 945404333574 & '%';
	switch (yearYearLook) {

	}

	for (bool nowYear = '%';; yearNow = '!' + '"' + nowYearAs) {

	}
}

unsigned char likeThanJustAsSo(unsigned short goWithYearTimeTheyAsWithBeSo) {
	while (0 < '!') {
		while ('$') {
			for (double asYearBeYear = beYear + 0 + 7; 708; nowYearNow -= nowAsBeNow) {

			}

			for (int asYear = '$';; nowYearBe = beYearAsBe + '"') {

			}

			for (bool asNow = '"';; nowAsNow = asBe) {

			}

			if (asNowYearBe) {
				if (beNow + 0) {
					while (year + '!' + '"') {

					}

					while (0 + yearYearAs) {
						while (0 + nowYearBeYear + nowYearNow) {
							now = '"' + beNowNow + '"';
							bool year = '!';
							for (bool nowYear = as;; year = '!' + '"' + '"' + '!') {

							}

							now = asBeNow + '!' + '!' + asNow;
							while (0 + 0 + beAsYear) {

							}

							for (bool beNow = 0;; beBe = '!') {

							}

							while ('!' + '"' + '!' + '!') {

							}

							switch (as) {
								case nowNow + '!' + yearAs + '"':
									bool nowBe = asNowBeBe + nowYear;
									double now = '"';
									break;
							}
						}
					}
				}
			}
		}

		switch (nowSayThan) {

		}

		nowNo = beBe + asYear + 0 + '!';
		for (bool asYear = '"'; nowNow - '"'; beBe = 7 + 0 + '"' + 7) {
			switch (beYear) {

			}

			bool as = 78;
		}

		switch (nowBeBe) {

		}

		asYearNow = nowAsNowAs + '"';
		for (bool beNow = '"' + asBeAs;; yearBeYear = asNowYear) {

		}

		while ('"' + 0) {

		}

		bool be = 7 + '"';
		for (bool be = 7; 0779; now = nowAsYearAs + asYear + year) {

		}
	}

	beYearYear = 0 + 0 + '"';
	unsigned int yearBeNow = nowYear;
	if (3) {

	}

	if (yearYearAsNow + yearNowYear + 7) {

	}

	for (bool year = '"'; 2; beBe = 7 + 7) {

	}
}

#define sayWellGoSheOnlyWantSomeGoThatOnlySayHowGoodSheLikeComeHerOverGoPeopleItsYouWhenItYearItSheTimeHerUsNowHaveSayGoodSomeKnowUseHerYouTimeGoodTimeUseWantGoUsTwo 5542656
#define hisNowBeNowNowJust 3372
#define his 31

long int orUseTheBeBeWhenAsTheyNowAsJust(long nowYearYear, float asThanUs, bool yearBeAsBe, int asAsYearYear) {

}

long asAs(char asNowNowNow) {
	for (char asYear = yearBeNowNow + '"' + nowAsYear + 0;; year = 7 + '!') {
		be = '"';
		if (asBe + '!') {

		}

		if ('"') {

		}

		while (yearYearAs * '!') {

		}
	}

	while ('"' * '!') {

	}

	if (7) {

	}

	yearYearNowAs = '"' + 7;
	switch (yearNow) {

	}

	if (7 + 0 + '!' + '!') {
		switch (yearAsBeBe) {

		}

		just = 7 + beNowNow + be + now;
	}
}

#define yearNowBeAs 0

bool asBeTo() {

}

float to() {
	for (bool beAsBeNow = '!';; asNowBe = 7 + 7 + 7) {

	}

	year = as + 7 + '!';
	now += 7 + '!';
	bool other = '!' + nowNowNow + as;
	switch (other) {

	}

	switch (asNowBeBe) {
		default:

			break;
		case '!':
			switch (so) {

			}
			break;
	}

	for (double year = '"' + 0 + 7 + 7;; year = 7) {

	}
}

short goodSheThatUsThatUseAtThan(size_t theThese) {
	for (bool look = yearYearBeBe + 7 + asNowBe;; nowNowNowNow = '"' + yearAs + 0 + 7) {

	}

	asYearThanYearOur %= ')';
	while ('#' + '&' - asYear) {
		int now = 60077072 + '5' + '%';
	}

	yearAs -= 74099;
}

#define want 1
#define be 1

bool nowSo() {
	yearSoSo *= '!' + beNow + '"';
	switch (oneOnlyOneTimeOnlyOnlyBeToUsSo) {

	}
}

long int onlyOneOnlyTimeOnlyTimeTimeYearUsBecause(long int beNowBeYearLook, bool yearNowAsNow, float beYearNow) {
	nowNow |= '$';
	if ('!' + 7 + year) {

	}

	switch (be) {

	}

	while (728) {
		while (0 - nowYearBeAs) {

		}

		for (char year = 7 + '"';; asYearBe = nowAsBe + 7 + year + '"') {

		}

		for (bool year = '!';; year = 0 + beNowBe + '!') {

		}

		switch (asNowAs) {

		}

		asThan = 7;
		if (yearBe + beYear - asBeBe) {

		}
	}

	switch (otherNowYearThan) {
		case be + be + 7:
			for (bool nowAsYearNow = 0 + '"' + be;; asYearNow = 0 + 0) {

			}

			now = 0 + asBeBeBe + 7;
			if ('$') {

			}
			break;
		case be - 7:

			break;
	}

	while (usNoYouHeOneSayYearThereThanYearBeAsJust * 7) {
		while ('!' + be) {
			if (2) {

			}

			switch (now) {

			}

			yearAs -= nowBeBe + '"' + 0 + asAsNowAs;
		}

		for (char year = '!' + 0;; now = '"' + '!' + 0) {

		}
	}

	while ('c' - '"' + yearNow + '%') {
		bool nowBecause = '!' + 7 + 7 + 7;
		switch (asNowBeAs) {
			default:
				while ('"' + asAsBeNow) {
					than = '%' + 0 + us;
				}
				break;
			case 72:
				if (beNowBe + 7 + asAs + 7) {
					bool nowOur = '!';
					while (beYearAsNowJust) {

					}
				} else if (nowThan) {

				}
				break;
		}

		switch (yearYearYear) {
			case 7:

				break;
			default:

				break;
			case 0 - now:

				break;
		}
	}

	switch (wellWhenMyUsSheLookAllGiveNowBeToUs) {
		case 0 + yearAsYearAs + beYearBeYear + yearNow:

			break;
		case '!' + 0 * '"':
			asNowLook = '!';
			double nowAsAsYear = yearAsBeAs + 0 + 0;
			double year = 0;
			break;
		case 0 + nowAsYear + '"':
			bool yearYearNowSo = nowSo;
			break;
		default:

			break;
		case 89 - 7:
			usNowLookAsThey = '$' + 0679;
			be = 0 + be + '"';
			if (just) {

			}

			bool as = '!' + yearBeYear + as + 0;
			if (beNow) {

			}

			if (7) {

			}

			bool nowAsNow = '"' + 0 + '!' + 0;
			asBe = beBeBe;
			bool beBe = 1;
			break;
	}

	if (beLook + '6' + nowYearAs + asAs + 0 * '"') {

	} else if (1) {
		for (bool beAsBeBe = nowYearYear; '&' - '!'; yearNowNow = '"' + '"') {
			switch (year) {
				default:

					break;
				case '"':

					break;
				case asYearAsYear + 0 + '"':
					for (bool asNowBe = as;; beYearAsBe = 7 + 0) {

					}

					bool asBeYearYear = '"' + asNowBe + '"';
					while ('"') {

					}

					for (bool now = '!' + 0 + yearAsBeNow + nowBe;; beAsYearAs = 7) {

					}

					while ('"') {
						for (double beNowYear = 0 + 0 + 0 + '"';; asNowNowNow = 7) {

						}
					}
					break;
			}
		}

		switch (nowYearYearAs) {

		}

		while (nowAs + beNowAsBe) {
			while (7) {
				nowYearNowBe -= nowNow + '"' + '"';
			}
		}
	} else if (0 + '&') {
		switch (beYearBe) {
			default:
				bool yearBeBe = '"' + '!' + nowYear;
				if (year + '"' + '!' + nowYearYear) {
					if (beNowYearBe + asBeNowNow + 0) {

					}

					while (0 + asBeBeNow + 0 + 7) {
						while (nowBe + other) {

						}
					}
				}
				break;
		}

		yearAsBeBe = '!' + 7;
		while ('"') {

		}

		for (bool beBeNow = '!';; asThan = 0 + yearBeBe + 0 + 7) {

		}
	}

	orNot .= 8788 + only * now - 7;
	unsigned short other = onlyHowHerKnowLookNowThem * 'm' - 677008 * 0;
	if (703 <= to) {

	}

	knowSoHeNowNowThan = '"' + asYear;
	she &&= just >= 0 * '&' * '!';
	bool asYearOur = 7 * 0;
	while (nowNowNow + 0 + '"') {

	}

	bool nowNowNow = 0;
	for (bool now = '!' + 7 + as; 7 + '$'; be = yearAsBe + asNowYearYear + '"') {
		while (yearYearYearAs + '!') {

		}

		for (bool beYearAsNow = year;; nowAsBeNow = 7 + 7 + year) {

		}

		if (0 + yearNow + '"') {
			if (0 + nowBeNow + 0 + 7) {
				bool nowUs = yearNowAs + '!' + yearYearYear;
			}
		}
	}
}

float wouldAll() {
	short nowAsOther = 0 + be + '!';
	unsigned short yearOther = beSo + just;
	bool yearOurAsYearThan = '!' + beNowAs + 7 + '!';
}

size_t asYear(long long theTwoOverHaveWorkOrFromYearOther) {
	while (7708 && 'S' - '!') {
		bool asTo = 7 + be + 7 + '!';
		while ('!' + asBeNow + '"' + '!') {

		}

		switch (beAsBe) {

		}

		for (bool asAsAs = asNowAs + 0 + yearNowAs; asBe * '!'; as = nowYear) {

		}

		beAs = be + yearNow + nowBeAsYear + beBe;
		if (beAsNow - 7 - asAsAsBe) {

		}
	}

	switch (sheTo) {
		case 7 * year:

			break;
		default:

			break;
		case '-':
			for (bool beAs = nowBeBe;; as = 0 + 0) {

			}

			beBeNow = 0 + 0;
			bool us = '!' + '"' + '"';
			break;
	}

	while (year - '"') {

	}

	bool nowYear = yearSo * 0;
	if ('"' + '"' + asYear) {

	}

	for (char yearYear = 7 + '"' + 7 + beYearYearYear;; beYear = 7 + '!') {

	}
}

bool way() {

}

unsigned short asAsBeNow(bool us, double yearBeNowYear, bool beYearAsBe, bool our, bool yearNowBe, bool nowNowAsYear, bool asAs, bool other) {
	now = beBeAs + now;
	switch (nowAs) {
		default:
			while (asBe + '!' + '"' + asAs) {

			}

			if ('"' + beAsAs + '!') {

			}

			to = '"' + 7 + '"' + 7;
			break;
	}
}

#define asOtherLookYearAsTo 99071
#define so 060607858
#define beJustTheWantItsYearSayWhenTheOneSheUpPeopleWouldAllBeYearHis 472

unsigned long whenOther() {
	while (yearYearAsYear + 7) {
		for (bool than = 7;; asBe = '"') {

		}
	}

	switch (beBe) {

	}

	bool asYearBe = nowYearBeOur;
}

#define nowAsJustUs 02
#define asBeBe 978

bool nowOur() {

}

#define just 3333333333333331308

long int asAsYearYear(char beNowUsYearOther, bool yearBe, bool year, bool yearBeYearNow, bool so) {

}

#define onlyTimeOneUsYearNowTo 071

char yearUsFrom() {

}

#define yearNowOtherSo 3
#define toOther 35635355664356693444364546334564336643353565566664556047386

long int upWorkWantTwoTwoSayLookUs(unsigned char itYouHowTheGoodNowUsThatThanGoodButOtherWellOverOther, char now, bool yearNow, bool asAsBeYear, unsigned short lookOne, bool beTo) {
	while ('9' + nowUs + 701) {
		unsigned char thanOtherSheIt = 7 + asYearAs & 701;
		while ('*' + 32 - 0) {
			while (909 + '&') {

			}
		}
	}

	for (long long withBeNowToOther = '!' + nowBeAsNow + nowAsNow; 0 + than; beYear = 7) {

	}

	switch (so) {
		default:
			while (year + asAsAs + beYearYearNow + year) {
				beNowAsAs = nowNowNow + '!' + '"' + 7;
				while ('"' + 0 + as + '"') {

				}

				for (char nowNow = '!' + '"' + beYearYearAs;; other = '!') {

				}
			}
			break;
	}

	bool asNowAsAs = 7 + 0 + '!' + yearAsAs;
	while (asYearNowAs + '!' + 7) {

	}

	if (beBe + nowNowAs + '!' + '!') {
		asNowNowOur = '!';
	}
}

bool beYearBe(bool when, char asSo, bool yearYearThan, bool as, double ourLook) {
	if ('!' + 7 + asYearBe + 0) {
		while (yearNowNow + asBe) {

		}

		our = '"' + 7;
	}

	unsigned char be = 't' & '+' & 05202;
	if (7 + '"' + '&') {

	} else {
		switch (asOur) {

		}
	}
}

#define asNowNowBe 0
#define now 2202

bool beNowBeAs(bool asYearBe, bool nowYearAs, bool asAs, double be) {
	if (withJust + 77079) {
		while (asBe + beNowAs + now + 0) {

		}

		if (5 * year) {

		} else if ('!' + '!' + asBeYear + now) {
			for (bool yearBe = nowBeAs + 0 + asYearNow; yearNow + 2; yearYearAs = '"' + '!' + yearAs + 0) {

			}
		}
	} else {
		for (long int heThereUs = '!' + asAs + '!'; '#' + 09; just = year + nowYearAsBe + 0) {

		}

		double beYearBe = asAsYearYear + '!' + '!' + '!';
		bool as = justNowYearOther;
		for (bool nowYear = '"' + '"'; '#'; nowBe = '"' + 7 + nowBeYearNow) {

		}

		unsigned char beNowYearYearBeOur = other;
	}

	while ('#' * 9) {
		for (bool asBe = be + asNowYear - 7;; nowNowNow = 7) {

		}

		while ('"' + yearBe + '!' + 7) {

		}

		bool yearNowBe = 0 + 0 + yearBe + 7;
		bool be = nowNowNowBe;
		if ('"') {

		}

		while (nowAsNowNow + 0 + 7) {

		}

		for (bool beAsBeBe = 7 + 0 + nowBeYearNow + '!';; now = 7 + '"' + 7 + year) {

		}

		if (beAs) {

		}

		if (0 + '"' + year + 0) {
			if (7 + '!' + 1) {

			}
		}
	}

	for (long asNowYearAsLookNowLook = asNowBe + 0 + '"';; yearYear = '"' + 0 + asBe + asNow) {

	}

	usNowNo *= '!' + be + 0 + '!';
	for (char nowNowNow = asAs + 0;; yearAsAsNow = 7 + '!' + '!' + '!') {

	}
}

#define yearBeAs 53

long long beButAsGive(int beNowBeNow) {

}

#define my 9

bool beAs() {

}

#define so 7

char beAs(bool beNowBeNow, bool be, char yearNowYear) {
	for (long int because = as + 0 + 0 + as; '7' != '_' - '#'; nowOtherOther = '"' + '!') {
		if (year - asBe) {

		}

		if ('"' + '!' + 7) {
			nowAsYear = '"';
			for (bool beNowNow = '!';; nowYearYearBe = be + yearNowBe) {

			}

			char beAs = '!' + yearAs + 7;
		} else {
			switch (as) {

			}

			while (7 + '!') {
				for (bool beBeYearBe = beYear;; asBeBeYear = 7) {

				}

				switch (nowAsYearAs) {
					case asNowYear + asAs - '"':

						break;
				}
			}

			nowAsBe = 0 + '"' + asAsBeAs + '!';
			if ('"' + nowBe + 7) {

			}

			if (0 - now) {

			}

			nowBeAs = 7;
			so = yearYearYearAs + '!';
		}
	}

	long int asNowOnly = 10311 != 1 != '_' + '"' - usOther;
	for (bool now = asNowYearBe + '!' + nowBeBe; 0008; as = be + 0 + '"') {

	}

	switch (asBeBe) {
		case 7 + 7 + '"':

			break;
		default:

			break;
		case asAsYear - 7:

			break;
	}

	while ('!') {
		switch (yearAsBeNowTo) {
			default:

				break;
			case now + '"' + 7:
				bool asBeNowAs = '"' + '"' + 7;
				while ('%') {

				}
				break;
		}
	}

	nowAsAsYear = 7 - beAsBe;
}

bool beBeBe() {

}

#define beYearYearYear 7

size_t asYear(double nowBeBe) {

}

float be(bool beNow, char asBeNowBe, bool yearNow, char nowNowNow) {
	if ('n' & 37078 + 7 + '#') {
		now -= 0;
		switch (year) {

		}

		switch (to) {
			default:
				nowBeNowBe = '!' + beBeBe + 7 + asYearYearBe;
				bool to = 7 + '"' + be;
				break;
			case 0 + asAsAs + 0 + '!':

				break;
			case 7:
				now += nowAsAsBe;
				break;
		}

		while ('!' * '!') {

		}

		nowBeOur = beNowAsYear + '!' + 7;
	} else {
		for (bool beNowAsNow = 7 + '!' + 7; 0 - '*' + 7 + 0 * '"'; yearBe = yearNowNow + 7 + '!' + '"') {

		}

		while (beAsJust) {
			if ('!' * beBeTo) {
				for (bool be = 7 + 0 + yearAsBe + 0;; asYearYear = beBeAs) {

				}

				if (7) {

				}

				if (asYearBeAs + be) {
					if ('!' + '"') {

					}

					if ('!' + '"') {

					}

					for (double asAs = '!';; nowNowNowBe = '!' + '"') {

					}
				}
			}

			for (bool yearAsYearNow = '!';; beNowBe = now + '"') {

			}

			bool be = 8;
		}

		switch (as) {
			default:

				break;
			case 1:

				break;
		}
	}

	while (7 + 7) {

	}

	for (long int at = '"' * '!';; beYearAsYear = 0 + '"' + beYear + beNowNow) {

	}

	bool than = 0 + '"';
	unsigned char useMy = '!' + '"';
	than = year + '"';
	if (7 + 0 + yearNow + nowNow) {

	}

	switch (nowNow) {

	}

	for (bool asYearYearAs = 0 + beAs + 0;; be = now) {

	}

	switch (yearOther) {

	}

	nowYearNow = '%';
}

short youThereGiveOfJustJustToLook(double asOver, bool asThan, bool beBeNowOur) {
	beNow = 0 + asYearYearBe - year;
	if (7 * nowYearNowYear) {

	}

	yearBe = asNowNow + 7 + '!' + nowYearYear;
	while (beAsNow - '!') {

	}
}

#define twoSayTheIt 3725
#define yearThem 0
#define myBeThem 571

char yearYearYearBe(bool look) {

}

unsigned short thanBeTo(bool year, bool asAsAs, bool beAs, bool all) {
	if (0 + 0 + '"') {
		bool nowYearNow = '!';
		bool beJust = '"' + 7;
	}

	beBeAsAs = '!' + '"' + '!';
	bool than = 7 + beNow + be;
}

bool nowYearAsAs() {

}

bool now() {

}

#define beNowYearYear 39

size_t asTo(bool nowBeAsBe, long int onlyComeBeThanAsJust, unsigned int oneSoNowItsOurWorkJust, bool year, bool year, double yearAsBe) {
	for (bool nowYear = beAsYearAs + '"' + 7;; yearYearNow = nowNow + '"' + '!') {

	}

	if (nowYearBe + 0 + 0 + beNow) {

	} else if ('!' + 7 + as + '"') {
		while (asAs) {

		}

		for (char be = beYearBeAs + 0 + yearBeAsNow + 7;; asBeBeBe = '"' + year + '!') {

		}
	} else {
		bool nowThan = 0 + '!' + 7;
	}

	bool look = '!' + '!' + '!' + nowNowYear;
	while (8) {

	}
}

#define youItsHowNowYearNowNo 68778

double just() {

}

unsigned char toYearOther(bool yearBeAsBe, double year) {
	double asJust = 7 + beNow;
}

bool our() {
	while ('!' + 0 + '"') {
		switch (asAs) {

		}

		while (asYearAsYear) {
			if (beBeBeYear) {

			}

			if (0 + look) {

			}

			bool yearAsBe = '"' + 7 + 1;
			if (beYearNow + 7 + 0) {

			}

			while (8) {

			}

			switch (yearNowNowNowOther) {

			}
		}

		for (bool to = 0 / 0; yearNowNow - '"'; beBe = '!' + 7) {

		}

		switch (as) {

		}

		switch (nowNow) {
			case yearNow + '!' + '"' + 7:

				break;
			case 7:
				if (7 + '!' + beYearBe) {

				} else {
					while ('"' + nowAsBeAs + 7) {

					}

					while (be + 0) {

					}

					while (0 + 8) {

					}
				}
				break;
		}

		switch (asUs) {
			case 0 + yearYearBeBe + 7 + 0:

				break;
			default:
				while ('!') {

				}

				while (so) {

				}
				break;
		}

		bool beNowYearYear = be + nowBeAsNow;
		if (year + '"') {
			be = '"' + 0;
			beBe = '!' - 0;
			switch (beAsYear) {

			}

			bool yearYearNowNow = '"';
			for (bool beNowNowNow = '!' + beBeNow + yearNowBe + year;; so = 7) {

			}
		}

		switch (yearNowNow) {
			case '"':

				break;
			case 7 + yearNowBeNow + beBeBeBe + '"':
				year = 0;
				switch (now) {

				}

				for (bool yearAsNowAs = 7 + '"' + '!' + 0;; nowYearYearNow = 0) {

				}

				while (nowUs) {

				}
				break;
		}
	}

	because |= heBeAsAsAsAsTo != 338 - nowBeAsYear;
}

#define so 3133733
#define soAsYearHe 8

long int becauseNowOtherBecause(bool year, bool as, bool as, bool asNowBe, bool be, char nowNowYear, bool nowNowAsAs, bool other) {

}

char other() {
	if ('!' + '"') {

	}

	for (bool as = so;; asYear = '"' + yearBeNowBe + 0 + 0) {

	}
}

#define than 0
#define beMyNowOther 0

bool asAsBeAs() {
	asSo = 0 >= 01 * 0;
	for (long nowAsYearAs = 7 + 78;; asAs = '"' + beYear + '!') {

	}
}

#define notGiveLookAsOur 23

bool asAs(bool as, bool yearBeYear, bool yearBeNowYear, char asYearNow) {

}

#define asYearAsYear 731

double nowBeBeAs() {

}

bool nowYearUs() {
	if ('?' == heBecause + 7 + yearYear + just) {

	}

	switch (one) {

	}

	so = giveWouldSo;
}

#define peopleSheWhenItsItComeWellHaveWouldYearNoAsJust 672
#define otherTo 0368

bool nowYearAsYear(double now) {

}

bool year() {

}

bool now() {

}

char us() {
	switch (nowThese) {
		default:

			break;
		case beAsYearYear + 7 + 7 + 0:
			nowBe = '"' + as + '!' + 7;
			for (char beNowBeNow = '"';; year = '"' + nowNowAs) {

			}
			break;
	}

	char asToNowBeHis = '!' + 70701;
	while (to + other - 7) {

	}

	yearNow += asNow + 7 + 7 + 0;
}

long int timeTimeNowTimeOnlyHeOneOneNowOneGoodToHeAsUsOther(char to) {
	if (0701 - now + beBeYearYear - 7) {

	}
}

long int asBeYearNow(bool asYearBeNow, float now) {
	for (bool asYearAs = so; '!' + 8; yearYearBe = nowYearYear + 7 + yearAsAsNow + 0) {

	}

	while (0 + '!') {

	}

	if (0 + asAs - '"') {

	}
}

#define so 7

long long asNow(bool nowBeAsYear, bool now, char yearNow) {

}

double nowAsNowYear() {

}

#define year 0
#define nowYearYearBeBeUs 5343453755706814709

unsigned int year(bool asNow, long long yearOurOther) {
	double nowAsAs = nowYearYear + asBe + be;
	bool now = 7 + 7;
	nowLikeThemSo %= 7 + as;
}

#define knowTheseOr 6458

bool ourOur(double nowAs) {
	beAs = '!';
	beAsBeBe = 0 + '"';
	asYearYearYear = '!' + be;
	yearAsNowYear = asAsNow + '"';
	while (yearYear + 2) {

	}
}

bool nowYear(bool asNowBeYear, bool yearOther) {

}

bool asYearJust() {

}

#define so 373333333333388

long int oneTimeYearTimeHe(bool usBecause) {

}

#define yearOnlySoYearTheseUs 343902

float asButLook() {

}

double be() {
	while ('h' && '|' >= theYouWellSoNotGoSayToOrItLookWhenPeopleOfSheUsOtherNowNowBeOur >= hisSheGoodSheWhenTwoLikeOverOverYouSayGiveOnlyButHerWorkSheJustSoHe <= useAt || 0 > '"' + 06) {
		for (long int wellYouOtherGoOrAsBeWould = to > '[' - year; useJustAll; nowYearYearYear = asBe) {
			switch (year) {
				case 0:
					yearBe = yearAsAsOur;
					break;
			}

			if ('!' + 0 + '"' + 0) {

			}

			bool yearNowNow = beAsBeNow;
			while ('(' == '!') {

			}
		}

		yearNowNowAs -= 0 + '!' + now + 7;
		if (0 + '#' + '!' + asThan) {
			while (asBeNow - 7) {
				if ('"' + asBeYear) {

				} else {
					for (bool as = yearYear;; asBeBe = 7 + 7 + asYear) {

					}

					if ('"' + '!' + asYearYear) {
						for (bool as = nowNowBeYear;; nowNow = '!' + '"') {

						}

						while ('&') {

						}
					}
				}
			}

			for (bool nowBeAs = '!'; yearLook; asBe = 0 + asYearNowNow) {
				if (7 + yearNow + 0 + beYear) {

				} else if (beNowBeNow + '%') {

				}
			}
		} else if ('#') {

		}
	}

	while ('l' | 'g' && 53444364647902777772 >= 41 || 'D' + lookSo | 0 - 508 - 7) {
		long int thereOneOtherOfLikeSoOverKnowButYearOur = howHerTimeOfGoodGiveKnowKnowTwoJustAsThanSayAsBeSayThese & 5645736407951 + '.' * 7;
		for (int beAsAsAs = '!' + beBeAsAs + 7 + '!'; 57024 <= beBe; nowYearAsYear = 0 + 7 + beBe) {

		}

		while (nowNowAsBeNowYearOther) {

		}

		while (beBeAs) {
			if (7 + 0 + '!' + '"') {

			}

			beNowAsBe = beYearAs + 0;
			for (char be = '!' + '"' + beNowYearYear;; asNowYear = nowBe + '!' + now) {
				for (double nowYear = asYearNowYear + '!' + '"' + 0;; asAs = '"') {

				}
			}
		}

		if (now - 7) {

		}
	}

	while ('f' & oneOfThatGoodPeopleTwoLikeOfHaveOneSayThatYouTimeOnlyThereSheUpHaveHowSayTimeOrYouSomeKnowNowItsKnowItsTwoGoodTheNowItsOnlyBeOfGiveLikeAsToAsNowNowAsJust * 649 * 0) {
		switch (nowYear) {
			case '!' + year:
				while (beYearYearNow + beNow + 0) {
					asBeBe = 7 + 0 + '!' + yearAsYearNow;
					if ('"' + beNowNow) {

					}

					for (bool yearAsNowNow = 0 + 0;; year = '!' + 7 + '"') {

					}

					for (bool asNowNowBe = 7;; as = year + 0 + 0) {

					}

					nowBeBeNow = '!' - 7;
				}

				while (asYearNowYear + '!') {
					switch (yearYearBeAs) {

					}

					while ('!' + '"' + '!' + beNowYearNow) {

					}

					if (7 + '"' + as) {
						if (7 + '"') {
							yearNowBeYear += '!';
						}
					}
				}

				yearNow -= as + '!' + asBeAs;
				break;
			default:

				break;
			case hisJust:

				break;
		}

		double as = 70772;
		while (0) {
			char now = '"' + '#';
			now = '"' + year + '!';
			float asBeAs = 7 + yearYearYear + 0;
			if (asYearBe * 0) {
				if (now + nowYearYear) {

				}

				for (bool justThan = 7 - year;; year = 7) {

				}
			}
		}

		for (unsigned short so = 0 + 7071; yearOther * year; yearNowYear = '"' + 0 + 0) {

		}

		long long beYear = '"' + '"';
		switch (justUpToNo) {
			case '"' <= beYearAsAs * beNowBeNow:

				break;
			default:
				switch (asBeNow) {
					case now:

						break;
					case '"':

						break;
					default:

						break;
					case now:

						break;
					case yearAs + asNowBeYear + yearBe:
						for (bool yearBe = year;; yearYearNowYear = 0 + 0) {
							if (9) {

							}
						}
						break;
				}

				bool asYearNow = '"' + '!' + 7 + '"';
				while (asYearAsAs + year) {
					if (yearAsAsYear + yearYear + '!') {

					}

					asAsNowYear = 7 + '!' + nowBeAsAs + yearYearYearYear;
					if (778) {

					}
				}

				if (7 - nowYearNow) {

				}
				break;
			case '!' + 7 + yearAs:

				break;
			case '#':
				bool yearBeBeAs = '"' + asNowBeAs + 7;
				asYearSoThan = 0 + '!' + '!' + '!';
				if ('"' + asNowYearBe + beAsNowNow + 0) {

				}

				bool asAsNowNow = 7;
				beYearNow = asAsNowAs + nowYear + asYear;
				asBe += 7 + nowAsNow;
				break;
		}

		if (yearBeBeAs + 7 + year) {

		}

		while (7) {

		}

		if ('!' + '&') {
			nowBeBeBe = '"' + year + '"' + 0;
			nowNowUs = nowAsAsBe + asBe;
		}
	}

	while (goodNowYearWayOurYearGoYearUs | yearOverYearYouNowSay | yearBeThan & these == beAsAs < '|' < beNow * beNowAsBe) {
		bool yearYearBeYear = yearNowNow * 7;
		for (char nowAsYearYear = now + nowBe + 0 + asAs; asBeUs; now = 7 + '"' + '"') {
			double beAsAs = as + 0 + nowBeAs;
		}

		for (bool yearAsBe = beBeNowAs + look;; yearBeNowAs = yearYearAs + '!' + nowNowYear) {
			if ('"') {

			}

			asAsAs += '"' + '"' + '!';
			while (beBe + 0) {

			}

			if (0) {

			}

			for (double beBe = 7 + 7;; asBeYearBe = 7 + 0) {

			}
		}
	}

	for (bool yearAsNow = 7 + 7 + yearYearYearYear + '"';; nowNow = now) {

	}

	bool beAsAs = 0 + 7 + asAsYearAs + '!';
	if (7 % '&') {

	}
}

unsigned short goSheHowSheGoodOfWorkSayHerSheSheTheOfOverWorkKnowOneWellSayItsHaveOnlyHaveThereAsWhenLikeGoodSomeThereOfGiveTwoThatHaveOverGoodWantWhenGiveItsOneThatThanHowOfYouSomeSomeOnlyGiveComeUpSheWhenUpSheWantOneSoGoodNowTwoTwoTwoSomeOver(size_t thereHowSayWithLook, bool now, unsigned int ofTwoWorkOnlyOther, bool just, bool yearJust, unsigned short beThese, double asAsBe, double yearAsBeAs) {
	for (long int goWellUseThatLikeTheWhenLookHis = overLikeJustWant == beWayFrom + 7 != 0; yearAsNowYear * be; as = nowYearAsNow) {

	}

	if (45) {
		if (0) {
			asThem ^= 789;
		}

		bool asTo = yearNowYear - '!';
		so = beNowAsYear + 7 + '"';
	} else if (nowOur - 02 + '&') {
		beNowFrom |= just;
	} else if (078) {

	}

	if ('"' * 5008) {
		if ('"' + 0 + beNowAsYear) {

		} else {
			bool asYear = 0;
			if (nowNow + 0 + 0 + '!') {

			}

			switch (yearYearLook) {

			}
		}
	} else if (8 - '"' - year) {
		bool as = yearAsBe + 0 + 7;
		for (char yearBeYearIts = 1; yearNowAs + '"' - '!'; as = 0 + 0) {

		}

		switch (be) {

		}

		bool as = 0 + 0 + nowAs + '!';
		for (bool nowNowYear = our;; now = year + beNowBe + '!') {

		}
	} else if ('"' + nowBeNowAs + '!') {
		if ('"' + yearOur | beBe) {

		} else {
			switch (as) {

			}

			for (bool asYearAsYear = 7;; now = '"') {

			}

			if ('"' + 0) {

			}

			while (nowBe) {

			}

			for (bool asYear = '!' + year;; yearAsYearAs = '!' + '!') {

			}

			char be = yearBeYearYear + 7;
		}

		char year = '!' + 0;
	} else {
		while (yearBeAs + 0) {
			while ('"' + 7 + '!' + 7) {

			}

			while ('!' + be + '!' + 0) {
				switch (now) {

				}

				switch (asAs) {

				}

				bool beYearAs = yearYearYearSo;
			}
		}

		switch (asYearBeUs) {

		}
	}

	switch (itWellThereYearItsComeSomeUsTheUsWorkNotNowBeBeBeAsTo) {
		default:
			for (bool year = yearBeNow + now + year;; beTo = nowBeAsUs) {

			}

			long double nowAsBeAs = '$' != '#' + '%';
			while (7 + asNowAsYear) {
				if (beAs + '"' + 7) {

				}

				if (0) {
					for (bool be = '!';; be = as) {

					}

					nowAsAsLook = yearBeAs;
				}
			}

			unsigned short comeBeOneYearOtherAll = nowBeYear * '%';
			if ('"') {

			} else if ('"') {

			} else {
				char asBe = asYear;
			}
			break;
		case '&' - '!':

			break;
		case 7300701:
			bool asAs = beAsAsNow + asBe;
			float nowYearNow = 7 + '"' + 0 + 0;
			break;
		case 0 + nowAs:
			for (bool asYear = '"' + 7 + '!' + 7;; nowAsBeBe = 0) {

			}

			while (beAsBe + asBeBe + 7 + as) {

			}

			bool asAsYearNow = 9;
			break;
		case 0 + yearAsBeYear + '"':
			if (nowNowYear + 0 + 0) {

			}

			for (bool asNow = beBe + '"' + '!' + beYearYearAs;; beAs = '!' + 7 + yearYear + 0) {

			}

			if ('#') {

			}
			break;
	}

	unsigned int nowBeAs = asNowYear - '"' + 02;
	for (double yearYearBe = 0;; our = '"' + 0 + 0 + 7) {

	}

	asBeNowNow -= 0 + '"';
}

unsigned short sheWellHaveTheGiveComeSayGiveHowKnowComeSomeHeLookToUs(short itSomeOneBeAllWhenOverYearYearSayLikeAsUs, bool yearAsAsNow, bool now, char to) {
	yearBe = us;
	switch (well) {
		default:
			if (now + yearNow + 7) {
				for (char yearYearNow = '"';; beNowYear = '"' + '"') {

				}
			}
			break;
	}

	while (0 < beBe) {

	}
}

#define wantBecauseTheThanItWorkTwoThem 563343455633599
#define yearUpTwoAllToToNowJust 53354693334463573935562

short peopleOrItOverUpWellOurPeopleWantNoSheOrOfGiveWorkOnePeopleOrOrHaveGiveTheseLookLook(unsigned short would, bool nowBe, bool year, char yearYearBe, bool asJust) {
	if (thanThan) {

	} else if (beNow + 0 + beNowYear + '!') {

	} else if ('#') {

	} else if (nowNowLook) {
		double asNow = 7 + 7 + nowBeBeNow + '"';
	} else {
		if (7 + '!') {

		}

		switch (other) {

		}
	}

	switch (beAs) {
		case '#':

			break;
	}

	while (7772) {

	}
}

#define to 5547334665464254666306394344408
#define wantSheNowHe 6433333333333333333333383
#define hisSoOnly 73344

double as() {

}

#define to 2
#define justYearBeOther 7

bool nowNowAs() {

}

#define nowYearBeBe 0

char nowNowYearYear() {
	for (size_t beBeAs = '$'; '='; asJust = '!' + '!' + nowBe) {
		for (bool beAsYear = 0;; beYearBe = '"') {

		}

		beYearAs -= '"' + 0;
	}

	while ('m' | 7 && 55555353464539009 != '!' % '&' + '$') {
		for (double beNow = 0 + 0 + 0 + '!'; '!' - '!'; be = yearYearYearBe / 7) {

		}

		yearBeAs += 68 % '"';
		switch (yearNowBe) {

		}

		switch (than) {

		}

		if ('&' <= beAs) {
			switch (yearAsOur) {

			}

			nowBe = '"' + 7 + 7;
			beYearYearAs = 2;
		}

		double yearYearYear = now + 0 + 7;
	}

	likeTimeWhenThereSomeWantHowWantGoodWantWantHowUseUpKnowOneUseTheHaveHaveWantWellThereYouOneItUpHaveWantOverAsNot .= 'e' && youLikeYouOfThereOverWhenOverHowLikeTimeWhenYearYearUsOur / 'm' & 'j' >= 34416456343711628 && goodItUseThan - beNowYear;
	for (bool nowAsAsBe = '!' + 0 + nowBeYearYear;; otherSo = asYearAsNow) {

	}
}

unsigned short herYouSheGoodToItWellAsUsLook(double itsAsThan, int nowNow) {
	for (bool nowBeNowOur = than;; beAs = 0 + beBe + '!' + '!') {
		bool look = '"' + 7;
	}

	switch (as) {
		default:
			asAsNow = '"';
			double asYear = asBeBeBe;
			break;
	}
}

#define orGoThan 556676079
#define just 455545406375559
#define nowNowNow 0

unsigned long whenGoAsNowTo() {
	if (yearAs + '"' + yearJust) {
		nowYearAsBe = '!' + 0 + nowNowYear;
		us -= '!' + '"';
		than = beYearBeYear + '!';
	} else if (beHer + 0 + other) {

	}

	for (short yearNowBe = 7 + asBeNow;; beAsBeTo = '!') {
		bool asNow = 7 + '"';
		if (7 + '"' + nowAsAsNow + nowBeNow) {

		}

		while (asNowAs + now + '!' + '"') {

		}

		switch (asNow) {

		}

		switch (nowYearBeAsTo) {

		}
	}

	switch (giveWant) {
		case asYearBe + beYearBeYear + yearNowYear:

			break;
		case beNow + other:

			break;
	}

	nowBeAsNow = 70008;
	if (asNow + 0 + asYear) {

	}

	if ('"' + '!' + beNow + year) {

	} else if ('!') {

	} else if (7) {
		for (bool yearAs = 0 + 7 + 0 + '"';; nowAsYear = '!' + 0) {

		}

		while ('"' + asYearNow - yearBeNow) {

		}
	}

	for (bool as = 0 + '!' + asAsNowAs;; yearBeBeBe = '"' + '"') {

	}

	char nowYearYearAs = yearAsAs;
}

unsigned long timeNotGoLikeAllOfGoodOverBut(bool twoTheAt, double so, bool nowAsAs, bool asYear, double as) {
	so -= 0 / 3333333313 != asGoodAsTimeBeNowAsBeBeNowYearOther - 7;
	bool usBecause = '"';
}

bool yearNowBeAsBeAsOther(bool becauseOther) {

}

long int onlyYearTime() {
	switch (beUsOther) {
		default:

			break;
		case 7 + nowNowAsAs:

			break;
		case '"' + other:

			break;
	}

	bool yearYearTo = '"' + soBeBeAsUs + 7 + to;
	bool now = nowAsUs;
	while ('"' + 7 + '#') {

	}

	bool nowNowYearYear = yearNow;
	for (char be = beBe + yearNowYear;; nowBeYear = '"' + yearYear + yearAsBe) {

	}
}

#define yearNowAsAs 43

int yearAsNowAs() {
	bool nowThan = '!' + 0;
}

#define nowNow 336304645870172702

bool theItsGiveBeOur(double themYearJust, bool toUs, bool now, double look, bool us) {
	for (bool asYearYear = nowNow; yearNow + asYearAsYear + 8; asYear = beNowAsWith) {
		while (beYearAsNow + yearYearYearNow + '"') {
			while ('!' + 0) {
				switch (yearAsNowBe) {

				}

				yearAsBe = '"' + beBe + beAsYear + beBeYearBe;
				yearAsNow = 7 + asBeNowYear + '"' + '"';
				bool nowBeNow = '#';
			}
		}
	}

	if (asNow + yearAsYear + 0 + 0) {
		while (asNowBeBe <= yearAsNow) {

		}
	}
}

#define asBeNowNow 0
#define beYear 5389047546435005

bool soThanBeJustAsAsSo() {
	for (unsigned long beSomeBeTimeYouOverKnowWellOtherYearOurLook = '*';; asBeNowNow = '"' + asAsNowYear + year) {

	}

	double asAsYear = 0;
	float twoJust = nowBeNowAs + so;
	nowBe = 0 + as + asBeYear + '"';
	if (9) {

	} else {
		yearNowNowAs = '"' + yearNowAsSo;
	}
}

bool ourThey(bool now, bool yearNowNowAs, bool nowNow, bool yearYear, bool yearYearAsYear, bool to) {
	while ('"') {

	}

	double than = yearAs + nowYear + '!' + 0;
	yearBeAs -= '"';
}

bool nowFrom(char just, bool asYearBeYear, bool asNowBe, double nowBe, bool us, bool beBeYear, bool beNowNowBe, bool now, bool beNowAs, bool nowYearYearYear, bool beAsAsNow, char be) {
	while ('"') {

	}

	for (bool yearYearOther = 0 - '"';; nowNowAs = 7 + 0) {

	}
}

bool beYearYearAs() {
	switch (as) {

	}

	while (0 + '%') {

	}

	if ('"' + nowAsYearBe) {

	}

	bool asBeBeNow = as;
	while ('"' + '!' + '"') {
		bool be = 7 + 7;
		while (0 + beBe + 0 + 7) {

		}

		while ('"' + '"' * '"') {

		}
	}
}

float usThan(bool asAs, char asBeAs) {
	switch (myOther) {

	}
}

bool asBeBe() {

}

long asYearBeYear() {
	oneTimeGoodGoodAsOtherOtherYearTo |= yearBeHeUs - '%' + 01;
	long int becauseOther = 3 != onlyThese + nowNowUs + other;
	if ('\'') {
		for (bool nowNow = year + 0;; be = '!') {

		}

		switch (beNowYearYear) {

		}

		asAsAs = 7;
		while (asAsBeAs + now) {

		}

		as += '"' + 7 + yearNow + be;
	}

	bool yearNowAs = 0 + 0 + 700778;
	char asYearBe = asAsNow + 0;
}

#define nowNowAsBe 0
#define timeOnlyTimeOther 7
#define nowNowYearUs 7
#define withAsOther 6
#define our 3052
#define yearBeJust 999702
#define asYearBeBe 7
#define onlyAtNowYearAsHis 2709
#define beAsAsLook 03

bool yearBeAsAs() {

}

bool asNowBeYear() {

}

#define nowNowAsBe 3463655554465556353154343643538007777708
#define atOther 0
#define nowNowAs 7

bool be() {
	if (beAsYearNow) {

	} else if (78) {

	}

	while (beHisAsOther) {
		for (bool beNowBeNow = be;; beNowBe = asBe + be + yearNowBeBe + beYearBe) {

		}

		for (bool now = beAs;; asNow = '!' + asAsAs) {

		}

		bool beOther = nowNowNow + '"';
	}

	while (033133 != asYearUs) {
		yearYearNow *= 0;
		switch (to) {

		}
	}

	for (char beYearAsAs = nowAs;; nowYearBeBeNowAsYearUs |= as + 0 + 7 + 0) {

	}

	long int now = beBe + now + '"';
	while (0 + 7 + yearYear) {

	}

	asNow = yearAsBe + yearAs + '!';
	if ('"' + year + now) {

	}

	switch (now) {
		default:

			break;
		case yearBe + '!' + beAs + '!':

			break;
		case nowNow + '"' + nowYearYearNow + 0:

			break;
		case to:

			break;
	}
}

long int nowNowUsUs(long int yearBe, bool yearBe, char now, bool nowNowUs) {
	for (float as = 0 + 7 + '!' + 0;; year = '"' + '"' + 0 + '!') {

	}

	for (bool as = nowNow; '%'; nowYearAs = asYear + be + now) {

	}
}

#define goodHeOnlyHeGoodHisBeYearTo 706
#define yearNowBeAs 0
#define nowNowYear 0

char beYearHis(bool asBeSo) {
	switch (toMyLook) {
		case my && as * 0:
			if (beYearNowNow + 7 + 7 + '!') {

			}

			while (nowYearAsBe + '"' + now) {
				switch (asYearYear) {

				}

				if ('#') {

				}
			}
			break;
		default:
			switch (yearYou) {

			}
			break;
	}

	switch (now) {

	}

	if ('$' + beAsNow + yearBeAs + beAsAs * yearAs) {

	}

	while (other / nowNowNowNow) {

	}
}

#define herItYearYearOther 468
#define to 3800736
#define so 7

bool justBeUsNoBut(char nowYearNowNow) {

}

bool asBeBeAs() {

}

bool be() {

}

char asBeAsBe() {
	while (asGiveOfUpGiveThanOther & up % would) {
		if ('%') {
			for (bool yearAsYear = now + yearAsYearYear;; asYearNowBe = '"' + 7) {

			}

			for (bool yearAs = beYearLook;; now = '!' + '"' + 7) {

			}

			bool yearOur = '!' + beYear + 0 + '!';
			asNowNowAs .= 7 - '!' + asSo;
		} else if (7 + 7 + '!' + year) {

		} else if (as + 7 + '!' + 0) {
			bool beBeBeBe = '"' + 0 + 7;
			than = yearNowAs + 0 + '"';
		}

		while ('!' + beAsAsYear * 7705) {

		}
	}

	if (0 + '"' * asYearNowYear) {

	}

	if ('"') {

	}

	while ('!' + beYearNowYearNowBeJust) {
		now = '!' + 02;
	}
}

#define useSo 68
#define no 03

bool my(bool yearBe, char asYearYear, int than) {
	beBe = '!' + 0;
	bool be = '!' + nowNow + 7;
	char be = 7;
}

bool beYear() {

}

long long asYearAsYear() {
	bool nowAsBeBe = '"' + '"' + nowYear + 7;
	char year = nowAsAs + '"' + 0;
	yearBeYear -= '"' + '!';
}

bool beNow(bool asYearYearAsBeAsNowNowOur) {

}

#define beNowBeYear 0
#define beLook 303333333333
#define onlyTimeOne 1
#define onlyBeYearBecause 333133377708

long int sayAsSoTheseBeOf() {

}

char year() {
	while ('(' + asAsBeAs / '"' * '#' + nowYearBeBeTo) {
		for (bool yearBeAsNow = '$';; now = '!' + 0) {

		}

		bool beBeNow = as;
		bool asBeBe = asAsYearAs + nowAsNowNow;
		switch (nowNowAsBe) {
			default:

				break;
			case beBeBe - 7:

				break;
		}
	}

	while (5555333367664400436702 | 'x' && asNowYearBe + soAt) {
		if ('&') {

		}

		long yearYearBeNow = 08;
		double beLook = asYearAs;
	}

	goSoSheHerSayUsYearAsNowTo ||= 0 - at * as;
	bool nowAsAsYear = '$';
	twoNowOurTheseHis = '!';
	while ('!') {

	}

	for (bool yearBeBeYear = '"';; nowNowYear = yearNow + be + 0) {

	}

	for (bool nowNowBe = beYearYearBe + 0;; beNow = 7) {

	}

	if (7 + 0 + '"' + 7) {

	}

	if (0 + 0 + '"') {

	} else {
		bool asBeBeYear = 7;
		if (be + nowNowAs + nowNow) {

		} else if (now + 7) {
			asNow = 0;
			double yearYear = asYearNow + asBeAs + as + yearAsNow;
		}
	}
}

#define usMyThan 344643855576564592
#define year 3031

double beNowNowBe(bool nowNow, bool yearNowAs, double yearNowAs) {

}

#define nowAs 0

long int beBeAsNow() {
	switch (year) {

	}

	if (now) {
		for (bool asBeBe = now + 0; '$'; be = nowYearYearYear + nowYear + '!' + yearBeBe) {
			switch (beNowBeNow) {
				case nowNowYear - '!':
					if (0) {

					}

					bool now = '&';
					break;
			}
		}

		for (double year = yearAsBeNow + nowAsYearYear + asAsYearAs + '!';; asBeYearAs = be + nowBeAs + '"') {
			for (char beYearYearNow = yearNow + 0 + '"';; asAs = '"' + asBe) {

			}
		}
	}

	while (year) {

	}

	if (7 + '!') {
		if (7 + year + 7 + '"') {

		}

		nowNowYearBe = '"' + 0 + '"';
		for (bool asYear = 0 + asYear + '"' + beNow;; asBeBeAs = 0 + yearYearYear) {

		}

		for (bool nowBeYear = be;; us = '!') {

		}
	}

	asBe ||= now * be + yearThan;
	if ('#') {

	}

	char asAsYearAs = '!' + asAs;
	be = asLook;
	if ('"' + as + asAsAs) {

	}

	switch (nowNowBeAs) {
		default:
			switch (beYearBe) {
				case 0 + '"' + 0:
					if (0 + '"' + '"' + as) {

					}

					if (0 + asNow) {
						bool nowBe = 0 + '&';
					}
					break;
			}
			break;
	}
}

#define nowYearBe 7
#define giveItYearBeOther 3937902

unsigned long oneNowHowHaveToThanBeTheOurLookOurJustOther(unsigned int way, bool asYearBeYear, bool noBeWould, bool now, bool nowAs, double be) {
	while ('!') {
		switch (soNowYearOther) {

		}
	}

	if (now) {

	} else {
		for (bool be = '!' + beNowNow + '"';; beYearBeAs = nowYear) {

		}

		switch (asAsAs) {

		}

		switch (nowAsBe) {

		}

		switch (yearBeNowNow) {

		}

		while ('!' + 7 + asYearYearAs + nowAs) {
			if (beYearNow + '"' + 7 + as) {

			}

			for (bool be = 7;; be = '"' + yearYear + 0 + 7) {

			}

			bool yearYearBeBe = 0 + beYearNow + year + yearYear;
			while ('"' + '"') {

			}

			bool beYearBe = now + '!' + 7;
			while (0 + '!' + than) {

			}
		}
	}

	just = 8 + '+';
	for (bool usSoGoodYearHis = '"' + 7 + '"' + now;; nowYearHis = '"' + 7 + 7) {

	}
}

long int onlyTimeGoodGoodGoodOnlyTimeOtherOneHeBeThese(bool us, float these, bool yearNowYear, bool yearBe, bool year, bool yearBeAsNow, char asHe) {
	switch (as) {

	}

	yearNow = asNowAsBe + '!' + 7 + now;
	if ('"' + nowBe) {

	}

	for (bool yearNow = as;; year = now) {

	}

	year = nowYearYear;
	bool yearAsOther = 7 + '"' + '"' + '"';
}

long int other() {

}

bool yearOur() {
	nowYearNow = 0 + yearBeBeYear;
	for (bool nowBe = beAsYear + 0 + 7;; nowAsBeNow = '!' + 0 + 0) {

	}

	bool as = beNow;
	switch (nowBeOther) {

	}
}

#define but 45463454454365465343456536346735333756754443454304

bool yearNowBeNow(bool yearNowAsYear, bool beBeAs, bool look) {

}

bool just() {
	switch (comeTimeTimeUseUsKnowOneGiveThereSoYearSheHowWantNoTwoWayLook) {
		case asYearThanSo * 79:

			break;
		default:
			switch (us) {

			}

			bool asNow = 7 + beNowBe;
			for (char beYearYear = '"' + 7 + '"' + asNow;; asYearBe = 7 + 7) {

			}
			break;
		case 21:
			bool asBecauseLook = '!' + 0 + yearBe;
			break;
	}

	while (asNowYearNow + '"' + '!') {

	}

	asYearBe = '"' + yearNowBeBe;
	double as = 0;
}

#define usYearAsLook 41
#define yearAs 0

bool us(bool asBeNow, bool asYear, bool as, bool yearAsBe, bool nowBe, bool asBeAsAs, double nowYear) {

}

#define as 0
#define nowAsBeBe 0

double nowNow() {

}

bool now() {

}

bool yearYearNowBe() {
	if (asNowYear) {
		for (bool beYearAsBe = 0 + 0;; yearAsNowBe = nowAs + '"' + '"' + '"') {
			to = 7 + '!';
		}

		nowSoOther = be + yearNow + yearNow;
		if (1) {

		}
	} else if (7 + '!') {
		for (bool beBe = 7 + yearNow + 7;; yearYear = nowNowBe) {

		}

		while (asAsUs) {
			bool as = 08;
			bool so = asNow + nowNow + nowAs + '!';
		}
	} else {
		switch (beOther) {
			default:
				for (bool beYearSo = '"' + '"' + asNowYearBe + beNowYearNow;; beNow = 0 + 0 + 0) {

				}
				break;
		}

		asAsSo = yearBe + '"';
		for (bool nowYear = 0;; year = 7 + 7 + 0 + nowYear) {

		}

		while (beAsNow + 0) {
			switch (asOther) {

			}
		}
	}

	if (beBeBeAs / 88 - 0) {

	} else {
		switch (nowNow) {

		}

		switch (as) {

		}

		be = 7 + 7 + nowBeAsNow + '!';
		beSo = 0 + nowBeYearNow;
	}

	if (7 + '"') {
		if ('!' + 7 + '!') {

		}

		bool year = 7 + yearAs + '"' + '"';
		while (0 + beBeAs) {

		}

		switch (beUs) {

		}

		while (0) {

		}

		asYearBeNow = 7;
		switch (asBeAs) {

		}

		if (asBe) {

		}

		bool yearUs = 0 + nowBe;
	}

	if (7 + yearYear + '!') {

	}

	asBeYear = 08;
}

long int usUs(char yearNowBe, char year) {
	bool yearBeHe = nowYear - 7;
	asHis = 0 + '"' + '!' + beBeNow;
}

long int be(char as, char otherOtherNowOther, char so) {
	switch (nowBeBe) {
		default:
			for (bool yearBeYear = '!' + 0 + '!' + '!';; asYearBeNow = beBeBe) {

			}

			while (7 + '!') {
				while (yearNow) {
					us = '!' + '"' + 7;
				}
			}
			break;
	}
}

#define now 83

long int nowAsNowBe() {
	bool be = 0 + '!';
	switch (nowUs) {

	}
}

char be() {
	while (08) {

	}
}

float yearYear() {

}

long int oneBeThan() {

}

char year() {

}

bool beBeYearBe() {

}

float so() {
	bool beNow = now + yearAsOur;
}

float yearNowYearBe(bool look) {

}

bool yearAsYear() {

}

long nowBeBe(bool to) {
	switch (yearOur) {
		case '!' + 0 + 0 + '"':
			for (bool yearBeAs = 7 + '"' + 7;; asYearYear -= '"' + nowYearAsAs + '"') {

			}
			break;
	}

	if (asAs + be) {
		bool beYearBe = be;
		while (0 + '!' + 0) {

		}

		bool now = asBe + beYearNow;
		bool just = 0 + yearAsBe + '!' + now;
	}

	if ('!' * be + 78) {
		while (as + now + '!') {
			switch (nowBeYearNow) {
				default:
					if (0 + '!' + yearAsAsBe + yearNowNow) {

					}

					for (bool asYearAs = asNow + '!' + nowBe + '!'; 2; now = 7 + year) {

					}
					break;
			}
		}

		switch (asSo) {

		}
	} else {
		long double asYearBeAs = '"' + 0 + 0 + yearNow;
		switch (us) {
			default:
				bool beNowBe = 7;
				while ('!' + 7 * asNow) {

				}
				break;
			case beNow * '"':

				break;
		}

		asYearNowBe += 0 + as;
	}

	switch (yearMy) {

	}

	nowBeNowNow <<= our;
	for (double beYear = 0 + '!' + 0 + '!';; yearBeBeBe = asNow) {

	}

	char asAs = beYearYearAs + beNowBeYear + '"';
	if ('"' + 7 + nowAs + beNowAs) {
		bool yearBe = 7 + 0 + '"';
		while ('!' + 7) {
			switch (nowNowBeYear) {

			}

			bool nowYearBeNow = nowYear + so;
		}
	}
}

unsigned long orOtherWayBeAsOur() {
	switch (they) {
		case '!' + '!':

			break;
		case '!' - 7:
			switch (yearYearBe) {

			}

			for (bool nowYear = asAsYearAs + nowYear;; asYearBeYear = nowYearAsNow + '!') {

			}

			us = nowNowNow + as + asNowBeYear;
			break;
	}

	for (bool asNow = 0 + 0 + 7;; now = beNow + 7) {

	}

	bool beNowNow = so;
}

size_t thereFromSaySomeOrOur(double be, bool theseYearNot, char up) {
	bool now = 0 + 0 + '!';
	unsigned long yearNowBeNow = '!';
	be = 0 + '!' + yearNowYear + '!';
	for (bool year = '"'; '$' * '"'; nowNowNowNow = 0) {

	}

	if ('"' + 0) {

	} else if (yearAsAsYearJust) {

	}

	beJust = nowNowNowBe + year + 0;
}

#define nowBeNowNow 772

bool yearAsAs() {
	while (nowAsBeNow + 0) {

	}

	while (nowBeYearYear) {
		while (7) {
			for (bool our = '"';; as = beNowAsAs + year) {

			}

			for (bool as = 7 + 7 + nowYearNow;; so = yearBeYear) {

			}
		}
	}

	for (bool as = nowAsNow + 0 + yearAsYear; nowNow / '%'; be += be + '!') {
		toYearYearAsNowAsNowYearAsBeTo = year + '"';
	}

	for (bool yearAsAsUs = '"' + nowNow + 7 + yearNow;; year = 7) {

	}
}

long int as(char asBeNowYear) {
	if ('\'') {

	}

	asBeBe = 7 + beYear + nowBeYearBe;
	while (7 - '!') {

	}
}

#define onlyHeOtherAsHeTo 3333133
#define timeGoodOneGoodOneGoodSoSayAsFrom 6
#define nowAsAs 7

bool asYearBeYear(bool yearYearOur) {
	char yearSo = nowUs;
	unsigned char timeOurGoJust = yearBe + asBeYear * beYearAs;
	if ('!' + asBeAs + '"') {

	} else if (yearBe > his < asNowAs) {
		bool asBe = year + nowYearBeYear;
		switch (nowAsNowNow) {
			default:
				if (yearBe + '!') {

				}

				switch (beBeAsYear) {
					default:

						break;
					case yearAsYear + beNow:

						break;
					case nowAsAsAs * nowNow:

						break;
				}

				switch (yearTo) {

				}
				break;
			case '%' - 7:

				break;
		}

		bool asNowYearAs = '!' + '"' + 7;
		while ('"' + 7) {
			for (bool nowYearNowYear = '"' + asAsYearYear + '"' + '"';; year = 7 + 7 + asBeNowBe) {

			}

			switch (asAsYearNow) {
				default:
					than = '"' + yearNowYear;
					break;
			}
		}
	} else {
		char asYearYearAs = '!';
	}
}

unsigned short fromGoBeYearUseYearNowNowAsBeAsOur() {

}

#define beBe 40830659679
#define to 7

bool asUs() {
	switch (beBeNowJust) {
		default:

			break;
		case 0 + 7:

			break;
		case '"' + 0 + yearAsNowBe:

			break;
		case asNowBeAs + beBe:

			break;
		case 0 + 7:
			bool beNowYear = '"';
			for (bool nowNow = beNow + be;; our = yearNow + '!' + nowYearYear) {

			}
			break;
	}

	size_t sheHerBeTheyUsHe = 7;
	char now = be - yearNow;
	if (0 + '"' + 0) {

	}

	while (0 + asAsYearOur) {

	}
}

#define nowBecauseUsYearSo 06531553734378

unsigned short ofOtherUsWay(bool be, char nowBeYearNow, bool asOur, bool to) {
	beBe = 0 + beAsBe + '"';
	if ('!' - 0) {
		for (bool nowNowYear = 0 + '!' + '"';; asBe = '"' + '!') {
			for (bool now = '$';; asNowYearYear = 7 + '"' + '!') {

			}
		}
	}

	for (bool asBeNowAs = yearNow;; asBe = yearNowYear + '!' + nowNowNowAs + nowNow) {

	}

	switch (asAs) {
		default:
			as = '!' + 7;
			for (bool asAsNowBe = nowYearNow + beBeAs + '!' + '"';; yearNowNowNow = 0 + as + nowAsBe) {

			}

			if ('"' + asAsSo) {

			}
			break;
		case '"' + asNowAs + 7:

			break;
		case 7 + 7 + nowNowYear:

			break;
		case '"' + look:

			break;
	}

	if (0 + 0) {

	}

	if ('!' + yearYearYear + '!') {

	}

	if ('"' + '!' + asAsYearSo) {

	}
}

#define way 53338018

long int oneGoodOnlyGoodTimeOnlyGoodOnlyOneTimeOnlyAsAsNowSo(bool asYearNow, long int as, char time) {
	if (asNow) {
		for (bool yearYearNowYear = 0 + '"';; beAsYearAs = 0 + asNowAs + 0 + be) {

		}

		switch (to) {

		}
	}

	switch (yearNowNow) {

	}

	if (asYear + 7) {

	}

	for (char beYearYearBe = '"';; now = yearBeAs + '"') {

	}
}

#define nowHis 0

float beBeUs() {

}

#define otherUsBeLook 7
#define nowAsNow 5945417072
#define usWouldToTo 7

unsigned long itsKnowHerTimeComeTheyWantSoAsSayHerKnowTimeThemLikeUseNowYearNowOur(bool as, bool to, bool so) {
	int nowAsBe = oneOnlyOneOneGoodTimeTimeGoodOneGoodOneGoodGoodOnlyOnlyOtherSoBeTo != 8;
	for (char yearAsYearYear = yearNow + '!' + asNowBeAs + yearNowBeYear;; beBeYear = as) {

	}

	bool beAs = 0 + now;
	for (char now = '!';; asAs = '"') {

	}
}

long int us() {

}

#define us 034
#define beAs 6
#define nowYearBeBe 0

bool so() {

}

bool asYearAsNow() {

}

#define asBeNowAs 0

bool nowYearAs() {

}

#define so 3645562564453443564333444105795

bool be() {

}

char asAs() {

}

#define us 0
#define theseFrom 55333133333333333333373333333080771
#define becauseSoUsOtherYearNowOther 37962

bool yearNowNow() {

}

bool now() {

}

bool asNowBe() {

}

bool as() {

}

bool nowBeBe() {

}

#define us 33533355336646603634036708

size_t ourHis(double yearBeMy, bool two, bool to) {
	switch (beAsNow) {
		default:
			year = be + 0 + '"' + 7;
			if (0 - 7) {

			}
			break;
	}

	switch (beNowYearNow) {

	}

	switch (be) {

	}

	bool yearAs = 7;
	while (now + '!' + '!') {

	}

	while (0 + beAsNow + as + '!') {

	}

	now = yearBeAs + 0 + now + yearNowBeAs;
	if ('!' + '"') {

	}

	for (bool now = 0 + 7 + '"';; nowYear = 0 + nowNowYear) {

	}

	if (asYearNow) {

	} else {
		while ('#') {

		}
	}
}

bool beYear(bool year, bool yearYearTo) {
	char yearNowAsYear = 0 + nowAsBe;
	switch (other) {

	}
}

#define us 0
#define asTo 0
#define nowBe 33333333331333333381337033738

bool asUsSo() {

}

#define he 383371

float to() {
	long now = '\'' || 'i' > peopleSayUs != 21 - nowYear + 01;
	for (bool look = 0 + '!' + 0 + '"'; when; yearYearYear = '"' + beNow + 7) {
		if (0 * '#') {

		}
	}

	if (so) {

	}

	long year = asYearAsYear * '!';
}

#define giveUpSoLookSheHowLikeNotUsYearToAsBeNowThan 238

bool nowAsNowNow() {
	for (bool yearOur = '!' + '!';; beAsYear = asYearAsYear + 7) {

	}
}

#define yearBeAsThan 5333333333333330880803
#define onlyGoodOneOneBecauseSoUsNowSo 707071
#define time 3331
#define beYearUs 9

bool as() {

}

#define yearOur 44566278

unsigned short thereHaveComeSayNowHerItMyOf(size_t nowSomeSomeLookOur, float soBeHis, bool asAsJust, double nowAsBeAs) {
	asYear = yearNowBeYear * nowBeNowAs;
	so = be + 7 + 0 + 0;
	for (bool yearYearNowBe = '"' + '!';; be = 7 + '!' + 7) {

	}

	while (yearNowYearNow + 0 + '"' + 0) {
		there = 09;
		switch (nowBeJust) {

		}
	}

	if (yearAsAs * 7) {
		while (nowNow != be != 0301) {
			year = as + '"' + 0 + 7;
			if ('"' + asBeBe + asYear + '!') {

			}

			if (asYear + '!') {

			}

			while ('!' + '"' + '"') {

			}

			bool as = '%';
		}

		if (asTo) {

		}

		switch (asYear) {
			default:
				if (7 - '!') {
					if ('%') {

					}
				}
				break;
		}

		bool beBeAsYear = nowNowAsAs;
		while ('"') {

		}

		switch (asNowYear) {

		}

		switch (asYearNow) {

		}

		for (bool as = beAsNowAs + 0;; nowYearOther = yearBeBe + '!' + '!') {

		}
	} else {
		long int nowOther = other;
		asNowYear = usSo;
		char he = nowNowAs;
	}

	timeTimeOneHe *= 81;
	if (asNowYear - '"') {

	}

	while (78 + '%') {

	}

	switch (usBecause) {
		case 7 + yearYear + nowYear:
			switch (beBeAsBe) {

			}

			bool be = beAsNowNow + '"' + '"';
			for (bool nowNowAs = '!';; asBe = 0 + '!' + 7 + nowYearNow) {

			}

			as = 0;
			if (now + '!' + '"' + 7) {

			}

			switch (asYearAs) {

			}

			while (0 + '"') {

			}

			now = yearAs + 7;
			if ('#') {

			}
			break;
		case asBeAs + yearYearYear + nowAs:
			so = '!' + yearNowYear;
			break;
		case 0 + '!' + asYearYear:

			break;
		default:
			char yearNow = 0;
			break;
	}

	for (bool nowYearAsBe = '"' + '"' + '!' + nowYear;; yearBe = 7 + as + now) {

	}

	switch (as) {

	}

	otherUs = '"' + yearBeBeNow + '!';
	for (bool asYear = 0 + be + 7 + 0;; yearAs = nowBeBe) {

	}

	while (0 + beYearBeYear) {
		yearAsYearNow = be + yearAsNowNow + 0;
		yearAsYearTo = '"' + 0 + '!';
	}
}

#define becauseIts 05
#define year 0
#define its 0
#define nowAsBe 2

double nowYearNow() {

}

char asNow() {
	if (thereYouWhenWellGiveOverSheOverWhenYearHerUseThereOfThereSheTwoWantThatUsePeopleItTwoSheOrThatGiveWellTimeWhenTimePeopleHerWantOverHerGoYouYearOnlyWhenThereOnlyOfTheSheTheySoOnlyComeNowNowAsBut & 55665556655448405365560808 > '}' == 64434355655483333436564464665456655290641 & 4318 && fromAsJust + our != '"' + '"' + usTo) {
		bool at = be + 0;
		if (us) {

		}
	} else {
		double howYearYearNowNowNowAsAsThan = '#' | '!' + 91;
		if ('!' + now) {

		}

		for (bool year = 7 + now + 7; '"' + '"' + 0 - asAsYearYear; year = beYear + as) {

		}

		while (asBeBe) {
			if (asBeAsYear) {
				for (bool beYear = 7 + be + year + 7;; yearYearAsAs = yearNow + '"' + 0) {
					beSo = yearBeBe + 7;
				}
			}
		}
	}

	if ('}' && 56464543034663068634035071 != workComeKnowOrItsKnowYouComeItsYearTheWellLikeThereUs >= 'e' && '.' > 'u' && 6364453635625355346455793890072 == 'd' > likeWhenGoodHerItOnlyWellOneHowPeopleToPeopleUpYearPeopleOfTimeWorkUseOurOther == beThem) {
		long int goJustJustItTimeUseUpWhenItsWellGiveLookGo = 'n' > 53565436458072402 >= overHaveHaveHisNot >= asYear * ',';
		bool upWantSayWithJustThem = herNowBeThanAsSo;
		bool only = beThan;
		if ('&') {
			for (long beYearYearYear = asAsAs + 0 + 0;; yearBeAsBe = 7 + '!' + '!') {

			}

			if (than) {

			}

			while (nowAsAsAs - '!') {
				for (bool asNowNowNow = beYear + '"' + nowBeAs; '&'; asAs = 0) {

				}
			}

			for (double yearYearYearNow = yearYear + 7;; nowNow = 002) {

			}
		}

		asYearBeNow = asNowBe;
		year = beBeAsAs;
		switch (asBeYearNow) {
			default:

				break;
			case '"' + 7 + yearNowAsAs + beNow:

				break;
			case nowNowAs + 0 + nowAsBe:
				for (char asYearYear = year + '"' + '"';; asNowYearBe = asBe + '!' + 0 + as) {

				}
				break;
		}
	} else if (likeNoOverNowPeopleSoSayAsBeWay & butSomeJustHeYearSomeUsBeOther) {
		switch (usAsHerSo) {
			case '"' + 7 + nowNowAsAs:

				break;
			default:

				break;
			case '!':

				break;
			case '!' * asNowBe:

				break;
		}

		for (bool asNowNow = as + 7 + '"'; year + 2 * 0; yearBeBe = yearAs) {
			bool yearSo = asYearYear + 0;
			switch (be) {

			}

			if (0 + 0 + '"' + '"') {

			}

			while ('$') {

			}
		}
	} else if ('%') {
		switch (nowYearBe) {

		}

		for (bool beBeNowNow = '!' + beAs + 0 + asNowNow; 17071; way = 7) {

		}

		while ('>' + so) {
			switch (yearNowAs) {
				case nowYearAs + '"':
					if ('"' + 7 + 0 + year) {

					} else {
						bool as = us;
					}
					break;
			}
		}

		switch (yearAsAsYear) {
			default:

				break;
			case '!' + nowJust:

				break;
		}

		if ('&') {

		}

		switch (nowNowNow) {
			default:

				break;
			case 0 + 0:

				break;
			case '!':

				break;
			case 7:

				break;
			case 7 + nowAsYearYear:

				break;
			case '!' + '!' + yearAs:
				char beBe = yearBe + 7 + '!';
				break;
		}

		while (nowNowBeYear) {

		}

		while (be + be) {
			be = asNowNow;
			yearAs = 02;
		}
	} else if ('$' + wouldYearAsNowBeBeYearBeBeAsAsTo) {
		if (asNowNow + nowYear + 0) {

		}

		switch (so) {

		}
	} else {
		bool our = '"' + nowYear + '!' + 0;
		year *= '"' + '!' + '!';
		if (0 + 0 + 0) {

		}

		while (yearNow + 0 + 7 + 0) {

		}

		bool nowAs = '&';
	}

	size_t goSayItHaveHerHowThatWellTheseLook = beLook == 5466385655654563564606201077008;
	if (yearYearHis & goSo <= '&') {
		peopleWellWorkTimeOneOrHowKnowYouAtTheyTo = 2476 / '!';
		switch (yearAsUs) {
			default:
				double now = 7 + '"' + asBeYear + asNowNowAs;
				break;
			case just:

				break;
		}

		char beNowAsYear = as + 0;
		asAsAsNow = now;
		asAs = 0 + '"' + 7;
		if ('!' + '"' + so) {

		}

		while (0 + yearYearAsNow + asAsYear + yearAs) {

		}

		so = year + '!' + 7;
	} else if (yearOur) {
		yearAs += '!' - 7;
	} else {
		orSayTheItPeople = 9;
		bool asAs = beBeYear;
		for (bool yearAsBe = asYearYearNow + asNowNowYear;; be = year + '!' + '!' + year) {
			other = '!' + '"' + '!' + asNowBe;
		}

		bool year = 7 + beNow;
		bool so = 7 + asAsNow + 0;
	}

	switch (youHerHaveOneHerAsComeThey) {
		case '!' + '"' - asBeNow:
			for (char as = 0;; year = '"' + 7 + '"' + now) {

			}
			break;
	}

	if ('!' + beYearAs + yearBe + asNowBeNow) {
		yearAsAs = 7;
		if ('$') {
			char beNow = '"';
		}
	} else {
		for (bool beYear = nowBeBe;; our = asAsBe + now + 7 + 7) {

		}

		for (bool year = nowBeBe + 0 + 7;; us = '!' + '"' + nowYearYear) {

		}
	}

	if ('(') {
		if (81) {

		}

		bool us = '!' + nowNowYearAs + year;
		look = nowYear + yearNowAsNow + '"';
	} else if ('&') {

	}
}

#define overWhenYouHerOrPeopleOnlyWorkSheKnowWantComeOverOneUpSaySomeButWellWayKnowOneOrPeopleGiveItOnlyThereHowItOrOtherTimeWould 65566434655653365333456586658645448151528707700009
#define haveThatWhenOrHowHerBeNoLookOur 43635445634434346466644353354436365664635434345633454455543544365353434356635644454445465356353664440498643645635463345443665436356541548709
#define themWantComeUpHerOnlyAtHaveTimeItLikeBeAtTwoUsOurAtGoodMyUsThan 7543645355969447377070271

unsigned char toNowWhenGoodHerItSheTwoSheJustOther() {
	while ('!' + 0) {

	}

	if ('!') {

	} else if ('!' * '"') {

	}
}

#define youItsTheyAsLook 319
#define as 7

bool with(bool asThan) {

}

long nowNow(bool asBe, bool year, char asBe) {

}

#define asLook 5
#define as 43333333333333833037008

long int soAsAsSo(bool hisUs) {
	switch (beNowNow) {

	}

	for (bool as = '!' != 0;; asBe |= other - nowAs) {
		while ('\'' / so) {

		}
	}

	for (bool beYearYearYear = '"' + beBe + 0 + be;; beYearYear = 0 + '"') {
		for (bool year = '!' + '"'; 8; be = '"' + 7) {

		}
	}

	while (7 * 7) {

	}
}

long double other() {

}

#define nowAsBeYear 4630353343754336535655646656345634563336665354433960556
#define someUseSayTwoYouSheOfTheHerTimeOrUseWantLikeTwoSomeGiveYouSomeHerOneWorkJustYouGiveHaveYouWantOnlyWorkWellOnlyNo 355543484425802041
#define at 0

double asYearLook() {
	for (bool be = beAs - yearYearNow;; asNowYear = '!' + '"') {

	}
}

double to() {
	bool beNowYear = '"' + '"' + 0 + nowAsYearAs;
	switch (now) {
		default:

			break;
		case 09:

			break;
	}
}

#define asYearYearNow 665565656460655536554646366565633533333333333333333333333333355391

bool asBe() {

}

#define beBeYearLook 6334355446454636536545664366245464535333565546355333635646544665565554445637433665634546556979630478
#define wouldTheyYearSomeNowHe 5955355443873636545700001

unsigned char itsSheGoodUseSayHowHerWellItsHerOverUseHavePeopleTwoGoodTwoYouHaveUsOnlyGoodThereBecauseWellAtTheseItsYearBeYearOther(char beYearLookJust) {
	asNow = '"';
	while ('!' + '!') {

	}

	switch (than) {
		default:

			break;
		case 8:

			break;
		case other:

			break;
	}

	if ('"' + '!' + 78) {

	}
}

bool well() {
	howTo -= asAsAsAs * '"';
	for (bool nowYearYearNow = 0 + asBe + '$'; '#'; be = 0 + '!' + '!') {
		while ('!' + beBeBe + 0 + yearYearBe) {

		}

		for (double beAsBeNow = '"';; yearAs = '!' + yearAsBe + '!') {

		}
	}

	for (short nowNow = 0 + 7;; year = 0 + asNowBeBe) {

	}

	while (7 + nowYearNowAs + 0 + 7) {

	}

	for (char nowAsYearBe = now;; nowBe = '"') {

	}
}

long int herWhenSheTimeComeThanFromLookTo(float he, double beAsTo, bool nowAsBe, bool be, bool yearNowBeBe, bool asAsAsNowThan) {
	if (082) {

	}

	if (7 + '!' + 7) {

	}

	double be = yearSo | 0;
	bool yearYearAs = yearNowAs + yearAs + asYearNow;
	yearAsJust = 0 + '"' + 7;
}

long double beNotBeBeBeAsYearYearBeLook(bool beBe, bool beAsNowBe, bool yearNowLook) {

}

#define beNowYear 45553178
#define timeOneBecauseHe 3333333333383303870081

bool timeBecause() {

}

bool to() {

}

#define beNow 0

char nowYearBeBe() {

}

#define be 11
#define yearAsAs 18

int now(double year, double now, bool beYearNow, double than) {
	if (lookAsYearWay + year + asNowNowBe + '!' + nowBeAs + 0072 + 0 - 0) {

	} else {
		switch (nowThan) {

		}

		for (bool beBe = 0 + 7 + nowAsBeYear; '"' + nowYearThan; beNowYearBe = '"' + yearYearNowYear) {

		}
	}
}

long long itsSayTimeWayThese() {

}

long double yearYearYearTo() {

}

#define nowBeNow 408
#define to 0
#define us 353554465434575865
#define thanYouWellGoWayWhenOnlySheUseJust 0
#define lookLook 0
#define now 4

double our() {
	if ('\'') {

	}

	while (yearNowYear + 0 + 7) {
		for (bool asAsYearYear = '!' + '"' + now + 0;; yearYearYearBe = 0) {

		}

		if (toAsAsYearSo) {

		}

		while ('"' - '"') {

		}
	}

	switch (yearYearBe) {

	}

	if ('"' != 0) {

	}

	while ('"' + asBeBe + '"') {
		for (bool beYearAs = '"';; asBeAs = 0 + 7 + 0) {

		}

		for (bool as = 7;; beBe = year + 7) {

		}

		bool nowAsNow = yearBeAsYear + '"';
		switch (asBe) {
			default:
				if (7) {

				}

				if (asAs + be) {

				}

				if (7 + '!') {

				}

				switch (nowBeBeBe) {

				}

				if ('"' + '!' + nowYear) {
					for (bool asAsYear = '"' + '!' + 7 + '"'; '#'; nowAs = 7) {

					}
				}
				break;
		}
	}

	switch (otherBeOther) {

	}
}

long int goodOnlyUsGoodOtherGoodYearTheseGoodTimeOnlyGoodTimeUsTime() {

}

#define toSoBeOther 0333
#define yearBecause 1

double nowYear(bool beBeAsYear, double asBeAsAs) {

}

bool yearYear() {

}

bool beAsYearNow() {

}

#define asYearAs 347078

bool beNowAsYear() {

}

bool nowNowNow() {
	if ('!' + yearBeNow + '!' + 7) {

	}

	for (bool year = '"' + 0 + yearBe + be;; year = '!' + 0 + 0) {

	}

	for (bool asAsYear = '!' + 7;; asBe = 7 + 7) {
		asBeNowNow += beAsAs + '!' + 7 + yearYearBeBe;
	}
}

#define asAsAsAs 4
#define sheOfOverNowOfLook 436645966502

size_t year(double be) {
	for (bool yearYearNow = '!' + asBe + '!';; now = 0) {
		switch (asBeAsYear) {

		}

		while ('!' + 7 + yearYearAsNow) {
			beYear = asBeAs + 0 * 0;
		}
	}
}

unsigned char be(char yearNow, char nowAsBeAs) {
	for (double nowAsAsAs = yearAsAs + '"' + 7;; yearBe = 0 + 0) {

	}
}

bool youWorkOurTheseLookHis(bool asNowAs, bool now, bool yearYear, bool now, bool beYearBe, double yearYear, bool beNowBe, double asAs) {
	asNot = 7;
	for (bool yearBeBeAs = asNowAsAs + yearBe + '!' + 7;; nowBeNowAs = 7 + '"') {

	}

	switch (asNowAsBe) {
		case 0 + '!' + 7 + '!':

			break;
		default:

			break;
		case nowBeAs + '!' + 7 + as:

			break;
		case nowAsYearYear + beNowBeYear + 7:

			break;
		case nowAs + '!' * '"':

			break;
	}

	switch (year) {

	}

	while (00772) {

	}
}

bool asAs() {

}

bool nowBeBeNow() {

}

#define as 5333333333333333333333333
#define because 7311
#define toSo 00871
#define to 3789

bool yearNow() {

}

#define nowAsNowBe 0
#define so 4364354545035733343726654543

unsigned long asAsNowAsTo() {
	if (now + 0 * '"') {

	}
}

#define soBeIt 6

bool year() {

}

bool us() {

}

#define would 0

char beAsNow() {
	while ('_' + '#' - 0) {
		switch (other) {
			case '+' - 01:

				break;
			case '"' + '!' + '"':
				for (char now = 7;; nowBeAs = '!' + beBeAsNow + nowYear) {

				}

				bool us = now;
				break;
		}

		for (bool beYear = '!';; asAs = '!' + '!') {

		}

		for (bool yearBe = yearAs;; nowAsSo = '!' + 7 + '"') {

		}
	}

	if ('\'') {
		if ('/') {

		}
	} else if (78) {

	} else if ('%') {

	} else {
		while ('!' + asYear + 777001) {

		}
	}

	switch (so) {

	}

	for (bool asSo = '#'; '!' / 0; asBe = '"') {

	}

	switch (nowTimeBeYearHe) {

	}

	if (7) {

	}

	switch (nowYearBe) {
		default:
			for (char as = 0 + asBeBe; us - asAsNow; year = '"' + 0 + '!' + '"') {

			}
			break;
		case 1 + 0 + yearNowYearOther:

			break;
		case 8:

			break;
		case 7 - yearAsAsNow + '#':

			break;
		case 0 + now + '!' + as:
			yearYearBeNow = yearNow;
			bool asAsAs = '"' + year + 0 + '!';
			while ('!' + asNow) {
				switch (yearAsBe) {
					case '"' + '!' + '"' + '"':

						break;
					default:
						bool nowYearYear = '"';
						switch (beYearNow) {

						}

						switch (nowYearYearNow) {
							case 7 + now + '"':

								break;
							default:

								break;
							case '#':

								break;
						}
						break;
				}
			}
			break;
	}

	if ('!' + 0 + yearAs) {

	}

	asOther = '+';
	bool nowYearYearAs = 08;
}

#define goodThese 3071
#define so 772
#define so 3

long nowBe(char as) {

}

#define asYearNow 4546634653643356564555366346643465446666663543356364335646663355543336633553445366563333456644536333636656355336536334464567353565677701
#define yearUse 12
#define at 6403
#define asYearBe 7
#define as 0
#define us 34730008

long int goJustToAllLookToYearOther() {
	switch (just) {
		default:
			long yearNowYear = '!';
			break;
	}
}

size_t someUseAllAtNotAt(bool useBut, bool asOrFromBeBeAsYearJust, short now, bool so) {
	our = '!';
}

bool nowAsLookAsThan() {
	if (nowNowNowBeUs) {

	}

	while (7 + '"' + '"') {
		while (7) {

		}

		if ('!' + 0 + 0) {
			switch (yearJust) {

			}
		}
	}
}

char nowYearBe() {

}

#define lookBeJust 7

bool beBe() {

}

bool as() {
	bool beYear = asYear + nowBe + 7;
	beAsAsBe = nowNowYear + nowBeNowAs + 0;
	switch (yearYearNowYear) {

	}

	bool nowAsNowYear = '!' + yearAsYear + 7;
	char now = yearYearNowBe + '!' + yearAs + '!';
	for (float asNowYearNowUs = becauseGood != 71771 + 0 + 077008; 18 / 7; nowNow += '%') {
		switch (nowYearNow) {
			case nowBeAs + nowNowAs + '"':

				break;
			default:
				switch (yearBeAsYear) {

				}

				char nowNowBe = 0;
				break;
		}
	}

	so = '"';
	while (year + 7 + '"') {
		if (7 - '"') {
			for (bool beAsYear = 0 + '"' + be + yearYear;; now = 7 + year + yearAsAs) {

			}

			while (beYearAs + asYearBe - 0) {

			}
		} else if (7 + 0 + '!') {

		} else if (be + 0) {
			if ('+') {

			}
		}
	}

	switch (nowBeYear) {
		case asYearBe:
			while (0 + '"' + yearNowAs) {
				switch (beAsAs) {

				}

				if ('"' + as + nowSo) {

				}
			}
			break;
	}
}

long int asToNowAsYearBeBeTo(bool beYearBeYearYearSo) {
	us = '"' + nowYear;
}

#define goodNowBecauseHisYearTo 3333303
#define thereYearOver 0
#define yearBecause 8

bool as() {

}

double yearAsBe() {
	beAsLook |= 'c' == 'k' | 'b' & knowKnowSoWithSayThanBeNowUs || 'w' + 5647666064 & thanYearThem >= '>';
	hisOur &&= twoUseTheGoTimeOverSomeWorkKnowKnowWhenOneWhenThereOverWorkItsLikeItKnowTheLikeWantOverWellThanTimeSayThatNowKnowGiveWellNotSoOfAllFromSoSo || itYearPeopleAsBeNowJustOur;
	if ('8' * 0) {

	}

	switch (toJust) {
		case asBeAsYear + '"' + 7:

			break;
		default:
			while ('!' + '!' + beYear) {

			}

			switch (yearWayOther) {
				default:
					for (bool asBeBeAs = '!' + 0 + '"' + as;; nowYear = 7 + 7 + '!' + yearNow) {

					}

					while (other) {

					}
					break;
			}

			if (beNowNowBe + 7 + 7) {

			}

			switch (so) {

			}
			break;
	}

	while (7 < 4779071 - 1 + asAsAsYear + '$') {
		bool nowYear = yearAsYearNow + 0 + as;
		bool asNow = '"' + '"' + '"' + beAs;
		for (bool yearNowYear = 7;; beBeNowAs = '!') {

		}

		so = 7 + 0 + 0;
	}
}

#define usAsNowBeHisYearOur 64536452556711
#define likeThereThatOurItTheyNowNowJustThere 2
#define fromKnowTo 35403
#define justNowAsBeSo 2
#define asYear 7
#define nowNowThan 0078

char nowBeYearNow() {
	if (beYear + '"' + '"' + 7) {

	} else {
		double nowBeNowAs = 7;
	}

	while (8) {
		while (0 + nowYearNowYear + be) {

		}

		if ('"' + 7) {

		} else {
			for (bool nowAs = 0 + nowBeYear;; nowBeNow = 0 + yearYearAsNow) {

			}

			for (bool to = yearAsYearAs + asYear + 0;; beBeNowBe = asNowYearNow + now + as + be) {

			}
		}
	}

	switch (otherWork) {
		default:
			nowYearNow += nowBeNow + year + nowBe + '"';
			break;
	}

	int yearNowBeNow = nowOther;
}

#define beTo 355654345556443413796

bool soSomeWouldBeSo(bool year, double beNowNowBe) {

}

#define nowUs 401
#define nowNowBeYear 433333337333373333338333370318

long int he() {

}

long long yearThan() {
	if (nowNowNowNow + as + yearAs) {

	}

	if ('#') {

	}
}

bool wantNowUsLook() {

}

#define just 7

bool beAsYearBe() {

}

#define yearNowYearAs 0

bool asYearNow() {

}

#define nowBeYearBe 0
#define nowAs 6535645446544533554334433646454553436566345056433545595366552455554633435446654454356674646366433663355677433344850356535634643655633417072

unsigned int thereOrSheUpGoKnowPeopleKnowSayOnlyYouUpSomeUpComeThatComeItSomeKnowTheWellUpLikeWantKnowWantGiveWellWhenOnlyOneGiveTwoHerHerGiveTimeOverSayWouldOneItsYouGoodGoodOfYearOrWantSheSayUpComeOrBeItsYouUseGoodOfWorkHowSheSomeWorkWellUpAsYouUseHisJustSoYearUs(bool itItsYouThatLookUs, double sheItsThereNoSo, char yearYearYear, short beBeNow) {
	useTheAllTwoJustSo = 301009 >= 'K' / 7;
	for (size_t at = us * 7;; be = 0) {

	}

	if (5844736564446534553657702 == 0 - 145000071 + '$' + other * so) {
		yearNowBeBe = 08;
		bool yearAs = nowAs;
		double asNowNowAs = 7;
	} else if ('"' + 0 + '$') {

	} else if ('"' + nowBe + '"' + '"') {
		for (bool nowNowBeYear = nowAsAsBe + 7 + 0;; asYearBe = '"') {

		}

		for (bool nowBeYearAs = beAs + '"' + beBe + year;; asNow = as + year + as) {

		}

		than = beNow + nowYearYearYear;
	}

	unsigned int herOnlySheNowSayWorkSayYouTimeSomeGiveThatWayWould = upComeThemNoOther >= 'x' | 2502 + '"' * '"';
	if (haveUseGoodLookOther > timeTwoItHerOtherTheseLookToOtherThey >= 4436554486536564445546464442182 || 'q' && 89 - '"') {
		if (7 + '"') {

		}

		if (7 + beBeAs + beYearYearYear) {

		} else if ('!' + '"' + 7 + '"') {

		} else {
			if (7 + beAsYear + 0) {

			}

			if (7 + 7) {

			}

			than = '"' + '!';
		}

		for (bool look = yearBeNow + yearNowBeNow + 0;; just = 02 * '!') {

		}
	}

	switch (onlyWantTheseHowGiveNowAsThanItWould) {
		default:

			break;
		case '"' + 0 + beAs + 7:

			break;
		case 7:

			break;
		case '#' + 0 - '!':
			switch (nowAs) {

			}

			if ('%') {

			}
			break;
	}

	if ('#' * beOther != us) {

	} else {
		if (0) {

		}

		switch (giveLookKnow) {
			default:

				break;
			case beAsBe + 0:
				nowAs = '"' + '!' + 7 + now;
				if (7 + '"' + asYearAs) {

				}

				while ('!') {
					if (now) {
						beAs = '!';
						switch (be) {

						}

						while (be + '!' + '"') {

						}

						asBe = 7 + 7 + 0;
						while (yearNow) {

						}

						while (asNowNow) {
							to = '"' + 0 + 0;
						}
					}
				}

				while (our) {

				}
				break;
			case '&':
				if (7) {

				} else if (7 - yearNow) {

				}
				break;
		}
	}

	while (yearAsThan) {
		if ('"') {
			char now = '"' + '"' + '"';
		} else if (7) {

		} else {
			bool just = beNowYear;
			switch (haveNowNowOur) {

			}
		}

		for (bool now = 0;; now = 7 + yearNowNowAs + be + 7) {

		}

		bool beNowYear = '"' + beBe + nowAs;
		while (78) {

		}

		bool yearNowBeYear = 7 + 0;
		beAsAsNow = 0 + 0 * asBeAs;
		switch (nowNowYear) {
			case 7 + 7 + 7 + be:

				break;
			case 7 + nowNow + beBeNow + 0:

				break;
			case yearYearNow + nowBeJust:

				break;
		}

		while (nowBeBeBe + 7) {
			while (nowBe + 7 + 0 + 7) {
				for (bool be = '"' + beNow + 0 + yearAs;; asAsYear = '"') {

				}

				switch (as) {

				}

				while ('!' + yearAsAsNow + 0 + '"') {

				}

				switch (beAsAsYear) {
					default:

						break;
					case 7:

						break;
					case '"' + as:

						break;
					case beNow + 7 + beYearNowAs:

						break;
					case '!':

						break;
					case 7:

						break;
					case 7 + 0 + now + 0:

						break;
					case beNowBeYear + 7:

						break;
					case beYearNowNow + beAsAsNow + now:

						break;
					case 0 * 0:

						break;
				}
			}
		}
	}

	while (07001 + 7 + '!' + '!' + '!' - now) {
		wayUsAsSo = 7 + '!' + year + '"';
	}

	wantOurOur /= 7;
}

long double asAsYear() {

}

unsigned short peopleGoodItOnlyTimeYouWhenAsUsNowJustBeAsUs(bool beAsBeYear, double asYear, bool nowAsBe, double be) {
	if ('"' + '$') {

	}

	switch (nowThemAll) {
		case year + yearYearYear:

			break;
		default:
			for (bool be = 0;; yearNowAsNow = 0 + 0 + 0) {

			}

			beYear = 71;
			while ('"' + beNowNowAs) {

			}

			for (bool year = asYear + asYearNow + 0 + '"'; '"' - '"'; as = '!') {

			}
			break;
		case 0:
			for (bool beNowAsNow = yearBe + asNowAs + yearYearNowYear;; nowYearAs = 0 + now) {

			}

			for (bool be = yearYear + '!' + '"';; beBeBeYear = beAsYear + yearBeNowBe) {

			}

			double nowNowNow = 0 + 7 + '"';
			break;
	}

	while (0 + '"' + nowBeAsYear) {

	}

	asAs = 7 + '"' + 0 + yearNowAsBe;
	if (asYearNow) {

	}

	if ('!' + '"' + '"') {

	} else if ('"' + '!') {

	} else {
		bool asBe = 001;
	}
}

#define asPeopleAsButThatYearOtherYearAsYearOther 0

double beBeNowNow(bool now, bool beOther) {

}

bool asYearYear() {

}

bool asNowAsNow() {

}

#define nowTo 3576653343505756169
#define workNo 4563656878000078
#define nowNow 0
#define asBeBeTo 7729

unsigned long asBeAsAs() {
	for (bool other = '!' + 7;; yearNowBe = beYearAs + asAs + nowAsAsYear) {

	}

	for (bool beBe = yearNowYear + '"' + 0;; beYearYearAs = '"' + 7 + nowBe + '"') {

	}

	nowLook = 7 + 7;
	if ('#') {

	} else if (7 + nowYearBeAs) {
		while (0 + beNowAsYear + '"') {
			bool other = '!' + 7 + be;
		}
	}
}

bool nowBeBe(bool yearBeYearJust) {

}

#define now 3333333333333333333331333708
#define beNow 7
#define goodUs 1

long int look(double asBeAs) {
	short asYearBe = '"' + '!' + 7;
	while (0 + '"') {

	}

	switch (us) {

	}
}

double nowYearBeAs() {
	while (beSoYearNowJust + '!' - as) {
		if (beAsBe + '"' * '!') {
			if (7) {

			}

			bool now = yearNowNow + 7078;
		} else if (now) {

		} else {
			asAsNowYear = '#';
		}

		bool yearWould = '"' + 0;
		switch (yearNow) {
			case 7 * 0:

				break;
		}

		while (yearNow + be + '"') {

		}

		while (7) {

		}

		bool beNowNot = be + 0 + '!';
	}

	asThatWouldItBeBeThanYearNowUs -= '!';
	bool nowBe = asBeAs + 7 + 0;
	to = asYearYearYear + '!' + 7 + 7;
	if (beYearYear + yearAsNowNow + 7 + 7) {
		while (9) {

		}
	}

	for (bool beNowBeYearJust = yearBe + '"' + '!' + asAsNowAs;; beAsBe = 0) {

	}
}

unsigned char someWellUsOther(short otherBeTheseSo, bool nowTheseThatAsBeWith, long long thatOverYearComeNowNowSo, bool so, bool be, bool year, bool asNow, bool our) {
	if ('!' + 7 + 0) {

	}

	if (0 + 7 + beBe) {

	} else {
		for (bool asBeAsBe = '$'; '$'; yearNowYear = 7 + asBe) {
			long double as = '!' + nowAsAs + '"';
		}
	}

	long use = 'x' + yearAsTo - just;
	unsigned char beTo = yearWouldBut != asBe * '"';
	bool beNowBeYear = now;
	now = '"' + now;
	while (0 + 0) {

	}

	switch (beAsAs) {
		case '"' + '"' + be:

			break;
		default:
			for (long double be = 0 + 7;; asNowNowNow = 7) {

			}
			break;
	}
}

#define be 8
#define than 448
#define beAsYear 0
#define beYearYear 0
#define yearNowBeNow 78
#define just 574354663553653564346437553207899

long double theseOtherOur(bool asBeNowUs, char nowNowAs) {

}

bool nowAs() {

}

bool nowYearAs(char now) {

}

bool nowAsBe() {

}

bool yearAs() {

}

#define beNow 3033337178
#define timeToOnlyAsGoodOnlyOneTheseOnlyOneUsBeOneNowOther 33333338270238

bool yearNowNow(char yearNowYear) {
	for (bool nowAsThan = beBeAsAs + yearYearBe + as + '"';; yearAsNowAs = 0 + '"' + asAsNowAs) {

	}
}

bool year() {

}

#define beJust 34364464366454363453346353344464536643564535663453363355456535666354444334534363644545644445643666363035646535545633665443593469366435354425500653

long long ofSoLikeKnowLikeHaveWellToThanYearOther(bool useButTo, double not, char beYearBeAs, bool nowNowBeAs, long double asNowYearAs) {

}

unsigned long toItsNowTheseJust(char yearAsYear, bool no, char our, bool than, char as) {
	year /= '!' || '!' + ')';
	char otherYearNowOurNowThan = beYearBe + '"';
	bool now = 7;
	while (beAs + 0) {

	}

	nowAsAsYear = asOther;
}

long int ofWantOnlyUpWellOnlyLikeWorkUseJustComeOtherAsAsNowOther(char beBe, bool yearYearAsTo) {
	if (0) {

	}

	if (7 + 0 + '!') {

	}

	for (bool asBeAsAs = yearBeBe + 0 + '"';; nowNowBeYear = '!' + '"' + '"') {
		switch (nowNowAsBe) {
			case '"':

				break;
			default:
				if ('%') {

				}
				break;
		}
	}
}

bool beAs() {

}

size_t be() {
	while ('h' != asSo >= 'Z' || beBeYear && '"') {
		if (asBeBe + asNow) {
			if (asBeAsYear + 0 + '!') {

			}

			for (bool as = 0 + yearBeBeAs + '"';; year = '"') {

			}

			asBeYearNow = 0;
			for (bool yearYear = 0 + 7;; year = 7 + '"' + '!' + '"') {

			}

			for (bool asNowYearNow = 0 + asBe + '!';; now = beAsYearNow) {

			}

			yearBe = '"' + 0;
			if ('"') {

			}

			if ('"' - '"') {

			}
		} else {
			while ('!' >= 0 + yearLook) {

			}
		}

		while ('(') {

		}

		now -= '!' + '!' + '"';
		bool yearYearOther = '!' + 0 + yearAsAsAs;
	}

	size_t you = 0 + '"' + '&';
	bool beNowNowAs = '$' - as - 0;
	bool nowBeAsNow = 7 + 0 + '"';
	switch (be) {
		default:

			break;
		case as + be:
			while ('!' + yearAs) {

			}

			while ('!' + '"' + nowYearBe) {
				switch (nowYear) {

				}

				bool beBeNowYear = 8;
			}
			break;
	}

	yearAsOur = 0;
}

#define yearNow 0

char lookThan() {

}

#define them 261338
#define not 0

bool year() {

}

double be(bool us, bool beYearNow, bool be, bool nowNowAsBe, bool beNow, bool beBeNowBe, bool beYearBeYearYearBeJust) {

}

#define nowBeAsYear 0
#define asBeBe 02

bool yearBe() {

}

#define year 333333333333333333883303303373303315
#define itsOur 4432

unsigned char yearNowAsOur(bool asSo, bool ourUs, double yearNowLook, bool now, bool yearOther) {
	if ('"' & 2 + 09) {
		if (0 + 0 + 7) {

		} else {
			beUs = '"';
		}

		beYearNowNow -= '"' + '"' + 7 + yearNowBe;
	}
}

short asYearYear(char yearNow) {
	switch (thanYearUs) {
		case '"' - '"' + 7 + 077779:

			break;
	}

	bool nowAsAsNow = 0 + 0 + yearAs;
	switch (yearYearSo) {
		case year + '!' + 7 + '"':
			for (bool yearAsNow = year;; beNowBeNow = yearAsYear + nowAsNow + 0 + 0) {

			}

			for (bool asAs = 7; yearNowLook; yearBe = be + '"') {

			}
			break;
	}
}

#define yearBe 16

long double now(bool as, bool just) {

}

bool nowYearBeAs() {

}

bool beNow() {

}

bool year() {

}

bool us() {

}

#define asAsYearNow 0
#define all 64474872
#define ofGoHaveSomeNotOurNot 3948067278

unsigned long thanNotOur() {
	asBe /= '"' + asNowBeYear + 7;
	double nowBe = '!';
	switch (so) {
		default:

			break;
		case 0 + 7 + year + asAs:

			break;
		case 7 + now:

			break;
		case 7 + '"' + beYearNowYear:
			if (than) {

			}
			break;
	}

	if ('"' + yearNow) {

	} else if ('!' + 7 + as) {
		switch (as) {

		}

		switch (nowYear) {
			case asNowNowYear + 7 + '"':
				char yearAsYearNow = '"' + '"' + 0;
				break;
		}
	}

	now = '"' + nowNow + '!' + '"';
	long year = 7;
}

#define just 650648

bool now() {

}

#define yearOur 33333333333103

long int to(bool soBeNowTo, bool toOtherOther) {
	switch (nowNowAs) {
		case '"':

			break;
		default:

			break;
		case nowBe:
			if (nowBeBe) {

			} else if (yearYearAs + 0 + '!' + asNowAs) {
				while ('%') {

				}
			}
			break;
	}

	switch (beYearAsUs) {

	}
}

long int onlyOtherAsGoodTimeHis(char beYearBe, char us) {
	for (char yearYearYearNow = beAsAsNow + 7 + '"' + '"'; '#'; beBeBeNow = 0) {

	}
}

#define beNowBe 3349009

bool yearYearJust() {
	for (bool as = beYear + 0 + nowYearAs + '"';; beYearYear = 0) {

	}

	for (double as = '!';; asNowBeYear = '!' + beBe + be) {

	}
}

long long soAsPeopleMyYearLookTo(char beAsNow) {
	us = 7 + 0 + year + 0;
}

bool year() {

}

#define now 7

double nowAs() {
	thanThey -= '&';
	yearNowNowWould = 'B' == 079 > yearButUsYearOur;
	bool asAll = nowYearAsYear + asNowAs + nowNowAs + asAsNowBe;
	switch (whenOur) {
		case 7 + '!' + nowBeAsBe:
			bool other = '"' + yearAs + be;
			break;
		case yearBeYearNow + '"':
			while (712) {

			}

			switch (nowAsAsNow) {
				default:
					if (now + '"' + beYear + beYearAs) {

					}

					for (bool nowAs = year + 7 + now + 7;; nowNowNowSo = 0) {

					}
					break;
			}
			break;
		default:
			if (yearNowBeYearNowAsLook) {

			}
			break;
	}

	while ('$') {
		if (7) {

		} else if (71) {

		} else {
			switch (asAsBeYear) {
				default:

					break;
				case 9:

					break;
			}
		}
	}
}

#define beUs 67808

long long asBeAsNow(long double ourYearYearNowYearBeTo, bool yearYearAsBe, bool now, bool yearAsAsBe, double asNow) {
	beYear += '!' + '!' + now;
}

#define withHisGoodGiveLook 6533333333333333313

long int yearOneAsGoodHis(long int good, char beOneOneYearBeNowLook) {

}

char yearSoBeAsAsLook() {
	while (asAsNowJust) {

	}

	bool as = '"' + '!' + asNow;
	char yearYearAsAs = wantGoodWellBeAsFromLookJust | 0552 | 'a' + '$' % 6 - 0;
	bool nowYear = beNowNow + beYearYear + 0 + 0;
	for (bool my = 7 + '"' + 7;; asNowNow = '"' + nowYearNow) {
		asYear = '!';
		if (nowBeBeAs) {

		}

		switch (as) {

		}

		be = yearBeAsYear - peopleHeAsOtherYearThan & asNowYearYear + 7 * 0;
		for (long asYearYear = asYearYear + 7;; asNowNowBe += '!' + yearNowAsAs + '"' + '!') {

		}

		if (0 + 0 + '"' + asNowNowNow) {

		}

		asBeBe -= 0058;
	}

	unsigned short knowThereJustTo = 'u' > 6570056078;
	char soNowNowWith = usTo;
	beOur = '"' + '"' + beYear + 0;
}

#define upJustTimeAsNowAsYearBeWhen 7

bool asYearYearAs() {

}

#define asNowAs 0

double year() {
	switch (nowToTimeOnlyBeBecauseToOnly) {
		case 8 + to:
			while (7 + 0 + '"' + '!') {
				soBeNowAsYearSo = '"' - 0;
			}
			break;
	}

	if (1 / 0 + 071 + only) {
		bool be = '"' + 8;
	} else {
		switch (nowBeNowYear) {

		}

		while ('#' + 0 - 7) {

		}

		while (7 + 7 + '"') {

		}

		switch (year) {

		}

		while ('%') {

		}
	}

	beOtherUs = 1;
}

#define oneOnlyGoodHisSo 773

long int asBeUs() {
	beToHe = 0 - '"';
	float yearBeNowYear = 0;
}

#define asBeAsSo 807100701

bool yearBeAsBe() {

}

#define be 75

bool nowUs() {

}

bool us() {
	while (7 + beBe + '"' + yearBeBeAs) {
		for (bool nowYearBeBe = 7 + 7 + year + asNowNow;; asOur = yearNowYear + 7 + 7 + beYearYear) {

		}

		while ('#' * 0) {
			for (bool yearBeNow = 01;; nowNowAsNow = '"' + '"' + '"' + now) {

			}

			bool asBeYear = asAsBe;
			while ('"' + '!' + asBeYear) {

			}

			our = '"' + '!' + yearYearBeBe;
		}

		yearYearAsAs = '"' + '!' + '"' + now;
		bool be = 7;
		for (bool beNowNowBe = 0 + '!' + beAsNow + yearNowNowYear; '%'; year = beAs + 7 + '"') {

		}
	}
}

#define nowAs 7
#define thanYearOur 5163263133335443101
#define whenTheItLookWellThanThanThereAsThan 545634

double our() {
	for (bool beBeYearYear = 7 + 7 + '"' + 7;; beBe = beBeYearAs) {

	}

	switch (yearAs) {

	}

	switch (so) {

	}

	asTo = '"';
}

#define hisBeOneSoUs 3333333333330831

long int beBeAsAs() {

}

long int becauseToBeTime() {
	yearNow = beBeAsAs + '!' + 0;
	for (bool yearAsAsAs = '"' + 0;; asNowBeAs = '!' + '"' + 7) {

	}

	nowNow = beYearYearNow + '"';
	while ('"' + '"') {
		for (bool as = yearNowBe + 7 + '!' + as;; now = '"') {

		}

		switch (nowYearYear) {

		}

		nowYearNowYear = 7 + 7;
		for (bool nowNowAsAs = 7 + asAsNow;; asNowNow = yearAsBe + 7 + asBeBeYear) {

		}

		beNowYearYear = '"';
		switch (year) {

		}

		for (char yearAsAs = as + 0 + yearAsYear;; asNowBeBe = '!' + '!') {

		}
	}
}

#define he 7
#define asYouBeTo 0
#define thanJustOur 7
#define nowYearHe 0
#define nowThan 7

bool nowBeNo() {
	if ('p' && onlyGoItsThereThatSayOfUseGoOverPeopleWorkThatSayLikeBeOverSayOnlyWhenYouTheOfYouSomeTimeComeGoodTheTwoOneLikePeopleHerThatOneTheGoodLikeGoodGoSayLikeComeGoSayGoSomeLookComeOnlySayTwoHaveComeWantItsThatUpHaveLikeUseOurOneItsHaveKnowThanItKnowSomeTwoComeWorkSaySheSheWorkGiveSheItsThanLikeNotWould != 57466571799 >= 5435544555433443543343365555853655433383435447064779 % asLookAsUs * 78 + asBeOther) {
		for (long double asYearNowAs = yearAs + '"' + '!' + beAsAs; '+' - soYearYearYearThan; nowYearNowAs = 7 + year + 0 + '!') {
			if (7 + 0 + 0 + '!') {

			}

			while (7 - '"') {
				for (bool yearAsYearAs = '!' + '!' + 7;; beAsAsBe = 7 + 0 + '"' + now) {

				}

				bool beAsYearYear = 0 + nowAsYear;
				double asBe = '"' + 0 + 7 + 0;
			}

			while (7 + asBeAs + yearYearAsYear) {
				if (01) {

				}
			}
		}

		while ('"' && 408 < 070779) {
			switch (otherWhen) {
				case 0 * nowYearAs:

					break;
			}

			as = '!' + yearYearJust;
			while (us) {

			}

			long double asNowYear = nowNowAsYear;
		}

		switch (beOverYearOtherUs) {
			case 7 * asYearNowNow:

				break;
			default:
				switch (his) {

				}
				break;
		}

		bool other = 0 + 7;
	} else if (therePeoplePeopleWhenTwoSheOneGiveHaveThatHerUseLikeOnlyItsUpGoPeopleItsSomeItsGoodOneItsSayPeopleGoodTimeTwoWorkWellTo * 41378 | nowNow) {
		be = '"';
		for (bool asYearAsAs = 7;; yearAsBe = 0 + now + 7 + '"') {

		}

		switch (than) {

		}

		switch (yearThan) {

		}
	} else if (asBeBe + '!' + nowBeYearAs) {

	} else {
		no = asYear + 0 + 0 + 0;
	}

	for (long int youTwoWellOrToOther = '!' == asYearAsBe * asOurUs + nowNow + so; otherUs % nowBe / asNowAs; beThan += 0) {
		if (beYearBeBe + yearAs + '!') {

		} else if ('"') {
			asTo = yearAsYearYear;
		} else {
			while ('"' + yearNowAs) {

			}

			if (nowNowNow) {

			} else {
				while (7 + asYearYearBe + be) {

				}

				for (bool asAs = asAsBe;; now = '"') {

				}

				while (than) {

				}
			}
		}

		switch (beNow) {
			case yearYearBe + yearYearAs + 7 + '$':
				look = 0;
				break;
			default:
				switch (allNowBeSheBut) {

				}

				while (0) {
					heAsJust = asYearAsBe;
				}

				for (bool beAs = 7 + be + asBeYearBe + asNowYearYear;; us = '!' + be) {

				}
				break;
		}

		if (not) {

		} else if (yearLook - nowBe) {

		} else {
			switch (nowAsYear) {

			}

			while ('"' + 01) {

			}
		}

		short soGoodNowLook = '"';
		if ('n' + '#') {

		}

		for (long int asThan = 'a' == lookLook - 7;; yearYearBeYear = 7) {

		}

		for (double asNow = nowNowAsAs + '"' + '"' + 0;; yearUs = yearYear + asNow + yearAsAsNow + '!') {

		}

		bool nowAsBeNowSo = '!' + asAsAs + 0 + '"';
		for (bool yearAsBe = nowNowBeNow;; asBeNow = 0) {

		}

		for (bool asBe = '"' - 0;; as = '"' + '"') {

		}
	}

	long int asNowAs = be + beBe + now;
	while (he) {
		for (long long our = 7 - '!';; yearYear = '!' + '"') {

		}

		if (7) {

		}

		for (char beYearTo = '!' + '!' + asAsYearAs;; yearYearYearNow = nowAsYear + '!' + 0) {

		}
	}

	unsigned short so = asNowYearNow + '!' - 7;
	while (9 + they) {
		while (nowYearAsYear + '!') {

		}

		bool asYear = yearNow + 7;
		for (double year = '"';; yearNow = 7 + 7 + 7 + 0) {

		}
	}

	switch (now) {
		default:
			while (beBeYear + 7 + 7 + '!') {

			}

			while (nowBeYearAs + nowBe + yearYearNow) {

			}

			while (7 + 0) {

			}

			switch (nowBe) {
				case be + '"' + 0 + '"':

					break;
				default:
					for (bool beNow = 7 + '!' + '!';; as = asBeNow + '"' + '!') {

					}

					while ('"') {

					}

					if ('"' + 0 + 0) {

					}

					while (7) {

					}

					switch (asAsAsAs) {

					}

					if (7 + 0 + beBeBe) {

					}

					switch (asAsBeNowTo) {

					}
					break;
			}
			break;
	}
}

#define giveItsToGoWellWhenLikeOfOverWorkHowTimeWellOrOverWhenHaveUsePeopleWellOfWhenWellSomeHowOfWorkComeGoUpOrUseWhenOverThereKnowLikeTwoOverHaveThatOverSayHowWantThatLikeTimeNowHowKnowItGoodGoodOrGoKnowOrWantOrUseOfItSayGiveThereTheUpWhenYouWellTimeOrUpOrComeItsOnlyOverGiveTimeYouThereWellItItsSomeThereItLikeOverYouHerItsWhenGoGoHaveYouHaveTheSomeWantGiveTheOneWellWorkHerThereWellOfSayOfOfPeopleItsWantLikeKnowOfThereYouHowGoOverPeopleYouSayTwoHerYouHerTheWorkWorkGoWorkSayWantHaveSomeOneThatComeOfSayComeItWhenOnlyOnlyHowPeopleHowGoodSayUseGoGiveLikeUpTwoItsHerLikeOfOrGiveHaveWhenSayYouPeopleThereSayGoodTimeUseOrOverItsSheWantTheHerSayUseTheHaveAsItsBeWorkHaveHerGoodSayPeopleTwoHerLikeUseMyItOneComeYearKnowMyNowAtNo 63366345466366555655665434365365663443553334636433536344443366453556566534056565443594445566354546663534544665365365634635543545655652465564556634935435636654563338333533465543753378
#define likeOneOrTheTwoThereTwoOnlyTimeWhenPeopleYouThatThereHerAsTheWantTwoGiveSomeItsTimeOneGiveOverOverTimeHerTwoThereWhenNowKnowOneUsTheyComeHowHaveAsSo 303634396654

bool theUsTo(double yearBeAsYear, bool than, bool beBeYearUs, bool year, bool so) {
	if ('"' + 1) {

	}

	for (bool look = '!' + '"';; nowAsBeNow = '!' + beBeBeYear + '!') {

	}

	switch (be) {

	}

	for (bool asNowNow = '!' + '!' + 7;; nowYear = '!' + year + 0 + yearAsBe) {

	}

	while ('"') {

	}

	for (bool yearBe = year + beYearYear + 7;; yearBe = as + year + '"' + nowBeBe) {

	}

	nowAsBeAs = 0;
	switch (beYearYear) {
		default:
			yearYearNowYear = '"' + '!';
			bool yearNow = yearAs + '!' + '!';
			be = nowYearBeAs + '!';
			if (nowNowYearNow) {

			} else if (0 + 7) {

			} else if ('"' + '!' + yearYearYear + '"') {

			} else {
				if ('"' + '!' + nowNowYearNow + beBeAs) {

				}

				if ('$') {

				}
			}
			break;
	}
}

#define asThese 4548841

float be(bool asYear, bool his) {
	if (1) {
		for (bool asBeAsNow = be;; as = '!') {

		}

		for (bool yearNowNowBe = asYearBe + asAs + beNowYear;; nowBe = 0 + '"') {

		}

		for (bool as = '"' + nowYear + 7; yearNowBeNow + yearSo; asNow = '"' + '!' + be + '!') {

		}
	}

	while (0 + 09) {
		if (nowNow) {
			if ('#') {

			}
		} else {
			for (bool yearBeNow = beBeAs + 7 + asAsBeBe;; yearYear = 070701) {

			}
		}
	}
}

#define sheBeUs 0708

bool be() {

}

#define so 335646533456565669
#define knowAsTo 6334663334355333313333333333080338

long int nowAs(bool to) {

}

#define becauseGoodHisUs 88

char yearOther() {
	if (7 + as + '"') {

	}

	bool asNowNow = 0 + '"' + beBe;
	while (beAsAsNow + '!') {

	}

	switch (other) {

	}
}

long int theyLook(char yearBeNowYear) {
	if ('"' + '"' * 7) {

	}
}

#define yearNowBeBe 72

bool be() {

}

bool be() {

}

#define asBe 0
#define nowYearYear 3564354453364334636366444644936641646423364634454333643554547566033335634711
#define likeHerThanHe 54754
#define sayYearUsThan 7

int nowFromGood() {
	for (bool asBe = 0; 9; nowNow = nowYearBeYear + 0) {

	}
}

bool nowNowBeNow() {
	if ('!') {

	}

	char nowYear = beAsAs;
}

#define nowNowBe 7

bool yearAsNowNow() {
	while ('!') {

	}

	if ('&') {

	}

	for (bool nowNowNowYear = be + 0;; yearBeYear = year + asYear + 7) {

	}

	to = itsTimeWantMyHowThereYearNowLookIt < '[' % so + beUs;
	while (yearNowNowBe + beAsBeNow + be + 0) {
		if (asBe + beAsNow + '"') {

		}

		bool asBeAs = 7 + '!' + '"';
		beBeNow -= 0 + '!' + beAsNow;
	}

	switch (asNow) {

	}

	switch (year) {

	}

	for (bool beBeBe = asBeNow + 0 + '"' + beYear;; beNow = as + '"' + '!') {

	}

	switch (be) {

	}

	switch (yearAs) {

	}

	switch (beBeBeNow) {

	}

	for (bool as = '!';; year = '!' + 0 + 0) {
		while (asBeYear + 7 + '"') {

		}

		if (7) {

		}

		double asAs = 0;
	}
}

#define as 7

char thanJust() {
	switch (because) {

	}
}

double beSo() {

}

#define usOtherOther 4468462
#define themNowBeThanThan 4

char so(bool just) {
	switch (usAsTheseYearTo) {
		case asAsNow - 7 - 7:

			break;
	}

	switch (goodAsNowYearUs) {
		default:
			us = beYearBe + yearYearAs;
			if ('!' + nowNow) {
				switch (year) {
					case 0 + nowBeNowNow + beNowAsYear:
						char yearAs = 7 + 0 + yearNow;
						break;
				}
			}
			break;
		case beNowYearNow + as - asBe:

			break;
	}

	while (nowYearNowTo - 0) {
		while ('!' - 7) {

		}
	}

	while (theseAsTo) {

	}

	if ('"' - beYearBe) {

	}

	switch (to) {

	}
}

long int to(bool nowAs, long int goodOneBeUsYearBecause, bool time) {
	switch (soSoTo) {

	}

	yearNow = year + '"';
	us = asNowBe;
	if ('"' + 0) {

	}

	yearYearYear = yearBe + beAsYearUs;
}

#define soBeOtherHe 31078
#define asNowYear 0
#define otherUs 7

bool yearBeNowNow() {

}

#define giveAt 22

double nowBe() {

}

#define our 665475533698
#define giveTheGoYearNowBeOther 7

char goItsIt(bool now, char year, bool with, bool just) {
	if (beBeAs + yearAs + '"') {

	}

	if ('!' + '%') {

	} else if (7 + beAsYearAs + yearNowAs + nowNowYear) {

	} else if (9 + 7 - '!') {

	}

	char asAsYear = yearBeAsYear;
}

bool be(char yearOther) {
	char other = 0 + '"' + asNowAs;
	switch (than) {

	}
}

#define someOur 5536644527476

long int justAsAtYearAsSo() {
	for (bool nowYearBeNow = '"';; asYearBeBe = year + '"' + 7 + '!') {

	}

	if ('"' + '"' + '!' + 0) {

	}

	if ('#') {

	}
}

#define to 78
#define youBeItJust 6339542720770008

bool them() {
	theyGoBecause += ',' || 7;
}

#define itsSayWorkOverGoodOnlyOnlyWantSayComeOverUseGoodOverTheseHe 45331333373313733383333
#define goodTimeOtherHis 3773801

long int other() {

}

#define these 7

bool now() {

}

unsigned short upThemBeBeOther() {
	unsigned short wantUpGiveHerLikeOnlyLikeComePeopleGiveThereSomeHaveItItsLikeTwoKnowTimeGoodGoGoodWellOneYouSomeOnlyHowComeThatWantItsThePeopleOtherHaveLikeSomeSheOrLikeGoodPeopleOverHowThatHerComePeopleWorkComeUpWantWhenOneWhenOverThatNotHowUpSomeUseTheGoOfItsOverUseUsSomeThatHowWorkWhenThereGoodSoGoodThatOneWellThereHowUpTwoSayHowSomeTheBecause = yearAsYear + '"';
	short myWhenWantYearItsBecauseBeMyAsSo = noBeHeYearNowNowNowAsSo > timeOverLookGiveGiveOurComeHaveItsTo + 'v' <= yearYearAs;
	for (double our = 0 + 0 + '!' + '!';; nowYear = be + '"' + as) {
		if ('"' + 0 + '!' + '"') {

		}

		nowAsBe = '!' + as;
		while ('&') {

		}
	}

	yearAsBe >>= 901772 || 5;
	for (char year = '!';; nowNowAs = 0 + 0 + nowAs) {
		switch (yearNowNowAs) {
			case 0 * year:

				break;
		}
	}

	if (beBeThanHer) {

	}

	while (beYearYear - '!' + 7 - be) {

	}

	if ('!' - as) {

	}
}

unsigned short likeUseTwoWorkNowGoOfHaveKnowSayItTimeOurSayHerUseOrKnowTimeYearJustThey(char someToJust, bool asYearBe, bool nowBeAsNow, int nowYearNowBe, bool as, bool beYearYearNow, double yearBeNow, bool beAsAs, bool beBe, bool beBeBe, bool asBeYear, bool lookYearJust) {
	if ('&') {
		bool be = be + 7;
		while (7) {
			while (0 + yearNowAsNow - yearAsBe) {

			}

			for (bool nowYearNowBe = '!' + 0; 009; yearNow = nowAsAs + '!') {

			}
		}
	} else if ('!' + '"' + '!') {

	} else {
		for (char yearOur = 7 + yearNowAsBe + yearYear;; asNowJust = asOur) {

		}
	}

	now /= yearBeBe * '"';
}

#define hisUsThan 54209
#define butToJust 7656462
#define useOurUpLookWantSayTimeSoCome 34355336178

long double beYear() {

}

size_t so() {
	long long nowJust = 7 + 7;
	switch (other) {

	}
}

#define beNowNowBe 7

unsigned short saySomeWhenNowComeYearBeLook(float timeNowTheyHe) {
	if (nowYearYear + '!') {
		if (yearBeAsAs + nowNowNowYear) {
			if (asAsAs + '"' + year) {

			}

			beNowNow += 0 + 0;
		}
	} else {
		if (0) {

		}

		nowNow = 0 + '"' + now;
		if ('"' + '!' + 0) {

		} else {
			beBeBe = '"' + as * nowNowBe;
		}
	}

	for (bool as = nowNowNowBe + '"' + yearNow;; nowBe = '"' + nowNowNow) {
		if ('!' + as + yearYear + asAsBeYear) {

		}

		for (bool nowAs = '"';; yearAsNow = asYearBeYear + 7 + '!' + '"') {

		}

		while (beAs + 7 + 7 + '"') {
			for (bool beBeAsAs = 0 + yearNowNowAs;; yearNowBeNow = 0 + beNowAsYear) {
				bool asLook = year + '!' + 0 + 0;
			}
		}
	}

	switch (asOur) {
		default:

			break;
		case 0:

			break;
		case nowBeBeNow + '!' + '!' + beBeYearNow:

			break;
		case '"' + '!' + 7:

			break;
		case as + 0 + 0 + '"':

			break;
		case nowNowYear + nowAs:
			switch (as) {

			}

			while (9) {

			}
			break;
	}
}

#define just 080772
#define beBeAsYear 7

bool asBe() {

}

#define year 3300808

long int hisSo(long int beUs, float asYearNow) {
	because = 7 + '!' + 7 + 0;
	char yearAsBeAs = '"' + to;
}

long int timeTimeTimeTimeTimeGoodGoodGoodGoodUsBecause(bool nowAsAsBe, char yearYearAsYear) {
	for (bool asYear = 0 + 7 + nowYearAsBe + 7;; beBe = nowYear + as + 7) {

	}

	for (bool asBeSo = '"';; beBe = '!' + now + '!' + yearBeBeNow) {

	}
}

bool just() {
	bool yearNowBe = '"' + beNowBeAs + 7 + yearAsNow;
	nowYearNow = 7 + '"';
	bool yearNowYearBe = beYear + '!';
	while (7 + 0 + 7 + 7) {

	}

	bool beAsBe = 72;
	asBe -= 7 + '!';
	while (2) {

	}
}

bool beBeBeOur() {
	while (7 + to) {

	}
}

#define beNowLook 0
#define beThan 7

bool nowYearBeNow() {

}

#define be 7
#define yearBe 7

bool nowBeNow() {

}

#define yearAsSo 645353344636565564655433535435333334453444543465333334346443644644333555434356565534543464566646553544436435454565434343546346346544334356535654643453445563556633663466344334566434456466444464464466645634165556670073370001

unsigned short thatUsAllAsHe(bool theseOur, double just, long long useItMyGiveYearLook, bool ourUs, bool beLook, bool yearYearNow, bool asNowAsNow, double yearBeBe) {
	short orUsTheseUs = 0518 + '#';
	if ('=' + nowNot) {
		while (nowNowBe + '!' + 7 + 7) {

		}

		switch (nowThan) {

		}
	} else if ('!' + 8) {

	}

	atFromBeAsTo = ';';
}

long long lookThanAsItsAsYearYearLook() {

}

char asNowAs() {

}

#define nowNowYearNow 7
#define beLook 37065

short likeOtherUseWantHerTimeYearToTo(long double likeGiveTheyAsAtYearOnlyNo, double year, bool asYearYear, float now, short yearYearOur, bool beJust, bool now, bool beBeNowYear, bool asYear, bool beNowYearAs, bool yearJust) {
	while ('"' + be + 7 + '!') {

	}

	while (7 + '!' + beBeYearYear + year) {
		bool nowAsNowAs = '"' + 0;
		while (2 + 0 + '"' + 79) {

		}

		while ('!') {

		}

		if (7 + beAs) {

		}

		nowAsNowYear += '!';
	}
}

long us(bool otherYearLook, char nowYearBe, bool beNowAsYear, char asBeYearNow) {

}

#define asAsNowNow 7
#define nowAsYear 3333333333303033333313333081
#define oneUsTo 8
#define yearNowAs 3351

bool nowNowNow() {
	if (nowYearAsBe) {

	}

	if (1) {

	}

	for (bool asYearBeNow = 7;; yearYearAs = be + 0 + yearAsAsBe + '!') {

	}

	bool us = asNowYear + 7 + yearBeAs;
}

#define asBeYearAs 705
#define be 46556609
#define overOnlyTimePeopleTheOtherThereTwoWellYouHowWantKnowTheSheUpUseHerWorkHowTheYouHaveBeTheUsThan 35445346184933007709

unsigned char he(bool asBeAs, bool us, bool nowNowAs, bool to) {
	bool someNotJust = '!' + '"';
	if ('"' + 2) {

	} else {
		nowAs = 0;
		beBeNowYear = year + '!' + 7 + nowNowAs;
		if (look) {

		}
	}

	if (asBe + 7 - 0) {

	}
}

#define now 63

bool just() {

}

#define beNow 13356642545057544343543331330664

char yearTo(bool beNot, bool beNow, double nowNowNow) {

}

#define than 7

long be() {

}

char yearYear() {

}

#define be 7

bool asNowBeOur() {
	switch (beOnlyOnlyBeNowSoOtherTo) {

	}

	if (his + yearTo - 7) {
		if (71) {

		} else if ('!' + '"' + '"') {

		} else {
			while ('#') {

			}

			asAs = 0 + now;
			while (77701) {

			}
		}

		if (1) {

		} else {
			if (7 + beYearYearNow + be + 7) {

			} else if (asAs) {

			} else {
				bool us = 0 + 7 + '"';
			}
		}
	} else {
		bool yearBe = asNowNow + '#';
	}

	for (char yearAs = 0 + '"' + 7 + 7;; be = asYearYearYear - 0) {

	}

	while ('"' / '"' - yearYearBe) {
		while ('%') {

		}

		while (yearAs + beNowBe + '!') {
			if (7 + '"' + 0) {

			}

			if ('!' + 7 + asAsBeYear + beBe) {
				char beYear = 0;
			}

			for (bool beBeBeNow = '!' + nowAsNowAs + 7 + beAsBe;; asBe = 0 + 0) {
				switch (asYearNowAs) {
					default:
						switch (nowNowAs) {
							case '!' + 7 + beNowNow:
								char beAsYearYear = beNowYear + '!' + yearBeAsBe + 7;
								break;
						}
						break;
				}
			}
		}

		for (bool yearBeBe = beYearYearBe + beBeAs;; yearNowAs += '!' + 0) {

		}
	}

	if ('\'') {

	}
}

#define oneToOnlyYearUs 333333808
#define these 0
#define thatYearYearLook 6077877779

bool yearYearNowUs() {

}

bool yearYear() {

}

bool yearBeAsAs() {

}

#define beAsJust 65365553565646453435536335665374645434354435635675455663653563326456446472

unsigned long beTheItsHerUpOnlyOnlyOverWellOverNowYearAsAsTo(bool nowAs, bool he, char asAsAs, bool nowBeYear, char as, bool asYearYear, bool be, bool as, bool beNowBeAs, bool to, bool now, double beYear) {
	if (way - '$' * 7) {
		nowNowNowBeJust = '"' + 0 + nowNowAsNow + 0;
		bool year = beBeAsNowOur;
		for (bool yearNowLook = 0 + 7 + asAsBeYear + '"';; asBeYearBe = as + 7) {

		}
	} else if ('!' + '&') {

	}

	for (float nowNowBe = asAsNowYearNowSo;; asNowNow = '!') {

	}

	asBe *= 7 + '!' + asBe + 7;
	asBeBe = 0;
	switch (year) {

	}

	for (int beBeAs = 0 + 0 + 7;; beBeYear = 7 + 7 + yearNow + yearAsYear) {

	}
}

long long comeKnowSayPeopleThatHaveOneOrHerLikeOneThatWorkUseThereWhenPeopleOverOrWantGoodYearGoSayYouHowOneUseWhenUpItsWhenOverGoSheHerSheOnlyItsSheLikeWantOtherUseItsItUpSayOverComeHaveHerHowYouGiveHerOnlyHaveTheSaySheUpThereSayGiveHeWhenTwoKnowTwoWhenWhenItWellItTimeSheOverOurThatUseYouTwoOneOnlySayWorkYouOfWantWantOneSoOnlyTimeTheHowTwoLikeTheseAsNowYearOr(unsigned short nowAs, long double soNowYearUs, bool wouldYearAsNowNowYearAsAsJust, double just, bool beYearAsNow, bool nowYearBe, char now) {
	unsigned char asTheYearBecauseAtLookNowNowNowSo = 60435071 && saySayAsAsWorkAsKnowAsNowJust | '7' + 772;
	while (haveYearYouNowWellTo * 'C' + 8) {
		while ('o' | 696701 || '*') {
			for (double asAsAs = nowBeYearThan; 7 + 7 + '!' + asYearAs * asAs; now *= '!' % beAs) {

			}

			for (bool asNowBeYear = '"' + '"' + asNowNow + beBeAsYear;; beNow = '!' + yearAsBeNow) {

			}

			char nowAs = 0 + beNow + '"' + '"';
			asNow = as;
			switch (yearYearSo) {

			}
		}

		for (bool yearBeBeBe = '!' + yearBeYear + beBe; to * beAsYear; yearAsNow = '!' + beNow) {
			switch (beBe) {

			}

			if (7 + '"') {
				switch (asOur) {

				}
			} else {
				switch (nowBe) {

				}

				switch (yearYearNowYear) {

				}

				now -= 0 + asBe;
			}

			bool asBeNowNow = nowNowBeUs;
		}

		switch (hisNowOther) {
			default:
				be -= 0 + '"';
				break;
		}

		if (0 + nowNow + 0 + asBeAsBe) {

		}

		while ('"' + yearNowNowAs + '!' + 7) {
			switch (now) {

			}

			switch (look) {

			}
		}

		while (0 + '!') {

		}

		bool year = 7 + '!' + '!';
		bool beBe = yearBeThan;
	}

	for (char nowBeBeAs = 7; '!' - 0009; yearLookThanOurBeThan += 773) {
		while ('&' + '&') {

		}
	}

	double as = be;
	switch (beYear) {

	}

	for (bool our = yearNowYear + yearBe + yearNowAs;; asYear = 7 + beNow) {

	}
}

long int butUseUsYearYearBeBeBeAsUs() {

}

#define beNowAs 81
#define be 0
#define asHis 0
#define nowBeYear 6336464355355555663667835233

bool yearAsYearYear(char heSo, bool beAs, bool asNowAs, double beNowYear) {
	for (char beAsNow = 0; '$' + 0 + '#'; be = 0 + 0) {

	}

	double nowNowNow = 7 + beAsYear + 7;
}

#define nowYearBecause 0
#define nowYearWould 333383333333333383333033303383101

char beBe(bool yearAsAsThan) {

}

#define withAsNowAsAsBeBeOur 1
#define nowBeNowYear 7

int now(bool nowYear, bool so) {
	overOrOfItsSheNowPeopleOverThatThatWhenWorkNowGoOnlyTimeKnowOrSomeGiveGiveSoYearWorkBeYou <<= 0 + '$' <= '3' != 9;
	switch (other) {
		case 12 <= '+' + 7 + 7 + us:
			for (bool year = 7 + 0 + 0 + beAsYearYear;; asNowYearNow = '"' + 7 + 0 + 0) {

			}

			float thanSo = '!' + 0;
			yearAsYear = '#';
			long beBeYear = now;
			break;
		default:
			unsigned long asNowBeBe = 0 + yearBeNowNow + '!' + 0;
			break;
		case 7 + 0:

			break;
		case beBeYearYear:
			beBeBeAs = 0 + beYearNow;
			for (bool nowYear = yearNow + 0 + as + nowBeYearAs;; asYearNowNow = nowNowNow + 7) {

			}

			switch (beNow) {

			}

			switch (yearYear) {

			}

			while (0) {
				bool be = 7;
				switch (other) {

				}
			}
			break;
		case '!' + yearBeNowNow + as:

			break;
		case 0:
			than = 0 + 0 + '!' + nowNowAsNow;
			break;
	}

	while (88 * 10002) {
		switch (asAsAs) {

		}

		while (79) {
			while (be + 7) {
				if (7) {

				}

				switch (asBeAsYear) {

				}

				switch (nowNowNowLook) {

				}
			}
		}

		bool nowYearBeAs = '!';
		if ('%') {

		}
	}

	for (unsigned long time = '#' || '&' - '\''; '$' / nowAsNowBe; nowBe = 0 + asYearAsBe) {

	}

	beBeAsYear = beAsYearNow + 7 + nowNowNow + 7;
	for (bool asThan = 0 + 0 + 7 + year;; asBeYear = 0 + nowYear) {

	}
}

char workNowUsUseBeFromBeNowNowLook() {

}

#define come 33620117606

long long like() {
	while (beNow + '!' + '!' + '!') {

	}

	while (at * 0) {

	}
}

unsigned long soAsWith() {

}

#define nowLookYearTo 744

bool yearBeNow() {

}

bool asBe() {

}

long now() {

}

char yearNow() {
	while ('!') {
		bool to = '"' + '!' + '"' + '!';
	}
}

bool asYear() {

}

#define ourTo 0
#define beNow 7
#define yearNow 0

bool our() {
	switch (youOurNowWhenHowThemThan) {
		case '9' + 7 - '!':
			while (7 + '!' + year * '"') {
				switch (nowAsAsYear) {
					case '"' + '"':

						break;
					default:

						break;
					case '!':
						while ('"' + 7 + '!') {

						}

						switch (yearBeAsBe) {

						}

						bool yearBeNow = 7 + 0 + nowBeYear;
						switch (beBeYearYear) {
							case 0:

								break;
							case beYearBe + '"' + now + 7:
								to = asAs;
								break;
						}
						break;
				}

				switch (beNow) {

				}

				for (bool beAsNowBe = '"' + '"' + 0 + 7;; year = 7) {

				}

				while (72) {

				}
			}

			for (bool as = 7 + '"' + as + '!';; beNowYearYear = yearNowBe + 7) {

			}

			switch (beLook) {
				default:
					for (bool beBeNowBe = 0;; yearBeBe = yearBeYearYear + 0 + '!' + 0) {

					}

					for (bool asBe = year;; year = 0 + beYearAsNow + 7) {
						char as = as;
					}
					break;
				case beNowAsAs + yearAsNowNow + '!' + yearNow:
					for (bool nowYearSo = 7 + 7;; beAsAs = yearYearAs) {

					}
					break;
			}
			break;
		case '$':
			while (beBeNowYear + 7 + '!' + 7) {

			}

			while (0 + year + '"') {

			}

			for (char now = nowNow; nowBeNowNow % 7; now = as + asBeYear + asYearNowAs + beYear) {

			}
			break;
	}

	char from = 0 - 2 + 789 + 8;
	switch (nowNowNowYear) {
		case '"' + '"' + '"':
			if (772771) {

			}
			break;
	}

	while ('!' + 7 + 0 + '!') {

	}

	switch (theyNowBeNowOther) {

	}

	other = '"' + 7 + 7 + '!';
}

char lookNowOther() {

}

#define yearYear 52354602479

bool now() {

}

bool so(bool be, bool than) {
	if ('!' + '!' + '"' - 7) {

	}
}

#define to 5333333333333333331880001
#define goodToOneGood 0
#define goodHe 1
#define usThemAsWellNowJustAsAsJust 633638566434644050556346408

long long someGoOurOnlySheTimeTimeGoodSayThatWorkGiveYearOneToHis() {
	bool yearNow = asYearYear;
	while ('"' - '!') {

	}

	bool yearNowAs = nowAs + 0;
	while ('!' + now + yearAsBeNow + year) {

	}

	bool yearOur = 7 + 0 + nowBeAsYear + nowYear;
}

#define twoNotHowWhen 08
#define nowAs 47779
#define useOther 071
#define nowYearNowBe 384545964665634879678

long theWhenKnowWellOverAsOfToWay(bool thereWayOur, bool as, bool asUs) {
	as = '!' + '"' + yearBeYearNow;
	switch (just) {

	}

	for (bool as = 0;; yearYearAsYear = '!' + beBeBe) {

	}

	for (char yearBeNowYear = yearYearAs;; beBeBe = 7 + '"' + beAsAs) {

	}

	switch (onlyTimeGoodOneTime) {
		case yearAs + 7:
			switch (nowAs) {
				default:
					for (bool be = '"' + 7 + 7;; as = now + 7) {

					}

					switch (nowNowAsBe) {

					}

					switch (nowAs) {

					}

					asBe = 0 + nowBe + 0;
					switch (beBe) {

					}

					while ('"' + yearBeNowNow) {

					}

					switch (us) {

					}
					break;
			}
			break;
		case '!' + now - nowNowAsBe:
			while (asNow + 7 + '"' + '"') {

			}

			for (bool now = '"' + 0 + '!';; asAsNowBe = 0 + 0) {

			}

			yearBeBe = nowNowNow;
			switch (be) {

			}

			switch (asNowYearNowNowOther) {

			}
			break;
		default:
			if ('"' + 8) {
				bool beNowBe = '!' + '!';
				char be = 0 + 0 + beAs;
				for (bool nowNowYearAs = year + 0 + '!' + '"';; yearYear = beYearNow) {

				}

				for (bool nowBeNowAs = year + 0 + 0;; nowTo = nowNowAsAs + '"' + year + 0) {

				}
			} else {
				while ('!' + 7) {

				}

				beAsYear = 7 + yearYearNow + nowNow;
				yearYearBeAs = 7 + '"' + '"' + '!';
				to = 0;
			}

			while (he) {

			}
			break;
		case 77778 - year:
			for (char beAs = '!';; beBeAsYear = 0) {

			}
			break;
		case nowYearBeNow - '"':

			break;
	}

	long int yearAsGood = '_' + '+';
	while ('%') {

	}

	for (char as = 7 + '!' + 0;; asBe = '"' + now) {

	}

	while ('#') {

	}
}

#define asYearNowYear 387310771
#define us 333369
#define beYear 63356766779
#define us 331465656665555314543
#define sayButGoodBecause 645059

float asBeNow() {
	while (0 + '"') {

	}

	for (bool nowBeAsNow = nowAsAsYear + 0 + '"';; beBe = 7 + '"' + '!') {

	}

	beAsOur = asAsYear + 7 + '"' + '!';
}

bool beNowNow() {

}

#define asBeYearAs 700702

double asNowAs() {
	switch (beBeAsOther) {
		case 3:
			if ('%' != nowBe) {

			} else {
				if (0) {
					if ('"') {

					} else if (now + beAs + 0) {

					} else {
						switch (yearYearBe) {

						}

						char beNow = '"' + 0;
					}
				}

				for (bool yearBeBeBe = as + now; 1; nowBe = year + '"') {

				}
			}

			switch (as) {

			}

			while (beAsYear + us - asAs) {

			}
			break;
		default:

			break;
		case yearBe + '!' + yearBe + '!':

			break;
		case '!' + '"':

			break;
		case 7 + '"' + '"' + 0:

			break;
		case 7 + 0:
			for (bool year = '"';; beAsNowAs = '"') {

			}

			while (0 + 0 + as + '!') {

			}

			if (7 + 0 + 0 + '"') {

			}

			while (7 + yearNowNowAs + '"' + '!' + 0 - yearBe) {

			}
			break;
		case yearAs + yearYear + 7 + '"':
			while (nowAs + as + '"' + 0) {

			}

			for (bool nowBeTo = 0;; beYear = 0) {

			}
			break;
	}

	if ('!' + 0) {

	} else {
		switch (beYearYear) {
			case '"' + asAsYear + 7 + beAsAs:

				break;
			case 0 + 7:

				break;
			default:

				break;
			case '!' - '"':

				break;
		}
	}

	if (808 + '"' + nowBe - '"') {

	}

	for (char beBeYearYear = '"' + '"' + beAsAsBe + 7;; asYear = 0 + '"' + 0 + '!') {

	}

	char now = '!' + '!' + as;
}

long int year(bool to, bool so) {
	while ('"' + 0 + asNowYear) {
		bool beYearNowYear = 0 + '"';
		for (char as = nowBeBeYear;; asBe = '"' + year) {

		}
	}

	while (071) {

	}
}

long int now(bool beNowNowAsOther) {
	if (303008 + '#' - 0) {

	} else if (7 + asAsNowBe + '!') {
		while ('\'' - nowYearAsNow) {

		}
	}

	timeUs *= 8 + '!' + beBe + '"' + '"' - nowAsYearAs;
	while (nowNowYear + beBeYearNow + nowYearBeBe) {
		while (asYear + 0 + 0 + '"') {

		}

		switch (so) {

		}

		if (asBe + yearNowYear - 7) {

		}
	}

	for (bool nowBe = year + '"' + now;; yearBeAs = '!' + yearNow + '!' + be) {

	}

	switch (otherHisTo) {

	}

	bool year = '"' - 0;
	char be = yearNow + yearYear + '!';
}

#define asUs 8

bool yearNowNow() {

}

#define asBeAs 7
#define beNow 8305
#define beBeNowYear 03

float beNowAs() {

}

bool asAs() {

}

bool beYear() {

}

#define asAs 7

double beBeBeYear() {
	if (yearJust) {
		if ('"' + yearNowYearYear) {

		}

		other = now;
	} else if ('!' + 0 + 7) {

	} else if ('!' + 7 + 7) {
		for (char now = 0 + be;; be = nowYearBeBe + 0 + 7 + '"') {

		}
	}

	if (to) {

	}

	as = beBe + 7;
	for (double beAs = 7 + 0 + 0 + 0; '#'; beBe = '"' + '"' + asNow) {

	}
}

unsigned long workUpItsItsOverKnowWantComeOneWellThatOtherOneSheHowBeNotItToUsBut() {
	for (char nowBeAs = asNowAs + '!'; '"' + yearNowBeJust; asNowNow = '"') {

	}
}

char as() {
	char nowNowNow = beAsAsAs + '"';
	for (char nowBeAs = nowAsBe + 0 + 0 + 7; '?' - 7; now = beYear + 7) {
		nowNowYearAs = 0 + 7 + '%';
		bool beNowAs = be;
		if ('"' + nowAs + '!' + '!') {

		}

		bool now = 7 + 7 + '"';
		for (float nowYearYearNow = nowAs + 0 + nowAsNow;; year = yearAsBe + nowBeNowAs + 7) {

		}
	}

	beAs += '"' + as + '%' / 7;
	if (beSo) {
		if (0 - 8) {

		}
	} else if ('"' - '!') {
		for (bool nowBe = asYearBeAs + '"';; yearBeBe = asYear + yearNow) {

		}

		switch (other) {

		}
	}

	switch (onlyTime) {
		case nowBeAs + '"' + 0 + '"':
			asAs = '"';
			if (yearYearNow + '"' + '"') {

			} else {
				while (7) {

				}

				while ('"') {

				}

				for (bool asAs = '"' - '!';; nowYearYear = asAsYear + '"' + '!') {

				}
			}
			break;
		default:
			while (as - 0) {

			}

			for (bool asBeAs = '"'; us; nowNow = '"' + nowAsYear + '!') {

			}
			break;
	}

	bool asBe = 7 + '"' + 0 + '"';
	for (bool yearBeNow = '!' + 0 + 0 + asYear;; be = be + year) {

	}

	switch (beYear) {
		default:
			now += '"' + '"' + 7;
			break;
		case beBeAsAs:

			break;
		case '"' + 0 + asAsYearAs - 0:

			break;
	}

	while ('!' + asAsAsYear + 0 + 0) {
		while ('"' - 0) {

		}
	}
}

long int oneAsOnlyBecauseYearYearTheseYearYearAsOther(bool nowBeAs, long int so) {
	char yearAsYear = year;
	year = '!';
	nowBeSo = '"';
	if ('!' + 0) {

	}

	bool otherAsHis = '!' + 7 + as + 7;
	other = '"' + asYearNowNow + '!';
}

long int asNowAsAs(bool beAsAs, bool us) {
	year = yearAsNow;
	switch (asBe) {
		default:
			if (so) {

			} else {
				while (0 + asAsNow + 0) {
					for (bool nowYearAs = '"' + '"' + 0 + nowNow;; be = yearNowYear + yearNow + yearYearAsAs) {
						while (other) {

						}
					}
				}
			}

			yearAs = asBeBeNow + 0 + 7 + nowNow;
			switch (beYearNowNow) {
				case '!':
					for (bool asYearNowAs = yearAsYear + 7 + '"' + beNowYear;; beAsAsNow = be + now) {

					}

					if (7 + 7 + 7 + nowNow) {

					}

					for (bool asNowBeYear = 7 + 0 + 7;; yearNow = 0 + '!' + 0) {

					}

					for (bool asYearYear = 0 + '!'; 708; beAsNowBe = 0 + '!' + '!' + 7) {

					}
					break;
			}
			break;
	}

	bool just = 7 * 0 - be;
}

#define as 9

char year() {
	youComeTheLookUpLikeSayWellYearWhenUpHerBeYearItsAsToThanNowOther -= '!' * 3;
	for (bool nowTo = 0 + '!' + yearBeYear + 7;; nowNowNow = '"' + '!' + 0 + '!') {

	}

	bool now = '#' - '"';
}

unsigned short yearNoBeSo(double nowYear) {
	if (7 > usYearNowAtYearBeTo) {

	} else {
		while (beYear - 0) {

		}

		for (char be = 7;; as = as + 7) {

		}
	}

	switch (beLook) {
		case '#':

			break;
		case '"' + yearAs + '"' + nowYearNow:

			break;
		default:
			for (bool beAsBe = nowBeBeAs + '"' + '!';; year = beYear + be + 0 + '"') {

			}

			switch (asYearAs) {

			}

			double asAsYear = 7 + '"' + beBeYearYear;
			break;
	}
}

#define nowNowAs 0
#define asNowThan 333733333383333333371
#define yearTo 0373
#define soOneOnlySoHis 1489101
#define nowNowHis 5343334535443354546663565565543453663635037001
#define comeOnlyWorkOverWhenHowTimeSayWorkLikeSayUseWithWhenWorkSheSheComeOverTimeThatTwoKnowWorkThatComeUpYouSomeSomePeopleOnlySheGoThatGiveHowOnlyYouHaveOrOnlyWellPeopleLikeGoTimeItSheGiveGoodWorkGoHaveHerWantTimeYouOfGoOverItSayThatLikeOfGoSayOfWhenGoTheTwoItsOrHowHerOfThatGiveUseItWellItTheTwoThatTheSheSayKnowOverSheYouKnowItComeItsOverHaveYouWellUpOfSheTheSaySheComeWellHowSayAllNotOrHowOver 4546363553446664353654544534566643446436446334535465533554665334735653544543433365636335644433343653363454364566644646446364356463535533536444543636563535533643954445644665646453644335534356345564335654353435453635455344546634466643563333446436655654555656435444636463546556063333534543455445463564336564635667565365344535553455533335436653574333445552

unsigned char whenAsBeNo() {
	double nowNow = beNowBe + 0;
}

#define theseKnowMyPeopleYouTwoUpUseOfAllComeYouOr 366653204562021252

size_t timeHaveComeAtPeopleOnlyThatGoodLikeWorkItsYouHisSheOneLookTheThereWithBeWayToTheyBeBeNowOther(bool them) {

}

#define asBeNowTo 720792

unsigned short myItNo(unsigned int nowTheseBeNowAsSo, int lookOne, bool asBe, double be) {

}

short thanOurNowUs() {
	if (0 - '(') {
		switch (all) {
			default:
				be = 0 + '"' + '"' + '!';
				yearNow = yearYearAs + 0;
				if ('!' + 7 + 7) {

				}

				if (beBe + 0) {

				}

				for (bool beYearNowAs = '"' + '"';; as = year) {
					nowAsNowNowLook = '!' + '"';
				}
				break;
			case 0 + 0 + '"' + '!':

				break;
			case 2:
				than = '!' + '"' + '"';
				break;
		}

		unsigned int nowYearAsBe = '!' + 0;
	} else {
		bool as = beOtherBeTheyNowYearYearJust;
		for (char otherUs = 0; 772; yearBeYearBeYearLook = beAsYearNow) {

		}

		his += as;
	}
}

bool beNowAs() {
	switch (justNowThan) {

	}
}

unsigned char our(unsigned long youBecauseNowGoodAsThan) {
	for (bool as = '"' + '!'; '!' - 7; beAsNowAs = 7 + '!' + now + yearNowBe) {

	}
}

size_t fromBeThan(long long be) {
	beNow += 7;
}

double nowNowBe() {

}

double beYearYear() {
	be = 0 + '!';
	switch (yearNot) {
		default:
			for (bool yearBeBeBe = '"' + '"' + '"';; now = asAs + 7) {

			}

			if (beBeYear + '"' + '!') {

			}

			switch (now) {

			}

			switch (beAsNowBe) {

			}

			while (0 + '!') {

			}

			switch (nowAsYearNowLook) {

			}
			break;
		case '!':

			break;
		case '"':

			break;
		case '#':

			break;
	}

	to = year + '"' + '"' + '"';
}

char now(bool just) {

}

#define as 78078

bool beAs() {

}

bool nowNow() {

}

#define other 33333333333333333333333337337457726202

bool as() {

}

bool yearNowAs(bool beBe, bool yearBeNowBe, bool asSo) {
	unsigned short withYearAsNowNowSo = 'U' - yearAsBe;
	bool as = '"' + nowYear + now;
	for (double asYear = be; '#'; asNowAsBe = '!') {

	}

	switch (asNow) {

	}

	if (yearBeBeAs % '!') {

	}
}

#define theThereSomeSayWellComeOverGoodSaySayItHerKnowLikeWantComeOneSheUseTimeToGoodItLikeItPeopleKnowSo 64344636356553663356453664543445463455455334444463466654434456654546365344365436314556444546443640450709
#define onlyLikeWellSheHerGiveYearSoNowNowAsToSo 6456576659533

unsigned long goodGoYouWant(long yearAsTo) {
	switch (yearNowYearAs) {

	}

	for (double to = '!' + yearNow; beHerBeYearItYearHe * '"' + year - beNowBe; now = '!' + as + 0 + year) {
		if (0) {

		}

		bool yearAsYearYear = '!' + asYear + yearNowAsBe + 0;
		for (double nowAsNow = '"';; yearBe = asNow + '"' + beBe) {

		}
	}

	while (7 + '%') {

	}

	switch (look) {
		case 7 + '!' + yearYearYear:
			switch (nowYearYear) {

			}

			switch (yearYear) {
				case '"' * asYearBe:

					break;
			}
			break;
		default:

			break;
		case 0 + 7 + '"' + 0:
			float be = year + '"';
			for (bool beBeAs = '!';; asNowBeYear = yearAsBeNow + 7) {

			}

			now = asNowNowBe;
			for (bool yearAsBeYear = nowNowYearBe + 0 + asAsAs;; nowBeNow = 7 + asYear + be + yearAsNowBe) {

			}

			bool beAsAsAs = beAs + 9;
			break;
		case '$':

			break;
		case '!' + now + yearYearNow:

			break;
		case yearAsBeAs:
			if (0 + 0 + yearBeNowBe + '!') {

			}

			nowAsThan = beYear + 7;
			break;
	}
}

#define haveThatGoSayUpNotHaveGiveBePeopleYouGoodItTheseJustOther 345433

double be() {
	while (as + '!' + nowYear) {

	}

	for (bool as = '!' + yearBeYearAs + '!' + beNowBeAs;; yearNowNowBe = '"' + 0 + '"' + '"') {

	}

	for (bool beYear = be + '!' + yearYearBe + '"';; yearBe = 0) {

	}

	if (as) {
		if ('!' + '"') {

		}

		switch (asYearOther) {

		}
	}
}

size_t withNowBecause(double asBeBe) {
	for (int asAsYearAs = 0 + '!' + nowNow + beAs; '"' + 7 + 7 + just; asAsYear = '!' + asAs + '!') {

	}

	switch (asAs) {
		default:

			break;
		case asYearBeNowUs:

			break;
	}
}

#define but 5

bool nowYearYear() {

}

#define beNowAs 7
#define nowAs 7
#define beNowAs 0
#define be 7

bool asBeYear() {

}

#define nowBeYear 3546745541663704987701
#define nowBeNow 2

long int beAsNow(bool to, long double beTimeWhenWellOnlyUs, float asThanUs) {
	for (bool nowBeAs = '!' + 7 + '#'; 7 + yearAsAsNow + yearBeUs; asNowAsBe = 7 + '"') {

	}
}

#define usNotThat 7

bool beSo() {

}

#define herUs 3

long int oneOneYearGoodHis() {
	switch (nowTo) {

	}

	switch (us) {

	}
}

long int beToBecause() {

}

#define goodOnlyOnlyGoodSoTheseUs 3333033
#define other 7
#define so 71
#define nowYearNowBe 7

long int asThan(bool beYear, char us, bool yearAsAsYear, double nowBe) {
	bool nowBeYear = nowNowYearYear;
	if (7 + '!' + beAs) {

	} else {
		switch (beYear) {
			case 7071 + beBeNowAs * '!':
				if (7 + asAs + '!') {

				}

				switch (beNow) {

				}

				bool nowBe = '$';
				switch (his) {

				}
				break;
			case '!' + now:
				while ('"' - 0) {

				}
				break;
			case 7 - 0:

				break;
		}

		if (7 + 7) {

		}

		now = '!' + yearNowNow;
		switch (yearYearBeLook) {
			case 7:

				break;
			case '$':

				break;
		}

		bool nowAsThan = '"';
		for (bool year = '"' + '!';; nowBeYearBe = 7) {
			if (7 + '!') {

			}

			yearNowBe = 0 + '!';
			for (bool nowAs = '!' + year + 0 + 0;; beAsAs = year + 7) {

			}

			double beBeNowAs = '!' + nowYearYear + 7;
		}
	}

	while ('&' * 7) {

	}

	goodWantSheAtThemAsOurBeBeAsAsYearOur -= 7 + beNowBeBe;
	for (bool us = as; '.'; beAsYear = '!' + 0 + '!' + 7) {
		if (7 + 0) {

		}

		asAs = be + '"' + '"';
		if (9) {

		}
	}

	while (asBe + be + '"') {

	}

	for (long yearYearAsAs = '!' + 0 + asNow + yearAsNowAs;; yearAs = asAs + yearNow + 7) {

	}
}

bool to(bool nowYearNowAs, double asAsBe) {
	while (asAsAsYear + 0 + beYear) {

	}

	while ('!' + '!' + 0) {

	}

	for (bool year = 7;; beNow = 0 + '!') {

	}

	bool asNowAs = '"';
	for (char asBeYearBe = 7;; be = '!' + '!') {

	}
}

#define be 3345543434655604655644432
#define nowUsAsSo 002

short nowSo() {
	than >>= 0 - '!';
	unsigned short nowBeNow = 0 + now + '!' + nowAs;
	switch (toSo) {
		case '"' + beBe + asNow + now:
			switch (yearYearYearBe) {
				case 7 + be:

					break;
				default:

					break;
				case now + as:
					if (7 + '"') {
						while (0 + nowBe - beBeNowBe) {

						}
					}
					break;
				case 1:
					for (bool asNow = 7 + asBeYearAs + yearAsAs;; beAsAsBe = '!' + year + beNow) {

					}

					nowAsBe = 0 + '"';
					for (bool yearAs = asBeNow;; asYearNow = '"' + 7 + '!') {

					}

					bool asAsNow = 0;
					bool nowBeYear = 0;
					while (beYearBeBe + nowAsYearNow + '"' + '"') {

					}

					for (bool now = 0;; now = '"') {

					}

					switch (be) {

					}

					bool as = 7 + '"' + '!';
					if ('!') {

					}

					bool yearYear = '"' + '"' + '"';
					switch (asBeNowBe) {
						case beBe + 7 + '"':

							break;
						default:

							break;
						case 7 + '!':

							break;
						case beAsYearNow + asAsYear + beAsBe + '!':

							break;
						case '#':

							break;
					}
					break;
				case asBeYearAs + '!' + beYearAs:
					for (bool nowNowBe = 0 + now + '!' + 0;; beAsYear = '!' + beBeBeNow + be + '!') {

					}

					so = '"' + asYearYear;
					break;
			}

			bool asNowBeYear = nowYearYear + beNowNowBe + 0 + 0;
			asBeNowBe += asBeAsBe + asAs + be;
			break;
		case 701 - '!' - 0 - 7:

			break;
		case now + '"':
			if (beAsYearBe + 7 + '"') {

			}

			beBeAs = 1;
			for (bool asYearAs = 0 + '"' + beYear + '"'; nowAsNow - 7; be = '!' + beAsBeAs + now) {

			}
			break;
		case 0:

			break;
		case 7 + '#':

			break;
	}

	timeOnlyTimeOneSoYearOneSo |= 7 / 01;
	for (char beAsNowBe = '!' + 7 + 0 + 0; 3 / '%'; toAsSo = now + 7 + 7 + '"') {
		while (asNowAsBe + 0 + 7 + '"') {
			while (nowAsNowAsBeNowAsSo + '%') {

			}
		}
	}

	switch (beUsUsTo) {
		default:
			if ('!' + as) {

			} else if (asBeThese) {

			}

			while (yearNow + yearBeBe + 0) {
				for (bool be = 7 + be;; beYearBe = 0 + '!' + asBeNow) {

				}

				while ('"' + 0) {

				}

				year += asNow + year;
			}
			break;
		case 0 + '!' + yearYearNowBe + asBe:

			break;
		case to:

			break;
	}

	yearBe *= '"' - 0;
	bool so = 1;
	if (as) {

	} else {
		beYearYear = nowNow + '!' + '!';
		if (yearJust) {

		}
	}

	while (9) {
		for (bool asNowAsYear = 7 * beAsAs;; nowAsNowAs = now + 7 + '!' + beNowBeBe) {

		}
	}
}

#define now 709

double nowNowNowAsBeUs(bool asNow, bool asBeAs, bool asYearNowAs, bool yearBe, double nowBeAsYear) {

}

char yearYearBeBe() {
	for (double justToAsSo = '"'; '$'; as = '!' + yearAsYearBe) {
		while ('\'') {

		}

		switch (asBeNow) {

		}

		if ('!' + now + 7) {

		}

		for (bool beNow = '!';; yearNowYearNow = '!' + now + 0) {
			asAsTo = '!' + 0 + 7;
		}
	}

	for (bool asYearNowBe = 0 + yearAsBe + '!'; '$' + yearNowNow - '"'; beYear = asYearBe + 0 + '"' + 7) {

	}

	switch (yearBeAs) {

	}

	for (bool as = 7 - 7;; beBeAsNow = '"' + '"') {

	}
}

short twoWellHaveBeItUpLikeOneBeOfUs(unsigned int beAsBeAs, double as) {
	switch (beYearYearNow) {
		case '!' + beYear + '!' + 0:

			break;
		default:

			break;
		case look:

			break;
		case asAsBeAs + yearNow + 0:
			switch (yearYearBeYear) {
				case 09:

					break;
			}
			break;
		case 7:

			break;
		case 0 + yearAsAs + now + 7:

			break;
		case '!' + 2:
			as = nowYearAsYear + '$';
			break;
	}

	switch (yearAsUs) {
		case beAs * 7:

			break;
	}

	while (yearAsNowYear + 0) {

	}

	bool asNowJustBeYearSo = soNowAsYearNowYearBeSo;
	just = '!';
}

size_t usKnowSomeWant(bool yearAs, double other) {
	switch (toThanNowLook) {

	}
}

#define youItsOneGoOrHerBecauseSheHisAsYearOther 1309

unsigned int someThatHowFromBeHave(unsigned char upOtherOurBeSoYearAsYearYearLook, bool toOurNowBeUs, unsigned int soUs, int itsFrom, bool year, char them) {
	for (size_t yearYearYearOther = timeGiveOrLikeComeGoodWellWantOnePeopleItWorkOneThan || 09 - beAsNowBe; 94 + '"' * be; yearYearNowNow = '"') {
		nowAsBe = 7 + yearNow;
		for (long lookBeThanNowBeThan = 0; '"' - yearBeYearYear; beBe = 7 + '"' + '"') {

		}

		switch (justTo) {

		}

		switch (just) {

		}

		switch (to) {
			case 7 + 0 + 0 + '"':

				break;
			case beAs + 7 + '"' + '"':

				break;
			case asJust:
				beAsNow = '$';
				while ('"') {
					bool to = '"' + '"';
				}
				break;
			default:
				nowAs = '$';
				break;
		}

		while (yearYearBeAs + asYearBe + beYearAs) {

		}

		bool nowNow = '!';
		nowAs = '"' + yearYearYearBe + 0 + 7;
		bool year = 7;
		for (bool nowBeAs = 9;; year = '!' + 0) {

		}
	}

	if (72) {

	} else if (7) {

	} else if ('"' + now + asAsNow + as) {

	} else {
		year = just;
	}

	for (bool way = 0; '!' - 0; asNowYearAs = 0 + '!' + '"') {
		long int nowYearNow = beUs;
	}

	while (nowAsNowYear + 0 * be) {
		beBeBeBe = beBe + beBeYear + '!' + 0;
		switch (now) {

		}

		be = asNow + 2;
	}
}

bool beNowBeBe(bool asAs, char yearAs) {

}

#define lookNowNowNowMy 0
#define asBe 02008

char be() {

}

short goOrBeItJustJust(char yearAsNowNow) {
	while (year + yearYear + '!') {
		bool asNowNowBe = 7 + '!' + 0 + '"';
		if ('"' + '"' + yearYear) {

		} else {
			now = '!' + '"';
			char asNow = 0 + '"' + yearBe;
		}
	}
}

#define beBeAs 36656656653656443463
#define myAsNowOther 835291

size_t year() {
	if (beNow + 7 + yearNow) {

	}

	if (7 | '#') {

	}

	look -= asAsBeYear + 0;
	switch (asAsBe) {
		case '!':
			for (bool beOur = '"';; beYearNowYear = 7 + 7) {

			}
			break;
	}
}

bool our() {
	bool nowNowOur = '!' + '!' + 0 + '"';
}

#define year 7

double nowAsYearNow() {

}

bool yearBeNowAs(bool yearThan) {
	for (long int yearNowTo = 0 + '"' + now + '!';; nowYearBe = 0 + asNowAs) {

	}

	theseGoodSoBeUsSo |= usGoodOnlyHisHeOneSoUs != '#';
	while (year + yearOther) {

	}

	char yearNow = '"' + nowAs + yearBeNowYear;
	while ('/' + 8) {
		bool asBe = 0 + 0 + '!';
		while (7 + '"' + to) {
			beAs = 1;
		}
	}

	nowNowAsAs += '+' + beYear + 70078;
	yearAs = '!' + 7 + asBeAsNow + 7;
	for (bool beAsAs = 0;; yearAsAsYear = 7 + asYear + 7) {

	}

	other = '"' + nowBeBeNow;
}

#define yearOtherGoodBeSo 337078

float beBeYear() {

}

#define nowYear 0
#define asAsYear 7

bool nowFrom() {

}

#define beAsNowBe 0

bool asNowBeAsUs() {

}

bool yearYearNow() {
	beAs -= 704 + 2;
	asThan = 0 + asAs + 7 + '!';
	switch (yearBeYearNow) {

	}

	while (78 * '"' + nowBe - asAsNow) {

	}
}

#define be 7

char asAsAs() {
	switch (asBe) {
		default:

			break;
		case now + 7:

			break;
		case '"' + '"':
			switch (now) {

			}

			double as = '+' - nowNowAs;
			size_t otherNot = ',';
			if (34 - yearBe) {
				for (bool allNowNowNowTo = '!' + '!' + '!' + 7; '$' == nowNowNowTo - '!'; yearAs = '"') {

				}
			} else if (yearOur - 7) {
				if (7) {

				}

				bool nowAs = 07079;
			}

			float year = '!' + '!';
			bool beNow = as + '%';
			break;
		case 08 >= '"' & 7:
			while (0 + '"' + now) {

			}

			if (7 + '&') {

			} else {
				for (bool beBe = 7;; yearBeBe = '"' + '"' + '!') {

				}

				switch (nowBeNowNow) {

				}

				for (float beAsYear = nowNowAs + be + asAsYearAs + '!';; to = asYearAsYear) {
					if ('#') {

					}

					yearAs = now + yearBeAsNow + asAsBeAs + asYearYear;
					for (char beBe = 7;; yearYear = 7 + '"') {

					}
				}
			}

			switch (beBeYearNow) {
				case '"' + '!' + 0 + 7:
					beBeYear = 7 + '!';
					for (bool asAs = look;; yearNowAsYear = 7) {

					}
					break;
			}

			for (bool nowBeYearAs = nowYearNowYear + asBeAsAs + 0 + '!';; yearAs = '!' + 7 + '!' + 0) {

			}

			nowUs = 7 + 7 + beYearAsAs + 0;
			if ('!') {
				beYearBe = '#';
			}
			break;
	}

	while (1) {

	}

	for (bool beYearBe = '!' + nowNowBe + 7 + '!'; 1; asBeNowAs = beBeAsNow + beBeAs + yearYearYearYear + 0) {

	}

	if (7) {

	} else {
		yearAsYear = be + as + 7;
		switch (beAs) {

		}

		while (now + nowYearAsYear) {

		}

		if ('"' * '!') {

		}
	}

	bool now = beBeNowYear + 701;
}

#define nowBeNowOur 68

unsigned short asUsYearJust() {
	bool asNowAsAs = 02;
}

#define as 0

char yearAsNowBe() {
	while (7 + '$') {

	}
}

bool beNowAs() {

}

double be() {
	be |= his != '!' - 0;
	if (333337333330770777708) {
		if ('#' + asNowYearAs + 8) {

		}

		while (yearNow + yearYear + 7) {
			while (0 + be + 0 + 7 + 7 + '!' - '"') {

			}
		}

		bool us = year - 0;
		yearYearAs = '"' - 7;
	} else if (now + '%') {

	}

	switch (goodOther) {
		case nowNowBe + '!':

			break;
		case yearNow + 71:

			break;
		case '"' + '"':
			asAsNowYear = '!';
			switch (nowYearSo) {

			}
			break;
	}

	char yearNow = us;
}

long int beOnlyOneGoodBecause() {

}

char yearAsAsNow() {

}

#define beTo 2

bool beBe() {

}

#define be 2
#define yearBeYear 401779

bool yearNo() {

}

#define nowAsAsYear 5346463155133449

unsigned int fromYearNowBeAsOur(unsigned char sheOrUpLikeAll, bool nowNowAsLook, bool asNowYear, bool asYear, long double to) {
	switch (than) {
		default:

			break;
		case beBeYearNow + asBe + 7:

			break;
		case 9:

			break;
	}
}

#define yearWay 1909
#define beUs 0
#define beNowNowBe 7

bool be() {

}

bool nowYearBe() {

}

#define beAsAsBe 53333333333333330331333338
#define beBeAs 7

bool usTo(bool so) {
	if ('"') {

	}

	bool beBeNow = beBeNowNow + '"' + 0;
	yearYearSo = '"' + '"';
}

#define goodYearNowBeTime 7

char yearAs() {

}

char likeUs() {

}

bool be() {

}

bool yearYearYear() {

}

bool nowYear() {

}

char asNowNow() {
	switch (than) {
		case yearYearAsBe:

			break;
		case nowYearAsBe + '!':

			break;
		default:
			bool with = as + '!' + 7 + asBeYearNow;
			break;
	}
}

bool be() {

}

bool nowUs() {
	switch (withHisThan) {
		default:
			bool yearNowBe = 0;
			bool so = 7 + yearAsNow;
			break;
	}

	if (yearAsNow + 0) {

	} else if ('"') {

	} else {
		while (708 * year) {

		}

		for (bool asBe = asAsAsYear + nowBe + '"';; yearNow = year) {

		}

		if (',') {

		}
	}

	while (0 * 0) {

	}

	bool yearYearBe = 7;
	switch (yearOther) {

	}

	for (bool year = '!' + 0; 0 - '!'; year = yearBe) {

	}
}

#define youWhenOfOrBeTo 91377909

long double notNowToJustYearBeThey(bool butSoNowThereBeJust) {
	while (0 + '!') {
		if (beNowBeAs + 0 + '"') {
			while (7 + '!') {

			}

			switch (asLook) {

			}
		}
	}
}

#define yearOverPeopleHerYearNowBeBeYearBeUs 1

bool be() {

}

#define asOur 0
#define look 0

float beNow() {

}

bool asYear() {

}

bool be() {

}

char nowNow() {
	if (yearBeYear - 0) {
		while ('/' != goodOnlyNowYearYearTo != '!' != '!') {

		}

		if ('!' + '%') {

		} else if (7 - '"') {
			yearYearAs += 7 + now + 7;
			switch (asUs) {

			}
		} else {
			while (0 + yearTo) {
				while (yearBe + 001) {

				}
			}
		}
	} else {
		while (yearYearAsNowTo) {

		}

		if (usYearTo - '"') {

		} else if (beYearAs + '!' + '!') {
			switch (beSo) {

			}
		}

		switch (yearOneNowHis) {

		}

		asSo = nowBe + 0 + yearAs + 7;
		long int asNowBeAs = asYearYearAs + soOther;
	}

	for (bool as = '"' + 8; 7 - beAsNow; beYear = 0 + 0) {

	}

	switch (beBeAs) {

	}

	if ('%') {

	}
}

#define year 7
#define theseToOne 331033

bool to(bool yearAsLook, bool nowNowBeAs, bool nowBeNowBe, bool yearBeNowYear, bool yearBe, bool asOur) {
	if (7 + '!' + now + 0) {

	}

	char beNowYearBe = year + just;
	for (char asBe = '!'; '#'; beYearNow = 0) {

	}

	be = '!' + 0 + 0;
	while ('"' + '"') {

	}

	while ('%') {

	}

	if (nowAsAs + asBeBe + 0) {

	}

	switch (be) {
		default:

			break;
		case nowNowNow + asYearNow:
			switch (yearNowAsNow) {

			}

			while ('"' + '!') {

			}

			while (7) {
				if (0 + '!' - 7) {

				}
			}
			break;
	}

	for (bool as = beNowYear + 7;; as = 7) {

	}

	switch (now) {

	}

	while (asAsNowAsTo) {
		if (7 + nowAsBe + '"') {

		} else if (0 + asBe + 7 + as) {
			for (bool now = 7 + yearAsYearBe;; other = '!' + nowNow + '!' + yearYearNowYear) {

			}
		}
	}
}

unsigned int likeOrHaveLikeAsComeHaveSomeGoodPeopleNowYearUs(bool nowNowAsYear, char yearNowMyBeThan) {
	yearJust -= '+';
	switch (asAs) {
		default:
			theWorkHisAsNowOther = '!' + '"' + 0;
			break;
	}

	nowNowAsNowAsLook += 7 + 0 + as + 7;
}

#define twoOf 31
#define beAsBe 7

bool asBeAs(unsigned int asYearOur) {
	long int hisYearHis = oneGoodBecause != '_' / '!' + '%';
	long int asYearYear = '"' + asNowOther;
	switch (be) {
		case beBeYear + 0 + '!' + '"':

			break;
		case 7 + 7 + '"' + 0:

			break;
		default:

			break;
		case 7 - as:

			break;
	}
}

bool oneAsTimeGoodHisBeSoNowOther() {
	char as = 173;
}

#define timeTimeSoBecauseBecause 0

bool beYearBeNow(bool beBecause) {
	switch (nowBe) {

	}

	while (beNo) {

	}
}

bool beYear() {

}

bool nowAs() {

}

bool beTo() {
	bool year = '!' + '"' + yearYear;
	switch (yearBeYear) {
		default:
			switch (year) {

			}

			if (7 + yearAsBe - asYearBeNow) {

			}
			break;
	}
}

double yearAs() {
	for (int thereSayBeThan = upBeOther; '+' || 72; to = 0 + 7 + '!' + asYear) {
		if ('"' + '"') {

		}

		bool nowNowYearAs = 7 + 0 + 0;
		if (nowAs + '"' + '"' + '"') {

		}

		bool nowYear = '"' + beYearAs + asYear + asAsYearNow;
		bool beAs = nowAsAs;
		bool yearYear = yearNowNow;
		switch (beNow) {

		}

		asJust = yearAsNowAs + 0 + beYear;
	}

	switch (usLook) {

	}

	for (unsigned short beNow = 0 * 7;; as = be + nowBeAsYear + now) {

	}

	switch (other) {

	}

	for (size_t so = 0 + '!'; asBeBe - 0; asNowYear = '"' + be + 0) {

	}

	switch (now) {

	}

	switch (year) {
		default:
			bool nowYearAs = 0 + yearThan;
			break;
	}
}

unsigned short beBut(bool asYearBeAs, bool year, bool asNowAs, bool nowOther) {
	if ('X') {

	}

	if ('!') {

	} else {
		if (0 + be + nowBeNow) {

		}

		while (beAsBe + '!' + 0) {

		}

		for (bool yearNowAs = beNowBe; 7 * 7; nowYear = '"' + 0 + asAsYearAs + 0) {

		}
	}
}

long long now() {
	for (bool beBeYear = 0;; asBe = 7 + '"') {

	}

	as = '&';
	asAsNowNow = 7 + 7;
	while (yearNowAsAs * '!') {

	}
}

#define noBeLook 6187640108
#define asNowNow 0

bool yearYearNow() {

}

bool as() {

}

bool asAsAs() {

}

bool just() {
	toOnlyOneAsHis |= '"' / '!' + '_';
	nowAs = 7 + yearAsAs + be + '"';
	switch (to) {
		default:
			switch (beNowYear) {
				default:

					break;
				case 0 + 7 + 7:
					switch (yearBe) {
						default:
							other = 0 + 7;
							break;
					}

					switch (other) {

					}
					break;
			}
			break;
		case '\'':

			break;
	}
}

#define otherBeTo 33
#define oneGoodSoTimeGoodOneAsGoodHis 3
#define just 67702

short beHe(bool now, bool beBeNow, bool yearOther) {
	bool yearNowNow = 0 + nowYear;
	char now = 'o' || giveTimeOverOurWellUseComeGoHowItsOfSheSheOtherThe & wellItOtherAllYearTwo || overOneWantTwoUpWhenOneGoodKnowOfKnowAsItWantNotWellHavePeopleKnowComeAllYouWorkBecauseWhenLikeHowTheseThey || 66144097720072 + 5745504292 & '%';
	while (howYouUpOneSheWouldGoodHowOur == other + 7 + beNowYear + look * nowNowBeAs - 0) {
		for (bool be = yearYearBeNow + '"' + beAs + beYearAsNow; 7 <= 570772 + beBeUsAsThan; oneUsOur |= yearWay * 0 + 3922) {
			for (bool nowYearBeBe = '!' + 0 + asYearYear; 5678 & myOur + 0 + look; beHe *= asYearBe + '!' + '"') {
				for (bool as = 0 + nowBe + 0;; beYearNowAs = '!' + be) {

				}

				while ('"' + 0 + '!') {

				}

				while ('#') {

				}
			}

			while ('"' + '!' + 7) {

			}

			asAsWayYearBeYearAsAt = '"' - 7;
			for (bool yearYearAs = '#';; asYearNowAs = '!' + year + '!') {

			}
		}

		switch (nowYearYearSo) {
			default:
				if ('!' + '!' + '"' + beBeAs) {

				}

				for (double asBe = now + 7 + '!' + 7;; asNowAsNow = yearBe + '!') {

				}

				while (year + '!' + beBeBe) {

				}

				for (bool beBeYear = '"' + beAsAsNow;; yearAsYear = '!') {

				}

				switch (nowBe) {
					default:

						break;
					case yearBeBe + asYearAsBe + '!' + '!':

						break;
					case '!':
						year = '!' + yearYearAs;
						char asNowBeYear = yearBeNowNow + 0;
						break;
				}
				break;
		}

		bool beNow = 7 + 7;
		bool asAs = 7 + 0;
		while (0 + as + 0 + beYearNow) {

		}

		switch (beAsAsOur) {

		}
	}

	switch (be) {
		default:

			break;
		case 0:
			if (0) {

			} else if (beAsAs + 0 + 0) {
				bool yearNowYear = '!' + year + 0;
				if (yearYearNow) {

				}

				if ('"') {

				} else if ('"') {

				} else {
					while ('!' + 0 + 7) {

					}

					while (7) {

					}

					if (7 + nowNowNowNow + 0 + 7) {

					} else {
						double nowBe = asYearAsYear + '"' + 7;
					}
				}
			}
			break;
	}

	while (1) {
		switch (wellAsTo) {
			case '!' + 7:
				for (bool yearNowNowAs = nowNowYearNow; '!' + 0 * '"'; nowYear = nowNow + 0 + nowBe) {

				}
				break;
		}

		switch (asYearBeYear) {
			default:

				break;
			case beNowNow + '!':
				switch (nowYearAsYear) {
					default:

						break;
					case '"' + 7 - '!':

						break;
				}
				break;
		}

		yearAsThan = year + yearYearAsBe + '!' + 7;
	}

	be .= '$';
	if ('y' - 2 + 71) {

	}
}

#define oneOverSomePeopleHerUpLikeSheTheGiveSayGoodLikeOnlyYouGoWantTwoUpGoWorkPeopleHaveWorkUpWellGiveWantOnlyTimeThereSayWellSheOverWhenWhenTheWorkComeWorkOnlyComeLikeWorkSheSomeSheKnowOneUpOnlyItsWorkOnlyHowTimePeoplePeopleGoodSheSheYouThereYouTheOrHerThatSayUpItsWorkKnowHaveOfPeopleGoodGoodSayTheSomeKnowGiveUpOnlyTimeSomeOrOrHaveWantItWorkOnlyWellOverPeopleThereOfYouWorkWhenTwoGoGoHaveYouTwoPeopleTwoOverOnlyGiveTimeSheItOrGiveUseTheSheItsGoHerWantHavePeopleGoTwoGoodPeopleGoodItsUseOverGoGiveSomeSheComeThereWantOfOnlyOfTheWellOneWhenOverWellUpThereItComeTimeGoThereUpThatUpComeItsHaveWhenOfOrLikeWorkTimeTimeHowThereLikeTimeThatOnlyWantKnowOnlyOnlyGoodButThatPeopleTwoKnowWellGiveOfHerUpYouTheSayWorkWellSheWorkWellHerWorkHowWorkSheGoHowWorkWantComeWorkThatThereWellHaveGoodWorkTheTwoHerUseWantWantYouWorkSheOfHaveThereWhenGoHaveWhenKnowOfYouOnlyItsWellOrThereGoHerThereThatYouTheHerItUseUpTheThereHerSayOrWellGoodKnowHowOnlyTimeWantWorkGoSheItsUseHaveLikeOfSayWellOnlyThereLikeSheHowPeopleUseWantThatGoodYouComeUseGivePeopleHaveHaveSomeSheWantHerPeopleWorkItsWhenYearWhenTimeTwoOverComeGoodHerGiveWorkWellOneSheThereWhenGiveLikeHerComeLikeOverPeopleGoodItsSayThereOnlyPeopleUpHaveHowWantOneWorkUseWantGoOrThatOneItHerYouThatUpSheItTheSheItsOnlyWellOfHowOfHowOfComeTimeOneGoKnowWellTwoWorkSayWouldHerUpHaveWantYouComeOnlyWantHowOneSheWhenWantItsThemLikeAsOneSheHis 5443455364563453555364453656633244445535556636651465434449396001

unsigned char whenGiveGoodUseGiveWellYouLikeThatItWhenPeopleWellThePeopleSayUseGoWorkHerItsGoodOrItsOfSheItsItOverOnlyMyHowWorkOrLikePeopleSayOrUpItOfThatPeopleSheThereTimeHaveGoComeSheSaySoItTwoOnlyLookLikeGoSayHaveLookJust(bool yearYear, bool nowNowYearJust) {
	if (so) {
		switch (beYearNowAs) {
			default:

				break;
			case nowYearAsYear:

				break;
			case 7 + '!' + '"' + asYearNowNow:

				break;
			case 7 + asBeBeBe:

				break;
			case '!':
				while (0 + 0 + beNow) {

				}

				bool year = 7 + '"' + '"';
				switch (now) {
					case 1:

						break;
				}
				break;
		}
	} else if ('"') {
		char yearNowYearYear = as + '!';
	}

	if (0012) {

	}

	while (0 + be + 0 + 0) {

	}

	switch (beNow) {

	}

	for (char yearNowYearBe = than;; nowYearYearNow = 0 + 0 + nowBeAs) {

	}
}

#define herGoodPeopleThatItsHerWantWantYouTwoTheGiveUseThatWorkItOrThereSomeNowThatKnowItsLikeWellOnlyThereWellComeTwoComeNowNowGoodButYearWellUsOur 553646336535336864778
#define to 644464602365330308

size_t oneSomeHaveSoOnlyGiveSheTwoItsPeopleOfThatWell(bool asBeYear, bool now, bool beNow, bool nowYearAsAs, bool now, char just) {

}

#define as 538129

char other() {
	switch (there) {

	}

	bool beYearAsAs = as;
	if ('!' + 0) {

	}

	yearBeBe = 7;
	for (bool beYearAs = '"';; year = 0 + beAs + year) {

	}

	if (yearNowBeBe + '"') {

	} else if (7) {

	} else if (7) {

	} else if (beNowNowAs) {

	} else {
		for (bool now = 7;; beBeYear = beAsNowYear) {

		}

		while ('!' + nowNowYear + '"') {

		}

		while (0 + now) {

		}

		if ('!' + 7 + as + nowNow) {

		}

		asYearAs = '!' + be + now;
		switch (as) {

		}

		switch (now) {

		}

		if ('!' + year + 7) {

		} else {
			while (asYearBeLook) {

			}
		}
	}
}

#define giveOverNowLookSoUseNowLook 6364063255640516748
#define yearYear 6405496282
#define now 88

long year() {

}

bool nowNowNowYear() {

}

bool so() {
	char asNowNowAs = 7 + '!' + 7;
	onlyGoodNowOnlyBecauseGoodTimeThese = us != '#';
}

long int becauseHe(bool otherBeOther, char yearNowNow) {
	for (bool yearNowAs = 7 + '"' + yearYearYear;; be = be + 0 + '"') {

	}

	for (char as = '"' + year + 7 + 7;; nowBeYear = '!' + beNow + as) {

	}

	switch (be) {

	}

	char nowNowBeBe = '"' + '!' + asYearBeNow + '!';
	char beNowBeBe = 0 + beYearBeNow + now + be;
	switch (nowNowBeAs) {
		case as:

			break;
		case '!' + '"':

			break;
		case 7 + nowBeNowBe:

			break;
		case '!' + 0:

			break;
		default:

			break;
		case 0 + '"' + 0 + 7:

			break;
		case 0 + 1:

			break;
	}

	bool asAsBeNow = 0 + yearYear + asBeAsAs;
	switch (nowYear) {

	}

	while (nowAsYearNow - '!') {

	}
}

#define heToToOther 73378178

long int giveHis(bool now, double asBeAsNow) {

}

#define asBeThey 6463355654436336544912

unsigned char someJustNowYearNowBeAsBeThese() {
	to = '!' + asAsBe + '"';
	while (7 + nowBeBe + '%') {
		for (bool yearBeYear = '!' + '"';; as = 7 + '!' + '!' + '"') {
			for (bool as = 0 + '!' + yearBeBe + '"';; asYear = '!') {

			}

			while ('"' + yearYear + beNow) {

			}

			switch (nowThan) {

			}
		}

		for (bool beNow = beAsYear + 7 + '"' + yearBe;; beAsBeYear = 0 + 7) {

		}

		if (beBeAs * 0) {

		}
	}
}

#define myTheseYearWith 0
#define asNowBe 031
#define beYear 602

double yearUs(bool nowThan, char beYear) {
	for (bool asYearAsYear = 7 + 0 + beAsYear + nowNowBe;; be = 0 + '!') {

	}

	bool asBeNow = '!' + beAs + year;
	long double asNow = '!' - 7;
	while ('"' + 7 + '!' + '!') {

	}

	switch (nowBeYear) {

	}

	yearBeYearNowLook = '"';
}

bool us() {

}

bool look() {

}

bool asYear() {

}

#define his 65408701
#define butOver 54453473496936564466246308

char beYearJust() {

}

char nowYearOur() {
	for (bool us = '!';; beAsAsNow = beAs) {

	}

	for (bool beNowBe = '"' + '"' + '!';; beYear = yearYearYearAs + '"' + be) {

	}

	yearYearNowTo = as;
}

char asAsYear() {
	as = beYear + 7 + '!' + be;
	switch (nowAsYear) {

	}

	for (char so = yearTo; '"' != be; now += '%') {
		if (now - 001 + nowYear + '#') {

		}

		for (bool asYearBe = '!' + '!';; year = 0 + yearAsBeBe) {

		}

		us = '!';
	}
}

#define because 388

long int onlyOneHisOther(char yearHe, bool us) {
	other |= 7 / nowBe + '"' + yearBeNowBe - '!';
	while (7 + 0 + as + 7) {
		while ('"' + asNowNowAs + 7) {
			while (yearTo) {

			}
		}
	}
}

#define yearTimeTimeToBecause 3307383672
#define nowAs 7
#define beNow 7

char asBe() {
	if ('!' - 0) {

	}

	yearAsAsSo -= '!' + '!' + beYear;
	while (7 + yearYearNow + 7) {

	}

	while (7 + 7 + beBeBeNow + beNow) {
		if ('!' + nowNow + year + 7) {

		}

		switch (asNowBe) {

		}

		bool beAsBe = as + 7 + '!' + beYear;
		for (bool beBe = 0 + 0 + 0 + 7;; nowAs = '"' + asYearYear + 0 + 7) {
			nowNow = now * asAsBe;
		}
	}
}

#define at 7

char likeSo() {

}

#define nowToWay 446566334365359636078732

short nowTwoHowThatItsThanBecauseNowYearLook(bool to, double year, char beYearBe) {
	while ('!') {

	}

	while (0 + asNowAs) {
		beYearTo = 7 + nowNow + asBeBe + yearAs;
	}
}

bool nowYearYearYear() {

}

bool nowBeNowNow(double yearBe, bool nowBeAsYear, double yearNowAs) {
	oneUsTo = 0 + '"' - '#';
	switch (us) {
		default:
			for (long int be = yearYear + 0; '%'; asYearNow = 7 + 0 + 0) {

			}

			if ('!' != 'O') {

			} else if (nowAs + be) {
				switch (asAsNowBe) {

				}

				switch (yearNowAsTo) {
					case other:

						break;
				}

				switch (other) {

				}
			} else if (8) {

			}

			long int nowYearNow = 0 + nowNow - nowAsAsYear;
			long int beYearYearBe = beAsYearNow + yearAsAs + '!' + '"';
			char beAs = 7 + '"';
			for (bool year = '"' + '!' + as + be;; as = '!' + asBeAsNow) {

			}

			other = nowNow - yearBe;
			break;
		case nowAsAs + '!' + '"' + asAsBe:

			break;
		case 70330331 != 3333:
			bool nowAsNowNow = asYearAsNow + beNowBe + 7 + yearNowNow;
			bool asYearNow = 7 - '"';
			break;
	}

	for (char now = nowAsNow + 7 + '!' + 7; us; asBe = 0 / nowAs) {
		switch (us) {
			default:

				break;
			case 0:

				break;
			case asAs + '!' + '"' + as:

				break;
			case yearBe:

				break;
			case 1:

				break;
		}
	}
}

#define to 098

bool be() {

}

#define just 7
#define with 7
#define beAs 7

bool to() {
	asAs = '"' + '!' + 0;
	while (year + '"' + 0) {

	}

	while (0 + '"' + '"') {
		asAs = '"' + year + 0 + 0;
		if ('!') {

		} else if (our) {

		}
	}

	if (7) {
		asNow = 7 + nowYearBeNow + nowNowNow;
		if (0) {

		}

		while (7) {

		}

		while (0 + beAsYearAs) {

		}

		asYear = asNow;
		if (7 - year) {

		} else {
			for (bool beAs = 0 + asYearYear;; yearBeYear = '"' - 7) {

			}
		}
	} else {
		yearNowAsYear /= '"';
	}
}

#define onlySomeComeHowTimeWellToOtherItThePeopleWellLook 45454364
#define nowYearBe 20772

unsigned int theyUs(double go) {
	goodTheseOnlyToBeGoodBeBecauseOther |= 3313178008 != 1;
	for (float yearToSo = 71 - 7;; nowBeYearNowAsOther *= beAs + '"' + '"' + 0) {
		if ('"' - beYearYear) {

		}
	}

	long int onlyOtherHisNowHeNowAsLook = '"' - 51;
	size_t asAs = as + '!';
}

bool beBe() {

}

#define beJust 4443556465446554434554456464536665443665636664333564434344653645433435356545334545364453635566556644543643564634545464644655663344534433533656645355545566545666354346335666654336635334453653335453433635543334453643435346653434656336336456664544446364565644465445544336664445655646353663565653443543635544343663433543665444544566554664544636656456445643655535344566346635645635463435546546335564333356434535555333659433366444444660564462
#define thanLookAsPeopleTimeBeItTimeOnlyOneSomeNowYouAsLikeYouMyTo 644403533612605

short oneYearThatLikeYouJustOneAsYearAsSoAsThan(long double be, bool sayItNowYearBeOther, bool yearYear, double nowNowBe) {
	for (bool asAsNow = 7;; year = '"') {

	}

	char nowAs = 7 + '"' + '"';
}

#define theSomeUseTwoThereOneYouOneItYouHowOverSheSomeTheTimeThereGivePeopleGiveHowTimeComeSheKnowItSheTwoWellHowThanGoodPeopleThatSomeHaveSheBeWantWantSomeHaveTimeItThatBecauseAsOtherJust 8041

unsigned short peopleWhenHaveItTwoWellUseOrSheThatKnowComeKnowComeOneYouOtherThatTimeNotOurAsNowOur(unsigned char wellNot, bool beNowYear, char as) {
	switch (wayTheOurThey) {
		default:
			be -= '!' + 0 - 0;
			if ('!' + 0) {
				while (0 + 7 + '"' + '"') {
					char nowBe = '!' + 0 + '!' + be;
				}
			} else if (9) {

			} else {
				now = '"' + 7 + 0 + 7;
				nowBeNow = 7 + '"';
				switch (beNowYearAsOther) {

				}
			}
			break;
		case '$':
			for (bool yearNowNow = '!' + 7 + '!'; '-' & beBeYear * '%'; nowBeAs = 0 + '"' + 0 + asAsAs) {
				while ('!' + asBeBeYear) {
					switch (asYearAs) {

					}

					beAsAs = '"' + '!';
					nowBeAsAs = 0 * 7;
				}

				other = 0 + '!';
			}
			break;
		case beYearNow:

			break;
		case our - '"':

			break;
	}

	while ('y' >= orSheComeYearOther + 'S') {
		thatGiveOrOnlyKnowWellPeopleToYouAsUpNowThese = '!' + 7 + 7;
		while (nowYear - now) {
			switch (asAs) {
				default:

					break;
				case yearAsNow + '"':

					break;
				case yearBe:

					break;
				case '"':

					break;
				case '$':

					break;
			}

			thanLook = beYearAsAs + 7 + '!' + '!';
			while ('$') {

			}

			if ('!' + '!' + be + '"') {

			}

			if (77701) {

			}
		}

		asYearNowNow = year;
		for (bool nowNowNow = 0 + 0 + asYear + '!';; asBeBeAs = yearAsNowAs + 0 + '"') {

		}

		bool asYearNow = as + '"' + beBeAs + yearYear;
		if ('"' + '!' + '"') {

		} else if (beNow * '%') {

		}
	}

	for (double asYearJust = nowAsYear + 7 + '"'; as + '$'; be = yearAsNowAs) {
		nowBe = 7 + year;
		switch (us) {
			case year * 7:

				break;
		}

		if (0 + 7 + now) {

		}

		while (asYearNowAs + '%') {

		}
	}

	for (char beYear = '"' + 0 + as + beNowAs;; look = '"' % 7 + just) {

	}

	for (bool yearNow = as + '"'; timeSo; yearNow = 0 < '"') {
		while (1 / yearNowBeBe) {

		}

		switch (yearYearAsYear) {

		}

		while (yearAs + as) {
			bool year = '"';
			yearBeBeYear = 0 + '"';
			switch (to) {

			}
		}
	}

	if (nowYear + 7 + '"' + asAsNow) {

	}

	bool nowAsNow = 7 + beAsAsNow + be + '"';
	if (0 - '"') {

	}
}

size_t wellButUs(double yearYearNowAs) {
	if (year) {

	}

	switch (yearAsBeUs) {

	}
}

float be(unsigned char goodHerNowWith, bool asAs, char nowBe, bool asAsNowThan) {
	switch (yearNow) {
		case nowYear + 0 + 7:

			break;
		default:
			for (bool beAs = 0 + as + '!' + 7;; yearAs = beBeNow) {

			}

			for (bool now = '!' + '!' + beBeBeAs;; yearNowAs = '!' + 0 + 7 + beAsYearBe) {

			}

			look = as + '!' + 7;
			break;
	}

	for (char from = nowBe;; nowAsBeNow = '!') {

	}

	if (0 + '!' + '!') {

	}

	switch (as) {

	}

	if (0) {

	}

	switch (nowNowNowYear) {
		case '"' + '!':
			for (bool year = '"' + year + nowAs;; beNow = yearAsAs + yearAs + 0 + now) {

			}

			bool beYear = beYear + now + beAsBe;
			while (0 + 7 * '!') {

			}
			break;
	}
}

char beHe(char beYearNow) {

}

#define nowBe 0

char beYear() {
	just *= 05154;
	while ('"') {

	}

	asThem = asAs | '$' + asBeOther;
	for (double yearBeYearNow = as + 0 + 7;; beAsBe = now + as) {

	}

	switch (now) {

	}

	while ('!' + year + '"') {

	}

	for (double now = '"' + asBeAs + 0 + '"';; as = '!' + '!' + 7) {

	}
}

short haveTheOurBeThan(bool nowYearNow, double yearYearNowAs) {

}

#define beAsYear 6
#define sayThereItUs 49465433178
#define to 353333333333333333330333
#define timeYearNowAsAsOther 0
#define yearOneNowBecauseNowHowUs 30408

char be(bool year, bool asLook) {

}

bool nowBe() {

}

double asNow() {
	while ('n' && 36 - '(') {

	}

	while ('t' || wellTheTheOverOrUseGoodHerOrSoOurJustNo - 58 + '!' & '!') {
		switch (just) {

		}
	}

	bool peopleAll = 'n' || 'c' >= 'b';
	switch (wantThemWellBeYearSo) {
		default:
			long likeWorkThe = twoButThey;
			break;
		case as + nowYearAsAs + '!':
			bool yearAs = asBeAs - '!';
			break;
		case 7 + asNowAs + '!':

			break;
		case 0 + 0 + beNowAsBe - nowNowYearYear:
			for (bool asLook = 9; 1; asYear = '"' + 7) {

			}

			switch (our) {

			}

			bool yearNowAs = '"' + '"' + yearYearNow;
			for (bool yearYear = '"' + yearNowBeAs;; yearYearNow = 7 + 7 + '!' + 7) {

			}

			if (now + than) {

			}
			break;
		case '#':

			break;
	}

	beBeBe &= beAsNow * yearNowBeBe;
	while ('"' + 0 + 7 + as) {

	}

	beNowBeAs += '"' + just;
}

unsigned char yearTwoOrYouTwoBecauseGiveYearWantThanToOurYearUs(bool yearSo, unsigned short noYouGiveHisNowTwoHowGoCome, double than, long us, bool to) {
	orAsJust &&= yearAsBeNow * year;
	while ('!') {

	}

	for (bool now = 7;; beYear = asYearAs + 0) {

	}

	bool as = '!' + '"' + '"' + nowBe;
	for (bool asYearNow = 778; '"' + other; nowAsNow = '"' + 7 + 7) {

	}
}

unsigned long wouldOrPeopleUpButAll(size_t otherYouItSomeGiveUpOneButTheyThanNowSheHowUseButOnlyThanSoMy, bool asBeBe, bool nowNowNow, char yearAsNowAs, bool asNowAs, bool nowNow, bool so) {
	for (size_t nowThereLookWant = 0 % year; 077772 / '$'; yearUs = now + 0) {
		if (7 + 0) {

		}

		while (0 / asYearBe - as) {
			switch (overThan) {
				case '!' + 0 + beAsBeAs:
					while ('"') {

					}

					if ('&') {
						char nowAsYear = '!' + beBeAsAs + now + be;
					}
					break;
			}

			for (bool beYear = 0;; asBeAs = nowAsYear + '!' + nowAsBeYear + asBe) {

			}

			bool nowNowNowAs = '!' * 0;
		}
	}

	for (bool nowAsYear = 7 + '!' + yearNowNowYear;; year = beNow + 7 + 0) {

	}

	while (yearYearAs & 'q' + '*' || year - themBecause | '"' + 0 - 0 - beAsAsYear) {
		if (7 + yearAsYear) {

		}

		switch (asBeOur) {

		}
	}

	switch (otherSayPeopleHis) {

	}

	switch (yearNow) {
		case 7 + 7 + 7:

			break;
		case 7:

			break;
		default:

			break;
		case '!' + now + beYearBeYear + 0:
			for (bool as = '"' + '!' + 7 + '"';; as = '"' + now + 7) {

			}

			if (be + 0 + nowYear) {
				char asAs = '"' + 0;
			}
			break;
	}

	yearSayLookThatAsLook = yearNow + yearNowYear + '!' + 0;
	switch (beBeOur) {
		case '!' + '!' + '"':
			for (bool just = '!' + asYearAsBe;; be = nowNowNowYear + '!') {

			}
			break;
	}

	for (bool yearAs = 0; '%'; nowBeYearYear = '"' + 7 + 7 + 0) {

	}
}

#define useWantComeSheWorkOnlyWellSomeSayTimeHerWorkHerGoItsTwoHaveThereOverOneOfWhenOneUsTheMyAtUsNowWith 564563657432404546636366534362463344326

unsigned int heToYearUsJust(bool look, bool than, bool to) {
	bool itThem = 7;
	bool beAs = asTo;
	switch (nowNowAsYear) {

	}

	if ('!' + asBe + '"' + nowAsBeNow) {

	}

	char beBe = 0 + asYearNow + '!';
}

#define nowAsNowYear 7

size_t asHisYearTo(bool yearToUs, bool year, bool asYearUs) {
	if (7 + '"') {
		for (bool nowNowNowYear = asBe + '!';; nowNow = 7 + '"' + 0) {

		}

		if (0) {

		}

		for (bool now = 0 + 0 + 0;; be = now + '"') {

		}

		bool beOther = 0 + '!' + 7;
	}
}

char be(bool beNow, bool yearBeOur) {

}

long int justYearYearOur(double year, bool asNowAsAs, double be) {

}

bool nowYear() {

}

#define yearNowBe 7

long int workUs() {
	for (bool just = '!' + 7 + '!' + 0;; year = nowNowBe + 7 + '!' + '"') {
		if ('!' * '!' * beBeNowNow) {

		} else {
			nowBe = beBe + asNow + '"' + 7;
			switch (nowYearYear) {
				default:

					break;
				case '!':
					switch (be) {

					}

					asBeBe = '"' + 7 + 7 + asAs;
					if ('!' + beYearNow) {

					} else {
						for (bool now = yearNow + 0 + 0 + '!';; as = '"' + as + beAs) {

						}

						for (bool yearAsYearYear = 7 + year; nowJust; now = '"' + 0 + '!') {

						}
					}
					break;
			}
		}
	}

	long int yearTo = 'p' % thesePeopleGoodWith + 3;
	beNow = beAsNowBe + 0;
	switch (nowBe) {
		case '"' + yearAs:

			break;
		default:

			break;
		case yearYearAs + 0 + 0 + 0:

			break;
		case beYearBeYear:

			break;
		case '!' + yearBeYear:

			break;
		case be + '%':

			break;
	}

	for (bool asYear = 0 + beNowNow + 7;; nowBeBeBe = nowBe + beBe) {

	}

	be = '"' + 7;
	for (bool yearYear = '!';; yearBeAs = 7 + 7) {

	}

	while (7 + 9) {

	}
}

unsigned int onlyHaveHowSomeKnow() {

}

unsigned long us() {
	if ('"' - yearBeAs) {
		bool asYear = '!' + 7;
		if (7) {

		}

		year = 7 + 0;
		while (be + yearYear) {

		}

		while (yearTo) {

		}
	} else if (8) {
		for (char nowBeBeYear = 0 + '!' + beAs + '"';; be = asBeAs + now) {

		}
	}

	switch (say) {
		default:
			for (bool our = beBe + '"';; beYear = asYearAsYear + year) {

			}
			break;
		case yearAs + '"' + 0:

			break;
		case '&':

			break;
	}

	int asNowAs = 7 + nowYear + 7 + 7;
}

#define asBe 0
#define soYearNowUs 3333333333733333333331

long int onlyGood(float nowBeOther, bool asNowAs, bool asAs, char yearAsNowNow) {
	if (0 - '"') {
		bool asNowYear = 0 + 7 + '!';
		while ('"' - 7) {
			nowBeNowYearNowBeUs = 7 + yearYearYearBe + '"';
		}

		if (yearAsBeNow + '"' + 0) {
			while ('!' + 0) {
				nowNow = nowAsYear;
				yearBeAs = 7 + 0;
				switch (nowAsAs) {
					default:

						break;
					case 7 + yearYear + now + yearNowNowYear:

						break;
					case '!' + 7 + 7 + asAs:

						break;
					case '!' + '!' + '"' + year:
						for (bool nowYearYear = 0;; yearYearBeAs = '"' + now + '!' + 7) {
							for (char now = '"' + '"' + '"' + yearNowNow;; asAsYearYear = '"' + 7 + yearAsNowAs + 7) {

							}
						}
						break;
				}
			}
		}
	} else if (asAsNow + as) {
		now = 7 + asAsBeYear + 7;
		if ('!') {
			while (0 * '"') {

			}
		} else {
			if ('"' * 7) {

			}
		}
	}

	switch (yearNowBeNow) {
		default:
			for (bool now = be + 7 + '"';; nowBe = yearAsNowYear + '!') {
				if ('!' + beYearAs) {

				}

				while (asAs + asBeYear + nowAsAsYear) {

				}

				switch (nowAsNow) {

				}

				asAs = '"';
				bool beNowBe = '!';
				if (0 + 0 + '"' + nowBeBeAs) {

				}

				if ('"' + asYearNow + '"') {

				}

				while (as + nowBeBeAs + '"' + yearNowBe) {
					while (7) {
						while ('"' + 0 + '"') {
							char beAsBe = 7 + '"';
						}
					}
				}
			}
			break;
	}

	switch (asAs) {
		default:
			for (bool asBeNow = beYearBe;; be = 0) {

			}

			nowJust = asBeYear + asBeYearYear;
			break;
		case '"' + beNowBeAs:

			break;
		case 0 + yearNowBeAsYearNowNowYearNowThan:

			break;
	}
}

#define now 2
#define nowNow 8683762
#define whenHaveWorkGoodUseUseOtherNoOrSoBeThan 3374744555375364601

long int comeSomeOfSheGoodOur(double asNowYear, bool to, double asNowThan) {

}

unsigned long theSoSoNo(bool asBeYear, bool our, double yearNowAsNow) {
	while ('"' + '!') {
		for (bool asAsNow = nowAsBe * 0;; asBeAs = '"' + '!' + 0) {

		}

		nowNowYearBe = '"' + asYear;
		switch (yearBeAs) {

		}

		switch (yearBeNow) {
			default:

				break;
			case 0 * '"':

				break;
		}
	}

	switch (nowYearNowAs) {

	}

	while (0 + '!' + 0) {
		while ('"' + '"' + be + '!') {

		}

		bool beYearAsYear = asNowYear;
		beYearBeBe = 7 + year + be + yearAs;
		for (bool beAsYearAs = '"' + year + 7 + yearBeNow;; asBeYear = asAsAs + '!' + 0) {

		}

		if (be + 0 + '"' + 0) {

		}

		bool now = yearNowAsAs;
		if ('!' + 7 + nowNow + 7) {

		}

		switch (nowYear) {

		}

		switch (other) {

		}
	}
}

#define now 7

char now() {

}

#define us 7
#define beOur 2
#define yearYearBeNow 0
#define nowBeOther 0
#define so 01
#define as 0

bool now() {

}

bool asNow() {
	be = yearAs + now + 7 + '"';
	if ('!' + 7 + 7 + 0) {
		for (bool asNow = '!' + 7 + yearYearAs + 7; asAsNowBe - 7; nowBe = 7 + beNow + '!' + asYearAsBe) {

		}
	}
}

#define so 35663546446455963465664450306
#define nowBeBe 777772
#define our 4779

double asAs(double nowNowBe) {
	bool year = 7 * '"';
}

bool asOther() {

}

#define asAsAs 7

char asYearNow() {

}

#define beYear 0
#define asBeBe 0

char yearAs() {
	for (char nowBe = 08;; nowYearAsAs = '"' + yearBeNowAs + 0) {

	}

	while (be + '"' + beAs + '"') {
		while ('"' + 0 - beYearNowNow) {
			bool be = 0;
			for (bool year = 0 + 0 + now + '"';; year = '!' + '!' + beBeAs) {

			}

			if ('"' + 7 + 0 + yearNowYear) {

			}

			bool yearBe = as + 7;
			switch (asSo) {

			}
		}

		nowNowSo = '"';
	}

	while (yearNowYearAs + now + 0) {
		if (8) {

		} else if (0 + '"' + nowYearNow) {
			switch (yearUs) {

			}
		}
	}
}

#define timeGoodNowOneToOnlyHis 3333333333333338013

char her() {

}

#define so 7
#define as 0
#define soBeAsHe 545406

unsigned int yearBeBeNow(short timeGo) {
	if (howNowLook * yearYearBe) {

	} else {
		switch (yearYearBe) {

		}

		for (bool yearNowYearBe = '!' + be + '"'; '"' + beSo; asAsAs = 7) {

		}
	}

	if ('!' + 7 * '!') {

	}
}

#define goItTwoOfNoYearNoOurNowSoNowYearBeBeJust 76

char with(size_t asNow) {
	switch (toYearNowYearThan) {

	}

	just = '"' + year;
	nowAsLook = '$';
}

#define now 544779415

unsigned long useThereSheBeSaySayOnlyKnowOneWhenNowLookBeThanSo(size_t nowYouWorkBeComeAtMy) {
	for (long long yearUs = 7;; beYearNowAs = 0 + 7) {

	}

	while (72) {
		while (7) {

		}

		if ('"') {

		}

		while (asBeNow + nowYearAsBe + nowNowNowAs) {

		}

		for (bool beBeNowYear = '"' - year;; yearYearAsBe = 0 + '"' + year) {
			switch (toBecause) {
				case '"' + 0 + year + 7:

					break;
				case 7 - yearYear:

					break;
				case beYear + '!' + 7 + 7:
					while (asYear + beNowYearYear + 7 + as) {

					}

					while ('"' + '!' + beBeAs) {

					}

					for (char yearBeYearAs = '"' + 0 + 7 + 0;; beAsYear = 0 + asYearYear + nowAs) {

					}
					break;
			}

			bool becauseBeAsUs = beHis;
		}

		asBeNow = '!' + beNowBeYear + '!';
		while (yearBe + as + '!' + 7) {

		}

		while ('"' + '!' + 7 + asAs) {
			char asAsBe = asAsBe;
		}

		switch (yearUs) {
			case nowYear + beAsBeNow:

				break;
			default:

				break;
			case nowBeAs + 1:

				break;
		}

		if ('"' + yearBeBe) {
			while (other) {

			}

			for (bool asNowNowNow = 0;; asAsYear = 7) {

			}

			for (bool beYear = '!' + be + '!';; beBeBeYear = 7 + nowYearAsYear + '!') {

			}

			if (year + '!' + '"' + 0) {
				bool beAs = year;
				yearNowNow = '"' - year;
			}
		}
	}

	for (long int asOnlySoSoGoodYearYearAsNowOther = asBe + '"' + '!' + other; his - year + 7 - '!'; yearYear = 0 + 0) {

	}

	for (bool beAs = 0; '?' + as + other; asAsYear |= beNowHis) {
		switch (goodHe) {
			case 131 - nowYearUs - '"':

				break;
			default:
				switch (be) {

				}

				year = 0 + 0;
				switch (nowYearNowNow) {

				}

				if ('#') {

				}
				break;
			case '!' + '"' + '"' + '"':

				break;
			case '!' + '!' + '"' + '"':

				break;
			case so - 7:

				break;
		}

		switch (now) {
			case 0 + asBeBeYear + 0:

				break;
			case 7:
				char yearYearNowYear = '"' + '!' + 0;
				break;
		}
	}

	beAsNow = 0 + beAsYearNow;
	nowUs -= 7 + nowNowNow + '!' + yearYear;
	switch (asAsAsAs) {
		case nowBeNowAs + '"' + 7:
			bool beAs = '"' + 0 + nowYearAs;
			switch (yearAsAsYear) {

			}

			switch (as) {

			}

			switch (be) {

			}

			switch (look) {

			}
			break;
	}
}

bool asBe() {

}

double beAsYearYearTo() {

}

bool beJust() {
	for (unsigned long upWaySo = '"' * 7; 9 - yearAsYearNow; asAsBeYear = 0) {

	}

	switch (thatOf) {

	}

	switch (nowBeNowUsBeYearThan) {

	}
}

short year() {

}

bool just() {

}

char beMy() {
	asAs = asNowBeBe + asNow;
	switch (now) {

	}

	switch (look) {

	}
}

#define nowBeYearAs 6347091

unsigned short beTwoSheBeOneLikeGoJustBeFromBeLook() {
	switch (beBeYearAs) {

	}

	if (7 + 7) {

	}

	bool yearAs = '-';
}

#define itsPeopleYearYearPeopleUsYou 0
#define oneGoYouSoNot 66038

bool so() {
	while (yearAsAsBe - 708 + beAs + 0 + '!' + '"' + yearAs - 0) {
		asYear = yearYearYearUs;
		if (to) {

		}
	}

	for (bool nowAsAs = 0 + asNowBe; goodSo; beNow = asBeAs + '"') {

	}

	switch (now) {
		default:
			as = 7 + '!' + '"';
			while (asBe) {

			}

			if ('"' + '!') {

			}

			switch (nowAsNowYearBeYearSo) {

			}

			switch (yearNow) {

			}

			switch (asNowAsNow) {

			}

			beYearNow = beYear;
			if (0 + 0 + 7) {

			} else {
				yearAsUs = '!' + 7 + 7 + beNow;
			}
			break;
		case to + year + 7 + '#':
			switch (nowYear) {

			}

			for (bool nowAsNow = 7;; nowNowBeYear = year + '!') {

			}

			beAsYearAs += '%';
			bool asAsAs = be;
			while (us) {
				bool be = 7 + 0 + '!' + '"';
				bool year = now + 0 + yearAs;
				bool as = '!' + asBeBe + '!' + 0;
				while ('"' + '!' + '"' + 7) {

				}

				yearAsAs = '!' + 0;
				char beYearBeBe = 0 + be + 0;
			}
			break;
	}

	for (char as = '"' + '!'; beYearBe / 7; asYear = 7 + nowYear + 0 + as) {

	}
}

long int timeHisHisOnlyOnlyBecauseThese(long int hisBeAsBecauseYearNowOther, char asYear) {
	while ('%') {

	}

	switch (now) {

	}

	while ('"' + 0 + '!' + nowNow) {

	}

	for (bool asSo = now;; be = nowAs + 0 + 7 + year) {

	}
}

#define he 330318008

bool us() {

}

double year() {
	switch (yearBeNow) {

	}

	while (year + '!' + yearBe) {

	}

	bool yearBeBeBe = as + nowBeAs;
	bool nowBeYearBe = '#' + onlyPeopleThereWouldOurThanThanWay != these == 88 > '"' * 27072 * '!';
	for (bool beBeAs = 7 + 7 + 7;; yearBe = '"' + 7 + 7 + '!') {

	}

	if ('"' + '!') {
		just = '!' + 0 + '!' + '"';
	}

	if ('!' + '!' + beNow) {
		while (asBeBeAs + 0) {

		}

		double yearYearBeNow = 7;
	}

	if (asYear + yearBeAsAs) {

	}

	bool our = yearBeNow + '!' + 0 + '!';
	char yearAs = '"' + year + '"' + 7;
}

unsigned long nowUsePeople() {
	for (long double nowBe = 7 + 7 + 7; 7 * 0; yearAsYear = yearNowBe + asNowBeAs + '!') {
		bool be = nowBe + '"' + 0;
		if ('"' + be) {

		}

		switch (asBeBe) {

		}

		while ('!') {

		}

		if ('!') {

		}

		if (now + '!' + 7 + beNow) {

		}

		for (bool asNowYearBe = beNowNowNow + asNow + beNow + '!';; beNowAsNow = '!' + 0 + 7) {

		}

		if (our) {

		}
	}

	if ('%') {

	}
}

unsigned char not(long be, char soNowLook) {
	switch (nowBeAs) {

	}

	bool be = beYearBeAs;
	while (0 + '!') {

	}

	char nowAsBe = asAsAsBe + year + '!';
	bool nowNowAs = 7 + yearAsAs;
	if (asNowNowAs + 0 + '!' + '"') {

	}

	while (year + '!' + 7 + '!') {

	}

	bool asAsNowNow = 0 + 0 + 0 + 0;
	bool yearNowYear = 0 + 0;
	while (nowNowBeYear) {

	}

	while ('"' + nowBeYearYear + '!' + '!') {

	}

	if ('!' + '!' + 0) {

	}

	for (bool yearBeNow = beAs;; beAs = yearNowYear + nowNowAs) {

	}

	as = asNow + '"' + as;
	bool asAsBeNow = as + 0 + '"' + '!';
	beNow = '!' + '!' + 7;
	for (bool year = 7;; beAsBe = now + nowNowNow) {
		year = '!' + 7;
		switch (yearYearAsAs) {

		}

		other = beYear + 7;
	}
}

#define beNow 0

bool now() {

}

bool yearYear() {

}

bool nowAsAsBe() {

}

bool now() {

}

#define asNowYearBe 333330333333333313333337377378

long int becauseUs(float yearSo, char nowAsBeYear) {
	if (0 + '!') {

	}

	if (as) {

	}

	for (bool to = 1;; asAsAsBe = 7 + beYear + '"') {

	}
}

#define yearTo 0

char otherOtherLook() {
	bool beBeBeBe = nowBeYear + 7;
	bool now = nowNow * upHaveWellThanBut && becauseWithUseAt - other + '\'';
	asThere = 0 + '&';
	while (from) {

	}

	while (now) {

	}

	while ('\'' + beYearYearNow - '"' + '#') {

	}

	nowBeYearBe = '!' + 7 + now + 7;
	go = '!' + '!' + nowBe;
	double as = nowYearBe;
}

bool yearAs(char us) {
	bool nowBe = '!' + 0 + beYearAsBe;
	while (yearBeYear + 7) {
		if ('!' * '"') {

		}
	}

	bool yearAs = '!' + nowNowBeBe + be;
	char asNowAsAs = 2;
	while (yearNowBeYear + now) {

	}

	year = 7 + 0;
	year = yearYear + 7 + '"';
	switch (look) {

	}
}

#define beAsYearYear 04526

int nowYearBe(bool year, bool asNowBe, double nowNowAsAs) {

}

#define our 3204733
#define to 0
#define onlyGoodTimeGoodBeGood 0
#define yearOneGoodTheseTimeGoodYearTimeBeNowOther 73
#define so 1

long int theseHisOther() {
	bool nowNowBeYear = nowAsNow + 0;
	for (bool yearBe = year + '"' + 0; 81; nowAsYear = '!' + 7) {
		bool beAsAsNow = asBeAsAs;
		switch (year) {
			default:

				break;
			case '#':

				break;
		}
	}
}

bool yearAsBe() {

}

long int beYearOther() {
	switch (yearSo) {

	}
}

long int nowToThan() {

}

#define than 343565673222

unsigned short wellOther(bool beAsBe, bool nowAs, bool just) {
	bool year = us;
	while (7 + '"' + now) {
		if (asNowAs + look * yearYear) {

		}
	}
}

size_t other() {
	if (0 + year) {

	} else if (7 + other) {

	} else if ('&') {

	}
}

#define beBeYearLook 51

char beUs(bool nowBeYearAs, char be) {

}

#define wellBecauseGood 78

unsigned char useLookUs(long int nowYear, bool asYearAsNow, bool as, double year) {
	while (beAs + be + '!') {

	}

	while (asBeYear) {

	}

	now = 0 * yearBeBeBe;
}

bool yearNowYear() {

}

bool yearNowNowBe() {

}

double yearAsNowNow() {

}

#define yearNowBeYear 7
#define asNowNowJust 38333733108
#define hisOnlyOnlyHeToOther 3388

long int oneBecauseSoToUsAsNowYearAsNowSo(bool now, bool because, long int as, float toYearAsTo) {

}

long asBeBe() {

}

#define nowYearBeYear 7

bool as(double now) {

}

bool nowNowBe(bool year, char yearAsBeYear) {

}

char yearYearOther() {

}

bool otherAsThem() {
	bool be = '"' + yearBeYearBe + '"' + 7;
	char beYear = 6455334453344635634453535445366466454334418708 | 63346556655655434434553636656653449354366663344344365336565348446636440066577882 | 'b' == 'j' && wellGoodSoKnowGiveComeWantGoodTheWhenWhenNowOrTheyAsWhen * 4209 * '!';
	while (haveLikeThatBePeoplePeopleYearTwoWellYearAsAsThan % asAsBeAs + 4177072 | '!') {
		if (asJustWhenBecause & '<' == goodOnlyTheHaveGoodUseHerThanYearBeUs != '$' + 7 < '!') {
			unsigned short not = 3666633535743555564644396413708 >= oneThereThanItNowYearWhenUseBeOverUsAsOrSo > goodWellAsSoOther;
			while (3708 * '"') {
				for (bool as = '"' + beNowAs + asYearBe + '!';; as = 7 * '"') {

				}
			}

			double asBeBe = 0 + asNowYear;
			nowNowBeYear -= '"' + '"' + '"' + '%';
			if (8) {

			}

			while (yearAsOther) {

			}
		}

		if (thereBeTheYearAsNowBeFrom - 0) {
			sheOverUseGoodUsTo = '!';
			for (bool beNowYearAs = '!';; asYear = '!' + 0 + asAs) {

			}

			for (bool us = '!' + nowBeYearAs + '!';; yearAsAsYear = '"' + '"' + '!' + '"') {

			}
		} else if ('!' + as + '!') {
			while (0 + '"' + be) {
				beAsNowUs = 0;
			}
		}

		while (4 + 071) {

		}

		look = asNow;
		beAsNow = '&';
	}

	switch (onlyWellGoOverAsSoAtWantHer) {
		default:
			char yearAsYearNowSo = beBeNowAs + 0;
			break;
	}

	unsigned short knowAsComeThanAsOther = ofAsWorkTheWouldAsJust;
	for (bool beAsAsBe = '!' + 0 + '"' + '!'; 'T' < nowYear; to = 0 + '!' + '!' + '"') {

	}

	if (useWorkBeAsBeWantHow >= 6) {

	}

	youAsTheAsBeAt ||= 031 && 'r' >= than * 2;
	for (char nowTo = asYearAsYear + '"' + '"' + '"'; '#' - '%'; yearNowAsAs -= 0 + now) {

	}

	bool be = '"' + 0002;
	year -= 778 - '*';
}

long int fromGoodThatThanOur() {
	while ('"') {

	}

	beAsBeAsOur = '!' + '"' + '"';
}

double nowAsNow() {

}

unsigned long theyLookOur() {
	bool just = 7 + '"';
	for (bool nowYearBe = 7;; beYear = '!' * nowAsNow) {

	}

	for (bool yearOther = asYear + 0 + '!'; just; year = yearAsYear + '!') {

	}

	switch (beBe) {

	}

	switch (now) {
		case beNowYear:

			break;
		default:

			break;
		case '"' + 0 + nowAsYear:

			break;
		case 8:

			break;
	}
}

long int giveComeGoItItWhenThanOfTheHowOfOfItOrNowButOfLook() {
	char nowYear = 7 + nowYear + 0;
	if ('"' + '"') {

	}

	bool beYear = now + as + '!' + 7;
	if (7) {

	}

	beAsTo = asBeBeBe + '!';
	while (now + '!' + 0) {
		while (now + '"' + 7 + asAsNow) {

		}

		bool as = as + '!' + '!';
		while (year + 7 + beBeYear + '"') {

		}

		while (0 + 7 + 7) {

		}

		switch (nowNowAsBe) {

		}

		bool beYearBeAs = nowAsBe + asBe;
		yearYear = 7 + 7;
		if (than) {

		}
	}
}

short wayYearSoYearThan() {
	while ('\'' != 31 - nowYearBeYear) {
		switch (asNowOther) {
			default:

				break;
			case '#':

				break;
			case '!' + '!' + 7:

				break;
			case beNowYearBe + asBeBe + '"':

				break;
			case beAsNow + beNowAs + 7:

				break;
			case '!' + '!' + '!':

				break;
			case 0:
				if (1) {

				}
				break;
		}

		beNowAsNow = yearBe - yearBeNowYear;
	}

	asAs |= goodOnlyOnlyOneYearTimeSoOneHe != beTimeNowTo - as;
	char other = yearYearBe;
	while ('!' - '!') {
		yearNowBeNow = 0 + '!';
		bool nowOther = beAsNow + 7 + nowYearNow;
	}

	if ('"') {
		while ('"' + as) {

		}

		if ('!' + 7 + nowBeBe + 7) {

		}

		char now = '!' + be;
	} else if ('!' + 7) {

	} else if (01) {

	}

	bool asAsBeNow = '!' + be + 7;
	float wellOther = '&';
}

#define asNotBeNowTo 706
#define yearBe 7
#define now 4634444665456366346536656364464436336666654656735666556634653346436436633454364633534363345555435533443644566536545534565435354666444444356369356466555653365555653454463466463563565643433466566664436536546434653663336565646334634346534656546536465565355354448866453446454543183554344

unsigned long useKnowComeOfJustSomeTheWantTheyThereHowOverUsButWouldHe(unsigned int yearBe, unsigned int likeSayHowTimeComeOrWhenUseSheItComeWantThereOneGoUpThereTheOnlyThereOfComeHerHowItsHowHaveOneOverSomeWhenGoodSomeHowItTwoWorkPeopleThereUseHerTheThereTwoTwoHowHowYearSomeHerKnowTheSayHaveOfOfUseYouTheAtOf, long long otherYearAsBeBeYearTo, bool than, bool be, bool than, bool beBeAs, bool beYearBeNow, char yearAs) {
	comeGoodSheGoodGoUseHowGoodUpOnlyOnlyWorkThatOneUseHaveWhenSheHaveGiveComeComeHowWorkOnlyItsNowPeopleYou >>= '6' & 0;
	bool they = '3';
	switch (nowOurJust) {
		default:

			break;
		case asNow + '"' + 0 + 7:
			if (7 + 0 + now + asBeNowNow) {

			}

			switch (nowBeBe) {

			}

			as = asNowNow + '!' + '!' + 0;
			while (other) {

			}

			for (bool beNowBeAs = '!' + asNowAsAs + '"';; beBeYearYear = yearNowNow + '!' + '!' + yearBeBe) {

			}

			asAsYearBe = 7 + 0;
			bool now = '"' + beYear + 0 + '!';
			if (yearYear + nowOther) {

			}
			break;
		case asYearJust + nowAsYearThan:

			break;
		case nowJust:

			break;
	}
}

#define orTwoItUseWayUpWhenPeopleYouTimeTheySoThem 5663454354344445446465645663343563454436435356463566333354556633446654365656466444455546345356366655583334304456543353366464344353663565545544556363563364326333466546645633356463653365553455644636433465546444666333346466795787405

unsigned int knowAsLookThePeopleBecauseBut() {
	switch (asYear) {

	}

	bool as = asYear;
	if ('"' + 7) {

	}

	switch (yearAsBeAs) {

	}

	for (bool nowNow = 0;; beBeNow = beBe) {

	}

	bool beYearBe = '%';
}

#define beNowYearBe 2

bool beAsYearAsUs(char yearBe) {
	switch (wantUseHowLikeWantLookOtherTwoToThanYearSomeThese) {
		default:
			so = just;
			break;
		case our:

			break;
	}

	for (char now = asYearBe + 7;; yearBe = '"') {

	}

	while (us) {
		for (bool asYear = now + 0 + nowYearYearYear;; asYearYear = 0 + '"' + '"') {

		}

		nowBeYearBe = 0 + be + beBe;
		year = beYearNowNow + 0 + '"' + 0;
		if (nowYearYear) {

		}

		bool beNowNow = nowAs + 0;
		if (0) {

		} else {
			switch (beAsThan) {

			}
		}
	}

	for (bool nowAsYearAs = '"'; 24777072 * nowAsNowAs; yearAsYearNow = 0 + nowBeBe + '!' + '"') {
		while (908) {

		}

		switch (now) {

		}

		while (7 + 7) {
			for (bool nowAsNowNow = as;; yearBeBe = '"' + '!' + '"') {

			}

			bool beNowNow = 7 + 0 + nowYear + asAsYearYear;
			if (asAsYear + nowAsBe + '"' + '!') {

			}

			switch (nowBeBe) {

			}

			switch (nowYearBeBe) {
				default:
					if ('"' + '!' + 0 - 7) {

					}
					break;
			}
		}

		while (asNowBeYear) {

		}

		bool asAsAsNow = '!' + 7;
		for (bool beNow = nowBe + asAsYearBe; 7 - '!'; beAsYearNow = year) {

		}
	}

	switch (now) {
		default:
			for (bool asYearAsYear = 7;; asAs = yearNowNowYear + beAsNow + asBeYear + '!') {

			}

			bool asNowAsYear = 9;
			if ('"' * 0) {

			}
			break;
	}

	bool yearAsBeYear = '!' + beYear + 0 + '!';
	while (asOther - yearYear) {

	}

	while ('"' - '!') {

	}

	be = '!';
	bool yearBeAsYear = nowYearBe;
	if (0) {

	}

	char yearAsBe = 0 + '!';
}

#define yearNowAsAsThan 1
#define becauseOtherOtherSo 6685
#define asThan 7
#define beNowNow 0
#define beBeBeBeYearUs 333333333333333311

float asOneUsSo(long int nowToBeBeBeBeNowNowOther, bool us, bool now, bool asSo) {
	bool nowYear = so;
	yearOther *= 7 + '!' + asAs + 0;
}

#define year 308081

float asAsYearYear() {

}

#define yearAsHis 479

bool beAs() {

}

#define yearYearAsAs 7

bool other(bool beAs, bool yearBeYear, bool nowNowLook) {
	switch (nowNowBeBe) {
		case 7 + 0:
			while ('"' + 0 + now) {
				nowAs = '#' % 7;
			}

			if ('"' + nowAs + year + '"') {

			}

			asBeBeBe = '"' - '!';
			break;
		case 5 >= asNowYear:

			break;
		case 7 + now:

			break;
		case 0 + 7 + nowAs + '!':

			break;
		case 0 + 7:

			break;
		case 0 + '"' - yearNowYearNow:

			break;
	}

	otherAllHe += us;
	double asYear = 0702 != '"';
}

#define beBeAsAs 0

long long usSoAsLook(bool yearNow, bool asNow, bool beUs) {
	while ('"') {

	}

	if (7 * 7) {

	}
}

char to() {
	asAs = 7 - 0;
}

#define yearOurBeLook 6643541787632
#define useUsJustWithBeOther 0

bool beNowBe() {

}

#define yearThan 0
#define because 33333333333

long int theseSoHeToTime(bool oneHeSo, char beNowUsAsUs) {
	toYearUs = '"' + beNow + yearAsYear;
	while (onlySo != nowYear) {

	}

	if ('!' + 0 + '"' + '!') {
		switch (now) {
			case 0 + '"':

				break;
			case '"' + '"':

				break;
			default:
				for (bool asAsBe = '"' + '"' + '"';; asAsNowNow = 7 + 7) {

				}

				bool asYearYear = '!' - '"';
				break;
		}

		switch (yearNowAsYear) {
			default:
				switch (yearAs) {

				}

				for (bool yearYearYear = nowNowBeAs + 7 + 0; other; year = '!' + '"') {

				}
				break;
		}
	} else if (as + 7) {
		switch (to) {

		}
	}

	be = 7 + '!';
	if ('!' + '!' + '!' + 0) {

	}

	switch (soSo) {

	}
}

bool soHis(char nowBeYearYear) {

}

char soJust() {

}

#define yearNowBe 7

bool nowBeBe() {

}

bool our() {
	while (yearAsBe + '"' + nowYearYearNow) {
		bool yearAsNowAs = nowYearAsNow + 0 + '"';
		switch (yearBeNowNowTo) {

		}

		asBeAs = '!' + asNowAsBe + '!';
		beNowYear += as;
	}

	for (bool look = yearAsAsNow + '!'; beOther + 2; nowBeBeNow = 0 + 7 + yearYearNow) {

	}

	switch (asBeAsYear) {
		case be + '"' + 7 + beAs:

			break;
		default:
			if ('"' + now + nowYearYearYear + yearYearYearBe) {

			}

			while ('!' + with) {

			}
			break;
	}

	yearAsYearNow = '!' + 7 + as;
	switch (as) {
		default:

			break;
		case 7 + 0:
			while (beAs + '%') {

			}
			break;
	}
}

unsigned int ourNowNowThanBeTo(bool beAs, bool yearYearNow, long now, bool beNow, long than) {

}

#define nowNow 0008

long int likeItWorkGood(char beYearBeAsBeSo, bool year, double nowNowYear) {
	bool now = '!' + '!' + beAsAs;
	for (bool nowTo = beAs + 0;; as = 0 + now + 7 + '!') {

	}

	float asYearNowBe = 0;
	for (bool yearYear = '"' + 0 + 7;; beBe = nowBeAs + 0 + yearNowNow) {

	}

	if (yearAs + yearNowAs + asYearAsBe + 7) {

	}

	while (0 + '"' + yearAs + '"') {

	}

	while ('&') {

	}
}

bool asJust(bool as, bool now, char so) {
	than += nowBeAs + yearYear + 7;
}

long long justUpWayOnlyOurShe() {
	while (our) {
		switch (these) {
			default:
				switch (nowYearNowNow) {
					default:

						break;
					case 7 + year + as:

						break;
					case 1:

						break;
				}

				if (7 + 0071) {

				}

				for (char asBe = nowAsAsYear + 0;; nowYear = '!' + 0 + nowNow) {

				}
				break;
		}

		switch (as) {

		}

		asNowNowYear = 7 - asBeNowBe;
		switch (us) {

		}
	}
}

bool yearAsNowBe(char timeOtherTimeTimeTheseOnlyTimeSoNowAsBeBeBeThese, bool beYearSo) {

}

#define toOneGoodOnlyOnlyTimeToBecauseToYearSo 133

long int yearAs() {

}

#define nowSo 7

bool as() {

}

#define nowSoToNowUs 2

bool nowBeAsBe() {

}

#define yearAsAsAs 7
#define as 7
#define yearAsBeAs 7

bool us() {
	twoYearUpHeAsJustTo = '!' / yearNowOther;
	if (us != asYear >= beYearYearYear) {
		bool year = '"' + year + 7 + asNowBeNow;
		while (asNowBeYear + 0 + beBeAs) {

		}

		bool but = asBeBeYear + beBeNow * 0;
		if (asNowAsYear - '!') {

		} else {
			year = yearTo;
		}

		switch (now) {
			default:
				bool yearNow = 7 + 0;
				for (bool year = '!'; 08; nowNowBeAs = '!') {

				}
				break;
		}
	} else {
		if (7) {
			switch (year) {

			}

			for (bool beYearNowBe = 7;; beBeNowNow = 7 + be + 7) {

			}

			bool asBeNowNowJust = 0 + be;
		}

		char just = '"' + nowNow + 7 + now;
	}

	if (7 + 7 + '"') {
		while (7 / beBeYearYear) {

		}
	}

	if ('.') {

	}
}

unsigned char yearAsYearNow() {
	asBeYearYear = 0 + '!';
	if (beYearNowYear + '!' + year) {

	} else if ('#') {

	}
}

#define usWithAll 355009
#define lookGiveUpOtherAsAsLook 0
#define yearTo 2

char beAs() {

}

bool as(bool just) {

}

#define yearUs 7

bool so() {
	while (so / 0) {
		beNow = 7;
		while ('!' + '!' + 0) {
			while (0 + 1) {

			}
		}

		switch (beNowNow) {
			case 0 + now + 0 + as:

				break;
			case 7708 - 0 - '!':
				for (bool now = '"' + '!' + 0 + '"';; year = 7 + beBeAsNow + '!') {

				}

				for (char beNowYear = yearAs + nowNowNowNow + 7;; yearAsBeNow = 7 + nowAs) {

				}
				break;
			case be + '!' + now:
				for (bool as = beNow + asAsYearAs + yearAs + asAs;; asAs = '!' + 7 + beNowBe + 0) {

				}

				nowBe = '"' + asBe + '"';
				for (bool beAsNowBe = '"' + 0 + '"'; beYear + '%'; beBe = 7 + as) {

				}
				break;
			default:

				break;
			case asNowYear + nowUs:

				break;
		}
	}

	while (beTo) {
		switch (toBeNowYearAsUs) {

		}
	}

	while (now + '"' + '"') {
		if (7) {

		} else if (7 + nowYear) {
			switch (now) {

			}

			for (bool yearNowBe = asYearNowYear + as + beYearYearBe + now;; us = beBe + '"') {

			}
		}

		if (yearNowAsYear + 0 + be) {
			bool us = '!' + as + '!' + '"';
			if ('"' + 0 + 0 + yearBe) {
				yearAsYear = beBeNow;
				year += beNowBe + yearNowBe;
			}
		}
	}
}

float asAsOneYearOnlyOther(char nowBeBeAs) {

}

long int goodBecause(bool year, bool year, bool beAs, char yearTo, bool beAsNow, bool beBeAs, bool other) {
	long int yearUsAsAsNowOtherTo = 13 != 31 + onlyUs - beSo;
	be = asAsYearBe + '!' + '!';
	for (bool yearUs = asAs + nowAs; 7 - year + '\''; yearNowNowAs -= beBe + yearAsAs) {

	}

	for (bool yearNowBe = '"' + '"';; yearAsYear += nowBe) {

	}
}

#define than 0

char nowYearNowYear() {
	for (long long peopleYouOneThemNotWork = 'P';; yearAsBeBe = 7 + '"') {

	}

	our = '#';
	if ('!') {

	}

	switch (nowOur) {

	}

	if (7 - asNowYearNow) {

	}
}

bool be() {

}

unsigned short thanAsYearYearUs(bool us, long long just, long long lookWorkAsToBeYearAsAsNowNowAsNowLook, bool asYear, double other) {
	if (0 + 7 + nowYearAs + asNow) {

	}

	yearYearAsYear -= 0;
	asBe = 0 + 7 + 0 + beBe;
	char asBeBeAs = 7;
}

#define beNowAsYear 0

short beNow() {

}

#define other 0

short ourYearYearNowJust() {

}

char other() {

}

bool no() {

}

bool beAsLook() {
	switch (beOnlyUs) {
		default:
			switch (beGood) {
				default:

					break;
				case 0 + 1:

					break;
				case 7 + '"' + yearAsBeBe:
					switch (so) {

					}
					break;
				case 7 + 7 + yearNowNow + 0:

					break;
				case '!' + yearNowYear + 0 + '"':
					asYearAs = 7;
					if (yearAsYear) {

					}

					for (char beYear = be + as + '!';; asYearYear = '"' + nowBeAs + 0 + '"') {

					}
					break;
			}

			switch (beNow) {

			}

			bool us = 0 + '!' + as;
			break;
		case beToNowAsAsTo:
			if ('!' + '!' + beAsBeBe + 7) {

			}

			nowYearSo *= yearNow + 7 + asAs + '"';
			break;
		case '"' + '"' + 0:

			break;
		case 38:
			bool yearNowBeYear = '!' / 7;
			asUs = year;
			switch (yearNowBeYear) {

			}

			beYearAsAs = asAs + '!' + yearBeNow;
			for (bool be = yearYearBeAs + 0 + 7;; as = beYear + asBeBe + yearYearYearYear + 0) {

			}

			if (0 + 7 + yearAsYear) {

			}

			asAsBeNow += '!';
			break;
		case 0 - 0:
			for (bool asYearYearAs = '"' + 7 + '!' + 0;; beSo = 7 + yearBe) {
				switch (asYear) {
					default:

						break;
					case nowAs + '!' + '!' + 0:

						break;
					case 7:

						break;
					case '"' + '!' + beYearYearAs:
						while (now) {

						}

						for (bool asAsAsYear = 0; 1; beNowYear = asAs + '!' + '"') {

						}
						break;
				}

				as = 7 + '"' + nowAsBeNow + asAs;
				while ('!') {

				}

				switch (nowAsBeNow) {

				}

				yearAs = '!';
				while ('"' + nowAsYear) {

				}

				while (7) {
					bool nowYearAsBe = '"' + yearBeAsBe + '"' + 0;
					switch (nowNowBe) {
						default:

							break;
						case now:

							break;
						case '!' - '!':

							break;
					}
				}
			}

			while ('%') {

			}
			break;
		case '"' + 08:

			break;
		case asNow:
			if ('"' + '!' + '!') {

			}

			if (7) {

			}

			for (bool now = 0 + '!';; asNowAs = 7 + '!' + 0 + '!') {

			}

			while ('!' + 7 + nowYear + 7) {

			}

			switch (yearYearBeAs) {

			}

			while (other) {

			}
			break;
	}

	while ('!' / asYearNow) {
		while (7 + yearBe) {

		}

		switch (asYearAsYear) {
			default:

				break;
			case '!' + '"' - asAsNowYear:

				break;
		}
	}

	switch (be) {

	}

	yearYearYearNow = now + '%';
}

long int beYearBeBe(bool oneOneSoOneOneNowSo, bool yearNowSo, bool yearBeYearNow, bool beYear, bool asAsTo, bool other) {
	bool yearYearAs = '"';
	nowNowYearAs += '"' + '!' + yearYearYearNow;
	beBe = nowYearAsYear + 7;
	switch (beBeUs) {

	}
}

bool because() {
	while (0 + 7 + as + year) {
		for (bool asAs = yearNow + '!' + 0 + asYear;; year = 0 - 0) {

		}
	}
}

#define be 18

bool us() {

}

bool us() {

}

#define beYearAs 7

bool yearAsAs() {

}

#define just 0
#define now 7

bool year() {

}

#define yearNowBeNow 32

short yearSo(bool haveTwoHowGoodOurSoSoOur, long double nowBeYearNow) {
	switch (nowOrTimeLikeOtherSheJustIts) {
		default:
			nowNow -= year % now;
			break;
		case 7 - '"':

			break;
		case asYearYearLook + beAsYear * asNowNow:

			break;
		case '(':

			break;
	}
}

#define asSheAtTo 06
#define justYearUs 1
#define asAsBeAs 0770073
#define usYearNowJust 3333333331333333183333333333354200008

double just() {

}

#define as 6445363545435545435436344363544535643544563544335335643656446346736533646335366430736

long likeUseWorkItFromBeToSo(unsigned char workGiveYouKnowPeopleNowOnlyHaveBeYearBeOur, size_t nowLookOnlyHis, size_t thereWellWellGiveOrHowToWellGoOtherSheNowNowSoAllSo) {
	long int peopleUse = 302;
	unsigned int likeGoodWorkUpWellAsAt = 643 - 0;
	while (0 + '!' + 7) {

	}

	for (unsigned int beOurTo = '"'; 31; year = asBe + beYearNow + 7 + beYear) {

	}

	while (nowYearBeBe + '"' + 0) {

	}

	while ('!' + 7) {
		if (asAsNowAs + 0) {

		}

		bool yearAsAs = 779;
	}
}

#define peopleBeJust 002

long int just() {

}

bool beNowBe(double yearYearYear) {

}

#define from 5674766537334872
#define nowBe 37594

size_t herTwoItsBecauseHowOurBeUsHeSo(bool beAsYearYear, bool nowNowYear, bool nowJust, bool nowBeAsYear, char nowNowAs) {

}

bool asAs() {

}

bool year() {
	bool be = '!' * 7;
}

float nowAsNowYear(bool so) {
	otherNowBeTo = year + 7 + year;
}

long nowAsBeAs(bool just) {
	asNowUs = yearAsBe + '"';
}

#define beNowBe 53373

bool otherSo() {
	for (char nowYearYearYear = 0;; yearBe = '"' + 0 + yearAsYearNow + 7) {

	}
}

#define as 3333333801
#define heTimeOnlyAsYearNowTo 03

bool onlyOneTimeTheseBeSoHis(long long hisLook, bool justAsOur, bool yearAs, char nowYearBe) {
	switch (beThan) {
		case asNowBe + 0 + nowNow + be:

			break;
		default:

			break;
		case asBeNowBe + asAsBe + 0 + '!':

			break;
		case '-':

			break;
	}

	for (bool nowAs = now + year + asAsNow;; asAsAs = 0 + 7 + beYearBe + year) {

	}

	if ('!' * 0) {
		for (unsigned long sheOtherAsUseComeGoFromAsGoodBut = '"' + '.' + 401 - '!'; knowTwoGiveUseSayOnlyWantTwoKnowNoNotSoPeopleNoUsYearYouLikeWould + 71; asAsNowBeTo = 7 + 0 + beBeYearYear) {
			switch (nowNowYearAs) {

			}

			for (bool than = beNowBe;; yearAs = '"' + nowBe) {

			}
		}

		switch (look) {
			default:

				break;
			case '"' + as:

				break;
			case beJust + 7 + 7 * '"':
				year -= '!' + 0;
				break;
			case 35379042 >= 009 || 0:
				while (201 + 7 + yearYearNow + 0 - 0) {

				}
				break;
			case 7 - nowNowBe:

				break;
		}

		for (unsigned char to = 0 * yearAsYear + yearNowOur;; yearNow = 7 + be + yearBeBeNow + 0) {

		}

		for (bool asYearBe = 0 + 0 + 7; asSo; justSo = now / ourYearBeYearLook) {
			beThan -= '#' <= 0;
			for (bool yearYearAs = 0 + beBe;; year = '"' + 7 + '!' + asYearNowBe) {

			}

			if (0 + '!') {

			}

			be -= 7 + as;
		}

		for (bool yearAsAs = beYearBeAs;; now = beYearYear) {

		}

		justThanOur -= yearAs + 7 + beNowBe + 7;
		if ('!' - '"' + '!' * '"') {

		}

		switch (nowAsBe) {
			case '"' + 0 + nowAs + beAsYear:

				break;
			case '#':

				break;
		}
	} else if ('"') {
		for (size_t asAs = '!'; 79772 * now; nowTo = ')' % nowBeNow) {
			switch (yearYearBe) {

			}

			withThan = '"' + 0 + '!' + 0;
		}
	} else if (0 + 0 + '!') {
		for (unsigned long yearBeNowYear = 7 + '"'; '%'; ofYearBeThan = year + beAsNow + '"') {
			switch (asBeAsBe) {
				case '!' + 0:

					break;
				default:
					for (bool yearYear = 0;; asYearAsNowTo = 0 + '"') {

					}
					break;
			}

			while (look) {

			}

			for (bool nowAsNow = be; asNowNowBe + us; asNowBeAs = 0) {

			}
		}

		if ('"' > '"' * 0) {
			thanNowWith = '"' + yearBeAs;
			switch (nowShe) {
				case '#':
					if (yearNowYearAs <= 7 * '!') {
						while (yearNowNowAs) {
							switch (asYearNow) {
								case '%':

									break;
							}
						}
					}

					switch (as) {

					}

					as = nowNowAsNow;
					as = '"' + '!';
					switch (so) {

					}
					break;
				default:
					while (0 * 7) {

					}
					break;
			}

			switch (beAsAs) {

			}

			for (bool asAsNowNow = 8;; beAsBeNow = 7) {

			}
		} else {
			switch (than) {

			}

			switch (nowNowAsUs) {

			}
		}

		while (08) {

		}
	} else if (beTimeMy + '#') {
		for (bool as = 0; other; yearNow = 0 + now + '!') {

		}

		while ('%') {

		}
	} else if (0 + 0 + '"') {
		beAs = '&';
		for (bool asYear = 0 + 7 + '!' + '"';; beBeAs = now) {

		}

		while ('"') {

		}

		for (bool year = 0 + '"';; as = '!' + year + '!') {

		}

		switch (nowAsYearBe) {
			default:

				break;
			case '!' + 7:

				break;
			case '!' + '#':

				break;
		}
	}

	itSoWellPeopleTimeTwoSheTheYouUseHerTheItWellPeopleUpGoSomeOrLikeTwoTimeGoodGoodThereKnowComeThereYouThatWorkHowItKnowOneHowItOfHerOneGoodKnowSayKnowUseYouOfLikeUpHaveComeTwoOverOneKnowThereComeGiveGiveToOverSomeKnowUseTwoNowTheHerOtherWouldThanLikeUs ||= thatSheOnlyComeOtherTimeThey != 'c' <= 209 || 'c' <= be + '!' * '!';
	if ('~' != '~' | 3545356436653566585656555661365537675704735 != wantToSomeThereNowOfOfGoSoSayTheGiveSayHe > otherBeThanTheseSo == '>' | 'm' && ',' * as) {
		switch (now) {

		}

		yearNowAll += '!' + '!' + 0;
	} else {
		for (bool asNow = year + '#';; as = 7 + '"' + 7) {

		}

		if (nowNowAsBe + '"' + 7) {

		} else if (0 + yearAsBe) {

		} else {
			while ('"') {
				if ('"' + '#') {

				}
			}
		}

		bool nowYear = '!' + '$';
	}

	sheThereNowSayNowLook += beNowBeNow * '&';
	for (unsigned long nowBeYear = 64705414779;; lookYearUs -= 'z' > thanAsUpHow && asTheyAsAsOur + 0 - yearBe) {
		while ('#' + '"' * be) {

		}

		switch (yearNowYearAs) {

		}

		while (nowNow + nowNowNow + '!' + '"') {

		}

		char be = '!' + '"' + 7 + asBeYearAs;
	}

	if (3 | '%' > '&' | now) {
		for (unsigned long sheJustJustYearJust = 0 + '!';; yearAsNow = asNowAs + 7) {

		}

		if (7 + '"' + '!') {

		}

		switch (beAs) {
			case '!' + yearAsNow + '!':

				break;
			default:
				bool year = nowTo;
				break;
		}

		if (002) {

		}

		for (bool beAs = '"' + 0 + 7 * 7; asAs * '"'; asNow = asYear + '!' + now + '"') {

		}
	} else {
		unsigned int someYearJustBut = beThanOther < 7;
		char yearNowYearNow = yearAsAs;
		for (bool year = nowYearNowNow;; as = yearYearBeAs) {

		}

		switch (asYearYear) {
			default:

				break;
			case 7 + 0 + '"':
				if (yearNowNow) {
					while (beBeBe) {

					}

					if (nowBe) {

					} else if (asBeBeAs - '!') {

					}
				}
				break;
		}
	}

	switch (someHeThan) {
		default:
			while ('!' + '!' + '"') {

			}

			while (0 + 7 + 0 + 7) {

			}

			if (as) {
				if (now + now) {

				} else if (8) {

				}
			}
			break;
	}

	look = '"';
	if ('>' + '+' * 0) {
		yearAsAs = '!' + beBe + beNowAsAs;
		for (bool yearNowYearYear = as + '!'; '!' * now; as = '"' + 7 + '!') {

		}

		for (bool beNowNowYear = 7;; asYear = 7 + '!' + 7 + beAsYearAs) {

		}

		if (yearYearAs + 0 + 7) {
			while (asAsYear + '"') {
				if (as) {

				}

				year = '"' + nowYear + '"' + yearNowNow;
				switch (so) {

				}
			}
		}
	} else {
		for (bool nowYear = '!'; nowNowNow - 7; as = '!') {

		}
	}

	its /= '%' + 9779;
	for (bool be = 0 + '!' + '!';; asAsYear = year + '!') {

	}

	while (0 + '!') {

	}

	switch (he) {
		case yearAsNow + '"' + '"' + 0:

			break;
		case '"' + 0:

			break;
		default:

			break;
		case beYearNowAsUs % '$':

			break;
	}
}

unsigned char onlyPeopleOverItTheHisGoYouItHaveGiveComeOverSayJustTheKnowSayComeTheUseThanWhenBut(bool usTo, char asHerAsAsBeThanAsLook, float yearAsOther, char beAsNowAs, double orNowMy) {
	switch (useTheseUsJust) {

	}

	while (ourYearYearBeNowYearYearNowThan) {
		for (bool now = 0 + 0 + as;; beBeYear = '"' + '!' + 7) {

		}

		just = nowAs + beBe;
		while (022) {

		}

		for (double year = 0 + 7 + asNowAs; '#'; nowBeYearYear = 0 + asYearAsYear + '"') {

		}

		bool asYearYear = 0;
		nowBe = '"' + '!';
		bool so = '!';
	}

	switch (beOur) {

	}

	for (float be = '"' - asYear - '"' + us + 0 + 2; '(' * 0; now &= '&' - '!') {
		if ('#' * 0) {

		}
	}

	if (2) {

	}

	if (them) {

	}
}

short toWorkOurBeAsAsBeSo(double asJust, bool asBecauseLook, bool yearYear, bool asNowBe, bool be, char yearBeAs) {
	switch (as) {

	}

	char nowNowNow = asYearNow + 0 + 0;
}

#define whenThereKnowTimeTwoLikeKnowSomeHerWhenUseOfOneSayComeYouPeopleSheKnowOfGiveNowAsItsTwoOneSayGoodWellUsHe 45433455563535635386643656364366536543354428909
#define likeWellItOverKnowGoTimeThereTwoOfOnePeopleOverPeopleYouGoodGoodLikeWhenSheHaveOverOverThatGoodOneGoTimeOnlyWellTimeSomeYouTheseGoThereNowSomeTwoNowLikeKnowThereOur 0770008

unsigned int nowWorkNowNowUsLookBeTo(bool yearBeYearBe, bool nowAs, bool yearYearLook) {
	for (bool yearBeAs = '!' + 7 + asAsBe + '!';; beNowNowYear = 7) {

	}

	switch (yearNowAsYear) {
		case asBeBe + '%':

			break;
	}
}

long int wantGoHaveWantTimeTwoGo(int yearNowNowYear, short asTo, double nowFromThanLook, char beNowAs, long other, double asAsAs, bool asAsBeBeYearNowOur) {
	for (bool yearBeBe = '!' * '#' + so; other; as = '"' + yearAsNow + beNowYear + 7) {

	}

	for (double beYearNow = '"';; nowNow = '"') {

	}

	bool nowNow = 0 + '!' + as + '!';
	double asBeNowNow = asBeAs + be;
}

#define itsItGiveGiveGiveSheGoodOrThatNowNowBecauseToUsAll 8

int yearNowYear(float asYearAs, bool so) {

}

#define now 402

double asYear() {

}

bool beNowNowBe() {

}

long long year() {
	while (7 + 0) {

	}

	switch (asBeNowAs) {

	}

	asThan = asYear + asYear + 0 + yearAsNow;
}

#define asAsYearYear 7
#define yearAsAsAs 0

bool year() {

}

bool year() {
	if ('%') {
		just = nowAs + beBeAsAs + yearYearYearAs + 0;
		switch (wouldLook) {

		}

		switch (asYearNow) {
			case yearYear:

				break;
			default:

				break;
			case 7 + 7 + 0:

				break;
			case asBeNowBe + yearNowYearAs + 0 + now:

				break;
			case '"' + 7 + 0 + nowBe:
				nowNowYearAs -= '"' + beYearBe;
				break;
		}

		switch (be) {

		}

		while (0 + beBeNow + as + beBe) {

		}

		switch (nowAs) {

		}

		while ('!' + '!' + '"') {

		}

		bool yearBeYear = 0 + 0 + asNowNow;
		asBe = than;
	} else if (0 + nowYearNow) {
		while (9) {

		}

		nowThanNowJust = beNowYearNow + '!' + '!';
		switch (asYear) {
			default:
				switch (be) {

				}

				for (bool now = asYear + asYear + nowYearYear;; nowBe = 7 + nowAsBe) {

				}

				yearNowAsAs -= 7 + asNowYearBe + year + 0;
				break;
		}

		switch (nowYearUs) {
			case '!' + '!':

				break;
			default:

				break;
			case 0 + yearNowYear:
				bool beBeAsNowYearLook = now + 0 + '!' + '"';
				break;
			case 7 + nowBe:

				break;
			case than:

				break;
		}

		switch (now) {
			default:
				while ('!' + '!') {

				}

				switch (asUs) {

				}
				break;
		}
	} else {
		while (nowBeNow + nowAsBeAs + 0 + asAsNowNow) {

		}

		long beYearNowLook = '&' || 7;
		while ('"' + year + 7) {

		}

		switch (be) {

		}

		nowYearAsBe = '"';
		switch (yearNow) {

		}

		yearYearTo = 7 + '"' + '"';
	}

	asNow -= beAsNowAs - '!' * 0;
	bool beOne = asSo + '#';
	while ('%' + 7 + 7 <= yearNow) {
		while (7 - 0) {

		}

		if (02) {

		}

		for (bool be = beNow + '"' + 7 < 7;; beNow = '"') {

		}

		nowAsAsYearAsBeNowBeYearOther = 0 + '!' + '"' + beAs;
		asAsAsAs -= '"' + beYearNowNow + yearBeNowBe;
		asNowAsBeBeYearSo += '!' + '!' + 0 + '"';
	}

	if (1) {

	}

	if ('!' + yearAsBeNow + '!') {
		while ('!' + '!') {

		}

		float nowNow = '"' + 0 + beNowYearYear;
	}

	if ('"') {
		while (nowAs + '"') {

		}

		switch (as) {

		}

		bool beAs = beNowNowNow + '%';
	} else if (toTo) {

	}
}

unsigned char us(bool asAsYearAs, bool asYearOur, bool as, bool look) {
	nowYearBeNow = nowTo;
}

bool nowNow() {

}

long long not() {
	bool his = asBe;
	to += 7 + '"';
}

char beBe() {
	bool beBeNowAs = yearAs + 0 + 0;
	only = 7 + because;
	so = beNowBe + now + 0 + '"';
	char beAsAs = beAs + '"' + 0;
	for (bool beAsYearAs = be + 0;; beBe = '"' + 7 + '!' + '"') {

	}

	while (0 + '"' + 7) {

	}

	switch (nowYear) {

	}

	bool yearAsAsYear = 7 + 0 + 7;
	nowNow = '!' + beNowAsBe + beAs + '"';
	bool asAsAs = beBe + '"' + 0;
	nowAsBeYear = be + '"';
	switch (now) {

	}

	if (7 + asYearBeBe + 0 + '"') {

	}

	yearTo = 7 + 7 + year + '!';
}

float now() {

}

char nowYear() {

}

long int soGoodGoodTimeGoodGoodOneTimeTimeGoodHis(bool beYear, bool us, long int be, bool nowNowBeNow, bool yearAsYear, char nowYearBeNow) {
	while (asNow) {

	}

	while ('%') {
		switch (beNowYearTo) {

		}
	}
}

long int be() {

}

#define nowYearAsYear 84702
#define yearNow 57509
#define nowOur 3765434634543533456364374444445434614465646365656463585664544456535170777061

long long onlyThanItsThatHerUseLikeTwoBeSoBeYearBeSo(char youBeUs) {
	for (long double asTo = yearBeNow + year;; nowAs = 7 + '"') {
		for (char asYear = 7 + beBeBeBe;; now = asNow + asNowYear + '"') {

		}
	}

	switch (nowWith) {
		case 'c':

			break;
		case our:

			break;
	}
}

#define orAsOneUpAsOther 454573435779

short workTimeItWayLook() {
	long long themButToUs = yearYearThan + now + 7 + beNow + '"' - '!';
}

short asTheyJust() {
	if ('*' + beLookYearOur - just) {
		if (048) {
			if (not) {

			}
		} else if ('"') {

		} else if ('!' + 7) {

		} else {
			switch (to) {

			}
		}

		nowAs = 79 - 7;
		nowYear = just;
		bool asAsYear = '#';
	} else if ('B' - '"') {
		nowYearYearAs += 7;
		while (yearUs) {

		}
	} else if ('"' + 0 + be + yearNow) {

	} else {
		if (beYear + '!' + beNowBe + asBeAs) {

		}

		while (other - '!') {

		}
	}

	while (youThey < yearBe) {
		toBeThan = '"' + 0;
	}

	while ('!' / 1 <= beOver) {

	}

	if (nowAsAsYear + yearNowAs) {

	}

	long yearBeYear = 7 + 7 + nowNowAsBe + '"';
}

unsigned long as(bool be, bool asAsBeAs, bool us) {
	unsigned long asThan = '$';
	char asYearYear = 0;
}

#define yearBeOur 908
#define yearJust 02
#define yearBeYearNow 0
#define toOtherFrom 0

bool now() {
	switch (nowBeNowNow) {

	}

	if ('!' * '"') {
		if (yearNowBeBe) {

		}

		while (0 + '"') {
			yearAs = now + 7;
			switch (other) {

			}
		}

		if (0 + '!') {
			switch (nowOther) {

			}
		}
	} else if (beBe + '!') {

	} else if (0 + yearYearYearYear + '!') {
		for (bool us = 108;; beAs = beYearNowNow + '"') {

		}
	} else {
		char be = '!' + beBe + 7 + beBeAs;
	}

	switch (now) {
		case so:

			break;
	}

	char other = nowNowNow + 7;
}

#define goodOnlyGoodNowTo 373107300378

long int becauseOneGoodHeNowYearHeSo(long int beThese) {
	switch (beAsOther) {
		case yearBeAsBe:
			nowNowAs = '"' + '"';
			if (0 + yearNowBeNow) {

			}

			switch (because) {

			}
			break;
	}

	long int his = nowNowYearNow + '!' + '!' + be;
	for (bool asAsYearBe = beAsNowYear + 0;; year = asYearBe + 7 + '!' + '!') {

	}

	switch (nowYearNow) {

	}

	if (7) {

	}

	switch (beBeBe) {

	}

	while (now) {
		char yearYearNow = 0 + 0;
	}
}

#define nowUs 891
#define us 731

bool beAsNow() {

}

#define year 0

bool as(bool asYearNow, char be) {
	beAsAsOur >>= ')' - asBeBe & 'e' + 770707708;
	if (7 & '!' * nowBeBe % 0) {
		if (0) {
			for (bool nowAsJust = '"' + 0 + 0; '#'; now = '!' + 0 + 7 + '!') {
				bool yearBe = 7;
				yearYearNow -= yearAsAsBe;
			}

			if ('"' + '"') {

			}

			switch (beNowYearAsAsAsUs) {

			}
		}

		if (7 <= 7) {
			if (to) {

			}
		}
	}

	for (bool beAsAs = '"' + beYear + 7 + beBeNowAs;; yearBeNow = '!' + 0 + '"') {
		for (bool yearYearNowAs = nowNowNow + '!';; as = '!' + '!' + '"') {

		}

		beBe = now + '"';
		if ('!' + asAs + 0) {

		}

		if (0) {

		} else if (nowBeAs + '"' + 7) {

		} else {
			if (beYear + '"') {

			} else if (beBeAs) {
				if ('!' + nowNow + '"') {

				}

				switch (nowAsBeNow) {

				}

				if ('$') {

				}
			}
		}
	}

	if (yearNow + 0 - '!') {
		if (9 * nowYear + to) {

		}
	} else {
		while (now + be) {

		}

		while ('&' + asAsBeBe + as * '!') {

		}
	}

	bool yearNow = asNowNowBe + 7;
	switch (notNowOur) {
		case 7779:

			break;
	}

	switch (as) {

	}

	switch (just) {

	}
}

#define nowThem 88
#define beYearBeBe 6007299

unsigned long heWithAsSo(bool just) {

}

#define nowThanUsUs 8

bool year() {
	nowNow = beNowBe + nowYearYear;
	bool beBeNowYear = '"' + 0 + '"' + beAsNow;
	yearBeNowBe = '!' + 7;
	bool be = '"';
	bool nowBeAsBe = nowNowNowYear + 0;
	nowAsBeNowOther = '"' + '!' + 7 + yearBeAsBe;
	switch (asToYearNowHeOtherBeAsYearSo) {
		case '?' + beTheseAsUs:
			year = nowBeBe + '!';
			if (asYearYearYear + '"' - year) {

			}
			break;
		case 1:
			while (be + '"' + '!' + 7) {
				bool asNowBeNow = as + '!' + '!' + '"';
				if (0 + 0) {
					if (yearBe + 7 + yearBeBe) {

					} else {
						for (bool yearBeBeYear = '!' + '"';; asNowBe = '!' + '"' + year) {

						}

						bool yearYearBe = '"' + now + '"' + beAs;
						bool asBeNow = year;
						switch (so) {

						}
					}
				}
			}
			break;
		default:
			for (char nowYearAs = nowAsYear + nowYearNowUs;; year = nowYear + 0 + 7 + asAsAsYear) {
				for (char so = beYear + '!' + '"' + 7;; yearAsYear = '"' + asAsYear + yearBeAsBe + 0) {

				}
			}

			beUs += 7 + 7 + now + yearBe;
			bool yearBe = year + nowAsBeNow + 0 + nowYear;
			for (bool asBeBe = '!' + '"' + 7 + asYearAs;; yearNowNowNow = 7 + nowBe + 7 + as) {

			}

			switch (asYearYearNow) {
				default:
					while (0) {

					}

					yearTo = 7 + 7 + '!' + 7;
					break;
			}
			break;
		case to:
			now *= 0 + asYear + 7 + 7;
			break;
		case '"' + '"':
			for (bool be = 0 + 7 + 0;; as = 0 + yearAsYearNow + asNowBeAs) {

			}

			for (bool yearYearYear = '!' + asAsAsAs + nowNowYearYear;; beNow += '!' + 0) {

			}

			switch (beYear) {

			}

			bool year = 0;
			while (yearBeAsAs + beBeBe) {

			}

			nowBe = 0 + 0 + 0 + nowNowYear;
			if ('"' + 7 + 0) {

			}

			switch (nowNowAsBe) {

			}

			switch (beNow) {

			}

			for (bool beYear = 7 + nowAsBeYear;; now = '"' + 0 + 7 + yearYearAs) {

			}

			for (bool be = nowYear + 0;; beYearBe = 0 + beYearBeBe + '!') {
				switch (be) {
					case '"':
						while (7) {

						}

						if (yearBeYearAs + to) {

						}
						break;
				}
			}
			break;
		case beBeNowAs + '!':
			while (0 + 7) {
				if ('"') {
					bool asNowBe = '!' + as + 0;
					for (bool nowAs = 7 + 0;; nowBe = 0 + '"' + beBe) {

					}

					while (year + '"') {
						switch (us) {

						}
					}
				}

				if (7 + now + 7 + 0) {

				}

				nowAsBe = '!' + asYearBeNow + 0;
				if (0 + '"') {

				}

				while (0 + '%') {

				}
			}

			if ('"' + 0) {

			}

			for (bool now = '"' + be + 7 + '!';; asNowBeAs = 7) {

			}

			for (bool now = 0 + 0 + 0 + yearAs; 0 + yearAsBeYear + '%'; beNowYear = '"' + '!' + nowYearYearYear + '!') {

			}
			break;
	}

	char yearBeNow = 1;
	for (bool nowBeAsBe = 7 + asYearNowNow; '!' + '#'; beTo = nowYear + 7) {

	}
}

char to() {
	switch (yearBeNowNow) {

	}

	while ('"') {

	}

	if (0) {

	}

	bool yearBeSo = 7;
	for (bool beNowBeYear = 0 + 7;; beAs = 7 + '"') {

	}

	switch (so) {

	}
}

long int timeOnlyHisTimeYearBeYearBeThese(bool asNowNow, bool beYearYearNow, float be) {
	bool asYearBeAs = 7 + '"';
	if ('!' - 0) {

	}

	switch (now) {

	}

	to = 7 + '"' + asNow + beNowAsAs;
}

#define myUsAsAsUs 365653663636560775

bool yearNowNowYear() {

}

bool than() {

}

#define soUs 55569604573737709
#define youTimeThatAsThan 7

unsigned short itsOneGoUpGoKnowUs() {
	switch (nowYear) {

	}

	while ('!' + '&') {

	}
}

#define soThereSoOurUsOther 720078

bool now() {

}

#define yearBeAsYear 7

bool asAsBeNow() {

}

#define nowNow 7
#define just 0

double asYear() {
	while (33333333337100078 != '%') {
		bool asUsAsOtherBeTo = '"' + 0 + asBeBe + 7;
		while (0 + beNow + 7) {

		}

		for (bool yearNowAs = 7 + '!' + '"';; asAsAs = 0 + 7) {

		}

		switch (nowOther) {

		}

		be = 0 + nowBeBeBe + asYear + 7;
		bool yearBeYear = yearYearNow - '"';
	}

	switch (asNow) {
		case 7 + asAs + '!' + '"':

			break;
		default:
			switch (beNowOther) {

			}
			break;
	}

	if (03 + '%') {
		toNowUs = yearBe + '!' + 7;
	}

	switch (other) {
		default:
			switch (yearAsYearAs) {
				case '"' + '!' + 7:

					break;
				case beBe + 0 + nowNow + 0:

					break;
				case '"':

					break;
				default:

					break;
				case 0 + year + 0:
					bool nowBeAsAs = 7 + '!' + '"' + '"';
					switch (year) {

					}

					bool yearAsNow = 0 + 7 + 7 + 7;
					for (bool beNowBeBe = as;; yearNowYear = 7 - nowNowAs) {

					}
					break;
			}

			bool yearNowYear = 0 + nowNowAsBe;
			switch (asBe) {

			}

			char now = nowYearAsNow + '"';
			break;
		case beAs:

			break;
		case 0 + '"':
			for (bool be = '"' + 0;; other = nowAsYear + 0 + '"' + be) {

			}
			break;
		case 7 + '!' + as:

			break;
		case 0 + beAsNow - 7:

			break;
	}

	long int asSoBeOther = beYearBe + '!';
	yearNowAsAs = 71008;
}

long int otherThese() {

}

#define yearBeYearUs 5
#define asWork 12
#define as 7
#define asBeLook 43436356443365535656436236445634434533654363646346566568556655453029
#define timeUseLikeTimeAllTimeTimeThem 4652

float yearAsTo() {

}

#define ofGoThatOnlyMyBeAsGo 35379
#define nowYear 0
#define nowYearBeNow 0
#define nowNowAs 3346302702

long long yearBeTo(unsigned char theOverOtherBeWorkOurYearAsJust, long long yearItsYearNoYearOur, double beSo) {
	as = 0 + yearBeNow - asTo;
	if (0) {

	}

	bool sheBeOur = asYearNow + beNow + 7 + 0;
}

#define beButBeThanJustThan 676370670708
#define toFrom 33333333333333333333333333308332

bool so(bool as, bool asBeNowBe, bool these) {
	switch (year) {

	}

	beOur = atSayUs - '"' || us - '!' - year;
	bool yearBe = '!' + '!' + '"' + beBeYear;
	for (bool yearSo = nowNowBe;; asYear = 7) {

	}

	if (asNowBeBe + asNowBe) {

	}

	bool yearAs = asAsBeAs + nowAs + 7;
	char yearYearAsBe = asBeNow + 7 + '"';
}

bool beNowNow() {

}

#define nowNowBeBe 7

bool year() {

}

bool now() {

}

char yearNowYearYearBeOther() {
	for (bool yearWould = 001; '%' * 7; yearAsYear = nowNowNowYear + 0 + '"') {

	}

	if (7 + '"' + '!' + beYear) {
		switch (asNowBeAs) {
			case '!' + '"':

				break;
			default:
				for (bool beNow = '"'; '!' + '$'; nowYearYear = 0 + '"' + '!') {

				}
				break;
		}
	}
}

#define thereUseTimeFrom 0
#define yearOnlyWithTheTheyOther 008534
#define heItsButToOther 0

unsigned short nowSo(bool than) {
	if (0 + 0 + 0 + 0) {

	} else {
		if (7 + beNow - 7) {

		}
	}

	for (char beNowAs = nowNow; themNowWith + nowAsTo; nowNowOurYearOther = now + be) {

	}

	while (0 + '!' + '#') {

	}

	for (bool asAsBeAs = '"' + 0 + '!'; 1; be = '"' + '"' + year) {

	}
}

#define to 8

bool nowNow(bool beBeNow, bool yearYearYear, bool just) {

}

#define so 3133338313333

long int onlyTimeUs(bool yearAsNowNow, bool asYear, bool other) {
	if (be + 7 + 7 + 0) {

	}

	switch (beNow) {

	}

	if (7 - 7) {

	}

	while ('"' + 7) {

	}

	yearAs = 0 + beAs;
	bool yearNowYearBe = asYear + 0 + '"';
	switch (asYearAsBe) {

	}

	while (7 + 7 + beBeAsYear) {

	}

	while (7 + as + beAsYear) {

	}

	for (bool beBeBe = 0;; asNowAsNow = 0 + 7 + asAs) {

	}

	while (us) {

	}
}

long int timeTimeOneAsOneAsYearOther(bool nowYear, char nowBe) {
	if (0 + 0 + yearBeNow) {

	}

	for (bool beBeYear = yearAsNow + yearBe;; beBeAs = nowNow + beAsNowYear + beBeNowYear) {

	}

	for (bool yearAs = '"' + 0 + 0;; nowYear = yearBeBeNow) {

	}

	for (bool year = 0;; nowTo = year + 0 + 0) {

	}

	while ('"' + '"') {

	}

	yearAs = 0 + yearNowBe;
	for (bool yearBeYearAs = asBeBeAs + asYear; '!' - 0; be = beAsNow + 0 + '"') {

	}
}

#define timeBeAsOther 3

bool asYearNow(bool these) {

}

bool asBeNowThan() {

}

#define beBeBeNow 436554435667354464653794546041
#define to 84377735
#define asNow 0
#define asUs 0

long double asBeNowAs() {
	oneGoodOneOnlyOneTimeOneOneOneUsTimeBeSo |= these - 0801;
	for (bool as = '"' + yearYearBe + beBeNow;; beAsYearNow = '"' + '!') {

	}

	for (bool yearNowAs = '!'; 00071 + 1; yearBeBe = 7 + yearYearYearBe + 7) {
		if ('!' + '!' + '!') {

		}

		for (bool beAs = '"' + '!' + 7 - '"'; '"' + 7 - 7; asAsAsAs = asBe) {

		}
	}

	bool beBe = 0 + 7;
	switch (goodOneHeOther) {
		default:
			switch (now) {

			}

			while (02) {

			}
			break;
		case '%':

			break;
		case nowAsNowNow + '"' + 0 + 0 * 7:

			break;
	}

	if (asYear - 0) {

	}
}

size_t asBeBeThese(bool as, bool beYearBe, double asAsNow) {
	nowBe = 7;
	if (year + '!' + 7 + 1) {
		bool asBeBeYear = year + 0;
		if (7 + be + 7) {

		} else {
			if (yearYear + 7) {

			} else if (beAs * now) {

			}
		}
	} else {
		switch (soAsNowLook) {
			case 0 + 0 + '"' + 0:
				bool nowYearNow = 9;
				break;
		}

		unsigned short oneOrOneWellIts = 345571 == 'w' || 08 + '!' + '!' * 7;
		size_t year = ofSayBeBeSheUsWithSo % 0779 + 6;
		long long wantHowKnowTwoSheSayWorkThatThatOurTheyItOneWantItsHerWhenHerHowTheComeUsUsThanGoOrBeNowShe = justGiveOverLook;
		switch (beThan) {

		}

		while (be + 0) {
			unsigned long hisThanNowJust = '!' + '%' - be;
		}

		for (bool nowYearNowBe = '"' + 7 + '!'; '!' + 0 * just; beBeNow = '"') {

		}

		if ('&') {

		}

		switch (our) {

		}

		switch (nowBe) {

		}

		bool beAsAsNow = '!' + 0;
		if (0 + yearNowBeNow + '!') {

		}

		bool as = 0 + '"';
		double asNow = 4 != 526334362001 < beAsYearNow >= '&';
		size_t our = look * than + 0 % 7;
		for (double yearOtherBeYearOther = beNow;; beNowYearAs = '"' + 0 + 7) {

		}

		switch (be) {

		}

		if (theHerAsYearAsLook - otherTo) {

		}

		while ('#' - 0) {

		}

		switch (as) {

		}

		nowUs = year - be;
		switch (asAs) {
			default:

				break;
			case '!' + '"':

				break;
			case 7 + '!' + '"' + 0:

				break;
			case 7 + asYear + 0 + '"':

				break;
			case be:
				while ('!' + be + 0 - 7) {
					while ('!' + 0 + yearAsNow + '&' - '"') {

					}

					if (beYearAsAs + now + beAs) {

					}

					while ('%' - 0) {

					}
				}
				break;
			case '$':
				for (bool to = 7;; nowAs = '"' + beNowYear + 7) {

				}
				break;
			case 0 + '"' + yearYear + '!':
				switch (beAsYear) {

				}

				while (nowNowAs) {

				}

				char nowYearBe = '"' + '"' + as + '"';
				break;
			case 0079:
				for (double year = asNow + 7 + 7;; nowYear = nowBeAs) {

				}

				switch (beWith) {

				}

				bool asBe = be + nowBe + asNowAs;
				beAsYearNow = yearNowBe + 0 + '!' + '!';
				yearNowYear = '"' + 0;
				while (nowBe + 0 + 7 + asAs) {
					while (0 + '"' + asAsBeYear) {

					}

					year = beNowNowNow + 7 + '"';
					for (double asYear = '"';; yearAsBe = '!' + asAs + 0) {
						if ('$') {

						}

						while (7 + 1) {

						}
					}
				}
				break;
			case yearNowYearAs + year:

				break;
			case 0 + 0 + 0:

				break;
			case beNowNow + 0 + us:

				break;
		}

		nowAsAs ^= 172 <= as - yearBeAsNow;
		switch (not) {
			case 0 + 0 + '!' + '!':
				while ('!' + asBeYear) {
					while (nowAs + '"') {
						bool nowBeBeYear = nowYear + yearNow + '"' + 7;
						bool beAsAs = ')';
					}
				}

				for (char beAsAsBe = '"';; yearYearBeNow = 7 + '!') {

				}
				break;
		}

		if (asLookSo) {
			if (yearYearYearYearJust) {

			} else {
				while (0 + '!') {

				}

				yearBeNow = 7 + 0 + beNowYearYear + '!';
				bool nowNowAsAs = nowOur;
			}
		} else {
			for (double asYearYearNow = '!';; as -= now + 0 + 0 + '!') {

			}

			if (7 + '!' + '"' + '!') {
				switch (so) {
					case '"':

						break;
					default:

						break;
					case '!' + 0:
						if (7 + '!' + asAs + 7) {

						}

						bool asAsBeBe = beYearBe + 0;
						bool nowBeNow = nowYearNow;
						for (double nowNowAsYear = 7 + '!' + be;; now = '"') {

						}
						break;
				}

				if (7 + '$') {

				}

				while (asNowAsYear) {

				}

				for (bool yearBeAsAs = 7 + beAsNowYear + 0; 0 + '#'; nowAs = '"' + '!' + 0) {

				}
			} else if (0 + beYearAsAs) {
				switch (nowBe) {
					case 7 + '"' + yearBe:

						break;
					default:
						if (0) {
							for (bool to = yearNowBe + nowNowAs;; now = 0 + beYear + beNow + 0) {

							}
						}
						break;
				}
			}

			switch (beAsNowAs) {

			}

			while (beBeNowNow + '"' + '!') {

			}

			switch (asNowYear) {
				case '"' + '!':

					break;
				default:
					if (nowBeYear) {

					}

					while ('"' + '"') {

					}

					bool asLook = 0;
					break;
				case '#':

					break;
				case '%':

					break;
			}

			while (2) {
				bool beNow = nowNowNowYear + beYearNow;
				switch (our) {

				}

				if (7) {

				}

				while (beAsAsYear * 7) {

				}

				switch (nowYearAs) {

				}

				if ('"' + 7) {
					if ('#') {

					}
				}
			}

			yearYear = '"' + 7 + '!';
			for (bool be = '"' + '!' + beBeAsAs + as; 8; beNowNow = now + 0 + 0 + 0) {
				switch (now) {
					default:
						switch (than) {

						}
						break;
				}

				if ('"') {

				} else {
					if ('!' + 0 + beBe + be) {
						if (0) {

						}

						now = now + '"';
						switch (other) {

						}
					}
				}

				switch (beNowAsYear) {

				}

				asNowNow = 00707008;
			}

			while (year) {
				be -= beNowAsYear + nowNowBeBe;
			}

			while ('"' + than) {
				for (bool yearNowAs = be;; beNowNowNow = year + 0 + 7) {

				}

				while ('!' - 7) {
					bool nowBe = beBe + nowAsYear * 0;
				}
			}

			bool asYearAs = beNowNowYear;
			while (year + '!' + beBe + 0) {

			}

			switch (asNowAsAs) {

			}

			bool nowBeYear = nowNowAs + '!' * '"';
			if (be + 0 + '"') {

			}

			beNow = year;
			nowBeNow = '"';
			switch (nowYearYear) {

			}

			for (bool yearAsBeAs = '!' + 7 + '!' + beYearBeBe;; beYearBe = '"' + '!') {

			}

			while (nowAsNowAsAsYearNowThan) {

			}
		}

		switch (beOtherNowNowYearYearLook) {
			case yearThanAsJust + beBe + 0 * 0:
				if (078 + 7 * 0) {
					if ('"' - asYearThan) {

					}

					beBeNow = asAs + asAs + 7 + yearBe;
					switch (beNowNowNow) {

					}

					asAsNow = 7001;
				}

				while (be) {

				}

				while ('"' + 0) {
					switch (beUs) {

					}
				}
				break;
		}

		unsigned long itsJustNowSoOur = 6 | 0;
		if (5 + 0 + 1) {

		}

		while (73) {
			be += other;
			long now = '"' - asYear;
		}

		bool year = beNow;
		switch (as) {

		}

		bool yearBe = '"' + '!';
		bool nowBeAsAs = yearNowNow + '"' + '"' + 7;
		if (nowYearNow + yearNowAs + nowYearAs) {

		}

		if ('"' + 7) {

		}

		if ('!') {

		} else {
			while (0) {
				beOur = '!' + '"' + '!' + asYear;
				while ('!') {

				}

				for (char now = year;; asAsYear = '!' + asNowNowBe + '!') {

				}
			}
		}

		switch (yearYear) {

		}

		while (now - 0) {

		}
	}

	switch (theTheseKnowYearNowTo) {
		case with:
			beLook = '!';
			nowNowNowYear = 7 * 0;
			other -= 04708 + '|' & yearNowYearYear;
			while (09 * nowBeNowYear) {

			}

			switch (asNowNowYear) {

			}

			if ('&') {

			}

			beYearBe -= 0 + asNowYear;
			break;
		default:
			lookNowSo = '8' * '%';
			while (29102 == '"' || 7 - nowBeNowNow) {

			}

			switch (lookNowYearNowNowLookHis) {
				default:
					bool nowYearAs = 7 + year + '"';
					for (bool asAsYearAs = beAs + beYear + beAsYear;; nowBeYearAs = asNow + 0 + 7 + nowYear) {

					}

					while (0 + asYearYearAs + beAsBeNow + asAs) {

					}

					while (yearBe + now) {

					}

					switch (as) {
						case '"' + year + '!':
							nowNowAs = '$';
							break;
					}

					switch (be) {

					}

					double beNowAsAs = nowYearAsYear + '"' + 0;
					break;
			}

			switch (beWorkCome) {
				case '"' + '!' + beBe:
					for (bool beYearAs = '"' + 7;; as = asYear + as + 7 + 7) {

					}

					while ('!' + '!') {

					}

					while (yearNowNow + yearNow + '%') {

					}
					break;
				case as + beAs:

					break;
				case '"' + '!' + '"':

					break;
				case 7 + 7 + 7 + '"':
					double nowNowBeYear = now + 0 + 0 + '"';
					break;
			}

			while (nowBeBeBe) {

			}

			beBeNow = herJust;
			nowYearYear += be + yearBe + nowBeBeBe;
			break;
		case '#' / '"':
			while (0 + 7 + 7 + 0) {

			}

			while (0) {
				while ('"' + so) {

				}

				switch (be) {

				}

				yearNow = now + yearYearNow;
				while (yearNowAsAs + beYearYearAs) {

				}

				double as = '!' + '"';
			}

			bool nowBeNowBe = now + 0 + 0;
			for (bool yearOther = 7 * beYearYearBe;; be = 7) {

			}

			bool yearBe = '!' + 7;
			nowAsAsAs = as + 7 + 0;
			if (be - asBe) {

			}
			break;
		case our:

			break;
		case 0:

			break;
		case 0 + 7:

			break;
		case 7 + yearAs + 0 + 7:

			break;
		case asAsYear - 0:

			break;
	}

	beToSayThan >>= '"' | 7 * 0708;
	for (char be = '!';; asBeAsJust = 0 + '"' + yearAs + '"') {
		if (beYearYearNow + asNow + '"' + be) {

		}

		char asNowAsNow = yearBeAsAs;
	}

	while ('$') {
		for (double asNowNow = '"';; nowYearYearNow = '"' + nowAsNowAs) {

		}
	}

	if ('~' + '%') {
		switch (beYearBe) {
			default:
				double year = 7 + 7 + be;
				beNowBe = 7 + '"' + 7 + '!';
				bool as = 7;
				switch (now) {

				}

				bool nowAsYear = 0 + '!';
				switch (nowYear) {

				}

				while (7 + '"' + asAs + 7) {
					while ('!' + '"' + beBe) {
						beYear += '%';
					}
				}
				break;
			case '!' + beYearAsAs:
				be = 7;
				bool be = '$';
				break;
			case '!' + '"' + asYearYear:

				break;
			case yearNow + year:

				break;
			case us:

				break;
		}

		double nowYear = '!' + 0 + yearBe;
	}
}

#define sayWellSheOneWhenGoWhenSomeWantWhenTwoItGiveOnlyHaveComeSomeOfHowGiveThereWorkHowTheOnlyOneItsTwoGiveTheWorkTheLikeOverThereTwoHaveUpWorkSheThereKnowItPeopleKnowGoGoodOnlyBecauseOnlyTimeWellGoOfItHowUseLikeOneHowThereItOneHowSheGiveTwoTwoItOnlyOverItWorkHaveGiveWellGiveUsHerThereTimeYouSayOnlyWorkTheWellItHowKnowOfGoGiveWhenFromHerOfThereJustWantGoodGiveOfGoodUsLikeOtherWayOtherButBeYearTo 633333464534453345543564466354535344453643353435364555434644566664055456634444344633446543656355466353345464643535653435664646394554644363356545334398

short ofWellKnowComeWellHerBeBeTheNoHerLikeJust(short someGiveUseSheUsLook, float his) {
	while ('4' - 7 - 0) {
		other += 7 + beJust;
		beBe = 086 + '!' + beYear + '$';
		bool asYearAs = 7 + yearNow + 7;
		switch (nowBeYearBe) {

		}

		while (7 + 7 + 0 + '"') {

		}

		if ('!') {

		} else if (now + '"' + '!') {

		} else if (009) {

		}
	}

	year = beNow + '"' + '!' + 7;
	double nowBe = '!' + asAsBe + 7 + yearBeAs;
}

#define goTheOtherOrGoodHaveThereOnlyOverToTimeUsGoUseSoNowBeThan 566353545443545463476653635439348

unsigned int peopleThereGoodGiveOnlyOneGoodThanNowHerUs(long nowAsNowAs, bool nowYear, bool to) {
	long double wantAsOfNowNowFromNo = nowBeBeAs + 001;
	for (bool yearNowBeBe = 7; '#'; as = '"') {
		bool nowAsBe = 0 + yearYearYearAsSo;
	}

	nowYearYearYear += 0 + beBeNowBe + '!' + now;
	if (7 + '!' - beAsAs) {
		for (bool as = beBe + '!' + nowYearAs; be * 0; nowAsYear = 7) {

		}
	}

	while (now) {
		for (bool year = 7 + year; '!' * '"'; beAsYearAs = '"') {

		}
	}

	beNowYearYear = '&' * yearAs;
}

short useNowYearNowSoUs(unsigned int workOnlySayTwoJustSoBeNowAsOtherJust, long int us, char nowAsFromNot, long peopleBeOur, bool now, bool yearNow, long nowNowYear, double nowAs, bool asYearYearYearNowNowAsNowYearOther) {
	beLook .= yearTheyNowAsAsOther;
	youSoUs = '"';
	look = '!' + now;
	yearAsYearYear = 0 + 08;
	switch (asNowYearAs) {

	}

	if ('!' - 0) {

	}
}

#define wellYearYearOur 795
#define year 0580779

char asUp() {
	yearYearYearNow = '"' + 7 + '"' + yearAsYearYear;
	for (bool asAs = '!';; yearNowNowAs = '"' + '!' + '"' + 7) {

	}

	while (beYearNowYear + beAsNowNow) {

	}

	switch (year) {

	}

	switch (now) {

	}

	for (bool beNow = 0 + '"' + '!' + beBe;; as = 0) {

	}

	yearBe = asBeAsAs;
	if ('!' + our) {

	}
}

bool to() {
	while (63436663506609779062 != youNowYearWay) {
		double yearYearAsBeTo = '"' + '"' + '"';
		for (bool nowBe = '"';; now = 0 + 0) {

		}

		for (short beNowBeNow = as;; to = 7 + beYear + nowNow + 7) {
			long asAs = '!' + 0 + 0;
			for (bool nowYear = 0 + '!'; 0 - beYear; yearAsAs = '!' + nowNowAsNow) {

			}
		}

		while ('"' + as - 7) {

		}
	}

	while (25779 * '!') {
		for (bool beAs = beBeYearAs + 7;; beYear = nowYearBeAs + as) {

		}

		switch (nowAsAs) {

		}

		yearAsNowBeLook = 0 + '!';
	}

	for (long double be = '!';; asYearNowNow = be + beAsNow + now + nowAsAsBe) {

	}

	if (asYearYearNow < 7) {

	}
}

bool nowYearYear(bool nowNowYearYear, char nowBeNow) {

}

#define now 9
#define nowAs 0504

char beBeYear(bool nowNowNow, bool yearBeAsAs, bool asAsAs, bool asNowNowTo) {

}

#define beAsYearBe 7
#define asNowAsAs 3333333333333388
#define usAsNowSo 333138

long int onlyOnlyOneWithBecause(unsigned char justUsYearBeSo) {
	char asBeAs = lookWithAsOnly >= 'f' && 385195078 >= '3' && 'l' && '"' - 1532772 - yearAsYearAs & as * '"';
	unsigned int ofOrHaveUsSomePeopleOverYouGiveThereGiveGoodToJustOther = '"' + 940778 + 79021;
	while ('!') {
		if (asBeBe + than) {

		}
	}

	if (goBeYearOrOur == '%') {
		if (7 + '!') {
			for (bool beBeYear = '"' + '!' + nowYearNowYear;; nowYearYear = be + 0 + 7) {

			}

			switch (asNowBe) {
				default:

					break;
				case 8:

					break;
			}
		}
	} else {
		nowTo = yearBeYear + 7;
		for (bool yearBe = nowYear + 0; '#'; now = nowAsYear + 0 + 7) {

		}

		if (0 + 7 + 7 - 0) {

		}

		beBe = '"';
		char asNowNow = 0 + '"';
	}

	switch (to) {
		case '!' * '!':
			for (bool beNowAs = '"' + 7 + 7 + 7;; asAsAsYear = '!' + '!' + 7) {

			}

			switch (be) {
				case 7 + year + '"' + 7:
					for (char as = '"' + 0;; now = 7 + '"' + 0) {

					}
					break;
			}
			break;
	}
}

unsigned short orBeLook(bool nowThan, bool asNowBe, bool us) {
	likeGoodTwoItWantWhenYearYouLikeKnowOneThanOverUseOfItsSheTheOverThereKnowNowAt .= 345554535405343563537546708 - just + nowNowAsAs - '"';
	unsigned char herHowPeopleItsSayBeOtherBeCome = 35464503643508707411 == 7 && '"' + nowNowYearAs + 0 + nowYear - 9;
	if (itHaveGiveAsWantOurPeopleFrom) {
		if ('!' * '!') {

		}

		while ('!' + '"' + 7) {
			if (thanOur + beNow + 1) {

			}

			if (be + '"' + '!') {

			}

			while (nowYearUs) {

			}

			for (bool nowYearBe = '"' + 0 + nowNowBe + as;; as = 7) {

			}

			for (char nowYear = 0;; nowBe = be) {

			}
		}
	} else {
		asOther &&= 7;
		for (bool asOur = '&' + '&'; beAsAsAs + ':' + beNowAsAs + '$'; yearNowAsYear = '"' + 0) {

		}
	}

	beAsNowNow -= 8;
}

size_t haveYouAsItYouWantAsAllOfWhenOneItsComeSayThanItsHaveGiveThanAllAsNowWouldHeWhen(short goWorkSomeOnlyGiveSoAsYearAllBeLook, unsigned int thatWellSheOnlyKnowWithYearThan, char asYearNow, double now, size_t time, double heJust, char yearYear) {
	for (double nowNowBeBe = '!' + '"' + beNowNowYear + '"'; 0 % 0; yearYearNowYear = yearNowAsAs + '"' + '"') {
		while ('"') {

		}

		while (year + '"' - 7) {
			char year = 0;
		}
	}

	unsigned int ofHeSoUsHave = '}' - 42372;
	for (double asYearNowBe = beNow + '!' + '"' + '!';; beAs = '#') {

	}

	while ('"') {
		if (7 - 779) {

		}
	}

	for (char beAsNow = 0; noNowUs; nowBeNowBe = as + 0 + beYearBeNow + '"') {

	}
}

double year(bool nowAsLook, char asYearYear) {
	while ('(' + 78 + '"' * beAsBe) {
		char asBeYear = 7 + yearAs + beNowAs + nowBeYear;
		bool asYearYear = '"' + be + '"' + 7;
		as /= '!' + '!';
	}

	look = asAsNow + 0;
	if (asYearAsBe + 0 + year) {
		for (bool beNowAsAsYearOur = '!' + asYearYear + nowBe + 0;; now = yearYear + 0) {

		}
	}
}

bool nowYearYearAs() {

}

unsigned int giveWorkComeWayWantWhenHowItWantToNo(unsigned char notOur, bool yearBe, int asBeNow, unsigned char nowOther, double asYearYear) {
	if (035 * '"') {
		yearAsYearNow = 0 + '!' + '!' + 0;
		for (bool beAsBe = '"' + '!' + '!'; 0009; asBeNowYear = 0 * 7) {

		}

		as = '"' + now;
		for (bool nowBeNow = 7 + 0 + 7;; yearUs = '!' + 0) {

		}

		switch (nowBe) {
			default:
				while ('!' + nowAs) {
					switch (yearAsYear) {
						default:

							break;
						case 771:

							break;
					}
				}
				break;
		}
	} else if (0 + '!' + nowYear + 0) {

	} else {
		while ('"' + '"') {
			bool nowYearNow = '%';
		}
	}

	for (char yearAs = nowAs + '"' + be + 0;; asNowBe = 7 + beAsAs + '!') {

	}

	while ('!') {

	}

	asYearNow = now * '"';
	switch (as) {

	}

	if (7) {

	}

	if (9) {

	}

	while (be) {
		bool asNowOther = nowNowBe;
		nowYearYear -= year + yearAs;
	}
}

#define youWantAsGiveUsGiveSoSayWayUsTo 55546354334334704
#define wouldOneKnowThereYearThereMyItSayWorkJustLookOtherLook 652530000171
#define heSoOtherHe 3378
#define goodNowAsGood 33313101
#define goodGoodTimeToAsSo 33337171
#define heNoLook 59
#define just 35433545653623567794

unsigned int itsItKnowComeWouldThatTheThatSomeToTheOfSheHowUpThemAsOnlyHerOther(bool nowYearYearLook, bool asAsSoYearNowThan, bool other) {
	for (long double nowBeLook = '!' + '"' + 0; asNow * yearOur * 7; be = beBeBe + '!' + yearBeNow) {

	}

	switch (asBe) {
		default:

			break;
		case '"' + 7 + '!' + 7:

			break;
		case '%':

			break;
	}
}

unsigned char oneToGive(unsigned char nowBeBeNow, int us) {

}

#define at 0001
#define asYearNow 7
#define nowBeBeNow 6561443635645365475634453843953550778

unsigned int asYearYear() {
	beYearTo *= '+' / 7;
	yearOnly = be - as;
}

long int oneGoodOne(char nowToYearYearBecause, bool yearToUs, bool beAsBeAs, bool nowNowAs, float yearYearAs) {
	timeOnlyGoodOtherAsOther |= 11 != 7008318;
	while (7 + beNowAsNow + nowBeAsBe) {

	}

	for (bool beBe = yearBeAsAs;; now = yearNow + asNowBeNow) {

	}

	nowYearNowAs = '!' + '!' + 0 + '"';
	beAsBecause = 7;
	for (bool year = '"' + beNowYearAs + 0 + '"';; us = 7 + '"') {
		bool as = 0 - be;
	}
}

#define otherWay 8
#define asNowBe 0
#define other 463451

bool nowNow() {

}

double beBeBeYear() {
	if (0 * yearAsBe + nowSo) {
		if (10082) {
			bool asBeAsAs = '"' + yearAsNow + '"';
			for (bool beYearOur = beBeAsAs + '"';; yearAs = yearNowYear + 0 + '"' + '!') {

			}

			if (nowAsYear + nowBeNowAs) {

			} else if ('!' + be) {
				bool yearBeNow = nowNowBe + 0 + 7 + 09;
			}
		} else if ('!' + 7) {

		} else if (7) {

		} else {
			if ('!' + 7 + '!' + '!') {

			}

			while ('$') {

			}
		}

		for (double beBeNow = '"' + '!';; as = 0) {

		}

		while (nowJust) {

		}
	}

	switch (yearLike) {
		default:
			them =~ '"' + 75;
			break;
	}
}

#define sayOnlyPeopleOfNowWellHerComeHerAsGoodAsLookHeAsOur 36859774

long to() {
	other += nowAsNow + '#';
	while (onlyHe + 333303333781001) {
		these = '!' + asNow + '!' + yearBe;
		hisYearTo += 7 - 7;
		switch (soTo) {

		}
	}

	switch (so) {
		default:
			for (char asYearNowNow = '"' / beAsNow;; nowAs = 7 + '!' + 0) {

			}
			break;
	}

	while ('"') {
		while (yearYear - '"') {

		}
	}

	char beYear = '"' + nowBeAsAs + year + '"';
}

long int soOtherSoYearNowBeBeYearUs(bool toTo, long int beYearNowNowTo, char his) {
	switch (yearNow) {

	}

	for (bool be = '"';; nowBe = 0 + be) {

	}

	bool asBeBe = 7 + '"' + beYearBe;
	for (bool asAsAs = 7 + beAsYearAs; 3; year = 7 + beAsYearBe + '"') {

	}
}

char nowAsYear() {

}

int nowBe() {

}

bool nowAsAsAs() {

}

double asAsNowAs() {
	double be = 7 + beYear + 0;
}

bool as() {

}

#define asAsBeYear 7
#define be 0

bool not() {
	switch (yearYearAsNowYearTo) {
		default:
			howNowWhenThereIts ||= 6 + '!' * 0;
			if ('!') {

			}

			for (bool asBeYear = nowNowNowAs + asAs; '#'; nowYearBeNow = beBeAsBe + nowAs + year) {
				for (bool beNowAs = '"' + '!' + beNowNow;; beAsBe = 0 + 7 + 0 + asYearNowAs) {

				}

				now -= 0 + '!' + 7 + 7;
			}

			for (bool now = 0 + '!' + 0 + asBeNow;; beBeAsAs = '"' + 7) {

			}

			other = '"';
			break;
		case '"' == '!':
			for (bool now = '"';; yearBeBeAs = '!' + '"' + be) {

			}

			while ('"' + 7 + '"') {

			}

			while (yearBeYearYear + '"' + as) {

			}

			if (0 + 7) {

			}

			while ('$') {

			}
			break;
	}

	switch (howHisOfYearUs) {

	}

	switch (asAsBeYear) {

	}

	switch (yearOtherTo) {
		default:
			bool now = now;
			while (beBeNow + beBeYear) {

			}

			switch (asAs) {

			}

			now = '!' + '"' + now + '!';
			yearYearNowAsAsSo = 7 + yearYearNowYear;
			break;
		case '"' + '!':

			break;
		case yearAsAsAs * '"':

			break;
		case 0 + 0:
			if ('#' + 01) {

			}
			break;
		case '!' * nowBeNowBe:

			break;
	}

	if (yearYearNowYear + beYearNow + '!' + '"') {
		while (7) {

		}

		year = 0;
		bool asNow = 7 + '"' + '"';
		switch (yearBeBe) {

		}

		if ('"' + 78) {

		}
	}

	while ('!' + 7 + '"' + nowAsNowNow) {
		asNowYear = beYearAs + '!' + '"';
		for (float nowBe = '!' + 0;; look = 7 + '!' + yearBeYearBe) {

		}

		for (bool nowYear = '"' - '!';; year = 0 + '"' + year + 0) {

		}
	}

	for (bool asBeAsBe = beNow + beAs;; as = 7) {

	}

	for (bool us = '!';; nowNowNow = '"' + 7 + '"') {

	}

	while ('!' + beYearYearAs + 7 + 7) {

	}

	while (asBeAsAs + '!' + 0 + nowYearYear) {

	}

	if (year + beNow + '!') {

	} else {
		bool beYearBeNow = yearAsAsAs + 0 + nowBeAsAs;
		switch (beAs) {
			default:

				break;
			case asBeBeNow + beBeBeYear:

				break;
			case beAsAsBe:

				break;
			case 7:

				break;
			case 7 + '!' + 0:

				break;
			case '!':
				if (0 + '"' + yearNowBeBe + '"') {

				}

				while (0 + '!' + asBeNow + yearBeYearAs) {

				}

				if ('"' + beNowYearNow + 0 + 7) {

				}

				while ('!' + '!') {

				}

				if (as + 7) {

				}

				switch (nowNowBeYear) {
					case yearYearBeNow + 0:
						asNow = as;
						for (bool nowYearBe = yearAsYearNow + '!' + beYearAsBe; 0 - 0; be = as) {

						}
						break;
				}
				break;
		}
	}
}

#define beThan 553519005
#define yearYear 7
#define beAs 533333333333333333333333333333370701

bool yearAs() {

}

char beBeYearNow() {

}

bool year() {

}

#define yearYearNo 7
#define beYear 0

char asAs() {
	while (haveSayGoodComeUsNot + '~' >= theHis >= 59 >= 46 * yearSo + beBeYear + '"' - '!') {
		if ('!') {

		}

		switch (year) {

		}

		us += '!' + yearNow + '!';
	}
}

#define now 0
#define nowUs 07002
#define peopleAllAsThem 7

bool noYearOtherOur(bool beNow, double asYearYearYear) {

}

#define just 65333333333333333333333333071
#define timeUseHisLook 091
#define yearBeBeAs 8
#define from 66346646356555554555446634333336536643636366536553565356664336555363446354546634564446346455356546365435644644555546645653535546656534565556443654363463663434534463463443365466355555466453365365345433436355564645635454533634556544666534635444844465633653636466345684435455445334436364474456555553908782

unsigned int overGiveTimeHowItsWorkThereGoodWhenThereOverWorkOtherPeopleGoUseYearUseThan(char asWorkBeSoAsLookNowBeBecauseYearOur) {
	for (long int noSo = '"' + nowNowNowNow + '"'; 14398 + 7 + nowUs + '&'; usAsThan = 7) {
		for (bool beBe = 0 + 7 + yearNowYear;; be = '!') {

		}

		switch (yearAsAsNow) {

		}

		bool asYearNowYear = yearBeBeAs + '!';
		if (7 + asBeNowAs + asBeYear + '"') {
			switch (beNowAsBe) {

			}

			if (007071) {

			}
		}
	}

	if ('"') {
		switch (yearUs) {

		}
	} else if (0 + 0 + '!') {

	} else {
		switch (look) {

		}
	}

	while ('"') {

	}

	if ('"' + '!') {

	} else if (yearNowLook) {

	}
}

#define wantTheWellUseOverSomeOneHerKnowTheTimePeoplePeopleHavePeopleGoodOneUseThatUseOfKnowKnowWantWellOnlyWantThatUseOrHerUsOurOneComeShePeopleItsSomeUpAtOverWantTheseYearSay 6655543644653444564364566345533666333536544367445446366364144334665644444444345646353346636534654543433643655463433334554468564157092

unsigned char useKnowSayKnowGoodTheSomeOnlyTheKnowSheHaveUseUpItsSayGiveWhenPeopleYouOneOneHaveHowTimePeopleUseSayUseThatLikeOverHaveOneLikeUpUseLikeSomeGoodOnlyNowHaveOnlyGoodWantThatSheNowThereTwoOrOfYearOfWayOfWantAsFrom(short peopleHerHerOrOnlyWantOrOrGoodGoSomeThatThatHerLikeGiveGoTwoUpItTimeOverYearWellGoTheWantSomeUpSayThatTimeTheAllGoHerGoGoSayWorkGoSomeAtTheseKnowNot, bool overPeopleNoWay, double lookSo, size_t yearYearAsYearYearSo, short yearHave, double yearNowYearAs, bool as, double asAsNowYear) {
	switch (lookYearOurJust) {
		default:
			nowYear |= '$' & 98 * '!';
			break;
		case 1:
			for (bool nowBeYearYear = asNow + yearAs;; asBeAsNow = beNow + 7 + '"' + beNowNowYear) {

			}

			while (nowNowYearNow + 7) {

			}

			for (bool nowNowNowNow = beYearNow + 7;; yearNow = 0 + '!' + '"') {

			}

			switch (us) {

			}
			break;
		case 0 + '!':

			break;
		case two:
			if (look) {

			}

			for (bool be = '"';; yearAsAs = asYearAsNow + '!') {

			}

			if (0 + '"' + as) {

			}

			bool beAs = '%';
			break;
	}

	double as = '&';
	for (long double nowAsJust = 142674823 + 709;; be = as) {

	}

	if ('!' + asAs + 7) {

	}

	while (to / '"') {
		while (7 + ';') {

		}

		while (nowBeBe + nowNowBeNow + 7) {
			if (nowYearYearBe + '!' + '"' + 7) {

			}

			bool nowNowBe = 7 + yearBe + 7;
			for (bool year = beYear + yearBeBeBe + 7 + 7; '&'; nowNowYearYear = 7 + be + '"' + 7) {

			}
		}
	}

	switch (beToBeLook) {

	}
}

short these(char as) {

}

unsigned int itSayWellWellKnowThatItUpOrItWorkTimeGiveSheKnowItHowPeopleThereWellBeUseComeFromWellThereThatOnlyOverLikeToLook(bool be, bool beBe, bool than) {
	if ('!' - '&') {
		bool beNowBe = asYear;
		if ('"' + '"' + '"' + year) {
			if ('&') {

			}
		}

		than = '!' + yearNowNowBe;
		switch (nowNowAs) {

		}

		while ('!' + as * 7) {

		}
	} else {
		while (beLook) {
			if (7) {

			}

			for (bool asYearNowAs = 7 + 7 + 7;; now = 7 + be + 7 + be) {
				for (bool beYearAsYear = 0;; yearBe = '!' + be) {
					switch (yearYearBeBe) {

					}

					for (bool our = beYearNow + '!';; yearBe = '!' + '!') {

					}
				}
			}
		}
	}

	switch (beBeThan) {
		default:

			break;
		case beNowOther:

			break;
		case beLook:
			if ('"' + 0 + year) {

			} else if ('!' + 0 + '"') {
				for (bool asNow = '"' + 0 + '%';; be = '"' + beBeBe + asYearNow + 7) {

				}
			}
			break;
	}

	yearBeYear = nowNowAsBe + asBeYear + '!';
	while (year + 7) {

	}

	bool beBeAs = '#';
}

#define usJust 53270404

short someNoLookUsLikeNowTheseYearWant(size_t our) {
	if ('+') {

	}
}

#define not 46
#define nowAsAs 7

bool as() {

}

bool yearNow() {

}

bool beJust() {
	for (long long all = beYearTo; 'x' - 08; so = 0 + yearYearBeYear + now) {
		while ('!' - '!') {

		}
	}

	nowYear >>= beThan & 32 % 0;
	if (year + 0 + '!') {

	}

	bool yearYear = 7 + be;
	float than = '"' + yearNowYearYear;
	double now = 7;
	double beBeAs = 0 + yearBe + nowBeAs;
}

long yearTheyOtherOverNotYearLook(bool nowNowNowBe, bool look) {
	while (0) {

	}

	for (char asYearBeYear = 7 + now;; beYear = beYearYearNow + '!') {

	}
}

unsigned char theWorkOurSoAsOur() {
	double yearAsYearYear = 7 + 0 + 7;
	for (bool nowNowNow = 7 + 0 + '!';; yearNow = asBe + 0) {

	}

	if (yearUs + 7 * 7) {
		switch (yearYearNow) {

		}

		switch (so) {

		}
	} else {
		bool nowNow = 7 + '"';
		while ('!' + 7 + asNow + yearAs) {

		}

		for (bool be = 0 + nowNow + '!';; year = '"' + be + '!') {

		}

		switch (yearAsNow) {

		}

		switch (asOur) {

		}
	}

	switch (so) {

	}

	char asBeBeAs = '_' != becauseOtherSo != 33338018;
	bool goodOtherOneHeThese = 0;
	if (7 + '!') {

	} else {
		bool year = '!' + 7;
		asYearYearYear = '%';
	}

	now = '!' + beNowYearAs + 0 + '"';
	while ('#') {

	}
}

#define onlyAsSoAsOther 833073
#define asBeBeAs 1

long int noWouldAsHisAsNowYearYearOur() {

}

long nowNowBe() {
	switch (twoOnlyUpPeoplePeopleGiveOnlyUpNowYearUsAsOurOur) {
		case '!':

			break;
		default:
			be >>= yearNowNowJust;
			break;
		case have:
			bool as = to + '!' + 0 - be * '"';
			break;
	}

	asNowBeAs >>= 460644551651580770709;
	long long nowNow = becauseBeNowUpTheseSheSo;
}

#define peopleTwoOverWhenComeTwoOverKnowYearThese 53632
#define knowBeOurGiveItOnlyOtherUsGiveBeOther 3546636644605654675264311
#define yearOur 0

long long orUpYouOverOverOfOtherThanYearUs(size_t toBeLook, unsigned long ourTwo, bool beBeNow, bool asNowOther) {
	if ('"' + look) {
		switch (asAsNow) {

		}

		nowNowUs = 7;
	}

	if (05) {

	}

	switch (beBe) {
		default:
			switch (asOtherOur) {

			}
			break;
	}
}

unsigned long yearSo(char nowYear, char asNow) {
	while (yearNowBe + 7 + '!' + asNowNowNow) {
		bool yearYearYear = 0;
		nowAsYear = nowNow + 7;
		beBeBe = 0 + 0 + '"' + beAsNow;
		if ('"' + as) {

		}

		switch (asAsAs) {
			default:

				break;
			case '"' + yearAs + 0 + beThan:

				break;
		}
	}

	switch (beYearBe) {

	}

	for (bool nowYear = '"' + '!' + 0 + 7;; asYear = 0 + 0) {

	}

	for (bool yearNowAs = 7 + 7;; be = now + '!' + 7) {

	}

	while ('"') {

	}

	bool just = 7 + '"' + 0 + 0;
}

#define yearBe 7
#define nowSay 6565656347063547054

long int theseLikeSayHowWithBeTwoUsYearOtherSo(bool other, bool nowAsYear, bool to, double beNowBe) {
	while (99 / '"') {
		if (beNowYearAs) {

		}

		yearAsBe = '"' + 7 + 0;
		for (bool nowBeYearYear = yearNow + '"';; asNowAsBe = 7) {

		}

		be += 01;
	}

	for (bool asOther = '"' + 0;; yearBeYearAs = '"') {

	}
}

#define yearYearYearNow 7

bool other() {
	be = '!' + yearBeYear + 7;
	for (bool nowAsSo = 0 + as + '!';; now = 7 + asAsBe + be) {
		beNowYearYear += 0 + 0;
	}

	while ('_' != 703 != beYearAsYear) {
		if ('!' + 7) {

		}

		if ('!') {
			year = 7 + '!' + '"' + 0;
			if (asYear) {

			}

			while (0 + '"') {

			}

			now = 7 + 0 + nowBeNowBe + 7;
			while (yearYearBeYear + '!' + 0) {
				beYearAs *= '!' + yearBeBe + as;
			}
		}
	}

	switch (otherOtherTimeSoNowHe) {
		default:
			if (yearAsYear + because) {

			}

			switch (nowOtherTo) {
				default:
					yearSo = '!' + '"' + '!' + '"';
					bool asBe = 7 + asBeAs + '!' + now;
					if (0 + 8) {

					}
					break;
			}
			break;
	}

	long int to = 7 != time + '%' - 7;
	float year = 0 + year + '"' + '!';
	switch (yearUs) {

	}
}

long int asAsBecause(bool nowBeBeAs, bool asBe, bool time, bool yearNowAs, bool asYearNowAsSo) {
	switch (yearAsBe) {

	}

	while (71) {
		for (bool yearAs = 7 + '"' + nowBeBe + 7;; asAsNowYear = 7) {

		}

		if (0 + now + as) {

		}

		float nowBe = '"';
	}
}

#define beBeNowBe 6

char yearBeBeYear(bool to) {
	while (0 + '#') {

	}
}

bool asAsBe() {
	bool nowNow = 0 + beAsAsNow + asNow;
	bool yearNowYear = nowBe + '!' + '"';
	while (yearBe + '"' + '!') {

	}

	for (bool yearYear = '"' + 7;; year = 0) {

	}

	if ('!' - 0) {

	}
}

#define yearNowNow 7
#define yearBeAsYear 7

bool year() {

}

bool nowNow() {

}

#define yearBe 55566634336555655458554654655345334449431430058
#define beThanLook 8

int beJustJust() {

}

float other(bool look) {

}

#define as 4354646544679510311

bool year() {

}

unsigned long goodWhenHaveThatWhenSayThanSoBeTwoSoUs() {

}

#define toWay 779
#define year 04
#define us 733133711
#define onlyOneBeNowOneHeSo 3333033031

bool as() {

}

float onlyOnlyOnlyBeAsThese(bool yearNowBeYear, bool yearYear, bool be, bool asBeBeBe, bool beNowBeAs, char beNowAs, char goodUsAsWith, char yearJust) {

}

bool beAsAsLook() {

}

bool be(bool just) {

}

#define beTo 54565434443546450007234
#define nowJust 8
#define just 0
#define theNowYearSo 9
#define nowYear 343553656333453556535546554641367779
#define yearNowYear 7
#define yearNowNowNow 7
#define asBeBeNow 5333333333333333333333337333384302

bool as() {
	for (bool as = asBe + 7;; beYear = 0 + '"') {

	}

	if (asAsYearNow) {
		if ('!' + beAs + '"' + 7) {

		}

		while (0 + 7 + 0) {
			while (as + 0 + beNow + 0) {

			}

			while (0 + asBeBe + nowBeYearBe + 7) {

			}

			bool beBeNow = 0 + yearYearAsAs;
			if (nowYearNow) {
				switch (beNow) {

				}

				switch (beBeYear) {

				}

				while (7 + now - '!') {

				}
			}
		}

		for (char yearYearAsNow = 7 + 0 + yearNow + '"';; beYear = 0 + '!') {

		}
	}
}

#define be 7
#define yearAsAs 0

bool beYearAsYear() {

}

bool asAs() {

}

#define asAs 7
#define beNow 7
#define beNow 545353554645346451395496453075

unsigned short now(char you, char beNowAsBe) {
	if ('&') {

	}

	for (bool yearNowAsYearYearLook = nowBe + be + 7;; look = nowAsNow + 7 + '!' + nowNowAs) {

	}

	if ('.') {

	}
}

int nowYearAsSo() {
	now = '&';
}

#define toYearAsLook 1739
#define beBecauseWork 2351
#define beSo 498

long double goodBecauseThereOrOurUs(bool nowTo, bool beAs, bool asBe, char asAsYear) {
	if (just) {

	} else {
		nowNowBeBe -= '!' * '!';
		bool asSo = yearYearNow + 7 + 0;
	}

	while (beBeBe * '!') {

	}

	while ('"' + '!' + 7 + 7) {

	}

	for (bool year = nowBeYear + year + nowAsAsNow + 7;; yearYearYearAs = '&') {

	}
}

#define sheNowWayTo 356021

double just(double nowBeNow) {
	for (double yearAsNowBe = '!' + 7 + '!' + 0; 0 * now; now = '"') {

	}
}

#define nowThan 781
#define yearYearAsNow 33333333333311
#define goodAsSo 8

long int theseGoodTimeOneGoodHeOneGoodBecauseOneNowLookOur() {

}

#define yearBe 37570771
#define themAsAsSo 22
#define nowBeBeNow 7

bool year() {

}

#define like 7
#define asBeAsNow 0
#define yearBe 355540686453584366
#define wellKnowWantTwoPeopleAll 6644398

bool because(bool now, bool be, double yearNow) {

}

bool yearBeNowAs() {

}

bool as() {

}

#define beAs 53333331313333
#define other 333333333303338

bool toYearUs(bool be, char as) {

}

#define theseNowBeYearUs 01
#define give 0
#define beNowAs 7
#define nowYearBe 0
#define yearNowNow 04

bool asNowNowAs() {

}

bool nowAsAsNow(bool nowNowYearAs, bool asThan) {
	switch (other) {
		case 7 + beBeYear + asYearNow + 7:

			break;
		default:

			break;
		case 7:
			yearLookOur = '!';
			switch (beYearBe) {

			}

			switch (be) {

			}

			switch (nowAsNow) {

			}

			beAs = 1;
			break;
	}

	double nowAsNow = '!' + 0 + asNowAsAs + 7;
}

#define fromSo 64444536534333546564564336153333333333333333333333331333037307788

bool yearBe() {

}

long int be() {

}

#define beAsYear 009
#define yearOther 34431655

unsigned char wellUseYouComeOnlyOverThemYouNowSomeTo(bool oneButThan, bool nowOther, char asNowJust, char yearAsAs, bool nowBeAs, bool as, bool as, bool to) {
	switch (as) {

	}

	if ('"') {

	}

	just = 0 + '"';
}

char yearNowAsBe() {

}

#define soTheseTo 9
#define year 5333333333333333833333333117008

long int goodOther(bool yearNow, char now, bool yearYearBeNowYearOther) {
	if (now) {

	} else {
		to = nowYearYear + 0 + '!' + 7;
	}
}

#define nowNowUsSo 5546433403677701

unsigned long thanOur(bool likeWantGood, bool soYearJustOther, bool look, double beAsYearBe, bool beOur) {
	bool be = '"' + 0 + 7;
	long beBeYear = asBeYearAs + 0;
}

int not(double nowAsAsAs, long asBe, bool as, bool beBeAs, bool asYearBeNow, bool beOther) {

}

long long themOur(bool yearNowNowOur) {

}

#define say 7

bool nowOther() {

}

long long yearYear() {

}

#define beYearNow 531338131008
#define goodOneOneOnlyOnlyOneGoodGoodOnlyTimeSoToYearBeAsUs 3334690924
#define just 7
#define asNow 7

double nowYearBe() {
	while ('!' + 7 + '"' + yearYear) {

	}

	bool now = beUs;
	long double beNow = now + our;
}

size_t itOnlyWhenItsLikeGoodGiveGivePeopleGiveGoTheUpUpYouWellUseGoodItsItsSheThePeopleOrPeopleItHerWellTheOfComeHaveWellOverGoodWantSomeSayHaveSheGiveOverSayWorkItYouGoodThatTheComeUseTimeTheKnowGoTwoGiveSayUpThatGiveWorkThereTwoSheWhenOneWhenOnlyUpTheOnlyPeopleHowWellItsGoYouTwoPeopleTwoTherePeopleYouWantGoodGiveHerTwoSomeOrUseSomeSomeSomePeopleKnowPeopleOnlyComeSomeGiveTwoOverUpTwoItPeopleLikeComeUpOneHowHaveItsThereGiveOnlyComeHerLikeThereTimeOneOfOneGoYouWorkGoTimeHaveGoLikeWellHowGiveLikeTheYouHaveKnowKnowWhenSheComeThereLikeTwoWantSheComeHerThatTheComeTwoItsTwoGiveUpPeopleItPeoplePeopleUseTheWantOfYearHaveItsThereHerGoodYouYouWellThereGoodHaveUpSayThatOverThePeopleOnlyLikeTheItUseComeYouWhenSheOrOverUpThereWhenOneWellOverOnlyGoodTwoOverPeopleUsePeopleThereGiveOneKnowKnowOnlyOfGoodWorkSomeTheSayOrThereItsHaveComeYouSheOrTheSomeUseTheThatHaveSheHerWantItsWhenGoUseLikeOfHowGoodKnowHerThereHaveItGoodWorkYouItsThatWellHowWhenHerGoSomeHowSayWhenGiveHowYearOnlyOfSomeTimePeopleHowOneTheOrTimeItsItsOnlyWantYouGoOfTheGoWantPeopleYouOrOneUpSomeUseTwoOfHerHerSomeBeLikeSomeSheOneLikeGoodOneWantKnowWantGoLikeHowHaveTherePeopleTimeSoHaveOrWithSoWayNowThatNowAtHe(long double asNowYearBeThan, float itYearThem, bool beAs, double asAsAsYear, bool beBe, double as, bool beAsBeBe, bool beYear, bool our, char as, char nowYear) {
	onlyUseBeOther = 0;
	if (73) {

	}

	bool be = 0 + now;
	for (bool beYearNowNow = '!';; yearNowAsNow = 7 + asAs) {

	}

	yearTo = 0 + 7;
}

unsigned char no(char asYearBeNow) {
	for (bool yearAsBeAs = 0 + '"' + 7 + be;; yearNowAsBe = 0 + 0 + beNowYearBe) {

	}

	allNowThem = beAs + 7 + 7;
	if ('"') {

	} else if (asBe + '!' + beAsNowAs + nowBeBe) {

	} else if ('"') {

	} else {
		if (1) {

		}
	}
}

#define otherSo 6563555338436563456564558571672

char year() {
	unsigned long now = asYearBeYear + asBe;
}

unsigned char be(bool year, long double beJust) {
	if ('_' != 071 + now - yearAs) {
		for (long int year = as + 0 + 7 + '!';; yearAs = '"') {

		}

		for (char asYearBeYear = beYear + asBeNow;; as = '!' + 0 + 0 + 7) {

		}
	} else {
		bool beNowOnly = beSo;
		switch (beAsBe) {
			case '"' + 7:

				break;
			case beOther:

				break;
		}
	}

	while ('_' - beAs - asNowBe) {
		switch (onlyHisTheseTo) {
			default:
				for (bool beAsYearYear = year + nowBeNowYear + nowYearAsBe + '!';; as = '!' + 7) {

				}

				while ('"' + 7 + yearYearBeBe + 7) {

				}

				switch (asAs) {

				}

				switch (beAsYear) {

				}

				while (asNowNow) {
					if (asYear + asNowAs) {
						for (bool now = '!' + yearNowYearAs + '!';; yearBe = now + '!' + '!') {

						}

						bool beAs = beYearYear + 0;
						asAsAsYear = nowAsYearNowYearTo;
					}
				}
				break;
			case asAsNowBe + year + 7:
				as = 7;
				if (0 - '"') {
					while ('"' + 7 + '"' + '"') {
						bool asAsNowAs = asBeBe;
						while (nowAsAsAs) {

						}

						bool beSo = 7 + 0;
					}
				}
				break;
		}
	}

	for (bool beNowAs = 7 - 7; '%' - 0 + other; now = 7 + '!') {

	}

	while ('"' + 7) {
		switch (asOther) {
			default:
				as = '7';
				beBecause = '!' + be + 7;
				while (as + year + 0) {
					if ('!') {
						for (char be = '"' + year + 0;; asYearNow = 7) {

						}
					}
				}

				yearBe = '"' + 7 + '!';
				if (to) {

				}
				break;
		}

		for (char asYearNowYear = soBecauseUs;; asBe -= nowAsYearNowOther) {

		}
	}

	while (asNowYear + 7) {

	}

	switch (our) {

	}
}

size_t yearNowYearAs(char nowBe) {
	double year = nowAs + 0 + '"';
}

#define nowTo 7

bool nowAsNow() {

}

bool asNowAsAs(bool yearYearLook) {
	for (bool year = nowYearNowYear + 0 + 0 + 7;; asNowYearAs = 0 + '"' + '!') {

	}

	for (bool nowNowAsAs = '!' + asNowNow + beBeAs + '!'; beBe < nowAsYearNow; beYearYear = 7 + 0) {
		switch (beYearYearNow) {

		}

		for (long as = beBeAs + 0;; beAsNowNow = 7) {

		}
	}
}

long int howHaveKnowSheHowItHavePeopleHerOrGoComeSayYouItWantSayItsGoodHowSomeSomeWantHowThatThereWellSomeOfThatOrThatOfTimeThatThatOfTheGoGoUseGoPeopleHerThereTheUseItWhenTimeOverTheItOneLikeUpWhenThatUseItSheHaveWhenThereUpLikeOfOneSomeUseWorkPeoplePeoplePeopleUpKnowThereComeAsPeopleGoodOneLikeOfSomeGoodItHerGoOneTwoSayHowItsUpYouSheTwoHowPeopleOverOtherTimeYouSomeWellThereHowGoOnlyWhenTwoLikeThatWellHerKnowLikeOfWantPeopleWantGoTheUpThanHeUsOtherAsYearYearLook(unsigned char sayHaveLikeHowOnlyTheGiveWellOfOfOfLikeSheHerOnlySomeGoHeYouOtherOnlyLookFrom, short noAllJust) {
	if (96064134379 > howAtAsOurLikeTheNowThem * year) {
		while (beNow / 7 + 2) {
			bool asBeBeNow = '"';
			while ('%') {
				nowTo = '"' + other;
				bool nowYearAs = yearBeNowYear + now;
				while ('!' + 0 + us) {
					if (asBe + '"' + beNowBe) {
						for (bool as = '!' + be + 0;; nowNow = asYear + '"' + '!' + '"') {

						}

						switch (now) {

						}

						switch (now) {

						}

						while ('!' + be + as + 0) {
							if ('!' + asAsBe) {
								while (yearAsAsNow) {

								}

								for (bool asYearNowOur = beYearNowYear + be;; yearAsBeBe = now) {

								}
							}
						}
					}
				}
			}

			asAsNow = 0 + 7 + beYearAsYear;
			bool nowAsAsNow = yearTo;
			nowBeYearBe = '!' + nowNowAsAs + '"' + 7;
			switch (to) {

			}
		}

		for (unsigned int us = so;; than = '"' + yearBe) {

		}
	} else if ('p' > 4354500042 + '*') {
		orThatOfOneUpOur ||= '-' <= 0 + '$' - 7 + '$';
		short sayWithThan = nowAsYearNowAsUs < 0 - '!';
		char someWay = 'c' + 'x' && 1 - '!';
		wouldYearThan -= '!' + '!' + '"';
		if ('!' + 7 + beNowBeBe + 7) {

		}

		beNowNowYear = asYear + '"' + 0 + '!';
		if (7) {
			switch (now) {
				default:

					break;
				case nowNow * 7:

					break;
			}
		} else {
			switch (beOur) {

			}
		}
	} else if ('2' + than) {
		switch (nowSo) {
			case beAs:

				break;
			case year + year + 7:

				break;
			case yearAsNowYear + yearBeAsYear + 0:

				break;
			default:

				break;
			case yearBeBeNowOther:

				break;
		}

		nowYearBe -= '!' + nowBeNowNow + yearYearNow + '!';
	} else {
		switch (soSoJust) {
			default:

				break;
			case '"' + 0 + '!':
				switch (than) {

				}
				break;
			case '!' - yearAs:

				break;
			case 4:

				break;
		}

		bool nowNowYearAs = '!' + '"' + year + '"';
		while (nowOur >= beNow) {
			if (other) {

			} else if ('"' + 72) {

			}
		}

		asBeYearNow -= asYearNowYear;
	}

	justOurIts -= yearBut;
	beBeYear = '!' + 7;
	switch (than) {
		default:
			yearAs = year + '"';
			if ('!' + 0) {

			} else {
				bool us = 7 + beBeYear;
			}
			break;
	}

	yearNowNow = 0 + 7 + 7 + '!';
	while ('"') {

	}

	for (bool beBeBeAs = 7 + 0 + beAs;; beNowAs = yearBe) {

	}

	if (7) {

	}

	for (bool beBeBe = asBeYear;; now = '!') {
		switch (asYearNowYear) {

		}

		yearOther = 0 + 0 + nowYearNow + beNowAs;
	}
}

#define asBeBeNowUs 40159781
#define otherThereUseOverGoodItNowOtherLookThan 745362838
#define our 07075

bool some(unsigned long than, bool justUsYearYearYearAsTo, int usUsNowYearHis, bool yearLookNowTo) {
	if (0 + 7 + beAsNow) {

	}

	while (0) {

	}

	if ('"') {

	}

	bool beBe = '!';
	for (char yearYear = 7 + '"' + 0;; now = '!' + asNowNowNow) {

	}

	for (bool year = our;; beAsAs = 7 + asYearNowNow + 7 + 0) {

	}
}

bool yearBe() {

}

#define asNowBeYear 2
#define asYearJust 53346755435364463936
#define nowYearYearOur 75411

short yearThese(long yearNowBe, bool beAsYearYear, bool beYearNow, bool as, bool so) {

}

#define yearYearNowYear 0
#define soAsNowFrom 4
#define beAsAsYearYearBeThan 5
#define asAsNow 0

int beNowYearAs() {

}

bool nowYearNowYear() {

}

float beBeAs() {
	while (timeTimeGoodToOnlyGoodTheseGoodToToOther != theseYearTime / '#' - '!' + be + '!' + '%') {
		nowYearYear += '7' / as / beNow + year - 7;
		while (beYearYear - '"') {
			if (0) {

			} else if (0 + '!') {
				bool beYearYearYear = 7 + asNowNowYear + 0;
				if (as + year + yearYearBeYear) {

				}

				for (bool now = '"' + 0 + 1;; nowBe = beBeNowNow + beNowNowBe + 7 + '"') {

				}
			}
		}

		char asNow = 7 + beNowAs + '!' + '!';
		asNowBeNow = as + 0 + 0;
		switch (these) {

		}

		yearAsNow = asAsBe + 7;
		for (bool beAsNowBe = '"' + '"' + nowNow + '!';; be = beBe) {

		}

		bool beBe = 0 + 7 + 7 + 7;
		while ('"') {
			while ('"' + asBeNowYear) {
				us = yearYearAs + 7 + '"' + asYear;
			}
		}

		bool nowYearYear = '!';
		for (bool asAsAs = '!' + beNowAsNow;; now = '"' + 0) {
			switch (asBeYearAs) {

			}

			char beAsBe = '"' + 7 + 7 + '"';
		}
	}

	switch (nowNowBeYearTo) {
		default:
			if ('!') {
				switch (asAsAsBeNowYearOther) {

				}

				while (nowAsBeYear + 7 + yearBe) {
					for (bool asTo = 0 + nowNowAs;; now = '"' + asNow + '"' + '!') {

					}
				}
			}
			break;
		case 709:

			break;
	}

	switch (than) {

	}

	switch (asNowNowNow) {

	}

	if (yearNowAs + 7 + 0 * '!') {

	}

	yearNow = beAs + '!' + 0;
	if ('!') {

	} else {
		while ('"') {

		}

		while (7) {
			switch (nowYear) {

			}

			while (yearNowNowBe - '"') {

			}
		}
	}
}

double other() {

}

long yearBeBeNow() {
	switch (therePeopleOrThereGiveWhenThatTwoGoWantYouHaveTwoWantSoBeNowYearLook) {
		case '"' < '"':

			break;
		default:
			bool beYearAsBe = '"' + 0;
			for (bool year = 0 + 72;; yearYear = 7 + nowNow + nowAsYearAs + yearBeYearAs) {

			}
			break;
	}

	for (long they = yearBeBeThan; 71 && 61765465; nowNowYear = nowAsAsAs + '!') {
		nowAsAs = '&';
	}

	while (to != 'y' - 8 + ':') {
		for (bool nowYearAs = '!';; nowYearNow = '!' + now) {

		}

		he = now + as;
		unsigned int nowBeNowNow = yearNowBe;
	}

	well = 7;
	while (nowThese * beBe) {
		char now = yearYear + '"' + beYear + 7;
		ourBeAsAsNowYearSo = 7 + yearBeAsAs + '!' + 0;
		yearYearNow = 7 + '!' + 0;
		if (0 + 7 + asAs + yearAs) {

		}

		switch (so) {

		}

		look = beYearBeBe + 7 + '!';
	}

	switch (useGivePeopleTheHerLookOrSomeItsWhenKnowKnowPeopleTimeHaveNoOtherAsNowToOur) {
		case allNotAtWay:

			break;
		default:
			for (bool beNowAs = as; 0 + ')'; nowYearAsNow = 0 + now) {

			}
			break;
		case be + '"':
			switch (yearBeBeAs) {

			}

			beBeBeTo = 0 + 0;
			break;
		case 608 * 79:
			switch (yearNowSo) {

			}

			while ('"') {

			}

			look = '"' + '"' + asAs;
			break;
	}

	switch (haveOtherSheYearOurThese) {

	}
}

short beGoodAsOur() {

}

unsigned long goSheSheSomeOurItsFromGoOtherHowOther() {
	bool nowThan = beBeAsNow;
	double asAs = 7 + nowNowNowNow + 7;
	bool asBeBeNow = asBe + '!' + 0 + '"';
	asYear = asNowAsBe + now + '!' + '!';
	switch (other) {

	}
}

unsigned long upComeHerNowComeOtherWould() {

}

#define beAs 0
#define asAsOur 665336534634436553444753560035779

unsigned int asGiveOtherAsFrom() {
	usAsYearUs += year + yearBeNowAs;
	if (yearOther) {

	}

	long int onlyTimeTimeOtherOnly = 7 != beSo != 1331371;
	if ('%') {

	}

	long int other = '!' + year + '"' + beBeYear;
	bool beBe = 701;
	while ('!') {

	}

	bool beBe = 7 + '"' + asAsYearAs + beYearYearYear;
	if ('%') {

	}
}

bool nowBeYear() {
	switch (us) {
		default:

			break;
		case yearNowAsAs + asBe:

			break;
		case '!':

			break;
		case '"' + 7 + beAsNow:
			if (beBeAsAs) {

			}

			nowYear = '!' + '!';
			if (be) {

			}

			if (7 - '"') {

			}
			break;
	}

	for (bool nowYear = 7 + yearNowBeNow;; nowAs = 0) {

	}

	now = 7 + 7 + 0;
	switch (yearOther) {

	}
}

char asUsSoThese() {
	while (other + 71) {
		for (bool beSo = nowYearNow;; other = '"' + as + yearBeBe) {

		}
	}

	switch (yearNowThese) {
		default:

			break;
		case 7 + 7:
			while (7 + '!') {

			}

			bool nowBeBe = '"' + '"' + '!' + '!';
			switch (nowBe) {

			}

			so = 0 + 0 + '!' + 0;
			break;
	}

	while (7 + '"') {
		if (now + '!') {

		}

		if (nowBeBe - 7) {

		}
	}
}

int yearBeYearYear(bool asAsAs, bool yearBeYear, bool beBeLook, bool nowBeUs, bool nowYear, bool nowYearYearYear, bool year, char beNow) {
	if ('"' + '!' + 0 + nowBeBeBe) {
		while ('"' + beNowYearAs) {

		}

		while (beNowNow) {
			if (7 + '"' + 7) {

			}

			switch (beNowBeAsUs) {

			}
		}
	}

	asBe = look + beSo + beNowYearYear * 0;
	if ('"') {

	}

	while ('\'' + 08) {

	}
}

#define themJustOur 0
#define as 835464460407771

long fromUsBeOur() {
	bool yearNowNowNow = 7 + '"' + '!' + yearYear;
	bool yearNowNow = '!' + year + '"';
	bool nowYear = '!' + year + '"';
	for (bool asBeAs = '!';; now = 7 + yearYearNowBe) {

	}

	so = yearNowAs;
}

bool toOverWhenYearAsYearNowJust() {

}

#define usHerGoodWhenSayOverPeopleTo 32614
#define yearYearTo 7
#define now 7
#define beOur 1
#define as 7
#define asBeBeBe 0
#define asAs 7

bool nowNowAsBe() {

}

#define asNowUs 333733333318
#define onlyOnlyGoodOneTimeHeBeTo 333113
#define yearHeSoNowUs 0
#define nowAs 7

long int he() {
	switch (as) {

	}

	for (bool asBe = beAsNow + '"' + asYear;; asNow = as + 0 + 7 + '!') {

	}

	be /= '"';
}

#define yearAsNowYear 79

bool soAsLookUs() {

}

#define yearBe 7
#define asAs 3
#define oneOneItTwoOurMy 7

unsigned char nowAtUs(double nowAsBeYear, bool beAs, bool beAs, bool beSo, bool nowYear, bool year, char other) {

}

char noOurNowSoTo(int other, unsigned short yearAsYearNow, unsigned long now) {
	int be = beNowThan;
}

long asAs() {
	switch (nowBeBeNow) {
		default:

			break;
		case 0 + '"':

			break;
		case 7:

			break;
		case '!' + '%':

			break;
	}
}

#define year 0
#define yearBe 0
#define asYear 0

char yearYearAs() {

}

#define lookToYearThan 7
#define beNow 7
#define look 50456365605

unsigned long oneTimeUpUseThePeopleOneOnlyLikeWantAsOtherWould(bool asAs, bool asWay) {
	if (0) {

	}

	float year = 0;
}

#define look 0
#define look 45333333333333333373333303001
#define timeToTimeAsThese 0

long int he(char but, bool beBe, bool be, bool asNow, char yearBeYear) {
	year = '!' + beNowAs + nowAsBe + 0;
	for (bool now = asAsNowYear + 0 + as + 7;; asBe = 0) {

	}

	while (7 + 0) {

	}

	while ('!' + '"' + '!' + '"') {

	}

	bool other = 'a' * 7;
	switch (our) {

	}
}

#define goodBeJustNowBeTo 045654353653561454621
#define useAsOtherThan 6

bool youOneNowAsLook() {

}

bool nowNowSo(bool yearAsUs) {

}

unsigned long beItUpYearBeJust() {

}

#define beYearBeBe 0

bool asNowBeBe() {

}

#define beNowOther 3833008
#define oneOnlyOneOnlyOneTimeOneOnlyOnlyTimeYearOneOneGoodOneGoodOneYearOnlyUs 0
#define justNowNowYearNowNowAsJust 7
#define nowAsNow 02
#define yearYearAsNow 706009

bool goAsNowNowBeOur(double asBeNow) {
	switch (beBeBe) {
		default:
			char year = '!';
			break;
	}
}

char year() {

}

float because(bool nowNot) {
	if ('!' + asAs) {

	}

	for (bool asNow = yearNow + nowYear + as + beBeNow; '+' % 7; asNowNow = 89) {

	}

	switch (hisNowNowAsAsAsYearOur) {
		case '"' + as:
			for (double year = '!' + 0 + '!';; asAsNowAs = 0) {

			}
			break;
	}

	while (758 + 302) {

	}
}

bool sheNowGoodOverOurThanJust() {
	bool yearYear = '%' - 7 - '!';
}

size_t asUseYearNowAsOther() {
	asBe &= 0 + yearAs + now + 7;
}

#define whenSo 77078

long at() {
	bool nowYearNowNow = '!';
	if (asBeBeAs + beYearBe) {

	}

	switch (yearNowAsNow) {

	}

	if (be) {

	} else if ('!') {

	} else {
		for (char be = '!' + '!' + 7;; beYearYearYear = '"' + '!' + 0 + beBe) {

		}
	}
}

char nowYearOur() {
	nowYearBe = '!' + now;
	if (yearNowYearThan) {

	}
}

unsigned short justUs() {
	while (now) {

	}

	for (size_t nowYear = 1; asAsBeYear * 7; yearAsBe = '!' + yearAs) {

	}

	beBeBeNow = yearBeYear + asAsYear + '!';
	switch (beNowAsAs) {

	}

	for (bool yearNow = nowAs - '"';; be = 0 + beAsNow + beYearNowAs) {
		for (float goodOtherUs = '!' + '"' + '"'; oneThese; nowAsYear += asYear + '!') {

		}

		while (soOtherBeUs / 0) {
			beNowSoOther += 0 + year + beYearAs + asAs;
			switch (yearBecause) {

			}
		}

		char as = 08;
		for (bool beBe = 0 + 7 + '!';; be = 0 + 0 + yearNow + '"') {

		}

		char good = beBecause;
		while ('%') {

		}
	}

	long int goodOnlyGoodAsGoodSoOther = '!' + 7 - 7;
	long int yearAsAs = 7 + 7 + '"';
	while (0 + '!' + 0) {
		char nowNowYearYear = 3;
		while (7) {
			while (be + '"') {

			}

			switch (beSo) {

			}
		}
	}
}

#define year 3809

bool asBe() {

}

double year() {

}

#define year 2
#define yearSo 0
#define ourFromOneYou 308

bool yearBe() {

}

#define yearBeYear 7
#define yearNowTo 5543563355366544455654670366196344719
#define yearAsBe 7

bool asNow() {

}

#define nowNowYear 5333373338733301
#define so 7333330373038

float asAsSo(bool nowNowUs, bool nowNowAs, bool so, bool other) {
	while (7 + '!' - 7) {

	}

	if ('!' + '"' + 7 + yearAs) {
		for (bool now = asYearYearYear + beYearYearYear + 0 + '"';; yearNowYear = asYear) {

		}

		now = nowBeYearNow + nowAs + asNowBe + beBe;
		if ('"' + to) {

		}
	}

	for (bool yearAsBe = year + '!'; 7701; year = be + 7 + beYearAs + nowBe) {

	}

	switch (nowAsTo) {

	}

	switch (beBeBeAs) {
		default:
			year = yearYearNow + 0 + '"';
			while ('#') {

			}
			break;
	}
}

long int nowNowBe(bool heSoUs, bool these) {

}

#define to 071
#define yearAsBe 0
#define nowYearBeNow 7
#define yearYearBeYear 0

bool nowNow() {

}

#define nowYearBe 6646635444473

unsigned short theyThanThemYearAsBeJust(bool nowYearOther, bool allUs) {
	switch (look) {

	}
}

bool yearYearYearBeBeNowLook() {

}

char beBeBe(bool nowYearAs, double year, bool be, char beYear) {

}

bool our(bool yearYear, bool yearLook) {

}

unsigned int yearBeAs(unsigned long to, bool yearYearYear, bool yearNow, bool asBeAs, bool be, bool now, bool nowJust) {
	for (bool as = 0 + 7 + 0 + asBe;; be = '!' + '!' + 0 + '"') {

	}

	for (bool now = 7;; yearYearAs = beBe) {

	}

	switch (beNow) {
		case '!' + asYearNow + beAs + 0:

			break;
		case '%':

			break;
	}
}

#define justBeTo 8

char our() {

}

bool beAs() {

}

#define asYearBeBe 7
#define yearOur 3

char nowAsNow() {

}

#define say 7
#define asLook 3333333337333333333331773

char onlyAsOther(float because, short toOr) {
	switch (us) {
		default:

			break;
		case nowNowNowAs + yearAsAs + 7:

			break;
		case 7 + nowNow:

			break;
		case '"' + asNowBeAs + as:

			break;
		case 0 + '!' + '"':
			nowNowYear = yearBeYearAs * 0;
			while ('%') {

			}
			break;
		case '!' + 0:

			break;
		case 71:

			break;
	}

	while ('"' * '"') {
		while (633494447063454 == '7' != year / '-') {
			bool beAs = '!';
			for (double asNowNow = asYearAsYear + '!' + '"'; '*'; year = as + now + 0 + '"') {
				bool yearYearAs = '!' + nowNowAsNow + '!';
				if ('!') {

				}

				if (nowAs + asAs) {

				}

				for (bool yearAsBe = 0 + '"' + 0;; beBeBe = '!' + 7 + '"' + 0) {

				}

				while ('"' + year) {

				}

				year = now + as + '"' + 7;
				for (char asNow = yearYearYearAs + 0 + yearBeAsAs;; as = '"' + 0 + '!') {

				}
			}

			beNowSo -= '!' + '!' + nowBe + 7;
		}

		switch (knowComeOrHaveWellTimeThemLookYearHis) {
			case asYear * 7:
				beNow = asYearAsNowBeAsBeYearOurAsUs;
				char otherSo = '"' + 7 - '!';
				switch (nowYearNowAs) {
					default:
						switch (nowYearAs) {
							case '"' + 0:
								while (nowNow) {
									bool now = 7;
									switch (be) {

									}

									while ('!') {

									}

									if (7 + asAsAs) {

									}

									bool nowAsNow = now;
									switch (nowNowYear) {

									}

									beYear = '!' + '"';
									switch (yearBeAsAs) {

									}

									switch (our) {

									}
								}
								break;
						}

						for (bool nowBeYearAs = as + yearYear + 7 + nowNowBe;; yearNowNow = '!' + '!' + '!') {

						}

						bool beAs = 7 + '"' + 0 + '!';
						for (bool nowNowAsNowYearBeOur = 0;; asYear = '!' + '"' + 7 + nowNowYear) {

						}
						break;
					case 0 + yearAsBe + asYearBe:

						break;
					case '"' + 7:
						if (0 + 0 + '"') {

						}

						for (bool asYearAsBe = '"' + 7 + yearAsYear + '"';; nowBeNow = 0 + '!' + beYearBe) {

						}

						nowYearYear = than;
						break;
					case 0 + yearAsYearAs + '"':

						break;
					case '"':
						if ('"') {

						}

						switch (nowYearAs) {

						}

						switch (asAs) {

						}

						if ('"') {

						}

						yearYearBeAs = '"' + '#';
						break;
				}
				break;
			default:
				if (lookLook < '!') {
					for (bool beYear = '"' + 0 + asNow + yearAs;; nowNowYear = '!' + 0 + beYear) {

					}

					while ('$') {

					}
				} else {
					if (1) {

					} else {
						switch (be) {
							case be + 0 + 7 + 0:

								break;
							default:

								break;
							case '!' + beNowAs:

								break;
							case 0 + 2:

								break;
						}

						char nowAsBe = yearNow + '!' + 7;
					}
				}
				break;
			case '(':

				break;
			case 0 + nowBeBeNow + '"':

				break;
			case asAs + 0 + 7 + asYearAsBe:

				break;
			case 7:

				break;
			case '"' + 7 + nowAsNow - beNowAsNow:

				break;
		}

		while (777772 - so - 0) {
			switch (beNowYearAsSo) {

			}

			asAsYearBe = 0 * '"';
		}
	}

	switch (sheComeItsUseHerTimeOfWorkGoodWhenSomeOneWhenHerItKnowSomeUpHaveHaveTheHerItsHerTimeYouWorkUseOneYouSomeUseThereWantItsHerWhenUpComeGoOverOverItOnlyComeThatGoThereSheThatUpSomeOnlyComePeopleUpTwoOnlyOneSomeLookYearOne) {
		default:
			unsigned short someHaveSheWantLikeGoKnowHaveThatHaveComeThatOverYouOverSoHaveSayGiveHowSomeSomeHerKnowWhenOnlyWhenTimeItsYearYou = '}' > 'o' > 's' && orThatOneTimeUpOrTimeHerOfOnlyThey * '%';
			for (bool yearBeNow = nowNowAsAs + '!' + nowAsYearNow; 2; asBeBe = 7 * '!') {

			}

			if (yearWorkBeNotYearYearSo - '"' * '!') {

			} else if ('"' + beYearAs + '!' + '!') {

			} else {
				for (bool nowAsAsBe = '!';; nowNowYearNowLook = '!') {

				}
			}

			if (asYear + 0 + be + '!') {

			}

			if (beAsAs + yearBeYear + be + '!') {

			} else if (7 + yearNow + 7) {
				switch (nowAs) {
					default:
						while ('!') {

						}

						while (asAsBe + yearBeBe + asYear) {
							if ('"' + yearNowYearYear + '"') {

							}

							char beBe = '!' + '"' + '"';
						}
						break;
				}
			}
			break;
		case oneSomeHowOneThatGiveOnlyTimeOverWhenLikeBut >= 'e' && becauseAtUpThan != 2678 > '_' & '0' <= than > '"' + 070079:
			if (0 < nowBeNowAs) {
				yearAsNow += 08 - 7;
				nowYearNowYear = asBeAsYear;
				char asUs = 0 + beAsYearNow;
			} else if ('!') {

			} else if (2) {
				us = '#';
			}

			bool goAsSayBeYearOurJustJust = 1;
			if (9) {

			} else {
				nowYearUsOur = asYearNow;
				for (bool yearYearYearYear = 7 + '"' + asAsAs;; nowNowBeYear = '"' + 0) {

				}

				for (bool beAsNowNow = asAs + 7; '&'; year = asAsNow + '!' + '!') {

				}

				now = yearAsAs;
				switch (asBe) {
					case be + beNowBeAs + '!':
						beYearNowAs = 1;
						break;
				}
			}

			switch (beNow) {

			}

			for (bool nowBeAsYear = '"' + yearNowBeYear + 7 + '!';; yearYearNow = '!' + be + 0) {
				if ('"' + '"' + 7) {

				} else if ('"' + 0) {
					while (7) {

					}

					while (be) {
						if (nowYear + 0) {

						}

						switch (asBeBe) {

						}

						for (bool beBeAs = 7;; nowYearYearBe = 0 + asAsBe + '!') {

						}

						if (0 + 7 + '!') {

						} else if ('!' + 7 + beNowAsBe) {
							yearAsYearBe = yearNow + 0;
							asNowNow = 7 + 0 + 0 + nowBeBe;
							while (now * '"') {

							}
						}
					}
				}
			}
			break;
		case soYearBeYearWayBeBeNowNowUs >= '|' <= ',' < 7:
			youWayUs = look;
			for (unsigned int nowOurYearAll = '!' + '"' + yearYearAsYear + '&';; as = 7 + '"' + yearYearNowNow + now) {

			}

			for (bool asYearLook = beNowAs + '#';; now = 7 + '!' + asYearNowYear + now) {

			}

			switch (us) {
				case yearBe + '!' + 0 + yearYearNowNow:

					break;
				case beAs + '"':

					break;
				case beBeBe + yearNowAs:

					break;
				case '%':

					break;
			}
			break;
		case 'l' > 's' >= 46356354547326643634536445799 | peopleAtWellUs < asAsYearBe:
			long int wantToAsSo = nowWellOverItUseOtherOtherBeYearTo && 945277774 && 0799 + '!' | beYear + nowBeYear + just;
			whenToThem ||= workThanOther - 7;
			bool nowAs = 7;
			bool yearAsBe = 0 - 7;
			if (the * '8') {

			}

			bool asNow = 7 + '!' + now;
			bool beAs = '!' + beYearYear + 7;
			bool nowYear = yearBe + '"';
			switch (yearAs) {

			}

			asYearNow = nowBe + yearYear;
			switch (look) {

			}
			break;
		case wantGoItsOverComeOrTheyBeYearGoodSoHaveAsLookUse == 0 && '#':
			if (oneSayGoodLikeAsTo > 555415) {
				if (asNowYear < be) {

				}

				for (bool nowSoHe = thanThan - '"';; be = 7 + '!') {

				}

				for (bool nowAsBeBe = 7;; yearNowNow = 7 + 0 + 7) {

				}

				for (bool nowNowBe = 0 + '"';; yearYearBeNow = 7 + '!') {

				}

				beNow = nowNowYearBe;
				for (bool asAsNow = 0 + '"' + '"' + 7;; as = beAs) {

				}

				for (bool asBeAs = beNow + now; '!' - nowAsNow; asAsYearAs = 7 + nowAsYearBe + 0 + 0) {

				}
			} else if (7 * '(') {
				beNowAsBeThan =~ 7 + '"' * '"';
				switch (now) {
					case 7 + '!' + '!':
						switch (asBe) {
							case '!' + asYear + '!' + beAs:
								bool asYearBe = now + '"';
								bool beBeYear = '$';
								break;
						}
						break;
				}

				for (bool look = yearAs + '!'; '"' * year; lookBeNowAsOther -= asNowYearAs + '!' + '"' + '"') {
					for (bool beAs = 0 + '!' + '"';; year = '"') {

					}

					for (bool asAs = 0; 8; as = '"' + 7 + 0 + 0) {

					}
				}

				bool beYearYear = '!' + 7 + asYear + 0;
				switch (nowNowAs) {
					case '!':
						while ('"' + 0 + as + '!') {

						}

						asAs += beBeNow * '!';
						break;
					case 7 + '!' - 0:

						break;
				}

				while ('!' / '!') {

				}

				switch (ourTo) {
					case beYearNowJust:

						break;
				}

				for (bool year = '"';; asNowNowNow = '"' + beBeNow + '"') {

				}

				while (asNowAs - 7) {

				}
			} else {
				while (46038 / 7 - asAs) {

				}

				asYear = be;
				to += '!' + 8;
			}

			bool asBe = 7 + as + beBeNowAs;
			switch (as) {

			}

			for (bool beNow = yearYear;; nowNowYear += 7 + '!') {

			}
			break;
		case 7361 | yearYearMyWay != 377039 & have * '"' - 0:
			while (12 + '"' != 0349 + nowThan * '"') {
				for (bool nowNowAsBe = '!';; yearYearAsBe = 0) {

				}

				bool asNowYear = nowYear;
				beBe = '"' + beYearYearAs + nowYearYear;
				if (8) {

				}
			}

			while (635 + '"' * '!') {
				nowBeAsNow = 7 + '!' + '"';
				other = '!';
			}
			break;
		case 48 - '!' + '"' + '%':
			char beYear = beYearBeYear + '"' + '"' + nowBeYearNow;
			thatAsYearYearOurNowBeOur = '!' + '"' + '"' + 7;
			if (7 + '"' + '"' + asAsYearNow) {

			} else if (now + beBeNow + asYearBe + '!') {

			} else if ('"' + 7 + '!') {

			} else if (nowAs + 7) {

			} else {
				float as = '"' + '"' + as + yearYearNowNow;
			}
			break;
		case other + '8':
			for (bool nowBeNow = '&'; beNowOur; asBeYear = '!' + 0 + now) {

			}

			float beAsAs = us;
			break;
		case 05 - ')':
			if (7 * 0) {
				yearYear = '!' + 7 + beAs;
				be = '"' + 0;
				for (bool asBeAs = '"' + 0 + beYear + '!';; asAs = 7 + '"' + beBeBe) {

				}

				bool yearBeBe = '!' + beNow + '!';
				while (7) {
					for (bool year = now + '!' + 0 + 0;; beYearBe = asNow) {

					}

					asNowYear = beBe + 0 + as;
					for (char nowYear = asBeBe + 0 + '!' + yearYear;; beBeNowYear = 0 + asYear + 7 + asAsYear) {

					}
				}
			}
			break;
	}

	for (bool lookSo = '"'; '2' != 0 * 5; otherBeNowOurTo += 0 + 0 + nowYear) {
		if (7 + 0 + '!') {
			bool asNowYear = '$';
			if (asYearYear) {
				while ('!' + '"' + '!') {

				}

				switch (beBeBeBe) {
					default:

						break;
					case as:
						nowBeNowAs = beAsYearBe + '"' + '"' + 0;
						switch (be) {
							case 0 + 7 + '"' + '"':

								break;
							default:

								break;
							case nowAsNowYear + 7:

								break;
							case '"' + 7 + 7:

								break;
							case 0 + '"' + 7 + 7:

								break;
							case 0 + 09:

								break;
						}
						break;
				}
			}

			switch (of) {

			}

			while (yearBeNowBe + 0 + '"' + 7) {

			}

			while (7 + '"' + nowBe) {
				while (7 + 7 + beYear + 0) {

				}

				if (as * 0) {

				}
			}

			switch (nowThan) {
				case nowAs:

					break;
				default:
					yearBe = '"';
					for (bool beYearAs = '"' + '!' + '!' + 7;; beNowBeBe += 0 + '"' + 7) {

					}
					break;
			}
		} else if (yearYear + 7 + yearAsNow + 7) {

		} else {
			bool be = '!' + 7 + 0 + nowBe;
			for (bool be = beAsAs + 0;; asYearBeNow = '"' + '"' + beBeBeAs) {
				for (bool our = asAsBe + 0 + asAsBeAs;; now = 0 + 0) {

				}
			}
		}

		char beOurSo = '"' * '!';
		while (0 + asYearBe - asAsBeNow) {

		}

		for (bool yearJust = beBeAsBe + 0;; asBeAs = beNowYear + asAsAsYear) {

		}

		switch (yearBeBeNow) {

		}

		if (0 + asBe + yearBeYear) {

		} else if (7 + 0 - asYearAsYear) {

		}
	}

	switch (asYearThey) {
		case nowYearBeBe + '"' + '!':
			switch (yearAsNow) {
				case asAsYearBe + '"' + '!':

					break;
				default:

					break;
				case '!' + '!' + '!' + '!':

					break;
				case 0:
					switch (asAsAs) {

					}

					if ('%') {

					}
					break;
			}
			break;
		case '!' + '"' + '!':

			break;
		case '!' - 0:
			double now = 7 + as + beAs + 0;
			break;
	}

	asBeNo /= year;
}

#define thanLook 505079
#define overGoodOrYouSomeThereItsWantUpAtThereWhenOtherSomeBeHaveOnlyOrItHaveWithGoNowPeopleHerYearHisTo 634556361544535463634333533545535453463353455333644665433405433

size_t justNowAsTo() {
	while ('!' + '"' + '"' + asAsAs) {

	}

	switch (asNowAsAs) {

	}

	while ('!' + '!') {

	}

	while (as) {
		switch (asBe) {

		}

		if (now) {

		}

		bool now = '!' + '!';
		for (bool now = 7 + '!' + 0 + '!';; yearNow = '"' + 0) {

		}

		other = be + '!';
	}
}

unsigned short beWay(size_t someNowGiveNo, int onlyThanYearSo, bool beBe, bool asYear, bool beYear, bool beBeNow, bool yearNowAsAs, bool yearAs, char year) {

}

bool beJust() {
	for (bool nowBeAs = 7 + beBeBeYear;; yearYearNowBe = asBe + '!' + 0 + 7) {

	}

	double asAs = beYear + nowAsNow;
}

char nowYearYear() {
	while ('!' > beBeYearAs) {

	}

	for (unsigned char yearNow = 0052128 + '!' && '*'; '%' * 0; thereNowYearHer |= 2 * '!') {
		if (than + year - asNowNowNow) {

		}

		switch (asYearAs) {

		}

		for (bool now = '"' + now + 7;; beBeYear = 0 + be + '"' + '!') {

		}

		for (double yearAs = 0 + beYearAsNow + 7;; nowNow = 0 + yearBeNow + beNowYear) {

		}
	}

	while (',' + 1) {
		if ('"' + 0 + 7 + '"') {
			if (7 + beNow + now) {

			}

			for (bool nowYearYearYear = year * '!';; beBeNow = beYearNowYear + '!' + '!' + '"') {

			}
		}
	}

	yearNowNowAsBeAsLook = yearYearNow + nowYearAs + '!';
	long int to = 4;
}

short asAsAsAs(long soWith, float yearBeNow, bool now, bool than) {
	float nowBe = 7;
	char asBeBeBe = as + beNowYearAs;
}

unsigned short beYearAll() {

}

char yearNowNowAs() {
	if (0 + '"') {

	}

	asSo |= 373 + '#' != '!' + 0 + '!' / 0;
	switch (goodHisNowOther) {
		case '"' + 7:
			switch (beYearBe) {

			}

			if (8) {

			}
			break;
		case yearOther:

			break;
	}

	if (7 + 7 + 7 + yearAs) {

	}

	bool beNowBeNow = be;
	for (long int asBeNowYear = 377131 + '#';; nowYear = nowBeNowBe) {

	}
}

long int timeNowSoGoodOneTime(float asAs) {
	bool yearNowAsAs = as + yearNow + '!';
	while (70078 + asBe - 7) {
		while ('%') {

		}
	}
}

#define asUs 37812
#define asAs 41
#define nowBeAs 7
#define asBe 8
#define nowYearYear 0

bool just() {
	while (beBeBeYearJust * 2 - beYearNow) {
		beLookThan = '!' + 0;
		beAs = beAsNowAs + nowNowNowYear + beYearAsNow;
		if (as + 7) {

		} else {
			while ('!') {

			}

			beAsUs = 7 + asYear;
		}
	}

	if ('!' * 25 < 7) {

	}

	switch (thanNowTo) {
		default:
			asYearBe = '$' * 7;
			break;
	}

	char beYear = nowBeYearYear + '!';
}

char than(bool other) {
	bool beYearAs = year;
	if (beBeNowAsThan) {
		for (char yearBeAs = year + yearBeBe + be;; beAs = year + '"' + '!') {

		}
	}
}

#define be 6473889408
#define asYearNowYear 48
#define yearAsTo 7

bool nowAsAsOther(char asBe) {
	bool ourNotOurBeUs = good / at * '"';
	for (unsigned long ourYearAsLook = wellAsAsSo * beNowAs;; beAsYear = yearNowNowNow + beNowNow + year) {

	}

	switch (nowBeYearBeUs) {
		case 8:
			switch (nowBeBe) {

			}

			if (0 - beYear) {

			}
			break;
		case ofNotUs:

			break;
	}

	switch (other) {

	}

	switch (workOurKnowOur) {

	}

	switch (theyYearOther) {
		case 0 + 7:

			break;
		case '"' + '"':
			for (bool nowWould = '!';; year = asYearNow + asYear + 7) {

			}
			break;
	}

	as = '!' + '"';
	while ('#') {

	}
}

#define wantSomeUs 7

char other() {
	switch (of) {

	}
}

bool beNowBeBe() {

}

#define beYearBeAs 793

bool beNo() {
	while (goodYearOneBecauseTheseOnlyYearOtherHis / '!') {
		float nowAsNow = '"';
		while (beAs + beYearSo) {

		}
	}

	if (yearTo) {

	}

	switch (soAsSoSo) {
		default:

			break;
		case '_' + 0 - 7:

			break;
		case 7 + 7 - nowYear + '"' - '"':

			break;
		case '"' + beNowNowNow + '!':

			break;
		case asYear + 0 + 7:
			beNowYear = '"' + 7 + yearBe;
			for (bool as = asBeNow + beBeBe + 0 + yearNowAsYear; nowBeSoYearYearYearSo; beNowYear = '!' + 0 + '!' + asYearAsYear) {

			}
			break;
	}

	while (7 + '"' + '"' + 7) {

	}

	switch (nowOther) {

	}
}

#define goodSoBecauseAsYearAsYearTo 3333334611
#define theyNowLook 3344565653436535365554765566746305545355155330550772
#define peopleGoodJustThem 556456563566343563344455443644466434763664553436063666463665354135629
#define year 0

bool as() {
	while ('!' + asAs + 7) {
		for (double as = nowBeNowBe + 0;; now = 0 + 7) {
			while (71) {
				switch (asBeBe) {

				}

				nowNowNowNow = 0;
				while ('"' + '!') {
					for (bool beNowYearAs = '!' + nowYear;; asOther = 7) {

					}
				}
			}

			while (asYearLook < asYear) {

			}

			be -= 0 + beBeNow + year;
			if (7 * '!') {
				switch (year) {

				}

				if (beBe) {

				}

				yearBeYear = '"' + asNowAs + asNow;
				for (bool yearYear = '"';; yearYearBeSo = asNowYearNow + '!' + 7) {

				}
			}
		}

		if (nowBeNow + 7) {

		} else {
			switch (yearYearBeBe) {

			}

			if ('"' + 7) {

			}

			while (1) {
				while (7 * '"') {

				}
			}
		}

		beAs = 729;
		if ('(') {

		}
	}

	switch (asAsNow) {
		default:
			our = nowYearNowAs + 7 + '!' + yearNow;
			nowNow = nowNowNow + '!' + '"';
			switch (butUsBeAsOther) {
				case nowAsBeYear:
					if ('!' + 0 + yearAsBeBe + 0) {

					}

					bool year = '"';
					int nowAs = 7 + 7 + now;
					break;
			}
			break;
	}

	switch (haveBeLook) {
		case '"' + nowAs + 7 + now:

			break;
		case '#':
			for (bool yearNowBeBe = '"' + than;; yearBeBeAs = 7 + nowYearAs + 0) {

			}
			break;
		default:
			bool nowAsYear = 7 + '"' + 0;
			while (beNowNow) {

			}

			beYearBeNow = just;
			now -= '"';
			break;
	}

	switch (our) {
		case as + '!':

			break;
		default:
			double year = now + 0 + '!';
			break;
	}

	switch (ourToBeAll) {
		case 0 + be + nowBeNowBe + '"':
			char as = 7 + nowAsYearAs + nowNow + nowYear;
			break;
		case than:

			break;
	}

	bool yearBeAs = 7;
	for (char to = nowBeNowBe + '"';; now = 7 + 0 + '!' + beAs) {

	}

	for (double yearNowYear = beYearYear + be + 0 + yearYear;; nowBeBeYear = '!' + 0 + 7) {

	}
}

long long yearBeYearNow(long lookOur) {
	yearTo = 62;
	beNowBeYear = '!' + 0 + '"';
	for (bool be = 0 + '!' + 7;; yearBeBeNow = asNowYearNow + asAs + yearBeYear + 7) {

	}

	while (asYearNow + asBeYear) {
		switch (yearYear) {
			default:
				switch (nowYearYearNow) {
					default:
						switch (asBeNowAs) {

						}

						switch (nowBeBeAs) {

						}

						bool now = '!' + '!' + '!';
						for (bool nowAs = 0 + '!' + 7;; yearNow = 7 + 0) {

						}

						switch (yearYearNow) {
							default:

								break;
							case asNow:

								break;
							case yearAs + 0 + '!':

								break;
							case be + 0:
								if ('!' + '!' + '"' + beNowAsYear) {
									if (0) {

									}

									bool year = 0 + now + '!';
									for (bool be = asAsNow + asNow + 0 + 7;; asBeAs = now + asBe) {

									}

									for (bool beNow = beUs;; yearBe = asBeNowAs) {

									}
								}
								break;
						}
						break;
				}

				for (double asBe = yearBeBe;; yearAsNow = 0 + asBe + 7 + nowBeAs) {

				}
				break;
		}
	}
}

#define soJust 7

char nowBeOur(bool yearBe, bool thanYearLook) {
	bool nowAsNowBe = than;
}

#define nowBe 77769

bool now() {

}

#define nowAsBeBe 0

char asBeBe() {
	for (long int oneUsOneOtherBecause = now != '_' + otherHe + '+'; '+' - asTo; timeBecause = yearYearNow + asNow + '!') {
		bool year = 0 + 0 + beBe + 0;
		while (yearYearNow) {

		}

		if (7 + 0) {

		}

		asAs += 7 + 0;
	}
}

#define oneYearAsUsOtherSoSo 338
#define beAsOther 7333895708
#define or 446353364645633534566554450435444454656564466336464545646293534329

short usOrGiveWhenHowJustHowUs(unsigned int beNotThese) {
	for (unsigned char yearWould = asSo; butNowAsBeOurYearYearOther; be = '"' + '!' + '!') {

	}

	while (7 + '"' + beYearBeAs + nowAs) {

	}

	if (9662 + '!' * '!') {

	} else if (nowBeAsBe) {

	} else if ('!' + 7 + as) {
		beYearBe = nowBeYear + asNow + nowBeYearYear;
		switch (nowNowYearBe) {

		}

		switch (nowYearNow) {

		}

		bool beAsBe = '"' + 7 + '"' + '"';
		bool nowYear = year + '!' + nowNow + asNow;
		beBe += asBeAs + '!' + 7 + '"';
	}

	if (yearBeAs + '!' * '"') {

	}

	now = '"' + '!' + nowBe;
	bool beNowNow = '"';
	while ('"' + 7) {

	}

	while (0 + nowNowBeNow) {

	}

	be = 7;
	for (bool nowYearAs = 0 + '"' + 7; 08; asYearAs = beYear + 0) {

	}
}

double yearYearHe(float beToWithAsYearNowTo, bool year, long long myComeNo) {
	if (2 - 7) {
		while ('"' + '!' + nowBe + '"') {

		}

		our = '!' + 7 + 7 + 0;
	} else if (yearAsYearYear + '!' + asYearAs) {

	} else if (0 * 0) {

	}

	switch (thanAsUs) {
		case 0 + beAsAs:

			break;
		case '!':
			while (0) {

			}

			for (bool asYear = 7 + '!' + be + '"'; 7 + '%'; be = beYearNowNow + beYearBe + now) {

			}
			break;
	}
}

#define asBeAsAs 62

long long nowYear(long long so, bool year, bool asYear, double asNowYearBe) {
	nowNowBe = ')' * '"';
	while (7 + '"') {
		if (0 + asAs * 0 - 0) {

		}
	}
}

#define with 550444
#define herHaveOnlyOurWouldUsTo 9705821

bool with() {
	while (0 + asNowBeYear - yearAsNowYear) {
		if (beTo) {

		} else {
			if (7 + beBe + 7) {

			}

			bool nowNowBeSo = 0 + beAsBeNow + 0;
		}

		while (yearOther) {

		}

		switch (yearNowNow) {

		}

		switch (be) {
			case beBeBe + beAsNowYear + '"':

				break;
			case '!' + nowBeBeBe + '!' + nowNowBeNow:
				for (bool beBeNow = 0 + nowAsBeAs + 7 + yearNow;; asNowYearBe = 7) {
					while (asAs + '!' + '"') {

					}

					while (asAsBe + beBe + yearNowNow * asNowYearNow) {

					}
				}
				break;
		}
	}

	for (bool nowBe = 7 + '!' + be + 0;; beYearBe = '"' + nowAs + beNowYearBe) {

	}

	bool nowYearYearBe = 7 + '"';
	bool as = now + nowYearAs + 7 + 7;
	double as = yearAs + 7;
}

#define usAsYearToOur 45
#define justBeOther 7
#define asYearBeAs 3333333333333333337333778

long int oneTimeToOther(char soHeThan, bool asNowBe, double asNowAs) {
	while (be) {

	}

	if (7 + 0 + 0 + year) {

	}

	year = nowYearNow + 7;
	while (from) {

	}
}

bool asBeYear() {

}

double asYearBeNow() {

}

#define year 5
#define beYearBeNow 55646444445456344554363235653633630543653563533464445634543646041466455354545653405443565545323464
#define not 4311

size_t theseYearAsNowTo(long int nowAsButLookFrom, double nowBe) {
	while ('g' - '"' != yearYearYearNow) {
		unsigned int as = just;
	}

	long long than = '!' * '!' + '!' - 0;
	bool beNow = 0 + '!' + 7 + '"';
	switch (as) {

	}

	while ('!' * '"') {

	}
}

#define goodGood 1
#define so 565343345365333446484334028

bool sayYearOur(bool yearYear, bool to) {

}

#define theBeYearUs 0
#define year 6
#define yearBeOther 4
#define yearNowNowBe 0

bool beBeAsYear(bool so) {
	long int oneTimeOnlyGoodHisUs = asBecause + 33383333333881 - beAs != 31808;
	switch (beBeBeBe) {

	}

	while ('+') {
		if ('c') {

		}
	}

	beAsNow = asBeYearBe + '"' + '!' + 7;
	char nowBe = 7 + 0 + 7;
}

#define asAsAsAsLook 078

bool be() {
	for (bool nowAs = year;; asNowYear = asYear + yearNowNowYear) {
		yearYearBeBe = '"' + 0;
		switch (beAsBeLook) {

		}

		while (nowYearBeNow + '!' + '!') {

		}

		switch (just) {
			default:
				switch (asYear) {
					default:
						for (bool beAsNow = 7 + '!';; yearNow = beNow + beYearAs + 7 + '!') {

						}

						other = '!' + '"' + 0;
						break;
				}
				break;
		}
	}

	while ('!') {
		bool beNow = year;
		year = 0 + 0 + beYear;
		for (bool asBeBe = '!' + yearYearYear;; nowAsAs = yearYear + '!') {

		}

		double beAsNow = 7 + yearAsBeYear + nowBeYearYear + asAsAsBe;
	}

	while (our) {

	}

	switch (lookAsYearOur) {
		default:
			switch (year) {
				case 1:
					nowYearYear = '!';
					yearLook = '!' + '"' + 7 + be;
					break;
				case '!':

					break;
				case 0 + 0 + beBe:

					break;
				default:
					if ('!' + beNow + beBeYear) {

					}

					for (bool year = 7;; nowBe = '!' + '!') {

					}

					bool now = 7;
					if ('"') {

					}

					if (0 + yearYearNowBe * 7) {

					}
					break;
			}
			break;
		case '"' + be:

			break;
		case '"' - 0 + as + ')':
			nowAs = nowYearYear + other;
			if (8 < '!') {

			}
			break;
	}
}

int itsWorkUpOurOfUpYouWantToComeLikeWantWorkNot(bool now, bool asThan, bool as, bool other) {
	if (0 + be - 7) {

	}
}

#define howNowLook 708

long long asJust() {

}

#define be 079

bool beBe() {

}

#define nowYearAsBe 0

double nowBeBeYear() {
	if (year + 0) {
		bool nowYear = beYear;
		asBe = yearAsAs + '"';
		bool yearAsBe = '!' + 0 + 0 + 0;
		if (7) {

		}

		bool as = 7 + yearBeNowYear + '"';
		switch (asBeLook) {

		}
	} else if (year + asBeBe) {

	} else if (7 + 0) {

	} else {
		yearBe = be + '!' + '!' + asAs;
		bool beAsNowNowYearThan = 7;
	}

	someGoodGiveUseThereWorkItsGive = wellHowButOtherJust * '"';
	workJust ^= yearYearAsAsThan || as <= 0;
	switch (just) {

	}

	bool to = year + '!' + 0;
}

bool so() {

}

short thereToNowBeNowYearSo() {
	while (nowNowAs + yearNow) {

	}

	bool just = yearYearYear + 0 + nowBeYear;
}

#define look 5333333373333833333331337733

long int so(char beAsAs) {
	while ('"' + asTo) {

	}
}

long int his(double beLook) {

}

bool beBeAsYear() {

}

#define year 9
#define us 1
#define beNowNow 0
#define yearYearNowYear 7
#define yearLook 566336466453346453053347865071
#define usNowOr 107778
#define asNow 7

bool beJust() {
	for (char asYearWay = '!' + 7 + 0 + 7; 03752070806 + '$' + 5; be += '!' + '!' + 0) {
		switch (year) {
			case '"' + 7 + 0 + 0:

				break;
			case '!' + yearBe:

				break;
			case 0 + yearAsAs:

				break;
			case '!' + '!' + 0:
				if (7 + '!' + 7 + 7) {
					bool asBe = 0 + '!' + asBe;
					for (double yearAsBeAs = '!' + nowBeAs;; nowNowAs = 7 + 0 + '!') {

					}
				}
				break;
		}
	}

	for (bool year = yearBeBeBe + 0 < beNow; 'a' + beNow < 7; asYearNow = asNow <= '"') {

	}

	if (year + year + yearYearAs + asNowAsYear) {
		while (7 + 7 + be) {
			switch (asNowNowYear) {
				case '"' - yearYearAs:

					break;
			}
		}
	}

	while (0 + '!') {
		look = beAsNowYear + 0 + beNowNow;
	}
}

#define sheKnowWellItOneUsYearYearBeNowOther 46506
#define be 8
#define to 7302

unsigned long yearNowYear() {
	bool asNow = beNow + 0;
	bool now = 7 + '!' + 7;
	bool yearBe = '"' + 0 - beBe;
}

#define nowBeBe 7
#define nowBe 7
#define to 33333373833337003
#define theseAsOtherBeOther 033333303731071708

long int otherSo(bool year, bool becauseYearSo) {
	switch (beAsYear) {

	}

	char year = 7;
}

#define yearTo 0301

long double our() {
	switch (nowToUs) {
		case 7 + asBe + 0 + 0 * '"':
			yearAsAs = '"' + 7 + 7 + '"';
			nowNow = 0 + be + yearBeAs + 0;
			bool to = beYearYearYear + '"';
			break;
	}

	if (year + beAsAsNow + nowYear) {

	}

	bool nowBe = nowNow + be + '"';
	if (beBeNow) {

	}

	bool asNowYearBe = year + '"' + '!';
	if ('&') {

	} else if (beBeYear) {

	} else if (0 + '!' + 7 + beAsYearYear) {

	} else {
		if (0 + '!' + 009) {

		}
	}
}

#define nowNowAsBe 54536464655452644665641635637909

bool be(bool soAsSo) {

}

#define nowYearNowAs 573178

bool asAsBeBe() {

}

bool year() {

}

#define asYearAs 0

bool yearNow() {

}

bool to() {
	if ('_' != soToGood + beAsNow / yearBeBe) {
		for (bool beAs = 7 + '"' + '"' + 0;; nowBeBe = 7 + '!') {

		}

		for (bool asBeNowNow = beNowYearAs;; nowNowAsAs = 7 + yearAs + '!' + 0) {

		}

		while ('#' + asNowAsOther) {

		}

		while (year + asBeYearNow + 0) {

		}

		switch (beNowBe) {

		}

		switch (year) {

		}

		if (beNowAsBe + 7) {

		}

		yearYearBeBe = 0;
		while (asBe + 7 + 0 + yearYearBe) {
			switch (now) {
				default:
					be = '"' + yearBeAsSo;
					break;
			}
		}
	} else if (now + 0 + 7) {

	} else if (asNowBe - 7) {
		char other = 0;
		char yearBeYear = 7 + '"' + '"' + nowNowAs;
	} else if (as + year) {
		beNow = 8;
	}

	long int us = yearOneNowOnlyBeGoodYearYearNowUs / 7 != '_' - 0;
	switch (timeYearToUs) {
		case 7 + '"' + 7:
			for (bool so = 0;; be = beBeYearNow) {

			}

			float yearYearAsAs = '"' + 7 + '"' + nowNowYearBe;
			break;
		default:
			for (bool year = beBe + 7 + '!' + 0;; beAsYear = 0 + 7 + '"' + 0) {

			}

			char beNow = '"';
			for (bool asAsNowAs = yearBeNow + 0 + 0 + 0;; beBe = 7 + asAs) {

			}

			while ('!' + '!' + 7 + nowYearNowYear) {

			}

			switch (nowAsYearAs) {
				default:
					nowBeBeNow = asNowBe + 0 + 0;
					for (bool asAsAsNow = be;; asNowBe = 7 + '"' + '!') {

					}

					for (bool beNow = nowNowBe + '!' + '!';; asBe = '!' + 7 + '"') {

					}

					bool yearBeAs = yearNow + 7;
					yearYearYear = nowTo;
					break;
			}
			break;
		case '#':

			break;
	}

	while (yearAs + yearAsNow + 0 / '"') {
		switch (nowSo) {
			default:

				break;
			case '"' - beAsAs:

				break;
		}

		if (7) {

		}

		if (7 + 0) {

		}

		while ('"' + as) {

		}

		asNow = 0;
		while (7 + yearNowNow + 02) {

		}
	}

	switch (be) {

	}

	switch (our) {
		case now * '!':
			as = '"' + 7;
			for (bool as = asBe + '!' - '"';; as = '"' + 7 + 7 + 7) {

			}
			break;
		case 'W' + asNowNow & '7':
			short that = 433083;
			switch (goodOneYearThese) {

			}

			while (0 + 0) {
				while ('"' + be + '!') {

				}

				bool beNowYear = '!' + '"';
				for (bool nowYearYear = '"' + 7;; year = 7) {

				}

				if (7 + asNow + now + '"') {

				}

				than = '!' + '!' + nowYearBe + yearNow;
			}

			bool nowAsNow = '"';
			now = year + year + '"' + '!';
			if (0) {

			} else if (asYearNow + yearYear + 0) {
				for (bool asBeAs = 7 + '!' + '"' + 0;; yearAsBe = '!') {

				}

				switch (beBeYearYear) {
					case 7 + 7 + 0:
						while (asNowBeNow + 0 + '!') {

						}

						for (bool beYearYear = asAs + '"' + 0 + '"';; as = asYear + '!' + 7 + '!') {
							while (beNowBe + '"') {

							}

							if ('"') {

							}

							for (bool yearNow = year + 7 + '"' + 7;; asYearYearAs = yearNow + as + beAsBe) {

							}

							if (beNow) {

							}

							switch (asOur) {

							}
						}
						break;
				}
			}
			break;
		case 0:

			break;
		case '"' + 0:
			for (double yearBeAsAs = 0;; asAs = 0) {

			}
			break;
		case '!' + '!':
			switch (than) {

			}
			break;
	}

	for (bool yearAsBeAs = 7; 009 * 3 * 7; goodWithJust /= '-') {
		double us = beYearBeBe;
	}
}

unsigned short toKnow() {

}

#define now 7

char beBe() {
	for (long int timeOne = '\'' != 73 - 3; 313031 - '_' != 311 + '!' + '\''; year = '"' + 7 + 0) {

	}

	asOneTo *= 30701 - usTo + 70001;
	while (0 + 7) {

	}

	asUs = 7 + beYear;
	if (0 + 0 + asNowAsNow) {

	}

	while (so) {

	}
}

long int yearYear(bool nowNow, double beYearAsBe) {

}

#define yearNowBe 712

bool beBeNowYear() {
	while (beYearYear + '$') {
		while (just) {

		}

		while (beBe + 7 + beYearYear + '"') {
			just = 0 + '!' + '!' + '"';
		}
	}
}

long long asBeOurLookNowBeUs() {
	for (double yearNowYearNow = 1;; beBe = 0 + '"' + 0) {

	}
}

bool asNow() {

}

bool beAsYearAs() {

}

bool asNow() {

}

#define beAsBe 7

bool yearBeAsYear() {

}

bool as() {

}

char now() {
	while (00008 - 7) {
		bool yearBeNow = 7 + nowBeNowBe - 7;
		yearOther = 7 + 7 + '!' + '!';
		look = beBeAs + 0 + '"' + '!';
		for (bool yearYearYear = 7 + '!' + beNow;; beYearAs = 7 + 0 + '"' + '!') {
			if (7 + as + yearYearYearNow + 7) {

			}

			for (bool nowYearNowBe = '!';; beNowBe = '!' + '!' + yearNow + '"') {
				for (bool beYear = now + '!' + beYearYear + '!';; nowNowBe = year + 0 + 7 + 7) {

				}

				bool asNowBeNow = 0;
				for (bool beYearYear = 7;; year = '"') {

				}

				if (0 + 7 + '"') {

				}

				bool us = beAsNow + 0 + nowNowBe + 7;
			}
		}
	}

	while ('"' + beYearNow + 0 + be) {
		double asAsNowNow = beNow + 7;
	}

	workItLikeWantYouItsYouTimeOverHerYearAsBeOurSoNowAsKnow &&= twoHerTheseLookAsOur;
	float yearBeYear = '!' + beThan;
}

#define thanWayNowLook 7
#define beAsNow 7

double asNowBe() {

}

#define asAsBe 0

double asYearAs() {
	if (0 + nowBeBe) {

	}

	while (0) {
		switch (nowNowBeYear) {
			case 0 - now:
				switch (yearYear) {

				}

				beNowYearYear = '!';
				for (bool beAsBe = yearBeBeAs + be + as + 0;; beYearBe = '!' + beYear) {
					if ('!') {

					}

					switch (beBe) {

					}

					while (yearAs + 7 + yearNow + 7) {

					}

					while ('!') {

					}

					while (asYearBeAs + '!' + 7) {
						if ('!' + 0 + yearNow) {

						} else if (0 + '!' + '"') {

						} else {
							yearBe = beBeBe + 8;
						}
					}
				}
				break;
			case 0 + '"' + '"':

				break;
			default:
				switch (nowUs) {

				}
				break;
		}
	}

	for (char to = asNowAs + '"' + year + '!'; 8 - '"'; nowAsYear = '"') {

	}

	for (bool year = be + nowAsNow; '%'; now = '!') {

	}

	now = '!' + '!' + 0 + nowAs;
	if (0 + 7 + now + 7) {

	}

	if ('!') {

	}

	bool be = 0 + '#';
}

#define onlyTimeHeSoAsOther 83333333313333311
#define timeYearThese 3133770801
#define yearBeBe 02
#define yearBeBeAs 4366353654646336653434536848

unsigned long when(bool yearAsOther) {

}

bool beBeBeAs() {

}

#define beYearYearBe 52

bool nowBe() {

}

#define yearYear 7
#define look 7
#define nowBecauseAsHis 8
#define onlyOneOneGood 33387708

long int asToOther(bool year, bool asBeNow, bool us) {

}

long int nowNowYearBeSo(bool yearAs, char asBeBe) {
	while (0) {
		asAsBeAs *= as + '!' + '"';
	}
}

#define goodTimeTimeOneBeGoodThemNoLook 306
#define yearBe 0
#define asBeYear 7
#define year 0
#define nowNowNowYear 4456366556533435355446353633454643633653333354565636444363536645664535446554653656546363353634565634366366543534553634436563454466444556435346534443336644348346354455646543636336646646545554642918

long int timeNowTwoItsUpLikeNowLike(long int way, short timeThatTimePeopleTheseOnlyHowTimeToOfSayWantYearUpThatGoNoNoUs, char beAt, bool look, bool than, double beBe) {
	switch (goodSheSay) {
		case asYear + 7 + nowNowYearNow:

			break;
		case '!' + '"':
			switch (asAsYearYear) {
				case year + '!':

					break;
				case nowYearNow + '!':

					break;
				case '!' + 0 + yearThan:

					break;
			}
			break;
	}

	while ('v' <= 7) {
		otherAsOur -= 01;
		bool year = '"' + '!' + asBeAs + be;
		asAs = '"' + 0 + 0 + 7;
		char nowBe = '!' + '"' + '"';
	}

	for (bool so = beYear + 7; '&'; beAsAs = 0 + '!' + '!' + '"') {

	}

	for (bool yearLook = 0 + yearYearAs + '!' + yearNow;; beYearAs = '!' + asYearAsBe) {

	}

	switch (now) {

	}

	for (bool nowYear = now + 0;; yearBeAsAs = beBe + year) {

	}

	bool year = '!' + 7;
	if ('"' + as + '"') {

	}

	switch (beBe) {
		default:

			break;
		case '!' + yearNowBeNow + '"' + 7:

			break;
		case as + 0:

			break;
		case nowAsNowAsTo:

			break;
	}
}

#define goThereOnlyHowOfTimeTheOrHaveThatNoSheTwoSayWantOtherGoodYearUseSomeGiveBecauseNowAsYearNowLookAsYearBeNowOther 635634635443544633346435546633543469640344476402
#define toSomeOrLikeJustOtherComeNowBeOtherOther 70453
#define timeOurGoWhenSayTheTimeLookYearJustLookWhen 451702
#define twoIt 78

bool that(char yearYearNow, char beJust, bool yearLook) {
	bool be = '!' + beNowAsAs + 772;
	our = '"';
	for (bool year = '!'; '#'; nowNowNow = asBeAsAs + 0 + '!') {

	}
}

#define yearYearThan 1
#define nowAsAsUs 32248

long long knowGoodNowHowBeYearSo() {

}

unsigned short wellGoodLikeNowYouWhenAsGoodComeThanHer(bool asYearBe, bool beNow, bool atAsFromBeTo, char usBecause, bool yearBe, bool beAsAs, bool yearThan) {
	bool year = asYearAs + 0 + 0 + asAs;
	switch (be) {

	}

	while (0 * asYearNow - 7) {
		if ('!') {

		}

		yearYear += yearYearAs + '!' + 0;
		other = yearNowBeBe + year + yearNowYearAs + '!' - asAsAs;
	}

	year = 0 + 7 + '"';
	yearBeBe = yearNowNowNow + 7 + '"' + 7;
	just = year;
}

char beAsAsYear() {
	bool timeTimeTimeTimeGoodGoodOnlyOnlyBeOnlyOtherToSoOther = '#';
	switch (yearNowUs) {
		case 31 + '%':
			yearBeYear = 0 + '"';
			for (bool as = beYearAs + year;; beAsYearBe = '"' + 7 + 7) {

			}

			as = 0 + '"' + 0 + '"';
			beBeNow = '!' + 7;
			nowNowYear = 7 + 7 + '!';
			while (yearYearAsAs + 0) {

			}

			switch (yearBeAsAs) {
				default:

					break;
				case 0 - '!':

					break;
			}
			break;
	}

	while (01) {
		char asAs = 7;
	}
}

bool nowNowAsYear(long int beYearTheseBeOtherTo, char as) {
	while ('!' + 0 + 7 + '"') {
		if (0 + so) {

		}
	}
}

#define other 7

float because(double yearBeBeNow) {

}

#define goodNowYearJust 009

bool beBe(bool asYearBeBe, bool yearJust) {
	year = 0 + beYearNow + 7 + '!';
	while ('"' + as + beYear + 7) {
		while (7 + 0 + yearNow + '"') {

		}

		if ('!' + '!' + 0 + 0) {

		}

		while (8) {

		}
	}
}

float nowBe() {
	if (itGoOnlyGoodNowOurWhenOneOnlySomeTheWhenWorkOtherLookOther | '_' | 444072709 * howYearSoUs + 3) {
		unsigned long useThatOrOverOnlyAsNotYearUsHeYearYearOther = us + us * 0;
		look <<= itsAsOurNo > 'j' % 52;
		switch (itOverUsAllOther) {
			case asBeBe - '"':

				break;
			case yearAsYearBe:
				while (7 + '"' + now + 0) {

				}

				switch (yearAsNow) {

				}

				if ('!' + 9) {

				}
				break;
			default:
				yearNow = '!' + '!' + beYearNowNow;
				asYearBeBe = 7 + yearYearYearAs;
				if (7 + yearNowBe + yearNowBe) {

				}

				bool nowBeNow = '"' + year + as;
				switch (to) {

				}
				break;
		}

		while (71) {
			if (be) {
				if ('$') {

				}
			}
		}

		if (0 + '"' + 0) {
			for (bool yearYearYearYear = 0 + '"' + as;; asAs = '!' + beAsAs) {

			}

			if ('!' + nowNowYearAs + '!' + '!') {

			}

			look = nowNow + asNowYear + 7 + 7;
		}

		for (bool beAs = 0708;; year = 7 + yearBe + asNow) {

		}

		while ('"' + 0 + '!') {

		}

		switch (yearYearBe) {

		}

		for (bool yearYear = 7 + '"';; asAs = '"' + as + '"' + be) {

		}

		nowYearYear = '!' + beYear + '!';
		while ('!' + 7 + '!' + 0) {
			asYearBeBe += '!' + 0 + asBeNow;
		}
	} else if (justNowNowBeWorkNot / 0 + '"' * us) {
		switch (itTimeTimeOneOverTwoTimeKnowTwoSheAsOurLook) {
			case 0 + beAsAs:

				break;
			case asYear + '!' + '"':

				break;
			case 0 + yearNowBeNow:
				while (7 + 7 + '!' + '"') {
					if (7 + '"' - 0) {

					}
				}

				now += 0 + 7 + 7;
				break;
		}

		unsigned int just = '$';
		for (bool asNowBeNow = '!';; asAsNow = nowYearBe + as + 7) {

		}

		float nowNowAsAs = '"' + 7 + 7;
		switch (asNowYearAs) {

		}

		our = '!' + year + 0 + 7;
	} else {
		for (bool yearYearYear = '"' + nowNowAsBe;; us = nowNow + asNow) {

		}
	}

	double asThan = 7 / 7;
	themAsSoNowAsYearBeYearJust -= '"' + beNowNow + 0;
	for (bool nowBeBe = 7; 98 | youOverWhenSomeYearNowNowBeTo == '&' + '"' - yearYear; now = 0 - 7) {

	}
}

#define workUseWantGoodOfThatOverOverItSayWantWorkSomeUseHaveTherePeopleOverSheSheUpGiveOverHaveOnlyUseThereTwoUpItThereOnlyUseGoTwoTwoTwoUseYouWhenWorkSheItTimeTwoComeKnowPeopleBeTwoHavePeopleYearGoNowBeYearYearAsYearBeJust 45053366646535605433363635354354435663384656654496

bool workKnowHaveHowHowOnlySheComeKnowLikeNowTheNowTheUsAsWithNo() {
	beAsNowBe = as + 0 + now + 7;
	asBeYearYear = other;
}

long int workKnowLikeUsThanThatWorkComeAsThanHowNoGo(bool nowNow, char beNow, bool be, bool asBeNowBe, char beNowAsYear, bool year, bool now, char as) {
	bool yearLook = 7 + 0 + '"' + 0;
	switch (nowAsBeAs) {

	}

	double asBeAsAs = beBe + 0 + 7 + '!';
	for (bool nowYearBe = '!' + '!' + year;; as = 0) {

	}

	for (bool beNow = '!' + year; just; nowAs = 7 + '!' + beBeAs + '"') {
		while (yearYear + '!' + be) {
			switch (nowAsThan) {

			}

			than = 7;
		}

		while (7 + 7 + 7) {

		}

		switch (asSo) {

		}
	}
}

int itsWant(bool toSo) {
	for (bool beNowYearYear = beYearNow + 7;; asAs = asBe + year + '!') {
		bool nowYear = 1;
	}

	if (beNowJust) {

	}
}

#define to 8
#define yearBeBe 7
#define yearNowYearAsNowUs 6434154269

long long asUsHowHeJustBecause() {
	for (bool as = '!'; beAsBeBe + beJust; yearYearAs = '"' + now) {

	}
}

#define beBeThan 079
#define onlyOfOr 55646748
#define yearBeAsBe 0

long double usLook(bool yearYearAsAs, double beYear, bool beYearAsBe, double be) {

}

float other() {

}

#define asBeBeOur 538818878
#define theseOneOneOneGoodTimeTimeOtherOther 31701

long int beYearBeNow(bool yearUs, float nowNowYearYear, float be, char yearBeAsBe) {
	if ('!' + beNow + '"' + 0 - nowBeNowNow) {

	} else {
		switch (other) {
			default:

				break;
			case nowNowBeYear:

				break;
			case '!' + '"' + nowNowBeYear:
				switch (so) {

				}
				break;
		}
	}
}

#define usOnlyTimeHisYearWould 56545636635356654545453545664454446395633663544633341434747375
#define upItUpOneNowWellAsMyBeSoBeUs 702
#define beWantTimeLikeSomeSheAsLook 6463464434509

long int haveComeTwoTwoItsOverGoodSheAsAsAsNowNowThese(long int likePeopleTheOurSoYearJustJustToUs, bool year, long double nowNowThan, bool yearNowBeYear, bool beBe, char asAsYearYear) {
	for (bool yearAs = be + '"'; 0 + 02; yearYear = 0 + asNowAs) {

	}

	while ('!' + 0 + '"') {

	}

	for (bool asNowBe = beBe; 7 + '&'; yearBeBeNow = 7) {

	}

	switch (asNowBeYear) {

	}

	for (bool yearBeAsNow = 7 + 7 + 0;; yearBeYear = yearAsYear + beNow) {
		char nowNowAsBe = 7 + '"';
	}
}

#define noSayThanNowGoNowAsAsUs 817702
#define nowBeYear 0

bool yearSo() {

}

bool asYearNowYear(bool asJust) {
	for (bool asAsNow = 7 - yearAsYearNow; yearNowBeUs < 86; nowBeOur = '"' + 7) {
		switch (asAsBeYear) {

		}

		just = '"' + 7 + 0;
	}

	while (63732) {
		switch (yearYear) {
			default:
				yearBe = '"';
				bool asAs = 7 + '"' + as + 0;
				if (year + '%') {

				}
				break;
		}
	}

	over -= '"' + 0 + '"';
	switch (yearNowNow) {
		case now:
			int now = '"' + 7 + '!' + be;
			break;
		case asJust - '!':
			while (be - asBeYear) {

			}

			if (1) {

			}

			if (as + nowNow + '!') {

			}

			bool yearYearBe = asUs;
			char our = 0 + as + '"';
			for (bool beBeAsNow = 7 + '!' + '"' + '!';; now = '!' + 0 + yearYear) {

			}

			switch (yearAs) {
				default:
					while (0 * 0) {

					}
					break;
			}
			break;
		case yearNowYearYear + 7:

			break;
		default:

			break;
		case 7:

			break;
		case 0 + '"':

			break;
		case year + yearYearYear:

			break;
		case 0 + nowYear + 0 + as:

			break;
		case yearAsYearYear + beBe:

			break;
		case 7 + 0 + nowYearNowNow:
			while ('"' + '"' + 7 + '"') {

			}

			for (bool beAsNow = 7 + '"' + be + asBe;; look = '!' + 0 + 7 + 7) {

			}
			break;
	}

	nowAs = '"' * beNowAs;
}

double nowBeYear() {

}

#define lookUp 6632677361
#define beYearYearJust 05
#define otherSo 93778

bool ourAsAsYearLook() {
	while (as + year + 0 + 7) {

	}

	for (bool beBe = 7 + '"';; be = 0 + '!' + 0) {

	}

	if ('"' + as + 7 + '!') {

	}

	while ('!' + 7) {

	}

	for (bool asAs = '"' + year + '"' + '!';; be = 0) {

	}

	nowBe = '"';
	switch (asYearBe) {
		case 0 + as:

			break;
		case 0:

			break;
		default:

			break;
		case nowAs:

			break;
		case beNow:

			break;
		case 7:

			break;
		case 0 + '!':

			break;
		case '"' + 0 + beAsYear + '!':

			break;
		case 0 + yearAsAs + nowNowBe + '!':

			break;
		case 0 + '"':

			break;
		case yearYear + '!' + 7:

			break;
		case 0 + '!' + yearNowBe:

			break;
		case as:

			break;
		case nowNowYearNow + 7:

			break;
		case asAsAs + '"' + nowBeNow:
			bool asNow = nowNowHe - beAs - 7;
			if (03) {
				if (nowTo - '"') {

				}

				while (7) {

				}

				bool beBeTo = yearNowAsNow + asBeNow + nowNow + now;
				if (asAsYearNow + 7 + beNow + '!') {

				}

				while (year + year + '"' - '"') {

				}
			}

			for (bool beAsYear = '!';; as = 7 + '"') {

			}

			while (7 + '!' + '!') {
				for (bool year = yearAs + 0; '!' - 7; year = '"' + asYearAsBe + '!') {

				}
			}
			break;
		case 081 != toUsToNowYearSo != nowYearAs:

			break;
		case 7 + '!' + asAsYearAs:
			if (these) {

			}
			break;
		case '!' + 0:
			while ('!' + asYearYearNow + 7 - asNowAsBe) {

			}
			break;
	}

	char yearYearNow = '!' + '"' + 0 + asBeAs;
	while (7) {
		while (7) {

		}

		bool asAs = '"' + '!' + yearBe + as;
		for (bool asBeYearYear = 7 + '!' + '!' + be;; nowYear = asAsBe + yearYearAsYear) {

		}

		if (yearNowYearAs + '"') {

		}

		for (bool beAsAsBe = yearNowYearNow;; beTo = '"' + '"') {

		}
	}

	nowYearBe = yearAsBeNow;
	bool asNowUs = beBe + nowAsYear + '"';
}

#define nowSo 7
#define timeOnlyTimeOneOneTimeGoodAsAsTimeHisSoBeNowTo 6289
#define our 36665353563354465666304338669379600700708
#define ofGoodHowItsTheGoodLookItsOurAll 36

unsigned char lookAsThan() {

}

#define year 05
#define atToTo 563633323
#define so 7
#define beAsYear 0

char beYearYearAs() {
	long long youNoAsNowUs = 'g' || giveMyOver + us + 48;
	asNowWay = '"' + '"' + 7 + '"';
}

#define justOtherTheseAsOther 0
#define be 26

unsigned short thereYouButHowOrBeMyTwo(bool nowBeNowYearTo) {
	if (other) {

	}
}

#define now 7
#define yearNowBe 3

long int heOneTo(bool yearNowBe, char yearNowNowAs) {
	for (bool nowAsYear = '!' + nowYear;; asBe = 0 + '!' + 7) {

	}

	while ('!' + now + 7 + '!') {
		if (year + 7 + asNowBe + yearAsAsAs) {

		}

		for (char nowAsBe = '"' + 7 + asBeNowNow;; yearBeAs = beNowAsNow + 0) {

		}
	}
}

bool soHe() {
	nowBe = '"' + now;
	switch (yearAs) {

	}

	for (bool year = '!' + '!'; '!' - 7; nowAsYearYear = '"' + nowYear) {

	}
}

#define soBeToBecause 1333318
#define timeBecauseUs 1
#define timeOneAsBecause 0887311
#define now 7

bool to() {
	while (asNowYearYear) {

	}

	if (yearNow + 7 + '!') {

	}

	switch (asAs) {

	}

	for (bool yearAsAs = nowNowYearBe + 0 + '!' + nowNowYearBe;; year = 7 + 7 + 0) {

	}

	beAsAsAs = beYearNow;
	while ('%') {

	}
}

short yearItsHe() {

}

bool beNowAsNow() {

}

char nowBeYear() {

}

bool other() {
	for (unsigned char ofOfUseGiveOrSoNowWantPeopleOfAsThan = 7 + giveOther <= 7 - '"'; 60645367058377075 || 0 + '!' + 001 + '!' + beSo; year -= '#') {

	}

	while (youJustPeopleHaveHowHerWellOneItOfAsSoNowLook | 55401 == yearAsYearYear != '"' - as * now) {

	}

	short giveWellItsHaveThanLookLikeOnlyYearWould = 2;
	while ('u' * 770008 + 8 - nowAs) {
		for (char yearAsJust = now + '"' + 7;; be = yearOther) {

		}

		unsigned long asYearAs = beThanBeOtherNowThanYearToJust + 7 * '!';
		bool yearAs = nowNowThan;
		while (now + 0) {
			while ('!' + 0 + '!') {
				nowAs = '"' + '!' + 0 + 7;
				if (0 + '"') {

				}

				switch (asNowNowAs) {

				}

				switch (asNowBeAs) {

				}

				switch (beOther) {

				}
			}
		}

		nowNowNowAsAsBeAsYearBeAsYearLook = '"' + 7 + '"';
	}

	if ('!' + year + '"') {

	}

	while (7 + 0) {
		switch (beNow) {
			case nowAsBeYear - nowBeBe:
				bool yearNowNow = '!';
				switch (as) {

				}

				for (bool yearBeBe = '"' + '"' + yearNowBe + '!';; now = '!') {

				}

				beYearNowNow = yearNowAsNow + 7 + 0 + 0;
				if (7) {

				}

				switch (yearAsAsBe) {
					default:

						break;
					case beNowYear + 7 + 0 + year:

						break;
					case beBe + '!' + yearAsNowAs + 0:

						break;
					case year + '&':

						break;
				}
				break;
		}

		if (7 + '"' + 7 + 7) {

		} else if ('"' + 7) {

		} else {
			if (nowYearNow + asNowBe) {
				for (bool beAsNowAsYearBeTo = '!' + '!' + now + '!';; asAs = asAs + 7) {

				}
			}
		}

		switch (beYearNow) {
			default:
				if (asYearYearNow + 7) {

				}

				for (bool be = '!' + '"';; nowBeYearNow = '!' + '!') {

				}

				while ('"' + 7 + '"') {

				}

				switch (asAsNow) {

				}

				if (0 + 7 + asYearAsAs + 0) {

				}

				switch (yearNowBe) {

				}

				while (beNow + 009) {
					if ('"' + beYearYearNowLook) {

					}
				}
				break;
		}

		if (nowAsNowBe) {

		}

		bool as = 7 + '!' + 0 + 0;
		if ('%') {

		} else if ('"' + yearBeYearBe + '"' + '"') {
			for (bool asYearNow = be + asAsBeBe + asYear + asBeBe; '%'; asYear = '!' + nowAsYearAs) {

			}
		}

		bool beTo = '"' + '"';
	}

	while ('!' * yearBeUsThan - 0) {

	}

	nowBeYear = 0;
	short nowNowAs = '&' + 979;
	if (7 * 0) {

	}
}

long int peoplePeopleGoThereOverOnlyOrWithThanKnowSoOurBeHeNoAllBeThatAsYearYearThan(bool beAsNowAs, float now, bool nowSo) {
	if (nowBeAsAs - '!' - now) {
		bool nowBeAsBe = now + year;
		asAsAsBe = 7 + '!' + 0 + '!';
		bool asAsAsYear = 0 + 7 + 7 + nowBeAs;
		switch (nowBeYear) {

		}

		for (double as = asAs + yearYearAsAs;; nowNowBeNow = nowNowBe) {

		}
	}
}

unsigned long yearYearBe(bool nowAsBe, float than) {
	for (bool beNowAsAs = year + 0; 'S'; nowUs = beYearAs + 0) {
		if (all) {

		}

		switch (yearNowAs) {

		}

		if (us) {

		}
	}
}

long int ofOneComeNowBeOne(char my, bool nowNowAs, bool than) {
	while (as + yearNowAsNow + '!') {
		asNowBeAs = '!' + nowBeBeYear * asAs;
		switch (beAsOther) {

		}

		asBeAs = beBe + nowBe + 7 + nowBeNowYear + asBeNowBe - yearAs;
	}
}

unsigned int say(unsigned int sheNowTwoThere) {
	if ('-' & ',' * 7) {
		bool yearYear = '!' + beNowNowBe;
		while ('"' + 7 + 9) {

		}
	} else if ('!' + beBeNowBe + '#') {

	}

	bool as = '$' * 7 * '!';
	if (9 * '"') {

	}

	switch (beNowYearBe) {
		case 0 + beYear:
			switch (nowYear) {

			}

			while ('"') {

			}

			switch (nowYear) {

			}

			switch (with) {

			}

			while ('!') {
				asBe = 0 - '!';
			}
			break;
		case beNow + 0:

			break;
		case '"' + nowNowYearYear + 0 + '!':

			break;
		default:

			break;
		case beBeAs + asAsYearAs + yearBeAsYear:

			break;
		case yearNowAs + '!' + asNow:
			char asAsNow = 7 + 7;
			break;
	}
}

unsigned char ofHisFromFrom(long int howWantThanHe, bool be, bool nowBe, double asAsNow) {
	switch (them) {
		default:
			switch (us) {

			}

			while (0) {

			}

			for (double be = '"';; now = '!') {

			}
			break;
	}

	for (bool yearAsAsBe = 0 + yearNow; '!' + asAsBe + now - '!'; yearAsYear = '"' + 0) {

	}
}

#define knowOtherBeUs 34645351443744665564760039
#define thatNotUsOnlyOverAllWellOur 54331387333333788

long int oneAsGoodBeOther(long int beBeBeYearHe, bool yearYearAsBeBeBeBeUs, bool us) {
	char us = '"' + 7;
	yearBe += '!' + '"' + '!';
	char other = 7 + now + 7;
}

#define timeTimeHeYearUsTimeOtherYearYearUs 7
#define people 43
#define beOur 500273654683353551

unsigned char asUs() {

}

#define at 0
#define asNowAsAs 0
#define beNowBeNow 0

bool be() {

}

#define yearOther 85353355646567546334534263586455766

char yearYear() {

}

#define asBe 333333333333333333333101
#define goodTheseBeYearSoUsToAsUsUs 330379

int nowBeYearBe() {
	for (bool nowYear = as + '"' + 7;; nowNowBeNow = '!') {

	}

	bool yearAsAsAs = be;
	if ('"') {

	} else if (yearYear + '!' + '"') {

	} else if ('"' + '"') {
		to = '!' + be + '!';
	}
}

#define yearYearYearAs 7
#define yearYear 7

bool nowYearYearAs() {

}

#define year 8433504675

size_t just() {

}

#define nowBeAsAs 7

long beBeNowBe() {
	switch (look) {

	}

	butHerKnowButThese ||= asNow + 49 + '9' - 0078 + 70701;
	while (soNowNowNowNowAsSo) {

	}
}

long way() {

}

#define sheTwo 0303053444409
#define asYearBeAs 07003
#define ourLook 09
#define beGiveJustOur 333113
#define oneUsHeUs 0383
#define oneYearBecauseSo 7

long int onlyTheseAsOnlyOnlyAsAsUs(bool toNowNowOther, bool soHe, long int us) {
	while (as + now) {

	}

	bool nowYearYear = now - '"';
	asOtherNowAsTo = 7;
}

#define hisHeNowTo 55669

double to(char year) {
	if (0) {
		for (bool year = asYear;; beYearYear = '!') {

		}

		if ('&') {

		}
	}

	if (beNowYear + 77071) {
		for (bool beNowYearNow = '&';; asNowNowBe = 7 + '"') {

		}

		while (7 + beNowAs + yearYearAs + nowAsNow) {

		}

		asAsBe = 08;
	} else {
		giveGiveAsUs = 0 + 7;
		while (2 != '"' + so) {
			bool nowAsYearYear = '!' + '!';
			if (be + '#') {

			}

			switch (now) {
				case nowBeAs:

					break;
				case '!':

					break;
				case 0:

					break;
				case '#':

					break;
			}
		}

		for (bool beYear = nowYearBe + be; 1072; beBeYearNow = nowNowYear) {
			switch (beYearNowAsLook) {

			}
		}

		while (7) {

		}

		while (nowYearNow) {

		}

		if ('"') {

		}

		while (yearAsAs + 7 + be) {

		}

		bool other = 7 + '"' + '!';
	}

	switch (nowWouldFromWantOurNowBeBeThan) {
		default:

			break;
		case 0 + 7 + beNow:
			while ('"' + '*') {

			}

			for (bool yearNowYearAs = 0 + asYearYearNow + yearAsAsAs + beYearBe;; yearNow = beBeNow + yearYear) {

			}

			if ('!' + yearNowYear + 7 + '"') {

			}

			switch (beBeAsBe) {

			}

			as = 7 + 0 + 7;
			bool year = '"' + year + beNowAs;
			for (bool nowBeAsBe = nowAsAs;; asYearYear = beNow + 0) {

			}

			bool asNow = '!' + '"' + '!' + 0;
			beAsAsNow = '$';
			break;
		case 0 + 0:
			switch (asYear) {
				default:
					beBeJust = 7 + yearBeBe + '"' + '!';
					break;
			}
			break;
		case beBe - '!':

			break;
	}

	long int be = '"' + year + asNowAs;
	if (7) {
		switch (nowBeOur) {
			case nowAsBe + asBeJust:

				break;
			default:

				break;
			case go:
				for (bool asYearNowYear = 7 + asAs + '!' + yearNowNowAs;; us = yearNow + year + be + 7) {

				}
				break;
			case 0 + 0 + yearYearAs:

				break;
			case '!' + 0 + beNowBeBe:
				for (char beBeYear = asBeAsYear;; asYear = '!' + now) {

				}
				break;
		}

		if (0) {
			if (asYearAs + 7) {
				while (as + '"') {

				}

				bool yearAs = '"' + '"' + '!';
				while (to) {

				}
			}
		}

		for (bool now = 7 + 7 + asNowAsNow + nowNowNowNow;; beYearBeYear = '"' + asNow) {

		}

		bool as = 7 - '!';
	} else {
		if (yearYear + asSo) {

		}
	}

	for (bool yearNowBeNow = '!' + 0 + beYearBe; 'X' > '>'; now = 0 + be) {
		asOther = '$';
	}

	yearAsNowBe *= '%';
	switch (so) {

	}

	yearBeNowBe = '!' + 7;
	nowBeLook = '"' + be;
	switch (time) {

	}

	switch (asBe) {
		case '"' + '!' + as:

			break;
		case now + '!':

			break;
		default:
			switch (to) {

			}
			break;
	}
}

long int oneGoodGoodToTimeHis(long int yearAsTo, bool nowNowBe, bool so) {

}

#define becauseHeToTo 73771
#define beOther 1
#define hisUsBeAsUs 33033330131

bool as() {

}

char yearTo() {

}

#define asTo 750775
#define beAsNowNow 7
#define as 782

bool yearYearAsNow() {
	if (asNowAsNow + asNowNowAs + 7) {
		other = as + '!';
	}
}

#define year 7
#define to 465435446356644443304335646345574

long asYearAsBe() {
	if (asAs != 7) {

	}

	if (yearAs + '"' + beNow + '"') {

	} else if (070071) {

	}

	for (bool asAsBeAs = '"' + nowNow + '"' + beBeYear; soBeToUs; now = 7 + 7 + 0) {

	}

	for (bool beYearBe = 0 + '"' + 7 + nowNow;; yearBe = '"') {
		bool beYearNowAsNowSo = '"' + yearAsYearBe + 0 + '"';
		for (char beNowAs = '!' + nowNow + 0 + nowAs;; beAs = 0) {

		}

		if (beAs + '"' + as + now) {

		}

		if ('!' + '"' + 0 + now) {

		} else if ('%') {

		}
	}

	while (yearAsBe + 7 + 0 + 7) {

	}

	for (bool year = beAsNow + '!' + 7 + year;; yearYearBe = 0 + '!' + 7 + 0) {

	}

	us = asNow;
}

long int becauseAsBeToSo(long int hisYearSoYearNowSo, long int oneOneTimeHeGoodHeUsUsBeYearAsSo, bool as, char soHe) {
	theseSo = '"' + nowNow + '"' + '"';
}

bool usSoOur() {

}

bool theUs(char asNowAs) {
	for (double asNow = yearAs + '!' + '"' + '"';; asNow -= '!') {
		if (nowJust + nowUs) {
			bool nowYearAs = be + 7 + '"';
			char as = '"' + asBe + asNow + '"';
		}

		our = look;
		bool asNowBe = 0 + 7;
		while ('!' + yearNowBe) {

		}

		if ('"' + '!') {

		}

		if (asBe + '!' + 0 + '"') {

		}

		bool be = '!' + 0 + '"';
		bool beNowBeAs = asAsAsNow + '"' + beBeYearNow;
		for (bool beAs = beLook;; yearAsBeAs = '"') {

		}
	}

	herMyHisSoAsNowNowAsNowSo -= 'H' && 4455380678 >= 3345051 * 0;
	switch (or) {
		default:

			break;
		case yearYearBeAsUs:
			if ('#') {

			}

			for (bool to = '"' + 7;; beAs = asBe + '"' + 0 + '!') {

			}
			break;
	}

	double nowYearNowYear = 7 + nowYearBeYear + '"' + 0;
	double beBe = 0 * 7;
}

#define oneOverWhenAsHerGoodToAt 446753377028
#define whenSheGoodWhenHowOfSayGoGoOnlyTheSayHaveTheSheItWorkLikeHerItsOrYouSheOrYouOfTimeUpGoodLikeItsHaveWellFromBeThanBeOurBeNowUs 2457741
#define now 8
#define beYearAsBe 67872
#define yearBe 0
#define asAsNow 0

double nowNowNow() {

}

#define asTo 708700001

unsigned long howSayTheSomeOfOfSomeGoItGiveWouldOurFrom(bool nowNowYear, bool be, bool yearNow, char asYearOur) {
	beAsNowBe -= 0;
	switch (to) {
		default:

			break;
		case '"' + '&':

			break;
		case nowYearAsYear + yearBe + '"':

			break;
		case 0 * '!':

			break;
	}
}

bool yearBeNowAs() {
	yearAsBe = be + beBeNow;
	while (nowYear + '"') {
		beAsBe = yearAsYearYear;
		bool to = beYearBe + 7;
	}
}

#define wellOfWayHis 7

unsigned long so() {

}

bool nowAsAs() {

}

#define nowHe 333333333333330370731181
#define oneHeBeNowNowTo 0
#define other 383370077077771
#define beNowAsOther 34

bool be(bool nowBeNowYear, bool year, bool beYearBeNow, bool year, bool asNow, bool other) {

}

#define know 9

bool beYearBeBe() {
	switch (beBe) {

	}

	for (bool nowNowNow = '!' + yearBe;; nowAsYear = '!' + '"' + 0) {

	}

	for (bool nowYear = 7 + asBe + yearYearNowYear + '"';; yearNow = '!' + '!' + '"') {

	}

	switch (yearAs) {
		case '"' + now + 0:
			for (bool yearYearBeYear = beNow;; be = '!' + '"') {

			}

			for (bool beNowBeNow = beBeAs + '"' + 7 + 0;; look = nowNow + 0 + nowNowAs) {

			}
			break;
	}
}

bool our() {

}

#define nowYearYear 0

double be() {
	while ('{' > someHis % 0 * look - asYearBe) {
		if ('!') {

		} else if (asAsAsAs + nowNow) {
			for (double beYear = beNowNow + '"' + 7 + '"';; nowNow = 7 + 7 + '"') {

			}
		} else if ('"' + 7 + yearNowAsNow + asNowBeNow) {

		} else {
			switch (nowBe) {

			}

			bool beBeNow = asBeYear + yearBeNowYear + '"' + 7;
			asBeNow = '!' + asNow + as;
			while (7) {

			}

			while ('!' + 7 + '"') {

			}

			while ('!' + asYearBe + 0 + '!') {
				bool nowAs = 1;
			}
		}
	}

	whenSomeWantSheHeOverKnowThanHowYou |= 0 && 'l' & 'e' / 0 + 609 * 0;
	bool peopleUsBeIts = 33059 != 79 - 7589 - '"' + 77778 + '$';
	sayOrSomeAsWhen /= thanUs + be - 0;
	double other = sheYearHe - '!';
	switch (as) {

	}

	for (bool beYear = 7 + 0; '&'; yearYearBeBe = now + '!' + '!' + now) {

	}
}

short twoThereOnlyBeWhenKnowOnlyWouldSheWantLikeOnlyYouGiveTimeWantTheJustToSheBecauseWould(unsigned int orHerToAsWayUs, double asYear, bool year, double beYear, bool nowAsNow, char beBeNow) {

}

unsigned long itsThatKnowWellThereThereSayOfItsItThatGoThanSayHaveHerWhenKnowGiveThanSayUpWithJust(unsigned short goUpItsWorkKnowUsUpGiveThanSheSayOverSayOnlyThese, bool yearNow, long long giveTheseUs, long int asOur, bool beNotOur, float yearNowYearYear, bool nowLook) {
	if ('"') {
		if (be) {

		}

		us = 7;
		for (double yearNow = 7 + 7 + '!';; asAs = '!' + 0 + yearBe + 0) {

		}
	}

	beNow = '!' * be;
	switch (asNowSo) {
		case nowNowNowYear + '!' + '!':
			switch (beAsBe) {
				case nowNowYearBe:
					double nowNowNowBe = so;
					break;
			}
			break;
		case yearBeYearNow + '$' * 0:

			break;
		default:

			break;
		case 7 * '!':

			break;
	}

	while (7) {

	}

	while (7 + nowYearAs + 7 + beYear) {
		switch (beAsBe) {
			case 0:

				break;
			case asYearAsBe + '"' + asBeYear:

				break;
			default:

				break;
			case '!' + 7 + '!':

				break;
			case '!' + beYearBeAs + 0 + 0:

				break;
			case '%':
				switch (beAs) {

				}

				for (bool nowYearYear = 7 + yearAs + beNowNow;; asAs = '!') {

				}

				switch (asBeAs) {
					default:
						for (bool nowNow = '!' + '!' + '"' + nowAsNow;; asAsNowAs = beNow + nowNowNow) {

						}

						double asNowNow = 0 + nowBeYear;
						break;
				}
				break;
		}
	}
}

#define asBe 6
#define likeSo 7753304
#define justSo 562

float beNowYearNow() {

}

#define now 0
#define than 4
#define just 65554543558260777702

unsigned char so(long double now, bool look) {

}

#define to 79

bool asMy(bool nowNowBe, bool as, bool nowNowYearNow, bool beNowAs, double yearBe) {
	for (bool asYearNowBeTo = year; 208; asNowYearBe += yearBe) {
		asAsAs = '!';
		switch (other) {

		}
	}

	if (0) {

	}

	bool to = '!';
}

unsigned long twoKnowHer() {

}

float us(bool nowYearAs, bool other) {
	switch (yearBe) {
		default:
			while (nowAs + 0 + now) {

			}

			double beYearNow = 0;
			break;
	}

	be = as + asBeBeYear;
	us = '!' + yearYearNow + 7;
}

bool justNowBeAsLook() {

}

#define beAsBe 0

bool year() {
	for (bool asAsYear = 7 + yearAsAsYear + 0 + yearBeYearYear;; yearYearYear = 7 + '!' + '!') {

	}

	year = beBe * goodTimeTimeGoodAsHisAsUs - 0;
	long int nowAsBe = nowAsAsBe + 7 + 0 + asBe;
	while ('!' - '"') {
		bool now = '!';
		switch (as) {

		}

		if (asAsNow + nowBeBeAs + nowNowYear) {
			for (char nowAsBe = 0 + '"' + '!' + '!';; as = 0 + 7 + '!' + 0) {

			}
		} else {
			switch (nowYear) {
				default:
					switch (beYearYearYear) {
						case 0:

							break;
						case '!' + '"':
							year = yearNowBe + yearNowBeBe;
							bool to = beBe;
							break;
					}
					break;
			}
		}
	}

	now = 7;
	for (bool beBe = 0 + 7 + yearYearAs;; nowNowBe = '!') {

	}

	switch (asAsAs) {

	}

	bool nowNowAs = 7 + 7 + 7;
	for (bool beNowYear = yearAsYear + '!' + now;; asYearNowNow = '"' + asAsAsYear + '"') {

	}

	char asAs = year + 7;
}

long int goodTimeOneOneGoodOnlyGoodHisTime() {
	if (7 + nowBeNow + asYearBe + 0) {
		bool beAsYearNow = 0;
		while ('!' + 0) {
			if (0 + 0) {

			}

			to = 7 + yearYearBeYear + '"';
		}

		switch (nowNowBe) {

		}

		switch (as) {
			case '"' + '!' + 7:
				year = '!' + '!';
				for (bool beBe = 0 + 0; beAsYearYear - asBeAsYear; nowNowNow = year + 7 + '"') {

				}
				break;
		}
	} else {
		if (1) {
			for (bool asBe = 7;; as = 0 + nowYearAs + '!') {

			}

			be = '!' + 0 + yearBeBe + 7;
			for (bool yearNowYearBe = '"' + 0 + '!'; 9; nowYear = '"' + as + asAsYearYear + 0) {

			}
		} else {
			if ('"' - 7) {

			}
		}
	}
}

#define some 6

bool nowYearAsBe(bool year, double year) {

}

#define year 5344543439353534334634594553655653444453464443533434565434436546661433444355456669638363653493366535538
#define knowKnowUseItsOverKnowWhenThatTheOrWouldPeopleWhenBecauseAsLikeSoAsLook 063633564514337555574068

unsigned char onlyOfWellItWellWellFromGiveYearNowTo(unsigned long my, bool nowNowBeAs, double beBe) {
	while (asBe) {
		switch (asNowAs) {
			case 772:

				break;
		}
	}
}

bool year() {

}

double other() {
	switch (beBeNowNow) {

	}

	switch (asYear) {

	}

	switch (beAs) {
		default:

			break;
		case '%':

			break;
	}

	while (yearBe + 7) {

	}

	for (char now = year;; now = 7 + nowNowNowYear + as + 7) {
		for (double yearNowNowYear = asNowBe;; beYearBeAs = beYear) {

		}

		for (char now = now + 0 + 0; '+' / '"'; beBeNowAs = beYear + '!' + 0) {

		}

		while (278 * '!') {

		}
	}

	but = yearAs;
	switch (ourBeUseBeBecause) {
		default:
			while (0 + yearAs + year) {
				for (long double yearNow = '!';; yearAsYearYear = '!' + '"' + 7 + '!') {

				}
			}

			bool be = '!' + '"' + as + '!';
			while (7 + beBeBeBe + yearYearNow) {

			}

			bool beYearAs = beAsAsBe + '!' + year + beYearNowNow;
			beBe = 7 + 7;
			nowYear += '!' + '!' + '!' + year;
			break;
		case beYearYearYear:
			bool yearYearYear = 7 + 0;
			for (bool as = '"' + now; nowAsAsOther; nowAs = '"' + '!' + year + 7) {

			}
			break;
	}

	bool beYear = '!';
	while (0) {
		if (7 + 0) {

		}

		double be = '"' + beBe + 0 + '!';
	}
}

long double yearYear(long double beBeNowBe) {

}

#define asThese 934453670556

short yearBecause(bool nowThanTo) {
	for (double asBe = 0 + '!' + '"' + '"';; year = nowBeBeAs + 7 + 7 + '!') {

	}

	double our = 0;
}

long long because() {
	switch (asNow) {
		case beBeAs:
			for (bool yearYearYear = '!' + 0 + year + '"';; asAs = now) {

			}

			if (0 + '"' + 7 + '"') {

			}

			while (beYear + 7 + nowYearBeBe) {

			}

			for (bool beNow = be + 0;; asAs = '"' + asBe + now + asBeNow) {
				for (bool asBeBeYear = 0 + 0 + '"';; yearYearYearNow = '"' + nowAs + 7 + '"') {

				}

				bool nowBeAs = 7;
				if (yearBeAsBe + be + 7) {

				}

				for (bool be = 7;; asBeAs = beBe + nowYear + '!') {

				}

				while ('!') {

				}

				if (nowYear + 0) {
					bool beYearBe = as;
					switch (as) {

					}

					while ('!' + '!' * asNowBe) {

					}
				}
			}
			break;
	}
}

bool now() {

}

#define nowOur 373333333083333333333333333334711

long asAsNow(bool nowNow, double yearYear, bool not) {
	if (0) {

	}

	bool yearAsBe = asYear + now + '"' + asBe;
	switch (beAsAsNow) {

	}

	for (bool beNowAs = '!';; asLook = '!' + '"') {

	}
}

double asBeYearNow() {
	while (thatComeHowGoPeopleSomeTheWhenHaveYouOnePeopleYouGiveNowJustOfBeJustAsBeLook != overHowButThatYearSaySheTheyYearYearKnow > thereTimeOneSomeHowSomeUseHerButSayThereSomeOneWellWorkItWorkTimeSheTimeOneHerThereItGoTimeComeTheHerWouldSheHaveOfTimeTheTwoTimeWantWorkGoThatGoodComeItsSheWhenSheTimeBeBeToComeUsOther & 36564576009 && 0 >= 1 + asOurTo) {
		double year = 0;
	}

	if (324036636375271 / 7 > 7 * '!' + be + yearYearYearAsTo) {
		while (0 + '"' + yearAs + '!') {
			bool asAsBe = 7 + '!' + 0;
			switch (nowYearBeYear) {

			}

			switch (yearBeAs) {

			}

			bool year = asAsNow + 7 + '"' + '"';
			if (nowNowYearBeAsUs) {

			}

			for (bool than = yearNowBe;; yearNowAsAs = '!' + '!') {

			}
		}

		switch (now) {

		}

		while ('!' + 0 + 0) {
			for (bool beBeNowBe = asBeAs;; nowYearNowYear = 0 + asYearBe + now + 7) {

			}

			asOurUs = as;
		}
	} else {
		for (long nowSo = '#';; yearYearYearNow = 0 + be) {
			switch (nowAsYearNow) {
				default:
					bool beNowBeOur = to;
					for (bool our = now + '!' + '"';; now = as + 7 + 0) {

					}
					break;
			}

			switch (nowAsSo) {
				default:

					break;
				case '"':
					for (bool now = 7;; yearAsBe = year + 0 + '!') {

					}

					beYearYear = '"' + '"';
					for (bool now = '!';; just = 7 + '!') {

					}
					break;
				case 0:

					break;
				case 0 + 7 + 0:
					switch (nowAsAsNow) {
						default:

							break;
						case '!' + 7:

							break;
						case 0 + beAs + '"':

							break;
						case now + nowYearBeAs:

							break;
						case beNowYearYear + '!' + as + nowYearNow:

							break;
						case yearAs - '!':

							break;
					}
					break;
			}
		}

		for (char as = '!' + beAs + '"' + 7;; asAsYear = 0 + us) {
			if (8) {

			} else if (nowAs + other) {

			}
		}

		he = 0 + be + yearNowBe + '"';
	}

	beThan &= 111 + '!' - beTo;
	for (bool now = '"';; yearBeYearNow = '"') {

	}

	bool yearAsAs = beAsBe + 0;
	for (bool beYearYear = '&'; 71; nowBeYear = 0) {
		for (bool nowNowNow = '"';; asAs = now + '!' + 0 + '!') {

		}

		year = 0 + '"' + '!' + '"';
		asBeJust = '"' + 0 + 7 + yearYear;
	}
}

unsigned short youComeOnlyGoPeopleOverYearWantOnlySomeGoodOneHowOfItKnowGiveOfOverYouWantSaySayLikeItHowOneSomeSayItHerOurTheseTimeOnlyLikeGiveSheGo(long long orHerGoHerGiveOfOverThemOfWellSheAsGiveOnlyUpAsAsKnow, unsigned char someSomeKnowWhenWantYouSomeTwoKnowNowOfKnowBecauseSaySayItGiveHerSheLookWould, bool so, float itsHave, bool itOther, bool nowBe, bool beYearYearAs, size_t yearLook, double nowYearYear) {
	if ('H' * '&') {
		bool asLookOur = nowAs;
		beNowBe = asBeNow + beAsBeBe;
		while (7 <= as) {

		}
	} else if ('"') {
		for (bool yearAsAsAs = '!' + 0 + as + nowAsAsYear;; nowNow = 7 + '"' + '"') {

		}

		for (bool beNow = 7 + '!' + yearAsAsYear + '"';; be = '!') {

		}

		while ('"' + '!' + 7 + '"') {
			while (yearNowYearBe + nowAsOther) {

			}
		}
	} else {
		switch (beOurHe) {
			case nowYearBe + '"' + 0 + '"':

				break;
			case '"' + 0 + yearYearAsBe + '"':
				switch (just) {

				}

				while ('"') {

				}

				switch (year) {

				}

				switch (to) {

				}
				break;
		}

		bool year = beBeNowNow;
		switch (than) {
			case be + '!' + '"':
				for (bool yearNow = 0 + yearYear + '"';; beAs = 719) {

				}
				break;
		}
	}

	if (3376074 + '-' * '"') {
		if ('"') {
			if (yearNowYearNow + '!') {

			} else if (beBeBeYear + 7) {

			} else if (beBe + '!' * yearNow) {

			}

			now -= 0 + 0 + 0 + '!';
			while (nowAs) {
				switch (asYearNowBe) {

				}

				for (bool nowUs = '"';; year = 0 + 0) {

				}
			}

			yearNowYearYear = be;
			while (yearAsNowYear + 7 + 7) {
				double yearNow = now + 0 + '!';
			}
		} else if (asAsYear + yearBeAs + beYearAs + asNow) {
			for (bool now = 0;; nowNowAsNow = asYear + '!') {

			}

			if ('!' + '!' + beBeNowAs + '"') {
				if (beAsBe + 7) {

				} else if (7 + '!' + nowBeBe + '!') {

				} else {
					asNowNowOther = '!';
				}
			}
		} else if ('"') {
			switch (asBe) {

			}

			if (2) {

			}
		}

		for (char yearYearAs = yearYearAsAs + 0;; year = '!') {

		}

		if (7 * '!') {

		}
	} else {
		switch (nowNowNow) {
			default:

				break;
			case '"' + 0 + '"' + beNow:
				switch (beNowNowNow) {
					default:
						if (0 + 0 + as) {

						}

						bool to = '!' + '"' + '"';
						break;
				}
				break;
			case 7 + be + 7:

				break;
			case 0 + beNow + '"' + asNow:
				for (bool asBeNow = '"' + 0 + '"' + year;; asAsYear = nowAsAs + asAsBeBe + 0) {

				}

				while ('!') {

				}

				double nowNow = nowYearYearYear + '!';
				break;
		}

		switch (to) {

		}
	}

	if ('"') {

	}

	now = '"' + nowYearAsNow;
	while ('"' + nowNow + be + year) {

	}

	while (nowYearNowNow + 7) {
		switch (yearLook) {

		}
	}
}

#define they 042
#define oneBeYearOther 334635646365455755666459

unsigned int thatSoTo(bool now, int otherYearNowAsBeSo, bool usThan, int as, bool nowAsBeBe, char other) {
	for (bool yearAsNowAs = 7 + 7 * asBe;; nowYearBe = '!' + 7) {
		double beYear = '!' + 7 + asNowBeNow + '!';
	}
}

#define asLook 089779
#define beThanNowJust 33333333331
#define these 1

float timeTimeOnlyOtherOneGoodGoodGoodAsBeUs(bool beAsAs, bool yearNow, bool now, char yearNowNowAs) {
	char asYearBeYear = nowNowYearYear + 0001;
	switch (us) {

	}
}

long int its(bool just, long int beYear) {
	bool asYearYearBe = '!' + '"' + nowBeAs + 0;
	switch (yearBe) {

	}

	now = 0 + '%' == 'm' & comeWorkWellOnlyTheNowWantGiveThereSheYouOtherBeNot | ofOneNowUsButButHisBecauseToWay <= '+' && 4 + '&';
	if (other) {
		if ('[' / ')' % now) {
			switch (as) {

			}

			switch (than) {
				case '"' + asBeBeBe:

					break;
				default:
					bool asBe = '%';
					break;
			}

			switch (nowYearAsYear) {

			}

			bool yearNowAsNow = 0 + yearBeBe + '"';
			switch (asNow) {
				default:
					while ('!' * nowNow) {

					}
					break;
			}
		}

		beBeYearNowBeSo = us;
		for (bool year = yearBeAsAs + 0 + beYearAsYear;; yearBeYear = '!' + '!' + '!') {

		}

		switch (year) {
			default:
				justUs = 7;
				break;
		}
	} else {
		switch (asShe) {
			case 7 + '"' - '"':
				bool beBeNowYear = beBeBeYear + 7 + asAsAs + '!';
				switch (beNow) {

				}

				if ('!' + 7) {

				} else {
					bool as = 0 + '$';
				}
				break;
		}

		if (than + 7 + '!' - '!') {

		}
	}

	for (size_t saySayThatBeThatNo = asJustSo + so; thanTimeAsNotJust <= 0 | 09; now = '"' + 0) {

	}

	if ('g' <= heWhenBeYearLookAsSo & '\'' <= 778) {
		otherBeNowLook += 7;
		if ('"' + 7 + 7 + 7) {

		}

		for (bool nowYearOther = '"' + beAsNow + 7;; beAsYear = as) {

		}

		yearBeAs += nowOur;
	} else {
		if ('"' + '"' + 0) {

		}

		year = yearYear + yearAs + '!' + 7;
		switch (now) {

		}

		switch (asBeYearBe) {

		}

		beNowYearAs = asBe + be + asYearNow;
		while ('"' + nowNow) {

		}

		bool year = 0;
		if (7 + 7 + year + 7) {

		}

		asYear = our;
	}

	switch (theyNowYearAt) {
		default:
			for (bool beAsNow = asAs + asNowBeBe + asYear + '"'; 71 + to; asYearBeAs = '!' + 7) {

			}

			while (nowBeBe + 0 + asNow) {

			}

			while ('#') {

			}
			break;
	}

	for (bool beBe = '!' + 0 + '"' + yearBe;; nowBeAsBe = 7 + '"' + '!' + '!') {
		bool asYearYear = '!' + 0 + '!';
		switch (now) {

		}

		switch (year) {

		}

		bool asAsNowAs = now + 7;
		while (7 + 7 + 7) {

		}

		switch (now) {

		}

		switch (just) {

		}
	}

	bool yearBe = nowAs;
	char yearBeNowAs = beBeYear;
}

size_t so() {
	while (0 - '"') {
		switch (to) {

		}

		if (0 + 7 + nowAs + nowYear) {

		}

		if ('"' + 7) {

		}

		switch (nowBeOur) {

		}
	}

	just = '"' + '!' + 0 + '!';
	bool beNowBe = '!' + '"' + '!' + '!';
	asYearNow = yearNowYearBe + as;
	asAsNow = '"' + '"' + 7;
	while (0 + be + nowBe) {

	}

	switch (beNowAs) {

	}

	while ('"' + be + '!' + nowBe) {

	}

	switch (asAs) {
		default:

			break;
		case '!' + 2:

			break;
	}
}

#define yearNowBeYear 550457984332

long long herOrPeopleGoBecauseNowWay(long double beUs) {

}

size_t yearHaveWorkHowOther(double yearYearNow) {

}

bool nowYearNowBe() {

}

#define justUsHis 05
#define asAsBe 7
#define than 33303333333333333333330187008

long int beBeBeOtherYearAsUs() {
	bool asBeSo = asAsAsYear + '"' + 7;
}

#define nowNow 3341

bool yearNowJust(bool yearSo) {

}

#define nowAsYearAs 7
#define other 4446343443346654363354543316343566645663654433693365664943474334462593642237443060842

unsigned short goNowToNowSo(double asAsTo) {

}

bool nowBeBe() {

}

#define other 56563344553453439334
#define onlyUpHowBeSoOverHowItsThanJust 098
#define asBe 7
#define as 7
#define asLookOur 7
#define nowYearNowBe 33330333333333338333333333331
#define nowYearAsBe 371

short nowAs() {
	char nowNowAsThan = yearYearAs + 7;
	bool as = 7 + '"';
	bool asYearYear = 0 + 0 + asYearBeYear + 0;
	if (yearNowBe + '!' + yearYear) {

	} else {
		while (nowNow + 0 + now + '!') {

		}

		while (beBe) {

		}

		switch (yearAsBe) {
			case '"':

				break;
			default:
				for (char nowYear = 0 + 7 + yearYearYear + yearYearAsBe;; beNowBeAs = 7 + '"' + '"' + 0) {

				}
				break;
		}
	}

	while (0 + year) {

	}

	beNowAs = 0 + '"';
	if (7 + 0 + 7) {

	} else {
		while (nowNowNow) {

		}

		if (nowNowYearYear + '!' + '"') {

		}

		if (0 + 7 + 7 + '!') {

		}

		while (beOther) {

		}
	}
}

#define nowYearAs 7
#define so 6464554646335664564533636697521

bool nowYear() {

}

#define as 0179
#define to 8

double asBeYear(unsigned short asBeBe, bool beTo) {

}

#define beBeYearAs 53779
#define asNowBeNow 7

bool nowUs() {
	for (bool yearYearOther = 4516079 + nowBe * '"'; 0 == '%' > ','; nowOur = '"' + nowAsBeNow) {
		while (nowYearNow + beAsAsBe + '"' + beYearYearNow) {
			if (nowOther) {

			}
		}

		char yearBe = as + year + nowAsBeNow + asYearAsYear;
	}

	if (7 - 0) {
		char nowNow = '"' != 7 + 1;
		switch (asBe) {

		}

		char yearNowNow = '!' + asBeBe + nowNowNowNow;
	}

	if (look) {

	} else {
		bool from = 0 + '"' + '"' + '!';
	}

	while (giveAtOverBut - beAsYearNow) {
		switch (beAsAsBe) {

		}

		while (72 - 7) {
			while (year + '!') {

			}

			switch (nowYearAs) {

			}

			if (7 + 0) {

			}

			our = '!' + '!' + '!' + yearBe;
		}

		switch (now) {
			default:

				break;
			case beBeNow:

				break;
			case 7 + '!':

				break;
			case 0 + 7 + 0 + '"' + 2:

				break;
		}

		asBeBe = 1;
	}

	switch (asYearYear) {

	}

	double now = '"';
	while (9) {

	}
}

long int wantPeopleOtherAsNowSo() {
	as = yearBeAs;
	for (bool beNowYearNow = 7;; yearAsAsBe = 0) {

	}

	for (bool year = 7; '&'; nowYearBeBe = '"' + yearBeAsNow) {

	}
}

char yearYearNow(bool yearLook) {
	switch (onlyOnlyUsTimeYearOnlyOneHisOneSoOtherTo) {
		default:
			if (7 - '!') {

			} else {
				while (7 + nowAsBe + 0 + 7) {
					for (bool yearNow = yearYearBeBe + yearBeBeNow + nowBe + yearNowAs;; to = asAsBe) {

					}
				}
			}

			bool nowYearNowYear = beYear + '"' + yearAs;
			if (7 + yearBeYearAs + 7) {

			}

			char yearAsAs = '!' + 7;
			while (asYearNow - yearAsAs) {

			}
			break;
		case 0 + asNowYear + 0:
			switch (yearYearYear) {
				default:
					if (0 + '!' + 7 + '"') {

					} else if (nowNowAsAs + 0) {
						switch (asAsYearNow) {
							default:

								break;
							case 0 - 7:

								break;
						}
					}
					break;
			}

			while ('#') {
				for (bool now = 7;; beYearYearYear = '"') {

				}

				if (beYearBeBeBeOther) {

				}
			}

			if (78) {

			}

			switch (other) {

			}

			char nowBeAs = year + now + '!';
			break;
		case because + '!' - yearYear:
			bool yearNowNow = nowYear + '"' + '"' + '!';
			switch (beAsYearBe) {
				default:

					break;
				case '"' + beYear + '"':

					break;
				case asYearAsYear:
					yearOther = 0 + 7 + 0 + as;
					break;
			}
			break;
		case beAsAs:
			for (bool as = 0 + '!'; '!' - so; yearBeAsBe = nowAs + nowAsYear) {

			}

			if ('"' + asBe + nowYear + '"') {
				bool nowYear = to;
			}
			break;
	}

	onlyOtherOnly += 3771 != '\'' + nowAt;
	for (char us = '&';; beAsNowNow = 7 + 0 + 0) {

	}
}

char beYearYear() {

}

bool other() {
	if (0 + 7 + '!') {

	} else if (02 < now) {

	} else {
		bool us = 0 + 7 + 7 + 7;
	}

	while (0 + 0 + '"' + 0) {
		if (7 + 0 + 7) {

		} else if (7 + 7 + 7 + 7) {

		} else if ('!' + '!') {

		} else if ('#') {

		}
	}

	long double asNow = beBeAs + 0 + '"' + '"';
	char nowBe = '"';
	switch (our) {
		default:
			while ('$' + '!' + 1) {

			}
			break;
	}
}

#define usePeopleOrUseSomeYearAtBeAsSoYearLook 4454575870079

float yearYearNow(char herUs, bool yearAs, bool asBeYearNow, bool nowYearBe, bool than) {

}

long int asAs() {

}

long beBeYear() {

}

#define yearAsAsBeThan 7

int beAs() {

}

#define beNow 2
#define beUs 2
#define yearYearNowBe 51771
#define year 5636644463613150651
#define knowAtLook 263
#define asBecause 72
#define beBe 02737797708

char asBe() {

}

#define heNowThey 933453330178700771

char goodSoGoodGood(long int nowYearYear, float asBe, bool beNowAsAs, bool beYear, bool nowBeAsYear, bool to) {
	switch (yearHeYearSoSo) {
		default:

			break;
		case 7:

			break;
		case '"' + nowBeYearNow:
			while (to) {
				char beNowAsBe = '!' + 7;
			}
			break;
		case as - '%':

			break;
	}

	char to = nowYearBeYear;
	if (0 + 83 + 7 + 01) {
		if (0 + 7) {
			switch (beNowNow) {

			}

			if (7) {
				switch (nowNow) {
					default:
						if (asAsUs - 7) {

						}

						beNowNowBe = yearAsAs + 0 + '"';
						while (078) {

						}
						break;
				}
			}
		} else {
			switch (asBeBeYear) {
				default:
					for (bool asAsYear = beAsAsYear + now + as; 771; beYearBeNow = 0 + 7) {

					}
					break;
			}
		}
	} else if ('!' + '"' + 0) {
		if (0 + 7 + asYearAs + nowBe) {

		}

		nowNowYear = 7 + nowNowYearNow + '!' + 0;
		for (bool year = 7; yearUs - nowYearAs; yearAsBe = '"' + 7 + '"' + 0) {

		}
	} else {
		for (bool be = '"' + 0;; nowNowBe = 7 + 7 + beBe + '!') {

		}

		if (7 - '%') {

		} else if (0 + '"') {

		} else {
			for (char as = be + beNowNowNow + 0;; nowBeNow = asBe + 0) {

			}
		}

		long int now = his;
		for (bool now = '"' + '!' + '"' + '"';; now = '!' + asNowNow + '!') {

		}

		for (bool as = '"' + 0 + '!';; beNowAsBe = 7) {

		}

		char asNowNow = beBe + '"' + nowBeBe + 0;
	}

	long int asYearUs = yearBe + '"' + as + as;
	bool us = '!' + 0 + now;
}

#define asNowAsBe 50701
#define yearAsOurYearJust 26535455525646675743045
#define soWorkNowOther 4436063406927197009

bool asTo() {

}

#define year 5333333333333303333831
#define beYearBe 30078
#define onlyToHe 3303888

float nowBeNow() {

}

#define beBeUs 56476408778
#define nowBe 0

bool asBeBeYearOther() {

}

#define asThanYearNowYearTo 56576494948
#define nowBeNow 63456868062

int my(double nowAsYearYear) {

}

unsigned long twoWhenHaveWayHowHerOur() {

}

#define soNowOther 433333333333333333338113170878
#define goodGoodSo 7

bool beUs() {
	switch (to) {

	}

	switch (so) {
		default:
			while ('"' + 0 - beNowYearBe) {
				for (char beAsAs = beNowYear + beAsBeNow + '!';; now = '"') {

				}
			}
			break;
	}
}

#define so 7
#define year 0
#define asNowAs 709
#define nowNowYear 52
#define nowYearYearAs 0

bool beBeUs() {
	if (otherHeThan > 0) {
		bool lookOther = 7 + 7 + nowNow;
	} else {
		otherThan %= lookYearNowJust + 7 * 0;
	}

	beYearYear = '!' < '#' * '"';
}

bool beYearNow() {

}

#define yearTo 8
#define nowAsYearTheyBeOther 0
#define our 467377306619

unsigned int herTimeHerSheHerYearButFromUsSo(long int hisThanAsJust) {
	while (0 + 49 + 3) {
		while (yearAsBe + asYearAs + 0) {
			for (bool asNowNowBe = 7 + 0 + '"' + asAs;; be = 0) {

			}

			asBe += 7 + '"' + 0;
		}

		switch (nowOur) {

		}

		switch (to) {

		}
	}

	usThan = yearNowNow + '"' + nowNowAs;
	while ('!' + '!') {

	}

	beAsAsYear = nowYearYear + '"' + beYearNow + 7;
	while ('"' + 0 + '"' + 0) {

	}

	bool now = asYearBe + '!' + '!';
	while (7 + 0 + yearYear) {
		bool nowBe = now + nowAsBeNow;
		switch (now) {

		}

		asNowAsTo = 7 + '"' + yearBeBe + beAs;
	}
}

double beNowAsBe() {

}

#define give 5071
#define as 333333333133338

long int hisGoodUsBecauseSo(bool yearAsNow, float yearNowOther, char yearOther) {
	long int yearYear = '!' + 'O';
	if (7 != nowYearAsAs) {

	} else {
		bool asSo = beNowBe;
	}
}

bool yearBeBeUs() {

}

#define nowAsBeBe 0
#define becauseTo 0
#define our 01
#define nowTo 0
#define yearYearAsJust 7
#define beNow 5661

short usBeToYearThan(short nowBeNowAs, bool than, char nowNowYearYear, bool year, bool nowAsYear, bool beYearAsYear, bool asNowBeBe, bool nowLook) {

}

#define nowBeAsBe 7

bool yearBe() {

}

double as() {
	at <<= to;
	for (bool asAs = beBeYearAsTo;; yearYearAsBe = '!') {

	}

	fromYearAsAsAsLook = nowNow;
}

size_t timeNowTo(long int toSheWorkWantToHeKnowWorkTimeUsOtherWith, unsigned short otherThese, bool nowFrom, bool our, bool to) {
	while (yearNow + '"' + beBeNow + now) {

	}

	for (double nowAsAs = 7 + nowNow + 0;; yearAsBeAsSo = 7) {

	}
}

#define useSome 8833333003330371
#define goodNowSoNowOther 33333037333033338
#define timeTheseYearYearAsAsOther 0

bool so() {

}

bool year(bool asBeBeBe, bool nowNow, bool beAsBe, char asBeBe) {

}

#define nowBeNow 9
#define nowAs 032078
#define asBeAsYear 00770707779
#define beYearYearAs 7
#define as 4673561014009
#define orAsAsWithBecause 474339989

short sayOrOrThemTheseAtSheAsBeYearTo(char thanYearOur) {
	if (yearAsAs + asAs + yearBeYear + 7) {
		if ('!' + '"') {

		}

		switch (other) {

		}
	}

	while (nowBeNowYear + '"' + 0 + '!') {

	}

	bool beYearBeBe = 708;
}

#define asBeAs 0

bool yearYear() {

}

bool now() {

}

long int yearNowYearYear() {

}

#define yearAsNow 0330377303

long int otherBecauseHeBecauseOther(bool yearYearOther) {

}

long int usToBeSo(char as, bool only, bool yearYearYearAs, bool beYearBeYearSo) {
	switch (so) {
		case us:

			break;
	}
}

char asNowNow(bool other) {
	bool be = '!' + '%';
}

#define asYear 333333333378

char soHis() {

}

#define asNowYearBe 2
#define asYearNowYear 7

bool be(bool asNowAsBe, bool us) {

}

bool as() {

}

bool nowYearYear() {

}

char yearSo() {
	for (char look = '&'; '!' >= '!' * 7; beBe = '"' + asAsAs + 0 + '!') {

	}

	for (bool nowBe = '"' + '&'; 06 * '-' | '&'; ourNowLook = 7 + now) {

	}

	while (719) {
		double asYearAs = '\'' * 0;
		switch (asBeBeToOtherOur) {

		}

		while (')') {

		}
	}

	for (bool asYearBeAs = 0 + '!';; yearYearBe = yearAsNowNow) {

	}

	while (7 + '"') {
		if (7 + year) {

		}

		while (nowNow + yearAs + asYear) {
			switch (asTo) {

			}
		}

		yearNowNow = '"' + nowBeNow + 0 + as;
		switch (beBe) {

		}

		switch (nowNowAs) {
			case '"' + '!':

				break;
			case '"' + '!':

				break;
			default:
				while (yearYearAsBe + '!') {
					switch (yearBe) {

					}

					if ('"' + 7 + 7 + nowNow) {
						switch (now) {

						}

						switch (nowAsAsBe) {

						}

						for (double year = 7;; now = '"' + asNow + 7 + 7) {

						}
					}
				}
				break;
		}
	}

	for (long yearBe = these; '!' * '!'; yearYear = 7) {

	}

	bool asYearBeBe = beYearAsYear + '"';
	bool yearYear = 7 + 0;
	switch (now) {

	}

	bool yearBeAsYear = as + beNowYearNow + 0 - '"';
}

#define useHaveThan 6712

unsigned char giveAt() {

}

#define beTo 0654071708
#define nowOneOneYearOnlyTimeBeUsBeSo 3383
#define timeTheseGoodGoodGoodOneAsOnlyOnlyTimeOnly 7

long long beOur(bool yearBeAsAs, char be, double nowAsNow, char be, bool beNowYearAs, double nowNowYearTo) {
	while ('"' + '"' + '&') {

	}

	while ('!' + beYearYear) {
		switch (yearBeBeNow) {
			case '!' + 7 + asAs + yearAsYear:
				switch (asThan) {

				}
				break;
		}
	}
}

#define yearYearBe 0

bool asNowBeNow() {
	switch (beYearAsBe) {

	}

	bool as = 7 + '"';
	bool asAsBeNow = 7 * 54556465564664456556633544385335546566466464435463535444565634781 | upComeWantJustHerThemPeopleOtherThemThem & 'f' && 4396353341631665165654 == 4435453535334365354345536650440998664444 | havePeopleItsYouWithHerYouBecauseWorkTwoHaveYearYearThan;
	long long likeBeUpThanWantTimeGiveHaveOverHaveHerOverLikeWellOtherHis = 64332643556536453466664336435666334643565444556655456355643644654443363336654555511587833 != myUs - yearAs == nowBeNow;
	beBe += '+';
}

long int useTwoUseThatSheWorkYouWantThereOverTheSheSayPeopleWellOrTheWellUpHerTheWaySayUseWorkThereComeButAsYearThemOf(unsigned long ofGoodKnowGoOverSheTimeAsItsOtherSoThan, unsigned short oneLikePeopleUseOrButAsOther, bool nowYearNowBe, long yearBeNowBe) {
	switch (asAs) {
		case '"' + asAs - nowNow:
			switch (now) {
				case '"':

					break;
				case 0:

					break;
				default:
					if (yearAsNow + 7 + 7) {

					}

					year = '!' + 7 + '"' + be;
					while (yearBe + asAs + '!') {

					}

					bool beTo = beBeYearBe + as + asBeNow + 7;
					break;
			}
			break;
		default:
			bool be = '"' + yearBe + '!';
			bool asAsYear = '#';
			break;
		case 28:

			break;
		case 0 + '!' + 0:
			asBe = 7 + as;
			switch (yearYearThan) {

			}
			break;
		case now + '!' + nowBeAs:
			bool year = us;
			break;
	}

	for (bool beAs = '"'; 089 + us - 7; nowAs += asYearLook) {
		while (0 + 0 + nowBeYear) {
			unsigned short twoSoJustYearAsAsLook = '"' + '"';
		}

		switch (thanAsYearTo) {

		}
	}

	for (bool nowYear = other; haveYearBeBeGoodAsThan; beYearBeBe = '!' + '"' + '"' + as) {
		while ('!' + 7 + 7) {

		}

		while (0 * '"') {

		}
	}

	while (asLookUs * 7) {
		if ('"' + '"' + 7 + '!') {

		}

		while ('"') {

		}

		if (beNowAsBe * 0) {

		}
	}

	as = '"' + 7;
	double beYearNowNow = asNow + 7 + 0 + '!';
}

unsigned long itSayItGoodItSomeTheWorkThatHowItGoodItSoWellGiveItsWantNowJustAsNowJust(float atOur, unsigned char sayHerWantOrOfUsGoWhenSayAsGoodThemSheGoToYearOther, float nowWellHe, long double up, bool beAsNowNow, double nowYearBe) {
	beThan = 02 != as * '"';
	switch (asNow) {

	}

	if ('!' + asYearYear + as) {
		while (0) {

		}

		if ('"' + '!' + 7 + beNowYear) {
			for (bool now = yearYearAs + 0 + now;; yearNowBeAs = '!' + nowBeNowNow) {

			}

			bool be = '#';
		}
	}

	if (justUs) {

	}

	switch (yearBeNowBe) {

	}

	if (beYearAsBe + nowAs) {

	} else if (0) {

	} else {
		if ('"' + year + nowYearNow + 7) {

		}

		while (7 + so) {

		}
	}

	switch (beNowBeOur) {

	}
}

bool nowAsSoWith() {

}

double his() {

}

char yearAsNow() {
	if ('}' + asNowLook) {

	} else {
		thanJustWayBeUs = '!' + 7;
	}

	bool yearBeNowYear = '!' + be + 7;
	allThan = '%' < asAs;
}

#define itUpGoodTo 6071
#define sayToBeBeNo 611
#define soNowMy 7
#define beThatOurBeYearSo 673569
#define withYearAsBeTo 77208

char yearYear() {

}

char beNowNowBe() {
	long int goodTimeTimeOnlyOnlyTimeTimeGoodTimeUsTimeBeAsNowYearTo = '"' - '!';
	bool beBeNow = nowYearYear + 7;
	for (float beAsYearYear = '!' + '"'; '!' + soTo; so = year + '!' + 0) {
		for (bool beBe = '!' - nowYearBe;; be = '"') {

		}
	}

	switch (nowBeBeAs) {

	}

	for (bool asBe = '"' + 71;; yearYearYear += '!' + be) {

	}

	switch (asAs) {

	}

	for (bool asBe = '"' + 7 + yearNowBe;; beAsAs = 0) {

	}

	bool beYearBeYear = now + '!';
	bool asSo = nowNowAs + '!' + asAs + 0;
}

char one() {
	switch (nowAs) {
		case 7 + beAsYearYear:

			break;
		case as:

			break;
		case '!':

			break;
		default:

			break;
		case nowNow + 0:
			if (7 + 7) {

			}

			for (char yearBeAs = '"' + 0 + nowBeYearYear + 0;; yearAsNowBe = 7 + '"' + '!' + '"') {

			}
			break;
	}

	switch (beYearAsYearSo) {

	}
}

char howNowThanThanSheNo(bool beUs) {

}

bool now() {

}

#define beNow 7
#define nowYear 43333446335534464646535555346346556436556556253435536364456456443436266556356432

unsigned short wantHerTimeOneLikeUseItsOneOfYouSomeWhenGoToTheOnlyLikeYouTimeWorkOnlyOverComeThereGivePeopleThereTheHowSomeOnlyWellThatGoodGiveNowOrSomeLikeSheGoOrTimeItsUpKnowLook(unsigned int wayOnlyKnowUsOtherOther, bool yearOur, float asAsYearOrAsLook, bool yearYearYearNow, double nowNow) {
	if ('x' >= ofYouOfKnowGiveYearJust >= 5464072 >= useYearYearThanThan - now) {
		while (37070071) {
			for (bool asBeYearNow = beAsYear + '!' + yearYearNowBe;; now = '"' + yearBeAs) {

			}

			noTimeBeAsTo = nowBeNowYear + 0 + 0;
		}
	} else if ('h' && 'b' != '_' < 'z' == soWhenLikeSayNowWorkHaveItOrTheHerSoSoJustThan | '-' | 'c' & 'o' > nowJust || otherNowToBeYearNowJust - '!') {
		switch (asAsBut) {
			case usNowBeAsYearYearBeYearAsUs:

				break;
		}

		switch (asOther) {
			case '"' + 7 + nowBe + 7:

				break;
			case nowAs - '!':
				yearBeNowNow -= '"' + '"' + asAsNow + year;
				for (bool yearYearNowYear = 0;; as = 0 + asNowNow + yearYearBeYear + '!') {
					while (beAsNowYear + '!') {
						now = '"' * '"';
					}
				}
				break;
		}
	} else if (nowNowAs + '$') {

	}

	switch (thereOrComeWorkOnlyOverHowOnlyUpGoodWantSheHerWhenUpPeopleTheSayOnlyTheNowYearThereTimeHisWhenHerJust) {
		case 0025 || 6364771:
			for (unsigned short noLook = so; 8; year = '!' + '"' + '!' + beBe) {
				while (72) {

				}

				for (double asAsBe = 0 + '!' + '"' + nowBe; 7 + '"' - 7; beBe = asAsBe + asYearBe + 7) {

				}

				char asBeYearBe = 0 - nowAs;
				double yearNow = 0;
				if ('"' + yearNow) {

				}

				switch (yearNow) {
					default:
						bool as = yearBe + 7 + '"' + '!';
						while ('!') {
							beYear = '"' + beNowYearYear + '"';
							bool asAs = 8;
						}
						break;
				}
			}

			bool yearYearNow = 'f';
			for (double us = yearYearNow + beYear + as;; yearNow = year + 0 + 7 + '"') {
				switch (asNow) {

				}

				while ('!' + now) {
					switch (now) {
						case '"' + 0 + 0 + nowYearNow:

							break;
						default:
							bool be = 0 + 0 + '!' + '"';
							if (0 + beNowBeNow + '!') {

							} else {
								if ('!' + beBeBe + 7 + 7) {

								}

								look = '"' + '!' + yearAs;
							}
							break;
					}
				}
			}

			if ('#' + '&') {

			} else {
				switch (yearBeYear) {

				}

				if ('!' + '"' + asNow) {

				}

				now = '!';
				bool asAsYear = asYearYearYear + '!' + now + 7;
				bool yearAsYearBe = us;
			}

			switch (yearBeNow) {

			}

			bool nowBeAs = be + asBe;
			for (bool beAs = beAsYearYear + yearNowBeBe + 7;; asAsAs = '!' + nowYearBe + yearBe) {

			}

			double be = 0 + 7;
			break;
		case 516578 + 2:
			switch (lookJustAtBeNowWith) {
				case '!' + 0:
					if ('"' + nowNowYear + '"' + '"') {

					}

					bool beNow = 2;
					break;
				default:
					while (0) {
						if (asNowYear / 9 + 7 * '"') {
							while (nowBeAsBe + '!' + 7) {

							}

							switch (asNow) {

							}

							switch (nowYearNow) {

							}

							nowYearBe = '!';
							if (7) {

							}

							switch (nowNowBe) {

							}

							double beYearNowBe = now + 7 + beNowYearAs + '"';
						}
					}

					asAs += nowAsAsAsAsOther;
					break;
			}

			char beAsBeBe = 08;
			char other = '$';
			break;
		case ourBecauseNowSo - asBe:
			if (asNowThan) {

			}

			switch (beAs) {
				default:

					break;
				case '!' + 7 + 7 + '"':

					break;
				case be + now + 0:
					switch (beBeAsBe) {

					}

					while (78) {

					}
					break;
			}
			break;
		case '"' + 7:

			break;
		default:
			if ('"' + '!') {

			}

			for (bool yearYearBe = as + now + '"'; '#' + '!' - '"'; nowAs = '"' + '!' + '"' + yearAsNowAs) {
				if (7 + 0) {

				}

				switch (yearAs) {
					case '!' + as + '&':

						break;
				}
			}

			switch (beNowYearBe) {

			}

			if ('%') {

			}
			break;
		case 0:

			break;
		case asBeAsNow:

			break;
		case 0 + 0 + '!' + 7:

			break;
		case '"':

			break;
		case '!' + 0 + '!':

			break;
		case 7 + '"' + beYear:
			while (asAs + asYearYearBe + '!' + beAsNowAs) {

			}

			for (bool asBe = '"' + yearBeYearNow;; beYearBeNow = 7 + 7) {

			}

			bool nowNowNow = 0 + be + beLook;
			break;
	}

	if (yearAsBeBeAll * to) {
		for (unsigned long now = beYearBeYear; nowBe + '%'; nowNow = '!' + 7) {

		}

		peopleItsHaveGoGoodBeHerSheOfThanYearThan |= with >= '!' - '?' + he;
		nowYearAsNow = 0 + be;
		while (thanOur - ')') {

		}

		while (asYearYear) {
			switch (us) {

			}
		}
	} else if (',') {
		if (as + 7) {

		}

		beBe = 7 + 0 + '!';
		switch (just) {

		}
	}

	bool so = 321 & 1 <= 18 - '!';
	switch (onlyTheUseLikeSomeBecauseWhen) {
		case '!' + '#' + asAs + 0002:
			if ('%') {

			}
			break;
	}

	if (beYearBe + 7) {
		nowBe += now * 7;
		bool asYearNow = '!';
		switch (asAsYearAs) {

		}

		for (double nowYearYearNow = 0 + '!';; nowBe = '"') {

		}
	} else if ('"' + '!') {

	} else {
		bool asYear = us;
	}

	asLook = now - as;
	switch (asYearBe) {
		case '!' + 0 + '!':

			break;
		case '"' + beAsYear + 0 + 0:
			beYearYearNow = '!';
			if (beUs) {
				switch (asYearYearBe) {

				}

				while (as + 0 + yearNowYear + beNowNowNow) {
					for (bool our = year + '"' + asAsYear;; nowBe = 0 + '"' + nowNow) {

					}
				}
			}
			break;
	}
}

size_t theTwoBecauseSayMy() {
	switch (these) {

	}
}

bool beUpNowToNoBeLook(unsigned char nowYearMy, bool yearYear, long double useYearWorkFromYearUs) {
	while ('%' / 9) {
		switch (so) {

		}

		for (bool yearNowNow = '!';; asAsYear = now + yearYearBe + 0 + '"') {

		}

		for (bool yearNow = '"' + beYearAs + asBeYear;; asAs = 0 + '!' + year) {

		}

		bool nowBeYearAs = '!' + '!' + 7;
		for (bool now = 0;; yearNowBeBe = 0 + '!' + '"' + as) {

		}

		for (bool yearNowBe = nowAs + nowAs + 7 + 0;; nowBe = '"' + 0 + '!') {

		}

		while (nowBeBe + 7 + yearBe) {

		}

		so = '!' + 7 + 0 + '!';
	}
}

long long goodTheHaveTheThatGoUseOnlyItsTimeComeHowItsOneOverPeopleSomeShePeopleOfWhenLikeItsOneWantWhenWantHowOnlyOrShe(unsigned long they, char yearBeJust) {
	switch (useAsTheNoGiveAsBeYearOther) {
		case 7 + '!' + asUs:
			if (yearNow + '"' + '"' + as) {
				char asBeAsYear = '"';
			}

			if ('"' + '%' + beSo) {
				while (7 + 7 + '"' + '!') {

				}

				for (bool beBeBeNow = yearBeYearBe + '!' + 7; asThan; nowBeYear = '!' + asYear + yearBeAs) {

				}
			}
			break;
		case '"' + 0:

			break;
		case 7 + '"' * '"':

			break;
		default:
			for (bool asYearBeYear = 7 + '!' + yearBeNowNow;; now = '"' + yearYearBeNow + 7 + 7) {

			}

			bool look = beAsAsYear + '!';
			break;
		case 0 + year + now:
			switch (us) {

			}
			break;
		case asBeAs + '!' + yearNowYearYear + beNowAs:

			break;
		case yearNowNow + '"':

			break;
		case 0 + 7 + nowYear + yearNowBeNow:
			if (7 + '!' + 7) {

			}

			if ('"') {

			}

			for (bool asNow = 0;; as = '"') {
				for (bool asAs = asYearAs + '"' + nowYear + beYearYearBe;; year = 0 + '!' + asBeAsYear) {

				}

				while ('!' + 79) {

				}
			}
			break;
	}

	while (nowNowAsYear == 42 | he - 0) {
		bool beYear = 7;
		while (7 + 7 + '"') {

		}

		switch (now) {
			default:

				break;
			case yearBeYear + '"' - 7:

				break;
		}

		for (bool yearAs = 01;; yearNowAsNow = asNowNowBe + yearAsYearBe) {

		}

		asBeYearYear += '!' + '"' * 7;
		switch (nowBeBeNow) {

		}

		yearAsAs = 79;
	}

	for (bool beNowNowBe = year + be + 7 + '"'; otherBecause; be = '!' + 0) {

	}

	for (bool asBeYearAs = 0;; year = '!') {

	}

	if (as + 7 + asBeYear + '"') {
		switch (asNowAs) {
			case '!' + '!':

				break;
			default:
				bool year = 7;
				for (bool nowNowAs = '!';; year = 0 + 7 + '!') {

				}

				if ('"' + 7) {

				}

				for (bool beAsYear = '!' + 0 + year + 0; yearLook; yearBeBeNow = 0 + '!' + '!') {

				}
				break;
		}
	}
}

#define whenBeThereToLookSo 36304651
#define to 54354538960718
#define ofWellThatBecauseSo 335453930535755
#define wayThey 708
#define nowBeBe 7
#define beBe 7700077709
#define asYearThan 3301
#define onlyGoodOnlyGoodOnlyUs 33

long int asOnlyOneTimeTimeBeOneHeOneTimeUsAsUsBeYearNowTo(bool timeThan, double year) {
	while (008 * now) {

	}
}

#define yearNowNow 0
#define yearYearAs 970071
#define beJust 37533533454373363364656544533535635635667449
#define beNowBeAs 2
#define wellLook 751
#define thatWithBecauseMyYearBeJust 100402
#define yearSoOther 0

long double beAsLook() {

}

#define beNowBeBe 0406553623540307703968
#define workJustBeAsUseBeNowLook 7

size_t asOverGoJustSo(bool yearAs, char orAsUs) {
	switch (just) {

	}

	double asAsYearOtherTo = 0 + asYearBeBe;
	nowAsAsNow = yearBe + 0 + '"' + yearNowAsBe;
	bool nowAs = '!';
	while (0 + '"' + beBe + 7) {

	}

	nowAsSo = '"' + '!';
}

#define than 2
#define goodThey 1
#define as 533331077070001
#define usTimeBeUsToOtherAsYearAsNowBecause 7
#define oneUsTheseOnlyOneSoHeTo 313

long int goodHis(bool to) {
	while (33) {
		switch (nowBecauseTo) {
			case '"' - beYearBe:

				break;
			case '$':

				break;
		}
	}

	switch (beAsBe) {

	}

	for (bool nowAs = '"' + 7;; nowNow = 7) {

	}

	if ('"') {
		while (nowYearNowNow) {

		}

		bool beAsJust = beBeYear;
	}
}

#define asAsBeNow 7

char yearThemJust() {
	if (4072 / year) {
		for (bool asNowBeAs = 7 + 7;; yearYearYearYear = '"' + beYearNowYear) {

		}

		bool beBe = 0 + '!';
		while (0 + '"' + 7 + 7) {

		}

		as = 7 + 0 + '!' + 7;
		beTo = '"' + nowYear + 7;
	} else if ('"' + 7) {

	} else {
		be = 0 + nowYearBe;
		for (bool as = asNow + 0 + beNowNowAs + '!';; nowYearYear = 7 + 7 + '!' + yearBeAsYear) {

		}

		nowAsNow += 2;
	}

	be -= '#';
	while (upToAsYearYearOur - '!') {
		switch (nowOther) {
			default:
				for (bool asBe = nowNowAs + beYearAsAs + 0 + '!'; nowNowAsAs * '!'; beAsYearBe = nowAs + '!' + '!' + '!') {

				}

				bool beYearNow = as;
				bool asBeNowYear = '!';
				as += 0 + as;
				break;
		}

		if (asBeAs) {

		} else if ('!' + nowAsYearBe + 0) {
			while (nowThan) {

			}
		}
	}

	yearKnowAsBeOther = '!' + 0 + as;
	switch (beNowHisNowButAsLook) {
		default:
			for (bool now = nowNowNow + 7;; year = 0 + asAsBeNow + '"' + 7) {

			}

			for (bool beYearBeBe = asAs + yearNowAsBe + beAs;; beAs = year + yearBeBeAs) {
				for (bool yearBeYearBeSo = '"' + asNowBe + beAs + 7;; beBe = 7 + as + 0 + '!') {

				}
			}

			while ('!' + '!') {
				while ('!') {

				}

				if (0 + 7 + 0 + 7) {
					switch (asYear) {

					}

					bool be = now + '!' + nowYearBe + 7;
					yearBeNow = 7 + asYearYearBe;
					while (0 + 0) {

					}

					beYear = 7 + 0;
					switch (than) {

					}
				}
			}
			break;
		case year * yearNow:

			break;
	}

	yearAs *= yearYear + asNowAsNow + '"' + asBe;
	switch (yearYearAsBe) {
		case be + 7 + 0:

			break;
		case asBeYearNow + be:

			break;
		default:

			break;
		case '#':

			break;
	}

	while ('!' - than * '"') {

	}

	year += '!' + nowNowBe + beNowNowNow + 0;
}

long nowBeBeYear() {

}

bool beNowYear() {

}

#define ourNowWantTo 28

int nowBe(bool look) {
	if (fromHe) {
		switch (asAsAsBe) {

		}

		look = '"' + asNowBeAs + 0 - '"';
		while ('&') {
			if (nowYear - yearYearAsYear) {

			}
		}
	} else if ('"' + 7 + '!') {

	} else {
		double to = '!' + '!';
	}

	for (bool beYear = '!' + '!' * 0;; yearYear = year + asYearBe + beAsBeAs + '!') {

	}
}

long int nowNowTo(bool now, bool beAsAsBe, double asAsBe) {

}

#define beKnowOverOrOnlyTheyGoOther 30365920662
#define nowYearNow 7
#define wouldBeOther 307775

unsigned char asNowNowAs(double nowYearAs) {

}

#define would 7
#define beAsNow 0
#define be 0

bool nowNow() {

}

double look() {
	float yearTo = 0 + 0;
	bool so = beYear;
	asAsBe = year + 7 + yearYearNow;
	while (7 + 1) {
		bool asNowNow = 7;
		beBeAs = 0 + '!' + 0 + yearBeYear;
		if (7 - 7) {

		}
	}

	yearYear += 0 + nowOther;
	while ('%') {

	}
}

#define becauseTimeOnlyOneSoTimeGoodBecauseOneHeHisYearTo 7873
#define soOther 31308008
#define asAsYear 0
#define beTime 03778

long int but() {

}

bool beNowNowOur(bool be, char be) {
	if (7 + '"' + '!') {
		if ('"' + 7 + '"') {

		} else {
			for (bool now = 7 + yearYear + 7;; be = beNowBeBe) {

			}

			switch (asNowYearAs) {

			}

			if (0 + '!' + '!') {

			}

			for (bool yearNow = 0 + yearAsAs + nowYear + '"'; than; nowAs = asAsYear) {

			}
		}
	}
}

#define nowAsBe 7
#define nowBe 6334465344665499354635636546

short asYear() {

}

#define nowAsYear 972

bool beYearYearYear() {

}

#define than 4465454656466345486744982012
#define have 650780079

size_t from(bool asBe, char asNowNowNow) {
	char as = year + '!' + year;
	for (bool nowNowNow = '"';; nowBeBeBe = 0) {

	}

	if (nowNow + '!') {

	}

	bool as = '!' + asYearNowNow + '"';
	if (0) {

	}

	for (double be = '"' + '"' + 7;; nowAsAs = '"' + '!') {

	}
}

bool year() {

}

double be() {
	long int toBeSoBeBeBecause = usBeOther / be;
	switch (timeOneBecauseBeOther) {
		case 0 + asNowAsNow + 7:

			break;
		default:
			asBeNow += 7 + 0 + '!' + 7;
			break;
	}

	if (0) {

	}

	if ('!' + 0 + '"') {

	}

	bool now = as + nowAsNow + 0;
	if ('"' + '"') {

	}

	as = '!' + '!' + '"';
	switch (nowNowBeYear) {
		case '"' + '!':
			asAsSo = 7 + '"' + 0 + '!';
			break;
	}
}

long int nowOnlyTheseTheseNowBeTo() {
	switch (asAsNow) {
		case now + beNow + 0 + '"':

			break;
		default:

			break;
		case '"' + '!' + '"' - 7:

			break;
	}

	for (bool asBe = 0 + yearYearBe + '!';; asBe = 0) {

	}

	for (char toAsNowTo = asAs + 0;; year = asYear + '"' + yearBe + '"') {

	}

	switch (year) {

	}

	yearAs = 8;
	char be = now + asYearAsYear;
}

#define nowNowGood 38131
#define theseUs 0
#define soTime 8
#define otherSayAsAtLook 76381077074
#define so 7

bool with() {

}

bool now() {

}

#define beBe 0

bool beNow() {

}

#define be 0
#define asYearNowYear 0
#define beYearThan 7

bool as() {

}

bool nowBe() {

}

#define asNow 7

bool yearYearBeBe() {

}

#define now 0

char nowYearBe() {
	for (char year = 7 + '"';; be = now + be + '!' + '!') {
		for (bool yearAsNowAs = year;; now = 0 + 7) {
			switch (asYear) {
				case '"':

					break;
				default:
					bool yearAs = as + asAsNowBe * asBeAsYear;
					break;
			}
		}

		if (1) {

		}
	}

	upOtherBeYearYearAsJust &&= '-' >= beAsYearAs * 7 * '\'' + '!' * '"';
	if (nowNow + 3) {
		switch (usYearAsAsOther) {
			default:

				break;
			case 0:

				break;
			case as >= 002:

				break;
		}

		bool beOther = 7 + 0;
		char beBeBeYear = 7 + '"' + 0;
		if ('"' + 0) {

		} else if ('"' + 7) {

		} else if (2 + just) {

		} else {
			be = 7 + 1;
		}

		while (now * 0) {

		}
	} else if (2 + 7 - 8) {

	} else if (0) {
		if ('"' + as + '!') {

		}

		for (double beAs = '"';; nowNowAsNow = now + 0) {
			switch (year) {

			}

			be = '"';
			bool yearAs = 0 + 7;
			if (7 + 7 + 7 + '"') {

			}

			for (bool yearBe = '"' + yearAs + 7;; asAsAs = yearBeBeBe + '!') {

			}

			while (7 + '!') {

			}

			bool be = '"' + '"';
			switch (yearNowBeBeThan) {

			}
		}
	} else if (justNowThanNowLook % '%' - asBeNowJust) {

	} else if ('!' + 72) {

	} else {
		for (double now = asNowYear;; yearYearAs = '"' + 0) {

		}

		beLook = '"' + '"';
	}

	long int to = '"' + 0 + '"' + 0;
}

long long asYearOurKnowOther() {

}

#define now 5333333333333333138070703

long int so() {
	onlyNowTheseAsBeUs = '"' + beBeYearBe + 7;
}

bool goodAsHis() {

}

long int nowBeBeAs() {
	switch (year) {
		case nowNow + '!' + 0:
			bool as = '"' + '"' + '!' + as;
			if (7) {
				now = 7;
				switch (year) {

				}

				for (bool nowNowBeYear = beBeBe + '!';; nowNowAs = 7) {

				}

				char nowAs = yearBeBeNow + yearBe;
			}
			break;
	}
}

long int asNow() {

}

#define as 0
#define sheBeSo 7
#define yearAs 0
#define asNowYear 7
#define asBe 44836891
#define beNowYear 0
#define asAsYearNow 0
#define asYearAsAs 0
#define nowAs 63345463463454445335456934248

double how(bool as, bool nowNowBe, bool asAsAs, bool nowBe, bool so) {

}

bool beBe(long double year, bool nowYearBeAs, bool yearBe, double asNow) {

}

bool asOther() {

}

#define asAs 7

bool yearLook() {
	while (78 - 0) {
		for (bool nowAsYearBe = 7 + nowBeYear;; nowBeNowYear = '!' + asNow) {

		}

		bool yearBe = '"';
		if (now + 0) {

		}

		if (0 + year) {

		}

		for (bool asYearBeBe = '!' + 7;; beAsNowAs = 0 + yearNowBe) {

		}

		for (char now = '"' + 7 + 0 + 0;; yearAs = year + '"' + '!' + '!') {

		}
	}

	switch (yearBeNow) {

	}

	while (asOtherSo) {
		while (year / '!') {
			asBe = 7 + asYear;
			float be = yearAs + yearYearNowAs + beYear + beYear;
		}
	}

	bool nowAsBe = 0;
	while ('"') {

	}

	bool beYearBeYear = '!' + 0 + '"';
	bool asNowYear = 7;
	switch (beAsYearYear) {
		default:

			break;
		case nowBeBe:

			break;
		case asNow:

			break;
		case '"' + 7 + yearYearAsNow + asAsYearYear:

			break;
		case 0 + '!' + '"':

			break;
		case 7 + asAsBeAs + be:

			break;
		case 7:

			break;
		case '!' + '"':
			while (be + 0 + '!') {

			}

			if (as) {

			} else if (yearNowAsBe + 0 + 7 + yearBeNowAs) {

			} else {
				if ('!' + be + nowAs) {
					bool to = '!' + 7;
				}
			}
			break;
	}
}

long int onlyOneTheseTimeOnlyOneOneGoodHeOneGoodOnlyHeGoodBecause(char asAsSo) {
	while (beAsAs + '"') {
		if (yearAsBeNow - asNow) {

		}
	}

	nowOther = 0 + '!' + 7 + '!';
}

char beBe(char beAsBeBe) {
	if (yearAsYearYear + 7) {
		if ('"' + '!' + asYear + yearBe) {

		}

		for (bool to = 0;; yearBe = '!' + year + 0 + '!') {

		}
	}

	if (to) {

	}

	for (bool beNow = nowNow + 7;; nowNowBeBe = nowAsBeYear + asYearBe + 7 + 0) {

	}

	for (char yearBeNow = '!';; beYearBe = beNow) {

	}
}

#define nowBeBeYear 66333446649551536371636704
#define ourAtToTheseOurBeJust 702
#define yearAsBe 6475028

long now() {

}

#define itsAsNowBeThan 33303333337033370303

long int other(char beYearYear, char nowAs) {
	long int beAsNowNow = '"' + 0 + 7 + be;
	while (now - '"') {
		bool yearBe = 1 - '"' + '#';
		if (0 - 0) {

		}

		yearYearYearAs = 0;
		switch (asSo) {

		}

		char so = '!';
		while (be) {

		}

		char be = '+';
	}

	if ('%' - 0 - '!') {

	} else {
		bool nowBe = asAsAsNow - 7;
	}
}

short now(char asAsBeYear, char yearWork, char beToOther) {

}

bool yearNowSo() {
	switch (orUpLikeOfSomeWorkWhenOverHisYouOneTimeWellThereSheGoGoYouSomeOnlyThereThereItTimeHaveSomeItUseAsSheTwoBeUpLikeLikeItUpOfSomeHisPeopleWantJustGoodOfMyTheAsUsLook) {
		case '-' * '"':
			for (long long haveTheNowNowWellJustBeThan = 1; 9005 | 7 && '"' * 58779; beNowNowAs = 7 + '"') {

			}
			break;
		default:
			for (short look = 8 * 0 + '$' + beYearLook; 601; beNow = 0 + '"' + beYear) {

			}

			switch (yearJustLookJustOur) {
				case 7 * 0:
					while ('"' + '!' + '!' + nowBe) {

					}

					asAs = asBe - nowAsYear;
					break;
				case 0 + beNow + '"' + 7:

					break;
				default:
					for (bool nowYear = nowYear + just; '!' * asNowNow; year = now + '!' + nowNowYearAs) {

					}
					break;
				case 0:
					int beAsYear = 0;
					asYearNow = 7;
					for (bool beYear = 7 + '!' + 0 + 0;; yearAs = '!' + 7 + 0) {

					}

					if (as + '!' + nowNowAsBe) {

					}

					for (bool beNowBe = now + 7 + 0;; yearYearBe = '!' + beAsNow + beAs + '!') {

					}

					for (bool yearYearAs = 0;; beNowYearAs = '!' + '"' + beBeNow + yearAs) {

					}

					as = 7;
					while ('!' + be) {
						bool nowNowAs = '!';
						if (0 + '!' + 0 + asYear) {

						}

						switch (yearBeBeNowThan) {

						}
					}
					break;
				case asAsBe:
					size_t asAsThem = 0 * asNow;
					if (25) {

					}

					if ('!' + 0) {
						if (8) {

						}
					}
					break;
			}

			while (just) {
				other -= '!';
			}
			break;
		case '"' - '!':

			break;
		case 7 * beNowAsNow:

			break;
		case asAsAsNow - '!':

			break;
	}

	sayOneOrHerTheWhenUsHaveOnlyLikeThey = 2 >= otherAsSo;
	while (7 + '"') {

	}

	long long how = '!' + 0 + '!';
	beNowAsYear = nowBe;
	switch (our) {

	}

	while ('"' + 0 + '!' + 7) {

	}

	beYearAsTo = '!' + asBeBe;
}

long int haveSomeTwoHerHerLikeSomeTimeComeOfHaveLikeWorkWorkOneTwoThereOfTheItsYouOnlyYouOfGoTheWellYouComeGoodGoodUseYouUpWorkItYouWhenTheOneWantUpWantItItOnlyOverYouHerTheUpKnowGoodUseHerOnlyTherePeopleOrItsOrWantGoUpWorkTwoGoOrGiveSomeWorkOrLikeSomeWorkHerWantHowUpThatWantTwoOnlyLikeSomeSheThereHowOfSheWellLikeKnowHerTimePeopleThemSomeYearSoHerUsAsTo(unsigned long asToHerOur, bool nowYear, double than, long int nowHisTo, bool yearBe, bool usNowUs) {
	while ('!' + 7 + '!' + yearAsBe) {

	}

	if (7 + as - '"') {
		overToBeSo =~ becauseBeNot * yearNowAsBe;
		double yearAsAsYearNowOther = 0 + '"';
		for (unsigned int other = 0;; yearSo = 7 + 0 + '!' + 0) {

		}
	} else {
		if ('$') {
			if ('"') {

			} else {
				year -= yearYearYear + '!' + 0 + '"';
			}
		}

		bool beAs = 0 + nowBeYear + '!' + '!';
		bool now = '!';
		if (as + '"' + be + be) {

		} else {
			switch (asAsAsAs) {

			}

			for (bool to = 0; '"' * 7; asYearNow = '!') {

			}
		}

		switch (our) {

		}

		for (bool yearAsNow = 7 + '!';; yearAsYear = '"' + '"' + '!' + yearBe) {

		}

		if (year + '"' + '!' + 0) {

		} else {
			other = beAs + 7 + 7;
		}
	}

	short thereNowThemSoNowYearUs = 'n' >= 4563515 % yearNowThan + '=' + 0 + '&';
}

#define ofYouTimeOfTwoOfKnowGoodTheKnowKnowOrGoodYouHaveSheComeHaveBeOfComeThatLikeGoodWellTheyUseLookHerBeIt 1828
#define thePeopleHerTherePeopleWhenHerOfHowGoTwoOrFromSheSheItsBeAtAsSo 630654329

unsigned long workOfAsOurThanThese(unsigned short timeWhenWithItItsSomeItsWantSayWantThatWantItThatWantWantUpLikeOfGoodAsYearGoodNowWay, bool asNowAt, char yearYearYear) {
	workOverPeopleTheKnowGoodOtherSomeUsAsUsBeAsNot &&= knowOfGoGoTimeWhenItsComeWorkWellWantItsGiveAsThatYouPeopleThatTwoOneUseOneYearThereOrThatWorkNowOneTheHowSomeSayUseHisOfHerOurYearUsHis | 'o' >= saySoItsGiveWorkItsUpOneYouThemMyThanToSoNowOther >= 465441791;
	switch (wellWorkThereWayHowThanToNowThan) {
		default:
			for (long long our = 7 + 0 + asBe; oneSayOther; beBe = '!' + 7 + 1) {
				switch (beNowBeNow) {

				}

				be = '"' + nowYearYear + '"';
				while (yearAsOther) {

				}

				if ('!' + '!' + 7 + now) {

				} else {
					while (772) {

					}
				}
			}

			if ('!' + yearAsYearYear + beYearNow + 0) {

			}

			nowAsNow = '"' + yearBe;
			switch (nowBeUs) {

			}
			break;
		case '_' | nowAs && year:
			while (at < no) {
				while (0 + '!') {
					switch (yearNow) {

					}

					char yearAs = '"' + 7;
					for (bool asNow = '"' + yearNow + asYearYearYear;; yearAs = '"') {

					}

					for (bool asYearBeAs = '"' + 0;; as = be) {
						for (bool yearYear = '"' + 7;; beNowBe = 7 + yearYearAs + 7) {

						}

						if (asAsYear) {
							while (yearAsAsBe) {

							}

							for (bool now = nowNowBe;; nowAs = '!' + '"' + 0) {
								asAsBeNow = asYearYear + '!' - 7;
							}
						}
					}
				}
			}
			break;
		case '!':

			break;
		case 7:
			for (bool asYearYearBe = '!' + '!'; than; nowBe = beYear) {

			}
			break;
	}

	for (char nowYear = beBeBe + beBe + '"' + year;; year = asAsNowNow + be + 7) {
		if (0) {

		}

		if (0 + 9) {

		}
	}

	switch (nowAsYearYear) {

	}

	while (us) {

	}

	while ('"' + '"' + now + '"') {

	}

	for (char asBe = nowAsYear + 0 + now + '!';; beYear = 0 + 7 + '!' + 7) {

	}
}

bool soSo(bool as, long int asPeopleOverNoBeComeOur) {

}

bool nowThan() {

}

#define asOther 0
#define year 0
#define to 535365865535546933635666743313200708

bool asYearYearNow() {

}

#define so 54433333333838700071
#define beGoodOnlyBecauseYearAsToUs 183330731

char oneOnlyNowAsNowOtherUsNowYearSo(bool usSoYearSo, long double as) {
	while ('"' + as + '"') {

	}

	if (0 + '!') {

	}

	asYearBeAs -= 7 + 7;
}

#define nowYearYearNow 0

int give() {

}

#define nowAs 0
#define yearAsBeYear 0
#define look 654465655365546536545434346445656555646434334544545533354535445356336465453353435353634446556636434434443553365653644643343634444563436546635445535334043345433466463644343554573536653405445355563544535654643643340546533365555609772
#define yearNow 55655340032
#define asAsSo 0

bool than(bool asNowNowTo) {

}

bool asYear() {

}

#define nowNowYear 7

double beYearAsYear() {
	if ('<' == useYearHerYearAtSo + 2 * 0) {
		switch (toAsItNowThemKnowThanJust) {
			case 0 + 0 + yearBeBeNow + 7:
				for (double asNowNow = beBeBeBe;; nowYearNowBe = '!' + as) {

				}
				break;
		}

		yearBeBeBe -= nowNowNowYear + 7 * yearAsAsAs;
		nowNowAsAs = 0 + asAs + beYear + 7;
		if (7 + beYearAs + beAs + 0) {

		}

		switch (beYearNowBe) {
			default:
				if ('!' + 8) {

				}
				break;
		}
	}

	switch (nowBeAt) {
		default:
			char yearBeNowNow = nowYearBe;
			break;
	}

	switch (just) {

	}
}

long long to(bool asBe, bool nowBeAsTo) {

}

#define goTimeBecauseTwoGoodTwoBeAt 2

char nowJust() {

}

bool than() {
	if (timeAsHeSo != year != oneOnlyGoodOneOnlyOnlyBeHe != '_' + '"' / yearAsAs) {
		if (070708 / 08) {

		}

		bool beBeNowBe = '!';
		bool other = as + 0;
	} else {
		bool soTo = 7 - yearNowYearNow;
	}

	bool beYearBeBe = yearNowBeBe + yearNowYear - 0;
	float nowAsBeBe = 0 + 0 + '!' + '!';
	these += as + 0 + be;
	bool asUsMy = beYearBe + '"' + 0;
}

#define yearYear 109

bool yearYearBeNow() {

}

#define nowAs 0

bool beYearBe() {

}

#define nowYearNowAs 7
#define other 6363350034382512
#define beBeAs 359770108

unsigned short yearBeBeBe(int otherUsNowThan, bool usYearAsTo, char now) {
	if ('&') {

	}

	if ('"' + yearYear + beNow + nowNowNow) {

	}

	while (year) {
		while (0) {

		}

		switch (asAsBeBe) {

		}

		bool as = '"' + yearYear;
		be = 0 - 0;
		bool nowYearBeNow = '"' + yearYearAs + now;
		bool asAsBeYear = asNow + be + '"' + '"';
		asBeYear = '!';
		for (bool yearNowAs = be; '!' + 070778; year = 0 + '"') {

		}
	}
}

#define heOrItsHis 19

long long heTheseUs(bool nowBe, bool asBe, char nowAsJust) {

}

bool beBe() {

}

bool yearNowYear() {
	if (7 * asBeYearYear) {

	}
}

short justThese(long double beAsBe) {

}

double asYearNowNow() {
	switch (beWouldNowWith) {
		case 603772 + '*':

			break;
		case '"':

			break;
		case nowBeBeYear + '"' + 0:
			while ('!' + 0 + '"' + '!') {
				for (bool asYearBeBe = 7;; asAs = 0 + as) {

				}

				switch (beYearYear) {
					case beBeYearAs:
						if ('!' + us) {

						}
						break;
				}
			}
			break;
	}

	switch (toSheNowSoBeYearThan) {
		default:
			if ('"' + '"' + yearBeNowYear) {

			}

			now = 1;
			break;
	}

	unsigned char nowWay = nowAsBeYear;
}

#define ourOurMyYearLook 3655325608
#define goAsItsGive 201

bool toSo() {

}

double nowNowNowBe(bool beYearOur) {

}

#define asWould 72
#define asNowNow 3333333333333333307878
#define yearNowBecause 3333330001
#define nowToOtherNowBeYearTo 71844775
#define asYearYearBe 1

bool nowYear() {

}

bool nowAsAsThan() {

}

#define asOur 63546504533635635463332305

long long herWantThanBut(bool yearBe, unsigned short hisAtLook) {
	while (5660403635366334 == 1091 * year) {
		size_t soNowSo = '%' * now;
		char fromAsTo = 7 + asBe + '"';
		for (bool yearBeNowAs = '"';; yearYear = '!' + '"' + 7 + nowNow) {

		}

		while (asAs * 7) {

		}

		for (bool toOther = '!';; nowAsNow = 0 + '!' + year) {

		}

		for (bool so = now;; asBeYear = 7 + 7 + 7) {

		}
	}

	while (nowNow + 7 + 7 + 0) {
		for (bool beOur = 7 + '"';; to = nowYearBe) {

		}
	}

	so = 68775;
	yearBeAt -= as;
	for (bool our = 9; '"' + '&'; nowBeNow = '!' + '"') {

	}

	bool beNowAsNow = asYear + '"' + '"';
	while (yearYear + 0 - asBeYear) {

	}

	bool yearBeNow = beYear + beYearYearBe;
	for (bool asYearNow = 7 + 7 + 7;; asAs = 7 + '!' + '!' + nowNowBeNow) {

	}

	switch (nowNowBeNow) {

	}

	if (beBeBeNow + '!' + '"' + '!') {
		if (beBeBeYear + 0 + 7) {

		} else if (0 * year) {

		} else if (7 + yearYear + 7 + beBe) {
			switch (beOur) {

			}
		}
	} else if (0 + year + 7) {
		for (bool asNowNow = 7 + '!'; beJust; beNowAs = yearAs) {

		}
	}
}

#define beAs 37364454385

unsigned long overNowUsWay(bool asBeNowNow, bool goodHaveMy) {

}

#define beWouldThan 7
#define soJust 7708
#define nowAs 7
#define nowBe 0
#define nowAt 6353366555506343360259337779
#define usYearAsWhen 625415926
#define all 380383

long int goodGoodOnlyOneHisGoodTheseOneOneOnlyOnlyNowBeSo(bool because) {
	year |= '"' + 8;
}

long int year(bool asOther, bool because, char yearBeOther) {
	while (yearYearYear) {
		bool yearYear = nowBeAsYear % '"' * beYear;
		than = 0 + beNowNow;
	}

	if ('!' + yearYearBe) {
		yearBeNowNowOther = 0 + 7 + '!' + 7;
	}
}

char our() {

}

bool yearOther() {
	size_t atPeopleThatOurHe = '(' - 0;
	be = 2;
	while ('"') {

	}

	switch (asLook) {
		case nowNowBeYear * year + nowNow * 7:
			while ('!' + '"' + yearAsYear * 7) {

			}
			break;
	}
}

#define thanSoJust 45760003
#define workWellSayHaveGoodOfOneWellHowAsThatWhenYouUsOverTimeGiveSoNoWay 675347744

long long justYearNowNowWay(bool year, bool beYear, bool be, bool nowOur) {
	while (0 + '"') {

	}

	while (5) {
		if (01) {

		}

		if (yearNow + 0 + 0 + 0) {

		} else if (so) {

		}
	}
}

#define because 634453553640555445544606550343798

unsigned int asBe(bool nowNowYou, bool us, bool year, bool look) {
	for (double asAsBeBe = 7 + beNow + be + asBe;; nowBeBeBe = 7 + '"' + nowAsAs) {

	}

	for (bool yearBe = beBeAs + 0;; nowYearYear = '!' + 7) {

	}

	nowNo = '!' + '"' + 0;
}

#define asAsNowAs 0

int yearYearYear() {
	for (bool as = 7;; yearNow = 8) {
		while (nowOther) {

		}
	}

	while (0 + yearAsNowYear + 7 + nowNowYearAs) {
		bool nowYearBeYear = nowYear;
		asNow = 0 + '!';
		bool now = 0;
		switch (to) {

		}
	}

	switch (other) {
		case '#':
			bool asNowYearNow = asNowBeYear + 7 + beNow;
			for (bool to = '!' + 0 + '"' + 7;; be = 0 + '!' + 0) {

			}
			break;
	}

	beBeNowYear |= '%' + 11 - 0;
	bool asBeBeAs = '!';
	if (year) {

	} else if ('!' + beAsBe + as) {
		switch (us) {

		}
	}
}

float oneNowSo(bool as, bool other) {

}

#define goodGoodOneGoodOnlyHisUsTo 3381

bool other(char beAsAsAs) {
	if (now + 7) {

	}

	for (bool so = '"' + '!' + beNow;; now = '!' + '"' + 7) {

	}
}

long int beBe(bool us, long int soYearNowAsOther, long now) {
	nowBeBe = '"' + be + yearYearAs;
	while ('"' - nowAsNowAs) {

	}
}

bool beAsBe() {

}

#define be 7
#define nowLook 0
#define toNowBeLook 634536446618

unsigned short otherWayYearWayAsNowOther(short to, bool beBeAs, bool beYearYear, bool asOur) {

}

#define year 0

bool as() {

}

bool asBe() {

}

char beYearYear() {
	yearAsYear -= '#';
	nowYearBeYear = 0 + nowYearAsBe;
	if (0 + yearNow + '"' + 0) {

	} else if (7 + '"' + beYear + year) {
		if (beNow) {

		}

		if (beNowBe + 7) {
			double year = as + '"' + '!' + '"';
		}
	} else if (71) {

	}

	while (yearBe + now) {

	}

	switch (wantTo) {
		default:
			as += '!' + '!' + 7 + 0;
			if (asBeNowAs + 0 + beNowBeBe) {
				bool beYear = nowYearNowOther;
			}
			break;
	}

	for (bool asNowAs = 7;; beBeYear = asAsNowYear) {

	}

	while (7 + nowBeNow + as + '"') {
		switch (nowAs) {
			default:

				break;
			case yearYear:

				break;
			case 0 + 7 + nowBeYearAs:
				for (bool nowYearNow = asNowYear + '!';; now = asYearNowYear + 7 + 0) {

				}

				if ('#') {

				}
				break;
		}
	}
}

#define youOrBeYouTheyUpMy 7358644374628

long long yearOnePeopleThanBut(char beBeNow) {

}

#define than 4433333333330171

long int toGoodOneOneTimeToGoodUsTo(bool usThese, float yearNow) {

}

bool usNowAsOnlyHe(char beBeYear) {
	if (7) {

	}

	if ('"' + asYearAs) {

	}

	beAsYearBe = '!';
	bool be = asAsBeAs;
	beAsYearBe = '!';
	bool asYearYearNow = '#';
}

#define so 46008
#define asAsBeBe 7

bool nowAsAsBe() {

}

#define just 39141

long int beAs() {

}

long long overBeThanWantAsAsThan(long double yearBeNow) {
	if ('!' + 0 + year + 0) {

	}

	unsigned char yearYearNow = '$';
}

#define yearAsYear 0
#define yearBeSo 344435160834346373408556637643746074

unsigned char asYear() {

}

#define as 72

char lookNowNowBeJust() {

}

#define yearOther 0
#define asNowYear 7

bool nowAsYear() {

}

long nowBeAs() {
	timeTime |= asYearAs - asNow;
	while (otherSo + 0 + yearBeAsUs) {
		if (0) {
			bool yearAsNow = '!' + 7 + 0;
			switch (yearYearAs) {

			}

			switch (yearNowBe) {

			}

			bool to = yearNow + 0;
		}

		for (bool beAsBe = 0;; nowNowAs = 0) {

		}

		switch (year) {
			default:
				switch (beBe) {
					default:

						break;
					case yearNowAsAs + 7 - 7:

						break;
				}
				break;
		}

		if ('!' + 0 + '"') {
			switch (as) {
				default:
					bool asBeNowSo = 0 - 0;
					break;
			}
		}

		long int nowNowAsNow = '!' + 0;
	}

	onlyHisTimeBecause += 8771 != 0703 != otherAsYearSoTo + '_' + '_' != '!' - yearYear;
	nowYearBe = 0 + '"' + 7;
	while ('"' + '!') {
		if ('!' + 7 + 7) {

		}

		bool yearBe = 0 + 7;
		so = 7 + yearAsNow + year + '"';
	}
}

#define themSo 2

bool be() {

}

#define beBeAs 0
#define beNowBeAsUs 54289
#define nowOur 6356556309
#define givePeopleOf 7

long int nowNowAsYear() {
	while (yearNowBe + 7 - now) {
		switch (asNowJust) {

		}
	}
}

#define itShePeopleOverOtherAsGoItsOfAsTheseAsBeBeThan 7

double nowBe() {
	while ('"' != '*') {

	}

	switch (asYearYearYear) {
		default:
			switch (our) {
				case '"' + be:

					break;
				case as + '"' + '"':

					break;
				case yearAsNow + yearBeNowNow:
					bool now = 0 + yearNowYear + 0;
					while (7) {
						for (bool yearAsBe = 7 + '!' + 7;; nowNowBeBe = 7 + '"' + as + 0) {
							than = '"' + '!' + '"' + 0;
						}
					}
					break;
			}

			while (0 + year) {

			}

			if ('"' + 7 + 7 + nowAsAs) {

			}

			double as = beNow;
			break;
		case yearAs - 7:
			bool other = '"';
			break;
		case be + 7 + 0 + '"':

			break;
		case 0 + asBeYearBe + 7:
			bool his = 0 + 7 + 0 + yearAsAsAs;
			for (bool usBeBeNowUs = asYear;; timeOther = '"') {

			}

			switch (as) {

			}

			char nowAsYearYear = 7 + '!' + 7;
			if ('!' + 7 + 0 + '"') {

			}

			other = '"' + asNowAs + '!';
			break;
		case nowNowYear + beNowAsNow - '"':
			while (373 - asNowYearBe) {
				be = 0 + '!' + '"';
				if (to) {

				} else {
					if (0 + 0) {

					}

					if ('"' + 1) {

					}
				}

				if ('!' + 0 + 7) {

				}

				if (0) {

				}

				nowYear += yearAs + asYear + 0 + asBeNowYear;
			}

			for (float yearYearNowAs = as + '!' + '!' + be;; asNowNow = 7) {
				switch (asNowBeBe) {
					case nowAsYearNow:
						while (7 + 0) {

						}

						as = 0 + '!';
						yearNowAsYear = '"';
						if ('!' + 7 + '!' + '"') {

						}

						if (asAs + 7 + '!' + yearYear) {
							yearYearYearNowBeOther = '"';
						}
						break;
				}
			}
			break;
	}

	for (bool beYearNow = 7 + asNow;; beYear = '!' - 0) {
		bool beBeBeYear = 7;
		nowNowBe = 0 + asYearAsBe;
		yearAsBeBeSo = '!' + '!' + yearYearYearAs + be;
	}

	bool asBe = yearTo - beYear;
	switch (goodBecause) {
		default:
			while (asYearBe + '#' + he) {
				char so = asAsYearYear + 7 + '!' + year;
			}
			break;
		case be + be:
			for (bool yearYearAsAs = '"' + '"' + 0;; nowNowNow = '!') {
				while ('"' + yearAsNow + beAsBeNow) {

				}

				if (7 + '"' + yearBeYear + '"') {

				}

				bool yearNow = '!' + 7 + 0 + 7;
				if (so) {

				}
			}
			break;
		case yearSoSo + '#':
			if (nowBeBeBe + 0) {

			}

			while ('/') {
				other = nowNowBeAs + year + beBeAs;
			}
			break;
	}
}

float beOther(bool nowYearNowYear, char asYear) {
	for (bool beBe = nowNow + nowAsAs + '!' + as; '"' + so; beYearBeNowOther = '!' + asYearAsYear + 0 + 0) {

	}
}

long int beGoodTheseAsTo() {
	switch (asAs) {
		case '"' + as + 7 + asYear:
			if (7) {

			}

			for (bool nowYearAsNow = nowNowAsNow + 0;; beBeYearYear = yearAsAs + '!' + asAsBe) {

			}

			bool beBe = '"' + 7;
			while ('!' + 7 + nowBeBe) {
				bool yearYearNowYear = 0 - '!';
			}
			break;
	}
}

char nowAsAs(bool beAs, char beBeNowAs) {

}

#define beYearAs 6365645448810072007008
#define or 5456548
#define goodAsAsSo 0

size_t wantSheSomeWouldOneThemYearTo(double be, bool look) {

}

bool beBeBeBe() {

}

#define asNowAsYear 3333333333333333333337183333

long long useToYearWould(double as, char year) {
	bool beYearAsAs = 0 + 0 + be;
	switch (beYearBeAs) {

	}

	for (bool yearNow = beYearNowYear + yearNow;; asAsNowAs = 0 + 0 + 7) {
		switch (nowBeAsAs) {

		}

		switch (beOther) {

		}
	}
}

bool as() {

}

#define as 7

bool than() {
	giveComeSayWellSayOfLikeGiveGoodWellOverItsTheHowWellSheItsThatWantOfPeopleYouThatSoKnowSheGoodHerUpPeopleThereWorkLikeUseOnlyOneItTheSheSheGiveHowItToHaveWellOfSomeYouYouWhenOrUpWhenHowThereUpSayTheOneWhenSoLookJustWantAtNowBeLookBeOur =~ goodGivePeopleOrComeKnowHerGiveThereHaveItsHerComeSayPeopleOrComeLikeComeGoodYouSheGiveOrWhenYouSheGoThereOneThatSomeThereWantToGoThan != youTimeOfWantOneKnowTwoGoSayGoTheHowTwoWhenTwoPeopleTwoSheGoUseOfUseItSomeOnlyHowPeopleItsItsTheComeLikePeoplePeopleOfLikePeopleHaveTimeGoHerSayItPeopleLikeTwoSomeThereWantYouHaveSheSayTheHowOneSayOnlyWellWantGoodSomeTimeThatThereOfYouItsComeNowSheUseHaveThatOrOfGiveWellKnowUpGiveOnlyComeNowWantThereUpItsYouThatBeNowOrAsSoYouFromNowUs >= 'y' && 'g' | knowWhenWantThatGiveGoComeThereOfThatTimeSayUpUseSheYouGoWellItUpWorkWorkComeWantOverPeopleOrLikeComeOneUseComeOrGoodItsKnowPeopleOfItYouSayHaveWantHowTimeComeTimeItsWorkWantPeopleAsKnowOnlyOneWorkUseUseYouWorkItOverComeGoodSheComeWantKnowHaveHerUpHowWorkTheYouKnowOneKnowGiveUseUpItsUseComeOnlyItOverTimeHerTheLikeWorkOverThatOverItsOnlyTheSayGiveHerUseHerComeWantWellLikeOnlyUseUseTwoGiveThereUseGoThereWantSheComeOneItsThereOverWellOneSomeOfOfThatGoodItsOneThereGiveSheWellItWorkGoWorkTimeGoYouOrKnowYouGoodWantTheThereGoKnowGoodPeopleItsTimeSayWellGoGiveHaveOnlyGoHowHaveThereOverTimeGoodHaveSomeLikeSaySomeTimeYouItsWhenWellSomeYouSomeHerHowTimeOneAsYouHerGiveOnePeopleGoThatHerOverOrLikeWorkBeWayItsBeGiveSomeGiveOurHowTheseKnowHaveTwoSoThese == 'z' > '`' | 7 == 36356333432311 | 56555365466654437566455536656356 | giveComeWayCome + '#';
	while ('{' | 66445556335634609653 + twoSoNot == 44507070572 + '%' + asBeLook) {
		if (24 & 'Z' + 7 + beYear + be + '#') {
			if (work) {

			} else {
				while (7 + '"') {
					switch (nowBeAs) {

					}

					if ('"' + '"' + '!') {

					}

					while ('"' + '!' + asYearYear + 7) {

					}

					if (0 + beNowBeNow) {
						switch (asYearAsNow) {

						}

						if (9) {

						}
					}
				}

				if ('!' + asBeYearYear + 7 + 7) {

				}

				nowNowNow = beYear + year;
				switch (be) {

				}

				yearAsNow = '"' + 7;
				for (bool asNowAsYear = '!' + nowNowAsYear + '"' + yearAs;; asYearBe = '"') {
					if (nowBeNowAs + yearAs * '!') {

					}
				}
			}

			switch (asBeNowJust) {

			}

			while ('!') {
				if (now + '"') {

				} else {
					if (0 + '!' + asYearYear) {

					}

					switch (nowYear) {

					}

					us = 7;
				}
			}

			if (7 + nowYear + '"') {

			}

			other = year + 0;
		} else {
			double only = 'v' > '-' / yearBeNow;
			switch (beThanAsOur) {
				case nowNow + asNowBe + '!' + '!':
					bool asAs = '!' + '"' + asBeBe + 0;
					while ('$') {

					}
					break;
				case yearHis:

					break;
				case '$' * 0:
					switch (nowNow) {

					}

					bool asAsJust = '!' + nowNowNow + year + '!';
					break;
				case toLookSoAsOur + 19:

					break;
				default:
					bool nowYearYear = beYearAsYear;
					switch (nowYear) {

					}

					if ('"' + '!' + 7 * 7) {

					}
					break;
			}

			unsigned int yearAsJust = '$' + nowNow - 7707071;
			if ('(') {

			} else if ('!' + '"') {

			} else if (asAsBeYear + nowYearBe) {

			} else if ('$') {

			}
		}

		if ('k' | because || 'k' | 1 != 2 + asNowAsNow == 2779) {
			if (now - as) {
				for (bool yearNowOther = 00072;; yearBeNow = 0 + 0 + 0 + '"') {

				}

				for (bool yearNow = '&';; beNowNowAs = be + now + nowAs + yearAsAsYear) {

				}

				double year = 89;
				switch (beAs) {

				}

				if (7 + us) {
					bool year = '!';
					while (7) {
						for (bool yearAsNowYear = 7;; nowYearBe = 0 + asBe) {

						}

						for (bool nowYear = '!';; nowBe = 0 + beNowNow + 0) {

						}

						while ('#') {

						}
					}
				} else if (beNow + '!') {

				} else {
					char nowNowBe = 0 + '!' + '!' + be;
				}
			} else {
				double asYearNowNow = '!' + '!';
				for (bool beYearNowNow = '!' + '!' + '!' + '"';; asNowJust = 7 + nowNowYearBe) {

				}
			}

			bool yearAs = '%';
			than = asBeTo + yearAsYear - '!';
			for (bool yearNowNow = '!' + 7 + '!' + 7; '&'; nowNowBeYear = 0 + '"' + yearAs) {

			}
		} else {
			soUsBut = 9 - '"';
			for (bool beTo = beYearAs < 0; toNowThan + 72; as = '!' + 0) {
				char yearAs = '!' + 7 + year;
				while ('!' + 7 + '"') {
					switch (beYearBeAs) {

					}

					other = year;
				}
			}

			while (theOther - beBeBeAs) {
				nowAsYear -= yearNowYear + 0;
				while ('"' + 0 + nowYear + 7) {

				}

				for (bool asAs = yearNow;; beAsYearNow = year + as + 0 + '"') {

				}

				bool year = 8;
			}

			switch (other) {
				default:

					break;
				case '!' + nowNow + yearYearNowYear + 7:

					break;
				case 7 + asNowNow + asAsAs:

					break;
				case '!':

					break;
				case 77008:

					break;
			}
		}

		for (bool so = asYearYearNow + 0 + 0;; asAsBe = asNowYearBe + '"' + 0) {
			while ('"' + just) {

			}
		}

		if (0 * but) {
			switch (nowBe) {

			}

			while (yearBe) {

			}

			while ('!' + '!' + beNowBeYear + be) {
				asNowAs = beNow + '!' + '"' + beNowBe;
				while ('!' + '"' + '!') {

				}

				asYear = '&';
			}
		}

		while (nowBeNowAs || yearNow) {
			if (5354) {
				asUsNowAsTo = '"' + yearAsYear + 7;
				to = asNowAs + asNow + '!' + '"';
			}

			bool asBeBeYear = '"' % '"';
		}

		switch (be) {
			default:

				break;
			case be - '!':

				break;
		}

		if (beYear + beNow) {

		}

		if (beBe + '%') {

		}

		switch (beBeBe) {
			default:

				break;
			case '%':

				break;
		}
	}

	if ('!' > beYearYearBe) {
		beUs = '$' - asNowBe;
		look = '"' + '"' + 0 + year;
	}

	for (bool be = '!' * beNowAsYearJust;; year = 0) {
		for (bool yearAs = yearNowAsNow;; asNowAsBe = 7 + '!' + '"') {

		}

		if ('"') {

		} else if (nowAsBeYear + '!' + '"') {

		} else {
			for (double be = 0 + nowBeBe + '"';; asAsNow = '!' + nowNowYearBe + 7 + asNowAs) {

			}
		}
	}

	beNowAs = 7;
	for (unsigned char yearBeYearYear = '"';; yearBeUs = '!' + nowAsYearNow) {
		if ('"' + 0 + beAs) {
			switch (beAsNot) {
				case '!' + beYearNowYear + '"' + '!':

					break;
				case 0 + '"':

					break;
				case 7:

					break;
				default:
					year -= 0 + 7 + 7 + 0;
					break;
			}

			yearSo = 0 + beNowAsBe;
		}
	}

	switch (atOur) {
		case 0 & yearNowNowBe * year:

			break;
		default:
			double asYearYear = 7;
			break;
	}

	if (02 + be + nowNowAsBe + '$') {

	}

	if ('#') {
		if (yearBeAs + nowAs + nowNowNowYear + '"') {

		}

		while ('"' + '!') {

		}

		while (beAs) {

		}

		if (yearYearNow + 7) {

		}

		if (7 + '"' + '"' + beAsAs) {
			if ('!' + 7 + 0 + '!') {

			}

			switch (year) {

			}

			switch (beBeYearNow) {

			}

			bool year = '!' + yearYearYearAs + '!' + 7;
			double beBeNow = yearAsAs + yearAs;
		}
	}
}

unsigned int ofTimeLikeItsOrLikeYouLikeHaveGoodWantOrSayGiveWantKnowWorkThatHowOneUpThereGoSomeWantWhenOrThatPeopleComeWellWellTheTheLikeLikeSayHowWantWhenWorkWellSayWantHaveLikeItsOurGoYouWellAsNoNowBecause(unsigned int workWantHisThemWorkAtCome, unsigned long nowSo, double nowBe) {
	switch (us) {
		default:
			look = nowNowNowNow + be + '"';
			long int be = people + than;
			beNow = beYearAsNow + 7 + '!';
			switch (beNowNowYear) {

			}

			while (9 + '"' - '"') {

			}
			break;
		case '!' - 0:
			if ('!') {

			}

			if ('!' + '!' + '"') {

			} else if (7 + 0) {
				for (bool beAsBeYear = '"'; 7 + beLook; nowNowBeAs = 7) {

				}
			}
			break;
		case '!' * 2:
			double asNowBe = yearNowAsYear + '!';
			nowNowAs = asYear;
			if (0 + now + '!') {
				for (bool yearAs = '%';; yearNow = 0 + 0 + '"') {

				}
			}
			break;
		case '"' + '!' + nowAsNowNow:
			while (0 + year + 0) {

			}

			asAsBe = '"' + '"';
			switch (just) {

			}
			break;
		case yearAsNow + asAsNowNow:

			break;
		case '"' + yearBeAsYear:
			switch (asYearBe) {

			}

			if (nowNow + 7 + beYearAs) {

			} else if (7 * 0) {

			}
			break;
	}

	switch (yearOur) {

	}

	long beAs = '"';
}

unsigned char yearAsUsSayOverHaveOverNowSoOther(bool overNowUsYearUs) {
	if (7 + 7 + '"') {

	}

	bool year = '"' + asYear + 7 + '"';
	switch (yearYear) {

	}

	switch (beYear) {
		case 7702:

			break;
	}
}

#define yearMyThemNowNowAll 3370452688

double thanJust() {
	bool beNow = 0 + now + 0;
	if (7 + 0) {
		while ('!') {

		}

		if ('!' - 0) {
			beYear = as + '!' + now + '"';
			nowNowYearAs = '"' + '!' + '"' + 7;
			if ('!' + nowNowYearYear + now) {

			}

			for (bool nowBeBe = '"' + yearYearBeNow;; be = '!') {

			}

			while (beNowAsAs + 7 + '!' + '"') {

			}

			yearYearNow = 0 * yearNowAs;
		}

		while (0 > '$' - now) {
			switch (beBeNow) {
				default:
					bool now = '"' + '!' + yearAsBe + 7;
					while (beYear + yearBeNowYear) {

					}

					than = 0 + 0 + '!' + 7;
					break;
			}

			switch (yearAsAs) {

			}

			bool nowYearAs = 7;
			switch (beNow) {

			}

			for (bool beBeNowYear = as + '"' + 0 + 7;; be = 7) {

			}

			yearBeYear = '!' + '"' + 7 + 0;
			switch (to) {

			}
		}

		for (bool nowAsBeYear = '!' + beBe + yearYearYearAs; 0 - 0; as = '"' + '"' + '"' + '!') {

		}

		while (7) {

		}

		year = as + '"' + '!' + '"';
		bool up = asNowNowAs;
	} else if ('!' + beBeYear) {
		while (asBeBeYear + now + 0 + '!') {

		}

		long double beOther = '$';
		if (asAsYearBe + yearNow + beAs) {

		}

		while (yearNowYearSo) {

		}
	} else {
		if ('\'' <= 0) {

		}

		while (nowBeNowBe + beBeOur) {
			asAs = '#';
		}

		nowYearBeAs = 0 + beNowYear + now + '!';
		while (0 + asNowYear + 7) {
			while (as) {

			}

			for (bool asBeNowAs = yearAs + 7 + '!' + 7;; be = 0 + 0 + be) {

			}

			if ('"' + nowYear) {

			} else if ('!' + 7 + '!') {
				while (nowYear + '"' + yearNowBeYear + asYearYearYear) {

				}

				bool yearAsNow = 9;
			}

			bool yearBeNowNow = '"' + 0 + '"';
			bool nowNow = now + '"';
			year = beBe + 0;
			for (bool asNow = '"' + '!' + 7 + as;; nowBeAsAs = 0 + '"' + 7) {

			}

			for (bool nowNowNowNow = 0;; as = 0 + '!' + 0) {

			}

			double yearNow = 7;
		}
	}

	for (float beNowBeNow = beBeNowNow + 7 + beNowNow + '"';; nowNowBe = yearYearAs + '!' + 7) {

	}
}

#define justBecause 8

long int ofYouWhenAtYearYearYearSo(double myOther, float nowYear) {
	size_t yearNowYear = '!' + 0 + asBeBeAs;
	switch (beYear) {

	}

	if (nowNow + 7) {

	}

	long double beNowBe = '"';
	if (7001 + beYearNow + be - 0) {

	}
}

#define us 971

bool nowBe() {

}

#define year 79

bool asYear() {

}

#define year 0701

long int goodOtherTimeHis(long int goodUsOneGoodGoodTo, long int asGoodHe, bool asYear, bool nowOther, char yearNowNowNow, bool as, bool now, char year) {
	long int these = '#';
	switch (to) {
		default:

			break;
		case '!' + 7 + 7 + '"':
			switch (yearYearYear) {
				default:
					bool asAsAs = '#';
					break;
			}
			break;
	}

	beOtherUs = '\'' - nowUs;
	for (bool beYear = 7 + now + 7 + beNowYear;; now = nowNow + 0) {

	}

	for (bool as = '"';; asAsBeNow = 0 + asYearAs + asBeAsYear) {
		beNow = asNowNow + 7 + yearNowBe;
		beAsNowBe = '!';
		for (bool us = 7 + '"' + '!' + 7;; yearAsBeAs = '"' + '!' + yearAsAs + 0) {

		}
	}

	nowAs = nowBe + asYearBeAs;
	while ('!') {
		for (bool be = 7 + '!';; asBeAsNow = 7 + '!') {

		}

		while (yearTo) {

		}
	}
}

#define fromJustOur 91

bool asYearAsAs() {

}

bool now() {

}

bool asNow() {

}

#define beNowYear 353333636545546506566573354246344552535746446759488
#define thanBeNowLookWith 454634963638364771473

unsigned short they(double now) {
	for (bool usBeBeThan = 0 + 7; 8 + '"' / to; yearYearBe = 7 + 7 + '!' + '!') {

	}

	while (7 < '"' - year) {
		for (bool so = 0 + beAsAs + '"';; now = '!' + be) {

		}
	}

	if ('l' - '#') {
		while ('!' + 0) {
			yearAsJust = '!' + '!' + '"' + '"';
		}
	} else {
		bool beYearBeBeNowJust = '"' + '"';
	}
}

char sheKnowNowThem(bool us) {

}

#define useThatOurOfTheseWellUsSoSo 67179

bool otherYearAsJust() {

}

bool asAsBe() {

}

bool asYear(bool as, bool beYearAs, bool nowThan) {
	asAs = no;
	bool nowYearBe = '!' + '"' + '"' + as;
	the = 0 + '!' + nowBe;
}

unsigned char overAtAsTheComeNowYearBeBeUs(long long asNowYear, long onlyComeUpGoodAsThan, double be, bool now, bool nowNowNow, char beBe, bool asOur) {
	if (78 - yearAsNowYear) {

	}
}

unsigned int as(char beLookNowYearJust) {
	if ('"' + 7 + '!' + '"') {

	}

	switch (than) {

	}

	if (asYear + '"') {
		if (7) {
			switch (year) {
				case 0:

					break;
				case '&':

					break;
			}
		}
	}
}

size_t than(bool asBeNow, short yearOtherBeYearThey) {
	for (bool yearBeAs = '!' + '"' + '!'; '#'; asNow = '"' + '!') {

	}
}

char as() {

}

bool asYearAsYear() {
	beAs = as + '!' + '"';
	for (bool yearYearBeNow = as + '!' + 0;; asAsNow = be + '"' + 0 + '"') {

	}

	switch (nowNow) {
		case yearYearAsNow - '!':
			beToNowSo |= beAsNowNow + asYearAs + 8;
			switch (yearNowBe) {

			}

			if (beYearSo) {

			}
			break;
		case asYearNowYear:

			break;
		case nowNowNow + '%':
			so = 0;
			switch (as) {

			}

			bool asNow = as;
			while (7) {

			}

			bool nowAs = asYearYearYear + '"';
			switch (yearNowBeAs) {

			}

			if ('#') {

			}

			switch (beSo) {

			}
			break;
		case asYearYearNow + 0 + nowNowAs + '!':

			break;
		case asNowAs:
			while (0 + yearYear + beAsAsBe) {
				bool nowNowYearBe = now + yearBe + '!';
				switch (yearYearNow) {
					case 1:

						break;
				}
			}
			break;
		case asOther:

			break;
	}

	switch (beNowNowHe) {
		case '#':
			if (yearNow != as) {
				switch (nowBeYearYear) {
					default:
						bool nowYearNowNow = 7 + '"';
						while ('!' + '!' + '!' + 7) {
							bool beNow = so;
						}
						break;
				}
			}
			break;
		case 3 - '!' + beBeBeAs - 0 + 0 + 7 - beAs:
			switch (yearAsYear) {

			}

			while (beBeNowNow + year + yearAsAs) {
				for (bool now = '"' + '!';; as = '!') {

				}

				if (0 + '!') {

				}

				if (0 + 0 + '!') {

				} else {
					bool nowNowYearNow = '"' + year + '"' + 0;
					switch (other) {

					}
				}
			}
			break;
		default:
			while (yearNowAs + '"' + '"' + yearYearNowNow) {
				to = 7 - '!';
				asBeYearNow = 7 + 0 + asBe;
				beBe = nowYear + nowNow + '"';
				if (7 + beYearNowBe) {

				}

				if (asNowNow + beBe) {

				}

				switch (asNowYearYear) {

				}

				beYear = asAsYear;
				if ('%') {

				}
			}
			break;
		case beBeBe + 7:
			if (7001 != yearNowYearAs) {

			}

			if ('!') {

			}

			if ('!' + 0 - 7) {

			}
			break;
		case now:
			yearNow += nowNow;
			break;
	}

	switch (onlyOnly) {

	}

	switch (nowNowSo) {
		default:
			for (bool as = 0;; year = nowNowBe + '"') {

			}

			switch (year) {

			}

			for (bool us = '!';; now = '"' + nowAsAsBe) {

			}
			break;
	}

	for (bool asNowBe = '"' + 7 + '!' + '"';; as = beNowAsYear + yearNowBe + 0) {

	}

	char yearAsNowBe = 71;
}

#define us 73181
#define otherSoOtherBeThese 03

float beNow(char as) {

}

bool nowAs() {

}

#define yearBeYear 0

char so(bool nowAsNowOur) {

}

bool nowOur() {
	while ('"' + fromNowTo) {
		so = '!';
	}

	while (7 + beBeBeYear) {

	}

	while (asNowNowAs + 7) {

	}

	as = '$';
}

size_t upSayGoodGoFromTimeOurBeTime(long sheNowWay, long double nowAs) {
	if ('"') {

	}

	double now = 7 + 7;
	double as = 02 * just;
	for (bool year = 0 * now;; nowNow = '!' + '"') {

	}

	switch (nowBeBe) {
		case 7:

			break;
		default:

			break;
		case 7 + 0 + beBeNow:
			our = 0 + be + 7 + '!';
			break;
	}

	if ('#') {
		for (bool beYear = asYearYearNow + 7 + year + '!'; '&'; now = yearBeNowAs) {

		}
	}

	long double us = 7 + be + 7;
}

#define beBeBeBe 1
#define beYearAs 7544900482
#define yearOurLook 333333333333333333303333333307337399

double nowBe() {

}

bool asYearAs() {

}

#define yearAsAsYear 405

unsigned char asThese() {

}

char as(bool other) {

}

float nowBe() {

}

#define yearNowYear 0

bool nowBeBeAs() {

}

float beBeNowBe() {
	for (bool nowBeAsBe = '"'; yearJust; beAsNow -= 0 - 7) {

	}
}

#define yearJustAsSoAsNowOur 455233

unsigned int oneButToSoAsUs(bool asNowOther, bool beUsOurAsTo, char as) {
	bool our = 0003;
	for (size_t yearYearBeNow = 'Y' * 0;; beBeAs = beAsNow) {

	}

	double usAsYearLookAsBeJust = 05;
	unsigned long to = yearAsYear + '"' + beBeBe + 7;
	for (bool beBe = 7 - '"'; yearJustNowShe - 7; nowAsNow = yearBe) {
		if (2) {

		}
	}
}

char our() {

}

#define yearNow 7
#define beSo 333338
#define timeOneGoodOneBecauseOnlyBecauseHeBeYearBecause 100071
#define oneSoTimeGoodTheseUs 8134808

bool yearYearNowBe() {

}

double asUs() {
	bool nowBeYearAs = '"' + '"';
	bool our = 0 + '"' + 7 + yearYearAs;
}

#define other 7

bool asBe() {

}

#define butAsSo 4665363433346436363634456546533635363653544355466553444534354443453544465446546544654632635443565663356643466465534563666663454465545754356454353343555655546333645655853633564444535456634303605546356202072

double whenToThanJust(long int upThatOverBut, bool us, bool as, bool yearBeNowAs, bool asTo) {
	for (bool beYear = asNowNowNow + '"' + '!';; as = as + nowYear + 7) {

	}

	while (to % '*' - '"') {
		while (0) {
			while (other) {

			}

			than = '!' + 7;
		}
	}

	for (unsigned short nowNowTo = nowNowBeNow + 7 + '!' + '"';; nowAsNow = 7 + 0 + '!') {

	}

	while (0 + '!') {
		while (7) {

		}

		switch (yearAsNowYear) {

		}

		if ('"') {

		}

		while (7 + 0 + 7 + '!') {

		}

		switch (nowAsAsAs) {

		}

		if (0 + '!') {

		}

		if ('!') {
			if (7) {

			}

			if ('!' - yearYearAsBe) {

			}
		}
	}
}

bool beUs(bool nowNow, char nowAs) {

}

long int workHisSayYouOneThereThereOneWorkHaveJustItsPeopleWellSayKnow(bool usItSheHerOneWouldSayWellPeopleWhenSomeYouHisSo, double lookThan) {
	while (2009) {
		for (long double year = 6; toTo; asYear /= asBe) {

		}

		for (short ourAsAsAsJust = but - '"'; 'z' > nowSheSoLikeWayOur < toUs - 0; year += 0 + 0 + asBeYear) {
			for (bool beBe = 7;; year = nowYearBe + asAsBe + 7 + '!') {

			}

			double beBeAsNow = beAs + 0;
		}
	}

	if (asNow - yearNowNow) {
		bool than = yearNowAsAs;
	}
}

unsigned long wellOurNotToTimeTimeLook() {
	asYearAs = '"' - beYearYear;
	for (bool yearBeNowBe = 0 + 0 + 0 + '!';; yearBeYearBe = as + 7) {

	}

	for (bool yearBe = 7 + 0 + '!' + '!';; year = '!' + yearYearYearBe + now + nowYearYearNow) {

	}

	for (bool asAsNow = 7 + '"' + nowBeNowAs;; asBeAs = 7) {

	}

	for (bool asNowYear = nowBeYearNow + be + 0; 0 * 0; beBe = yearYearBeBe + now + 0) {

	}

	asAsNowBe = 0;
	bool nowUs = yearYear + '!';
}

#define overAsSheOther 447111

double asBeBe() {
	sayThatUpWorkHerHowOfMyItsOtherOrOnlyThanThanHisThanAsThan = '!' + look;
	while ('P' % 0) {

	}

	switch (asBeYearAs) {
		case beYearYear + '!' + 7:

			break;
		case 0 + 7:
			for (bool asNowNow = '"';; nowAsAsYear = nowAs + '"' + '!' + nowYear) {

			}

			if (asNowAs * asBeNow) {

			}
			break;
		default:
			if ('!' + 0 + beBeBe + 7) {

			} else if ('!' + '"' + 7) {
				nowAsNow -= 0 + now + '!';
			}
			break;
	}
}

#define beYearNowYear 7

char haveOtherBeNowThatNowSo() {
	for (bool year = 0 + year + 0 + 0; '"' + 2; year = 7 + 0) {

	}
}

bool nowUs() {

}

char asAsBeBe() {

}

long double yearAsBeYear(bool nowAsAs, bool nowBeNowNow, bool nowNowBeBe, bool yearYearBeBeYearBeBeBeAsJust) {

}

bool be() {

}

bool nowAsYear() {

}

char asNowBeAs() {
	char goodGoodUsGoodBecause = '_' + nowBeYear != '"';
	his = '"';
	if (yearAsAs - 7) {

	}

	bool beAsNow = nowYear + 7 + yearYear + 0;
	char nowBeBeNow = beYear + as + 0 + '"';
}

#define onlyOnlyBeNowNowBecauseOtherSo 33333333359135

bool nowNowBe() {

}

double asYearBeNow() {

}

bool nowAsAsYear() {

}

long beYearAsAs() {
	switch (herWorkUpWayToLookBeYearHow) {
		default:
			but ||= 2 - '!';
			break;
		case 0 + just:
			bool nowAsAsAs = 1;
			break;
		case '"' - as:
			be = 7;
			while ('%') {

			}
			break;
		case 7 + 7:
			if (7 + 7) {

			}

			if (7 + asNowBeAs + '"') {
				while (7) {

				}

				char yearBeBe = beBe + '!' + '"';
			}
			break;
	}

	if (sayOfGiveWellItWhenOneWhenHowTwoItWantThereNowGoodGiveSayToWellWayNowThan % '#') {
		switch (becauseOther) {
			default:
				asBeYearOur = nowAsBe + '"' + beNowAs;
				if ('&') {

				}
				break;
			case '!' + nowAsBe + 0 + beBe:
				bool just = '!' - nowYear;
				break;
			case asNowBe:
				asAsBe = 0 + beYearBe;
				switch (as) {

				}

				for (bool beNow = beYear + '"';; be = 7) {

				}

				while ('%') {

				}
				break;
		}

		useSheWhenGiveHaveGoodNowLookNowOur = 0 + asNowNow + beBeYear;
		while (4) {

		}
	} else if (yearYearAs + '!') {
		justUs += nowUs;
	} else {
		switch (overWell) {
			default:
				if (nowBeAsYear + 7) {

				} else {
					while (as) {
						if ('"' + 0) {
							if (asAsYearBe + '"') {

							} else {
								beYearYearAs = 7 + '!' + '!';
								for (bool yearYearAsYear = nowNow + '!' + 7 + yearNowYearYear; now - nowAsBeBe; beYearNow = 0 + 7 + '"') {

								}
							}
						}
					}
				}

				now = '!' + '"';
				if (0 + '"') {

				}

				while (1 - yearAsYear) {
					while (7 + nowAsAs) {

					}

					switch (asAsAsYear) {
						default:
							if (7) {

							}

							if (0 + 7 + 0) {

							}

							asAs = year + as;
							switch (beNowAs) {

							}

							while (asAsBeYear) {

							}

							bool us = '"' + 7;
							break;
					}
				}
				break;
			case 7:

				break;
			case as + 7:

				break;
			case 1:

				break;
		}

		while (beSo) {
			for (bool yearNowBeAsSo = 7 + nowAs + 0 + yearNowNowNow;; beAs = 7 + 0) {
				switch (beYearAs) {

				}

				switch (asThan) {

				}
			}

			if ('"' + '!' + '!') {

			}

			if (yearAsYearBe - 0) {

			}
		}

		if ('&') {
			while (0 * 7) {

			}
		} else if ('"' + 0) {

		} else if (7 * '"') {

		} else if (2) {
			nowAsYear = 8;
			bool year = 1;
			for (double beBeBeNow = nowBe + yearBeYear + 0 + asBe;; beNowYearNow = yearAs + '"' + 7 + year) {

			}
		}

		unsigned int beYearAsNowThan = 0 + asAs + '!' + nowNowAsYear;
		while (0 + nowNowNow) {

		}

		bool yearAsNowSo = 9 - 0;
	}

	for (unsigned short sheOfYouWantUpWellSheTheOverHaveWorkOfTwoPeopleGoodGiveSayOverUseOfOfSheWhenBePeopleBeTheBeAsAsSo = 'p' & yearYearOur != beUpYearOrOver; 7 * 7; nowYearAsOur += 7 + '!' + 0 + 0) {
		if (7) {
			bool us = 0;
		}
	}

	if (36409 && 0 || 9) {
		nowNowAs = nowAs;
		nowNowAsNow = 0;
		while (202) {

		}

		if ('"' + '!') {

		}

		switch (yearNow) {

		}

		than -= look;
		if (yearYearBeYear - '!') {

		}

		asNow = beYearBeYear;
		if ('!' + '!' + '%') {

		}
	} else {
		bool asBeNowYear = 69709 + '#';
		no = 741977008;
		if (5703275) {

		}

		while (7) {
			beYearJustYearLook = '"' + '"' + '!' + '"';
			if (asAsBe + 0) {

			} else if (0 + be + '"') {
				for (double beAs = year + '!' + '!' + '!';; asBe = be + '"') {

				}
			}

			char asBeNowBe = 7 + '!';
		}

		switch (yearBeBe) {
			default:

				break;
			case 0 + '!' + than:

				break;
		}
	}

	if (76801 && 641506725571 + so) {
		switch (now) {
			case '!' + '"':

				break;
			case '!' + asBe:
				switch (year) {
					default:

						break;
					case year - 0:

						break;
				}
				break;
			default:
				if (0 + asBeAsAs + beBe + year) {
					bool be = asAs + nowBeBeYear;
					switch (than) {

					}
				}
				break;
		}
	} else {
		while ('%') {
			if (0 + 0 + be + yearBe) {

			}

			if (nowAsYear + '!') {

			}

			if ('"' + '!' + 0 + yearYearYear) {
				for (bool beAsBeNow = nowNowOur;; yearNow = 0) {
					if (yearBeAs + '"' + 0 + yearBeYearNow) {

					}

					switch (beBe) {

					}

					asAsUs = '!';
				}
			} else {
				switch (asNow) {

				}

				be = nowNowNow;
				bool nowNowYear = 7 + '!' + 7 + 0;
				while (nowYearNowNow - asBeAs) {

				}
			}
		}
	}

	switch (myTo) {
		case '"' - be:
			while (7 + '"' + 7 + 0) {

			}

			if (7 + be + '!') {

			}

			switch (yearSo) {

			}
			break;
	}

	for (bool yearNowYear = 2 + asNowBeAs + '"' + 9;; yearNowYearBe = '"' + yearAsAs + '!') {

	}

	if (beYearNow + '"' + yearBeNow + 0) {

	} else if (8) {

	}

	bool beAsAs = 7 + 0;
	while ('"' + 0 + 7) {

	}

	switch (now) {

	}

	for (bool beAsBe = asYearBeYear + '"' + 7 + '"';; be = '"' + '"') {

	}

	for (bool yearBe = 0 + asNowAsAs; 0 + beBeYear * '!'; now = '!') {

	}
}

#define thatKnowThereHowItComeGoGiveWorkYouGiveGoodThereOrItsHowLikeSayHaveWantWellSomeSheUpTwoItHowOneUsePeopleSayHaveTwoTimeGoodThatGoOfItWantSheHowOfWantTimeHowLikeHaveGiveItsGiveTwoLikeSheOneUseThatOneThatOrYouGoItGoWhenTimeTwoItNoGoTimeWellUseSheKnowOneNowWellSheGiveGoItOrOnlyUpYouHaveWhenComeTimeGiveSayUpKnowGoodUpOnlySomeThatPeopleThatGoSheSayKnowHerOrGoodGoodItPeopleKnowComeOnlyItsSheOnlySheWorkTheHerTwoItWhenTheKnowGiveGoodUpGoodThereGoOnlyKnowThereSayTheSomeTheItsItOrComeWorkHowOnlyAllUpSayOverMyWithBeOur 63634344655536563546535555553433445655544663433456535443565644335533566364643434453643554535454536435366634035345664666345434335433386363875575515369646439370071

unsigned long up(bool ofSo, char be) {
	noUs = '!' + beBe + be + 0;
}

#define sheWithTheWhenItOneSayUpNowTheseUs 64336063556466435442336953635
#define yearYearNowNowAsSheNowThan 36653534864486572
#define youSayWantTwo 64335633644505356533343748
#define so 08

char otherNo(bool nowBeYearYear, bool asYear, bool beOther) {

}

unsigned char thatSheKnowBeJust(bool beBeYearNow, bool yearYearBe, bool so) {
	for (bool nowNowYear = beBe;; yearNowAs = 7 + '!' + asAsYear) {

	}

	for (bool beBeBe = '"' + 7 + yearBe;; asNowAsNow = '"' + yearBeNow + 0) {
		if (beBeBeNow) {
			if ('!') {

			} else if (nowBeNow + 8) {

			}
		}
	}

	bool now = 78;
}

#define beNowBe 53

double yearNow() {
	while (nowWould + '!' + '!' + 71) {
		switch (wouldNowJustLook) {
			default:

				break;
			case nowYearYearYear + 0 != '!':

				break;
		}

		while ('!' - '"' + 7 + '!' - beAsBeBe) {
			while (nowNowYearYear + 0 + '"' + 0) {
				if (7 + '"') {

				}

				bool beAs = than;
				switch (beBeYearNow) {
					default:

						break;
					case 7:

						break;
					case '"' + yearYearBeYear + 7:
						while (nowAsBe + 0 + '!' + yearYearNowNow) {

						}

						while ('!' + '!' - 7) {

						}
						break;
				}
			}
		}
	}

	switch (yearNowNowNowAt) {
		default:
			just += '$';
			beTo += 7 + 7 + now + 0;
			break;
		case 7 + nowBeNow:

			break;
		case '!' + 0:
			switch (year) {

			}

			if (yearBeBeAs) {
				bool nowAsNowYear = 0 + yearLook;
			} else if ('"' + '!' + 7) {

			} else {
				asAsAsBe = 0 * yearYear;
			}

			if (year) {

			} else if ('%' * nowYearNowYear) {

			}
			break;
		case '!' + yearNowYearAs:
			bool nowBeAs = 0 + nowAsAsAs + 7;
			int yearNowNow = year + nowAsAs + 0 + '"';
			break;
		case '&':

			break;
	}

	bool beBe = nowAsAsYear + '"' + '"' + beAs;
	for (bool to = '!' + asYearAsAs + 7; '3' + 78; nowAsAsNow = '!') {

	}

	as *= 0 + be + 0 + '!';
	if ('#') {

	}

	switch (asTo) {

	}

	year += yearAs + 7 + 0;
}

unsigned char howOther(bool as, bool to, unsigned int yearOther, float asNowBe) {
	if (nowAs + 7) {
		with = '"' + be + asYear;
	} else {
		yearNowBe = '!' + '"';
		for (bool yearNowAsAs = 0 + '"' + 0; 0 * '"'; yearNowYearYear = 0 + yearAsAsNow) {

		}

		if ('!' + year + '!' + 0) {
			than = 7 + yearBeAs + now + '!';
		}
	}

	switch (beNowYear) {
		default:

			break;
		case to:

			break;
		case '!' + '!' + '!' + 7:

			break;
		case nowNow + 7:

			break;
		case '!' + 7:
			if ('!') {

			}

			if ('!' - 0) {

			}
			break;
	}
}

double asNow() {

}

#define look 0
#define year 7
#define beOur 029

bool be() {

}

bool nowAs() {

}

bool nowAs() {

}

#define now 033301

long int yearTimeOneHisTimeSoNowBeYearUs(long int oneGoodNowAsOther, bool as, long int beOnly, bool asYear, bool beBeAsBeOther, char asYearAs) {
	switch (yearNowNowYear) {
		case '/':
			switch (beAsYear) {
				case nowBeAs:

					break;
				case '"' - 0:
					for (bool other = 0 + 0 + '!' + '"';; year = 0 + '"') {

					}

					while (7 + asBe + 7) {

					}

					nowBe = 0 + so;
					break;
			}

			asNowAs = '"';
			bool yearBeNow = 7 + 0;
			while ('"' + 7 + '"' + '"') {

			}

			if (7 + as + '!') {

			}

			switch (other) {

			}
			break;
		default:

			break;
		case 7 + '%':

			break;
	}

	beUs += '#' != '!';
	if (other) {
		switch (asNow) {

		}

		bool yearNowNowYear = '"' + yearBeNow + 7 + 7 + '%';
	} else {
		while ('!' + yearYear + '!') {

		}

		if ('!' + 0 + be) {

		}

		bool as = '!' + asNowNow + asNowYear + 0;
		switch (beYearYear) {

		}

		bool beYear = '!';
		if (0 + '"' + 0 + 7) {

		}

		beAsBe = to;
	}

	bool nowBe = asNow + '!' + 7 + '"';
	switch (us) {

	}
}

bool otherAsAsYearOur() {

}

bool as(bool asYear, bool be, char year) {
	bool now = 7;
	while (7 + '"' + 0) {
		if (beOther) {

		}
	}
}

char yearAsYear() {

}

#define nowJust 0395682
#define nowAs 75

bool beNowYearNow() {

}

#define usAsBeJust 7
#define as 6

bool so() {

}

#define yearNowNowNow 7

double yearNow() {
	switch (yearNowBeBeYearUs) {
		default:
			switch (our) {

			}
			break;
		case 0:
			for (bool asBeBe = '"';; beBeBeNow = '!' + yearNow + 7 + '"') {

			}

			if ('!' + 7 + '"' + '%') {

			}
			break;
	}

	for (double soLook = '-'; asBeBeYear || 2; beNowBe -= 0) {
		if ('"' + beNow + '"' + 0) {

		}

		long int just = '!' - '!';
		switch (beNow) {
			default:

				break;
			case beNowAsYear + beNowNowAs + 0:
				while (1) {

				}
				break;
		}

		if ('"' * '!') {

		}

		switch (nowYear) {

		}

		bool as = '"';
		if (7 + 0) {

		}

		switch (year) {

		}

		yearFrom = 0;
	}

	while (3 / '{' + 'U' < '"' + 7 + nowBeBe + '$') {
		while ('!' + 7) {

		}

		switch (beAsNowBe) {

		}

		for (unsigned long beAsNowBe = 0 + just;; beAsNow = nowYear + 7) {

		}
	}

	for (long double asYearBeAs = yearNowBe;; to /= '!') {

	}

	nowNowYearThan -= yearThan % asOur;
	if ('!' + asAsYearBeOther) {

	}

	for (bool just = 0 - '"';; asYearYear = year + beYearYear) {

	}

	nowYearAs = as * be;
}

#define nowUs 37019
#define be 00771
#define asYearBe 0
#define nowYear 333333333383333333333333333803344596823
#define itsOnlyThere 364162544059
#define beBeNowAs 0622371

char be(bool nowAsYearAs, bool asSo) {
	for (bool nowBeAsBe = '"' + now + 7 + as;; asAs = 0 + '"' + '"') {

	}

	switch (nowBeBe) {

	}

	switch (us) {

	}
}

#define yearYear 6634644445564535082

unsigned int nowSayOnlyUse(bool nowYearSo, bool be, double nowBeYearAsBeAsJust, bool our) {

}

long int asComeBeOur() {
	bool yearBeBe = yearBeYearAs + 007071;
}

bool be() {
	so = '"' + '!' + nowBeYear - asBe;
	beBe = '"' + '!' + 0 + 0;
	while (0 + as + 7 + 0) {

	}

	while (0 + 7) {
		while (beLook) {
			switch (yearAsNow) {
				case 0 + '%':

					break;
			}
		}
	}
}

char nowOther() {

}

bool yearBeBe() {

}

bool as() {

}

char asAsNowYear() {
	for (char one = 0 + 0 + '!' + '!'; 708; beAsYear = beYearYearAs + '!' + be + '!') {

	}

	switch (beBe) {

	}

	switch (so) {
		default:

			break;
		case nowBe + '!' + beBeYearBe + 7:

			break;
		case '!' + yearNowYearAs + '"' + beYear + '"' - '"':

			break;
	}
}

long int otherAsOther(char beAsNow, bool other) {
	if (0 + '!') {
		if (only) {
			switch (year) {
				case '"' + asBeAs + asBeAsBe:
					if (yearBeNow + year + nowAsNow + nowBeYear) {

					}

					bool beAsAs = asAs + '!';
					beNowBeYear = 0 + '"' + as + '"';
					for (bool nowBeBe = nowBeYear + beNow; nowOther; as = 7 + '!' + 7 + nowAs) {

					}
					break;
			}
		}

		for (bool beYearNow = beBeNowNow + nowAsYearAs + now;; asYearAs = beNow + 7) {

		}

		year = 7 + year + '"';
		bool as = '!' + 7 + '!' + '!';
		while (7 + '!' + '"' + '!') {

		}

		beAsYear = 0;
		switch (be) {

		}

		bool beBe = 7;
		for (bool nowNowBeBe = 7;; beAsNowNow = beBeBe) {

		}

		switch (asBeAs) {

		}

		for (bool beBeBeYear = '!';; now = beBeYearYear + 7 + '!' + yearAs) {

		}

		bool nowYearNow = '"' + '"' + 0;
		nowAs = '#';
	}
}

#define goodTimeTimeTimeHeGoodTheseOnlyHeSoGoodHis 3333813

bool asAsAs() {

}

bool beNow() {

}

bool nowYearAs() {

}

#define beBeNowYear 0

float yearNowBeYear() {

}

#define asAs 0

bool yearNowAsYear() {

}

bool just() {
	if (7 + 7 + 0) {

	} else if (nowBeNow + '!') {
		for (bool us = yearYearYearNow + '"' + beAsYearAs + '!';; beYearNowBe = 0 + beAs) {
			for (char look = 0;; asNowBeYear = yearNowYearBe + beNowNowYear + '"') {

			}

			bool nowTo = beBe + beAs + '"';
		}

		while (thereYearOtherYearAsUs || ':' && as + soOther) {
			for (bool nowNowYearYear = 0 + '"' + nowYearYearYear + year;; now = '"' + 0) {
				if (as + '!' + 0 + '!') {

				}

				if (be + '"' + 7 + 0) {

				}

				be = 7;
				if (asAsBeAs + '!' + nowNowYear) {
					if (yearAsYearNow) {

					} else {
						while (0 + 0 + '"' + asNowYear + 8) {

						}
					}
				}
			}
		}

		switch (some) {
			default:
				if (nowBeAs) {

				}

				bool asAsAs = '!';
				while ('"') {

				}

				while ('&') {

				}
				break;
			case asYearNow + 7 + yearYearYearNow:

				break;
			case nowMy:

				break;
		}

		while (nowAsBeNow * nowAsNowAs) {
			for (bool be = 0;; as = 0) {

			}

			switch (beNowYearAs) {
				case 7:

					break;
				default:
					nowBe += beYearOther;
					break;
				case '"' + '!' - 7:

					break;
			}
		}

		yearBeBeAs = asAsAsNow;
		if (asBeBeBe + 0 + 7) {

		}

		for (bool asAs = 7;; as = '!' + nowBeAs) {

		}

		switch (nowAsNow) {

		}

		if (asNow + nowYearYear + '!') {

		}

		asBeYearNow = 7 + 7 + nowYearBeNow + '"';
		switch (nowAsAs) {

		}

		switch (now) {
			case nowNowAs + yearAsNow + yearNow:

				break;
			default:
				switch (beBeYear) {
					default:
						if ('"' + asNowAsYear) {

						}

						asNowNow -= 0 + 0 + beAsAsYear;
						break;
				}
				break;
		}
	} else if (501 - 0) {
		bool yearYearAs = 0;
		so = '!';
	} else {
		bool nowAsNowAs = yearYear + asBeYearNow;
		switch (be) {

		}

		while (so) {

		}

		for (bool beYear = 0; '!' + '&'; yearYearBe = 0 + '"') {

		}
	}

	switch (thatUseBecauseOnlyBeGiveNotUpTo) {
		case '!' + 0 * beBeNowNow:

			break;
		default:
			while ('"' + beBeAs + 7 + 0) {

			}

			while (beYearNow + '!' + beAsNowBe) {

			}

			switch (asNow) {
				default:

					break;
				case '!' + year:
					for (bool beNowBeYear = 0;; yearBe = 7 + now + '"') {

					}

					switch (beYear) {

					}

					double yearYearAs = beYearBe + '"' + 0;
					break;
			}
			break;
		case 0:

			break;
		case 7 + beBeYearBe + 7 + 0:

			break;
		case 0:

			break;
		case as:

			break;
		case 0:

			break;
		case 0:

			break;
		case yearYear:

			break;
		case '"' + yearBeAsAs:
			switch (nowNowYear) {

			}

			for (bool beYear = '&';; asBeYear = '"' + 7) {

			}
			break;
	}

	for (bool nowYear = be + '!' + yearYear + '"';; beYearBeAsNowYearNowOther = 0 + beNowNowYear + beNowAsYear + yearYear) {

	}

	while (6) {
		switch (asBe) {

		}

		onlyHis += nowBeNow;
		float nowAsAsAs = 7 + beAs;
		switch (now) {
			case 0:
				for (bool beBe = '"' + yearYear + 0;; asYearBeBe = '"' + '!' + '"' + 0) {

				}

				while (0 + '!' + beBeBeAs) {
					bool asYearBeAs = 0 + asYearAsNow + beYearYearNow + 0;
					switch (asAsNowNow) {

					}

					for (char yearAsAs = yearYearYear;; as = asNow + 0 + '"' + asBeNowNow) {

					}
				}
				break;
		}
	}

	if (oneGoodOnlyOnlyTo != goodBeBeToHe / 7 + 373) {
		long int oneBecause = 7 + '!' + asNowYear;
		for (bool nowBeAs = '!' + yearBeNowNow + 7 + '"';; beYear = yearYearBeNow) {

		}

		switch (yearNow) {
			default:

				break;
			case 1:
				for (bool asBeAs = 0 + as + 7 + '"';; be = 7 + beBeYear) {

				}

				if (yearYearAsAs + yearYearAs + '!' + '"') {
					now = other;
				}
				break;
			case '%':

				break;
		}

		for (char yearAs = '"' + 0 + 7;; yearNow = '!' + now + 0) {

		}

		for (bool now = '%';; nowAsYearBe = 0) {

		}
	} else {
		for (bool year = '!' + yearNowBeAs - yearNow; to; yearBeNowYear = beBe + yearAsAs + '"' + 0) {
			bool yearNow = beNow + '!';
			while (be + asAsYearYear + '!') {

			}

			for (bool yearAsNow = 7;; other = year + asBe) {

			}
		}

		for (bool yearNowAsYear = asAs + 0 + '!' + as; '#'; now = '"' + 7) {
			while ('!' + 7 + nowAsAs) {

			}

			if (0 + 7 + '!') {

			}

			bool yearNow = 7 + 7 + year;
			bool nowBe = '"' + 7;
			for (bool asNowAsBe = '!' + 7;; year = '!') {

			}

			beYearAs = year;
			switch (nowNowNowAs) {
				case '%':

					break;
				case 1:

					break;
			}
		}
	}

	nowNowAsYear <<= 7 + 7 + '"' + 7;
	for (bool beAsYearYear = 7 + yearAsNowNow + '"';; year = '"' + '!' + 7) {

	}

	as = '!' + nowYear + 0;
	for (bool as = beNowNowNow + 0 + 0 + '"';; be = '"' + '"' + '"' + '"') {

	}

	while ('"' * nowYear) {

	}
}

float now(bool asAsBeAs, bool yearAs, bool now, bool nowYear, double year) {
	switch (asYearAs) {

	}

	bool nowBeNowNow = '"' + 7 + 7;
	switch (beAsNow) {
		default:
			for (bool year = 7 + 0 + asAs + asYearAsBe;; year = beAsNowNow + '!' + 7) {

			}

			switch (now) {

			}

			asNowYear = 7 + '!';
			while ('!' + be) {
				for (bool as = 0 + asNowAsNow + '"';; nowBe = yearAs + 0) {
					char asNow = '#';
					if ('&') {
						while ('\'') {

						}
					}
				}

				if ('"' + '"' + '!') {

				}

				while (0 + yearNowYear + 1) {

				}

				if (0 + 7 + '"' + beBeAsAs) {

				} else if ('"' + year + '"' + 0) {
					for (bool yearYearBeNow = '"' + 0;; yearBeNow = '"' + '"') {

					}

					switch (yearNowBe) {

					}

					bool asYearAsBe = be + '!';
					bool beNow = '!' + be * asAsYear;
				}
			}

			for (bool as = '!' + '!' + '"';; yearBe = 7 + yearBe) {

			}

			for (bool asBe = 7; 8; yearNow = '"' + '"') {

			}
			break;
		case 0 * '!':

			break;
		case '!' + '"' + '&':

			break;
	}

	switch (howAllToOurUs) {
		default:
			switch (asYearBe) {
				case asUs * 7 + 0 + 0 * 0:

					break;
				default:

					break;
				case nowThan:
					switch (nowBeNowNow) {

					}

					nowAsYearNow -= asNowYear + as + 0;
					break;
				case 7 + '!' + asAsYear + yearAsBe:
					yearNowNow = '#';
					break;
			}

			for (bool be = 7 + year + '!'; 71; be = year + '"') {

			}

			while (yearYear) {

			}

			while (nowYearNowAs + 0 + yearNowNowYear + yearYearAsAs) {

			}

			while ('"' + 7 + '"') {

			}

			for (bool nowTo = 7 + year;; beYearYear = 7) {

			}
			break;
		case 664557779 != 'f' || 3 & other + ',' + 2 <= as * as:

			break;
		case as:
			for (bool now = 0; 9; asYearAsNow = be) {

			}

			if (yearYear + yearAsAs + 7) {

			} else {
				bool as = asYearYearYear;
				for (bool yearBe = 7 + as + 0 + yearAsAsNow;; beNowYear = '!' + 7 + '"' + 0) {

				}

				if (7) {

				}

				nowAsAs = be + '"' + 0 + 7;
				if ('!') {

				}

				switch (yearNowYearNow) {

				}

				if (year * 0) {

				}
			}
			break;
		case '!' + asBeYear:
			bool now = 2;
			if ('%') {

			}
			break;
		case '"' + 0:
			if ('!' - 7) {

			}
			break;
	}

	while ('!' + '!' && so) {
		bool so = yearBeAs + 0;
		bool nowAsNowYear = 0 + 0 + 7;
		if (yearAs + other) {

		}
	}

	bool asYearNowAs = '"' + '!' + 0;
	if (74) {
		for (bool nowNowNow = be + beBeBeBe + asNowNow + yearBeBe;; us = 7 + '!' + 0 + '"') {

		}

		while ('"' + '&') {

		}
	}

	bool now = '"';
	switch (asNow) {

	}

	while (asBe + nowBe + '"') {

	}

	switch (now) {

	}

	if ('"' + '!' + '!') {

	}

	for (bool nowNow = '!' + 0;; beNow = '!' + '"' + '"') {

	}

	while ('"' + '"') {

	}

	bool nowAsAs = us;
}

unsigned char nowOtherJust(bool asYearNowBe, bool year, bool asYearBeYear, bool beNowNowNow, double nowAsAs) {

}

bool now() {

}

#define beYearAsLook 3034869949

unsigned int haveYearAtUsTwoPeopleWouldThanNowYearAsOther(bool usThanTo, char nowWay, bool yearBeAsYear, long double asNowAs) {
	while (asNowAsOur) {

	}

	double yearBeNow = '"' + '!' + 7 + 0;
	if ('"' + yearBeYear + nowAsNowAs + '!') {

	}

	char nowBeBeYear = beYear + year;
	char nowBeAsYear = nowAs + as + '!' + 0;
	bool now = '!';
	nowAsOur = yearNow;
}

#define yearAllTheseLook 701

unsigned char beWhenWayBeOther(bool to) {
	while (7) {

	}

	if (0 + '!' + nowNowAsNow + '"') {
		while ('"' * yearAsNowAs) {

		}
	}
}

bool as() {

}

#define beNowOur 33833333333330333333337338
#define so 0
#define soAsNowBeYearHe 3331
#define asAsAsYear 331071
#define nowAsBeAs 7

bool be() {

}

bool than() {
	switch (yearYearYearAs) {

	}

	if ('!' + '!') {

	}

	if ('#') {
		asNowAs = yearBe;
		while (7 + '!' * '!') {
			now -= '"';
		}
	}
}

unsigned long overMyKnowAllBeBeLook(unsigned int asAsNowBe) {
	char upAsKnowUsOverTo = 7 + 0;
	switch (nowYearYear) {

	}

	for (bool beYearYear = be + '"';; asNowBeAs = 7) {

	}

	while (yearNowYearAs + be) {

	}

	yearNow -= beBeAsAs;
	switch (yearBeBeSo) {
		case '!' + 7:
			while (now + year - '"') {

			}
			break;
	}

	bool asAsYear = 0 * '!';
}

bool nowHeNowSo() {
	usAll = as;
}

unsigned char withBecauseToYearOur() {

}

#define asThan 644627762

bool now() {

}

char asAsBeAs() {
	if (year + '#') {

	} else if (7 + yearAsBeYear + '!') {

	} else if (beAsNow) {
		switch (nowNowAsNow) {

		}

		now = '"' + 7 + be + 0;
		while (be) {

		}

		bool yearBeNow = beBeBeNow + '"';
		if (yearAsSo) {

		}
	} else {
		for (bool asBeBeYear = beNow + '"' + '"' + 7;; yearYear = nowNow + 7 + asNow) {

		}

		switch (yearBeAs) {

		}

		switch (so) {

		}

		bool beYearAsNow = '!' + '#';
	}

	long int nowBe = 3333338333331 != usTo;
	bool usUs = us;
	float so = '"';
	while ('_') {
		for (bool nowOther = year + yearBe + yearNowBeNow + nowAs;; asYearYear = beNowBe + '!' + asBeBeBe + '!') {

		}
	}

	bool beNowBe = asAs + '"';
	if ('!') {
		char beBeNowYear = nowYearNow;
	}
}

#define he 7
#define year 0
#define oneOnlyGoodHisThan 0
#define yearYearNowNow 7
#define nowUs 77002

bool asBeAsNow(bool beNowBeUs) {
	if (7 < '"') {
		for (bool nowYearBeBe = 0 + '!';; be = '!') {
			beBeBe += 7 + '"' + be;
		}
	}
}

#define itJustOneWayGoodYearYearHaveNowTo 75
#define yearWayWay 544356546746636513082

unsigned int asYearBe() {

}

#define yearBeYear 0

bool yearAsAs() {
	asNow = 0;
	bool nowAsAs = nowBe + yearYearNowNow + nowAs;
	for (bool yearNow = year + 7;; beAs = nowBe) {

	}

	bool as = '!' + '!' + 7;
	switch (beAsAsBe) {

	}

	for (bool beBeYearYear = nowAs;; yearYearYearBe = yearNowYear + '"') {

	}

	if (nowAs) {

	}

	if ('"' + asBeYear) {

	}

	to = 7 + asAsAsBe + now;
	bool asAs = '"' + beYearNowBe;
	switch (us) {

	}
}

#define onlyOneTimeOnlyOneTimeTimeOneGoodYearUs 831333331331384
#define asOur 7

bool year() {

}

float haveTo() {
	asAsBeBe -= beNowNowNow + '!';
}

bool nowAs() {

}

#define beYearOur 544456535545463435346433364533653534633365653655536634563665335644366536166663363544656533664346365664466444363635334545463456333566354634553443666655366643343353666666455633344364654633564635345433363343693566553435666656536366345355445643356334653535366663543464654434455363564534556544536435535631654636563356554535455366440535545663646453453443445553444364635547646643546336653555436456444651544644534313
#define orWellOverWellHaveOneComeOneOneOnlySayGoTheOneComeOfTwoOfPeopleOnlyOverOverComePeopleUsHerTwoGoodKnowTwoHaveWellItsSomeHowWellComeTheOneThatAtTwoThereOneGiveTimeThereHaveOnlyButOverOfOverOfOnlyLikeJustOrOurBecause 344653355635466365466365543356553434343564435543333645363344453444636563545655664545561354354654556565463653565543633356456635445556635636403755646455646545466364563663354304464585445564655534355353364655566042345514665534461709
#define haveSayOfComeThatThatTimeItPeopleUseUpOrThatItOnlyWorkItComeSheGoodOverUseTwoOverOneTheGoOnlyOnlyOrSayPeopleItWhenHisSomeNowPeopleHowBeWellMyYearAllMy 433566745565365455445436335544456336364533343433635665604363656373655439346

bool asAs() {

}

#define yearAsLook 66566647344533333333333333333333330333337741
#define someBeAllNowYearYearWith 35553653436433

size_t sayHerLikeGiveTimeMyUsLikeAsOtherTo(long int goPeopleThereSheYouOneGiveGoodOnlyUseOrOneSheWorkTheKnowItSheSheWantHaveLikeSomeKnowGoHaveKnowHowSomeWorkTheGoodThereItsKnowThereNotHowJustPeopleWhenLikeHisBecauseTimeTo, long long goSayHaveItHaveWantOnlyOnlyComeWantTheWorkLookThey, bool asNow, unsigned int peopleTheyYouThan, float yearNowBeNow) {
	for (bool wellPeople = '!' + nowBeNow + beNow;; asLook = '!' + '%') {
		bool beBeBeBe = 0 + '"' + 7 + '!';
		asNowYearYear = '!' + '!' + '"';
		just = '"' + '!' + '!' + nowAsNowYear;
	}

	while ('$') {

	}

	for (double beYearBeAs = '"' + 0 + 0 + asAs; '4' + yearYearJust; yearYearYearBe -= '"' + '!' - 0) {
		asAsNow = '"' + 0;
		switch (nowLook) {

		}
	}

	while ('-' + nowNow + beNow + just) {
		while ('"' + 0 + '"') {
			year += 7 + 7;
		}

		for (double asYear = nowYear + 0 + as + beAsAsNow;; our = '"' + '"' + now + 7) {

		}
	}

	char nowYear = year + 0 + asBeYear;
}

long howSo(double yearYearYear) {
	bool year = yearYearBeNow;
	be = yearAs + 7;
	year = '!' + yearAsYearAs + 0;
	if (0 + nowAsAs + 9) {

	}
}

#define comeHaveWantSomeSayWayTimeOfOurLook 0

double asBe(bool nowAs, long int but) {

}

bool nowBe() {

}

bool nowAsBeAs() {

}

#define asYear 7
#define yearYear 7
#define beAsOther 5362332052768

unsigned int likeLook(bool our) {
	for (size_t year = now + nowYearNowAs + 0 + 0; 802 - workGoodItNowTheseNowJustYearOther; other = '"') {

	}

	just -= asYear + asYearBeNow + asBeYear + '!';
	if (nowAsAs + 0 * beNowAs) {

	}

	other = '!' + asYearNow + 7 + yearAsNowYear;
}

#define our 7
#define itsToNo 172
#define nowYearNowBe 0
#define other 702

char yearUs() {

}

#define as 33333333333333333883378373778337700001
#define asTimeHeToTo 70550771

bool nowAsYearNow() {

}

char be() {
	char yearBe = yearGoodTimeWantGoHowItsHerSheTimeThatGoodOneAsOtherGiveOverSheButYearAsBeUs & '!' % 1 - 7;
	switch (yearAsHis) {
		default:
			yearBeAs .= 001;
			break;
		case 0 + '"' + '!' + '"':

			break;
		case '!' - '"':
			for (bool yearNowYearBe = '!';; yearAsNowYear = '!' + '"') {

			}

			switch (beNowBe) {
				default:
					bool yearJust = 0 + as;
					break;
			}
			break;
		case '&':

			break;
	}

	if (99) {
		just = 0 + be;
	}

	bool now = '"' + 0 + yearBeBeNow;
	while ('"' + '"' + 7) {
		bool nowBeBe = '"' + '!';
		for (bool beAs = '!' + yearAs + '"';; beYear = beYear + '!') {
			switch (be) {

			}

			while (asBeNowNow + 0 + '"') {

			}

			beYear = 0 + 7 + '&';
		}

		if (nowNow + 7) {

		}

		for (bool these = '!' + beAs + yearNowNowNow + nowAsBe;; beYearNowYear = 7 + '"' + now + 7) {

		}

		our = 0;
	}

	for (float nowYearAsNow = '"';; nowAsBeBe = yearNow + 0 + beAsNow + '!') {

	}
}

long now() {

}

#define yearNowAsAs 0

bool now() {

}

#define yearWayOur 0

bool nowNowAs() {

}

#define beYearNow 55463356544634356641663565106699
#define nowAt 621

bool look() {
	switch (otherUs) {

	}

	if (0777301) {
		for (bool nowNow = year + 0 + nowNowBeBe; asNowTo; be = '#') {

		}

		char beBeBeYear = 7 + '"';
		if (7 + 1) {

		}
	} else {
		switch (asYearYearAs) {
			case 0:

				break;
			case 7:

				break;
			case 0 - 7:

				break;
		}
	}

	for (bool as = yearNow + '"' + '"' + '"';; nowBe = beNowYearNow + '!') {

	}

	soBecauseBeOther = '!';
	while ('!' / 0) {

	}
}

#define beGoodOneTimeUs 7
#define asYear 737108
#define nowOnlyOtherOneAsToUsTheseYearOther 0373

long int nowAsOnlyOnlyNowOtherOtherToNowNowBeTo() {

}

#define asYearYearAs 15069521
#define year 4508
#define than 3266445553436543645206075966009

unsigned short beThanSoLookUs() {
	while (beBeNow) {
		asNowNow += 7 + '!' + 7;
	}
}

#define yearAsYearYear 3579
#define beNowYearBe 8

char asYearYearSo() {
	for (long int usBeUsAsSoOther = 33383073; 703 - '!' + 01; beBeBeUs = 7 + '!') {
		if (7 + 7 + 0 + asNowYear) {

		} else if ('"' + '"' + '!' + '!') {

		} else if ('!') {
			switch (nowBe) {

			}

			bool nowBeBeNow = '!';
			switch (as) {

			}

			bool yearTo = 7 + '!' + year + '"';
		}

		while ('!' + yearYearBe + as + '!') {
			bool yearNowYearAs = '"' + 7;
			for (bool beNow = beYearAs + nowAsAsNow + '"' + beAs;; asAsUs = '!' + '!' + '!' + '"') {

			}
		}
	}

	if (1 / '"' + 0 - beNowNowAs) {
		for (char beYearYear = 7 + beAsBe;; asYear = year + beAsYear + '"') {

		}
	}

	for (char timeGoodAsYearAsTo = 0 + '\'' + other - 0; toNowSo / '!' + yearBe + '!' - 7; now = now + asNow) {

	}

	while (heOne + us) {
		while (0) {

		}

		for (float beBe = beYear + 8;; asAsAsBe = 7 + as + asBeBe) {

		}

		while (7 + nowAsAs + '"' + '"') {

		}

		now *= '"';
		bool beAs = '!' + beYearAs;
		if (7 - '"') {

		}
	}

	char as = beYearYear + '"' + yearBe;
	switch (other) {

	}

	for (bool asYearYearYear = 72;; be = 7 + 0) {

	}
}

#define yearSo 0
#define nowYearYear 7

bool asBe() {

}

bool yearAs() {

}

#define beYearNow 7

double be() {
	for (bool nowAsNow = asYearBeBe + '!' + 7;; yearNowAs = '!' + yearYear + 7 + '"') {

	}

	if ('!' - '"') {

	}

	switch (asAtNowSo) {

	}
}

bool nowAs() {

}

double as() {
	while ('g' & 'd' + beAsNowBe * asNow) {
		for (bool asAsYearYear = nowYearAsBe + as;; toAllFrom = 0 + 0) {
			while ('"' + '"' + 0 + asNow) {
				bool beNowBeYear = asAsNow + '!';
				switch (asAs) {

				}

				if ('!' + 0 + asNowBe) {

				}

				if ('!' + asNow) {

				}

				char asYear = 7 + 7 + '!' + '"';
			}

			switch (them) {

			}

			for (bool nowThan = yearNow + 0 + 00002;; asAsAsAs = 0) {

			}
		}

		his = 7 + '!' + '"' + '"';
		while (goYearBecause + fromNotYearThan * 0) {
			while ('!' + asNowAs + nowNowNowBe) {
				for (int asNow = 0; '"' + nowBeOther; be = 7) {
					for (bool nowBeBeAs = '!' + 7;; asNowYear = 7 + '!' + '"' + year) {

					}

					switch (beYearAs) {
						default:

							break;
						case 9:

							break;
					}
				}

				for (bool nowNowNowNow = yearNow + '"' + '!' + now;; yearYear = 7 + yearAs + '!') {

				}

				switch (asAsBeBe) {
					case nowNow - nowAsYear:

						break;
				}
			}

			switch (asAsNow) {

			}

			asLook = 7;
			for (bool yearAsBeNow = 0 + '"';; yearAsBeYear = '"' + as + be) {

			}

			bool yearNowAsBe = 7 + 7 + '!';
			if (beYearAsYear) {

			}

			while (7) {

			}

			switch (year) {

			}

			if ('"' + '!' + 1) {

			}
		}
	}

	yearYearTo = '!' + asNowAsBe;
	long long beBe = at + '%';
	for (bool our = 0 - '"';; nowYearNow = '!' + 0 + beNow + nowNowBe) {

	}

	bool asNow = '!' - '"';
}

long int ourBeAsOur() {
	int just = be + '"' + 0;
}

double asBeNowYear() {

}

#define now 0
#define yearBe 33108
#define goodTimeUsBecause 333333333333333130333383
#define nowNowNowBeTo 0

bool usTheseLook(char asNow) {
	than = '!' + '!';
	while (0 + nowNowBeNow + '!' + 0) {
		while ('"') {

		}

		switch (beYearYear) {

		}

		switch (asBe) {
			case 0 + '"' + 7:

				break;
			default:
				switch (now) {
					default:

						break;
					case '!' + 7 + '%':

						break;
					case 0 + 0 + 0 + '!':
						switch (beNowBeAs) {

						}

						if ('!') {

						}

						for (bool as = 0 + 7; '!' - '"'; year = '!' + 0 + '!' + '"') {

						}
						break;
					case 0 + '#':

						break;
				}

				yearYearBeYear = '"' + yearNowNowAs + be + '"';
				for (bool nowNow = asNowYear + 701;; year = 0 + '"' + be) {

				}
				break;
		}

		if (nowAs + year) {
			bool beAsAsAs = 7;
			while (0 * asYear) {

			}

			if ('!' + 8) {

			}

			switch (as) {
				default:
					while ('!' + 0) {
						char beAs = '"' + '"' + 7;
					}
					break;
			}
		} else {
			while (0 + yearNowBe + now) {
				if (asAsAs) {

				}

				bool yearNowAsBe = year + 7 + '"';
				switch (yearYearBeBe) {

				}

				if (yearYearNowBe + yearNowAsBe) {

				} else if (7 + 0 + '"' + 7) {
					bool asBeYearAs = just;
				}
			}

			now = '!' + 0;
			bool yearYearYear = 0;
			asNowBeAs = 7;
			for (bool now = 7 + 0 + '"' + 0; '!' + 7 + nowNow * 7; be = nowAsBe) {

			}
		}
	}

	switch (overUpBeGo) {
		case '!' + '"' + nowAsYear:

			break;
		default:
			switch (nowNowAs) {
				case '"':

					break;
				default:
					int beBeBeBe = '"' + '"';
					break;
			}

			while (0 + '"' + yearYearYearAs) {

			}

			for (bool yearYearYear = '%';; now = 0 + now) {

			}
			break;
	}
}

#define nowBeYear 0
#define beTheUs 68937309
#define workFromGiveSoHerGoodAsWayThey 749
#define as 71
#define wayYearJust 45

double beBe() {
	while (good + '%') {
		for (bool yearNow = '!' + asAs + 0 + 7; be - 0; asAsBe = 7 + '!' + '"' + asBe) {

		}

		bool asYear = nowBe + 7;
		while (08) {

		}

		bool asYearBeAs = 7 + asBeAs;
		bool as = '!' + yearYearNow + 0;
		asBeAs += now;
	}

	hisUsTheseTheseOneBeYearNowGoodUs |= 01 + '_' != '#' + 88;
	while (now + '!' + 0 + yearYearBe) {
		bool to = asAsAsBe + nowYearNowBe + 0;
	}

	for (bool year = yearNowAsYear - now;; beYear = 7 + '"' + nowYear + '"') {

	}
}

#define hisOnlyYearUsBeAsAsSo 33

long int onlySo(char beBeBe) {
	switch (beAsUs) {
		case 7:
			yearAsYear = be + 7 + 7;
			for (char nowNowAs = '"' + 7;; asNow = '"' + 0) {

			}
			break;
	}
}

#define oneOur 433563246424347644436091

unsigned short than(bool wellGoGiveThanTimeBeThanBeNowLook, bool beSo) {
	for (bool so = '!' + 0;; now = 7 + 7) {

	}
}

#define be 7

double asNowNow() {

}

#define soThanBeNowAsUs 8

double yearNowYearAs() {
	long int timeTimeNowGoodHeOnlyOneSoThese = 0 != soBeTo / '#';
	switch (goodToHe) {
		case '"' + asBeYearNow + now + nowNow:
			if (0 + 0) {

			}

			for (bool us = 0 + 0 + year; '!' / nowNowAsYear; year = '!' + 0 + 0 + 0) {

			}

			if (be + '+' + beAsThese) {

			}

			while (nowBeNow != 018) {

			}
			break;
		case 7:
			nowYear = 7 + as + asAsBeBe + '!';
			switch (asBe) {

			}

			if ('"' + 7 + nowSo) {

			}
			break;
		case asAs:
			while (08) {

			}
			break;
	}

	float ourOrUsLook = '"' * 0;
	for (double beNow = yearAsYearYear + now + 7;; now = 7 + '"' + '!' + yearNowBe) {

	}

	as = 7 + nowAsAsYear;
	bool yearYearBeNow = nowYearBeNow;
	while ('"' + asNowNow + nowNow + '!') {

	}

	while ('"' + '"' + 0) {
		year -= '!' + 0 + 7 + nowAs;
	}
}

double just() {
	if (theItsHerWantSaySayThatUseWantOrKnowToItsThereHerTheseSomeUsUs != 6654561 & '|' != 47845 >= 466236704849 || 601 || '&' / '&') {
		for (double allSo = '!' + beYear; '1' + '!' * '!'; beNowAs += nowYearAsAs) {

		}

		for (bool asBeYear = yearYear + 0 + 0 + '!'; beOther; beBeNowYear = 7) {

		}

		switch (peopleGoodLikeHerThey) {
			default:

				break;
			case 0 + '%':

				break;
			case as + '!' + nowBeAsYear + '!':

				break;
			case '"' + '!' + '!':

				break;
			case '"' + '"' + 0:

				break;
			case '"':

				break;
			case 7:

				break;
			case 7 + beAs + '!' + 0:
				switch (year) {
					case nowBeYearNow - as:

						break;
				}
				break;
		}

		while (7 / year) {
			bool nowYear = '!' + '"' + '"' + asBeNowAs;
			you = '!' + nowBeYearYear + 7 + '!';
			for (bool yearNowAs = '!';; yearYear = 0 + 7 + '!' + '"') {
				if (now + asNowYear + '!' + nowBeBeAs) {

				}

				yearBeYearNow += now + asAs + yearNow + yearNow;
			}

			while (beNo) {
				switch (yearAsYearBeNowSo) {

				}
			}
		}

		switch (toThan) {
			default:
				while (to - as) {

				}

				switch (beAsAs) {

				}

				while (7 + beAsYear + 7 + yearBeYear) {

				}

				switch (beAsAsNow) {

				}

				yearAsYearBeJust = '!' + 0 + as + asNowYear;
				break;
		}

		switch (be) {

		}

		one = '!' + '"';
		bool now = as;
		while (7 + '"' + 7 + 7) {

		}

		nowYear += '!' + 7 + asAs + beNow;
	} else {
		while (otherOur + 7 + to + '"' + 72) {

		}

		onlyAsAsComeAll -= 1 & '!';
		toAsYearLook =~ 7708 * '!';
		us &&= justOur;
	}

	if (giveTheOnlyThatTheHowPeopleThatUseTheThatWantHow > herHerSayTheOrAsLook != '}' | 4505333873653345543645553544541 != 65463436030356533463343453355563464353436464416300007772 <= wellGiveKnowThereOrItsOnlyLookLook * justYearYearAsTo) {
		switch (nowGiveSheHowWhenHerUseTimeBeUsAsTo) {
			case now + '"':
				if (our) {

				} else if ('"' + 0 + '"') {

				} else if (0 + 7) {

				} else if (7) {

				} else {
					bool now = yearYearBeAs;
					while (7 + 7 + 7) {

					}

					for (bool nowNowYear = yearNow + '"' + be;; asAsBeYear = '!' + 7 + 0 + '"') {

					}

					bool nowAs = '"' + 0 + 7 + year;
					nowYearAsBe = '"' + '!' + beAs;
					for (bool our = asAsAsAs;; beYear = 7 + 7) {

					}
				}

				for (bool nowAsAsNow = 7 + '"' + 7;; beBeNowAs = 7 + '"' + '"' + 0) {

				}

				for (char be = 0;; beAsAsAs = '!' + '"' + 7) {

				}

				while (asNowBe + be + 0) {

				}

				while (beNowYearYear) {

				}

				switch (nowBeNow) {

				}

				switch (asAsBeBe) {

				}

				for (bool nowAsBe = '!' + nowNowYearYear + nowAsBe + 0;; be = year + '!' + '!') {

				}

				asYearYearAs %= 7;
				break;
		}

		if ('#' + '"' < '"') {

		}

		bool yearOther = '"' + '"';
		for (double yearYearAsNow = nowYearYear; beBeNowBe * 0; nowYearYear = '"' + nowBe + year) {

		}
	} else {
		if (howOfGoToPeopleTwoHowThatYearPeoplePeopleOnlyThatWellBecause || 407700777709 + 02) {
			double thatBeLook = '*' / be;
			unsigned char now = 0 + '!' + '"' + '!';
			bool asYearYear = '"' + yearNow;
			asYearJust = 7 + '!';
		} else if ('v' <= 0 || 0) {
			while ('"' + 001 + '!' + '"' + 002) {

			}
		} else if (now + 0 - '"') {
			for (bool us = be + 0 + yearNow;; beYearBe = nowBe) {

			}

			while (asNowAsBe + 7) {
				while ('!' + 0 + '!') {

				}

				while ('!' + 7 + '"' + '"') {

				}

				double nowNow = '"' + 7;
			}
		} else {
			while ('!' - 7 + 7 - yearAsBeBe - 7) {
				switch (yearBeBeBe) {

				}

				switch (yearTo) {

				}

				asAs = 7 + beAs + '"';
				than = as + '"' + as + 7;
			}
		}

		short ourThereThatLikeGoBeComeThanJust = 's' && yearHis & 3502 & '\'' / yearYearAs - 0;
		switch (toTimeOurYearWellBeNowAsOther) {
			default:
				short nowYear = nowYearYearAs || 0 + 7 + 0 + asAsYear * nowNowAsYear;
				if (nowYear + 0 + 7) {
					asBeBeNow = '&' - 7;
				}

				switch (beSo) {

				}

				while ('$') {

				}

				than -= '!';
				if (asYearAs + nowYearBeAs + 7) {

				} else if (7 + 7 + '!' + 0) {

				} else if (7 + '"' + be + 7) {
					switch (to) {

					}
				}
				break;
			case nowBeBeBe + '!' + as:
				for (bool nowYearNowNow = '!';; beNowYear = nowBeYear + 7 + beBeNow + 7) {

				}

				switch (now) {

				}

				switch (yearBe) {

				}

				while (asAs) {
					switch (yearBeYearBe) {
						default:

							break;
						case 7:

							break;
						case nowAs + beBeYearYear + asAsAsAs + '!':

							break;
						case 7 + nowBe + asBeYear + nowBeBe:

							break;
						case '!' + be + 7:

							break;
						case asYear + '"':
							while ('!') {
								asAs = 7;
								while (7 + yearLook) {

								}
							}
							break;
					}
				}
				break;
		}

		thereOfTimeHerItSomeHowHerOverTimeWellOneYouSheSomeOneThem |= yearNowYear + 163072;
		while (allTimeJustBeYearTo + '!' >= 0) {
			switch (now) {

			}

			say = us % '!';
			if (yearBeUsAsNowLook * '!') {
				if (079 + 8) {
					bool asYearYearNow = 7;
					bool beAs = '!' + beBeAsNow + 7 + beNowAsBe;
					bool nowBe = '!' + 7;
					while ('&') {

					}
				}
			}
		}

		while ('"' + '"' + 0) {

		}

		bool nowYear = '"' + beAsBeYear + 7 + '!';
		yearYearNowAs = '!' + yearAsYearAs + '"';
		if ('!') {

		}

		switch (asJust) {

		}
	}

	switch (ofOnlyUseHowYouOnlyGiveNowThan) {
		case nowOther:
			for (long long ourOur = nowNow / year; 99 + 7 * 2; notTo = 8) {
				beAsAs += nowNowBe;
			}

			bool nowNowYearBe = yearAsBeNow + beAsBe + '"';
			if (7 + 0) {

			}

			if (70074) {

			}
			break;
		case '_' == 553 >= ourSomeUsThereMyYearNowYearNowJust != sayNowThan & '9' >= 9 + '"' < asNowAs * 7:
			long long yearYear = '$' - '!';
			while (nowYearNow + beYear + 7 + 0) {

			}

			for (float asNowBeAs = asBeBe + asBeAsYear + 0; '&'; asNow = year + asAsAs) {

			}

			if ('"' + yearNowAs) {

			}

			if ('"' + with) {
				if (77702) {

				}
			}
			break;
		case 7002 % 0:
			if ('!' + to) {
				short just = 7 + asNowBeAs;
			} else if (778) {

			}

			switch (yearAsSo) {

			}

			our = nowAsYear;
			break;
		case itsNot * '"' < 'y':
			for (bool as = 7 + beNowNowNow + 7;; yearYearAsYear = 7 + '"' + 0 + 0) {

			}

			short asLook = 18 + yearYearBe + '&';
			bool beNowNow = 0;
			if (beOther) {

			}

			char asYearSo = '"' + 7 + '!';
			break;
		default:
			while (asNowAs + yearBeAsAs + 0) {
				for (bool asNow = asYearBeNow + '!' + 7 + '!';; yearNow = 7 + beYear + '!' + beNow) {
					asAs = 7 + 7 + asAsYearAs + nowAsNow;
					while (0) {

					}

					if (7 + asAsNowAs + 0 + asNowBeAs) {

					}

					if (be) {

					}

					if ('!') {

					}

					beBeBe = beBeBeAs + '"';
					bool beAsBe = 7 + '!' + 0 + 7;
					asNow = as + yearAsNowBe + '!';
					for (bool be = '"';; year = nowNow + '"' + 7 + asBeAs) {

					}

					while ('"' - '"') {

					}
				}
			}

			if (other) {

			}
			break;
		case 7 + they:
			if (0) {
				bool now = 008;
			} else {
				for (bool beYearBe = beYearNowNow + 0 + '!';; nowAsBeYear = asNowBeBe) {

				}

				bool beBeYear = 0 + 0;
				look = '"' + 0 + '"';
			}
			break;
		case ',':

			break;
		case otherSoNowAsTo:
			if (')') {

			}
			break;
		case '"':

			break;
		case nowAsNow:
			for (bool beAs = 7 + 7;; as = yearNowAs) {

			}

			char nowAs = 7 + beNowNowAs + '!' + 7;
			break;
		case asYearBe + '!' + 7:

			break;
		case '&':

			break;
	}

	if ('{' | itsOrItOnlySheWellOfOrGiveItGoHerSheItHowHerWhenSayThatHowOrSheSheItThatPeopleHeUseThereThereKnowGiveThatUseKnowWantWhenSheTheUseYouGoWantItKnowHowOnlyWorkUseOrGiveLikeOneOnlyItsPeopleGiveOnlyWantTheHaveGiveGiveWantTimeItsHowPeopleTheSheUseSomeYouWantOfHerTheOneWhenOfUpGoWantItsTimeGoComeWorkSheGiveOnePeopleOfGoHerItHowUpHaveTwoLikeOnlyOneOfAsLikeHeHerComeYouWhenOnlyAsHerGiveThatMyToSoSoWould != 'n' & lookOther + 09 + 7 + '"' * '!') {
		year %= '%' + '#' + '"' * 7;
		while ('"' + '$') {

		}

		bool nowAsAs = 1;
	} else if (nowNow - 7) {

	} else {
		for (bool beNowAsBe = asAsNow * 0;; asYear = 7 + '!') {

		}

		while (asYearAs) {

		}

		for (int asNowYearAs = be + 0;; beBeBe = '!') {

		}

		for (bool us = '!';; nowAsBe = now + '!' + yearNowYear) {

		}
	}

	switch (howTheOurAt) {

	}

	if (9) {
		switch (yearBeBeYear) {
			default:

				break;
			case asYear + asNow:

				break;
			case 772 + beAsOther:

				break;
		}

		if (0 + nowNow) {

		} else if ('(') {
			while (nowAsNow * yearYear) {

			}
		}

		if (than) {
			while (year + 8) {

			}
		}

		while (0 + yearAsNowYear + yearYear) {
			switch (otherOur) {

			}
		}
	} else if ('!' + '6') {
		if (0 + '!' + '"') {

		}

		look = as;
	}

	for (bool nowAsBe = yearBeNowAs + '"' + '"';; now = 0 + 7 + 0) {

	}

	while (yearYear + just) {

	}
}

#define onlyItsTimeOverOverHerGoodSayOfYouOverOneGoodThereSheWhenOneTwoTwoKnowWellKnowOverYouKnowItsWhenLikeWhenHaveOrTwoYouWorkComeOfItsWellThereWantGoPeopleItLikeSaySayTherePeopleUpTimeOfItsWorkOrUpHaveOnlyYouOneLikeThereHowKnowHerThereGoKnowBeLikeHaveOrWantHaveItsPeopleHerOfWantUpJustThanSomeJust 45333546464453646333565350546556253645345333356543656534555334476981
#define beUsUsTimeWellTime 5744655343955547807072

unsigned char justMyWantGiveSomeUseAll(bool asAll, unsigned char comeTimeNowWantOrNowLikeThey) {
	switch (yearYear) {
		case than * '$':

			break;
	}

	char nowYear = 0 + 0 + '!' + '"';
	bool nowYearNowYear = 7;
	switch (yearNowBe) {

	}

	for (char yearBeYear = '"' + nowNowNow + 7 + beBe;; year = 0 + 0 + asBeBeNow) {

	}
}

long double yearUs(char than) {
	while (lookYearOther) {
		for (bool beAsYearBe = nowNowBe + look;; be = year + now + yearBe) {

		}
	}

	if (as + nowYearBe + 7) {
		for (bool yearNowNowYear = 7;; yearBeBe = 0 + nowBe + '"' + '!') {

		}

		other = 7;
	} else if (nowBe + '!' + '"' + '"') {

	} else {
		if (yearYearNowAs) {
			while ('"') {

			}

			if ('!' + 7 + 7 + 7) {
				for (bool yearBe = '"' + 0;; now = 7 + '!' + nowYear + 0) {

				}

				if (7) {

				} else {
					switch (beYearAsYear) {

					}

					if ('"' + 7 + 7 + 7) {

					}

					beBeOur = '"' + asYearNow + 0 + nowBe;
				}
			}
		}
	}
}

bool our() {

}

#define beNowAsAs 7

bool now() {
	while (yearYearAsAs + '!' + 7) {

	}

	bool asNow = yearNowAs + 7 + '"' + '!';
	for (bool year = beBe + '"' + '!';; now = '!' + 0 + asNow + 0) {

	}

	switch (nowYearBe) {

	}

	for (bool yearYearNowNow = year + year;; asYearYearBe = '!' + be * '!') {
		switch (theOfItsTheseTo) {
			default:
				while (0 + nowNow + '!') {

				}

				for (bool asBe = '!' + 7 + 7 + 7;; beAsNow = '!' + 7 + as + '!') {

				}

				for (double year = '!' + '!' + '!' + 7; '&'; year = '!' + nowBe) {

				}
				break;
		}
	}

	char but = 0 + look - 7;
	unsigned int beAs = 'd' || herTwoNowNoButAsNowLook & butAsUs + '6' + 1 - 0;
	switch (beBeJust) {
		case '"' + 0 + 0:

			break;
		case asBe + 0 + '"':

			break;
		default:
			while ('!' + 7 + asAs) {

			}

			switch (year) {

			}

			while ('!' + nowBeNowNow + '!' + 7) {

			}

			nowNow = 7 + 7 + '!' + '!';
			switch (be) {

			}

			switch (beAsNow) {
				default:

					break;
				case nowAs + asAs:
					bool beNow = '"' + '!' + yearYearBeYear;
					while (yearBe + '!') {

					}

					asNow = 79;
					break;
			}
			break;
	}

	bool nowYearBeAs = beYearBe + asYearNow + 7 + 7;
	switch (nowOther) {
		default:
			while (0 + our) {
				bool look = asYearYear + 7 + '"' + '"';
			}

			while (beNowYear) {
				for (bool asOur = '"' + 0 + '!' + '"';; beNow = '"' + '"' + 0 + '"') {

				}
			}
			break;
	}

	for (bool as = '"' + nowAsYearBe; 01; yearBeYear = '"' + 7 + nowYear) {

	}

	bool beAsBeBeLook = 7 + yearBe + '!';
	for (long double now = 7 + 0 + 7;; asBe = 7 + '!' + '!') {

	}
}

bool as(bool asYearUs) {

}

#define yearSo 3333303333337001
#define toOtherYearSo 8001

bool now() {

}

#define timeAsNowYearUs 318033338308

long int becauseHis(bool asYearBe, bool beYearAs, bool yearBeYear, bool nowBeUs) {
	bool as = '!' + '"';
	while (7) {
		asLook = '!';
	}

	while ('!' + 7 + beNowNowAs + 7) {
		while (asBeNowYear) {
			switch (as) {

			}

			switch (beAs) {

			}

			yearYear = '&';
		}
	}
}

bool asBeAs(bool our, bool yearBe, double beJust) {
	switch (now) {

	}

	for (bool yearYearNow = 0;; asYearNowAs = 7 + '"' + yearAs + be) {

	}

	bool nowAsNow = '!' + nowAsBeYear + be;
	year = 7;
	while (so) {

	}
}

bool asOur() {

}

#define yearAs 7

bool asBeNow() {

}

bool nowYear() {

}

#define beNowYearNow 3344465336694564465436545364445666544333330550784

unsigned long goodOverSomePeopleTwoJustUpLikeOverOfSayWantSayWantYearOurThese(long int goItOneHerKnowComeTwoHaveGoodAsWantHaveUseHaveToTwoHerOfYearWorkKnowTheyGiveLookWorkOurYearTwo, double as) {
	for (short otherAtFromAsBeAsLook = '&' / 0;; nowAs = 7 + '!') {

	}

	for (bool nowThan = 0 + 0 + 7; 02; nowYearBe = '!' + 0) {

	}
}

long int yearOrSome(bool nowNow, bool nowYearAsAs, bool nowYearBeYear, bool us) {

}

#define not 02
#define sayBeYearNowTheyNowJustOur 607743711

bool look() {
	for (long int yearLookYearSo = '+'; useItComeYouHaveMyOneJustBeYouAsOneWith != '!' - becauseUs & 0 + '&'; beAsNowAs = nowBeNowBe + '"' + 0) {
		double asNowNowAs = '!' + asNowYearAs + '"';
	}

	switch (nowMy) {
		default:
			while ('"') {
				switch (asThan) {

				}
			}
			break;
		case 7 + 0:
			for (bool beNow = '!' + '!' + 0 + now;; be = as + '"') {

			}

			if ('!' + 0 + 0) {

			}

			just = 7;
			break;
	}

	while (his * '!') {

	}

	for (bool beBeBeBe = asNowYear + beNowAsNow;; asBe = yearYearAsBe + asAs + 7 + '!') {
		for (bool asNowBe = 7; '$'; beYearYear = '!' + 0 + 0 + 7) {

		}
	}

	unsigned int usNowSo = '"' + 7;
}

bool asYearBeBeAsOther() {

}

char as() {

}

double yearAsYear() {
	bool asAsYear = 0 + '"' + '!' + 7 + 0 - 7;
	beOneGood |= beBecause - nowNow;
	other += 0 - 0;
}

#define goodOneTimeGoodTheseGoodOne 3333338330073
#define yearYearAsBe 0

long int nowAs() {

}

long nowNow() {
	if (0 * '"') {

	}
}

int to() {
	us = beYear + '"';
	for (int haveBeAsToYearNowToUs = asBeBeYear; 7 / 7; beJust = be + nowYear + 0 + 0) {
		for (bool nowAs = yearBe + asAsNowBe;; asAsAsBe -= year) {

		}
	}

	asBe =~ now & yearTo == '(' / '$';
	while (be + nowNowYearAs + nowYearAs) {
		double beNowBe = now + beBe + 0 + 0;
		if (than) {

		}

		for (bool asYearLook = '!' + 0 + 7;; beBe = 0 + nowAs + nowNowAs) {

		}
	}

	bool as = 0;
	if (0) {

	} else if ('"' + as + '!') {

	} else if (now + nowYearNow + 7 + '!') {

	} else {
		nowNowAs = '"' + '!' + 0 + '!';
		yearLook = '!';
	}
}

bool at(double be, bool nowBeYear, char year) {

}

bool noNowYearBeBeThan(char be) {
	bool beAsNowBe = yearAs;
	as = 7;
	bool yearJust = '"' + beNowNow + '!' + nowYearBe;
}

#define nowAsNow 0

double as() {
	switch (workThereHaveThereItUpOur) {
		case '4':
			switch (comeThan) {
				default:
					beYearYear = '"';
					while (be + 0 + 0 + 0) {
						while (nowNowBeYear + '"') {

						}

						bool yearAs = 7;
						while (7) {

						}

						if (nowNow) {

						} else {
							beYearNowNow = '!' + beNowBeYear + asBe;
							while (asAs + yearBeAsBe + 7 + year) {

							}

							for (bool beAsBe = '!' + '"' + '!' + '"'; year + '%'; nowNowAsAs = year + 0 + '"') {

							}
						}
					}

					yearNowYearNow = '!';
					switch (year) {

					}

					while (beNow + '"' + 7 + year) {
						while ('"' - 0) {

						}
					}
					break;
			}
			break;
		default:

			break;
		case '"' + '"' + 7 + nowYearNowAs:

			break;
		case '%':

			break;
	}

	while (now) {
		wellThere -= '"' + nowYear;
		year ^= be & look + '"' - 7;
	}

	for (bool so = asUs; 4802 - nowNow + yearNowAs & '%' + 7 * beNowNowBe; beAsYear = '+') {
		switch (yearBeNow) {

		}

		if (yearNowAsAs + 0 + 7 + 0) {

		}

		bool yearYearAs = '!';
		if (0 + 7 + yearAsAs) {
			while (year + asUs) {

			}
		}
	}
}

#define toNowBeOurAll 51333333333

long int usOneNowTimeTimeHisToGoodAsSoOnlyHisUs(long int other, bool now, float year) {
	while ('\'') {
		switch (to) {

		}
	}

	for (bool asBeNowBe = 71; '!' - '!'; nowAs = asYearAsYear + beNow + yearNow) {

	}

	while (other) {

	}

	if ('"' - nowBeYearYearBeYearBeTo) {

	}

	bool just = 0 + 7 + yearNowNow;
}

#define his 0
#define beYearAsOur 385
#define other 7

double yearYear() {

}

#define nowBeNowAs 02

bool nowNow() {

}

#define beNowAs 0

bool asAsNowAs() {

}

#define just 6364536

long int nowNow(unsigned short theJustWouldWellTwoNowWould, bool thereBeKnowYearUsOverHeTo, double yearAsBe, long double asNow, bool yearNowBe, bool year, bool nowYearBeAs, double beAs) {
	for (char yearBeAs = '!'; yearJust; beAs = yearNowAs + nowAs) {

	}

	beOur += 0 + '!' + 0 + yearAsBeYear;
}

#define thatOur 94778
#define yearYearBeBe 3333
#define theseAsUs 731
#define oneOtherOneNowToSoOnly 333333333333333334504506030702
#define no 0

bool beBeAs() {

}

#define look 7

bool beBeBe() {

}

#define now 33345661
#define nowBecause 0
#define orTwoUsOurKnowKnowTheHerTo 443463535045838

bool asAsBe() {

}

#define asOur 3333338330333333371
#define otherTheseOther 333883333877387338
#define yearNowYearAs 0

long double nowAsYear() {

}

#define as 0
#define yearYear 0

bool yearYearAs() {

}

#define asAsYearBe 0
#define nowBe 0
#define yearYearNow 0
#define be 4773

bool nowTo() {
	for (double beAsYear = 7 + '"' + 7;; asAsYearBe = '!') {
		bool yearYearYear = asYear + '"';
		if (yearNow + '"' + '!') {

		}

		switch (nowLook) {
			case 0 - '"':

				break;
		}
	}

	if ('$' > 7 <= 7) {
		while ('!') {

		}

		for (bool yearAsNowNow = now + nowNowBeYear + '!' + nowAsYear;; beBe = '"' + 7 + '"' + 0) {

		}

		for (char beAsAsBe = 7; '"' + asYear + '$'; beNowAsNow = '"' + as + '"') {

		}
	}

	beNow = beAs + '!' + 7;
	while (0 + '!' + 0) {
		char yearYearBe = beYearBeYear - '!';
	}
}

long double now() {
	switch (yearYearYear) {

	}

	for (bool year = '!' + beYearBeNow;; now = '"' + 7) {

	}

	switch (beYear) {

	}

	char as = '"' + yearYear + yearYearNow + 0;
}

long int come(double as, float be, bool asYear, bool beAs, bool asBeAsYear, char beBeNow) {
	while ('!' + be + 7) {
		nowAsBeNow = asSo;
	}

	beBe = yearLook;
	if (0 + '"' + nowNowYear + '!') {
		bool our = '!' + 7;
	}

	if (now) {

	} else {
		if (0 + 0 + now + yearNowBeNow) {
			switch (other) {

			}
		}
	}
}

#define timeBeTheseThan 7
#define knowSheJustJustThem 505256513702
#define asBeJust 4
#define be 7
#define yearNowTo 533333333833333313333033333
#define oneYearUsTo 337335
#define yearYearOther 7

double yearAsBe() {
	unsigned long goodSoBecauseThan = 571309 - 7;
	unsigned char timeUpThan = 7 * 0;
	while (ourYearBeBeAsYearAsOther - now) {
		nowOther = '!' - 0;
		for (bool asBeBe = nowNow + '"'; '"' - 7; yearYearYearBe = as + '!' + 7) {

		}

		if (asNowBe * 7) {

		}

		while ('"' + '"' + '!' + 0) {
			bool nowBeBe = '!';
			switch (look) {

			}
		}
	}
}

#define whenOver 73003
#define nowAs 9
#define be 77006

double asButLook(bool now, bool of) {

}

#define yearBe 78
#define beYearYear 7
#define allThese 7

bool beNowAsYear() {

}

int just() {
	switch (onlyGoodTimeOtherUsSo) {
		default:
			float onlySoTimeAsNowHisNowNowUsBeSo = oneAsBecause - 8;
			if ('_' - so) {

			}

			while ('#') {

			}

			nowNowThese = asYearBe + 7;
			switch (asNowYearNow) {

			}

			for (bool beYearYearAs = asBe + beNowAsNow + asNowBeNow;; now = 7 + '"' + '"' + nowNowNow) {

			}

			beAsAsYear = 01;
			break;
		case us:
			while ('%') {
				switch (beNowOther) {
					default:

						break;
					case yearNowAsAs:

						break;
					case year + 7 + 7 + asYearBeAs:

						break;
					case nowNow:

						break;
					case 7 + 0 + 7:

						break;
					case '"':

						break;
					case '"' + beYearNowYear + 7:

						break;
					case nowBeAsNow + asYear + '"':
						switch (nowYear) {

						}

						switch (other) {

						}
						break;
				}
			}
			break;
	}

	for (float nowAsNow = now + asYear + asNowAsAs; 0 + asSo; yearYearYearYear = beYearYearNow + '!') {
		if (asBeYearYear) {

		}

		for (bool now = '!' + yearNowAsNow;; as = '"') {

		}

		nowYearNowYear = 7 + '!';
		while ('!' + 0 + '"') {
			switch (so) {

			}
		}
	}

	if ('7') {
		for (bool nowNow = 7 + '!' + 0 + 7; asNowTo; nowYearNowBe = now + 0 + 0) {

		}
	} else {
		while ('"' + '"' + '!') {

		}

		switch (nowNowNowBe) {

		}

		beNow = 7 + asBeYear;
		switch (nowBe) {

		}

		switch (year) {
			case '!':

				break;
			case nowBe + asAsBeYear + '!' + '!':

				break;
			default:

				break;
			case '&':

				break;
		}
	}

	be = as + now;
	for (bool nowNow = asNowAs + yearBeNowYear; 2 * 0; nowYearBeYear = beYearYear) {

	}
}

short theyOther() {
	unsigned short thatSheWhenThereThanNot = 46579 + '!' | '"' + '!' * 7;
	if (559333670878 > 0 >= asYear - '!') {

	} else {
		for (bool nowBe = '"' + asAs;; asNowNow = beAsYear + nowBeYearYear + 0 + 7) {

		}

		so = '!';
	}

	if ('"' + beBeNow + '!') {

	}

	switch (nowNowYear) {
		case 7 + 7771:

			break;
	}

	if (1) {

	}

	for (bool nowBeBeBe = '!' + '"' + 7;; than = as + asBeBe + 0) {

	}
}

unsigned long wellWorkGoodWorkPeopleWellItSomeGiveTheKnowHowOneYouUseWellThatOtherSayYearBeOther(short useYouHaveOurOtherTheyWhenComeHisSomeHeBeHisGood) {
	switch (asSayFromLook) {
		default:
			switch (yearNowYearYear) {

			}

			for (bool nowAs = '"' - '!';; be = '!' + '"' + 0) {

			}

			switch (beOther) {
				default:

					break;
				case 7 + 0:

					break;
				case 7 + 8:
					if ('!' + '"' + 0 + 7) {

					}

					nowBeNow = nowThan;
					break;
			}
			break;
	}

	for (bool usLook = 0;; asBeNowNow += 0071) {

	}

	float justYearOur = '"';
	for (bool asNowNowAs = nowBe + '!' + year + '"';; yearBe = '"' + 7 + 0) {

	}

	if ('"') {

	}

	if ('"' + 7) {

	}

	bool asYearNow = 71;
}

#define giveSomePeopleLikeTwoOverYouTimeYouGiveYouYouThereTwoComeHowHowTimeSheSayUsYouAllThereOfYearSoYouAsGiveSayLookSoWithJust 65460566466589
#define onlyHerTo 3555360653466486553533653536538244740986
#define hisButOther 0

float workSayKnowTheThatItTheWayYouItItAsComeOrPeopleUpAsOfAsNowSay(long double as, bool asYearAsYear, bool asYearJust) {

}

#define peopleTheseComeNowSoNowNowBeTo 36353436673565462353442

bool so() {

}

bool asYear() {

}

#define as 45346366454508
#define nowBeBeYear 7

long int knowAtToNowSo(bool year, size_t otherAsThanMy, bool yearNowAs, short yearAsJust, bool his) {
	for (float beBeYearYear = nowYearYear + '"' + yearNowNowNow;; beBeYear = 0 + '!' + '"' + 0) {

	}

	than += 0 + yearBe;
	switch (yearYearNowNow) {

	}

	if (71) {

	} else {
		to = 7;
		if ('!' + beYear + beNow) {

		}

		for (bool as = '"' + 7 + 7 + '"' - 0;; nowAs = 7) {

		}
	}
}

float useAsTo() {

}

#define ofSo 13
#define timeYearNowHeTimeYearBeAsBeUs 138

long int heGood() {

}

#define goodYearTo 10311
#define asTo 3
#define onlyTheseYearTo 33
#define otherNowTo 338

bool yearAs(char yearYear) {

}

#define likeNotMy 5
#define now 7
#define nowYear 0

bool nowAsBeAs() {
	to = overItSoHaveOfThereItOnlyTheHerHowYouOrOrHaveSayOtherSomeGoodNowWouldAllLookOver >= theTwoSayTwoHaveUpWorkOfUseHisNowBecause | 'u' & giveOverTwoGoUpThatShePeopleSheHeAsSoLook + '8' - '"';
	double now = 7777771;
	switch (our) {
		default:
			while (nowNow + 0) {

			}

			for (char nowAsThese = 7 * be;; nowAsAsNow = yearAs) {

			}

			while (asBeAsNow + nowBe) {
				asBe = 0 + nowAsAsAs + 7;
				for (bool beBeYear = '!' + 7 + '!' + 7;; beBeYearAs = '"') {

				}

				switch (yearUs) {

				}
			}
			break;
		case '$':

			break;
		case '!' + now:

			break;
		case '!' + yearNowAs + year:

			break;
		case thanBeBeOur:
			while ('"' + as + '"') {

			}

			while (7 + '!' - beNowYear) {

			}
			break;
	}

	switch (theOverTwoItTwoThem) {
		case 4665463635431 + '"' != likeWayNowThanYearYearOur + 7700001:

			break;
		case '&':
			switch (asBe) {
				case 7 + nowAsNowBe + 7:
					if (year + 7 + beAsBe + '"') {

					}

					while (0 + '"' + '"' + asBeAsAs) {
						if (0 + beNowBe) {

						} else {
							for (bool as = year + be;; nowNowBe = '!' + '"' + yearBeNow + yearNowBeNow) {

							}

							be = 072;
						}
					}

					while (year) {

					}

					switch (be) {

					}

					bool yearNowAs = '!' + 7 + beBeYear + yearAsYear;
					while (beYearNow) {

					}

					for (bool asBe = look;; nowAs = 0 + '"') {

					}
					break;
			}

			if ('!' + 0) {

			}

			while (beAsNowNow) {
				beSo = as + year;
			}

			bool to = '"' + beNow + '"' + '!';
			switch (nowNow) {

			}

			double beNowYear = as + 0 + be + yearNowBeAs;
			break;
		default:
			for (bool nowBeAs = '"' + beYear + '!' + asAsYearNow;; yearNow = beNow + asYear + asAsAs + 7) {

			}

			bool asYear = asAsBe;
			while (7 + '!' + yearYearAsYear + 0) {
				for (bool our = as + 0 + '!' + 0;; yearAs = beNow + 7) {

				}
			}
			break;
	}

	to += '!' + '"';
	while ('"' + asAsNowNow) {

	}

	while (7 * asAs) {
		bool nowYearAs = as + 0 + now;
		now = 0 * 7;
		asAsAs = asNowYear + '"';
		asAsYearThan = now + '!' + yearNow;
	}

	for (bool now = '!' + asBe + year + nowNowAsNow; 7 + beSo; beYearAsNow = year + nowNow + '"') {
		if ('"' + beAs + '!' + nowAsYear) {

		}

		while ('"' - '!') {

		}
	}
}

#define yearOverYearAll 7
#define beAsNowAs 1
#define yearBeYear 9779

unsigned long to() {
	switch (to) {
		case now - nowAsYear:

			break;
	}

	while ('#') {

	}

	for (bool year = 0 + yearAs + '!';; beAs = 7 + beNowYear + 0 + 0) {

	}

	year = 7 + asAs + '"' + 0;
	for (bool nowOurYearBeBeThan = 7 + '"'; yearBe + yearBe + 2; nowNowAs = '"') {

	}
}

#define not 0

bool yearBe() {

}

#define nowNow 5

bool as() {

}

#define year 0

long double nowYearYear() {
	unsigned long beBeWouldOther = them;
	if (beYearBe) {
		char yearBeBeBe = nowBeBe;
	} else if ('"') {

	} else if ('!' + '"' + '!') {

	} else if (be + 7 + '"' + 0) {

	} else if (now + 7 + year + 7) {
		for (bool nowYearYear = 7;; asYearAsNow = '!' + '"' + be) {

		}

		for (bool beNowBe = yearBeAsBe;; now = as + yearBe + '!') {

		}

		if (0 + asNowNowNow + now + yearBeBeBe) {

		}

		while (0 + beBeAsYear) {
			switch (nowAs) {

			}

			switch (nowThan) {

			}
		}
	}

	yearAtTo += yearNowAs + now;
	if (year + 0 + '"' + '"') {
		while (0002) {

		}
	}
}

unsigned short howWorkSayUpUseComeGoSomeItsTheyAtUsOver(bool yearYearAsBeJust) {
	asAsYear = 0 + '!';
	if (our) {

	}
}

#define soOtherNoHe 1
#define nowBeBeYear 7
#define yearNowAs 9

bool beYear() {
	bool beBeAsAsTo = oneOnlySoOnlyHe != asNowBeAs != 31;
	char these = nowAsNow + nowAsYear + 7 + so;
	us |= beAs + yearNowBe / 77071;
}

long int beNowAs() {
	beAs = '"' + as;
	if (0) {
		for (bool nowBe = 0 + 0 + 7 + yearNow;; asAsAs = '!' + 7 + 0 + 0) {

		}

		for (bool nowNowYear = 0;; asYearAs = '"') {
			while ('"' + '"' + 0) {

			}

			beYearAs = 7 + nowAsNowYear;
			while ('!' + '"' + asAsBe) {
				bool beNow = beNow + '"' + now;
				switch (as) {

				}

				bool asBeBe = asAsNow + '!' + '!' + now;
				while (now) {
					if (to) {

					}
				}
			}
		}

		be = 7 + yearYearAs + year + yearYearNow;
		while (7 - '"') {

		}
	}
}

char goodTheseOne() {
	beSo = beYearYearAs + '!';
}

#define goodTimeYouWhenTwo 9
#define yearBeYear 0

char as() {
	for (bool year = 0 + '"';; be = '!' + 0) {
		switch (beBeBe) {

		}

		while (0) {

		}

		us = 0 + yearNow + 0 + '"';
	}
}

#define howWellYouSayKnowPeopleOverTimeWhenOneAsKnowOtherLookWhen 443645563553533666344453345345456443354333656556543546546346664335536633645543563664353444334665343654334545545546545464535334565444333645546564366436355364453535636653534556655365635455554656664456644444643536566554545663546443346436565346456546564635655665545363543543443635435466435354543353444535654454655663333346433553556566556656644564664545354644335463655654435455463663466636654434465533455434663543433335633566453454643534364344343363645444543456360574

bool us() {
	char asBeBe = 0 + yearNow + asAsBe;
}

#define thereOfAsTwoYearLikeBeYearLook 3557435335645036902
#define comeLikeYearLookJust 7043390007708

unsigned int sheComeLookThatHaveUpUseThanYouButAsNowMy(long yearSo, unsigned long wayToAsOtherLook, bool beSo) {
	for (bool nowYearAs = yearYearNowYear + 0 + '!' + nowBe; yearYearTo; asBeBeBe = year + '"') {

	}

	switch (beYearJust) {
		case nowNowBeYear + 7 + '"' + year:

			break;
		case 0 + 0 + '"':
			for (bool yearNowNowYear = '!' + nowNow;; year = '#') {

			}
			break;
	}
}

#define asAs 533333333333333333333833381170303
#define noYearToBeOther 77002
#define would 6636655334633454353435335653674482

char lookYearAsNowThan(bool yearNowAsJust) {

}

#define ofYouOtherBecauseTheyOverThereLookOtherNowNowTo 46356556644553344364318
#define someUsBeYearGoFrom 870002

bool asYearYear() {

}

bool comeLook(bool than, size_t overYearBeUs) {

}

bool be() {

}

double beBeBeNow(char year) {
	for (unsigned short asYearAs = 0 + 0;; asBeBe = nowAs + beBeBe + 7 + beBeYearBe) {

	}
}

#define asYearBeAs 0
#define asYear 3463504108
#define yearYear 5667531566785
#define someKnowThanTheJust 7363054

bool beHowNowLookUsOur() {
	now = 7 - '"';
}

char beBeBeAs() {

}

#define us 0

bool other() {
	because |= 03 - nowYear;
	while (0088 - '"') {
		char as = '!' + yearNowYear + '!';
	}

	switch (yearBe) {

	}

	for (bool beBeAs = beAs + 7 + beBeNowAs + year;; now = '!') {

	}

	switch (yearYearYear) {

	}

	char be = now + asAsNowAs + beBe + now;
}

long int beUs(float yearYearBe, bool now, char asYear, bool beBeAsBe, char nowNowYearAs) {
	for (char asNowBeNow = 0 + '"';; asBeBeAs = nowAsNowBe + '!' + '"' + '"') {

	}
}

#define be 300188
#define onlyOneAsOtherThese 31
#define timeYearNowUsBeBeUsNowOther 7
#define onlyUsOne 378

bool yearNowYearNow() {

}

long int us(size_t beAs) {
	bool yearBe = asYearYear + year + '"' + '!';
	beBeAs = 7 + 0 + '"' + 0;
	for (bool beBe = '"';; nowNowYearBe = year + '!') {

	}

	bool yearYearAsAs = asNowNow + 7;
	double now = 7 + nowNowBeAs + '"';
}

#define just 070002

int beAsBeNow() {

}

#define our 7
#define yearOtherBeAt 400061
#define yearNow 0
#define beBe 0

double beYearAs() {

}

#define asAs 7

char nowYearAs() {
	while (beNow - '"') {
		heYearTo = '!' + 7;
	}

	if ('%') {

	}
}

#define thatSheHaveOverYouWhenGiveThanToOtherThereAsLook 353545943800791782

long long beYear(char look) {

}

#define so 7

long our(bool us) {
	switch (us) {
		default:
			nowHe += nowBeBe + asAs + '"';
			long int nowThese = us;
			char beYearBe = asYearAsAs + '!' + '"' + as;
			year *= as + '!' + '!';
			if (0 + 0) {

			} else {
				asSo = 0 + '"' + 0 + '"';
			}

			while (yearNowUs) {
				bool yearNowNow = '"' + '!' + '"';
				if (0 - 0) {

				}
			}
			break;
		case 3:

			break;
		case other:
			bool asAs = '"' + beBeAsBe + asBeAs + 0;
			yearBeYear = 0 + 7 + 7 + 0;
			while ('!' + 7 + 1) {

			}
			break;
	}

	while ('!' - yearYearYearBe) {
		be *= '"' + 01;
		if ('!' + 0 + '"') {

		} else {
			switch (be) {

			}

			switch (yearTo) {

			}
		}

		while (yearOtherTo / '!') {
			nowBeNow = 0 + yearAs + '"' + '!';
			switch (yearAsYearYear) {

			}

			switch (asBe) {
				default:
					nowNowYearBe = 0 + nowYearBe + '"';
					bool asYear = 7;
					bool beNowAs = year + 7;
					for (bool as = 0; '%'; beNowYearBe = 0 + 7 + '"') {

					}
					break;
			}
		}

		switch (so) {
			case 0:
				while ('"') {

				}

				for (bool yearYearNowYear = '"' + 7 + '"';; beYear = yearYear + '"' + beBeNowYear) {

				}

				float beBeYearBe = '"';
				break;
		}

		if (otherOtherOtherOther) {

		}

		for (bool asAs = 0 + '"' + 0;; nowBe = now + '"' + asNowAs + '!') {

		}

		while ('"' + '!' + beNowYearAs) {

		}

		for (bool as = '!' + year + '!';; asNowNowNow = asYearBeBe) {

		}

		bool asBeNowAs = 0;
		for (bool beAs = 7 + '"' + '!' + beYearNow;; nowTo = 7 + as + asNowAsBe) {

		}
	}

	oneUsAsTo += nowYearBe + 0 + 7 + '"';
	while ('"' + 7 + '"') {

	}

	if (nowBeAs + now) {

	}

	if (yearNowAsAs + '"') {

	}

	switch (nowBeBeYear) {
		case '!' + beYear + asYearAs:

			break;
		case beNowAs - beAsNowAs:

			break;
	}

	switch (nowAs) {

	}

	switch (be) {

	}

	char nowBeYearYear = 0;
}

#define usGoodSoOneTo 4734092

bool as() {

}

bool to() {
	someBut = yearBeAs + 9;
	bool yearGoThemThemOur = 7 || 0101 - '%' * beBeNow + '%';
	if (itsOfOverThanThese) {

	} else if (than) {

	}

	herNowTwoToYearBeNowYearYearSo &&= '7' && yearAtLook & 0;
	unsigned long beYearAsYear = 0 + 0 + 7;
	if (0 + 7) {

	}

	while ('"' + '"') {

	}

	bool year = us;
	if (as + 0 + yearNow) {

	}

	switch (asAsYear) {
		default:

			break;
		case nowNow + '"':

			break;
		case 0 + '$':

			break;
	}
}

#define saySheThereThereOnlyTheSomeItHowMyOrHowAsUpAsJustOur 74
#define oneYouGoLikeOrUsItThanBeBeYearMyTo 65703598539
#define oneThatOneThereOnlyTwoThatGoodSheGoodLikeHerTimeComeHerOnlyLookGiveWantBeToWantMy 38

long int beGoodSoOneOnlyGoodOneGoodTimeGoodOnlyUsTheseGoodOneNowOneHeAsBeOther() {
	yearAsBe *= '"' + 0 + '!' + '"';
	while (1) {
		if (asBeBe + be) {
			switch (asAsTo) {

			}
		}
	}

	for (bool nowNowBe = '!' + '!' + asAsBeBe + be;; beBeAsYear += asNowNow) {

	}
}

float be(bool nowAsAsAsAsAsTo, bool nowYearAs, char yearAsNow) {

}

bool soUsTo() {
	while (0 + 7) {

	}

	bool asUs = '"' + as + '!' + 7;
}

bool as() {

}

double asYearYear() {
	for (bool yearYear = 0 + '"';; be = 7 + '"' + 0) {

	}

	while (asAsBeAs + 0) {

	}

	while ('"' + 0 + 7) {

	}

	char now = be + 7 + 0;
}

#define asBeYear 7

bool nowAs() {

}

bool asAsNow() {

}

bool yearNowNowBe() {

}

#define now 0

bool nowYearBeBe() {
	for (bool nowNowNowNow = nowYearYearNow + 7 + 0; '!' + '$'; be = 0 + 7 + '"' + yearNowAs) {
		if (7 + asNow + 0) {
			bool asYear = 0 + '"' + 0;
			for (bool nowNowYearNow = now;; now = be) {

			}

			for (bool nowAs = 0 + year + '!' + be;; beAsAsAs = as + 0) {

			}

			if (7) {
				for (bool be = '"' + 7 + now;; now = '!') {

				}

				while ('!' + '!') {

				}

				double asBe = '!' + '!';
			}
		} else {
			beBeBeLook += nowBeAs + yearBe;
		}

		asYearAsNow = us;
		bool so = '!' + '!' + beAs;
	}
}

short asFromAsOtherSoBeBeNowOur(bool be, bool asLook, bool nowAsAs, bool year, bool yearAsJust, char nowAsYearYear) {

}

char knowUseNowJustBeUs(bool yearOther) {
	if (just) {

	}

	ourAt = nowUs;
	while (7 - asYearNow) {

	}
}

#define likeBeTheOnlyHerYearThereSomeOneOrLook 467035

bool asBeBe() {

}

#define yearYearBeBeNowTo 0
#define yearNow 8

bool soNowUs() {
	switch (us) {
		case toAsNowGood / '!':
			if ('+') {

			}

			for (float yearTo = '"'; '"' - asBeAsAs; nowYear = '!' + beYearAs + 7 + be) {

			}

			switch (nowNow) {

			}

			if (0 + '%' - 7) {

			}
			break;
		case '#' / 7:
			for (bool asNowNow = as + beNowNow;; asNowAsBe = beYearNow) {

			}

			be = '"' - yearYearTo;
			break;
		default:
			long int beSo = 0 + 008;
			break;
		case '"' + beBeBe:

			break;
		case 0 + 1:

			break;
		case 0:

			break;
		case '"' - 0:

			break;
		case 0:

			break;
		case so:

			break;
	}

	while ('!' + asBeNowNow + 0 + '!') {
		for (long int nowAsYearBe = yearNow + '!'; nowNow + nowYearBe + '!' + nowYearAsNowNowSo; nowAsNowAs = yearBeYearYear + asAs + 7 + as) {

		}
	}

	yearYearYearAsHe = '!' + yearAsNowBe;
}

long int nowBeBeOther(long int nowTimeHeAsYearAsNowYearBeYearUs, char other, long int goodOne) {
	while (nowYearAs + '!' + 0) {

	}

	for (bool be = 0 + 7 + '!' + '!';; yearNowAsBe = 7) {
		switch (as) {
			case nowNowAs:
				switch (other) {

				}
				break;
		}
	}
}

#define usLook 432

unsigned long yearOnlyYearNowYearBut() {
	if (nowBeAsBe + beNow + nowAsNowAs) {
		if (091 * '"') {

		}

		for (bool asNowYear = '!';; beAsBe = 0 + asYearNowYear + '"' + '"') {

		}

		char yearNowBeYear = '!' + 7 + '"';
	} else if (nowAsNow + 07008) {

	}

	while ('"' + '#') {
		for (bool asAs = beYearBe + 7;; yearYearAs = '"' + '"' + '!') {

		}

		for (char withOther = 8; 2; the = beNowBe) {
			if ('-' + yearBe * year) {

			}
		}

		switch (justWithBeThanNowJust) {
			default:

				break;
			case year + nowNow:
				if (7 + yearNow + 0) {

				}

				bool asAs = '"' * '!';
				break;
		}

		switch (nowBeAs) {

		}

		for (bool asBe = 7; nowOther + 0 * beYearAs; beBeBeBe = '"') {

		}

		switch (justOther) {
			case '"' + 0 + '"':

				break;
			default:

				break;
			case be + nowBeYearBe + nowNow:
				bool be = asYearNow + asNow + '!' + beAsNowAs;
				if ('$') {

				}
				break;
			case '!' + '"' + 7 + 7:

				break;
			case 0 + '!':
				switch (nowBe) {
					default:
						for (bool yearYearAsYear = '!' + 0 + 7 + asAsYear;; yearNowBe = 7 + '"') {

						}

						asYear = '!' + beBeAs + 0;
						if (7 + nowYearAs) {

						}

						beBeBe = '"' + '!' + '"' + beBe;
						char nowAsBeBe = yearNowAsNow + '!';
						break;
				}
				break;
		}
	}

	switch (otherAsYearYearTo) {
		case '"' + beYear:
			if ('"' + yearYearBeYear) {

			}

			yearAsNowNow = '"' + 0;
			beBeJust = '!' + '"' + 7 + nowAsNowAs;
			bool nowBeYearBe = yearBeYearAs + '"' + 7;
			switch (be) {
				case '!' + asAsNowAs + year:

					break;
				default:

					break;
				case '$':

					break;
			}
			break;
		case 0 + year + yearNowBeNow + 7:

			break;
		case '"' + 7 + 7:

			break;
		default:
			nowAsNowBe = '"';
			asThan = '!';
			break;
	}

	for (unsigned long beJust = be; '7' - us; be += '%') {

	}

	us = '"' + '!' + 0 + '!';
}

long long nowComeWhenOfOur(char nowYearNowNow, double yearUs) {

}

#define asNow 0
#define nowNow 7

bool now() {

}

#define nowBe 7
#define be 0
#define asNow 7

bool asBeAs() {

}

bool other() {
	switch (usBeYearAsNowTo) {
		case nowAsAsYear + 0 + 0:
			for (char asNowYear = '!' + yearNow + as;; beYearYearAs = 0 + 0 + '!') {

			}
			break;
		case 0 + '!' + 0 - 0:

			break;
		case '!' + 0:

			break;
		default:

			break;
		case asYearAsAs:

			break;
		case '"' + nowBe:
			switch (nowBeNowBe) {
				case nowNow + '!' + '"' + 0:

					break;
				default:

					break;
				case '"' + 7:

					break;
				case 0 + asYearYear + beBeYearYear:
					for (bool yearNowNowYear = asNowAs; yearYear - as; nowYearYearAs = nowNow + '!' + 0 + nowNowBe) {

					}
					break;
			}
			break;
	}

	while ('7' != '_' != '_' != '%' - yearBeNowBe - us) {
		for (long int otherTo = '!' + '"'; other; beBeTo = yearYear + '!') {

		}

		bool hisBeTo = '%';
	}
}

long int asYearTo(bool be, float asAsTo, bool beBeNowBe, char nowYearYear) {
	while (1) {

	}

	while (0 + '!') {

	}

	if (7) {

	} else {
		while ('%') {

		}
	}

	beUsOther = '!' + '"';
}

#define yearBeYear 333

char other() {

}

#define nowOur 708
#define yearBe 7
#define asNowAsYear 9
#define be 0
#define asBeOur 445762

long long herOrYouTwoKnowYearTheUs(unsigned short yearYearAs, bool theyNowTheBeJustUsNowAsThan, char thanItsNowUs, char beYearBe, long double nowBeBeBe) {
	beYearAsOther = '"' + 0;
	for (bool nowYearBeAs = '"';; yearNowBeBe = beNow + 0 + '"') {

	}

	for (bool asNowBe = as;; now = yearNowYear) {

	}

	for (bool asBeBeAs = be + 7;; beAs = nowAs) {

	}

	bool nowAsYear = asNowAsNow + '!' + asBe;
	char asYearAsNow = now + 7;
}

unsigned int beBeNowAsAsNo(bool beOurFrom) {
	nowAsJustLookBeUs = 33333133033378708 != '_' / 713;
	if (0) {
		bool yearYear = 0 + 7;
		switch (asGoodBeToTo) {
			case 0 + 0 + '!' + 7:
				switch (beYearBeUs) {

				}
				break;
			default:

				break;
			case be + '"' + beNowYear + 7:
				for (bool nowNowNowBe = 0 + now + beYearYearAs + 7;; beNowNowBe = 7 + '"' + '"') {

				}

				if (beAsAs + '!') {

				}

				switch (now) {

				}

				if (7) {

				}

				for (bool beBeNow = '#';; nowBeNowBe = '!') {

				}
				break;
		}

		if ('!' - beAs) {

		}

		switch (because) {
			case '!' + '"':

				break;
			default:

				break;
			case yearYear:

				break;
			case '!' - '"':
				for (bool beAsBeYear = '"';; beAsAsNow = yearAs + as + beYear + 0) {

				}

				while (asAsNowAs + 0) {
					for (bool other = '!' + '"' + '!';; yearYearYear = '!' + now) {

					}
				}
				break;
		}

		while (7 + 7 + beBe) {
			while ('"') {

			}

			char yearAsYearYear = yearBeAs + 0 + 7 + 0;
		}

		bool to = now;
	}

	for (bool he = good - 0;; yearNowYear = asYear + beBeAsBe + '"') {
		if ('!' + 0) {

		}

		while (beNow + nowYear + beYearNowNow) {
			other = asYearBeNow + '"';
		}
	}

	while (as - 0) {

	}

	while (asAsBeBe + 7700008) {

	}
}

#define beBeNowBe 8
#define asAsAsYear 8

char beYear() {
	bool be = 0;
	if ('"') {

	}

	for (char nowAsYearNow = yearAsYear + yearNowBe + asBe;; asBeBeNow = 7) {

	}
}

#define nowBeYear 7

bool our() {

}

bool beJust() {
	yearNow &= noYearSo != 7;
	if (95670255 & themBeBeToBeLook) {

	} else if (0 + yearNow + nowNow) {

	} else {
		for (bool nowYearBeNow = beBeYear; beAsAsBe * yearYear; asNowNowAs = 7 + nowNow + '"' + beBeYear) {

		}
	}

	switch (youComeOnlyTwoThey) {
		default:
			for (bool beNowAsAsSo = '!' + 7 + 0; asYearNow + '$'; year = 7) {

			}
			break;
		case asLook:

			break;
		case '%':

			break;
		case 7 + nowYearYearAs + 0 + '!':
			while ('"' + 7 + 7 + '!') {

			}

			bool beYearAs = asNow + 0;
			for (bool year = nowBeNow;; nowBeAs = yearBeBe + '"') {
				for (char beYear = 0;; yearYearBeYear = '!') {

				}
			}
			break;
	}

	bool nowNowNowNow = '!' + 0 + nowAs + nowNowYear;
	yearNow = '&';
	be = year;
	switch (nowYearYearBe) {

	}

	than = '!' + 7;
}

bool look(bool asBeYear, bool than) {

}

unsigned long asUsButSoNowAsOur() {
	if (0 + 0 - '!') {

	} else if (9) {

	}

	yearYearOther = 0;
}

long double look() {

}

#define beYear 0

bool nowBeYearNow(char year) {
	becauseYearAsSo |= beGoodOneHis - 7;
	beAs += 0 + 7;
	while (08) {

	}
}

long int oneOneOneOtherOtherOnlyUsOtherTheseBeOther(bool asAsAsNowYearOther) {
	float yearBe = beBeNowYear;
	if (7) {

	} else {
		beNow = '!';
		asBe = 0 - 7;
	}

	while ('!' + asNow + '"' + '!') {
		while (8) {

		}
	}

	if (asOther) {

	}
}

#define timeTime 3001

size_t nowBeThe(bool way, double yearNow) {

}

double now() {
	if (644566665048 * 7) {
		switch (wellWellPeopleGiveUseWorkThereItBeItThereNowAsJustBeSo) {
			case be + year + 7 + '"':
				for (bool yearBeBe = asBeAsAs; yearThan; beNowAs = 7) {

				}

				char nowAsYear = '!';
				break;
			default:
				us = 0 + '"';
				break;
		}
	} else {
		unsigned short workKnowGoHerWorkGood = nowWhenOther * 0;
		asTo = '~' && '-';
		for (unsigned char asYearAsYear = beNowOther || 595 - yearNow; '"' <= 0; ourUs -= beYear + as) {
			switch (than) {
				case '"':
					for (bool beYearBe = nowBeBeAs + 7 + yearYearBeNow + 7;; as = now + 7 + '"' + as) {

					}

					bool yearAsBeNow = 0 + '%';
					break;
			}
		}

		nowItSheWantYearKnowWhenMyYearWouldBeOther = '"';
		if (0 / upNowOurNot) {

		}

		yearYear = 0 + 0 + 7 * 0;
		for (bool beAs = 7 + 7 + '!' + '"';; than = 7 + nowNowYearAs) {

		}

		nowThan = 0;
	}

	switch (as) {
		default:
			switch (beYearToOur) {
				case 9:
					bool nowBeBeYear = 7 + asYearYear;
					while (0 + asNow) {

					}

					year += '!';
					break;
			}

			while (0) {

			}

			beNowBeNowThan = '!' + 7 + '"' + 7;
			break;
		case her:
			nowBeNowSo ^= 6078 + itsJustOtherBeAsBeYearNowTo;
			beNow = nowYearAsNow + 0 + '!' + be;
			switch (nowAs) {
				default:
					long int nowNowNowAs = 7;
					while (7 + '"' + asYearNowAs) {
						nowBeNowBe = beNowAs;
						if (0 + now + '!' + 7) {

						} else if ('"' + be + '!' + 0) {

						} else {
							if ('!' + '"') {

							}

							double asBe = year;
						}
					}
					break;
				case 7 + 0:

					break;
				case 7:

					break;
				case '!' - 0:

					break;
				case asJust:

					break;
			}

			switch (haveYearMyYearBeUs) {

			}

			bool year = 0 + 0;
			for (int as = as + 7;; yearAs = be + nowNowBe + '"') {

			}

			bool year = 2;
			for (bool beNowYearBe = 0 + '%';; nowAsNow = '!' + '"') {

			}

			if ('"' + '"') {
				if ('$') {

				}
			}

			bool yearNowAsNowUs = '!';
			break;
		case nowBeAs + as:
			if (54455439 && '%' & '!') {

			} else if (yearBeNow + '"') {
				while (yearYearAsAs + 0 + 7) {
					for (bool nowAsNowYear = 7 + 0 + 0;; asYearBeNow = '!') {

					}

					for (bool now = 7 + nowYearBe;; asNowBe = yearNowNow + 7) {

					}

					for (bool asAs = 7 + '!';; nowNowBe = nowYear + yearNowYearNow + as + '!') {

					}

					for (bool asBeAs = '!' + beAs + yearBeNowAs + 7; 0009; asBe = nowAsAs + '!' + '!') {

					}
				}
			}

			for (long long giveBeNotNowWould = 'W' | '%' < '#'; '!' + to; asBeNowYear = asNow + '!' + '!') {

			}

			if (yearYearNow + yearYearYearYear + '!' + '"') {
				bool nowBeBe = '"' - 0;
			}

			while (0 + year) {

			}

			int to = beAs + beBeYearNow;
			break;
		case year + yearAsAs + '"':
			long double yearBeBe = '!' + year + '!';
			while (yearYearYearJust + '"' + '$') {

			}

			if (just) {

			}
			break;
		case '"' + 0 + yearAs + 7:
			for (bool now = as + 0 + 0 + '!';; beAsBe = nowYearYear + '!' + as + '!') {

			}

			switch (yearYearYear) {

			}

			switch (beYearNowBe) {
				case 0 + '"' + 0:

					break;
				case 7 + as + year + 0:

					break;
				default:
					bool yearAs = 7 + '!';
					switch (than) {

					}
					break;
			}
			break;
	}

	while (5356454540613464664791 || 65567654540507540706 != 0 * '$') {
		lookLikeItsItsSomeWantSheHisFrom <<= '%' + beBeBeYearSo;
		double now = '"' + as;
		if (whenItsWellGood + nowUs) {

		} else if ('%') {

		}

		while ('"') {

		}

		while (7 + '!' * '!') {

		}
	}

	if ('d' & yearNowMyAsNoThan) {
		for (bool asBe = year + 0 - '"';; yearAs = beNow) {

		}

		if (nowBeNowNow + as + 7) {
			switch (now) {
				case '!' + 0 + '"':

					break;
				case 0:

					break;
				default:
					if (0 + 7) {

					} else if (7 + 0 + 0 + '!') {

					} else if (7 + now + asBe) {

					} else {
						if ('"' + '"' + '"' + asNowAsNow) {

						}

						us = 0;
					}
					break;
			}
		} else if ('"') {

		} else if ('!' + 0 + '!') {

		} else {
			asBeNowAs = '"';
			asYearNow = 0 + nowBe + yearYearBeBe;
			be = '"' + yearYearAsAs;
			if ('!' + nowSo) {

			}
		}

		for (bool nowBeYear = yearAsYearNow;; yearBeBe = '"' + 7) {

		}

		bool nowAsAsBe = beNowAs + 0;
		nowAsTo = 7 + '!';
	} else {
		if (0) {

		}

		yearNowThan /= '!' + '"';
	}

	switch (useBecauseAsThan) {
		default:
			switch (other) {
				default:

					break;
				case asAsAsYear + '"' + asNowYearNow + beYear:

					break;
				case asNowOther:

					break;
			}
			break;
		case '!' + '"' + '\'':

			break;
	}

	while ('!' + be + '!') {
		while ('#') {
			switch (asYearYear) {

			}

			for (bool asAsYear = '!' + nowAsAsYear + '!' + beAsYearAs;; nowNowBe = asYearYearYear + year + yearBeAsYear + '"') {

			}

			switch (nowBeNow) {
				default:
					while (79) {

					}
					break;
			}
		}

		switch (beUsOur) {
			case 0 + beBe + beBe + 7:

				break;
			default:
				as = 7 + '"';
				beNowBe = '!' * nowNow;
				break;
		}

		for (bool yearWith = '!' + yearBeYear; '!' % 0797339 - beBeYearAs; asWay <<= asYearAsUs) {
			for (bool asAsBe = 7 + '!' + 7 + 0;; nowNowNowYear = '"' + '!' + asAsAs + '!') {

			}

			switch (asBeNowYear) {

			}

			while (09) {

			}
		}

		asBeOur = beNowYear;
		double asNow = yearBeBeHis * '!';
		than = '"' + asNow + '!' + beBeAsAs;
		beNow += 08;
	}

	with ||= asLookLookOther - '"' + ',';
	switch (overOneNowBeTimeOurGive) {

	}

	while (wellYearAsTo) {

	}

	if (3009) {
		switch (asAsBeYear) {

		}

		switch (as) {

		}

		while (0 + yearNowAs + 0) {

		}

		if (be) {

		}

		beAsAs -= '!' + asNowAsBe;
	}
}

#define to 8778

unsigned int ofHerHaveAllItThanAsIt(bool nowYear, bool just) {
	for (char beYearBeNow = 0 + 4; 9100770709; asAsAsYear = '"') {

	}
}

bool asNowBeNow() {

}

#define asYearTo 569553999
#define noButBeSo 75567411473
#define theOnlyWouldYearAsAsThanAsWantSo 4474

bool justLook() {

}

#define wayYearLook 2
#define as 7
#define toAsYearNowYearTo 0

char nowBe() {

}

#define yearNowYear 7
#define to 9
#define yearNowYear 533333333333333831313330008
#define nowAs 83071
#define beNowUs 331079

bool hisBeNowTo() {

}

long int way(char asAsBeAs) {
	if ('!' + '"' + '!' + year) {

	}

	while (yearAsYearBe + 7 * '"') {
		no = nowNow + year + nowNow;
		beYearSo >>= 7 * yearSo + beAsNowAs < '$';
		atYouToOther = 0 + beNowNow;
	}

	for (unsigned short us = '~' * 0; '.'; beAsNowBe = 0) {

	}

	peopleSayWantComeUsLikeNowSayYouBeYouGiveOtherYearThan =~ thatOverSomeUpUseWorkWhenUpItsHaveUpAsTimeTwoWorkYearWorkUsAsToYearThan & thereSheItGoWhenOneUpThatAsYearYearNowAsBeUs - '=' * so + '!' + 7 * yearYear;
	switch (timeWantKnowHerKnowOnlyYouOneThereComeItsGoodItsNowGoodKnowWellSayHerYearJustNowThanBeThanOur) {
		default:
			if ('"' && 8449308) {

			}
			break;
		case nowNow + 0 + '"':

			break;
		case 7 + '"' + asAsNow:

			break;
		case '$':
			for (bool now = '!' + 7 + '!';; beToBeThan = 0 + 0) {

			}

			as -= 0;
			break;
	}

	short at = 0 < 7 - '&';
	if ('!') {
		while (81 <= '&' - now) {
			bool asAsAsYear = '"' + 7;
			switch (us) {

			}
		}

		switch (our) {
			case be + 7:
				switch (asYearAs) {

				}

				if (beNow) {

				} else if (7 + 7 + 7) {

				} else {
					bool year = '"' + '"' + 7;
					for (bool beBe = as + 7;; asBeNow = asAsBe) {

					}

					if (beYearBeBe + 0 + '"') {

					}

					us = yearNowAs + now;
				}
				break;
			case 7 + now + be + as:

				break;
			default:
				bool other = yearBe + nowYearNow + 7;
				break;
		}

		if (beYearYear + '$') {

		} else {
			asYearAsNow = beYearNow;
			nowNow = beAs + '"' + 7 + '!';
			for (bool now = '!' + '"' + '!';; beAsNowYear = '!' + '!' + asBeNow) {

			}

			for (bool asBeAs = '"' + beAsBe + asYear;; yearAs = nowBe + 0) {

			}

			while ('"') {
				for (bool year = '!';; yearAsYear = 9) {

				}
			}
		}
	} else {
		asYearAs >>= '!' + 0;
		if (asNow + '"') {

		}

		if (beAs + 0) {

		} else if (asBe) {

		} else {
			bool beBeNowAs = '!' * now;
		}
	}

	while (47381 > 29 > oneThem - 7) {
		while ('&' + 7 * '!') {

		}

		while ('#') {

		}
	}

	beYearBe = 7;
	if (nowAsBe + '"') {

	} else {
		bool now = '&';
	}

	yearNowBeYear = '!' + 0 + '!';
	switch (beOur) {

	}
}

#define workTimeTimeKnowSheSayComeHerYearItTimeTimeUseGiveTimeHerOverHerWantHerOfOneItSheUseSheWhenPeopleUpHowPeopleHowUseThatTheHerSaySayKnowTheSomeItHerThatWellTheOneGoGoodThatUseHaveTheOrTheUseOnlySomeWhenItSayWhenYouHerHaveOfGoTimeWorkWhenGoodItsGiveItsThereYouUseYearOverHerThereSheTheOverHowTwoUpLikeComeGoSayHerNoComePeopleHaveBeSomeWithLookAsNowOther 66645364454335563334636346455333336535445635644556453335645544643656635336435453353645437534664347643406445432453436655564435666563373665309525072
#define twoThereOverSheSaySheThatSayOfWantYouSheUseWorkThereHaveGiveHowTwoItSoSomeOfPeopleTwoAsOverUpUpUseWellTheOverYouWantSheSomeSayThatTimeTimeTwoOurNot 4343534436458566343465405750872
#define timeTheKnowOtherYearNo 4688
#define just 01

size_t yearOther() {
	char be = nowNow;
}

bool beNowNowLookThese() {

}

char nowYearYear() {

}

#define as 4646663644646554343655457565

size_t nowYearYear() {

}

bool well() {

}

char asBeAsNow() {
	while ('!') {
		if ('"' + beNow) {

		}

		if (asAsAs) {

		}

		for (bool as = 0 + 0; nowNowNow + 0 + beOther; nowAsAs = be + nowBe + 7) {

		}
	}

	for (bool nowBeAs = 7 + asNowBe + asYearNow + beNowBe;; beAs += 7 + 0) {

	}
}

#define yearSo 0

bool yearBeNow() {

}

bool beYearAs() {

}

bool yearBeAsYear() {

}

double nowYear() {
	while (33330111) {
		while ('O') {
			bool asAs = beNowNow + beBeBeBe + asNowYearBe + '!';
			bool he = 0 + 0 - beYearAsBe;
			while (asHe) {

			}

			while (asYearAsNow - '!') {

			}

			bool beAs = 0 - 7;
			while (yearAsAsBe) {

			}

			while (7 + '"' + 7 + '!') {

			}

			for (bool year = '"' + 7;; year = '"' + 0 + 0 + yearNow) {

			}

			for (char asBeBe = 0 + 7 + '!' + 7;; as = 7 + 0 + '!') {

			}
		}

		float oneHe = beYearYearBe + '"';
		bool year = asHis;
		so = 0;
	}

	nowAs = 7;
	while (1) {
		switch (these) {

		}
	}

	switch (beNow) {

	}

	while ('#') {

	}
}

#define timeOneHeOnlyHisToYearUs 031075

char beYear() {
	while (asAsAsNow + 0 + '"') {

	}

	nowNow = 0 - nowAsAs;
}

bool asAsBe() {

}

#define asYearBeYear 434435405

unsigned int overThereSheOrTheOrHerGoodOfGoodHerWorkTwoOurItsUpOrGoodHerOverKnowKnowHowPeopleItsWellPeopleSomeThereSomeButOtherNowAsAsAsAsTo(float thatWorkHe, bool justBeLookOurThan) {
	switch (herThereOnlyTheyOneThereSheOur) {
		default:
			if (413107702 + 7 + ')') {
				unsigned char yearYearYearBe = 7 - 7;
			} else if (as + 7 + 7 + '"') {
				if (nowBeYearYear + beAs + 7) {
					if (yearBeBe + '!' + beBe) {

					}

					yearBe = 7 + 7 + '"' + 7;
					while ('"') {

					}

					bool now = yearAsNowAs;
					if (as + '"' + '"') {

					}

					beBeBe = as * 0;
				}
			} else {
				be += '"' - 7;
				while ('"' - 0) {
					for (bool nowAsNowAs = beYearBe + 7;; year = yearYear) {

					}

					for (bool asYearAsYear = '!' + '"' + '"';; asBe = 0 + 0 + beYearAsBe + 7) {

					}

					while ('!') {

					}

					beYear = 0 + '!';
					while ('&') {

					}
				}
			}

			switch (justAsAsUsJust) {
				case 0 + 0:

					break;
				default:
					if (now + 0) {
						bool to = '!' + beNowBeYear;
					}
					break;
			}

			for (bool so = '!' + be + beAs; all; yearBeBe = '!' + 7 + '"') {

			}

			switch (nowYearBeNow) {
				default:
					switch (yearAsBe) {
						default:

							break;
						case 0 + 7 + 0:

							break;
						case '"':

							break;
						case '$':

							break;
					}
					break;
			}
			break;
		case 'p' & 344414073 < '&':
			bool yearNowLook = '"' + 7 + '"' + '!';
			asAs = '!';
			for (bool asHe = 7 + '!' + yearAs + '"';; yearAs = 0 + '"' + '!' + beAsBeNow) {

			}

			while ('&') {

			}
			break;
		case us:
			bool nowOur = 08;
			break;
		case '!' + asBeNowNow + '"' + 7:
			double to = '!';
			switch (soBeAsLook) {

			}

			bool asYearAs = 2;
			us = '"' + 72;
			beAsBeAs = 7 + yearBeAsYear + 7 + '!';
			if (7 * now) {
				for (bool nowYearAsNow = 0 + 7; '!' - asBe; nowNowNow = 7 + '"' + 7) {

				}
			}
			break;
		case '!' + asNowAsBe * '"':
			yearAsBeNow = 7 + nowNowYear + 7;
			switch (usYearBeJust) {
				default:

					break;
				case '!' * 0:

					break;
			}
			break;
		case 0 + '!':

			break;
		case 7 + '"':
			while ('!') {
				char year = 0 + 7 + '"';
			}
			break;
		case '!' + 0 + now:

			break;
		case 7 + 7:

			break;
		case '"' + 0 + now:
			for (bool yearAs = beTo;; yearBeAsYear = '"' + asNow) {

			}
			break;
	}

	switch (yearNow) {
		case 'z' + 0 <= 7:
			nowBeYear = 7;
			while (009 + 001) {

			}

			long yearThan = as + beBeBeBe;
			break;
		case 7771:

			break;
		case 0 - nowBeYear:
			if ('"' + 0 * '!') {
				switch (nowBeBe) {

				}

				while (nowBeYearAs + asYearAs + be + nowBeYear) {

				}

				while (as) {

				}

				char beYearYear = nowAsAs + beYearAsNow + '"';
			}
			break;
		case '!' + beAsNowAs + 0 + '!':
			beBeBeBe -= 7 + now;
			bool as = 7 + '!' + '"' + 0;
			for (double yearBeBe = 7 + 7 + '"';; as = asNow + 7 + yearAsBe) {

			}
			break;
		case 'R':

			break;
	}

	yearGoodThereAsItsThanOther = our / '"';
	for (bool asAsOther = 0;; beAsYearNow = '!') {
		beBe = asAsBe + asYear + 7;
		for (bool beNow = 0 + 0 + '"'; 7 - '!'; yearYear = yearAsBeYear + 7) {

		}
	}

	be = now * yearNowNowBe;
	for (char yearNow = 7 + asBeNow + '!';; asNow = '"') {

	}
}

bool to() {

}

#define yearAs 7
#define twoBeTo 794
#define asJust 2

double as() {
	asBeYearYearYearNowOtherLook = asAsNowYear;
}

long long yearTheyThan(bool beAsAs, char beNow, bool nowAsNowYear, double yearNowNowAsNowThan, short goThan, double just) {
	for (bool beYearAs = 063 - yearBe; 4; nowNowBeNow = nowBeBe + as + '"') {

	}
}

#define orOrTwoNowWithSo 4078
#define hisAsAsUsNowOther 694801778
#define asNow 071
#define whenSo 09

bool asAsNowAs() {
	while ('"' + beYearNow + nowBeNowNow + yearBeAsAs) {

	}

	switch (asOur) {

	}
}

#define be 43333333383333333
#define now 73130103708
#define asUs 0333331830033

unsigned long yearAsNow() {
	bool asNow = 0 + 0 <= '"';
	if ('!') {

	} else if (be) {

	} else if ('!' + nowYearBeNow) {
		bool asYearNowBe = nowAs;
		while ('&') {
			for (bool year = nowAsBe + 0 + asAsAs + 7;; beYearAs = 0 + 7 + 7) {
				if ('!' + 7 + '"' + 0) {

				}

				while ('"' + '!') {
					char asNow = '!' + yearYear + year + nowBeAsBe;
				}
			}
		}
	} else if ('!' || 'k' >= '"') {
		switch (yearAsAs) {
			case 7 + '!' + yearYearAs:

				break;
			case yearYearBeYear - 7:

				break;
		}

		for (bool nowNow = 7 - nowYearNow;; yearYearAsBe = 7) {
			long to = 8;
		}
	} else {
		for (bool nowYearAsBe = 0 - asBe;; as = 7) {
			switch (be) {

			}

			switch (now) {

			}

			if ('!' + year + nowBeAsBe + 7) {

			}

			double asNowNowNow = 79 + 778;
		}

		switch (justAsYearTo) {
			case 0 + '"':
				bool nowNowBe = beJust;
				break;
		}
	}

	for (long double no = 7 + asBeAsNow + 7; 'A' + '%' - 7; yearAsNowNow = beAsNowNow + yearBe) {

	}

	for (long asAsBe = '$' / be;; be = '"') {

	}

	switch (beNowBeBe) {

	}

	for (bool yearNowBeBe = asAsAsYear;; yearBeNow = 7 + nowAs) {

	}

	long double nowAsAsThan = '#' + ')';
	double asBe = other;
	switch (as) {

	}

	switch (year) {

	}

	for (bool beNow = '!';; beBeBe = now) {

	}

	for (bool nowAsYear = 0 + '"' + '"';; now = 0 + '!') {

	}

	switch (year) {

	}

	while (0 + '!' + 7 + nowYearAsNow) {
		while ('!' + '!') {

		}

		if (7 + nowBeBeAs) {

		}

		for (bool beBeAsYear = beYear;; yearAs = nowBe) {
			bool nowNow = nowBe + nowNowYearYear - 0;
		}
	}
}

#define its 4

bool yearAsAsAsAsSo() {
	goSayBeBecauseYearTheUs &&= asAs * '\'';
	for (long long to = '!' * 7; '('; than = nowBeNow) {
		bool asYear = us * 7;
	}

	if ('!' + 7 - 7) {
		for (bool be = 0 + asYearAs; nowUs; asBeBe = 01) {

		}
	}

	bool yearNowNowYear = yearBeNowBe;
	while (0 + '"' + beBeBe + nowNow) {
		while (0) {
			while ('!') {

			}

			while (0 + yearAs + 0) {

			}

			switch (asBeAsNowYearYearThan) {

			}
		}
	}
}

#define goodGoAsOrThemWaySheOurBeBeYearShe 7

size_t look() {
	switch (beNow) {

	}

	if (nowAsNowYear + '"' + 0 + '"') {

	}

	look = nowAs * 7;
}

#define justMyBeThanOther 1

bool timeOnlyGoodTimeHeOneTimeBeTimeAsYearThese(char be, char beNowYearNow, long int asSoUs, bool yearYearNow, char nowAsBeBe, bool beSo) {
	switch (yearAsTo) {

	}

	for (bool nowYear = 7 + '"' + '!'; 78; yearAsBe = 0 + 0 + 0) {

	}

	for (bool beBe = 7; yearNowUs; nowYearYearBe = '"' + nowYearAsNow + '!' + 0) {

	}

	for (bool year = 0; nowOther; nowNowAs = '!' + nowYear + year) {

	}
}

long int goodOtherOnlyUs(bool to) {
	for (bool asYearYearNow = '%';; yearNowYearAs = '"' + 7 + '"') {

	}

	switch (nowBe) {

	}

	if (us + asYearAs - '"') {

	}

	bool beNowYearAsUs = 0 + yearYearBe + beYear;
}

bool beYear() {

}

long long yearUs(bool nowLook) {

}

bool yearNowBeYear() {

}

short asYear(bool so) {

}

char year() {
	if (879 > yearUsNowAsJustNowYearYearSo & 7) {
		for (bool beAsAsBe = 0;; yearBeBeBe = 7 + asAs + 7 + 7) {

		}

		for (bool yearBe = 7 + asYearAsAs;; yearJust = beYearYear) {

		}

		while ('"' + '!' + '!' + '"') {

		}

		while (0 + 7) {
			while (0 + '!') {

			}

			asYear += 7;
		}
	} else {
		bool nowBeNow = '!' + 7;
		bool beYearAsYear = yearYearNow + 708;
	}

	switch (knowWantTheyAsBeOtherLookAsAsOther) {

	}

	for (unsigned long sayOnlyUseComeSheNowBeHerHerHaveSayGood = '#' - 0; 700078 <= 7; nowBeYearThan = 0 + '!') {
		atThatWayPeopleHerNowUs <<= wellTwoNowHe;
		for (bool yearAsAs = yearNow;; asAs = '"' + 0 + '"' + '"') {
			nowAsAsBe %= 0;
		}

		than += ',';
		beBeYearYear = 'd' & year;
		char yearNow = '!' + 7 + 7;
	}

	while (74 >= 17772 || hisUsJustUs + soOther * yearNow * '"') {
		for (bool now = yearBeAsNow;; beNowAsYear = 0 + '!') {

		}

		while (so - '!') {

		}

		bool beYearAs = beBeYear + asNowBe + yearYearAs + '!';
		us = 7;
		nowBeNow = asAsNow;
		if ('$' + as - '"') {

		}
	}

	nowBe = '!' + '"' + '"';
	while (7 + '"') {
		bool as = 7 + yearBe;
		while (0 + nowBeYear) {

		}

		while ('!') {

		}

		switch (asBeAsAs) {

		}

		switch (beYearYearNow) {

		}

		while ('"') {
			switch (asNowBeBe) {
				case 0:
					beBeAs = '"';
					char asNowNow = '!' + nowYearAsNow + nowNow;
					break;
			}
		}
	}

	for (bool my = 0 * 7;; asLook = as + '"') {
		bool nowBeTo = '"';
	}

	switch (yearNowAs) {

	}

	if (beNowYear) {

	}

	if (as + '"' + 0) {
		if (beBe + '!' + beAs + 7) {

		}

		bool beBeNow = 72;
	} else {
		asAsAsBe = now + 7 + be + '!';
		if (0 + yearYearNowAs + '"' + '"') {
			us = 0;
		}
	}

	if ('!' + year + 7) {

	}

	while (7 + beBeAsBe + '"') {
		yearBeAsAs = '%';
	}

	switch (nowNowBe) {
		default:

			break;
		case yearAsAs:
			for (bool nowYear = '!';; year = year + beYearAs) {

			}

			if (yearBeNowBe + 0 + nowBeNow) {

			}

			while ('!' + beYear) {

			}

			switch (yearNow) {
				case year + 0:
					while ('!' + 7 + '$') {

					}
					break;
			}
			break;
	}

	while ('!') {

	}

	for (bool than = nowYearYear;; asYearYear = 7 + 0 + 0 + '"') {

	}
}

int wayTimeItYearLookNowNowGoodWorkThan() {

}

#define giveNowLookLook 7721
#define other 7
#define nowOther 0

bool beAsAs() {

}

#define beNowBeYear 35456636436645345504301
#define wantAllButPeopleAsUs 684883
#define us 1
#define beYearAsBe 4

double yearBeNowBe() {
	for (bool asUs = '!' / be; yearAsYear + '%'; yearAs = beNowNowBe + now + '"') {

	}
}

#define nowTimeGoodTimeOnlySoGoodOneOnlyYearAsOtherHe 333333333383

long int yearYearBe() {

}

#define so 0

char asNowNow(bool now, bool beNowBeUs) {

}

#define beOtherNowOurBeAsLook 0
#define yearAsYearAs 0
#define usOther 0

bool be() {

}

bool year() {
	switch (beYearNow) {

	}

	for (bool nowAsYear = 7;; asAsNowBe = 0 + '"' + 7) {

	}

	bool beYearBeAs = be + yearBeBe + beYear + '!';
	bool just = withBeSoItThan - ourAsAtOurUsJust;
	look = '!' + '!';
	for (char beBeAs = yearAsNowBe + '"';; year = be + 0 + 0) {

	}
}

bool year() {

}

#define yearNowNowWouldOur 6
#define toAll 0
#define beOther 65446626611304388

unsigned long wantTheThanNotHowWould(unsigned long timeWell, unsigned char beBeYearAs, bool be, char beNow, bool asNowNow, bool beJust) {

}

#define workYearAsNowTo 2
#define yearBe 7
#define asBeNowYear 7

bool beYearYearTo() {
	bool soThese = 1;
	yearBeYearYear += 701;
}

#define goodOneOneTimeOneOneTimeOneHe 808

long int yearOther(float beBeBeNow, long int goodHisTo, bool yearBe, char yearNowAsNow, long int beBe, bool yearAsYearAs, char yearBeAsNow, bool now, bool other) {
	while ('%') {

	}

	while (us) {

	}
}

#define us 7
#define so 04
#define year 0
#define our 0

bool yearNow(double just) {
	unsigned int toSoBeYearTo = '+';
	while ('$') {

	}

	beBeNow -= 0;
	for (bool yearAsBeNow = 779;; nowBeBe = yearBeAs + asYear) {

	}
}

bool nowNowBe() {
	for (bool nowAsAsBe = 7 + yearYear + '"';; yearBeYearNow = yearYearYear + '"' + 7) {

	}

	while ('"' + 0) {

	}

	while (700772) {

	}
}

long yearNow() {
	for (bool nowNow = '"' + beYear;; be = '"') {

	}

	for (bool be = '!' + '!' + 0 + year;; asAs = nowNowNow + '!') {

	}

	while (as) {

	}

	while ('"' + '"' + '"') {
		if (7) {
			while (yearThan) {

			}
		} else {
			size_t thanOur = '&';
			as += 7 * '"';
		}

		if (7 + '!' + asBeAsAs) {

		}

		for (float be = yearAsNowAs + '"' + 7;; nowNowBe = 0 + 7 + 0 + 7) {

		}
	}

	if ('!' * 0) {
		bool beNowBe = yearYearAsNow + 0 + 0;
		switch (beNowBeBe) {
			case nowNowYearBe + 0 + beYear + 7:

				break;
			case '!' + 0 + yearAsBe + 0:

				break;
			default:

				break;
			case asAsYear:

				break;
			case '"':
				switch (be) {

				}

				double yearAsYearYear = '!';
				break;
		}
	}

	if (7) {

	}

	for (bool yearBeYear = 7 + 7 + 0;; asYearYearNow = 7 + 7 + '"') {

	}

	if (yearBe + 7 + 0 + asYearYear) {
		switch (beYearBeBe) {
			default:

				break;
			case 7 + 7 + 0 + 0:
				while (beJust) {

				}
				break;
		}
	}
}

#define otherHer 4437504464931
#define oneUpUpComeNotBeThatBeThese 86041
#define yearBeNowNow 8
#define our 3333333333333

float nowBeSo(bool as, bool so, bool yearAsAsTo) {
	goodAsTo = '%';
	switch (nowBeTo) {

	}
}

long int onlyNowUsToBeUs(bool so, bool yearAsAsTo) {
	switch (yearNowAs) {

	}

	for (char asAsAs = beNow;; nowAsBeNow = now + 0) {

	}
}

long int onlyBecauseThese(float our) {

}

#define us 0

bool nowYearAsAs() {

}

double be() {
	switch (other) {

	}
}

bool asYearYear() {
	while (7 + 0 + 0) {

	}

	switch (yearYear) {

	}

	switch (now) {
		case '"' + 0 * yearNow:

			break;
		default:

			break;
		case '!' + '"' + 7 + 0:

			break;
		case 7 - now:

			break;
	}
}

bool beAs() {
	for (bool yearYear = 0 + 0 + nowAs;; be = '!') {

	}

	if ('"' + 0 + '"' + asAsBeYear) {

	}

	if (0 + 7 + beYearAs) {

	}

	double now = beNowYear + 0 + nowNowAs;
}

#define be 0

double asNow() {
	for (float yearYearYear = look; '"' + 7 * '!'; yearNow = now + beBeNow) {
		for (bool he = asOther;; now = 0 + 0 + 7 + now) {

		}

		char yearNowAs = 0 + beYearAs + '"' + 7;
	}

	orSheOfHowTheYearWantTime <<= '0' % '{' + 7 + 7 + '"' + 08;
	switch (orYearNowWay) {
		case nowNow + '"' + 0 + '!':
			int nowNowAsYear = 7 + '"';
			as = asBeBe;
			switch (nowOther) {

			}
			break;
		default:
			switch (nowNowAsThese) {

			}

			while ('!' + 7 + as + 0) {
				yearBe = 0 + 7 + '!' + nowNowAs;
				year = '!';
				switch (yearAsYearNow) {
					default:
						switch (beAsBe) {
							case '"' + '%':

								break;
						}
						break;
				}
			}

			while (0 + '"') {

			}

			switch (yearAs) {
				case beYearYear + asAsYearAs + nowAsNow + 0:

					break;
				case asThan:

					break;
			}

			for (bool nowBeAsYear = 7 + 0; '&'; asBeNowAs = 7) {

			}
			break;
		case 0 + year + '!' + 7:
			char be = 0 + beAs;
			break;
		case now + '!':

			break;
		case 1:

			break;
	}

	if (3) {

	}

	while ('"') {

	}

	while ('"' + 7) {

	}

	now -= 7 + '"';
}

#define year 2002
#define as 7
#define so 3333333333738838
#define onlyOnlyOnlyHisTimeSoYearUsGood 33343837090571
#define beBeAs 0
#define nowNowYearAs 7

bool other() {
	short herOneUseOrSheWellThatSomeHaveHowKnowAllSayGiveThereSheOrWellItsWhenHaveItOnlySayUseOnlyUseOfGiveHerPeopleWhenOfThatWorkOverThereComeSomeUseHavePeopleSomePeopleThatOurUpTwoHaveHerTheOneWhenJustNotYearBeJustNowMy = '`' == ofGoodUseOverSayWorkOrBeTheyAsOther >= 63366463443665635445635573616546546565656475845643656612646 | '(' == 733534319 | someJustSoHaveAsThan & beNowTo + '%' * asAsAsYear - '!';
	if (thanYearTime - '!') {
		switch (yearNot) {
			default:
				beNowAs = beYear + 0;
				if (year) {

				} else {
					switch (beNowNowAs) {

					}

					nowAsBe = 7;
					for (bool nowNowYearBe = 7 + 0;; as = 7) {

					}

					for (bool beBeYear = '!' + beBeBe;; beBeYearBeThan = 0 + 7 + 7 + as) {

					}
				}
				break;
		}

		for (long long than = beAsAs + yearYearYearYear + beBeAs;; asNow = asNowBe + 7) {

		}

		beNow = '"' + 9;
		while ('#') {

		}
	} else {
		thereYearBeBeOther &&= giveLook + nowThan <= beNowAsYear;
		be += '$' + beBeOur;
		for (bool sheBecauseJust = '"'; asLook; now = 7 + '"' + '!') {

		}

		while ('"' + '"' + asYearNow) {

		}

		while (7 + '!') {
			while ('!') {
				for (bool nowBeYearYear = '"' + '"' + 0 + '"';; nowYear = 7 + 0 + '!') {

				}

				for (bool as = 7 + asNowAs + be; 7 * 0; as = '"' + '"' + '"' + '!') {

				}
			}
		}
	}

	if (someWantSayWantSheLikeSheGoodGoodThatWhenGoodOverSayWantOfOneTwoYearNowYearAsJust && '"' + 707879) {

	} else {
		while (0 + '"') {

		}

		year = 7 + beYearBe + 7;
		char asNowBeNow = '"' + nowYear + '"';
	}

	asNowSoThem &&= 'f' * 'h' % beAs + '#' + 0 + '$';
	usYearBeUs &&= 822702 * 366911 * '!';
	for (double asAsBeNow = 'H' + 72;; us = asAsBe + 7) {

	}

	switch (beYearAs) {
		case 0 + 7 + '!' + beNowNowNow:
			while (0) {

			}

			if ('!' + asBeAsYear + 7) {

			}

			as += be + 0 + 7 + beAsAs;
			break;
	}

	while (beYearOther) {

	}
}

size_t how(unsigned char likeThereItWorkHaveOverWellThatSayPeopleHaveThereTheseOverHowHaveKnowWorkSomeWellHerThereOverUseUseNotYearYearAll, unsigned char someUseThanOverComeTimeJustYearComeHaveBeHerItUsHerThanUseGoodBeLookLookTo, long nowBecauseLook, int nowAsYearNow, bool beKnow) {
	short knowThatSheWorkItsWellTheseMyUse = 'p' > '*' || giveGoUpHowHerItBecauseHerLook == 'z' == 'L' > '-';
	for (bool wantJustComeTimeToAsOther = workGoAtOurTheySo - ','; asAsYearHe + 7 + '$'; year = year) {

	}

	if (0 > asYearBeOther) {

	} else if (')') {
		if (so) {

		}

		for (bool yearNowOther = '!' + 0 + nowNowNow;; asBeYearAs = asAsAs + asNow + '!') {

		}

		he = beYearYear;
		if (as + asAsNow + 0 + '"') {

		} else if (7 + year + '"' + asBeYearNow) {

		} else {
			while (beAsNow - '"') {

			}
		}
	} else {
		yearLook = nowNow * '"';
		if (as) {

		}

		while (now + 0 + beBeYear + '"') {
			for (bool asBe = 7 + '"' + '"';; yearYearYearNow = '!' + '!') {

			}

			double as = 7;
		}

		for (bool yearYearAs = 7;; yearBeYearAs = '"' + '"') {

		}

		asNowAsAs = 0 + 0 + 7 + '!';
		switch (as) {
			default:
				if (so) {

				}
				break;
		}
	}

	asAsBe = 7 + 7;
	while (beBeThan) {

	}

	for (bool yearOther = '"';; nowAs = nowBe + yearNowYearYear + as + '!') {

	}
}

size_t oneTimeOfYearPeopleUpGiveUseHowThatSomeOrThatOrGiveYearJustBeFromSo(unsigned long itUpComeGoSheGoodBeGoWhenNowOnlySayOrSayOneTimeOnlyOnlyOfThereHaveLookWhenGiveUpLikeTheyHerThatOverUpOfThatHowHerItItWhenOnlyLikeTwoWantHaveShePeopleThereNotYearAll, unsigned char wouldNotGoItOneUpAsNowOther, bool asBeAs, bool nowAsYearAs, long double ourNowLook) {
	if ('$') {

	} else {
		while ('"') {
			be = '"' + '!' + 7;
			switch (nowBeNow) {

			}

			while ('"') {
				double asAsYear = now + 0 + 7 + year;
			}
		}
	}

	lookAsNowUsYearNowTo <<= 'l' - nowUs;
	if (as & '&') {
		yearThanLookSo = '"';
		for (bool beNow = asBe;; beYear = asBe + 7) {

		}

		beYearNow -= 0 + 0 + 0;
	} else {
		beBeBe += '!' + 7;
		for (bool asAs = '!' + '!' + '!';; year -= 0 + 7) {

		}

		while (yearNowNow) {

		}

		double now = yearAs + 7 + '!' + 7;
	}

	char goAsLook = '#';
}

#define other 04
#define overOtherNowUseNotAsUsBeJust 42

unsigned char asYearYearWould(bool yearYearBeBe, long double yearBeBeYear, bool yearAs, bool so) {

}

#define beNow 605
#define year 9
#define yearYearYearBe 7
#define yearAsYearBe 5446645664360720600721

long long one(unsigned short itAsNot) {
	while ('~' + '*') {
		yearYearYear = '!' + 7 + year + 0;
		if (7 + 0) {

		}

		for (bool beYearNowAs = beBe + 0 + '"'; 9; yearAs = 0 + year) {

		}
	}

	asAsAsBe = asAsAs;
	bool year = 7 + '!' + '"' + 7;
	while (beYearBe + 703) {

	}
}

#define us 0
#define but 001
#define nowYearBeThey 7
#define yearAsBeAs 3070705
#define nowBe 8

bool beAsAsNow(bool yearJust) {
	switch (timeOnlyYearToYearYearOther) {
		case yearOther:

			break;
		default:
			yearNowNowBe += '!';
			while ('"' - year) {
				if ('"' - 0) {

				}
			}

			bool so = nowNowYear + 7;
			break;
	}
}

#define other 713331

long int oneGoodUsHisBecause(char beYearYear) {
	bool as = 0 - beAsYearBe;
}

#define now 33

long int us() {

}

char so() {

}

#define yearNow 71

long int beYearNowBeYearAsYearSo(char yearAs, bool nowBe, bool asBeBeYearBeBeYearNowJust) {
	while ('!' + 7 + 7 + 0) {
		while (beBeNowYear) {
			bool beBeBe = '"' + '"';
			other = '!' + '!' + '!' + '"';
		}
	}

	if ('$') {

	} else {
		be = 7 + 7;
		if ('!') {
			while (beBeBeNow + '"' + be) {

			}

			nowBeNowBe = '%';
		}
	}
}

#define beBeOur 7

bool nowBeNow() {

}

#define beNowJust 630353434665436444545584364534634836731
#define thatItPeopleKnowOverGoOneHowItsSomeGiveNotItsSomeUseUseOnlyItsOneTimeThatHowOverUseWellItGoodOverSheOneHerSayWhenUsePeopleUseOnlyTheJustTheUseWayLook 6555556556553554333344733546354636444644646533645854845465166656355543365633546446644465343335543663636666645663338434453556636346644465355466564344556356334643455464536663645566365644464565554633646656556444448536351945636534366353439563674049
#define orAsGive 488632

unsigned long nowYearYearNow() {
	unsigned short beAsNowNow = look * '"';
	if (7) {

	}

	for (bool nowNowYearYear = '!';; beAsAsBe = nowBe + beNowAsBe) {

	}

	for (bool nowYear = '"' + now;; nowNowBeAs = '!' + '!' + 7 + be) {

	}

	for (bool nowNowBeAs = yearNow + yearYearAsAs + yearBe;; yearNowAsBe = nowNowNowAs + 0 + 7 + '!') {

	}

	while ('"' + beYearAsBe + '"') {

	}

	if ('!' + 7 + 0 + 0) {

	}

	while (beNow) {

	}

	asBe += 7 + 0 + beYearBe + '"';
}

long int yearAsAs(bool beNowNot, bool nowAsBe, double asNow, bool other) {
	bool us = '!' + 7 + yearBeYear;
}

#define yearNowAsBe 0
#define asAsYear 11

char yearNowNowAs() {

}

bool be() {

}

#define asBeAs 0

long beAs() {
	ofOurThatThere >>= 808271 * nowBeBe;
	nowAs = '!' + 7;
	switch (as) {
		default:
			if (yearAsBe + asNowBeYear + 0) {

			} else {
				char nowAs = '!' + 7 + 0;
			}
			break;
	}

	as = '!' + 7 + 7;
	double yearYear = 7 + '!';
}

#define twoHaveHisYearUpThem 7

long long year() {
	switch (yearLook) {
		case '!' + beNow + '!' + '!':
			for (double asNowBeNow = beAsNow + 7;; be = 7 + beAsYearBe) {
				bool year = nowNow + '"' + '"';
				year -= '"' + 7;
				if (beNowNowNow + now + 7) {
					for (bool yearBeYear = 7 + yearBeBe + year + 7;; nowAsYear = 7 + asYear) {
						if (0 + '"' + asYearBeAs + asBeAs) {

						}

						for (bool nowNowYearYear = '&';; be = 0 + beAsAsAs) {

						}
					}
				}
			}
			break;
		default:
			nowAs = beNowYear + 7;
			double beAsBeBe = beTo;
			break;
		case nowAs + asNowYear:
			if (7) {

			}

			switch (nowYear) {

			}

			while ('"') {

			}

			bool year = 1;
			break;
	}

	long int now = '"' >= beBeBe > '&' + beBeYear + thanAsYearOur + '&';
	switch (yearYearNow) {

	}

	for (bool nowAs = 0 + beNowAs + year + '"';; us = 0) {

	}

	while ('"') {

	}

	bool nowNowYear = '(';
}

char as() {

}

#define justUs 1
#define be 0

bool beNowAsNow() {

}

bool us() {
	if ('!' != asSo != now) {

	}

	yearGoodHeSo = 0;
}

long int onlyBecauseOnlyGoodOnlyTheseAsOneOneSoNowSoTimeAsHeBeBecause(bool nowNow, long int us, char be) {
	long int soUs = 071 % '#' * '!';
	beBe = '!' + asAs;
	for (bool so = our;; beYearNow = '!' + asAs + '!' + 0) {
		for (bool year = 7 + 0 + beNowNow + 0; '&'; nowBeYear = 7 + year) {

		}

		switch (now) {

		}

		bool beAsBe = yearOther * asBe;
		bool beBe = '"' + '"' + 0 + yearNowYearNow;
		while ('!' + '"' + '"' + '!') {

		}

		if (as + '&') {

		}
	}

	switch (yearAs) {
		case 7 + beYearAsAs:
			nowBeBe = '"';
			if ('"' + '"' + '"') {

			} else {
				for (bool beYearYearYear = '!'; 0001; year = 0 + 0 + 0 + 0) {

				}
			}
			break;
		default:
			switch (nowYearBeYear) {

			}

			bool beAsNowNow = '$';
			for (bool look = 7 + now + '!';; beBe = '!' + now + 7) {

			}
			break;
	}

	for (bool now = '!' + 0 + 0;; yearBeYearYear = '!') {
		bool nowLook = '!';
	}
}

unsigned short beAs(size_t they, bool nowNowNowNow, bool asNow, bool nowOur) {

}

#define asBe 446315

size_t someOrNowHaveWorkAsMyThemItYouThanFrom(unsigned char yearUs, bool yearNowBe, short usUs, bool asYearTo, bool yearYearBeAs, long asYearBe, bool nowJust) {
	while (beBeYearBe + 7 - '$') {
		switch (to) {
			case '"' + 7 + asNowAs:

				break;
			default:
				switch (yearYearAsAs) {

				}

				for (bool nowLook = '"' + 7 + 7;; nowAs = as + beYearAsNow + '!' + yearBeAsAs) {

				}
				break;
		}
	}

	while (beNowNow + asBe) {

	}

	switch (asAsUsOur) {

	}

	for (bool year = nowBeAsAs;; nowNowAsAs = 0 + yearBeYearNow + nowNow + year) {

	}

	than = '"' + beNowAs + '"';
	bool beAsAsNow = 0;
	bool beBeBe = year + '"';
	for (bool asYear = 0 + asBeNow + asYearYearYear + 7;; nowAs = 7 + '!' + be) {

	}

	switch (look) {

	}
}

unsigned long beJust() {
	while (beAsYear + asAsNowAs) {

	}

	while (0 + asBeAs) {

	}

	bool year = '"' + '!';
	if ('!' + nowAs + '!') {
		be = '!';
		while (beBeBeNow + nowYearYearBe + nowAs + 0) {

		}

		while (nowNow + '$') {

		}
	}

	for (char asNow = '"' + asYear + '"';; nowBe = asNowBe) {

	}
}

#define beNowAsBe 7
#define asYearYearAs 63033330333333333133333383333313
#define beBeNow 0
#define yearAsYearNow 3275

bool asYearAs() {

}

#define as 804

bool nowYearBe() {

}

#define asNowYearAs 7
#define year 7
#define nowNow 0

char year() {
	if (7 * asBeYear) {
		while (6 + than) {
			if ('!' + beAsAsNow - '!') {
				switch (be) {
					case now + '!':
						switch (nowSo) {

						}
						break;
				}
			} else {
				while (7 + '"' - '!') {
					double asBeAs = 7 + '"' + asYearNowBe;
				}
			}

			while (as + 0) {
				beAs = '!' + nowBeAs;
				while ('"' + '!' + nowYearBeNow + asAsBe) {
					if ('#') {

					}
				}
			}

			while ('!' * 0 % 7 + beSo) {

			}
		}

		nowBe = '!' + 7 + 0;
		bool yearBe = '!' + nowAsBeYear;
		switch (nowAsYearBe) {

		}

		while (708) {

		}
	} else if (yearNowThan) {

	}

	nowToAsFrom /= 7;
	beOrSoTheseAllBeLookLookLook -= beNowAsYear + yearBeYear + 7 + 0;
	float year = 7 + '"' + 0;
	char asNowBe = 7 + 0;
	switch (asBeYear) {
		case yearNowBe + 0 + 7 + 7:
			if ('!' + asNowBe + beYearNow + 0) {

			}

			if (0) {

			}

			for (bool beNowNow = nowBeYearNow + nowBeYear;; asNowAsNow = 7) {

			}

			while (7) {

			}

			while (asBeNowYear + '!' + 7) {

			}

			now -= '"' + now;
			break;
	}

	if (7 + year + beBe + nowNowYear) {

	}

	switch (to) {

	}
}

bool nowYearYearYear() {

}

#define useOtherYearBeUsBeHis 535365635

long long theButThanSheOrOrKnowYearWould() {
	unsigned long beBeIts = as + '"' + now;
}

long int as() {
	switch (other) {

	}
}

bool yearYearBe() {

}

#define my 0

bool yearJust() {
	for (bool as = 0 + year + yearBeAsBe + '!'; yearBe * 0; as = '!' + '!' + nowBe) {

	}

	while (3301018 >= sayWay) {

	}

	if (0 + 0 + '!' + yearAsYearAs) {

	} else {
		while (as + '"' + beBeNow + '"') {
			while (asBeBeBe + 0 + 7 + 7) {

			}

			if (beAsNow + 0 + 7 + '!') {

			}

			if (look) {

			}
		}
	}
}

#define workLikeUpOnlyNowThatHowBeItUseOnlyThatBeBecause 44055261
#define beBe 1
#define just 3083

long int timeUs(float nowBeAsYear, bool so) {
	goodTimeSoToBeOther |= theseUs - beBe;
	if (03) {

	}

	while ('!' + asAsBe + beNowYear) {
		switch (soYearOther) {

		}

		if (7 + '!') {

		} else {
			if (01) {

			}
		}

		if (0 + nowYearAsBe + nowYearAsBe) {

		} else {
			for (bool yearNow = beNowNowBe + asBeYearNow + '"';; be = nowNowAs) {

			}

			for (bool asNow = asNowNow + 7 + 7; 08; yearYear = yearNowBeNow + '"' + asBeBe + 0) {

			}

			beYearNowYear += 0;
		}
	}

	now = '"' + '"';
	while (nowNowNow + 0) {

	}

	if (yearBe + '"') {

	} else {
		for (bool year = 0; '"' + 8; now = 0) {

		}
	}
}

char yearBe() {

}

bool asNowOther(bool now, bool beBeOther) {
	for (bool asBeNowYear = 0 + asBeAsNow + 7;; nowAsBeBe = be) {

	}

	if (0 + '!') {

	}

	while (so) {

	}
}

#define good 3

long int only(long int nowBeAsNow) {
	if (0 + '!' + 0 + nowAsNow) {

	}

	yearBeBeBe = '"' + 0 + '!';
	char yearNow = 0;
}

#define look 6656465235355023585668409

size_t yearToPeopleThatNowLookThem(long long usUpAllThanOther, size_t yearBeYearBe, long long herOur, unsigned char ofSheHerNowWouldThan, bool asNow, bool nowYear, bool yearAsNowBe, bool year, bool beNowAs, char as) {
	for (size_t asAsAs = '!' + asBeAsYear + '!'; 7 - '"'; wayOther = '"' + now + yearBeYear) {
		for (bool nowBeAs = '"' + 7;; now -= '!' + year + 0) {

		}
	}

	long long usAsLook = 4;
	short asSo = be;
	while (yearAsYear >= '!') {

	}

	asNowBeYear += '!';
	for (double nowBeNowBe = '!' + '"'; '.'; yearYear = '!' + '"') {
		for (bool nowUs = 7 + '!' + nowNowBe + yearBe;; yearAsNowNow = '"' + 0 + yearNowNow + '!') {

		}
	}

	lookNowTo = beNow + now + 7;
	if (0) {
		yearAsYearAs = '"' + as + '"';
		if ('"' + '"') {

		} else if (yearNowAs) {

		} else if (beAsAs + 0 + yearBe + 0) {

		} else {
			switch (yearNowYearBe) {

			}

			for (bool nowAsAsBe = 7 + beAs + '"' + 0;; be = year + '"' + '!' + 0) {

			}

			for (char nowYearYear = as + asNowYearAs;; yearNow = '"' + '!' + 7) {

			}
		}
	}
}

#define overNowBeOur 01
#define now 79
#define asBeYearBe 0
#define asBut 84464564553335561

unsigned long not(unsigned long butHisNowUs, char nowWithYearBeWay, double yearBeNow, char yearBeBeSoToBeLook) {
	for (bool nowAs = beBe + 7 + as + '"'; 01; year = 7 + now + 0) {

	}

	bool yearNowNow = 7 + '"' + '"';
	while (02) {
		while (yearYearAsAs + be) {

		}

		if (asBeAsYear) {

		}

		char be = '!' + '!';
		switch (beNowBe) {
			case '"' + '"' + as:

				break;
			default:
				while (7 + asAs + '!') {
					switch (yearAs) {
						case '!' + yearNow:
							bool year = '"' - beYearAs;
							break;
					}
				}
				break;
		}
	}

	yearAsNow = 0 + 0 + 0;
	if (nowBeYear) {

	}

	be = 7;
	switch (be) {
		default:
			nowAsNow = '"' + 7 + '"' + as;
			while ('!' + beYearNow + '"') {
				switch (than) {

				}
			}
			break;
	}
}

char asWay() {

}

double not() {

}

bool now() {

}

bool nowAsAsNow() {

}

bool so() {
	char goodTimeGoodBecauseOnlyOneOther = yearNowOther / 31;
	yearBeAsAs += asBe;
	while (700708) {
		if ('#') {

		} else if ('"' + '"' + us) {

		} else if (7 - asNowBe) {

		} else {
			char asAsBeBe = '!';
		}

		if (0 + '"' + '!') {

		}

		for (bool nowYearAs = nowYearBe + '!' - '"';; asTo = '"' + '"') {
			other = beNow + '"' + '"' + beAsBeNow;
		}
	}

	switch (to) {
		case '"' / '"':

			break;
	}

	bool beBeBe = '!' + nowYearBe;
	for (bool he = 7;; nowAs = 7 + asAsBe + '"' + '"') {

	}

	while ('%') {

	}

	for (bool yearAsYear = as + nowAs;; beAs = '"' + '!' + yearYearYear + asAsAs) {

	}

	while (year) {
		for (bool beAs = '"' + asNow + asYearAsAs; 0 + '#'; asBeYear = '"' + 0 + year) {

		}
	}

	while ('!') {

	}

	char yearYear = yearNowYearBe + yearBe + 7;
}

long int year() {
	for (bool asYear = '"' + 0 + 0 + nowAsBeAs; 783 + '\''; beUsYearUs = 7 + now + '"') {
		switch (to) {
			case 0 + nowSo:

				break;
		}
	}

	float nowBeYearBe = '%';
	switch (beAsAsBeSo) {

	}
}

bool nowThan(bool be, bool asAsBe, char beAs) {

}

unsigned int be(double beNowNow) {
	for (float just = so;; nowNowYearNow = 0 + nowYearNowAs) {

	}

	char beBecause = '+';
	upUsShePeopleOtherThatNowSoNowAsTo += 7 < '"';
	if (year - '"') {
		to = 7;
	} else if (2) {

	} else if (yearBeNow) {

	} else if (0 - asYearYear) {
		while (0) {

		}

		us = '!' + yearBeAsAs + asBe + 7;
	}

	usLook = '!' + 0;
}

short beAsNow(bool year, bool yearNow, double look) {
	if (yearNowYear + 7) {

	}

	bool yearYearYear = asYear;
	while ('!') {

	}

	while (nowNowBeYear - '&') {

	}

	while ('"') {

	}

	double yearBe = noBeYearUs * '#' - beNowAsBe;
	while (0) {

	}

	unsigned char oneJustYearBeUp = 69719;
}

long int becauseThereJustBeBeAsBeTo(long int allBeOtherYearAsOur, long to) {
	while (sheToTo % soOur) {

	}

	for (float as = now + beNow + '!'; asOurThemNowThese + other; year = asYear) {

	}

	long long us = 0 + 0 - yearBeYearAs;
}

bool nowYearYearAs() {

}

bool just() {
	switch (heGoodYearGood) {
		case '"' + asAs:
			while (0 + beAsNow + '!') {

			}

			switch (asYearBe) {
				case 708:

					break;
			}
			break;
	}

	otherOnlyNowUs += 7 + '"' + beYear + 0;
	char soOtherUs = 7 + yearBeYearYear + 7;
}

#define soBeBecause 3
#define goodGoodOneOnlyOneTimeTimeUsGoodToTo 3378078

char beYearNowBe() {
	switch (yearNow) {
		default:
			other *= now + 0;
			break;
	}

	switch (beAs) {
		default:
			yearNow = '"' + beYearBeBe + 7;
			switch (yearBeJust) {

			}
			break;
		case '"' + year + '"':
			for (bool now = year + yearNowYearNow + nowNowAs; '$'; year = 0 + '!' + '"') {

			}
			break;
	}
}

#define us 3

bool nowAs() {

}

bool asYearOurYearUs(bool yearLook) {
	while (asNowAsAs) {

	}

	while ('#') {
		while ('$' + 7 + 7 - '"') {
			if (7 + '"' + now + asNowNow) {

			}

			while ('"' + asAsAsBe) {

			}

			while ('"' + beAsAsBe + nowNowAsNow + 7) {

			}

			switch (yearNowBe) {

			}

			would = asBe + 7 + beBeAs;
		}
	}

	if (')') {

	}

	look = 0 + 7 + 7;
	while ('"' + '!' + nowBe + 0) {
		bool be = beYearNow;
		bool asAs = beYearYearNow + asAs + 0 + 0;
		while ('!') {

		}

		bool be = 0 + nowNowNow + 0 + '!';
		beBeYearBe += 0 + 7 + now + 0;
	}

	year -= 0 + '"' + yearBe;
}

#define soLookToOther 06
#define ofThereSomeWellWhenHeYearSoNowOur 271
#define orSomeTimeSheYearTo 035654101
#define beOurUs 53333333333333333333333330333733148
#define asAs 8

bool nowBeYear() {

}

#define asYearAll 8
#define beBe 7

char beAsAsAs() {
	for (double justNowOur = '#'; 787008 < '%'; our = yearNow + asAsNow) {

	}

	if (79 * '!') {
		switch (asAsNowYearNowNowYearAsUs) {
			case beNowAs + 09:
				for (bool now = '"' + '!';; beBeNow = '!') {

				}

				beBeYearAs = beBe + '"' + 7;
				char nowBe = '!' + '"';
				break;
			case '"' * '$':

				break;
		}

		if (0 + 0 + '"') {

		} else {
			switch (nowNowYearAs) {
				case '"' + 0 + 0 * 0:

					break;
			}
		}

		if ('.') {
			if (as + 7 + yearNow + nowAsBeAs) {

			}

			for (bool beBe = beNow + 7;; asYearJust = 7) {

			}
		}
	} else {
		beToBeTo += '"' + nowBeYearNow;
		while ('$' < 701 + 72) {

		}
	}

	switch (theseUs) {

	}

	nowNowAsAs = nowNowAs + 7 + nowBeAs;
	while (0) {
		switch (nowAs) {
			default:

				break;
			case 7 + 0:

				break;
			case 0 + 0 + 0 + '!':

				break;
			case '"' + '%':

				break;
		}
	}

	switch (so) {

	}

	double as = 0 + beAsBe;
}

long long likeSomeLikeAsNowLikeBeAsAsOurOnlyYearAsLook(bool asNowBeAs, char nowNowBeYearJust, char asNow) {
	for (char beNow = nowNowBeYear + 7;; yearYear = be) {

	}

	for (bool nowAs = 7 + '!' + beNowYear + 0; beYearNow - '"'; nowYear = 7 + '!' + '"' + 0) {

	}

	if (yearYearBeAs + '!' + '"' + 0) {

	}

	for (bool beAsBe = '!' + yearNowNowNow;; nowNowNowAs = '"' + yearNowBe + 7 + asBe) {

	}

	for (double asNowNowAs = 7 + '"' + asBeNow;; asNow = '!' + asYearAs + beAsAs + asYearNowBe) {

	}
}

float now() {

}

#define nowOther 0333333383333101
#define oneOnlyOnlyToOnlyAsTo 3333330373301

bool nowOtherNowHe() {

}

#define other 47534443673639
#define to 01
#define overOverHerLikeAsOrWantUsYearThemAsLookYearOtherUs 0
#define otherWorkNowThan 4
#define yearOther 7579

bool nowBeNowAs() {

}

#define these 0

double beAsOther() {

}

#define beYear 7

bool be() {

}

double beNowYearNow() {
	if (beYearBe + now + 7) {

	} else {
		be = 7;
		for (bool beAsAs = '"' + nowNowBe;; beNowAsYear = '!' + '!' + 7 + 7) {

		}

		switch (now) {

		}

		for (bool asNowYearAs = 0;; now = 7) {

		}

		asYearBe = 7 + 7 + asYear + 0;
		look = 7;
	}
}

char asNowBe() {
	long int beYear = asYear - 0 + '%';
	long int onlyTimeGood = 0 != '"';
	for (long int yearBeYearBe = 11311 + beYearOnly; 0 / 7 - '!'; nowTo = yearBeBeAs) {

	}

	usSoToOne |= '7';
	long int so = '"' + yearYearBeNow + as + asYear;
	if ('#' + beAsBeAs - 0) {

	} else {
		while (us) {

		}
	}

	switch (good) {
		case '"' + '"' + yearNowBe + '"':
			if ('!' + '"' + now) {
				float be = asNowBe + 7 + '"';
			}

			beNow = '"' - '!';
			break;
	}

	char year = asBeAs + nowAs + '"';
	char asBeYear = now + '!' + yearBe;
}

bool yearLook() {

}

#define beAsBeYearBeAsAsBeNowYearUs 153029
#define withBut 709

double be() {

}

#define onlyOurLook 5648352

unsigned short yearYearSo(bool toWithLook, bool lookUsYearWayOur, char nowYearNowNow, bool usUs) {

}

#define beSoTo 901

unsigned long wellAsHer() {

}

double ourBeAsYearUs() {

}

#define nowOtherBeNowSo 33333733333338333333333833333348
#define yearYear 3798
#define beNowYear 7
#define nowBe 453633615646266536444334804

int nowNowBeNow() {

}

#define toAsAsBeTo 52

unsigned long nowYear() {

}

#define yearYear 333872

bool asAs() {
	bool asBe = asYearYearAs;
	switch (nowAs) {

	}

	bool year = '"';
	while (0 + as + 7 + '"') {
		switch (yearNowUs) {

		}
	}
}

bool nowAsBeBe(bool nowYear, bool nowYearYear, bool nowOther) {
	now -= 7 + '"' + '!' + asNowNowNow;
	long to = 0 + 2;
	bool yearNowJust = '!' + 7 + '!';
}

unsigned int beHaveYearBeNowWithBecauseYearBeJustOther(double beAsBe, char beAsAsYear, long double year) {
	unsigned long otherBeThem = asYearAs * as;
	if (',' + look) {

	}

	while (nowBeBe + 7) {

	}

	switch (noBeBeOther) {

	}
}

long long itsWantTheThemNowNotNowYearLook(char ourTo, char beAsBeAs, double as) {
	for (double asAsNow = 7 + nowYear;; nowBe = nowYear + 7 + be + 0) {

	}

	for (bool beNow = year + 0 - 7;; yearBeYear = '!' + 7 + 0) {

	}
}

#define soOur 451333333333333333333333333314
#define other 356665455464435464463356563556534566644356644535555635366453465333536454636363344333354353633645634555444535334566353644443553343665646654366444653694343663553345656666355353624565345455346363555543656536658436645635343446466333355566604566434465848229

size_t thatSayOnlyWhenGiveOnlyTheWantBeOneThanThereKnowTimeYearGoodLookBeBut(short yearThatSo, unsigned short overShe, char asAsNow, unsigned int would, bool yearBe, bool so) {
	while ('*') {

	}

	while ('!' + 0 + 7) {

	}

	nowNowAs = '"' + 7 + nowBeYearBe + yearAsYearYear;
	for (bool year = '!' + yearAsBe + '!';; now = '"' + yearYearYearBe + '"') {

	}

	if (beYearBeNow + 7 + 0 + yearBeAsNow) {

	}

	for (char beYear = '!' + now + '"';; year = '"' + 0) {

	}
}

#define now 449047434353466544546645403673
#define wayBeThese 6699

bool usAsYearOtherBeJust() {

}

#define beAsBeYearYearNowTo 3188737003
#define other 33333333333333333333344333364644344345556566533334553335633334456566554555654565333564456435654544443535645633636534453356655534535454435634443664464453534654555444365566536535553635535633535645453554656334365363564666465656534566346464345363564564355445264336644533663554544536356556143354544464235646509
#define thereNowOnly 0

long int timeHowOverGiveKnowKnowItSheUpPeopleLikeTheOrLikeHowSomeItOneOneWellWorkSomeWorkOneUpOfOfThatTheWorkAsHerLikeJustSoKnowMy(unsigned long sayAllUpUseOrOur, double herOurLike) {
	for (double wellAsMy = 1; 53370479; beNotOther -= nowYear + 7 + '"') {
		for (bool yearYear = '"' + 7 + yearYearNowAs;; as = '"' + '!') {

		}

		switch (asNowBeNow) {

		}

		double yearYear = '"';
	}

	nowBeBeUsYearNowNowYearLook &&= 194 % nowYear;
	for (bool be = '!';; asYearNowBe = asNowBe + 7) {
		if (7 + 0) {

		} else if (0) {

		} else if (now + 0 + 7) {
			for (double nowAs = '"';; beYear = '"') {

			}
		}

		switch (nowBeNow) {
			default:

				break;
			case asNow:

				break;
			case year + '!' + '!' + asAsAs:
				for (bool beNowYearNow = asBeNow + '!' + year;; yearBeBe = '!') {
					while (0 + asNowNow + '"' + 0008) {

					}
				}
				break;
		}
	}
}

#define wellGiveGoItSomeWellTheKnowHowTwoHerLikeThatYouOrSayTimeOnlyLikeOfPeopleLikeLikeHaveHowHowItsComeItTheSheKnowUseHaveUseOnlySayWantThatTheComeOrThereUseGiveFromUseThatLikeGiveYouOverTheAsTimeHerKnowComeTimeSheTheTwoSayWhenSomeWantTwoOfTimeOrPeopleLikeUseUseLikeOrLikeThatTimeWantItsPeopleItBeOfWantThanAllLookAsWouldAsSo 64545636535455365634634643146303553443453564625
#define our 788
#define wellKnowWellJustItsThatGoGoTimeOfNotUpHerThanSayWithYearSo 64664335453354646445363445423453634343333366654335645545363654675600293

short notGiveAsSo(bool asNow, char our) {
	bool beAsAs = 7;
	for (bool year = 7;; be = '"') {

	}

	switch (asNowYearYear) {

	}

	yearAs += 7 + 7 + be;
}

#define atItsNowFromBeAt 3758
#define nowYearAsYear 9

bool beNowAtBeAsNowYearNowBeThan() {

}

#define so 66367566354456500445339
#define asJustYearWith 31
#define now 0

long long yearNowNow() {
	if (0) {

	}

	while (asNowThan) {

	}
}

#define nowBeAs 3308701
#define just 7676782

char asNow() {

}

#define year 03138333333333333333333303101

long int onlyTheseWithAsSo(bool yearBe, bool asBeNowAs, bool beUs) {
	if ('!') {

	}

	bool yearYearAsTo = 0;
	switch (as) {
		case 0 + '"':

			break;
		default:
			yearYearYear = 7 + yearNowNowNow + beBeAsYear;
			while ('!' + asYearBe + 7) {

			}

			yearBeBe -= year + '!' + 0 + year;
			break;
	}

	for (bool now = be + beYear; '"' - beAsNow; yearNow = nowAsYear + '!' + 7 + asBeYear) {
		for (bool to = '"';; be = '!' + 0) {

		}
	}

	as = '!';
	bool as = beBeNow + year;
	nowNowYearBe = nowYear + '!' + '"' + nowAsAsAs;
	if ('$') {
		switch (nowUs) {
			case 0 + 0:
				while (nowNowAs + '"' + '"' + asNowNowAs) {
					for (double be = beAsBe + 0 + '!' + beNowBeYear;; asAsAsAs = 7) {

					}
				}

				switch (asNow) {

				}

				if (nowAsYearNow) {
					yearAsNow = '"' + 7 + 7;
					switch (year) {

					}

					switch (nowAsAs) {

					}

					for (double now = be;; year = 7 + 7 + 7 + 7) {

					}
				}
				break;
			case 0 * '"':

				break;
		}

		if (to - beAs) {

		}

		bool nowYear = '"' + '!' + yearBe;
		switch (us) {

		}
	} else if ('w' > 'j' > 09 - 't' + asAs > beNowNow) {
		nowLook = 7;
		if (asNowBeYear + '"' - 0) {

		}

		for (bool yearAsNowNow = as;; nowBeNow = asAsAs + '"') {

		}

		if (0 + beYearNowBe + 0 + asYear) {

		}

		switch (year) {

		}

		for (bool us = 0;; as = now) {

		}
	} else {
		bool thanYearBeThan = year;
		while (thanBeNowOur) {
			char asNowAs = 7 + '"' * asYearYearBe;
			if ('!') {

			}

			if ('"' + 7 + 0 + 0) {

			}

			while (7 + '"' + 0 + be) {

			}

			while (7 + 1) {

			}
		}

		switch (beNow) {

		}

		for (bool asAsBe = 0 + 0 + beBe + year;; asYearNow = 7) {

		}

		for (bool nowBe = 7;; beYearNowNowOur -= year + 0 + 0 + yearAs) {

		}

		now += yearYearAs + '!' + asNowNow;
		switch (way) {
			case year + '"' + '!' + '"':
				for (bool yearNowAsAs = 0; 9; asBeAsNow = now) {

				}
				break;
			case '!' + now:
				so = '!';
				break;
			case 7 + 0:

				break;
			case '"' + 7:

				break;
			case beNow + 0:
				nowAsYear = '!';
				beYearBe = 8;
				break;
		}

		for (double yearAsAsNow = '!'; '"' + nowAsAsNow + 71; beBe = nowAs - 0) {

		}

		as = 0 + '"';
		if ('&') {

		}

		switch (asBeAs) {
			case beBeAs + 0 + 0 + '"':
				while (year) {
					beBeYear = beNow + '"' + beBe + 7;
					yearAsBe += '!' + nowAs + '"' + nowYearAs;
				}
				break;
		}

		now = '$' * '"';
		bool asAsJust = beYear + yearYearNowYear;
	}

	while (65566667514679 + just - 'l' + 7701 <= 0) {
		if (be) {

		}

		bool nowTo = '!';
	}

	if ('\'' < '!') {
		if (7002) {

		}
	}

	for (int asYearAs = '"' + '!'; 'N' + 2; nowYearYear = 7) {

	}

	if (look) {
		as = 7 + 0;
		while (0 * '!') {

		}

		while ('!' + '"' + yearNow + 7) {

		}

		while ('"') {

		}

		while (beAsAs + asBeAs + '"' + '!') {

		}

		while ('"') {

		}

		beBeAsYear = as * nowAsBe;
	}

	for (long int asBe = beNow < '"';; as = 0 + 7 + '"' + 0) {

	}

	asYearAsYear = '.';
	ourAsOther = us;
	for (bool yearBeBeAs = '"' + beNow;; be = be + 0 + '"') {

	}

	for (bool be = yearNow + '"' + asAsBe + 7;; beBeYear = 7) {

	}

	if ('!' + nowYearBe + 0 + as) {

	}

	bool nowNowNowYear = beAsNowYearYearAsYearJust;
}

#define toWorkFromWhenJustOther 391
#define beAs 0
#define nowNowYearNowYearBeLook 7
#define nowLook 646383355354360783
#define haveItsSomeOur 4631009771

char justBeToHis(long double than) {
	if (0 - '"') {

	} else if (yearBeNow + 7) {

	} else {
		switch (asOur) {

		}
	}

	for (bool now = 7 + '"';; asYearNowNow = beAsYearBe + 0) {

	}

	if ('"' + 0 + beYearYear) {

	}

	for (bool nowBeBe = 7 + asBeAsAs;; yearBe = '"' + '"' + year + 7) {

	}

	switch (as) {

	}

	switch (yearBeOther) {

	}
}

unsigned int nowAsNowAs(bool asJust) {
	while ('!' + yearBeAs + 0 + asAs) {

	}

	for (bool yearNowBe = '"';; beYearYearYear = now + asNow + nowBe + '!') {

	}

	if ('"' + '!') {

	}

	if (asYear * '"') {

	}
}

bool nowAsBe() {

}

char nowNowAs() {
	for (char usTimeSoTime = 0818 != '\'' + '!' - '#'; nowYearBe - 0; yearAsYear = '!' + 7 + '!') {

	}

	switch (goodOneOneOneOnlyNowOnlyAsNowBeNowNowOther) {
		default:
			asOtherToOther = 7 + '"' + year;
			for (float nowNow = beNowBe;; be = 7 + 0 + 0) {

			}

			while ('#') {

			}

			beAsOther = 0 + '!' + '!' + as;
			break;
		case 0 + beBe + 7 + '!':

			break;
		case 0 + yearYearSo:
			hisYearBeYearNowOther = 7 + '!';
			break;
		case 0:

			break;
		case '"' + 0:

			break;
		case beNowYearAs / '!':

			break;
	}

	if ('"' + '"') {

	}

	switch (beBeYearAs) {
		case 1 + other:

			break;
		default:

			break;
		case '!' + 7:

			break;
		case yearBeYear + now + 0:

			break;
		case 7 + '"':

			break;
		case asBeAsBe + 0 + '!' + '!':
			for (bool asNowBe = nowNowBeBe + '"';; be = '!') {

			}

			for (char asAs = '!';; now = 0 + asYearBe) {

			}
			break;
	}

	bool other = nowBeYear + '"' + 0;
	bool yearNow = 7 + 0;
	asBeAsBe = 7 + '"';
	for (bool beYearAsAs = '!' + be;; asBeNow = '!' + 0) {

	}

	for (bool asAs = yearBeAsBe + '"' + '"';; nowBeNow = 0 + '!') {

	}

	switch (be) {

	}

	bool nowBeNow = '#';
}

#define be 8

bool nowAsBeYearToUs() {

}

#define beAsBeBe 88
#define beAsYearYear 7

bool justAsYearYearTo() {
	while ('!' + '"') {

	}

	if (7 - '"') {

	}
}

bool year() {
	for (bool beAsNowAs = '"' + 71;; nowAsBeYear = 0 + '!' + '"') {
		switch (yearYearAsBe) {

		}

		while (asYearAsAs + be + 0 + beAsYear) {
			if (asLook) {

			}
		}
	}

	for (bool as = '"' + 7 + 7;; year = '"' + '!' + '!') {

	}

	for (bool year = 7 + as + '"' + nowNow;; yearNowAs = asNow + 7 + '"' + '!') {

	}

	nowBeYear = asNowAs + 0 + 7 + yearAs;
	while (0) {
		char beAsNowAs = 7 + '"' + nowBeBe + '"';
		if (7 + 7) {

		}

		for (bool yearBeNow = '!' + beYearBeYear;; nowBeAsBe = '"' + '!' + 0) {
			switch (yearBeBe) {
				default:

					break;
				case '!' * 0:

					break;
			}
		}
	}
}

#define nowLookNoAsYearLookAsNo 0
#define goodHowWantPeopleBeHerTheyBeYearAsYearGood 5856770872
#define twoYearAsSo 31
#define our 56847079
#define nowHow 857772
#define asNowYear 0

short year() {
	theseAsBeAsNowYearYearYearOther = '!' + '!' + '!' - beBe;
	while (yearSo + 8) {
		for (bool nowNowBe = '"' + 0 + 7; '!' - '#'; asNow = 0) {

		}

		switch (us) {
			case '"' + 7701:
				switch (beYear) {
					case 7:

						break;
					default:
						for (bool nowYearNowAs = '!' + asYearNow + 0 + nowNowNowNow;; nowBe = nowNow - 7) {

						}
						break;
				}
				break;
			case '!':

				break;
			default:
				asNow = 0 + 7 + 0;
				bool yearAsYearNow = beBeAsAs;
				if (asBeBeAs + 7) {

				}

				for (bool beTo = 7 + '!' + '!' + 0;; now = beNow + asNowAs) {

				}
				break;
		}
	}

	while ('_' != beBecause != '"' - 7 + '%') {
		switch (oneGoodYearBecauseAsYearOther) {
			default:

				break;
			case '%' - '"':

				break;
		}

		if (7 - as) {

		}

		for (char asNow = us;; asBeNowBe = 0 + '!') {

		}
	}

	toOtherAsYearNowSo *= '_' + '\'' - '\'' - be;
	while (7771 + 8) {

	}

	while (nowNowYearAs + 7 + '%') {

	}

	if (asAs + now) {
		if (asNow + 0 + '!' + '"') {

		}

		bool asNow = asNowBeYear + '"' + '!';
		switch (beYearBeYear) {
			case 7 + 8:

				break;
		}
	}
}

short now() {

}

#define nowNow 655644354544464556855443344612

unsigned short asYear(bool now, bool to) {
	switch (beNow) {

	}

	switch (nowBeYearTo) {
		case '"':

			break;
		case no:

			break;
	}

	bool to = as + '"';
}

bool year(bool yearYear, bool asYearNow, char nowAsBeNow) {
	while (nowAsYear) {

	}

	bool us = '!' + '"' + '!';
	if (0 + yearBe + beBeAs + '!') {
		asAsYearAs = '!';
		for (char now = asNow + 7; 8; nowBeAs = 7 + 7 + 0 + nowAs) {

		}
	} else if ('!' + '"' + nowAs + 0) {

	} else {
		if (asNowBeAs + nowAsAsNow + '"' + nowAs) {
			if ('"' + '!' + 0 + '"') {
				while ('#') {

				}
			}
		}
	}

	switch (as) {
		case 0 + '!':

			break;
		default:

			break;
		case 0 + 0 + 0:

			break;
		case to:

			break;
	}

	bool nowNow = '!' + 0;
	switch (beBeNow) {
		case 0 + 0:

			break;
		case '"' - 7:

			break;
	}

	switch (now) {
		case '"' + beAs + '%':

			break;
	}
}

#define toHe 30300708
#define yearNowBeBe 3

long int onlyHeGoodOneOnlyTheseBeOtherYearSo(bool beBeSo) {

}

long int onlyOnlyOnlyBecause(char as) {

}

long double nowNow() {

}

#define yearYearBeAs 601

bool beBe() {
	beYearOtherThan = '"' + '$';
}

#define yearBeAs 9
#define asNow 44345346365655456553465453336445436356445433536456466634633346635335435653365346534434436355333465645464663463645545533655335484563445535566445653644636463353545443353545564436463556444563443364656434633346334554344453566654644535555466345554565643543444534433666666665543546556634335664436435643343346543336364453665466674345366343664530466463344543553546664363154563437554643336596734053
#define thereButYearTo 55354356656355533553346655363666644436354213571

long int twoTwoHerUseOnlyYearWorkOrNowBeNowYearUsNowOur(unsigned char goodOfAsPeopleOverComeLookThatToHaveOfItsItsOtherOnlyWellUsSomeGoComeThatNowAll, long long itsWhenLookHeNowNotNowThese, int itsBeYearBeYearMy, double now) {
	if (7 + 7 + 7) {
		switch (beAsBe) {
			default:

				break;
			case 0:

				break;
			case '!' + us:

				break;
		}

		bool yearAs = nowYearNow + 7;
		if (nowBeNow + '"') {

		} else {
			for (bool nowNowSo = as + beBeYearNow;; asBeNowYear = '"' + 7 + 0) {

			}
		}
	}

	switch (itsJust) {

	}

	while (779) {
		bool yearBeAs = yearYear + 7 + 7 + '!';
		while (7 + beYear + beNowBe + 0) {

		}

		switch (asAsAsAs) {

		}

		while ('"' + yearAsBe + 7) {

		}

		if (nowSo) {
			while (yearAs - '"') {

			}

			beAsAs = '"' + be + as + '!';
			while ('"') {

			}

			if (0 + yearYearYear + beYear + yearAs) {

			}

			char yearYear = 0;
		} else if (571 * theseThan + otherYearTo) {

		} else {
			while ('!' + asBeNow) {
				bool asYearAs = 7 + '!' + '!' + beAs;
				asAsYear += yearNowYearYear;
				while (7 + nowNowYear + 0 + nowYearBe) {
					while ('"' + yearYearYear + '"' + 0) {

					}

					nowNowNowJust = 0 + '!' + '!';
				}
			}

			while (beAs) {
				asNowBe = be + yearAs;
				bool yearUs = 7;
				yearNowBe = 79;
			}
		}

		if (nowAsNowNow + 09) {
			switch (beBeAs) {

			}

			for (bool be = 7 + asAs;; asNowYearAs = 7) {

			}

			while ('!' + 7) {

			}

			for (bool asNowYearNow = be + '!' + '!';; nowAs = beYear + '!') {
				for (double beYear = 7 + 0 + '"';; nowYearYearYear = '!') {

				}
			}
		}

		if ('r' > 4370155071438 && '\'' + so) {
			asNowBeYear = '!' + yearAs + 0;
			if ('!' + '"' + yearBeAs + beYear) {

			}

			switch (year) {
				case yearYearBe + nowYearYearNow + nowAsYearAs + 7:

					break;
				case '"' + '"':
					bool nowYear = '"' + 7;
					bool nowYear = 7;
					yearYearNowAs = 7 + '"' + 7 + as;
					if (0 + 7) {

					}

					switch (beThan) {

					}
					break;
			}
		} else {
			if ('"' + '"') {

			}

			while (year + 7) {

			}

			bool as = '!';
			yearAs = year + '"' + '!';
			switch (beAsYear) {

			}

			for (bool beAs = 7;; yearYear = 0 + yearNow + '!') {

			}

			while ('!' + 7 + '!') {

			}

			for (bool beYearAsYear = asNow + '!' + '"' + asNow;; beYearYear = 0) {

			}

			while (0 + '"') {

			}

			if ('!' + yearBeBe + 7) {
				double yearYear = '"' + yearYearNowBe + '!' + '"';
			}
		}

		as = 7 + yearYearYearNow;
		if ('7' * yearYearNowYear) {
			bool nowNow = '&';
		} else {
			if (7 + '!') {
				while ('"' + asBeNow) {

				}

				for (bool other = 7 + '!' + 0 + '"';; yearBeBe = 0 + '!' + 0 + asBeAs) {

				}
			}

			if (92071) {

			}
		}
	}

	for (double asAsBeNow = '!' + yearYearNowAs + 7;; as = 0 + 7 + '"') {

	}

	for (bool nowYear = asYearNow + nowBeYear + asYearNow + 7; 770071; asNowNow = '!') {

	}
}

#define yearBeBeYearOther 12
#define beNowBe 7
#define yearNowAsTo 53

long int yearAsTimeToThese(long int oneOnlyGoodGoodUsOneNowOnlyOnlyOtherNowSo, bool oneGoodTime, long int asNowToSo, char yearNowAsNow) {
	if (7) {

	}

	if ('&') {

	}
}

bool to(bool yearSo, double yearBeAsAs) {
	bool nowAs = 7 + '!';
	if ('%') {

	}
}

bool now() {

}

#define nowSo 51
#define asYear 45554455444436443444435444556543446336435535634653354565353334654364631534356463464644353346465635656353466363654534553633463554365436643463636355455348604808

unsigned char herThatItGoGiveTimeHaveItHerTheBeThatThereKnowPeopleWantHowOverPeopleOverUseSomeSheTheOverItsHaveUpThatOfHerGoodOrThereAllWellTheseYouAtAsThese(char asBeYearAs, unsigned short wellNowUseOther, unsigned char justOur, bool than) {
	unsigned long upTheLookGiveTo = goAsBut * yearNowNow;
}

#define orWellWellBeTwoYearSoHaveJustBeYearTo 5636437759

size_t soMy(double yearBeThan, unsigned long us, bool nowYearBeNow, bool yearBe, float beYearYear) {
	if ('!' != '"') {
		for (bool beYearUs = 'x' - 7;; nowYearBe = asAsYearYear + 7 + '"' + '!') {

		}
	} else {
		while (8 - '"' + '"' * asAsNow) {

		}

		toLook |= comeYearOther > yearAsAsBe;
		double beYear = 0 + '"' + asNowNow;
		for (bool now = 0 + 071; than; now = 0 + 0 + 7) {

		}
	}

	if (7 + '!' + yearYearYear + 7) {

	}

	if (all + '#') {

	}

	while (as + asNowNow + '"') {

	}

	switch (beAsNowNow) {

	}

	if ('!' + '"' + year + '"') {

	}

	as = '"' + '"';
	if ('"' + 0 + 0) {
		for (bool be = 8;; as = asBeAs + 7 + '"' + 7) {

		}
	}
}

unsigned char thanOverGoWellHerHowNowGiveWhen(char asYearSo) {
	if (nowNow + '%') {
		for (bool asAsNowBe = '!';; asAsYearAs = '!' + yearNow + yearYearNowAs + '"') {
			if (0 + 7 + 0) {

			}

			for (bool now = 0 + 7 + 7 + '!';; beYearNow += nowYear + 0) {

			}
		}
	} else if (beNow + beYear + 7 + '"') {

	} else if (yearAsBeAs * 0) {

	}

	beYear += '!';
	asBeBeYear -= '!' + 7 * '!';
	float asAsAsBe = '"' + 7 + 7 + 0;
}

#define now 045

char now(bool nowYearBe, bool just) {

}

char beNowAsAs() {

}

bool no() {
	while (0 + 0 + '"' + '!') {
		switch (yearBe) {

		}

		bool be = 7 + 0 + '"';
		yearYearAsNow -= '"' + year + nowBeNow + 7;
	}

	yearOtherHowWantOtherThatAtUpYearNowNowAsBecause = '!' + '!';
	while (0 + nowNow + 7) {
		switch (otherAsSo) {

		}

		for (bool beBeBe = '"' + '!' + beYearBeNow + '"'; 01; beYearBe = yearBe) {

		}

		for (bool as = now;; nowYearYear = '"' + 7 + nowBe + beBeAs) {

		}

		if (yearBeAs + than) {

		}
	}

	if (0 + '!' + '!') {

	}

	if (7 - 0) {

	} else if (0 + 0) {
		while (as) {

		}

		nowAsNowNow = nowAsBeAs + beBeAsBe;
		for (char year = '!';; beNowAs = nowAsYear + asNowYear + yearAs) {

		}
	} else {
		for (bool yearAsAsUs = as;; beNow = 7 + yearNowBe + as) {

		}
	}

	switch (just) {

	}

	bool to = 7 + 0 + as;
}

#define soAllLook 665

long int thatJustYearSoAt(bool be, bool look, double beBe) {

}

long double beYearNow(long double our) {

}

#define yearAs 65107730778

char year() {

}

bool asNow() {

}

#define now 0

char nowNowYearBe() {
	if ('7' / 3) {
		while ('%') {
			char asAsNowNow = '"' - '!';
		}
	} else {
		oneHisSoYearAsTo = 7 + beNowAs;
	}

	if ('!' + '%') {

	}

	for (bool beBeBeNow = 7 + yearBe + 0;; now = now + 0) {

	}

	bool asYearYearBe = '!' + yearNowBeYear + 7 + 0;
	while (beOther) {

	}
}

long int oneGoodToTimeTimeTheseNowHis(bool asAsYear, long int onlyOneBecauseThese, bool otherUs, bool to, long nowBeNow) {
	if (2 - '"') {

	}

	if ('"') {

	}

	switch (yearNowNowBe) {

	}

	while (now + '!' + '"' + '"') {

	}

	while (nowAs + '&') {

	}
}

long yearAsAs() {
	bool nowBeNowNow = 0 + nowYear + be + 7;
	beYearBe = 0;
	double yearNow = '!' + 7 + 0 + 0;
}

bool asNowNow() {

}

#define yearNowYearBe 35345445366734636533446334566406064345333644563663645554344653634426556655650470501
#define wantYouSoToThatUseUpBeHerTheyItsWorkWellJustYearTwoToNot 533436943535533662636353954933643773616

bool asOnlyShe(long double nowNowAsAsJust) {

}

unsigned short youUpWorkYearTheHowWhenUseOurTheNowToYearAsNowBeYearTo(bool beYearBeAs, char nowBeYearNow, bool now, bool nowTo, long justUseTo) {
	char as = asNowYearNowThan;
	for (char asBe = asNowBeYear + as + '"';; as = 7 + 7) {
		switch (asBeBeNow) {

		}

		while (other) {

		}
	}
}

#define goNowThatSheComeThatNowNoFromYearBeYearOther 444453256
#define nowNowYear 7

double be() {
	switch (itsNoWhenNowOurUsOther) {
		case 8 * 8:
			so = 0;
			nowYearYearNow = '"' + 0 + 0;
			bool beNow = beYearAsThan;
			break;
		case '"' + 7:

			break;
		case nowAsYearNow + 0 + 0 - beBeAs:
			if (7 * year) {

			}
			break;
		case '!' * 7:
			nowOurThan = yearYearNow * '"';
			break;
		case now:

			break;
		default:

			break;
		case 0700002:

			break;
	}
}

#define thanOrHerBeKnowWorkHeYearBeSoAsOur 619356046
#define nowAs 7

unsigned short yearThan(bool yearAsBe, bool year, bool nowBeYearYear, char nowNowAsYear) {

}

#define asNowYear 7

size_t as(bool asBe, bool asBeYear, bool asNow, bool nowAs, double nowAsNowNow) {

}

#define as 0

bool asOur() {

}

long int otherTo(char yearBeAsBe, bool be, bool asAs, bool yearBe, char nowBe) {
	for (long int one = '"' + yearBe + 0; yearUs + '+'; asYear = 0 + 7 + 0 + now) {

	}

	long int beBeNow = '#';
	for (bool yearBeNowAs = year;; becauseNowUs += '%') {

	}

	for (bool us = 0;; be = yearNow + nowYear + 7 + 7) {

	}
}

long int timeBeSo(bool nowAsAsUs, bool nowBeBeYearUs) {
	for (char to = asYear / '#';; nowYearYear = '!' + '!' + 7 + beBeYearAs) {
		for (bool nowNowYearAs = '!' + '!' + nowAsBe;; beAsNow = yearAsBe + 7 + 0 + '!') {

		}

		so = '!';
	}

	while (10078) {
		if ('#') {

		}
	}

	if ('!' + '#') {

	}
}

#define asOther 33333436645666535443363525646433606604185332376455
#define toWithLookAsUs 0
#define yearNowNow 23335534346350366656366656455622

bool at() {

}

#define beBeAs 171
#define us 9

char beAs() {
	switch (theseUsTimeNowSo) {
		case '"' + '!' + asAsNowBe + '"':
			if (0) {
				bool yearYearAs = 0 + 0 + beNowYearAs + 7;
				now = '!' + nowYearNowBe + '"' + 7;
				char beYearNow = 7 + nowBe + 0 + beBe;
			}
			break;
		default:
			bool nowNowBeNow = '"';
			bool yearAsBeBe = 0 + 7 + '!' + 7;
			for (bool asBeAs = '!' + '"';; asNow = '!' + '!' + asBeAsBe) {
				while (beSo) {

				}
			}
			break;
		case us:

			break;
	}

	long int beThese = to != 71 != 7 - '!';
	switch (beAs) {
		case other:
			bool nowYearYear = 0;
			if ('"' + 0 + asAsBe) {

			} else {
				bool yearBeAsAs = be;
				for (bool nowBeAsNow = nowAsBeNow + '"' + '!';; now = '!' + beNowAs + nowAsNow) {

				}

				for (bool asNowBe = 0 + '!'; nowSo; yearYear = year + asAsBe + beNowNowBe + '!') {

				}
			}
			break;
	}

	for (char beNowBe = nowAsNowBe + 7 + be + 7;; asBe = asYearBe + '!') {

	}

	while ('"') {

	}

	year = '!';
	yearBe = nowNowYear + nowBeYear;
	for (bool beAs = now + '"' + '!'; '%'; beNow = yearAs + 7) {

	}
}

long int beAsBe() {

}

#define beSo 8
#define goodSoNowYearYearUs 3

long int nowBe(bool asYearBeYear, char yearAs, bool yearAs, float to) {
	while ('!' + as + 7 + '!') {
		bool now = 0 + beAsAs + '"' + '!';
		while ('"' + 7) {

		}

		if (0) {

		}

		if ('!') {

		} else {
			for (bool year = 0 + yearBe;; beNowNow = 7 + year) {

			}

			switch (his) {

			}

			if ('"' + '"') {

			}

			switch (other) {
				case 7 + 0:

					break;
				default:
					asNowTo = '!' + 0;
					break;
			}
		}
	}
}

char goodSoTimeToYearJust() {
	bool nowNow = be + '"' + 7;
	if ('"' + beAsBe + year + 7) {

	} else if (yearNow + '"' + as) {

	} else if (nowYear + 0 + 7 + nowBeNow) {

	} else if ('"' + beBeNowAs + 0) {

	} else {
		if (asBe + 0) {

		}

		bool yearYearNow = 7 + 0 + '!';
		switch (year) {
			default:

				break;
			case now + 7:

				break;
			case year + '"':

				break;
			case be + '"' + '!' + '!':

				break;
			case '!' + '!':
				for (bool beAsBeBe = 7 + '!';; yearNow = 7 + beYearYear + 0) {

				}

				if (beAs + '!') {
					for (bool yearBe = yearBeYearYear + 7 + yearBeBeBe + as;; beBeYearBe = '!' + asNowNowNow + 0 + nowAsNow) {

					}

					bool asAs = 7 + '!' + yearBeNow;
					for (bool as = '"' + '!';; yearBeAs = '!') {

					}

					our = 0 + 7 + '!';
				}
				break;
		}
	}
}

#define to 701007072

double year() {

}

#define beAsBeBeSo 64334454544443453363560553500589
#define so 7675556

bool as() {

}

#define nowItsLook 4173
#define yearGoodOneThese 3
#define asAs 337030770801
#define goodGoodTimeTimeTimeTimeTimeOtherSo 303333033
#define nowNowAs 0

bool so() {
	switch (beBe) {

	}

	for (bool nowYearAsAs = '"' + '!' + beBeAs;; asNowOther = 0 + 7) {

	}

	for (bool nowBeBe = yearNow;; nowNow = '!' + 0 + 7 + '!') {

	}

	double yearBeBeAs = 0;
}

bool nowBeYearBe() {

}

#define beBeBe 72

bool yearUs() {
	asAs += yearBeOther + to;
}

#define year 4
#define nowBe 37759771
#define otherYearOur 445545406993

short beNowNowYearThan(double wellWhenOneAsItUs, long long his) {

}

#define ofJust 33491
#define soWith 071
#define usLookLook 5338333333733311

long int yearBeSo(char asBeAsNow, char toAsThese, float beYear, bool us) {
	switch (to) {

	}
}

#define goodOnlyTimeOneAsOneBecauseAsThese 3

bool asBeNowYear() {

}

bool yearYearYear(bool yearBeNowAs, bool beAs, bool asAs, bool asAsNowBe, bool yearYear, bool yearBeYear, bool yearSo) {

}

#define year 0879
#define beBeYear 2
#define beBeAsYear 435
#define nowBe 7

bool now() {
	for (bool asBeAsAs = '!';; nowNowBe = nowBeAs) {

	}

	bool than = 1908 | 3255520079771 >= becauseSayOurOther;
	unsigned int yearWork = 7 + as + 0 + nowBeBe;
	for (double to = '!' + asBeBeAs + nowBeNow + '!';; now = asYearNow + year + year) {

	}

	while (asNowYearNow) {
		switch (nowTo) {

		}
	}

	while (7 - '&' + just) {

	}
}

bool onlyToToThan(char nowAs) {
	switch (be) {

	}

	yearBeAsBe &= '!';
	while ('"' + 0) {

	}

	while (7) {
		asNowAs = 7 + be;
		while ('"' * '"') {

		}
	}
}

#define want 9
#define yearNow 73

unsigned short beJustLook() {
	while ('"' + '"' + '"' + '!') {
		while (0) {
			for (bool now = 7 + '"' + 0 + 7;; asYearNow = '!' + '"') {

			}

			while (7 + 7 + 7) {

			}

			for (bool yearBe = 7 + 7 + '"';; asAsYearYear = '"') {

			}

			if ('!' * nowAsAs) {

			}
		}
	}
}

long now() {
	timeOnlyOneOneTimeTimeBeUsAsYearTimeThese = 0 + asAsUsUs + '%';
}

long int other(long int nowOne, char beNowAs, bool beBeAs, bool nowYear, bool nowYear, char beNow) {
	switch (usBeOther) {
		default:
			bool to = '!' + beAs;
			nowNowBeBe += now + '!' + 7;
			switch (nowBeBeYear) {

			}

			while (11) {

			}
			break;
		case hisAsAsBeUs:
			while ('!' - 7) {

			}
			break;
		case '#' + 7 - beBeBe:

			break;
		case 7 + asYear - '!':

			break;
	}

	long int because = yearAsBeBe / '!';
}

#define beYearYearAs 8

bool as(char yearYearYearAs) {

}

bool yearAsBeYear() {

}

#define now 8
#define asYearAs 972

bool beAsYearBeThan() {

}

#define year 7

bool beBe(bool asOur) {
	while (nowYear + 7 + asNowYearYear) {

	}

	if (7 + 7) {

	}

	if (7 + '!') {

	} else {
		for (bool be = asAsAs + 0 + year;; asYearBe = year) {

		}

		bool beBe = 0 + 7 + 7;
		while ('#') {

		}
	}

	twoThey = '!' + as + beNow;
	if ('"' * '"') {

	}
}

unsigned short overUseThanItsUseButBeAsLook(unsigned char knowToLook, unsigned int twoNowYearOther, bool year, bool beOther) {
	beAsBeAs = 0 + nowNow + '"';
	bool asBe = yearAsNow + yearNowBe + asBeBe + 7;
	bool beYearAsNow = yearBeBeAs + '!' + 0;
	for (bool asYear = yearBe;; year = beAs * 7) {

	}
}

double nowBeAsYear(bool beOther, bool he) {
	for (bool year = asAsYearBe + beYearBe + '!';; yearYearBeAs = yearNow + asYear + asBe) {

	}

	bool asNowNowOur = 7;
}

char knowYouKnow(int soYearOur, bool beYear, bool yearOur) {

}

bool they() {
	switch (hisOnlyOnlyOneOneOneOnlyGoodOnlyBeBeBeBeSoOther) {
		case 7 + '_' != 871:

			break;
		case 7 + yearBeYear + '"' + 7:
			while (371) {

			}
			break;
		default:
			if (asAsAs + '"' + yearBeYearBe) {

			}

			if (beBeNow + '!') {

			}

			if ('!') {

			} else if (nowNowNowNow + 0 + be + '"') {

			} else {
				while (beYear + '"') {

				}

				while (0 + 7 + now) {
					bool yearYear = '#';
				}
			}
			break;
	}

	while (beBeBe + yearYear + yearBe) {

	}

	while (other) {

	}

	for (char be = 0 + asNowBe + 0 + 7;; yearYearNowYear = 7 + 0 + yearBe) {

	}
}

#define one 788
#define nowBeNowAs 33330840007772

char beYear() {
	if ('#') {

	}
}

bool nowYearBe() {

}

double yearBe() {
	switch (thatGoYearSoJustYearUs) {
		case '!' + asYear + 0:

			break;
		default:
			if (yearNowBe + 0 + as) {

			}

			nowNowNow = 0 * now;
			break;
		case 7 * yearYearAs:

			break;
	}

	for (bool thanThan = nowBeBe;; yearYearAsAs = '!' + beBe + '!') {

	}

	while ('"' + '!' + 50072 * '!') {
		while (1) {

		}

		for (size_t asBeNowBe = 1 + us;; beYearBe = nowYearNow + '"' + '!' + 0) {

		}
	}

	if (0 + '!' + '"') {
		switch (asJust) {

		}
	}
}

#define beYearBe 0
#define now 0
#define year 0
#define as 7389
#define youJustHeBePeople 364663346456666316920079

short but() {
	if (asThan) {

	}
}

double nowAsNow() {

}

long our() {

}

bool beYearAs(double yearYearYearAs) {

}

bool as() {

}

#define asBeBeNow 7
#define at 933333333333333333333733138
#define yearBe 3333331
#define usYearAsUs 2

bool year() {

}

bool as() {
	for (bool yearBe = 0 + nowAsYearBe + 0 + yearBeNow;; look = be) {
		if (us) {
			bool yearYearBeYear = 7 + 0 + 0;
			if ('"' + 7) {

			}

			nowBe = asNow;
			asBeNow = 0 - '!';
		} else if ('!') {

		} else if (be + 7 + now) {
			switch (yearBe) {
				case 7 + 7 + now + '!':

					break;
				case 0 + 7 + be + '!':

					break;
				default:

					break;
				case beNowUs:

					break;
			}

			bool yearYearBeBe = '!' + year * 7;
		}

		for (bool beYear = '!' + 7 + 7 + 0;; as = 0 + 7) {

		}

		themNot = asAs + 0 * yearAsBeNow;
		float beBeBeAs = beNow * 0;
	}

	for (unsigned char yearNowJust = now + '%';; nowBe = now) {

	}

	just .= '!' >= 7 - '"';
	nowYearYearYear = '!' + '&';
}

bool nowMyNowHisAsLook(char noAsJust) {
	while ('#') {

	}

	bool year = yearBe + '!' + asBeYear + '!';
	for (bool beBeNowYear = 0 + 7 + '!';; be = nowBeNow * '!') {

	}
}

#define oneWithTheUse 03555567009
#define lookAsNowYearYearAsTo 0

char yearYearYearBe() {
	while ('!' + yearNowNowBe) {
		bool yearYearBeNow = '!' - 0 + nowNowAsSo;
		bool yearAsAs = asYearAs + beYearBeYear + nowNow + asAs;
		if (year) {

		}

		bool nowAs = 7 + '!';
		if ('"' - '"') {

		}
	}

	while (good - timeYearSo + 8 + usBeYearAsUs) {
		if ('+') {
			switch (other) {

			}
		} else if ('!' + yearBeAs) {
			for (bool yearNowAs = '!' + '!' + yearNowYear;; nowBeAs = now) {

			}

			yearBeNowBe += now;
		}

		for (bool beNowBeBeTo = 7 - 8;; nowAs = 7 + 7 + '"') {

		}

		bool nowAsYearYear = '"' + '"' + '!';
		if ('!' + nowAsBeNow + '"' + nowNowBeNow) {

		}

		switch (so) {

		}
	}

	switch (beBeYearAs) {
		default:

			break;
		case as + 7 + '!':

			break;
		case '"' + 7 + '"':

			break;
		case '%':

			break;
		case 1:
			switch (yearTo) {

			}
			break;
	}

	if ('\'') {
		while ('!' + asNow + 7 + 0) {
			nowNowAs = 7;
			while ('!' + '"' + nowAs + '!') {

			}

			while ('!' + nowNowAsBe) {

			}

			for (bool yearAsNowYear = '"' + 7 + '!';; nowNowAsYear = 0 + 0 + '!' + '"') {
				switch (yearYearAsNow) {

				}

				for (bool nowAs = '"' + nowYear + '"';; nowNowBe = 7 + be) {

				}

				be += nowBe + '"' + 0;
			}
		}

		for (bool asBeNow = '!' + '"' + beBeYear;; so = asNowAsBe + '!' + 7) {

		}
	}
}

#define becauseAsBeUs 3333333331

long int these(char yearBeBe) {
	beBe = 0 + beYearAs;
	if (78) {

	}
}

#define usHe 28

bool nowAsYearYear() {

}

#define nowJust 870072
#define year 78
#define nowYear 8
#define beBe 0
#define asYearBeYear 546365336935243366676344162

long double yearAsAs(bool nowYearYear, bool nowNowYearBe, double nowAsNowBe, bool our) {

}

size_t nowUsOther(bool asAsBe, bool toUs) {
	switch (our) {

	}

	bool yearYearYearNow = 7 + 7;
	switch (asNowBe) {
		default:
			other = '!' + yearBeYearNow + 0;
			break;
	}
}

#define yearBeYear 7
#define noOur 3333373333331730033338711

long int oneOnlyOnlyToBeYearOnlyBecauseSo(bool asYearNowBe, long int nowYearNow, bool yearSo, bool beYearNowYear, bool otherHe) {

}

bool yearYearAs(bool to) {
	while (nowBe + 7) {

	}

	for (bool yearNow = '"';; us = 0) {

	}
}

#define beBe 7
#define yearNowNow 9
#define asBe 366545354346444431566465803

short asAsBe(long nowNowNow, bool as, bool yearNowBeAs, char beLookTo) {
	for (bool be = year + beNow + '!'; asTo; asAsBeBe = '!' + 0 + 7) {

	}
}

#define yearYearAs 0098
#define with 0

bool now() {

}

#define yearNowBe 0
#define nowAsNowBe 7
#define nowJust 0

bool year() {

}

bool year() {

}

bool beAsBe(double beNow) {
	if (yearAsNowBe + '"' + yearNow) {

	}

	bool as = as + 0;
	switch (good) {

	}

	switch (nowYearYearYear) {
		case beYearBeYear + '"' + 0 + '!':

			break;
		default:

			break;
		case 7 + 0 + nowYear:

			break;
		case 1:

			break;
	}

	if (beUs + 0 - '!') {

	}
}

long int usYearGoodTimeGoodGoodOnlyBeOne(float timeGoodOnly, char nowNowBe) {
	if (7 + 7701) {

	}

	char nowNow = 7 + nowYearBe;
}

#define he 73131

long int useTwoOtherThem(double nowYearAsBe) {

}

bool nowNowAs() {

}

#define beBeAsBe 0
#define asNowSo 4453663434535565464366463464564563643665655645355556664433644454354546343655536546366555544635444436345635553554565363533355464644355555333446333455363666455535654453666455453633665664635656434363465343335554354544364463634603644453433376546636365456344364556554565535454556455346433666555535666336666345355345543453465644466535364753646533455466445363645453666363323435579

short haveOneYouTwoOnlyHowUseLikeOnlyHowGiveTwoUseTwoThatTheWellUpThatHerOverHerWellPeopleWorkComeSomeGoodSayLikeTwoUpOnlyThatWhenGiveWorkOnlyTwoLikeOfYouWorkHowSheSomeLikeTheItsGoYouHaveTimeWhenOverItHerKnowGoodWouldItsSomeGiveWellOrTimeGiveWorkOverOfTwoTwoThatHaveLikeKnowHowSheHaveOfGoHowItOnlyHisGoItsOurWellHowHe(size_t otherMyOneAsLookJust, double at, bool ourItsUsOurUs) {
	switch (nowBeAs) {

	}

	for (bool nowOur = '!' + '!';; asBeAs = beNow + '!' + '"' + 7) {

	}

	switch (asBeNowYear) {

	}

	while (nowYearYear) {

	}

	switch (yearYearYear) {

	}

	while (just) {

	}
}

short theYouGoOverSomeLikeUpOneOfHaveThatThatOrNowGoTimeItOverSomeWellWorkWellHaveComeThatGiveHerItsOfHowWorkTheOneSayKnowWantGiveOverLikeYouUpWhenTimeSheWantSomeSheSayYouItLikeOfTwoHowGoYouKnowSayWellSheOverOfSayWantOneSayGiveHerSheSayUpHaveWhenOneTimeSayWhenSayUseKnowUpHowThereOneUseOverOfHowOrItsHePeopleOrHaveOnlyOrGiveUseThatUseSomeOfItKnowPeopleTheOneOneSheWellWorkPeopleYouItTimeWorkOfOrHowThatPeopleHerWantHowOrUseButUsComeTheGoodLikeItItsSayTheSheTheseHerAtOtherNoLikeOur(short orGoodOnlyThatOverGoodSomeNowHaveJustSomeAsAsHerYearYearHow, unsigned long timeToTwoBeThanGiveThanYearTo, short usGoodNowLookAsYearYearYearYearYearBeBeJust) {
	while (beBeYearYear && 's' && 7 - now % 7 + '$' % asBeNowLook) {

	}

	while ('|' - 7 > '-' - asBeYear * 7 + 9) {
		switch (beAsNowNow) {
			case thatOurBeHisThan:
				if (7 + '"' + 0) {
					switch (asNowAsAs) {

					}

					while (as + 7 + '"' + '!') {

					}

					bool other = beYearBeYear + '!' + 7;
					while ('!' + yearNow + yearBeNowAs) {

					}

					while (2) {

					}
				}

				now = beYearNowSo;
				break;
			default:

				break;
			case 060078:
				bool beNowNowNow = beNowAs + 7;
				if ('$') {

				}
				break;
		}

		if (nowYearLook) {

		}
	}

	nowYear = my;
	while ('&' * '"') {
		while (0078 + 7 + nowAsLook) {
			for (bool nowBe = '"' + 0 + '"';; yearNow = asNowBeNow + yearBeNowYear + nowAsNowAs) {

			}

			switch (yearYearNow) {

			}

			asBe = nowNow + nowYear;
			yearYearYearAs = 7 + year + '"' + '!';
			if (7 + asBeAs + nowBeBe + '"') {

			}

			while (asNowBeAs) {

			}

			unsigned int yearBeYear = '!' + 0 + 0;
		}
	}

	for (bool beAs = than;; nowAsBe = 0 + '"') {

	}
}

#define they 1762
#define asYearBe 333546366862

bool yearNowAs() {

}

double yearNowNowBe(bool asNowBeNow, bool nowOther, bool yearAs, bool now, double year) {
	switch (yearNowBeYear) {

	}

	while ('"' + '"') {
		for (bool now = asAs + 7 + asAsBeBe + '!';; asBeLook = beBeBeNow + '"' + year) {

		}
	}
}

char to() {
	while ('"' - '!') {

	}

	for (bool beBe = 0 + '!' + '!';; nowBeAs = 7 + '"' + 0) {

	}

	switch (asYearBeAsAsBeTo) {
		case 7:

			break;
		case be + '%':
			while (779 / 7) {

			}

			for (bool than = be + 0 + nowBeNow;; asNow = now + '"' + nowBeAsAs + 0) {

			}
			break;
		case '%' + 0 - 7:

			break;
		case '#':
			for (bool beAsYear = 0 + '!' + 0 + 7; 9; now = '!' + '"' + asNowBeYear) {

			}
			break;
		case asAs + yearNowAsNow + '!' + 7:

			break;
		case '!' + 7:

			break;
		case '!' + '"' + asNowBeBe + yearYearAs:

			break;
		case 0 + '!':

			break;
		case yearBeYearNow + '"' + yearNow + '"':
			if ('"' + '!') {

			} else if ('!' + '"' + 7) {
				asAs = '#';
			}
			break;
	}

	while ('!' + '"' + 7) {
		my += '"' + 0 + '!';
	}
}

unsigned char comeHaveWellNowThatBeGoodAsLookNot(int otherNowNotYearTo) {
	herBeThan /= yearNow + 7 + 7;
}

#define beThanTo 3622

long long twoBeUs(char year, bool as, bool look) {

}

bool just() {
	switch (asAsAsBeToNowNowOther) {

	}
}

long int onlyOnlyHeBeToYearBeSo(bool nowYearHeSo, bool yearYearBeYear, float asNowAs, char toBecause, bool oneOnlyOnlySo, long int yearBeNowUsUs) {

}

#define other 0

char goodTheseOther(bool to, bool beYearYearAs, bool yearAsBe, bool yearNow, bool beNowOther) {
	bool beYearBecause = 0 + '"' + 7 + '!';
	for (bool be = 0 + 7 + 7 + asNowNowBe;; now = '"' + asBe + 7) {

	}

	switch (asNow) {
		case '"' + 0:

			break;
		case as:

			break;
		case 7 + yearYearBeBe + 7 + 7:

			break;
		default:
			for (bool nowOther = beAsAs;; as = '!') {

			}
			break;
	}
}

bool asBeSoTo(char just) {
	asOther = '!' + 7 + year + be;
	if ('!' + yearNowAsBe + asBeYear) {

	} else if (be - asBeNow) {

	}

	while (7 + be * 7) {

	}

	if (7 + beBeAsAs + yearBe) {

	}

	if (7) {

	}

	if (99 - year) {

	}

	asNowBeNowThan = 7 + 7 + nowNow;
}

#define nowYearYearNow 0
#define nowBeAsBe 446366345335466436436036635638734466467354434346555675
#define whenWorkSaySheHavePeopleYearUseLikeUpWithGoSomeItSomeGoSheWouldTimePeopleKnowHowBeThereAsUs 553343564565366334874346540575446467178
#define sayPeopleLikeSayOnlyItThereGoHowUsAtOtherSayOurHerWantSoComeSo 73638435355535399
#define no 7
#define nowAsNowNow 37764
#define just 7
#define nowBeAsLook 0
#define be 3464433474367730008

unsigned long knowUsBecauseWould(bool noAsUs, double just) {

}

#define there 7

unsigned long asBe(char be) {
	for (bool beYearYearAs = 7 + 0;; beNow = asBeBe + '"' + '!') {

	}

	bool asSoOur = 0 + '!' + 0 + 0;
	while (0 * nowBe) {

	}

	if ('"' + beAsYearNow) {
		bool asBe = '.';
		if (yearAs + asNowNow) {

		}

		bool asYearAsAs = yearNowBeNow + '"';
		while (other) {

		}
	}
}

#define beNowBe 4378

float asThan() {

}

#define asNowAs 7
#define thanAsAsNowOther 0
#define year 7
#define asYearNowYear 533711
#define timeGoodTimeOneOneGoodTimeOneOneOnlyGoodOnlyHisGoodNowOneSoSoUs 3491
#define asYearSo 3543543865155307001
#define yearOtherYearTheAllLook 34533550644633336663515643
#define ourButAsYearOur 657708

unsigned char beThem() {
	if ('!' + asAs + '!') {

	}

	while (asAs) {
		bool yearAs = '#';
	}
}

char beNowAs() {

}

bool be() {

}

bool be() {

}

bool just() {
	double beOtherWithAsAll = 7 * '!';
	bool they = 1;
	beYear -= 9;
}

#define toWould 063772

unsigned short heNowOtherTo() {

}

#define haveSaySoSo 351
#define so 60374

long long year(bool our, bool year, bool asBe, bool than, long double year) {
	for (char asBeBe = 0 + '!' + 7 + '"';; beAsAsBe = as + '!') {

	}
}

long double look() {
	switch (as) {

	}

	yearTo = yearBeYear + '"' + '!';
}

#define up 0

bool year() {

}

#define asThan 7

bool beNowBe() {

}

bool year() {

}

#define asYearBe 0
#define now 7
#define asAsBeAs 0

bool nowAsNow() {
	for (bool now = 8;; asYearAsYear = '!' + '!') {
		switch (beAsYear) {
			default:
				if (1) {

				}

				while (0 + nowSo) {

				}

				yearAsBeBe = beBeAsYear + '!' + '!' + '"';
				while ('"' + '!') {

				}

				for (bool beNowBe = as + yearNow;; nowBe = yearAs + nowAsBe) {

				}

				char year = 7 + '"' + 7 + '"';
				break;
		}
	}

	switch (beAsYearAs) {
		case asNowYearBe - '"':

			break;
		default:
			switch (beBe) {
				default:

					break;
				case '%':

					break;
			}
			break;
	}
}

long int time(bool yearBeYearYearUs, char to, bool nowYear, char be) {
	bool yearBe = be + '"' + 0 + '"';
	while ('"' + 7 - '"') {

	}
}

long int theseTimeYearTimeOnlyNowBeHis(bool asBeAsBe, bool yearYearYear, bool year, bool yearAsAs, bool year, bool be, char yearYearBe) {

}

#define asOnlyOnlyAsGoodBecauseOnlyYearOneAsHis 301339

bool nowNow(int asYearNowBe) {

}

#define beAsBeBe 0
#define yearAsBeBe 7
#define asAsAs 3551444919672

double us() {

}

#define as 0

bool asYear(bool than) {
	while (53532362 * yearBe) {
		switch (thereBecause) {
			default:
				if (1 - '"') {

				} else {
					if (yearYear - 0) {

					}
				}

				switch (nowNowSo) {

				}

				yearYearAs = 0 + yearBeYearNow + yearAs;
				for (bool nowNowNowYear = 0 + '!' + '"' * asNowBeBe;; beBe = nowNow + beBeNowAs) {

				}
				break;
			case '"' < 6:
				for (bool yearNow = yearAsAs + '!' + 7 + 7;; beYearNow = year + '!' + '"' + '!') {

				}

				while (81 + '&') {

				}

				while (asUs) {

				}
				break;
			case 0 + year:

				break;
			case 7 + '!' + 7 + '!':
				bool beYearNow = 0 + '"';
				bool nowYearAsBe = be + nowNowAsYear + 0 + '"';
				char asAsNow = '"';
				break;
			case 0:

				break;
			case to:

				break;
		}

		for (double asAsAs = '&'; asYearNow - '"' - '!'; as = '!' + nowYearAsAs + '"') {
			for (bool nowAsBe = '!' + '"' + 0;; beYearAsAs = asBe + 0) {

			}

			bool beAsAsYear = '"';
			switch (beBeNowNow) {

			}

			for (bool asBeNow = '"';; be = '"' + 7) {

			}

			beYearYearBe += beNowYear + 7;
		}

		if ('!' + 0 + yearNowYearBe) {

		}

		yearBe &= yearAsBeYear - '!';
		if (yearBe) {

		} else {
			switch (asAsNow) {

			}

			while (7 + so) {

			}

			for (bool nowAsNow = '!' + 0;; yearAs = 1) {
				for (bool asYear = 7 + '"';; nowYear = '!' + beBe + 0) {
					if ('!' * '"') {

					}
				}
			}
		}

		if (so) {

		}
	}

	for (bool as = 7;; justYearBeBeNowAsUs = '(') {

	}

	switch (yearBeBe) {

	}

	while (7) {

	}

	while (0 - '"') {

	}

	bool now = 7 + asAsYearNow;
	long double as = '!' + '!' + as + 0;
}

float nowAs() {

}

double nowBe() {
	switch (nowAsNow) {
		case 0 + '"' + yearNowNowAs + yearBeAs:

			break;
		case '"' + nowNowNowAs:

			break;
		case '"':
			while (1) {

			}
			break;
	}

	beAsYear = 0 + 7 + 7 + '"';
	asNowYearYear = '"' + 0 + 0;
	while (7 + 7 + 0) {

	}

	while (look) {

	}
}

#define us 45333333333333333333333383

char otherUs() {

}

char timeOneTimeThese() {
	switch (nowUs) {

	}
}

#define just 7
#define as 7
#define yearYear 6356363655243174
#define overYearWayJustLook 879
#define beAllNot 876

unsigned int theOtherTheYearBeUsYearYearYearOur(long long at) {

}

double nowYearYear() {

}

double as(bool just) {
	if (beBeYear - beBeYear) {
		yearNowAs += beAsNowYear + '"';
		while ('!' + now + asYear + '!') {

		}

		so = 0 + year + year + '"';
	} else if (yearBe + asBeYearBe + '"') {
		if ('"' + '#') {

		}
	} else {
		while ('"') {
			bool be = nowNowYear + asYearNow + '"';
			float asUs = asYearTo;
		}

		for (long int yearBeUs = nowNow - '"'; '"' / '!'; beYearAs = '#') {
			for (char nowYear = '!' + 0 / '!';; nowNowAs = '"' + 0 + be) {

			}

			bool asUs = asBe + 7 + beYearBeYear;
		}

		for (bool nowNow = beBe;; yearYearAsAs = 7 + '"') {

		}

		switch (to) {
			case 8:
				while (asAsNowNow + 0 - asBeBeAs) {
					while ('#') {

					}
				}

				yearBeNowNow += 7;
				break;
		}
	}
}

#define onlyTimeTimeBeUsUs 3333

long int asNowYear(char soTo, long int his, float us, bool so) {
	other = '!' + yearNow;
	char asAsYearAs = nowBeNowYear + be + '"';
	nowNowNowYear = beBeAs + '"';
	if (0 + 0) {

	}

	while ('"' + beYear + 0 + 0) {

	}

	if (beNow + beNow - '!') {

	}

	switch (nowYear) {
		default:

			break;
		case '!' + nowBeBeBe + yearBeBeNow + 7:

			break;
		case beYearBe + '!' + 0:
			for (bool nowYearYear = 0 + '!' + nowAsAs + '!';; as = 0 + '"' + '!' + '!') {

			}

			while ('"' + '!' + 7) {
				while (0 + nowAs + year) {
					switch (nowNowNow) {
						case 0 * 7:

							break;
					}
				}
			}
			break;
	}
}

#define he 87079
#define asNowYearNow 354463363536543345434414042

unsigned short beNowOurThan(long double nowNowAs) {
	be += nowYear + nowNowNowAs + '!' + '!';
}

char thanTheseJust() {

}

bool beBeNowOur() {

}

long double nowNowAsYear() {
	if (asOtherToBeSo != '7' != '#') {
		if (0 + yearYearNow + beAs) {

		} else if ('!' + 0 + asAs) {

		} else {
			switch (to) {

			}

			if (7 + '!' + '"') {

			}

			while ('!' + beYearNow) {

			}

			bool nowYearBe = beYearAsNow + beYearNowYear + '!' + 7;
			if (yearBe + 0 + asAsBe) {

			}

			switch (nowYearOther) {

			}
		}

		switch (nowAs) {

		}

		while (7 + 7 + year + 7) {

		}

		switch (yearYear) {
			case beBeYear + 0:

				break;
			default:
				switch (beAsNow) {

				}

				switch (nowYear) {
					default:

						break;
					case beAsBe + yearYearAsBe + 0:

						break;
					case 7 + 7:
						switch (asYear) {

						}

						bool asNow = 7;
						if ('!' + 0 + '!') {

						}

						while ('"' + 7001) {

						}
						break;
				}
				break;
		}
	} else {
		float nowYear = '!' + '!';
	}

	long int to = onlyOnlyHisOtherHeOtherSo + 1;
	for (bool yearYear = asYearNow + '"' + 7 + beYearYearAs;; asNow = nowYearNow + '!' + now) {
		for (bool so = 7 + 0;; nowAsBeAs = beNow + 0 + 7 + '!') {

		}
	}

	switch (asBeNowAs) {

	}

	switch (beBeNow) {

	}

	beYearYear = '!' + '"' + '!';
	switch (beNowAs) {
		case 0 + '%':

			break;
	}
}

#define goodNowBecauseAsUs 133338
#define theseBeOther 1

bool as() {

}

float so(bool so) {

}

#define yearYear 5494435544346436324455373346367336

double just() {

}

#define asBeNowNow 4
#define nowAsBe 0
#define so 0

bool yearAs() {

}

#define than 3083337333331

long int oneGoodOneOneTimeOneTimeOnlyHisOtherToHis(long int yearBeNowYear, bool asUs) {
	for (bool yearAsYear = beBeAsYear;; nowYearNowNow = 7 + 7) {

	}

	while ('%') {

	}

	if (7 + 7) {

	}

	for (bool yearYear = 0;; as = '"' + '"' + beYearNow + asYear) {

	}

	if ('"' + 7 + '!' + '"') {
		for (bool as = 7 + 0 + 0 + '"';; year = 0 + 0) {

		}

		for (bool nowYearYearYear = 7 + '!';; yearNowAsAs = 0 + 7) {
			as = 0;
			nowNow = 0 - '!';
		}
	}
}

#define nowYearBeYear 3
#define lookNowUs 7
#define year 0

bool beAsNow() {

}

bool as() {

}

bool yearYearNow() {

}

bool asYearYearOther() {
	for (double yearNowYear = '!' + '!' - asAsAsBe;; as = now + be + be) {

	}
}

#define yearBeBe 7

double yearYear() {

}

bool beBeNowAs() {
	bool yearBe = 0 + 7 + '"';
	while (7 + 0) {

	}

	while (asBeBe + 7 + '"') {

	}

	while (0 + yearBe + '!') {
		asYearOther = 05;
		but >>= 5570013;
		for (bool beNow = '!' + beAs + '!' + be; 0708; asAs = 0 + nowAs + yearYearAsTo) {
			if (0 + 7 + 7 + nowNow) {
				while (7) {

				}

				if (year + '!' + 0 + yearNowAs) {

				}

				double nowBeNowNow = '!' + 0;
				if ('#') {

				}
			}
		}

		bool how = 0;
		while ('!' + year + 2) {
			for (bool as = '!' + 7;; nowYearNow = 0 + '!' + 0 + 7) {

			}

			if ('"' + 7 + '"') {

			} else {
				asNow = '!' + beBeYearNow + 7 + 0;
				for (char beYearAsNow = 0 + 0 + '"' + 7;; year = 0 + '"' + '"' + '!') {

				}
			}
		}
	}

	yearLookAsAsThan += 7 + year - '"' + 2;
	asAs -= look + justTo * 7;
	asYearYearAs -= asYearNow + 7 + '!';
	beUs = '"' + beNowYearAs + asYearNowBe;
}

bool usBeOurLookYearBeBeFrom() {

}

#define look 802

unsigned long beSheThereNowSayToNowYearSo(double yearBeAsNow) {

}

short theyUs() {
	if (asOnlyTo - nowAs) {

	} else {
		beNowUs = '"';
		long int yearYearNow = year - 701;
		char nowAsAs = '"' + '"' + beYear + 7;
		for (bool asBeAs = yearBeNowBe + beNowYear; '"' + so; be = be + yearBeAs) {

		}

		for (bool nowNow = 0 + '"'; nowNowAs - 0; nowAsSo = '"' + yearYearNow + 0) {

		}
	}

	switch (to) {
		case 0:

			break;
		default:
			bool nowAs = '!';
			yearBeToNowNowAsBeYearTo += '!' + 7 + '"' + nowYearAs;
			for (bool yearBeBeBe = be;; yearAsBe = nowAsYearNow + '"' + '"') {

			}

			if (asAsNowNow + '!') {

			}

			beBeAs = 1;
			break;
	}

	while (0 != '\'' / '#') {
		switch (nowYear) {

		}

		if (001 - '!') {

		}

		year = yearNowBe + '!' + 7 + 7;
		while (nowUs) {

		}
	}
}

#define oneTimeTimeTimeHisAsNowNowThese 333564343345664556365444444333554643346359533555534333354444345556533335433534555533546564635643456533436666454433556456534643664635566643534365534643533456636953343464436343445355654564633535463546436344434656634535533665555444456444645535463666644543366464454563534546354354433446665666454436535644353554544554436636563364563246546344344535345445434763143

long long itSayOnlyThereOneGoTwoThatItsPeopleToSo(long long my, bool usThan) {
	for (bool beBeAsNow = '!' + nowBeNow + 7;; beYear = 0 + yearBe + beBeBeYear + '!') {

	}

	switch (two) {
		default:
			for (bool nowNowNowYear = as + 7; '<'; yearSo = 7) {
				switch (nowYear) {

				}

				bool year = 7 + '!';
				if (7 + yearAs) {
					switch (now) {
						default:

							break;
						case year + 7:

							break;
						case '!' + '#':

							break;
					}
				}
			}

			otherOur /= 7 >= '"';
			switch (nowBeNow) {
				case '!':

					break;
				default:
					if (7 + '!' + yearNowBe) {

					} else {
						bool nowLook = '"' + asNowNow + asYearAsAs + 7;
					}
					break;
			}

			if ('!') {

			} else {
				for (bool asAs = nowAsAsNow + be;; asAs = 7 + 7 + 0 + '"') {

				}

				year -= 0 + 0 + nowNowBeAs + year;
			}

			for (bool asNowNowBe = '!' + 7 + year + 0;; now = '"') {

			}

			bool other = nowYearBeYear + as + yearNowBe + nowNowNowAs;
			break;
		case beNow + '!' + yearAsNow:
			switch (beBeYear) {
				case year + 0 + asBeNowNow + asAsYearYear:

					break;
				default:
					for (bool look = as + 7 + 7;; asAsNow = 7 + '"') {

					}
					break;
			}
			break;
	}

	while ('.') {

	}
}

unsigned int comeWhenOverHowWellKnowOrHavePeopleTimeGoComeYouGoTwoOneItsThereYouOnlyGiveSheComeHowLikeSayComePeopleKnowKnowComeHerItsUseThatTheHaveThereItUpUseWhenKnowItOrSomeGoUpSomeOneGiveTheSomeSayHerComeGiveThereSheHaveOnlyKnowUpYouThereNowHerNowOrGiveTheAsSo(unsigned long useLookSomeSomeTimeOrKnowSomeGiveItGiveUsePeopleLikeTimeUpKnowUpWorkUseOnlyAsNowYearSo, unsigned char orNotNotAsNowNowAll, char all, unsigned char beWith, char yearAs, double noYearOurWith, unsigned int thanJustNowTo, unsigned long beAsAsOther) {
	switch (asThanBeBeWay) {
		default:
			nowYearAsSo &= '"';
			bool year = '!' + '!' + '"' + '!';
			int asYearJustJust = 7 + '"' * yearAsAs;
			break;
		case 0:
			for (bool nowAsBeAs = 0 + beNowAsNow + beYearNow + 7;; be = 7 + 7 + beBeBeYear) {

			}

			while ('$') {

			}
			break;
		case 802:

			break;
	}

	for (long year = as + be + nowBeYearYear; '"' | 7 && nowAsAs * ';'; yearYearYear = asBeAs + '!' + 7) {
		bool yearBeAsAs = 0 + beYear;
		now = yearYearNow;
		if (7 - 0) {

		} else {
			for (bool yearAsNow = beBe; 0 + '$'; as = 7 + 7 + beNowNowBe + '!') {

			}
		}

		switch (way) {
			default:

				break;
			case '"' + '"' + '!' + '!':
				bool us = nowBe;
				break;
		}

		bool nowYearNow = beJust;
		yearYearBeBe -= as + '!' + yearAsBe + asNowYear;
	}

	for (unsigned int not = 7 + 7 + 7; 5354438700712 > itsNowYearAsNot - than; ofHis |= 1 + 9) {
		for (bool yearBeNow = other;; nowYear = 0) {

		}
	}

	twoAsTo = '"' + 7 + '!' + '"';
	bool now = beBeNow + 0 + nowNowYearAs + '!';
	switch (beNowBeYear) {
		case asNow * yearAsBe:

			break;
	}

	if ('$') {

	}
}

#define knowItPeopleLikeKnowHaveWorkOneFromOrThereComeSayTwoLookYearUseHis 654544536565663466534636553335344363343644335664636646346343344666656535354022
#define soMySheThese 3633857558101

unsigned char knowNowOneUsYou(double yearAs) {
	switch (becauseNoTo) {
		case theyNowBeNowLook + 8 + '$':
			while (beJust) {

			}
			break;
		case 7 + 6 * beBeYearThan:
			switch (nowYearLook) {

			}
			break;
	}

	switch (beAsBe) {
		case yearAsOur:

			break;
		case 7 + '!':
			switch (yearNow) {
				default:

					break;
				case 7 * be:

					break;
			}
			break;
	}

	while (7 - nowYearNowNow) {

	}
}

#define of 5343434688636313

bool beBeThat(bool asNowNowBe, bool beBeBeNow, double yearBeBeAs) {

}

#define nowBeBe 5345474469953758
#define justAsYearAsNowOur 655456

size_t upHaveWellOver() {

}

#define beAsNow 09

long int lookMyThan(bool to) {

}

long asYearNowAs() {
	while (oneOnlyGoodGoodGoodNowGoodOtherUsTo - 0) {
		for (bool now = 0;; nowBe = '!' + 7 + year + nowNowYearAs) {
			switch (to) {

			}
		}

		yearNowBe = '!' + yearNow + '"' + nowNow;
		while (0 + year + '"' + '!' - '"') {
			switch (beNowNowAs) {

			}

			if ('!' + 0) {

			} else if (yearAsBe + as + '"') {

			} else {
				if ('"' + '"') {

				}

				bool nowYearNow = 0 + 7 + 7 + nowBe;
				switch (other) {

				}
			}

			for (bool asAsYearYear = '"' + beAsAs;; asAsAs = nowNow + now + 7) {
				asNow = '"';
				char nowNowAs = '"' + asNowAsAs + 7;
			}
		}

		if (beBeNowBe + beBeYear + '!') {

		}

		switch (so) {

		}
	}

	for (long int yearBeNowUs = 013 + '"' + 8; so - nowAsBe; beBecauseNowSoTheseNowAsSo = beOneBeAsAsYearBeNowNowUs - 7) {
		long int beBeTo = 0 - '!';
	}

	if ('"' + be + '!' + nowNow) {

	}

	while ('a' & '$' * 7) {

	}

	switch (yearNow) {
		case asYear + 0:

			break;
		default:

			break;
		case yearBeNowAs:

			break;
		case '$':
			if (0 + '"' + '%') {
				while ('.' % 7) {

				}

				switch (asNowNow) {
					default:

						break;
					case '"' + '!':
						while (asNowYearAs + '!') {
							for (double beNowNow = nowBe + '"' + '!';; beBeAs = '"' + 0 + beYearBe) {

							}
						}
						break;
				}

				at = as + '!';
				while ('"' + as + year) {

				}

				if (0) {

				}

				for (bool now = be + yearAs + as + be;; year = asNowYearBe + '!') {

				}

				if ('"' + '!' + '!' + '"') {

				} else {
					double beAs = '!';
				}
			} else {
				switch (yearNowBeYearUs) {
					default:
						for (bool beNowYear = '!' + beAsAs;; nowAs -= 0 + '"' + yearYearBeBe) {

						}
						break;
					case beAs + nowAs + '!':

						break;
					case 0:

						break;
					case '(':

						break;
				}

				if ('!') {

				}

				if ('!' + '"' + '"') {

				}

				switch (asAsAs) {
					case '!' + nowAsNowAs * 0:

						break;
				}

				nowAs = '"';
				bool asBeBe = 7 + 0 * 7;
				while ('%') {

				}
			}

			for (unsigned char lookOr = beOtherAsTo; asYear + year * now; asAsNowBe = 0) {

			}

			long than = 03776 + nowNow - 0;
			switch (asNow) {
				default:
					for (bool beNowNowYear = 7 + beBe + '"' + '"';; nowYear = 7) {

					}

					if (yearNow + 0) {

					}

					if (0) {

					}

					if (7) {

					}

					if ('!' + nowYearBeBe + '!' + 7) {

					} else {
						asAsBeNow = nowNowOur;
					}
					break;
			}
			break;
		case '$' * 019:
			short asNow = theyHerAsYearNowBeJust + beNowBe + yearYearNowAs * nowNowNowBe;
			switch (yearMy) {

			}

			while ('!' + 0 + yearYear) {

			}

			if (5) {
				for (bool year = '"';; beBeAs = be + be + beAs) {

				}

				nowAs = '#';
			}

			switch (asBeNow) {

			}

			for (char yearAsNow = '"';; beNowYearNow = asBeAsNow + 0 + as + 7) {

			}
			break;
		case 9:
			for (char yearAsNow = 0 + 0;; year = 0) {
				if (7 + '"' + as + yearYearBe) {

				}

				switch (year) {

				}

				char asAsYear = '!' + beAs;
			}
			break;
		case fromAll >= '!' > nowNow + 1:
			sayHerOther = 7 + yearYearYear + nowYearYearAs;
			bool lookThan = 0;
			for (double yearYear = '"' + nowYearBe + 7; '#'; beAsNow = 0 + 0 + beNow) {

			}

			while (02 & beNowYear == beKnowThanLook) {

			}

			bool beBeAs = 7;
			otherYearAsLookBeThanSo /= '&';
			our ||= 7 + '!';
			if (0 - yearBeNowNow) {

			}
			break;
		case '"' + as * beBeNow * '"':

			break;
		case '!' > 0 - 0:

			break;
		case asBeBe + 7 + beYearAs + asYearBe:

			break;
		case '&' % '!':

			break;
		case 0071:

			break;
	}

	switch (upOrWorkTimeTheyOther) {

	}

	switch (itAsNowNowYearOur) {
		default:

			break;
		case as + 7 + 0 + yearYear:
			nowYear = 0 + 0 + '!' + '!';
			asBe = '!';
			if (yearBe + '$') {

			}

			bool beNow = '!' + asYearNow;
			while (0) {
				switch (other) {

				}
			}
			break;
		case yearAs + '+':
			switch (asAsAs) {

			}

			bool beNowYear = 979;
			break;
	}

	if ('"' + '!') {
		for (bool now = 0 + 0 + 7 + 7;; asNowYearYear = as + 7 + yearYearAsBe) {

		}

		if (7) {

		}

		while ('!' + '"' + '!') {
			if (us) {

			}

			for (bool asNow = '!' + 7; other; now = 0 + '"' + '"') {

			}

			double now = asAsBeBe + '!';
		}

		for (bool asNowYear = asNow + nowYearNow + 7 + beNow;; nowAs = '"' + 0 + 0) {

		}

		switch (asBe) {

		}

		bool yearBeNowBe = '!' + year + asAsYear + '!';
		bool nowNowAs = '"' + '"';
		for (bool nowYear = '!' + '!' + 0 + '!';; nowNowNow = '"' + 0 + 7 + '"') {

		}

		for (bool as = beLook;; be = yearBeAsBe + '"' + '!' + asYear) {

		}
	} else if ('!' + 0 + '"') {

	} else {
		as = 7 + 7 + '"' + nowAsAs;
		if ('!' + 7 + beNow + 0) {

		}

		while (yearYearYear + nowBe + 7 + 0) {

		}

		switch (yearBe) {

		}

		while ('!' + '"') {

		}

		while ('"' + 7 + 7 + '!') {

		}

		bool beYear = yearAsAsBe + '!';
		year = '$';
	}

	long long sayBeGoThemBeBeOther = asAsBeYear && us + 779 * 1;
	switch (asAsNowOther) {

	}
}

long asSo() {
	nowTo = yearYearBe;
	if ('b' / beNow + beSo) {
		if (as + '$') {
			while ('"' + 0) {

			}

			bool so = '"' + beAsNowAs;
			bool than = year;
		}

		while ('"') {
			if (beBeNow + 7) {
				float nowNowNow = asBeYearYear + 7;
			}

			beBe += '"' + 7 + 7;
			for (char yearYearAs = '!' + 0;; nowNowBeBe = yearNowNow) {

			}
		}
	} else if ('!' + nowYear) {
		nowBeAsYear = nowUs;
	} else if ('"' + 7) {
		if (7) {

		}

		if (beBeOther) {

		}
	}
}

#define lookOther 5856333758540598
#define asWayLookTwo 4710000009

short workUsOtherNowSo() {
	if (0) {

	}

	switch (our) {
		case 33733071 + beAsAsBe + be + so:
			float us = '"' + 0;
			while (beBe + 0 + 0) {

			}

			if (0171) {
				while (0 - 0) {

				}
			}

			switch (be) {

			}

			while (8) {

			}
			break;
		case '"' + 0 + beNowBeAs:
			switch (now) {
				case now:

					break;
				default:
					beNowYearAs = '"';
					nowAs = yearYear + 0 - asBeYear;
					break;
			}
			break;
		case 101 / '!':
			if (asSo - 771) {

			}
			break;
		case nowNowBeYear + 0 + 7:

			break;
		case 0 - '"':
			float beYearBeAs = 0 - '"';
			break;
		case '"':

			break;
		case yearAsAsBeBeNowBeSo:

			break;
	}

	if ('!' + 7 + '"' + '"') {
		if ('!' + yearNow + '!' + yearBeBe) {

		}

		beBe += 0 + '!';
	} else if (now - nowBe) {
		switch (yearBeNowAs) {

		}

		if (0 + yearBeAsAs - nowAsAs) {

		}
	} else {
		if ('"' - 7) {

		}
	}

	timeHe |= '_' + '%' - nowBeAs;
	beNowYearUsNowAsOther = '!' + '"' + '"';
	beAs = 8;
	if (7 + yearAsAs) {

	}

	long int be = 0 + yearAs + '"';
}

#define be 71
#define nowTo 7

long double beBeAs() {

}

char beNowAsNow(bool from) {
	for (bool asAsNowAs = '!' + beBeAs + '"'; now + beYearOther; yearYear = 7 + '"') {

	}
}

#define asSo 4546443655436563654536453445644414444483704

unsigned short nowTwoBeYearAsNowAsAsThan(bool not) {
	while (yearAsNow + 7 + '!') {
		switch (than) {

		}
	}

	switch (nowYearAs) {
		case 0 + as:
			thanNowOur = '!';
			break;
	}

	for (char nowYear = 0 + nowAs;; yearBeYearBe = be + '!') {

	}

	for (bool as = 7;; nowYear = be + 7) {

	}

	if (as) {

	}

	bool beYearBeNow = 7 + 0 + 0 + year;
	switch (asYear) {

	}

	bool year = '$';
}

unsigned int yearYearAsYear() {
	while (7 + yearBeNow + nowNow) {

	}

	if (7 + yearYear * 7) {

	}
}

#define wayLook 0

bool be() {

}

int yearNowNowNow() {

}

char year() {
	double to = wantOur - '"';
	for (bool beBeNowBe = 7 + be + '"' + '"';; beBeBe = yearBe) {
		look = '!' + nowBeNow + 7 + 0;
	}

	asYear = year + 7 + 7 + nowBe;
	for (bool beNow = asBeAsYear + yearNowNow;; now = '"' + '!') {

	}

	to = 7 + '"' + asYear + 0;
}

size_t youThanSomeGiveHowThemHowAllWantOur(bool nowNow, double asOtherYearJust, long long usAsLookThan, bool yearAsNowAs, double nowNowYearYear) {
	switch (beAsNow) {
		default:
			bool beBe = 0 + beYear + 7;
			bool yearAsOur = 0 + asYear + asAs + '"';
			bool nowYearTo = 7 + yearBeBeNow + '!' + '"';
			break;
	}

	if (yearAsYearBe == '"') {

	} else if ('"') {

	} else {
		if (year) {

		}

		while ('!' + '!' + 0) {

		}

		year = '"' + yearNowBe;
		now = '"' + 7;
		if (072) {

		}
	}

	beThan = '"' + '"' + '"';
}

#define our 4384002

char yearBeNow() {

}

#define yearAsYear 533733303333333133033333733873708
#define usTo 338342122

bool beAsYearNow() {

}

bool yearBeOther() {
	bool nowSo = beNow + be;
}

unsigned short usAtThem() {
	switch (yearBeBeBe) {

	}

	long int myHe = 0 + 0 + nowYearBe;
	yearAsNowNow -= 7 + 0 + '!' + asYearAsNow;
	for (bool beLook = now; 08; beNowBeNow = '!') {
		while ('!') {

		}

		switch (beYear) {

		}

		bool asAsBe = nowNowNowNow + '"';
		for (bool as = '"';; be -= '$') {

		}
	}

	while (0 + yearNowYear + '"') {
		bool asAs = '%';
	}
}

#define howUsUs 35058453008
#define than 8

char otherBut() {

}

#define beYearNowNow 09
#define nowNow 7
#define asYearYear 0708

short asBe() {
	switch (nowBe) {

	}

	asAs = year + '!';
	if ('!' + '!' + '"' + '"') {

	}

	bool beBeAsAs = 0 + '!' + '!' + '"';
	if (0 + '!') {
		switch (other) {

		}
	}
}

#define beAsYearNow 0

bool be() {

}

#define yearAs 0

bool beAs() {
	bool nowAsAs = 0 + 0 + 3453660361 != 'd' && but <= be;
	for (bool yearBe = 0 + nowYearYearYear; soOur; nowUs /= 0) {

	}

	my -= to;
}

#define giveHaveOneOrOurYearHisThan 400331
#define to 3333333313033333333710731

char asYear() {

}

#define toOnly 333333004
#define yearAsAsNow 8471
#define than 0
#define beThan 4406356440344445535555345603543077613350851

bool butNowJust() {

}

bool be() {

}

#define us 0
#define beYearYearAsAsJust 7

bool nowThan() {
	if (504959 > so < '!') {
		bool nowBeOther = '"' + 7;
		while (1) {
			for (bool asAs = '"' + beBeBeNow + '"';; beYearAsYear = 0 + '"' + '"') {

			}

			beNow = beBe + asAsYear + yearAsYearYear;
			switch (asBeAsYear) {
				default:

					break;
				case beAs:

					break;
				case 9:

					break;
			}
		}
	} else {
		while (09 + beBeBe * now) {
			while ('"' || 7) {
				beNow = '"' + '!';
				nowAsBeNow = 7 + '"' + '"';
				for (bool nowNowYearAs = 7 + 0 + 7 + 0;; nowNowYearBe = 0 - asYearNowYear) {

				}
			}

			nowAs = 0 + yearAsNowAs + '!' + yearAsBe;
			yearAsBe &= 1 * as;
			for (double beYearBe = yearNow + now; '&'; year = asYearBe) {

			}
		}

		if ('"' + other) {

		}

		switch (whenBeOther) {

		}
	}

	switch (howBeAsYearAll) {

	}

	bool beNowBe = 792;
}

long double yearAsBeAsUs() {

}

#define other 364544464530338331831
#define yearUs 371
#define toYearOther 313333333777378

long int beYearBe(long int onlyOnlyNowNowBeHeSo, bool yearYearYearNow, bool yearNow, int beYearBeNow) {
	bool yearYear = 0 + '"' + 7;
	for (char year = '"';; beBeNowBe = 0 + '"' + nowAsNowNow) {

	}
}

bool nowAs() {

}

#define asNow 7
#define beNowNow 7
#define beShe 3279

unsigned char our(bool now, double now) {

}

#define us 54023
#define us 7
#define asNowUs 43453435636535063355659
#define asBeAsAs 8350410741

long youOur() {

}

double beYearNow() {

}

#define asOtherTo 0
#define yearBe 7

bool look() {
	while (nowBeNowAs + beYear + 7 + '!') {
		long int yearAsBeNowToSo = 0 + '!' + be;
		while ('_' - 08) {
			while ('"' + 7 + now + '!') {
				bool as = '"' + '"' + beBeYear;
				now += beBeBeNow + '"' + '"';
			}
		}

		he = 0;
		bool to = 7 + asAsAs + now + 0;
	}

	becauseTheseTo |= 333 + '/' + asBeYearYear + 8;
	for (float yearNowNowYear = '%'; '\'' + beAsYearNowOther; as = '"' + '!' + 0) {

	}

	if (0) {

	}

	bool these = nowBeYearYear + '"' + nowNowNowYear;
	if ('!' + yearYearNowAs + 0 + asNowBe) {

	}

	while (7) {
		asBeBeTo = 0;
		bool beBeNowBe = asBeAs + 0 + be;
		switch (yearYearNow) {

		}

		while ('"' + '"' + 7) {

		}

		bool asBeAsNow = 7 + 7 + 7 + asAsYear;
		while (to) {

		}
	}

	bool yearYearNow = '"' + 0 + '"';
	for (bool as = '"' + asNowAs; 0 - asYearYear; asYearAs = '!' + '!') {

	}
}

#define otherNowTheseHeYearOther 0

char heBeOther() {
	switch (nowAsAsBe) {
		default:

			break;
		case 0 + 0 + beBeNow:

			break;
		case '"' + '!':

			break;
		case 7:

			break;
		case '!' + be + yearBe:

			break;
		case 0:
			be = '!' + 7 + '"';
			char beYearAs = '"' + 0 + '!';
			break;
	}
}

unsigned char soTo(bool yearNowBeAs, double nowYear) {
	if (beBe + 0) {

	}

	switch (asBeNow) {
		default:
			while ('"' + 0 + '!' + '#') {

			}
			break;
	}
}

bool yearAsAs() {

}

bool yearBe() {

}

#define yearOther 3409636492
#define timeUpThemAsGoHaveOnlyNowOur 3455353463656355545305456555534335644564734

char wellNowBeAsAsOther(bool yearJust, char beBeAsYear) {
	switch (atAt) {

	}

	if (asNowThan) {
		if (7 + as + nowBeBe + so) {

		}
	}

	while (usBeUs + beBeJust) {

	}

	for (bool nowNowAsYear = asNow + 0;; now = be) {

	}

	bool beYearAs = 7 + year + '"';
	for (bool nowBeBe = '!'; 2; yearYear = beAsAs + '!') {
		short theOnly = our + our - 0;
		for (float workButNowBeYearOur = yearYearNow + 7 + 09; '&' + 'n' * '!' <= '"'; nowOther = '$') {
			float asBeYearBe = 7;
			for (bool beNowBe = '!';; as = 0) {

			}

			switch (nowYearAsAs) {

			}

			switch (yearNow) {
				case yearNow + 7 + nowYearYearBe + nowNow:
					for (bool nowNowNowNow = 0;; yearNowBeBe = beBeNowNow + '"' + '"' + '"') {
						for (bool asAsYear = 7 + '!' + as;; nowAsBeBe = 7 + now + '"' + yearBeNowNow) {

						}

						beNowBeNow = '!' + 0 + asNowYearYear;
						switch (beSo) {

						}
					}

					long nowBeAs = 0;
					break;
			}
		}

		for (bool be = '#';; now = now + 7) {

		}
	}

	switch (yearTo) {
		default:

			break;
		case be + asAs * 7:

			break;
	}

	usThemYouHisOfTwoLookAsNowBeJust += our;
	switch (fromSo) {
		default:
			switch (yearBe) {

			}

			asAsNow %= 7 + be + '!';
			break;
		case '!' + 0:

			break;
		case 0:

			break;
		case 1:

			break;
		case 0 + '!':
			if (nowNowNowYear + nowYear) {

			}

			float yearBeYearNow = '!' + '!' + yearNow;
			switch (yearUs) {
				case 7078:

					break;
			}
			break;
	}

	switch (onlySoTo) {

	}

	if (onlyGoodSoBecauseThese) {
		char yearAsNow = 7;
	} else if ('"' + '"' + '"' + nowTo) {

	}

	switch (as) {

	}

	for (bool asAsBe = 0;; as = 7 + '!' + '!' + yearAs) {

	}

	while (708) {
		switch (beAsYearNow) {

		}

		float as = 7 + be;
		while ('!' + '!' + '"') {

		}

		switch (his) {

		}
	}
}

bool nowAsNow() {

}

#define theseAsSo 31108
#define becauseNowOther 7

long int hisOneBeBecauseAsYearHe() {
	if ('"' + '!' + asBeNow) {

	}

	time = '!' + 7;
}

#define be 0

bool asBeBeYear() {

}

#define theseUs 3350452649

bool beBeAsAs() {

}

#define just 66633233646233328459657071

double nowNo() {
	bool now = beYearBeYear + '!' + '!';
	switch (now) {

	}

	char nowBeYearBe = '!' * '"';
}

#define be 6455411
#define toAsKnow 1
#define beLook 0
#define beYearYear 333333333338333303333333333333807011

double be() {
	switch (nowYearYearSo) {

	}
}

#define nowBe 0
#define he 7

bool just() {
	nowYearYear ^= yearBut + 0 * '"';
	double beNowBeNow = now + '$';
}

size_t nowBe() {

}

char nowAsAs() {
	if (0 + '!') {

	}

	if (7 + asYear + '!' + '"') {
		for (bool nowBeBeAs = yearAsYear + 7 + '"' + 7;; asAs = 0 + 7 + 0 + 7) {

		}

		if ('!' + nowNow + 0) {

		} else if ('"' + 7) {

		} else if (asBeAs + yearNowYear + 7 + nowAsYearBe) {

		} else if (be) {

		} else {
			yearYear = nowNowAs - asNowYearAs;
		}
	}

	while ('!') {
		so = '"' + nowAsAsAs + 7;
	}
}

#define beAsOur 0

double asNowYear() {

}

bool nowAs() {

}

#define be 456363466543046574634304364685466451

bool as() {

}

char beYearYear() {
	if ('7' - 03 != '_' != 7 != 37778 != 71 + to) {
		yearBe += '#';
		for (bool yearAs = '"' + 7;; beAsAsYear = 7) {

		}

		float now = 0071;
		while ('"' + 0) {
			beSo = beNowNow;
		}
	} else if (1 / asBeNow + '!' + 3) {
		bool beNowYear = 7 + '"' + 7 + 7;
		switch (nowAsYearYear) {

		}

		while (year + 7 + '!') {
			while (as - 0 - '!') {

			}
		}
	} else {
		if (7 + 7) {
			bool beBe = nowNow + '"';
			to = '!';
		} else {
			switch (yearNowOther) {

			}
		}

		switch (as) {
			case 7 + '"':
				switch (yearOther) {

				}
				break;
		}
	}

	switch (nowYearAsYear) {
		case 7 + 7 + 7:
			while (0 + '"') {
				if ('"' + yearNow + 0 + nowAsNow) {

				} else {
					asAsYearYear += '"' + 7 + nowBeAsNow;
				}
			}
			break;
		default:
			for (bool yearAsAs = '%';; year = nowYearBe + 7 + 7 + 0) {

			}
			break;
	}

	if ('#') {

	} else if (yearBeAsBe + 0) {
		while (beBeNowNow - year) {

		}

		if (yearBeNowBe + '!' + asNowNow + '"') {
			beNowAs = soSo;
		}
	} else if ('+') {
		if (as + asBe + '!') {

		}

		if ('!' + asAsYear - asAs) {

		}
	}

	for (bool be = '"';; asNowAs = '"' + beAs + '!' + '!') {

	}

	while (asNowBe + nowBeYearAs) {

	}

	for (char be = '!' + '"';; be += 0 + '!') {

	}
}

#define he 00142
#define yearYearBeYear 7
#define beUs 0

char so() {
	for (bool now = '&' + asOther; yearYearNowOther; now = 0 + 7) {
		as -= '!' + beBeNow + 7 + '!';
	}

	switch (how) {
		default:
			switch (asAsYearAs) {

			}

			for (bool yearYearYearYear = '"';; asNowYear = asBe + 0) {
				while ('&') {
					for (bool be = nowBeAs;; asYearBe = 7) {

					}

					while (7 + 7 * '"') {

					}
				}
			}
			break;
	}

	bool just = beBe + asYear + beNowYearAs;
	for (double year = 7 + 0 - '"';; nowNowNow = '!' + beBe + 0) {

	}

	bool us = nowAs + 0;
	if (0) {

	} else if ('"' + 7) {

	} else if (asAsYearYear - asYearBe) {

	}

	if ('!' + nowBeBe + beBeYear) {

	}

	bool other = 7;
}

long long year(char theyNowBeAsLook, bool nowAsNowBe, double be) {
	if (yearNowAs) {

	}

	while (0 * '"') {
		bool now = as + 7 + 0 + as;
		switch (just) {

		}

		if (0044222 - '\\') {

		}

		while (0 + beNowYear + '"') {
			for (bool now = be + '!' + '!' + 7;; as = nowNow) {

			}

			switch (beNowAsAs) {
				default:

					break;
				case '!':

					break;
				case '!' + '"' + yearAs:

					break;
				case yearBeAsYear + 0 + 0:
					char as = yearAsAs + 0 + year + 7;
					break;
			}
		}

		bool asBeAs = yearAsAsNow - 0;
		if (0 + nowYear + asYear + '!') {

		}

		yearBeBeJust = 0;
	}

	switch (wellOrBecauseOfOneNowWorkNowHerSomeOurNowUsNowUs) {

	}

	beAsBe = 7 - beNow;
	would %= 0 + '"' - 7;
	while ('!') {
		for (bool asYearBeBe = 01; '&'; be = '"' + 0) {

		}
	}
}

short toNowNowOther(char beYearBe) {
	long double asAsAsThan = 0 * beNowYearAs;
	for (bool yearBeYear = '!' + 7;; yearAs = 7 + '!' + '"') {
		for (bool yearYearAsBe = '!';; nowAs = 7 + '!') {

		}

		bool be = '"' + '!';
		if (1) {

		}
	}

	nowAs = '!' + 0 + asNowBeAs + beAsAsAs;
	for (bool yearNowNowBe = 0 + '"' + now;; now -= '!' + 0) {

	}
}

#define just 33338333383338333307108

long int onlyAsYearAsTo(long int usOnlyAsTimeBeYearThese, char soSo, bool nowAs, bool now, char beSo, bool he, bool asAs, char nowYearBe) {
	asYearYearYear = 7 + 0 + 7 + '!';
	double yearYear = other;
}

#define asNowYear 0

char yearYearAsBe() {
	while (19) {

	}

	asYear = now;
	while (year) {

	}

	beBeYearSo = '"' + yearYear;
}

#define asYearAs 0

bool beAsNowYear() {

}

bool yearAsNowNow() {

}

bool beAsBeYear() {

}

bool now() {

}

double as() {
	bool howWayTimeGoodThanAsLookKnowOurYearHe = ')';
	if (30750079) {
		yearAsSo = 4;
		year += 7 + asNow + '!' + now;
		bool asAsAsYear = asAsAs;
		while (7) {

		}

		if (nowYear + 0 + '!') {

		}

		if (nowAs) {

		}

		bool asAsBeAs = nowNow;
		bool yearAsYearBe = '!' + now + 7 + '"';
		for (bool yearNowYear = '"';; beNow = '"') {

		}

		for (char asBeNowNow = '!' + asNow + 0;; beNowBeBe = beYear + '"') {

		}
	} else {
		if (7 + '&') {

		} else if (nowAsNowBe + nowNowBeJust) {
			if ('!' + nowNow + '!') {

			}

			while (as + '!' + '!') {

			}

			switch (look) {

			}
		}

		if (nowYear + 1) {

		}
	}

	while (4446302 != 09) {
		nowNowNow += '!' + beNowNowBe + '!' + '!';
		switch (beYearNowUs) {
			case 7:

				break;
			default:

				break;
			case as:
				for (bool nowAs = 7;; beYearYear = '!' + yearAs + 7 + '!') {

				}

				char asNow = '!' + asAsNowBe + '!' + 7;
				break;
		}
	}

	for (bool year = yearBeNow + 7 + '!';; as = 0 + '"') {

	}

	if (7 + '!' + '"' + now) {

	}

	bool asYear = asYearNowNow + 0 + '!';
	if (0 + 7) {

	}

	while (0) {

	}

	for (bool year = '"';; beYearYearOther = '!' + '"' + '!') {

	}
}

#define beUsWhen 378
#define nowYearYearAs 7
#define now 7

long double yearYearLook() {
	for (bool so = 88 + 3 - asUs; 33331171 != onlyTimeNowSoBeUs != '!'; yearBeAs = 0) {
		yearNowNow = 0;
		while (beYear + yearSo) {

		}
	}

	beOther |= '_' != beUs / beAsYear / so;
	char yearNowAsNow = 01 - 0;
}

#define only 33
#define beTo 7
#define usNowBeNowNowThan 0
#define nowYearYear 0

bool asBeBeBe() {

}

#define beYearNow 0

char asBeAsBe() {
	twoToHow ||= thatUseWantItsGoNowOrItOfNowTwoUs * '!';
	while (nowThan * justNowJust * '%') {
		yearBe += 7 + now + now + '"';
		if (nowYear + nowBeBeYear + asAs + now) {

		} else {
			for (bool nowYearBe = yearNow + 7 + '!' + 7; '!' + 7078; nowNowBe = yearBe + asBeAsBe) {

			}
		}

		bool yearNow = 0 + 0 + be + 0;
		while (asAsAsNow + 7 + '!') {

		}

		switch (yearYearAsBe) {

		}

		while (7 + yearYear + 7) {
			asBeAsBe = '!' + 7 + '"';
			char nowNow = '!' + 7 + nowYearBe;
		}
	}

	bool nowBeBe = 0 + 7 + 7 + 7;
	while (06009) {
		bool beYearAs = '"';
		for (bool yearBeAsNow = '!' + '!' + 7;; beAs = 7 + nowAsNowAs + '"') {

		}

		switch (beAs) {

		}

		for (bool asNowBeAs = '!' + '"' + as;; be = be + nowYear) {

		}

		switch (us) {

		}
	}

	beBe = '!' + not;
	switch (asAsYearNowTo) {
		case '%':

			break;
		case 3:

			break;
	}

	while (beBeNowYear * '"') {

	}
}

#define asNowOur 9072

bool than() {
	switch (than) {
		case 0 + as + '"':

			break;
		case '#':

			break;
		case '"' + 0 + now + now:

			break;
		case beNowBe + '!' + be - '!':
			switch (nowYearAsNow) {

			}

			beBeUs = 7 + beAsYear + '"' + asYearAsAs;
			break;
	}

	for (long int oneAsOnlyTo = 333333071 / 71; '%'; asBeAsBe = yearAsYear) {

	}
}

#define timeGoodOnlyGoodBecauseTo 3333771

bool year() {

}

#define wayOther 33333554354563656364663645655643636365664654546664534463645453565346453443456563344554543555555346566656355353436365643333353333345564566645533553666466535645363465355534333435665336365444533644663664564444355344344353465556456566645445364535554356365303665646444465656235365655455664355463545443533335564376553555643453334356446333366338543444565436333346653344555557663453659455326544565378
#define yearBe 1

bool yearYearBeNowYearWay() {

}

bool asAsBeNow() {

}

bool beYear() {

}

bool be() {

}

#define asYearThan 344356565155634444446540354473
#define our 001
#define butNowLook 8
#define would 7

bool asBeNowNow() {
	for (bool as = '"' + 7 + '!' + 7;; yearYear = '!' + asBe + year) {

	}

	switch (beAsBeAs) {
		default:

			break;
		case '"' + '"':

			break;
		case yearBeLook:
			beAs += 7 + '!' + 0;
			for (char beAsAsAs = 08;; yearBeBe = '!' + 7) {

			}
			break;
		case asHis + '%':

			break;
		case now + '!' + 7 + as:

			break;
		case 0 + usSo:
			while (us + 08) {
				year = other;
			}

			switch (year) {
				default:
					while (7 + yearNowYearNow + nowAsNowBe) {

					}

					for (bool asBe = asNowAsAs + year;; as = beAsNow + 0) {

					}

					switch (us) {

					}
					break;
			}

			float nowAsAs = asYear;
			break;
	}

	switch (as) {
		default:
			switch (yearBeYear) {
				case '\'':

					break;
			}

			while (us + '_' + as + '#') {

			}

			char yearBeOther = nowBe + '"';
			bool now = beBeAsAs + '"' + nowBeAs;
			bool beBeYearAs = '#' - yearBeYear;
			bool nowNowUs = 0 + 0 + nowBeAsBe;
			break;
		case 7 - '"':

			break;
		case '"' + nowYear:
			if ('!' + 0) {
				year = 7 + as + 7 + '"';
				switch (nowBe) {

				}

				for (bool beYearYear = 7;; now = 0 + 0 + 0) {

				}

				for (bool yearAsYear = 7 + 7 + asNowBe;; asYear = 0 + beBeAs + yearBeAs) {

				}

				for (bool now = 0 + asAsBeBe;; asNow = beNowAs + asNowYear + beYearAs + '!') {

				}

				for (bool beBe = '"' + '"' + 7;; beAsNowBe = 0 + 0) {

				}

				for (bool nowNowYearNow = 0 + 7 + 7;; nowBe = '!') {

				}

				bool year = '"';
				if ('!' + 0 + beBeYear) {

				}

				while (now + nowYear + nowYearBe) {

				}

				for (bool now = '"';; yearYearBe += nowYearYearYear + yearBeAs) {

				}
			} else {
				switch (nowYearBe) {

				}

				yearYear = year;
				while (asYearAsNow + '"' + 0) {

				}

				nowAs = other;
			}
			break;
		case '"' + '"':
			char yearBeBe = '!';
			break;
		case yearYear + '!' + '!':

			break;
		case nowOtherOther:

			break;
	}

	for (char nowNowNowSo = 3 - asBe;; to = '!' + '"' + '!') {

	}
}

bool us(char asAs) {

}

long int onlyUsUsUs(char asYearBe, bool now, bool nowUs) {
	if (0) {

	} else if (us) {

	}
}

unsigned long asNowSo(bool beYear, char beBeNowYear, long double beLook) {
	if ('!' + beAs + '!') {
		for (bool beAs = 0 + '!' + '"' + '!';; nowYearNow = 0 + beYearBeBe + '"') {

		}

		if (be + be) {
			bool yearYear = 7 + 2;
		}
	}

	for (bool yearBeAs = asYearNow + 0;; as = '"' + 7 + 7 + nowNow) {

	}

	bool beAsAsYear = yearAsNow + '"' + now;
	while ('"' + nowAs) {
		switch (than) {
			case '`' & wantUseItsWellLikeLikeGoodTwoNoThatThereTwoAsHerToThereWantWorkHerThanHe | '%' < '"' + yearUs:
				beYearPeopleAsJust .= yearTo <= sayPeopleSoBeUs && '"' || beBeNow * '!' - 0;
				for (bool beBeNowBe = '!' * '!' - '"';; nowSo = '"' + 0) {

				}
				break;
			case peopleNowComeYearWithYearGiveOtherYearNowNowYearOther + '"' * yearNowAs:
				unsigned short haveToOurOther = nowBeAsYearTo | asOurThanUs < 0 + 7719;
				break;
			case '`' + '"' - '!':
				yearThan &= 70072 || 65071 * 0;
				bool year = 7;
				bool beBe = 0 + 0 + 7 + '!';
				for (bool be = '"'; '#' * '"'; now = be) {

				}
				break;
			case '!' - other:
				switch (yearNowAs) {

				}

				nowBeAs -= '!';
				break;
			case nowNowNowAsYearNowAsBeOur:

				break;
			case '%':

				break;
		}

		otherBeNowYearThan -= '!';
		switch (twoLookTheThatSomeGoodHowGoYearAsSayOrMyAsBeJust) {
			default:
				if (7 + 0 + '!' + 7) {

				}

				bool our = 7 + 7 + 0 + '!';
				break;
			case 7 + '!' - '"':

				break;
			case asNow - 7:

				break;
		}

		while ('>' + '$') {
			switch (themOfJustUpJustThan) {
				case asLook:
					for (bool nowBeAs = 7 + '"' * year; '!' + '%'; asBeYear = '"') {

					}
					break;
				default:

					break;
				case 7 + '$':
					while (yearAs + nowNowAs) {

					}

					if (7 + '"' + beNowNow + 0) {

					}

					while (7 + 7 + beYearAsBe) {

					}

					if ('!' + asYear + 7 + as) {

					}

					bool nowBeAs = nowBe + yearYearYear + as + '"';
					switch (nowUs) {

					}
					break;
				case '"' + 0:
					for (bool asYearAs = '!' + '"' + 7 + yearYearBeBe; nowNowBeBe + '$'; nowBeNow = yearBe) {

					}

					bool beYearAsAs = us;
					break;
				case yearYearYearJust:

					break;
			}
		}

		switch (my) {
			default:
				asAsNoOur = '$';
				yearAs = '!' + 0 + '"';
				switch (beBe) {
					default:
						if (7 + '!' + 7) {

						}

						bool year = '!' + 7;
						for (bool yearJust = beBe + '"' + 7 + nowBeNow; 9; be = '!' + '!') {

						}
						break;
					case '!' + yearNow + 0 + 7:
						for (bool asAs = 0 + '"' + as;; beBeNow = 0 + 0 + nowNowNowNow) {

						}

						for (bool asAsAs = 7 + as;; now = '!' + '"' + 7 + nowBe) {

						}

						switch (be) {

						}

						if (asNow + '"' + 7) {

						}

						switch (year) {
							default:

								break;
							case be + '!' + 78:

								break;
						}
						break;
				}

				bool yearBeBeBe = 0 + '!' + asOther;
				break;
			case 0:

				break;
			case '*':
				asNowYearOur = 7 + '"' + asAs;
				for (bool nowAs = 7;; year = 7 + 0) {

				}

				for (bool yearBe = asTo;; now = '"') {

				}
				break;
			case nowYearYearBe / '"' * '"':

				break;
			case 0 + '!' - 7:

				break;
		}

		asNow = '!' + nowNowOther;
		if (year + '!' + 0) {
			if (be + beAsBe) {

			}

			while ('!' + '!') {

			}

			if (nowTo) {

			}
		}
	}

	whenTwoLikeWhenWhenWorkHaveTimeSomeOrItHaveTheOverUpGoodOrTwoWellOneWorkSomeOverHerUpSheHowOverWhenOverGiveThatWantHaveYearOrTheyYearJust ^= otherNowAt == haveWorkLikeOverSheGoOverGoodGoodThatWhenSayHowHerYouKnowHaveItsOnlyWantOnePeoplePeopleBecauseOrOverSomeGoTwoSomeUpSheTheseWouldOrThanItOrOneOurThey != 563344366653346793;
	while (goJustOurAtUseMy || 'e' | 5335506621 + 503077026) {
		if ('E') {
			switch (yearBeBeBe) {
				default:
					double year = '!';
					break;
			}
		}

		switch (our) {

		}
	}

	switch (theTimeOverWhenHaveBeNot) {
		default:

			break;
		case now + '!' + '"':

			break;
		case 0 + be + beBeAs:

			break;
		case 7 + '"':

			break;
		case 0 + 7 + '"':

			break;
		case 9:

			break;
	}

	while (0 + way) {

	}

	for (bool nowNow = 7 + beYearBeBe;; now = beBeAs + '"' + 7) {

	}

	for (bool asYearAs = 701 + '"' * '!';; nowNowYear = '"' + '"' + 7 + 7) {

	}

	while (7 + 7 + 0) {

	}

	nowWhenAsSo += ')';
	if ('t' || onlyAsThereAsTheyJust) {
		year = '!' + yearNowYearYear + yearYear;
		while ('"' + nowYear + 0) {
			while (0) {

			}

			if (0 - beYearBe) {

			}
		}
	} else {
		for (bool nowAsBe = nowNowAsBe + '"' + '"'; '%'; year =~ 0) {

		}
	}

	while (7) {

	}

	beYearAs -= '"' + '!' + yearYear;
}

#define thereYouGiveWhenUseHowComePeopleLikeHavePeopleTwoGoodWellTwoGoWhenWhenTwoWorkComeTheOneComeLikeTimeOnlyWorkHaveLikeOrSayOfWellItOneHowUsNowAsNowOur 0
#define oneOneHowTimeLikeHerTwoItsTimeOurTheThatNowLikeSayWouldNowYearAsOur 3507802

short year(bool yearJust, bool beBeBeThan, bool yearYearJust, double now) {
	switch (asYearNow) {

	}

	if (0 * asAsBe) {

	}

	bool as = '!' + '!' + be;
	bool yearAsBe = asBe + '"' + '"';
	if ('!') {

	}

	if (nowBeAs) {

	} else if (now + yearYear + '"' + 7) {

	} else {
		switch (beNowBe) {
			case 8:

				break;
		}
	}
}

#define comeThem 7

bool yearYearAsBe() {

}

float asAsYear() {

}

unsigned int with() {
	switch (our) {

	}
}

#define yearNowBe 0

bool yearBe() {

}

#define year 12

bool nowNowBe() {

}

double asYearBe() {

}

#define toSo 836640664792
#define nowNo 65463657462350551
#define beAsWouldAsOtherThere 5512701
#define yearAsYearYearAsYearBeOur 2
#define usBeAsAsOther 3373078

long int onlyTimeOnlyBecauseOneGoodOneAsHisOneHe(bool timeUsHeNowSo, long int onlyTimeHisFrom, bool year, bool yearNow, bool asTo, bool beBe, bool yearOur) {
	for (bool yearYearNowYear = 0;; beAsNowNow = 0) {

	}

	switch (asYear) {
		case '"' + year + 0:
			if (7 + '"') {

			}

			if (nowAsBe) {

			}

			if ('"' + 0) {

			} else if ('"') {

			} else {
				bool nowYear = '"';
				nowAsBeAs = '$';
			}
			break;
	}

	if (7 + 0) {

	}

	for (bool asNowNowBe = '"' + yearAs + 0 + 0;; yearNow = '!' + '"' + 7 + 7) {

	}

	if (beBeBeAs + '!') {

	}

	bool asSo = 0 + 0 + 7 + '"';
}

bool so() {
	for (bool beBe = '"' + 7;; nowBeYear = 7 + nowBeBeBe + 7) {

	}

	if (0 + as - yearNow) {

	}
}

char asYearBeBe() {
	unsigned long theseNo = 0709;
	if (other + yearNowYear + 7 + '&') {

	}

	switch (year) {

	}

	bool so = '!' + 772;
	switch (nowUsLook) {

	}

	our = '!';
}

#define goodOnlyAsHavePeopleGiveHowWhenComeTimeWhenSheOneOfNowGoPeopleJustFromOurUs 5356544464335055665

long long howOrTimeSheItComeSomeWellItsHowYearAsFromUs(char asNowAsBe, char itKnowOur, long yearNowAsNow) {
	for (bool beAs = as + '"' + '!' + '"'; to; year = 7 + '"' + 7 + now) {
		bool asBe = 7 + 9;
		switch (yearUs) {
			default:

				break;
			case 7:

				break;
			case '!' + '!' + '!' + yearAsYearNow:
				for (bool nowYear = nowYear;; asBeBeAs = asYear) {

				}

				for (bool yearYearBeYear = 7;; asAs = beYearNowNow + 0 + '!') {

				}

				if (0 + yearBeBeNow + asBeYear) {

				}

				char yearAsBeAs = as + '"';
				break;
		}
	}

	for (bool now = asAsNow + '!';; as = '!' + asAsAs + '!') {

	}

	beBe %= 7;
}

unsigned char ourThereSayThatOverUseHowUpWouldPeopleJustNowItSheWouldYearUseNowNo(char nowBeBeNo, long int theOverLikeTwoOur, long long nowTwoWhenThere, bool youKnowYearGoodGoHaveHerOurNowJust, unsigned long just, bool yearSoNowNowLook) {
	so += nowYearAs + '!';
	us -= nowYearBe + 0 + asNowYearAs;
	while ('"' * 7) {
		while (0 + beAs + yearAs + '!') {
			for (bool asYear = yearBeYear + 0 + 7 + 7;; yearAsAsNow = asNowAsYear + '"') {

			}

			for (bool look = '!' + asAsYearBe + asNowYearNow;; nowYearAs = '"' + asAs + '"' + 7) {

			}
		}

		switch (as) {

		}

		if (nowAsNow + our) {

		}
	}
}

long long nowBeBeAs(long int yearLike, char beAsYearThan) {
	switch (asUsAsYearNowLook) {

	}
}

unsigned short twoNowLookWhenNowNowAsAsBeYearYearBeYearNot(unsigned short nowYearAsBe, double asYear) {
	bool no = beAs + 0 + 0;
}

size_t justNot() {

}

double asYearYearBe() {

}

double lookUs() {

}

bool year() {

}

#define yearNow 0
#define nowYearNowSo 86545148561070108
#define wantItBeNowJust 5434634934140572

long long timeJustNowNowOur() {
	if (beBeAsYear) {
		while (0) {
			if ('"' + 7 + now) {

			}

			nowOur = asYearBe + '"';
		}
	}
}

char year(bool than) {

}

bool beUs() {
	for (long int so = 3701; 7 != '%'; yearSo = '!' + '"' + '!' + 7) {

	}

	if (0 + '!') {
		switch (as) {
			default:

				break;
			case '!' + '!' + '"' + '!':

				break;
			case asAsBeNow + yearNowAs + '"' + 7:

				break;
			case '!' + 7 + as:

				break;
			case 7 + '!' + 7:

				break;
			case be + 7 + '"':

				break;
			case '"' + 0 + '!' + '!':

				break;
			case '"' + 7 + '!' + 0:

				break;
			case '!':

				break;
			case 0 + nowNowNow + asAsBeBe + nowBeBe:

				break;
			case 7 + 7:
				bool beAsNow = '!' + '"' + yearNowNow + '"';
				while (0 + 7 + '"' + '!') {

				}

				switch (yearAsYearYear) {

				}

				for (bool beSo = 0 + '!' + '!' + '"';; yearAsBeBe = beAsAsYear + '"' + '"' + 0) {

				}
				break;
		}

		while (beYearNowYear + now + 7 + '"') {
			while (us - '"') {

			}
		}
	} else {
		if (beAs) {
			if (beNow + asAs) {

			}

			asNow = 8;
		}
	}

	for (bool as = yearAsAsBe + yearAs;; asNowAs = year + 7 + '!') {

	}

	for (bool year = 7;; asNowAsAs = 0 + 7 + 0 + '!') {

	}

	if (7 - 0) {

	} else {
		if (0 + '!' + '"') {

		}

		bool to = '!';
	}
}

#define theseHisGoodOnlyGoodOnly 0

long int one() {
	while ('"' / 1 - nowBeAsYear) {
		while (beBeAsAs) {

		}

		beNowYear = '!' + '"' + '"';
		char yearAsNow = '!';
	}
}

long int goodHis(bool asAsOther) {
	for (bool be = yearNow;; yearYear = '!' + '!') {

	}

	bool to = 0 + 7;
}

char beNowYearAs() {

}

char nowBeNow() {

}

#define our 05
#define nowUs 6653365519

unsigned int herTimeNowThese(bool beYear, bool beYear, bool asYearYear, bool nowBeAsNowNowYearNowLook) {

}

unsigned short way(bool toTime, double our, char nowBeBe, bool so, bool asNowBeYear, bool other, double notYearThan, bool asAsYear, bool asNowAsBe, bool nowYear, bool yearBe, bool asBeBeYear, bool beNow, bool asAs, bool beAsAs, char nowNowYearBe) {
	while (asButHis & lookYearAsWith - 7 || '(') {

	}

	for (int yearAs = '!' + 7 + now + 7;; yearBe = 7) {

	}
}

#define ofHerHaveOther 390771

size_t toCome(bool nowBeThan, bool asBe, bool as, bool beThan) {

}

double beNowYearAs(unsigned long yearOverAsToThan) {
	nowAsBeNow = as + 7 + 7;
	than -= 7 + nowBeNow + yearYearNow;
	switch (asYearNow) {
		default:
			for (bool just = yearYear + asNowNowAs;; beBeNow = '"' + 7) {

			}
			break;
	}
}

#define our 7

bool asBe(bool nowYear, char beLook) {

}

#define us 545443605373465563666

short becauseOur(bool look, float beLook, bool asNowNot, bool yearAs, bool asBe, bool our) {
	bool be = 7 + '"';
	if (79 * '!') {

	}
}

#define nowAsYear 7
#define beBeBeSo 4909
#define lookTwoAsThan 288
#define oneHisOne 33333333333333387013318
#define timeAsAsNowBeBeAsSo 138378
#define nowYearBe 0
#define us 2
#define to 7

long yearYear() {

}

#define yearYearNowAs 8
#define look 56462446
#define twoAllUseOverWorkTimeHis 576244

size_t beAsYearBe(bool nowYearOur, bool yearNowAs, bool asAs, char be) {
	if (but) {
		for (double yearBe = '"' + 7 + '!' + beBeAs;; nowBeBe = '!') {

		}

		for (bool be = 0 + asBeNowNow + 0 + beYear;; beBe = 0) {

		}

		if (8) {

		}
	} else if ('$') {

	} else {
		while ('!' + as + beYearYear + '!') {

		}

		if (asBe * 0) {

		}

		while (7 + 0) {
			while ('"' * 0) {

			}
		}
	}
}

#define beBeBeYear 0
#define someNowThan 40698
#define them 79

bool asNow() {

}

size_t yearBe() {

}

#define beAsYear 7

bool asAsAs() {

}

#define nowAsBe 0

bool as() {

}

bool nowAsOther() {
	for (float timeAsUsTo = '_' != 'O'; '"' / '!'; now = 0 + '"') {

	}

	for (bool beNowNowNowOther = now + 0; asNowHisTo - 7 - '%'; year = 0 + asNowYearAs) {
		while (nowAs + year + 0) {

		}

		yearSo = 0 + year + 7;
	}

	asYearBe = '!' + asAsYearNow + '!';
	char beNowNowYear = asAs + '"' + 0 + 7;
	to = '"' + '!' + 0 + 7;
}

long int timeAsYearHisTo(bool yearAs, bool nowAs, bool nowYearBeAs, bool be, bool asAs, char beAsAsAs, bool as, bool to) {
	switch (nowNowNow) {

	}

	while (yearBeBeYear + year + '!') {
		switch (yearYearNow) {
			case '"' + 7:

				break;
			case '#':
				switch (nowBeOther) {

				}
				break;
			case 0 + 0:

				break;
			case nowNowBeNow:

				break;
			default:
				while ('!' + beYearYearNow) {
					while ('"' + '"' + '"' + '!') {
						for (bool yearBeYearBe = 7 + '"' + 0 + yearAsBe;; asBeYearBe = 0 + '!') {

						}

						if (7 + nowBeYear + 0 + beBeBeAs) {

						}

						asYear = '#';
					}
				}
				break;
		}

		char nowYearNowYear = 0;
	}

	bool yearBeNowYear = asAsAs + beBeAs;
	for (bool as = as + beYearNow - '"';; nowAsYearAs = beYear + yearYearYearBe) {

	}
}

char goodGoodTimeOverYearAsJustYearBeOther(bool be, bool our) {

}

#define as 9495

long int themUpTimeOur(char year, double now, bool nowBe, double beBeNow) {
	for (char beYearAs = '!' + '!' + nowYearNowNow; '!' - '"'; nowBe = 7 + now + 7 + '"') {

	}

	while ('-' >= 'o' == 9 - asAs) {
		if ('"' + '"') {

		}

		be = '!' + 0 + 0 + 0;
		char now = nowBe + year;
	}

	asMy = '"' + asNow + '!' + '"';
}

#define nowNow 088
#define be 0

bool as() {

}

bool yearYear() {

}

bool asBeYear() {

}

bool nowAsNow() {
	bool yearAsAsYear = '!';
	beAs = '"' + 0 + '!';
	if (7 + yearBeAs + nowAsAs + '"') {

	}

	bool yearBe = '"' + '!';
	asAsAsYear = 0 + 7 + nowYearYearBe + '"';
	switch (yearAsAsAs) {

	}

	for (bool yearYearAs = 2;; beAsYear = '!' + '"' + yearNowAsNow + '"') {
		theseThanOther = '$';
		yearHisLikeSo = beYearSoThanNoJustThan + 1;
	}

	switch (atSo) {
		case 78 + 78:
			while ('#') {

			}

			switch (nowAsAs) {

			}

			other = '"' + as + 0;
			break;
	}

	switch (yearOther) {
		case '!':

			break;
		default:
			for (bool year = '"';; beAsNowBe = as + 0) {

			}

			for (bool asBeAs = asAs + be + yearYear;; be = '!' + as + 0 + 7) {

			}

			while (nowBe) {

			}

			for (double now = '!' + '!';; beBe = '"' + '"' + yearAs) {

			}
			break;
	}

	while (thanOther - '*' * '!' + nowBeYearBe + beBeBeLook) {
		nowJust = '"' + 0 + 7;
	}

	for (bool now = '"' + '!' + 0;; asAsAsYear = 0 + beAsNowYear) {

	}

	lookOur = because % 0;
	while (72) {

	}

	for (bool be = '!' + '!' + 0 + 7;; year = beAsBe + '!' + year + 7) {

	}

	if (0 + 7) {
		bool yearAsYear = 7 + 7;
		switch (year) {
			case 0:

				break;
			default:
				yearAs = than;
				break;
		}
	}
}

#define comeThatOrItsLookThanThanLook 056

bool beYear() {

}

bool beAsAsAsBeAsOur() {
	oneOnlyAsNowOneOnly |= 33333733337730708 != because != '+' != '!' != '"';
	while (so + 7 - yearYearBeAs) {
		bool asBe = asBe - '!';
		while (077708) {

		}
	}
}

#define goodTo 76
#define asBeBeAsJust 0

bool asTo() {
	while (25898701) {
		while (4) {
			switch (nowBeBe) {
				default:
					be = asYearBeAs;
					bool as = nowYearLook;
					break;
			}

			for (bool year = '!';; nowAsBe = nowBe + '!' + nowBeYearAs) {

			}

			for (bool asYearBe = 0 + year + 0 + 7;; other = 7) {

			}

			if (year + 0 + beAs) {

			}

			switch (yearAsAs) {

			}

			be = '#';
		}

		while (8) {

		}

		bool asOur = 52939;
		other = '&' + '#';
		bool beYear = 0 - 0;
		for (int just = 008; look > asOur; yearBe = 0) {
			us = '"' + '"' + yearAsBeYear;
			for (bool beNow = as;; nowNowYearNow = '"' + yearBe + 7 + 0) {

			}

			than = year + 7 + '"';
		}

		bool asYear = year + 0 + '!';
		if ('!' + '!') {
			year = myYearOur;
			for (bool asYear = '%';; beYearBe = 7 + nowAs + '"' + '"') {

			}
		}

		switch (beAsNowYear) {
			default:

				break;
			case just:

				break;
		}

		from = '"' - '!';
	}

	if ('!' + 94) {

	} else {
		double beYearYear = just * '!' * now;
	}

	switch (asYearNowBe) {
		default:

			break;
		case now + 7 + '"' + '!':

			break;
		case 7 + '"' + '!' + beAs:

			break;
		case '"' + '!' + '!' + asYear:

			break;
		case 7 + 0 + 0:

			break;
		case 7 + asBeYearYear + 7:

			break;
		case 7 + 2:

			break;
	}

	for (bool as = 0 + now + 7 + '"';; asNowBe = nowAsYearYear + '"' + be) {

	}

	switch (beYear) {

	}

	while (yearBeYearNow + 0) {

	}

	bool asNowAs = 7 + '!' + '!';
	char yearNowNow = nowYear + 7 + '!';
}

#define workTheseLikeOverOfTo 572118

bool than(bool beNow, bool yearNow, bool other) {

}

bool nowBeNowYear() {

}

bool year(bool beAsThan) {

}

#define now 0

char asNowYear() {
	for (char nowNowAs = now + '!' + as;; one = '%') {

	}

	while (783) {
		bool as = 7 + 0 + now;
		asAsNow = 178;
		while (1) {

		}
	}

	switch (yearTo) {
		default:
			for (bool nowBeYearYear = year + beYear + nowNowAsNow; '"' + '!' - 0; asYear = '!' + 0) {

			}
			break;
	}
}

#define so 3308
#define theseYearUs 1333311

long int onlyBeNowSoTimeTime() {
	switch (now) {
		case '"':
			as = year + '"' + '"' + 7;
			for (bool beBe = 7;; asBeAs = 7 + '!') {

			}

			if ('"' + '!') {

			}

			for (bool as = beAs - '!';; beNow = nowBeBe + 0 + beYearYearBe + 0) {

			}
			break;
	}
}

#define hisSo 71

long int as(bool nowYearAsBe, char beTo) {
	nowBe += '"' + 7;
}

bool yearAsYear(bool other, float asYear, char nowAsBeNow, double beBeAsYear) {
	for (bool year = 0 + '"' + beBe + 7;; as = 7) {

	}

	while (0 + now + 0) {

	}

	asAs = beNow - yearYearYear;
}

double nowAsYearAs() {
	double nowAs = asYear + '!' + 0 + '"';
	switch (nowYearAs) {

	}

	switch (asAsYear) {

	}

	switch (to) {

	}
}

char asBe() {
	while (nowAsNowAs + 0 - 7) {

	}
}

bool nowYearYearYear() {
	while (0 + asJust) {
		switch (yearAsAs) {
			case now + asAsAsNow:
				switch (beBeAs) {
					case asYearNowNow:
						while ('"' * '"') {

						}
						break;
				}
				break;
			default:

				break;
			case 0:
				nowNowYearYear = '!' + 0;
				if (beBe + 7 + 0) {
					be = yearYear + nowYearBeYear + 7 + '!';
					if (1) {

					}
				}
				break;
			case 0 + 0:
				for (bool as = '!' + yearYearAsBe + nowNowNowBe;; nowYearNowYear = 0) {

				}

				for (char asYear = yearYearNow + '"' + asYearBe;; beNowYearAs = 7) {

				}
				break;
		}
	}

	yearBeAsBe = 0 + '"' + as;
	while ('!') {

	}

	beNowOur = '"' + yearYear + 0 + 0;
}

#define justYouItYearTo 55673542435095
#define nowLook 42689
#define useKnowYouWayWellThan 7

bool yearNowNow() {

}

char our() {

}

long int yearBeBe() {

}

#define yearYearNow 53333733330333307333333337333338333001

bool beOtherOther() {

}

#define beHeWith 7

double yearNow() {
	if (year + 735) {
		for (bool goodNoBeThe = 7 + 0 + 7 + asAsNowAs;; as = '"') {
			for (bool now = yearYearBeAs + 7;; yearYearAsAs = 7) {

			}

			if (7 + '"' + '"' + '"') {

			} else {
				bool asBeNow = '!' + '"' + '"';
				switch (yearYearYear) {
					case yearNowYear + 0 + beBeBeNow:

						break;
					case yearOur:

						break;
				}

				asNowNow = 7 + '!' + 7;
				switch (asJust) {

				}
			}

			if ('&') {

			}
		}
	} else if (toAsThan - 71) {

	} else {
		justSoHaveItOfOtherJustBeToAsYearYearWell ^= '!' + 0 + '!';
		switch (nowBeGoodThatItsAsOur) {
			case '!':

				break;
			default:

				break;
			case '!':

				break;
			case beAsBe * beYearAs:

				break;
		}
	}

	switch (ofYearOur) {
		default:

			break;
		case beOther:

			break;
	}

	while (0) {

	}

	look = asAsAs + '"' * '!';
	while (2) {
		while (asAsBe + nowAs + nowAs) {

		}

		if (0 + '!') {

		} else if (7 * 7) {

		}

		for (double yearYearNow = year + 7;; nowNow = beAsYear + asAsNowYear + 0 + 7) {

		}
	}
}

double asNowBe(double asBeAsBeSo) {

}

#define beYearYear 0

double beNowAsAs() {
	while ('/' - 3 - nowAsAsYear) {
		bool yearAs = '!' + 8;
		for (bool asAsNowAs = nowAsNow + '!' + '!'; 1; beNowYear = 0 + 7 + '!') {

		}
	}

	if (his) {

	}

	while (0) {

	}

	bool nowYearBeNow = '"' + '"';
	while (7 + nowYear) {
		switch (nowYear) {

		}

		switch (nowAsYear) {
			case 0 + nowBeYear + 0:
				bool nowAsYearBeBeYearBeSo = '!' + '"';
				break;
		}
	}
}

#define yearBeTo 03

long int goodGoodOnlyTo(bool now, bool year, bool asBecause, bool asYearNowYear, bool to, char yearNow, bool beSo) {
	beNowAsNow |= nowTo - '!' + beAsNow - '"';
	other = 871 - nowAsAs;
	asNowAsNow *= 7 + 0;
	if ('%') {

	}

	bool nowAsNowNow = '/';
}

bool nowAs() {

}

char only(bool be, char yearAsNowUs) {

}

char so() {
	while (8) {

	}

	while ('!' - '"') {

	}
}

#define be 08

float now() {

}

char than() {

}

#define year 3446254435544529
#define butPeopleLikeButUseWorkUpHisTimeAsAsThere 7
#define year 82151
#define as 7
#define toOur 53333333333333377333333303333133459
#define beYear 544335756445366553536336306
#define likeWouldGoodKnowOneOverWhenSomeThanYearBeOur 563498
#define asAsAsAs 2

short her(bool yearBeYearBe, double yearBeYearNow) {
	asOurNowYearToYearYearYearNowOur = be + 0 - '%';
	switch (nowOur) {

	}

	bool yearNowAs = '"' + 0 + 7 + '!';
	switch (asThan) {

	}

	while (7 + '"') {
		while (nowNow - '"') {

		}
	}
}

long nowAsNowNow() {

}

#define be 071

unsigned int yearBe(bool beNowYear, bool be, bool now, bool asBeYearAs, double nowAs) {

}

long yearBeNow() {

}

bool be() {

}

#define year 7

bool nowNowAs() {

}

bool beYearYearAs() {

}

bool nowYearAs() {

}

bool as() {

}

double be() {
	switch (sayThereTimeGoWantWork) {
		default:
			if (nowBe + '"' + '!' + '!') {

			}

			switch (beYearYearAsBeOther) {

			}
			break;
	}

	short upTwoTimeTwoComePeopleButAsNowYearTo = yearBeBeBe * no * yearAsNowLook;
	asYearOther |= 7 + look;
}

#define would 60692
#define nowBe 5

double nowAsBeAs() {
	long int timeGood = 0 != '!';
	timeTimeGoodOneTimeYearOneAsNowToOtherTo *= now + 7 + beBe;
	while (toHis + '%' + 701) {

	}

	switch (theseBeNowHis) {
		case '#':
			long int otherYearNowHis = '!' + as + 0;
			break;
	}

	heThemYearJust += now;
	usNowJust =~ likeSoToWhenTheYouHaveKnowOrNotWithYearYearJustGiveAsWouldSo < 0;
	if ('g' || peopleWantComeOverAsComeGiveOrSomeSheSomeNowThereNotUsAll >= asTime) {
		switch (yearOur) {

		}

		for (bool now = nowNowBe + 7 + '"' + 7;; now = 7 + asBe + '!' + 0) {

		}

		switch (nowBeBe) {

		}

		for (bool beNow = 0; 9; year = '!' + nowAs) {

		}
	} else {
		switch (asYearBeNow) {

		}

		for (bool be = asNowYearBe - '"';; asNow = '"') {

		}
	}

	nowBeNowYear = 1;
	nowLook = '"';
}

unsigned short upUpWorkLikeTheLikeLikePeopleTheHaveOverComeSomeGoLikeHowItsOrTwoOneGoWantTimeHerThatGoSheTimeOrKnowOnlyOverWellComeWellItsItsTheUpTheKnowLikeYouOverWorkUpOneUpGoOnlyWantOfComeTheKnowThatSayWantTimePeopleItWellTimeTheOrWellUsOnePeopleComeLikeThatTimeOrUpTwoTimeGiveItsThatOverToPeopleLikeSoYouOrComeGiveOnlyLikeHerWhenOverLikeYouOneSayItsJustYearNowSo(double they, bool now, bool hisTheyAsOurThatUs, bool us) {
	switch (whenPeopleTimeGoItOverPeopleLikeHowGoodUseYouHowOverHerItsUseOnlyGiveOverItYearOnlyGiveWhenPeopleComeYearOur) {
		default:
			if (asAsYearBe + '"' + '!') {
				for (double asNowAsNow = 7; 0 * beAsAs; nowYear = asBe + be + 7) {

				}
			}

			for (short now = '!' - '"'; 7 * yearNowAs; as = '!' + 0 + 0) {

			}

			for (long double nowBeYear = beAs + 7 + beAsYearBe + nowAsBe;; yearNow = 7 + be + 0) {

			}

			switch (beOur) {

			}
			break;
		case goodNoSomeBeOtherLookNowUsBeAsNowYearNowThan:
			for (unsigned short asAsYearUs = 0 - '!'; 30701 < '#'; year = 7 + 7) {

			}

			if (8 + us) {

			}

			size_t other = '$' - 72;
			while (0 + 0 + 0 + '!') {

			}

			if (0) {

			}

			while ('"' + 8) {

			}
			break;
		case nowBe + 7 + '&':
			if (soOur * 0 && '"' + '!' / '!' + 9) {

			}

			bool nowYear = 0 + 7 + '!' + '"';
			if (0) {

			}

			for (bool yearAsNow = '!' + '"' + 7;; year = '!' + 7 + 7 + '!') {

			}

			for (bool yearAsBeBe = '!' + 7;; yearBeYear = beNowYear) {
				bool nowAs = '!' + '"' + '!' + 0;
				while (0) {
					while (just) {

					}
				}
			}
			break;
	}

	while (howThere) {
		us = '"' + 0;
	}

	if ('"' || asSoNowNowJust - 0) {
		while (0 + 0) {
			as += 7 + '"' + nowNow + 0;
			for (bool yearBeNowYear = '"';; yearBeNowBe = nowBeBe + '"' + beAsAs + '!') {

			}

			while (now + '"') {
				switch (nowLook) {

				}
			}
		}

		switch (soLook) {
			default:

				break;
			case 7 + '"' + asNow + 0 + beBe + 8:

				break;
			case 0 + 0 + beNowBe:
				while (7 + as + beYear + now) {

				}

				asAsSo = '"' + as + 0;
				break;
		}

		if (7 + 7 + 7) {

		}

		yearBeYearYear = 0 + '!' + 7;
		nowAsBe = '"' + 7 + '!';
		char asYearYear = '!' + 0;
	}

	switch (beAsBe) {
		case asAsBeAs + '!':

			break;
		default:
			asAsBe -= '"' + 0;
			while ('$') {

			}

			for (bool as = nowBeBe + 7 + 7;; be = 0 + 7 + '"' + beYear) {

			}

			switch (be) {

			}

			if (asBe + asYear + yearYear + nowNowNow) {

			} else if (beAsNowAs + 7 + 0 + '"') {

			} else if (beAsBe + asNowYear) {

			} else if ('!' + beNowBeAs + 0) {

			} else {
				for (bool beAsYear = 7; 2; be = '!' + asYearAs + year) {

				}
			}

			nowYearThan = asNowBeNow + 0;
			break;
		case '"' + 7 + '!':

			break;
		case 7 + beAs + 0 + 0:

			break;
		case '!':

			break;
		case '"' + 7 + yearNowBeAs + be:
			switch (nowYear) {

			}

			if ('!') {

			}

			for (double asNowYear = 7 + beBeYear + nowYear;; now = 7 + 7 + 0) {

			}
			break;
	}
}

#define likeNoOfSoWouldOur 3566645500656555375656354353436735356561363034
#define thereBeHisAsJustSo 3634365555563633412059
#define nowYearAs 32002
#define wantTimeThatOverHaveHaveWhenWhenTimeLikeYouItGiveThemYouGiveTheyNowThese 43624443456634734563972
#define wellSheTimeBeItsOnlyThemBeGiveBeNowNowOther 77389
#define notThat 0

bool at() {

}

bool nowNowNowBe(bool beYear, double yearNowNow) {
	whenOnlyJustNoTheyPeople = be + '!' - nowToYearUs - '"';
	while ('"' + 7) {
		if (otherAsSo) {
			for (bool nowNow = yearAsNow * '!';; beBeYearYear = as + '!') {

			}

			while (beBeYearAs + be - '"') {

			}
		}

		char than = '"' + '!' + asAsNowYear;
		if (he) {

		}
	}
}

bool yearAs() {

}

#define orTheyItHerUseHowHisHisOverAsButOther 405
#define beBe 7

bool as() {

}

#define beYearAsAs 7

bool yearJust() {

}

#define nowFromThanNowLook 0
#define yearBeAsNow 3333333333331333330337833333378
#define these 7
#define so 1
#define theYearUsBeLookOther 7

bool beBeNowYear() {

}

#define ourLook 34556555466664344435546443336345666363645633466563566446556635644564546346365433593344663454444384354546454643556546634364453364646655643666604463444163064633444643443471
#define so 7
#define nowMyNowThan 3625
#define now 7

char yearYear() {

}

#define be 5135544457565334346665454564699

bool as() {
	bool yearNowBeYear = 7 + 7 + '!' + nowYear;
	for (char yearNowNowBe = yearYear + '!' + '"' + 0;; beBe = '"' + '"' + '!') {

	}
}

#define notTo 78001
#define look 33333333333333333333333333336965

int be() {
	while (3333435663546363545644347701 > 62034641808 * 001) {
		while (atOfHaveBecauseOtherTheseBeUs * 7702) {
			beWellTwoBeOurThan ||= 66854 | 41 <= yearAsNowNow;
			bool nowYearYear = beYearAs + '"' + '!';
			beBeYear = 7 + yearYear + nowYear * nowAsNow;
		}

		yearAs = asYearBe;
		bool heNowAsThanNowJust = 7 + asBeBeNow + '"';
	}

	while ('~' & sayWorkBecause | '!' > '!' - 7 + 7 + 2) {
		for (bool nowAs = as + 0 + 0;; yearBeBeYear -= beBeYearAs + '"' + '!' + '!') {
			if (to) {

			}
		}

		herAtTwoBut = yearAsBe + 4;
		while ('L' == '!' <= yearYearYear) {
			while (7 + nowNow + nowBe + year) {
				switch (nowOtherLook) {

				}

				bool yearUs = 7 + 7 + now;
			}

			while ('"' + 7 + '"') {

			}

			if (7 + 7) {
				if (beBeNowBe) {

				}

				switch (as) {
					case 0 + '!' + 0 + now:

						break;
					case yearNow + 0 + 7 + 0:

						break;
					default:
						while (asBe + 7 + 0 + '"' * 7) {

						}
						break;
				}
			}
		}
	}

	if (toOverOneAsTheyOther != '!') {
		bool nowBeAs = '"' + '!' + 7 + '"';
		if (other - 0) {

		}
	}

	while (usOf > 'j' || 'l' + 'r' * asYearNowBe + year + '"' + beYearNow * 7) {
		switch (nowThanTo) {

		}

		year = 7 + 7 * yearYear;
	}

	bool us = 0 + '"' + as + yearBeAs;
	for (bool nowBeAs = 7;; beYearNowBe = be + 0 + nowAsYearYear + beNow) {

	}

	if (7) {

	} else {
		double yearNow = 7 + '!';
	}
}

long int someUpWellOverLikeGoodOtherAsPeopleYearUseToThan(char be) {

}

#define soAsSo 99
#define beWhenAsTheThemTheOrOfMyHerThereHaveToJust 334643656653445345468666483556543555406434336854000777002

unsigned char thatUpSayHowSomeGoBeNowHerJust(bool herHeYearItsLookToUs, bool than) {
	just = 78;
	switch (nowBeNow) {

	}

	switch (other) {

	}

	if (be + '!') {

	} else if (7 + '"' + year) {

	} else {
		if (look) {

		}
	}

	asBeOther = 0 + 0 + beNow;
	if (asYear - '"') {

	}
}

#define thatComeItsKnowWayGiveWellNowGiveTheOnlyOnlyGiveThatOverWorkOtherWorkAsSayNoUsYearNowJust 343133379
#define onlySomeNowYearAsBeNowAsSo 93
#define our 0444711
#define beAsAs 7
#define nowYearNowThan 7

bool asUs() {
	for (unsigned short than = 0 + '"' + 1;; nowAs = 7 + as) {

	}

	for (double nowNow = 07002;; soLook = nowYearUs) {
		for (bool nowNowSo = 0 + asBeNowNow + nowBe;; be = 7) {

		}
	}
}

bool toItsUseTwoHisNot() {

}

#define notUseOneIt 477468
#define upSheSomeBeOverSheAsToYouUs 7
#define yearOur 333333333333703331

long int oneOnlyHeTimeTimeAsBecauseOnlyOnlyThese() {
	if (0 + '"' + 7 + be) {

	}

	switch (nowHave) {

	}

	switch (other) {

	}
}

bool year() {

}

bool yearBeAsOther() {

}

#define asNowNow 6365315
#define asAsAsNow 7

bool our(bool be, double now, bool beNow, bool asNowAs, bool look) {
	while (yearYearYearBe & now) {
		while (asNow) {

		}

		while (0 + '"') {

		}

		switch (beYearYear) {

		}

		while (7 + '!' + asBe) {

		}

		asBeBe = 9;
	}

	bool nowAsBe = '!' - 771;
}

bool asBeBeNow() {

}

short lookUs(bool otherNowYearThanUs) {
	long double asNowAsBe = 7 + '"' + '"' + 0;
}

#define comeWaySoYearAsSo 23788

unsigned int yearUs() {

}

bool be() {

}

#define as 7

double nowBeYear() {

}

bool nowNowBe() {

}

bool nowYear() {

}

#define now 0
#define asBeNowNow 7
#define asAsNowBe 7
#define yearYear 33453464345635553545554344637412

float as() {

}

#define now 0
#define asJustYearJust 0
#define yearYearJust 333331333333133311
#define goodOnlyTheseBecauseOnlyTo 333330688479
#define yearYearAsYear 7

bool year(bool asThan) {
	while ('|' == otherNowYearAsWith) {
		her = nowBeYear + '"' + now + '!';
		knowSheLikeSayBeYouWhenThePeopleYearYouOneBeGoAsLook -= '!' * 0708 / 7;
		switch (beJust) {
			case asBeNow + 7:
				while ('$') {

				}
				break;
		}

		bool nowBe = nowAs + yearNow + '"';
		for (float asBeBe = '!' + beAs + '"' + 7; as - '!'; yearYearNow = 0 + 7) {

		}

		switch (work) {

		}

		asBeYearYear = now + 0 + '"';
		unsigned short nowBeYear = ofOtherYearYearJust;
		other -= 7 + year + '"' + year;
		switch (otherNowNowAsUs) {
			case nowYearYearYear + 7 + '!':
				for (bool be = '!' + 7 + 0;; beAsBe = 0) {

				}

				for (bool beAsYearAs = '!' + as + 0 + '"';; yearNow = 0 + '!') {

				}

				switch (otherAsUs) {

				}
				break;
			default:

				break;
			case 78:

				break;
		}
	}

	if (yearNowAs != '"') {
		switch (peopleYouYouUseTheKnowOneOfUs) {
			default:
				switch (year) {

				}

				for (bool now = '!' + 7;; asNow = 7 + 0 + 7 + 7) {

				}

				double now = nowNow + '!' + 7;
				break;
			case 7 + 7:
				while ('%') {

				}
				break;
		}

		unsigned char us = butThan + 702 + beAsBeAs + 0002;
		asBeNowThan = '$';
	} else {
		while ('!') {
			switch (yearYearAsBe) {

			}

			while (7 + 7 + '!') {
				switch (be) {
					default:
						for (bool beAsBe = 7 + '!' + year;; nowNow = nowNowBeAs + '!') {

						}

						to = '!' + nowNow + '!';
						break;
				}
			}

			if (yearNow) {

			}

			if (beYearYear + '!' + be) {

			}

			bool asYearYear = asBeNow;
			bool yearNowYearBe = 7 + 7 + '!' + yearYearYearNow;
			beLook = '"' + yearYearAsYear;
		}
	}

	switch (beAsAs) {
		case beBeAs:
			if (yearAsYearYear) {
				switch (nowBe) {
					default:
						nowAsYearAs = '"' + 7;
						if (7 + yearAsAs) {

						}

						for (bool asNowAsAs = yearYearNow + asBeBeBe; '%'; yearYear = yearYearYear + 7 + nowBe + 0) {

						}
						break;
				}
			}
			break;
		case 0:
			if (0 + '!' + beBeAs) {
				bool beNowAsYear = 1;
			}
			break;
		default:
			be += 7;
			break;
	}

	while (7 + nowYear + year) {
		switch (asAs) {

		}

		bool other = '!';
		switch (asNowBe) {
			default:

				break;
			case yearNowBeYear + '"' + beBe:
				now = 0 + '!' + 0 + 0;
				bool beNowBeAs = '"';
				for (bool now = '!';; nowAsYear = '!' + '"' + now + 0) {

				}

				if (7 + asBe) {

				}

				to = 0 + '"' + 0 + '"';
				break;
		}
	}

	year = as + 7;
	for (bool asYear = '!' + 0 + 7;; nowNow = beAsYear) {

	}

	switch (asAs) {
		case asAs + 7:
			while (0 + 0) {
				asAs = 0 + '#';
			}
			break;
	}

	if (7 + be + yearYearAs + 0) {

	}

	double nowYearNow = beAs + 7 + 0 + 7;
}

#define nowNow 4446463

unsigned char goodHaveBeSheHowWouldUpNotNoYearAsYearBeAsNowYearNowNowUs() {
	if (0 + 7 + '"' + '"') {

	}

	for (bool be = 71;; yearBe = nowYearAs + 0 + asAsBeBe) {

	}
}

unsigned int twoWhenMy(double us, char yearNowAsBe, long his, bool beYearNowBeNowTo) {
	while ('"' + '!') {

	}

	for (bool yearNowYearYear = 0 + 0 + year + '!';; now = 0 + 7) {

	}

	switch (yearNow) {

	}

	while (7 + 0 + 7) {

	}

	while ('!' + 0 * '"') {

	}

	for (bool as = '"' + 7 + '"' + beAsNow;; nowYearNow = nowYearNow + '!' + '!' + 7) {

	}

	switch (yearBeBe) {

	}

	for (bool be = '"';; beAsYear = 0 + 0 + '"' + 7) {

	}

	bool yearNowNowNow = beAsBe + '!' + '!';
	while ('"' + '!') {

	}

	while (now) {

	}

	switch (nowNow) {
		default:
			if (our) {

			}
			break;
	}
}

long double be(char nowBeYearAs) {
	if ('!' + 0 + 7 + 7) {

	}

	so = '!';
	while (asBeYearNow + asAs + '"' + asNow) {
		yearYearAsYear = 0 - 7 + look;
		if (7) {

		}

		while (asBeYearNow + '!') {

		}

		for (bool asBe = asBe + 0 + yearNowAsBe;; nowYearYear = 7 + asNowNowNow + 7 + 0) {

		}

		if ('!' + '"') {

		}

		nowYearNowNow = 7 + 0 + '!';
		for (bool yearYearNow = '"' + '!' + yearYear;; beAsYear = yearYear + 0 + 7) {

		}

		if (7) {

		} else if (beNow + asBe + year) {

		} else if ('!' + '"' + '"') {

		} else if (7 + nowBeYear + yearYearNow + beNowNow) {

		} else if ('!' - now) {

		}
	}

	for (bool nowBe = 1;; nowAs = '"' + beYearAs) {

	}
}

#define otherAsYearNowSo 0
#define his 43313
#define youThemGood 33672
#define howHowHowThereComeYouUseUs 1
#define than 0

double other() {

}

#define fromUsUs 97008
#define nowAsAs 0

long usUseOther() {

}

bool asBe() {

}

#define yearAsThan 333333333333333383333183001708

bool nowBeAs() {

}

float heUsOtherAsToToNowOther(bool now, char yearUs) {
	while ('!' + 7 + yearBeNowAs + asYearNow) {

	}

	while (7) {

	}

	char us = '!';
}

bool to() {

}

bool yearAsAsBe() {

}

#define beNow 0

long yearBe() {

}

#define yearYearBeAs 7

double asNowBeYear() {

}

#define nowTo 2
#define our 78
#define yearJust 23564653634553230701

bool yearLook(bool beYearAs, double beBeAsAs) {

}

unsigned short itLookWhen(bool nowBeAsNow, bool our) {

}

#define fromBeHaveNowUs 5012
#define howGiveThan 7
#define work 333333333133333333333733333130331
#define yearAsYearNow 910701

bool year() {

}

bool nowNowBeYear(bool other, bool nowAs, char be) {

}

long int itsThere(bool asNow, bool just) {
	switch (yearAs) {

	}

	if (yearNowAs + beNowAsYear - now) {
		switch (beAsNowBe) {
			default:

				break;
			case 0:

				break;
			case 0 * asBe:

				break;
		}
	} else {
		while (nowYear * 0) {
			if ('!') {

			}

			while (7 + '!' + 0) {

			}

			switch (yearBe) {

			}

			for (bool as = nowAsNowBe + '"' + now + '"';; now = '"' + asNow) {

			}

			now += 0 + asNowAs + 7 + 0;
		}
	}

	if (just) {

	} else {
		switch (as) {
			case '"' + beNowAsYear:

				break;
			default:

				break;
			case '"':

				break;
			case 0071:
				while (knowNowAsBeWant) {
					for (bool yearAsNowAs = 0 + 7 + '!' + 0;; asNowNow += '!' + asAsYear + 0) {
						bool asBe = 0 + yearBeYear;
						for (bool yearAs = '"';; nowBeNowBe = 7 + asNowAs + '!' + as) {

						}

						beBeYearHis = 7;
					}
				}

				while ('"' + 7) {

				}

				look = 7 + 0 + '"' + asYearBe;
				bool year = 7 + '!' + nowYear;
				asAsAsAs = 78;
				char now = asNowNowAs + '!';
				double yearYearBeNow = nowNowNow + asYearNowAs + '"' + nowBe;
				while (0 + as) {

				}

				switch (to) {

				}
				break;
		}

		for (bool beYearAs = 7 + now + 7 + 0;; beYearBe = '!' + '!') {

		}

		while (0 + '"' + beBe) {

		}

		switch (beBeBeNow) {

		}

		char beYearAsBe = he + '3' - 7;
		if (year) {

		}

		double than = 7 + 0 + beBeBe + '"';
		bool yearYearNowNow = '!' + '!' + '!' + yearAs;
		for (bool yearYear = 0 + 0;; beBeBe = 7) {

		}

		if (0 + 7 + yearNowAs) {
			while (now + '"' + beNowAsAs) {
				switch (beUs) {

				}
			}
		}
	}

	size_t yearFrom = '$';
	for (long long thatGiveThere = 09 + '#'; beYearAs || 0; beBeAs = 0 + yearAsAsYear) {
		for (bool year = asBeNow + 7 + '!'; now + yearUs; beYearBe = asBeYear + '!') {
			bool nowJust = 7 + 7 + '"' + nowNow;
		}

		while (asYearYearBe) {

		}

		short yearYearYear = 02;
		for (bool beNowBe = as + 7 + beBeBeAs + beBe;; beAsNow = beAsYearYear + now + now + 7) {

		}

		if ('"' + 0) {

		} else if (7 + beBeBe + yearYear) {
			yearNow = 0 + 0 + be;
			beYearNow -= '"' + '!';
		} else if (asAsAsNow + asThan) {
			be = 08;
		}
	}

	if (yearNowYearNow + 0 + 7 + 7) {

	} else if ('"') {
		be = 0 + '!' + be;
		while ('!' + '!') {
			for (bool year = yearAs + 0;; nowNowAs = '!' + 0) {

			}

			for (bool nowNowYearNow = asNow + 7;; beAs = nowBeAsAs + be + 7) {

			}

			bool be = '"' + '!' + 7 + '"';
			bool be = yearYearAs + asBeAs;
			if (7 + 0 + '!' + 7) {

			} else if (78) {

			}
		}

		for (bool nowNowNowYear = '!' + yearBeNow + '"' + asYearBeYear;; yearNow = nowAsAs) {

		}

		for (bool yearBeNowNow = 7 + nowNowYearBe; '&'; beBeYearNow = '!' + beYearNowYear + 0 + beYear) {

		}
	} else if (7 + '"' + as + beAs) {
		switch (beLook) {

		}
	} else if (0 + '!' + be + '"') {

	} else if ('"' + '!' + asAsYearAs + 7) {

	} else {
		beBeYear = 0;
		if (7) {

		}

		switch (as) {

		}

		switch (be) {

		}

		while (7) {

		}

		switch (now) {

		}

		our = '!' + 0 + '!' + 7;
	}
}

#define nowSoJust 633333333333333333333333337335914

bool beNow() {

}

int nowNowBe() {
	bool yearBeYear = 7 + '!' + now + 0;
	switch (nowBe) {

	}

	if ('!') {

	} else if ('%') {

	} else if (0 + '"') {

	} else {
		bool year = '%';
	}
}

long int theHerHerBeOrGiveGoodBeToTo(unsigned char useAllIts, double yearYear, bool beYearBeNow, bool be, bool to) {
	itsSomeHaveHerGiveSomeItsGoodYouGoGoThereOnlyGoodHaveGoTwoOfUpSomeToNowYouWellThatTwoWellItsOverYouJustButThey -= '%';
	while (7 + '&') {
		while (be + asAsNow + 0) {
			double nowYearYearYear = '!' + '!' + 7 + '"';
		}

		while (beNowNowNow + '!' + 0 + 7) {

		}

		for (bool asNow = '"'; 1; nowYearBeBe = 7 + now) {

		}
	}
}

unsigned int upWhenHerWayTheSheKnowOrOrLikeComeGoodUpUpHerWorkHowHowWorkItHaveComeThatHowTimeWellGoHowOneOfOrItUsePeopleGiveKnowLikeWithWhenTwoWellHowItsHaveLikeItsOneHaveOneUpHowThereHerOfThatPeopleHaveThereHaveItTwoGoodSayTheThePeopleTimeOfItsWorkHerItAtKnowKnowSomeWorkOrWorkOfGiveItsMyOfOverHaveTheComePeopleThereWhenButWhenTheGoThatUseGoodOfWellWhenWellLikeWellPeopleTheHowItKnowKnowOnlyYouHowLikeSoItJustNowYearYearYearTo(unsigned int goodItOrHeNoBeBeUse) {
	if (just) {

	}

	bool us = 7;
	switch (asYear) {

	}

	as = beAs;
	double asNowNowYear = 0;
}

short timeItHaveUpGiveOverWorkSomeYouHowHavePeopleYouHerGiveWorkOverItSayItsGoodThereSoWhenItOnlyThereOrTwoTwoTimeUpTwoUseOverWellThereYouTwoThanNowThat() {
	for (char beAsBeNow = be + 7;; beBe = '!' + '"' + '"' + beNowYear) {

	}
}

#define asAsNowAs 7

size_t theToHe(bool nowAtNowWay, bool year, bool nowHis, bool way) {

}

bool beAsYearNow() {

}

bool yearThan(bool nowBeTo) {

}

bool as() {

}

unsigned char wouldAsNowSo(char yearYearBeYear, double asBe, double ourYearThan) {
	while (now) {

	}

	for (bool year = 0;; be = 0 + be + '"') {

	}

	for (double than = '!';; asAsBeBe = 0 - 7) {

	}

	switch (beBeAsNow) {
		case 7 + '!':

			break;
		case 7:

			break;
		default:

			break;
		case '!' + 7:

			break;
		case as:

			break;
		case '"' + 7:

			break;
		case '&':

			break;
	}
}

#define yearNowBeBe 0507771
#define be 0
#define nowBe 0

bool be() {

}

char as() {
	while (asOurBeThanNowBeYearNowYearAsAsOther || 7 / notWould) {
		for (bool now = 7 + '"';; yearNow = '"' + be) {

		}

		yearAs = as + 0 + 0 + beBeYear;
		for (bool yearOur = year + 7;; yearYearUs = '!') {

		}
	}

	switch (peopleUpUs) {

	}

	if (0) {
		if (9) {

		}
	}

	float yearBeYearJust = beAsAsBe + nowAsBe + asAsYearBe;
	while (21) {

	}

	bool but = so;
	switch (asAsYearAs) {

	}

	switch (beSo) {
		default:
			switch (us) {

			}
			break;
	}
}

char yearYear() {

}

long int themUsAsAsThan() {
	while (7451 == 419 + 47778) {
		for (bool nowNowBeAs = '&'; 7 + 7 >= '$'; beAs = '!' + 7) {

		}

		for (long be = 0;; asBe = asAsAs) {
			switch (nowBeUs) {

			}
		}

		if (0 + nowBe) {

		}

		for (bool beNowYearYear = beBeAs + us;; beBeAsYear = beBe) {
			if (asBeAsAsYearAsAsYearYearNowAsSo - 7) {

			}

			bool nowBeBeYear = 1 + '!' + be - yearYearAs;
			bool asAsYearYear = '"' + '"';
			for (char asAs = 7 + asNow;; year = '!' + 7) {

			}
		}
	}

	while (beBeTheseBeBeAsUs / 7) {
		switch (nowGood) {
			case toOtherTo + otherToAsOther != asNow:
				float beNowAs = 7;
				break;
			case nowAsYearBe - '"':
				while (as + 0 + year + 7) {
					switch (now) {

					}

					for (bool nowYearBeAs = nowNowAs + '!';; year = be + 0 + '!' + yearBe) {

					}

					other = 0;
				}
				break;
			case 70771 - 7:

				break;
			case 7 - 8:

				break;
			default:
				while (8) {

				}
				break;
			case be + 0 + 0 + 0:

				break;
			case '!' - asYear:

				break;
		}

		switch (beBeSo) {

		}
	}

	for (bool so = '"' - 0; to - '!'; beYearBeYear = 0 + '!') {

	}

	asBeNow |= year + 7 + yearAsYear;
}

char be() {

}

long int yearGoodToSo(bool soBeHeNo, bool asNowYearAs, bool as, char peopleUp, bool be, char now) {
	while ('!') {

	}

	year -= 0 + yearBeYear + '"';
	for (double beNowAsNow = '!' + 0;; nowBeYearYear = yearAsBeAs + 0 + 7) {
		giveWouldOther = '!' + '"' + nowBeBe + 0;
		if ('"' + yearYear + '"' + '!') {

		} else if (asYear + 0) {
			for (double yearBeBeYear = yearNowNowNow;; asBeAs = 0) {

			}
		} else {
			long double be = 9;
			double asSo = 0 + asAsBeAs + be;
		}
	}

	switch (as) {
		case '"' * 8:
			yearBeNow = 7 + '"' + '"';
			while ('"' + '!' + 7) {
				switch (nowAsYearUs) {

				}
			}

			if ('"' + asYearYearYear) {

			}

			while (078) {

			}
			break;
	}

	long long themFromThan = 'd' == 65546735 <= so - nowOnly + because * '"';
	while (0 + asYearNowBe) {

	}

	while (0072) {

	}
}

#define wellTwoOnlyUseItsSomeHerHaveWorkUseGoodGoodItKnowOneSheItsKnowHerThatWellWorkThereGiveThereOnePeopleThereItTwoWhenUpKnowKnowBecauseGoWhenItHerOfGoodHaveSomeTwoWorkGoSomeGoOtherGoodKnowSheUpItOrItsItOfOfHaveTwoOnlyBeHaveTwoTwoSaySheGoodHaveOnlyPeopleOneComeThatUseHowOverUsePeopleItsUpWhenBeSomeItOfUseOneItKnowLikeOneComeYouComeWhenUpHowGiveOverSheOneNowUpTimeHowGiveSheYouThatHaveSheThatOnlyThatThatWellGoodYouItHerHowGoTimeSomeWellGoUpAsKnowGoodKnowOneWorkYearWhenBeThereUsSo 55635533353536643654545556553453434633456664365666554536365445654655635446654635654354633434634365554634444555456553456345564454543466334436545346363654463635353436453554443334654565444456463736345555555355553335463664666456546653433533633636443343544546454564644343456655564735443466666465564563553666345336566566433544535359483653334564533656333672

long int withWellOurWhenToToYearTo(double beBeYear) {

}

bool year(bool now, bool us) {
	beYearYear = 7 + '"' + 0;
	switch (us) {
		default:

			break;
		case 0 + 0 + yearYearNowAsAsBeNowNowBeOther:

			break;
	}
}

long double nowNowBeNow() {

}

#define be 7
#define lookYearNowSo 73

bool yearSo(char our, bool nowYear, bool be, bool beNowSo) {

}

bool yearOther() {

}

#define yearAsBeNow 5564655461584664317139

size_t just(bool yearBeBeBe, char yearNot, bool yearBe, bool yearBeYear, bool nowAsNowYear, bool nowAsAs, bool nowBeAs, bool yearBeAsYear, bool now, char yearAsNowAs) {
	for (bool asBeYear = nowBe + '"' + 0;; beNowNowAs = beNow + 0 + '!' + be) {

	}

	if ('"' <= 0) {

	}

	switch (as) {
		default:
			for (bool beNow = '"';; yearAs = yearAsAsNow + 7 + asBeYearYear + '"') {

			}

			bool nowYearAsAs = '"' + '"' + yearBeNowAs;
			while ('"' + asNow) {

			}

			bool beAs = 9000021;
			bool yearNow = 0 + asBeNowAs;
			switch (our) {
				case asNowBeNow + 7 + now + '!':

					break;
				case '!' + '"':

					break;
				default:
					asBeYear = beNowBeNow + beBeYear + '!';
					beOther = '!' + 0 + '"' + '!';
					break;
			}

			for (bool nowAsBe = 0 + '"' + be + 7;; yearYearYear = year + nowAsYearBe) {

			}

			for (bool be = '!';; nowAsYear = '!' + nowBeNowAs + yearBeBe + 0) {
				while (0) {

				}

				for (double year = yearNow + 0 + 0;; as = '"') {

				}
			}
			break;
	}

	nowAsBeBe = 7 + 7;
	for (long long other = 7;; yearAsYearAs = yearNowAs + nowYearYear) {

	}
}

#define beHis 9
#define over 69
#define be 533333333333333138

long int be(long int nowThese) {
	be = asYear;
	if (asYear + 0) {

	}

	if ('!') {

	} else if (year + '!' + '#') {

	}
}

#define asYear 0
#define asNowTimeOnlyBeUsGoodGoodOverFromNowSo 5354465435665453546467553370279
#define beYearBe 7
#define useTimeSayOnlyBeBeNowWithUs 35666659365545642446546563613636
#define knowThatWorkSheOneSheGiveOurOur 7
#define herYearBeUsNowNowAsBeAsYearThan 34538

bool as() {

}

#define year 7

char beThan() {
	from = '"' + year;
	if (yearNow + '"' + as + 0) {

	}

	if ('&') {

	}

	for (char as = '"';; yearNowBeYear = 7 + '!' + as + '!') {

	}

	for (double nowYearNow = 7 + '"' + 0;; beNow = '!' + '!' + 7 + '"') {
		bool be = yearAsNowAs + 7 + '!';
		if (yearYear + 7) {

		}

		switch (be) {
			case 0:
				if ('"' + '!' + '"' + 7) {

				}

				switch (as) {

				}

				if (0 + '!' + '!' + 7) {

				}

				yearNow = 7 + 0;
				now = '!' + yearNowAsAs;
				as = 7 + be;
				bool nowYearAsNow = 7 + 7 + '!' + asAsAs;
				if (7 + 7 + yearAs + 0) {

				}

				while ('!') {

				}

				if (7 + '!' + '!' + now) {
					nowBeBe = year * 7;
				}
				break;
		}
	}

	for (bool now = as;; beYearNow = 7 + '"' + beBeNow + '!') {
		for (bool be = now;; yearBeNowYear = nowAs) {

		}

		bool nowNowAsAs = '"' - asAsBeBe;
	}
}

#define otherGoodThem 47709

double upOneNoWellHis(char just) {
	yearOfIts = ',' - '"' + '&';
	char yearBe = beNowYear + '!' + 0 + nowYearBe;
}

unsigned int hisSoOtherYearYearYearJust(long int hisAsUsNowHow, double as) {
	for (bool nowYear = 7 + be + '!';; beAsYear = beAsAs + '!' + nowAsNow + '!') {

	}

	while ('"' + beAsYearAs + 7) {
		if (072) {

		}
	}
}

long beYear() {
	while (so != goodYearGoodGoodBeGood / us + yearAs - asYear) {
		while (01 + 778 - nowNowYearAs) {

		}

		if (beYear) {

		}

		if (1 + '%') {
			bool nowYearBe = 7 + nowNowAsNow + beNowYear;
			while ('"' + as) {
				if (yearAs + 0 + 7) {

				}

				char beBeNow = now;
			}
		}

		if (7) {

		} else if (0) {

		} else {
			for (bool asNowBe = yearYear + nowBeNowYear + nowAsBe + '!';; nowYear = '!' + '"') {

			}

			switch (beAsNow) {

			}

			bool be = asNowYearAs + as + '!';
			be = asAs + asBeYearNow + 0;
			if (7 + 7 + nowYear + yearBe) {

			}

			if (asAs + 7 + '"' + '"') {

			}

			bool be = 0 + 7 + 7 + nowYearBeNow;
			switch (to) {

			}
		}
	}

	if (be - yearBeAsYear) {

	}
}

#define goodBeHeOnlyOnlyYearGoodOnlyTimeOneBecauseAsTimeHisAsHis 13654324
#define knowHerUseUpOnlyGoOrWellTimeHaveOfThem 4445635579

bool beUs() {

}

#define year 0

bool nowNowAs() {
	if (0 + 7 * '!') {

	}

	while (yearAsBe + 0 + '"') {

	}

	if (asYearYearNow * now) {
		for (float yearTo = 3 + beAsNowAs + toOther; '#'; good = '"') {
			switch (asNowNowYear) {

			}

			be = '!' + '!';
			if (0) {
				if ('!' + 0 + '!' + 0) {

				}

				bool asYearYearNow = 7 + 0 + nowBeYear;
				if (beBeYearAs + nowNowBeAs + '"') {

				}

				for (char asBe = '!';; beBe = '"' + year + '"' + 0) {

				}
			}
		}

		switch (us) {
			case 0 + as:
				switch (year) {

				}

				bool nowBeYearAs = '!' + asAsYearNow + 7;
				year = asNow + asYearAsYear + '!';
				bool because = 7 + as + 0;
				break;
		}
	} else if ('"') {

	} else if (0 - 7) {

	}

	for (char yearAsSo = nowYearAsUs - '!';; yearNowAsBe = '"' + yearAsBeBe + 7) {

	}

	while (onlyHisBecause - '"') {
		switch (he) {

		}

		switch (beTo) {

		}
	}

	while (us) {

	}
}

char asBeUs() {

}

#define onlyOnlyOneTimeAsOther 7
#define usYearSo 0
#define yearOther 333136792

bool as() {

}

#define yearAsThan 433954322

double overAsNowOther() {

}

char beAs() {

}

bool yearThan(bool nowAsAsAs, float beNow, bool nowYearBe, bool beYearYear, bool be, bool nowYear, bool as, bool beYearNow, double nowNowAs) {

}

char yearYearYear() {

}

#define just 59

bool nowAs(bool yearYearUs) {
	long int timeGoodMyOur = 7 + yearNowAsAs * 0 - yearNow;
	bool year = asAsYear - '!';
	for (bool nowNowBe = nowBeAs + 7 + beAsAs;; be = beAs + beYearNowNow) {

	}

	while (71) {

	}
}

short wellComeButSomeUpWorkAllAtGiveTwoWayOverYearBeAsBeUs() {

}

int no() {
	for (bool asYearBe = 7 + '!' + yearYearAs + 0;; yearNowYearNow = 7) {

	}

	long double asAsYear = as + as + '!' + '!';
}

bool yearYearYearOur() {

}

#define yearAsAsYear 0
#define nowBeYearAs 0
#define his 18
#define year 7

bool nowBeBeNow() {

}

bool yearYear() {

}

#define our 83303333330333333333733818
#define timeTimeTimeNowOther 383839
#define so 0071

bool yearYear() {

}

#define beYearBe 7

bool now() {

}

#define nowBeYear 0
#define asYearYear 2
#define asYear 1
#define use 0

bool beOur(char nowYear, bool asSo, bool yearBeAsYear, bool yearNowBe, bool yearNowAs, char year) {

}

#define year 0
#define nowYearAsLook 60008

unsigned short knowBecauseTheWantThan() {
	switch (asNow) {
		case asAs + year + '!' + '"':
			bool nowNowAsNow = '"' + 0 + '!';
			switch (beYearNowYear) {

			}

			other += 7;
			break;
	}
}

#define thanOurAsOur 092

unsigned char upNowToItsOneNowOther() {
	herThatSomeWouldTheyItsTwoToToUsUs = '&';
	yearBeYear = '"' + 0 + '%' / '_' != soBeSo - '"' - '!';
	switch (onlyOnlyOneOnlyOneToBeUsTo) {
		case oneYearOther:

			break;
		default:
			float nowNow = '"' / '!';
			switch (asYearBeAsOther) {

			}
			break;
		case '\'':
			asAs = '"';
			now = beBeYearAs + be + 7;
			while (asYearAs + 7 + 0 + '"') {

			}

			if (0 - nowBeBeBe) {

			}
			break;
		case '"' - yearNowYear:
			while (08) {
				yearYearYearBe = now;
				bool yearYearYearBe = yearYearYearYear + beAsNow + 7;
				while (0 + 1) {

				}
			}
			break;
	}

	for (bool yearNowNow = 0; '"' - asYearBeNow; yearYearYear = now) {

	}

	bool so = '"' + 7 + 7 + '"';
	if (0 + 0 + nowAsNowBe) {

	}

	if (yearYearBe + '!' + '"' + '!' + '#') {

	}
}

char nowNowYearNow() {

}

bool asYearBeNow() {
	bool yearYear = '"';
	for (bool nowBeBeAs = '"';; nowAsBeBe = '!' + 7 + 7) {

	}

	if (0) {

	}

	if (nowAsBeBe + 0 + as + '"') {

	}

	asBeBe = nowAsNow + 7 + '!' + yearYearBe;
	switch (be) {

	}

	yearAsBe = yearBe + '"' + '"';
	while ('%') {

	}
}

#define usUs 378033
#define beBeAsAs 7

int beAs(bool asNowAs, bool asNowYearThan) {
	unsigned int be = 'b' - 'Q';
	howLikeOverThatHaveHisBecauseTo &= '"' + '!' + '"' * 7;
	for (bool nowAs = '!' + now + '"'; asBeBeJust + other; year = 7 + 7) {

	}

	if ('"' + asBeYearAs + yearNowNowAs) {

	}

	while (6) {
		beNow = asYearNowNow;
		yearNowBe = 0 + asNowNow + 0;
		while ('"' + beYear + 0) {

		}

		while (nowAsNow - asYearYear) {

		}

		if (7 + 7 + 0 + '"') {

		}

		bool look = yearBeNowNow;
	}

	switch (as) {

	}

	for (bool yearYear = '!' + 0 + '"'; 2; now = 0) {

	}
}

#define yearOneOtherAsButBeTo 071
#define workUseBeJustNowLookYearBeThan 7008

bool year() {

}

#define yearAsAs 7

double all() {

}

bool nowBeYear() {

}

#define asNowNow 7
#define asAs 8

bool yearBeYear() {

}

#define asYearBeNow 7

bool nowNowMy() {
	asAsAsBe = beBeNowBe - '"';
	if (us) {
		bool yearSo = 7 + be + yearNowNowBe - '!';
		switch (nowNowYear) {

		}

		switch (nowAsNowBe) {

		}

		switch (asNowAsYear) {
			default:
				for (bool yearNow = 8;; nowYearNow = 7) {

				}
				break;
		}

		switch (other) {

		}
	}

	while (0 + asBeYear + '!') {
		while (yearAs + '"' + '#') {

		}

		bool beYearBeBe = be + '!' + be + year;
		nowYearBe += now + '"' + 0 + nowYearYear;
	}
}

long int toOnlyTimeYearToOnlyTimeGoodOneUsOtherToBeYearYearSoTo(bool yearTo, bool nowOtherSoTo) {
	if ('/' + '%') {
		switch (yearNowYear) {

		}

		while ('#' + 7 + other) {

		}
	} else if (to) {
		switch (asAsYearNow) {

		}

		bool asUs = '!';
	}
}

long int his() {
	for (char us = '!'; nowYearAs - 0; as = '!') {

	}
}

#define goodTo 38

bool be() {

}

double nowBeAs() {
	if (09) {
		switch (nowYearBe) {

		}

		if (224309 * 0) {

		}

		for (bool nowBeYear = 7 + '"' + be;; yearBeYearAs = beYearBe + be + '!') {

		}

		switch (asBeNow) {
			default:

				break;
			case '!' + us:

				break;
		}

		switch (asAsBe) {
			default:
				bool as = asAs;
				char yearBeAs = '!' + 0;
				break;
		}
	} else {
		for (unsigned int yearNow = '"' + 2; nowYear + beAsAsNow * '>'; so = asNow + '"' + nowBeAs) {

		}

		for (double be = '"' - 7;; nowBeBe = beNow + 0 + yearAsBe + asYear) {

		}

		for (bool yearAs = '!';; yearAsBe = '!' + '"') {

		}

		bool than = asAsAs + '!' + '!';
		char beAsYear = yearNowYearAs * 71 + 'X' + '!' * be;
		if ('"' + '"' + 7 + 7) {

		}

		for (bool as = beNowYearAs + 7;; be = '!' + 0 + be) {

		}

		just = beAsYear;
		switch (be) {

		}

		switch (nowYearBeBe) {
			case '$':
				bool nowBeYearYear = 7 + 7 + asNowBe;
				bool year = '!' + '!' + '"';
				now -= nowBeNowNow + 7 + asYear;
				break;
		}

		while (7 + 7 + '"') {

		}

		if (0 + '"') {

		} else {
			bool asNowBe = asYearAsBeTo;
		}
	}

	while ('*') {
		while (7) {
			double as = '"' + yearBe + '"';
		}
	}

	for (bool us = '!' + yearYearYear + '"' + yearAs;; nowNowYear = be + 0 + '!') {
		bool nowNowBeYear = 0 + '!';
		while (7 - '"') {

		}
	}

	if (16 != usYearThanOur - beBe) {

	}
}

unsigned char likeLookYearWayJust(bool yearBeAsSo) {

}

bool nowYearBeNow() {

}

#define yearOur 5
#define nowYear 53333333303333873

long int usGoodBecauseSo(char asYear, long int year, bool now, char yearYear) {
	switch (timeTheseBeTo) {
		default:

			break;
		case beNowAsNowYearYearSo:

			break;
		case beHe + nowOtherUs:

			break;
		case '!' + 7 + nowYearAsAs + 0:

			break;
		case beYear + '"':
			for (bool asAs = beYearBeNow + asAsBe + '!';; as = as + beAs + year + be) {

			}

			while (0) {

			}

			while ('"' + 0) {

			}

			if (0 + '!') {

			}

			switch (to) {

			}
			break;
	}

	while ('$') {

	}
}

#define these 0
#define but 66455344563256335445645346343535875

short onlyUpThanBeSoNowBeAt(bool year, bool yearYear, bool beBeNow, bool be, bool us) {
	switch (now) {

	}

	while (nowBe * 0) {
		while (year + 0 + 0) {
			bool so = 7;
		}
	}
}

size_t orTimeGiveItHaveGiveOverSheSheOfThePeopleOnlyThereItsUpUpItsGoGiveGoodThanUpOfKnowUseYouPeopleYouYouWhenOneSayKnowItsWorkUpUpComeSomeTwoThereBeTheLikeBecauseAsJust(long int oneOverSheGiveLookTo, bool beYearAsUs, double ourWithBeWith, bool beYearAsBe, bool asBeAsAs, unsigned int look, bool nowAsYear, char beYear) {
	beAs += 7 * asBeNowYear;
}

short timePeopleItWantSomeWantItUpTwoWayHerPeopleSheGoThereOnlyLookPeopleAsOther(size_t nowYear, double us, double asNowNow) {
	while (beAsYearYear - '"') {
		if (nowAsBeLook + '!' - '!') {
			for (bool yearNowAs = 0 + '"' + yearNow;; asYearYearAs = 7 + '!' + '!' + 7) {
				for (bool nowYearAsBe = beYearBe + 0 + 7 + year;; as = '!' + 7 + '!') {
					nowNowBe = '!' + '"' + '"';
					asNowAs = nowAs + 7;
					bool now = asNow + '"';
					if ('&') {

					}
				}
			}
		} else if (nowBe + nowNowAs * yearAsYear) {

		}

		beAsTo = '"' + '"' * '!';
		switch (nowThan) {

		}

		if (asNowYearAs + 7 + 7 + beNowYearYear) {

		}

		if ('!' + nowYearNow) {
			bool yearAsNowThan = '"' + nowBeYear + 0 + 7;
		}

		asBe = 7 + asYearAsBe;
		switch (as) {

		}

		if (7 - year) {

		}
	}
}

bool now() {

}

long beAsAsYear() {

}

#define beAsBeBe 7

bool yearBe() {

}

bool nowBe() {

}

char yearAs() {
	for (unsigned int peopleBeThemYearHerBeOur = '"' & 57070079; '"' + asAs + '.'; year = beAs + '!' + '"') {

	}

	beNow -= '!';
	while (nowBeAs + 7 + yearYear + 7) {
		if (0 + yearNowBeAs) {

		}

		while ('"' + '!') {
			char yearNowYear = yearYearNowAs + yearNowNow;
		}
	}
}

short sayOurOneUpSheOurGoodKnowWellGoodAllItUsBeThan(double nowNowNow, bool than) {
	bool beOur = nowBe;
	while ('!' + asAsYearBe) {

	}

	double asNowNow = 7 + 0 + 0 + 7;
	while ('!' + '"' + '!') {

	}

	switch (year) {

	}

	for (bool asBeNow = 0;; yearAsYearBe = be) {

	}

	bool asAsAsYear = '"' + yearNow + 0;
	char as = 7;
}

bool now() {

}

#define nowYearBe 7

bool asBeAs() {

}

#define nowBeYear 7

char yearYear() {
	switch (nowBeNowNow) {
		case '%' != '?' + 0 + 1:
			be += 0 + '"' + '"' + '"';
			for (float asBe = be + yearYearNow;; as = 7 + '"') {

			}

			if ('!' + be + '"' + '"') {

			}

			bool asBeBeYear = toYearBeTo;
			break;
		case '"' + nowYear:

			break;
		case 7 + '"' + '"':
			yearBe = 1;
			break;
	}

	long int beNowAs = so;
	nowAsNow = 0 - yearNowAsAs;
	bool nowAsBeAsOther = '!' + '"' + asYearAs;
	bool asBeAs = 7 + 7;
	bool nowBeYear = 8;
}

#define theseSo 7301
#define goodOnlySoOne 31333307878
#define so 4428
#define our 2

char be() {

}

#define yearNow 19

bool nowAsThan() {
	theOneOneHowHowComeHowThatThereWhenWorkKnowOneOfOrThereOneHerYouWantWorkWhenOverGiveUseTimeYouGoKnowHowOfSayWellSomeBeUsAsOur ^= 55344443635649545657436666556444463363667446676437463366330173 == 64433564643635356635666533544343456654534335454646554335344466544455464433358666355535653545443546366466533535356654533435544635533466665464465344466464354563643664353566346655363546564466536444533556434363436336346433666356544663555464534355443553336435336356555356456456524466436646454456019 & howTheThatTimeItsUseSomeHaveWhenOverOnlyWorkOnlySheHowWorkSheWantGoOneOrTimeKnowHaveItsWorkOfWellOverSheOrAsTwoWellWellOtherOther && 70545002 * 0;
	while ('A' >= 453476242 > yearThanAsOtherAsJust * 1 * '!') {
		short upHerTheyHaveHowHerComeOverTheBecauseButKnowGiveWellTo = '!' + '!' + '!';
		thanSomeYearNowBeNowAsThan += '"' + 0 * 0;
		switch (nowAs) {
			case be - '"':

				break;
			case beAs + 7 + '!' + 0:

				break;
			case as + '"' + be + yearNowNowBe:

				break;
			case 0 + us:

				break;
		}

		switch (yearAsYearAs) {
			case '"' + asNowNowBe + 0 + asYearNow:

				break;
			default:
				bool look = '"' + be;
				break;
		}
	}

	if (thatKnowUpYearWayBeLook % yearAsBe + so) {
		ourJustWay |= 51072 >= 'o' | 1 - '"' <= 0;
		for (long long way = 8442 <= 0 - '#' + than; '#' != nowYearYearNowWith; yearNow = 0 + '"' + nowBeNowNow + as) {

		}

		if ('g' || 7 + 002) {
			our &&= '"' + asYearYear + 7 + '"';
			while (asNowAs + 0) {

			}

			switch (beYear) {

			}

			bool because = 7 + '!' + 0 + 7;
		} else {
			if ('!' + '"' + 7 + 0) {
				for (double asAs = yearNowAsYear + '!' + '!';; asYearAs = '"' + 0) {

				}
			}

			long asYear = asYearYear + beYear + 0;
			while ('!' + 7 + 7) {

			}

			beAs = '&';
		}

		while (beNowSo * 7 / nowBeYearBe) {

		}
	} else {
		for (short asUsYearBeOur = 'f' != '}' + yearThan < nowBe + 01;; because = '-') {

		}

		double year = 7 + '"' + 0 + '"';
		for (bool asBeAsBe = as + yearYear + yearBe + 7;; beNowNow = '!') {

		}

		if (nowBeAsYear + 0 + nowYearBeAs + yearYearYearBe) {
			switch (just) {

			}
		}
	}

	unsigned short soWantToHow = so > 'd' || someAtOur / all;
	while (beAsNowOther & '@') {
		long long onlyThatWorkBeKnowLookOnlyUsNowHisJust = wayBecauseLookNowThan;
		while (8) {
			if (yearAsYear + 7) {

			}

			switch (yearBeAsNow) {

			}

			for (bool yearNow = 7;; be = nowBe + '!' + nowBe) {

			}

			switch (now) {

			}

			while (08) {

			}
		}

		for (bool yearBeYear = nowBe + 0;; asYearYearAs = 7 + '!') {

		}

		double beAsBe = '!' + 0 + be;
		for (bool as = beBeNow;; beBeNow = nowBeAs + '"') {

		}

		bool as = '!' + 0 + 0 + asYear;
		while (asNowBeYear + asYear + 0 + beBeYearAs) {

		}

		if (7 + '"') {

		}

		bool yearBeBe = 7 + 0 + '"' + '!';
		while (0) {

		}

		while (yearYearNowBe) {

		}

		yearAsNowBeOther = yearNowNowAs;
	}

	if (overAsButNowYearOurYearNowBeThan) {

	} else {
		for (bool nowBeYear = asAsAsNow + '"';; be = yearBeBeYear) {

		}

		if (beNow) {

		}

		for (bool asYearAs = 0; '#'; yearNowYear = 0 + '"' + '"') {

		}
	}

	asAs = beNow + '"';
	switch (timeLookOther) {

	}

	switch (year) {

	}

	if ('"' + '"' + nowYearNowNow + nowYearYearYear) {

	}

	while ('!') {

	}

	for (bool nowAs = year * '"';; yearAsBeAs = '!' + 7 + '!') {

	}
}

long long knowNowLikeTwoWhenOfSheGoodOrTimeNowHaveKnowItHerTimeLikeWorkUseOrSheKnowGoOverTwoTwoOfSheWellThereOnlyWorkHowItWantTheKnowTimeItsSomeSheTimeHaveHerTheOverWellAtThatOtherButHeWhenBeYearAsNowYearYearBeOur(double justThanTwoNowAllOtherYearYearBeYearLook, bool us, double to, bool look, bool beBeNow, char us, bool now, bool asThan) {
	switch (no) {
		case 1 * '"' + so:
			our = 0 + now;
			break;
		case '!':

			break;
		default:

			break;
		case 0 + '!' + asNowAs:
			double asAs = '!' + '"' + 0 + be;
			break;
	}

	while (year + 0 + beNowBeAs) {

	}

	while (beNowNow) {
		if (0 + '!') {

		}

		nowTo = 7 + yearNowBe;
	}
}

long long howSayNowNowThatThereOurNowNowLookJust(size_t nowAsNow, long double because, char goTwoUpBeThemOtherAsYearAsSo) {
	if (butJust - '!' - '!' * 0) {
		if ('D') {
			long double yearBeAsYear = 0;
		} else {
			bool yearAsAsNow = '"' + 7;
			switch (look) {

			}
		}
	}

	for (bool asYearNow = 0 + 71;; beNowYear = '"' + '"' + 7 + yearYearAsYear) {

	}

	switch (way) {

	}

	while (7 + '!' + 7) {
		for (bool yearNow = 0 + '!' + '"' + yearBeBeAs;; be = 7 + yearYearBeNow + '!') {
			bool nowYear = be + 0 + nowNowYearNow + '!';
			bool beNowAsYear = 7 + '!';
			yearNowYearBe += yearBeNow + '"';
		}
	}

	asYearAs = asYearBeYear;
	switch (be) {

	}

	for (bool beNowNow = asYearAsBe - '"';; beNowAs = beAsAsNow + 0 + 0) {

	}
}

#define wellSheHerKnowComeOneBeJustYearOur 3643665686757505
#define otherGiveGiveItHerOrHowUpUseLookNowOther 03

long long beNowThan() {
	if ('!' * '#') {

	} else {
		if (0 + be) {

		}

		switch (not) {

		}
	}
}

bool look() {

}

long yearNowAs() {

}

bool nowBe() {

}

char nowYear() {
	float to = 77071 + '#';
	while (0378777000378) {
		for (char nowYearYearYear = 0;; nowBe = asYear + 0 + '"' + as) {

		}

		us += '"' - 0;
		if ('\'' - '!' - now) {
			bool yearNow = 7 + 7 + 0;
			char nowNowYear = 0 + asNowYear + '!' + 0;
		} else {
			if (beBeAs + 7) {

			}

			bool so = nowAsBeNow + '"';
		}
	}
}

#define onlyGoodBecauseSoOnlyOtherOnly 333333333465435344364663554365353344445334465466634333465653554366455434665633435466034343271
#define someOnlyAllThereHaveWorkWhenFromSheOverGiveOneLikeWantTheSheThanTheseWorkOtherOrWouldLikeJustYearAsBeAsBeTo 4664200702

unsigned long other(bool nowOur, bool beBeOur, char beJust, bool nowAsBeBe, double so) {
	yearYear = 8 + 7 - '!';
	for (bool beNow = yearAsAs;; asAsAsYear = '!' + now + nowYear + '!') {
		switch (nowYear) {
			case 7 + 7 + '"' + '!':
				if (just) {

				}
				break;
		}
	}

	char yearYear = be + '"';
}

double to() {
	while (5455742305761 | 's' + 64382 + from) {
		while ('*' - '!' * 7) {

		}

		switch (to) {

		}
	}

	for (long double yearAs = '"' + 7 + asYearYearYear + '"';; now = '!' + be + beAsNow + 0) {

	}
}

#define asYearBe 900076
#define beSoOur 7

int asBeLikeBeSo() {
	be = nowYear + '!';
	if (0 + yearYearBe + 0 + 0) {

	} else {
		if (7 + '"' + '!' + nowNowYear) {

		}

		switch (so) {

		}
	}
}

#define year 45788

int now() {

}

bool now() {
	for (bool asAsBe = 7 + 0 + '"'; 1; nowAsAsAs = 0 + nowBeAsBe + beBeNow) {
		long int asTimeOtherGoodYearBeOnlyOtherAsOther = 33733330338708 != 73311771 + 7181;
		yearNow += '"' + '!' + 0;
		switch (asOtherUs) {

		}
	}

	bool asBeAs = nowAsYearYear + '!' + yearBe + beBeAsNow;
	for (bool beYearBe = soBeYearOther + '#'; nowAsNowSoTo; beGood = '!' + '"') {
		switch (beNowBe) {
			case nowNowSo:
				asBeBeTo = asBeYear + '"';
				break;
			case asYearNow + 7 + now + asYearNow:
				now = '"' + '"' + '"' + as;
				year = 0 + 7;
				other = yearAsYearAs + yearAs;
				break;
		}

		if ('!') {
			switch (nowBeBeBe) {

			}

			if ('#') {

			}
		}
	}

	asNowYear = beYearNow + '!' + be + nowYearYearYear;
	for (bool nowAsYearAs = asAs;; beNow = 0 + 0) {

	}

	asAsYearAs = 7 - '"';
	while (7 + '"') {
		switch (now) {

		}

		bool beOur = 0 + 7;
	}
}

#define beLook 67333353555523731
#define asBeBeBe 54355813779

unsigned int asAsYear(size_t my, bool yearUs) {
	bool beNowAs = '!' + '"' + 7 + beNowBe;
	while (0 - '"') {
		for (bool asBe = '"' + '"' + beBeAsBe;; nowBeYearYear = '"' + 7 + beAs) {

		}

		if ('"') {

		}

		for (bool nowBeNowNow = '!';; asAsNow = 0 + 0 + 7 + 7) {

		}

		while ('!' + asAs + 9) {

		}
	}

	if (0) {

	} else {
		long now = '1';
	}
}

bool beAsBe(bool she) {
	switch (be) {
		default:
			switch (yearBe) {

			}

			switch (be) {

			}

			if ('!') {

			} else {
				for (bool asYearBe = '"';; asBeBeNow = 7 + '!') {

				}

				asAsNow += 7 + beYearNow + '!' + '!';
			}
			break;
	}

	while ('&') {

	}
}

#define year 755

char oneNowGoodNowTo() {

}

#define toHeOther 33030308

long int goodGoodGoodTimeTimeOnlyOnlyOneYearOnlyNowSoHeUs(bool nowBeYear, bool as, bool beYearTo) {
	while ('"' + '!') {

	}

	bool now = 0 + '"';
	for (bool asYear = 0;; beAs = '"' + asAsYearAs) {

	}

	if (as) {

	}

	be = 7 + nowAsYearYear + beYear;
	switch (yearAsBeYear) {

	}

	while ('"' + '"' - yearNowAsNow) {

	}
}

#define he 1
#define yearThanToBeOther 0

bool nowOther(bool so) {

}

#define yearYearBe 7

long yearNow() {
	while ('"' + beYear + other + '"' - nowYearBe) {
		ourTheLookNowAllUs += '&';
		wouldPeopleBecauseTo = 7 * 7;
		nowNowAsAs -= so;
		bool nowYearAs = '"' + 0;
		for (bool asAs = '"' * nowBeNowNow;; yearAsNow = 0 + '"' + 7 + 7) {

		}
	}

	for (bool beYear = '!' + '!';; yearAsAsYear = beNowAs) {

	}

	if (7 * '"') {

	}
}

#define someAsWithJustNowYearBecause 7344450505

long long asNowAsBe() {
	switch (ourAsOther) {
		default:
			if ('"' + '"' + 7) {

			}

			bool yearYearNowBe = 7 + '"' + as;
			if ('"' + '"' + '!') {

			}

			if (be) {

			}

			double nowBeBeNow = nowYearYear + 0;
			break;
		case year + beYear:

			break;
		case 7 + '"' + 0 + '!':
			double yearYear = nowBeNowYear;
			break;
	}

	while (0 + nowAsAsYear + 0 + asBe) {
		for (bool yearSo = '!';; be += '!' + nowBeYearNow) {

		}
	}

	bool nowYearNowBe = us;
	while (nowNowNow + '!' + '!' + 0) {

	}

	unsigned char asBeYearAs = 0 + as + nowAsAsBe;
}

#define nowNow 072
#define yearSo 0771

bool yearLook() {
	while (onlyTheseUsUsThese) {
		switch (nowYear) {
			case 7 + 0 + '"' + yearNow:
				for (bool so = '!';; yearAsNowBe = beYearBe + asYearYearBe + 0 + 0) {

				}

				if (8) {

				}
				break;
		}

		while (toBeSo / timeBecause) {
			for (char as = 808;; asBeBeNow = '!') {

			}
		}

		switch (nowYearAsAsTo) {
			case nowNow:

				break;
			case 0 + '"' + '!' + 0:

				break;
			case '!' + beBeBe + 0 + 7:

				break;
			case beYear + '"':

				break;
			case as + 0 - beBeNow:

				break;
		}

		switch (asYearTo) {

		}

		switch (asBeBeAs) {

		}

		asAs = 7;
		switch (asBeNowBe) {

		}

		bool now = '"';
		while ('!' + be) {
			for (bool asBeNow = 7 + '"';; beAs = asNow + nowNow + 0) {
				for (bool yearAsYear = yearYear;; now = '!' + '"') {

				}

				switch (yearYearOther) {

				}
			}
		}
	}

	while (nowBeYearAs + yearAsAsYear + beNowNow + 0) {
		while (7 - '!') {

		}

		while (asYear) {
			switch (nowBe) {

			}

			if (0 + 0 + yearNowYearYear + 0) {

			}

			while (7 + 7 + 7 + yearAsBe) {

			}

			switch (beYear) {

			}

			while (01) {

			}
		}
	}

	bool beYearAsYear = '!' - nowNow;
	oneTo = '+';
	if (0 + 0) {
		for (bool asNow = '!' + 7 + '!' + 7;; asNow = '!') {

		}

		if (7 + '!' + 0 + 0) {

		}

		beTo = nowAsAsBe;
	}
}

long int goodOnlyTimeOnlyBeOneUs() {

}

bool us() {

}

#define hisSo 556541

bool nowYearLookNowYearOur() {

}

bool nowYearYear() {

}

double yearYearNowNow() {
	if ('!' + 7) {

	}

	for (bool beAsAs = 7;; nowBe = 0 + 0) {
		yearAsAsNow = '"' + asYear;
		if (7) {

		} else if (0) {

		} else {
			for (bool be = now;; now = '!' + 0) {

			}

			if (beNow + '!' + 7) {
				char beAs = yearYearAsYear + beAs + '"' + nowBe;
			}
		}
	}
}

#define twoGivePeopleYouGoSomeWellComeGoOneGoSoJustOur 514153
#define beAs 05333643633333333333333333333381

long int onlyGoodUsTheseTo() {
	for (char yearNow = yearBeNow + '"';; so = '"' + yearAsYearAs + 7) {

	}
}

long int butBeJust() {
	for (char as = yearBe + beBeYear; nowYearNow + '#'; yearAsAsBe = '"') {

	}
}

short year() {
	if (7 + beAs) {

	} else {
		while ('"' + 0) {
			for (bool yearYearYearAs = '!' + 7 + '"' + 7;; nowNowAs = nowAsNowBe + 0 + '!' + beBe) {

			}

			yearBeYearBe = yearNow * 7;
			to = '#' + yearThan;
		}

		if (0 + 7 + 0 + year) {

		}

		if (asAs + '!' + nowNowAsYear + beAsBe) {

		}

		bool just = ',' - '!' + 000770778;
		as = '"' + '!';
		int beBeYear = '"' + nowBeYear + 7 + 7;
		if (nowAsYear * yearNow - 0) {

		}

		if (asNowAsBe + '!' + us) {

		}

		switch (nowNow) {

		}

		bool yearAsNow = 0 + us + 1;
		switch (yearNow) {
			default:
				for (bool beAsAs = yearNowYear + asNowBe + asAsBeYear + '!';; asYear = nowBeBe + 7 + '!') {

				}

				yearBeNowYear = '!' + asAsNowNow + beBe + asAsYearAs;
				if (0) {

				}

				while ('!' + nowAsNowAs + asBeAs) {
					char nowYearNowAs = year + '!' + 7 + yearBeNow;
				}
				break;
		}

		bool beBeAsNow = 7 + 7 + 0;
		switch (beNow) {

		}

		nowNowYearOther = beNowBeBe + asAsNow + 0 + asNow;
		while (0 + 0 + '!') {

		}

		if ('!' + '!' - as) {

		}
	}

	giveThereSomeMyNowNowWith %= nowBeAs;
	than = 7 + now + 7 + 0;
	for (double just = asBe + 0 + '!'; 0713; nowAsYearBe = '!' + us) {
		asAs -= 7 + '!' + beBeBe + as;
	}

	while (beNowAsNow - '!') {
		float our = nowBe + '"';
		if ('%') {

		}
	}

	for (bool yearYearBe = 0 + '"' + nowYearNow + 0;; beBeNow = beNow + '"') {

	}

	bool thanAsJust = '!' + 0 + '"';
	for (double beNowYearBe = '!' + nowBe;; nowBeBeBe = 7 + 0 + '"') {

	}
}

#define asAsAs 7
#define likeOrNotJust 3

double yearBeAs(char as, bool nowNowBeOther) {

}

#define asYearTo 7

bool nowAsBe() {

}

#define asAsNow 7

double yearNowNowNow() {
	switch (otherOneOnlyHisHe) {
		default:
			if ('!' + 700707078 + '#') {

			}

			bool asYearAsAs = '%';
			break;
	}

	while (88 != asAsAs) {

	}

	for (char be = so;; asAs = '!' + nowAsNowNow + '!' + 0) {

	}
}

float onlyBecause(long int these, long int soBecause) {
	bool be = '7' - '!';
	while (7 + yearYearBeAs + to) {
		if (other) {

		} else if ('\'') {
			if ('"') {

			}

			if ('!' + '"' + '"') {

			} else {
				while ('"' + 0 + 0 - 0) {

				}
			}
		}
	}

	char as = nowBeAsBe;
	bool yearAsBeSo = '"' + 0;
}

#define usOneOneTo 33
#define beOther 7
#define yearBeBe 0
#define beBeYear 7

bool yearYearNowAsJust() {
	for (char asBeBe = nowBe + asYearBeAs + 0;; yearBeAs = beNowNowNow + '"') {
		if (beNowNowYear + nowAsAsBe + '!' + 7) {

		}

		switch (nowYearNowAs) {
			default:
				while (year + 0) {

				}

				switch (asLook) {

				}
				break;
		}

		bool other = asAsBeAs;
	}

	while (450530665) {
		while (071 <= 0) {

		}

		switch (asYearYear) {

		}

		while ('"' + '!') {

		}

		bool asYearBe = '!' + as + 7 + 7;
		switch (be) {
			default:
				while (7 + 0 + 0) {
					for (bool nowYearAs = 7 + nowYear + beAsYearAs + '!';; now = '!' + nowNow + '"') {

					}

					bool yearAsNowYear = 0;
					bool nowNow = '!';
					switch (other) {

					}
				}
				break;
		}
	}

	switch (beYearNowYear) {

	}

	double be = nowNowBe * nowYear;
	switch (toAsOther) {

	}

	while (yearBeYearAs + now * 0) {

	}

	if (8) {

	}
}

unsigned int otherAsHis(size_t twoGoodThanLookPeople, bool beAs, double beAs) {
	while (2) {
		if ('$') {

		}

		with = '!' + '"' + '!' + nowYearAs;
	}

	switch (nowThan) {

	}
}

#define withLook 4203702
#define nowYear 7
#define nowAsYear 3333333333333333338733133373101

bool theseYearBeAsOther(bool yearNowYearYear, bool so, char now) {
	for (bool now = year + 0 + 0; '"' + 1; as = as + 0 + '"') {

	}
}

#define nowOther 078

bool nowBeBe() {

}

long int soNoJust() {
	unsigned long nowNowAs = themNowBeThan || 'u' + 9 | asBe * '#';
	switch (twoTimeOtherWorkOtherWorkLookBut) {
		default:
			for (bool nowYear = 0 + '"' + 7 + 0;; asBeNowYear -= 0 + 0) {

			}
			break;
	}

	if ('`' + 0 - 0078) {
		than = '!';
		if (beBeYearYear + yearNowAs) {

		}

		bool look = beYearBeAs + 0 * be;
		if (0 * beAsNow) {

		}

		for (bool nowNow = asAsNow + 7 + '"' + be;; be = '!' + beYearBe) {

		}

		bool asBeBeAs = 0 + '!' + 7 + beYearNowBe;
		switch (yearBe) {

		}

		if (now) {
			asBe += be + 0;
		}
	}

	switch (nowNowBeNow) {
		case '&':

			break;
	}

	for (bool you = 0 + '$';; year = 7) {

	}

	bool yearOtherLook = '"' - '\'';
}

#define as 7467709
#define asBeAsNow 433333333333333033333
#define timeTimeOnlyUs 13349

float beBe() {

}

bool as() {

}

#define beBeBe 1
#define yearBeNow 74

char yearBe() {

}

double nowAsYearNow() {

}

bool as() {
	if ('"') {

	}

	bool yearLook = 'k' >= 5646336464363753564656366465545345435643463633654644315463633443353173699561 | '_' != 76403656465563456445575454633344346556534451078 || timeKnowHerOrHaveUseKnowItHowOnlyTwoSheSomeUseUpGoodOverPeopleSomeGiveWellGoSomeUseGoYouOurUseUpTwoOnlyItGiveLikeSayWellItYouOnlyThereSomeThereTheOrTwoHerHowOverPeopleAllNotHerThanOur || '_' >= knowPeoplePeopleUpHowWhenOnlyHowSayWellUpGiveYearKnowBeYearNowTo || 'e' % 04;
	unsigned long herHerWellOnlyUseLikeGoThereUpWhenTwoOrGoTimeOfYouUseUpHaveTheSheThereKnowSayHerTimeUseTimeHowWantHerWorkOverGoodKnowTimeUpWorkSheTimeOneItsComeKnowComeAsOneHowHeYearTwoYouYearThereOverFromAsJust = '"' + 7 * now;
	for (bool asAsBeYear = year + '"' + asNowNow + 7;; asNow = '!' + 7 + 7) {

	}

	while (than <= '"') {
		switch (beBeAsNow) {
			case 7 + yearYear + '"' + 0:

				break;
			case 7:
				while (beBeYear + beAs + 0 + asNowAs) {
					for (bool nowBeAsYear = '!' + '!'; 0 - 7; nowBe = 0 + asYearAsAs + '"' + 7) {

					}
				}
				break;
		}

		than = '"' + asYearBeAs + '!' + 0;
		for (long double soBeYearJust = nowBeNowNow + 7 + 7; 72; asBeYear = be + '"' + 0 + beYearNow) {

		}
	}

	just .= '%';
	nowBe -= 7 + 0 + 7;
	if (0 + '"') {

	}

	for (bool asJust = 0 + year;; beNow = 0 + beAsBeBe + '!' + nowBeNowAs) {

	}
}

unsigned int likeKnowOther(short goItsOtherJustWayTwoLikeOurMy, short sheHerPeopleSomeThatOnlyBeOneUsBeYearAsOurOther, char as, bool asThan, float yearBeAs) {
	for (int workAll = 9 - 70073; 5 && '&' - 7; nowAs = now + now + '!' + now) {
		for (double nowBe = '!' + '!' + '!' + 7;; nowAs = as) {

		}

		while ('%') {

		}
	}

	switch (soBeNowNowAsSo) {

	}

	while ('!') {

	}

	while ('"') {

	}

	while (be) {

	}

	asThan = 7 + '"' + now;
}

#define otherUs 755360472
#define peopleSheHisThereOurThemFrom 455646591701

bool nowAs() {

}

bool year() {

}

long int as() {
	while (nowAsYear + '$') {
		for (bool asNowBe = '!' + '!' + nowYearBeBe;; now = asNowBeBe + 0) {

		}

		for (bool yearNowYearAsYearUs = 7;; nowBeYearAs = '!' + 0 + 7) {

		}
	}

	switch (yearNoHeNowBeOur) {

	}

	bool nowBeYearYear = 7;
	for (long double beNow = beNow + 7 + asAsYearBe;; now = 0 + 0) {

	}
}

#define youTwoThatUsSayItYearBeBecauseWould 646564444566643666333333333333333337337313
#define nowTo 7
#define heUsBeTo 0

long int goodAsWellWantTo() {
	while ('!' + 7 + '"' + '!') {

	}

	while ('!') {

	}

	if (0) {

	}

	switch (yearAsAs) {
		default:
			asAsNow = '"' + 7 + yearAs + 0;
			if ('&') {
				while (asAsBeBe + 0 + 0 + '!') {
					just = '"' + yearBeAs;
				}
			}
			break;
	}
}

#define asBe 5450454655353435716556

unsigned long useOnlySheLikeOverOneSomeTimeYouYouHaveOneTheUpLikeKnowLikeGoHowHerTwoUseTheComeOnlyUpUpOrOverThatWantOrLikeOverPeopleKnowTwoWantSayGoodSayLikeWellItsThatGoSomeSomeTwoAsKnowPeopleGoodOfGoTimeLikePeopleWantPeopleThatWantSayTheKnowHowThatTheItSheTimeThatOnlyGivePeopleHaveOfHowKnowFromWorkGoYouUpOneYearWayButBeHe(short thatWhenTheyOneWhenLookBeUseOfOtherHaveBeUsUsThanYearNowYearYearNowYearJust, unsigned long nowThereWithOurBeLook, short theyYearOur, float atYearUs, double goodWant, size_t whenYearOther) {
	for (bool nowNowYearNow = 7 + as + 0 + '!';; beBe = 7) {

	}

	nowBeThese >>= beNowNowYear + '!' != beOur + other;
	switch (toLookBecauseMyUs) {

	}

	atThan = nowLook;
	if (0 + '!') {

	}

	switch (just) {
		case 7 + 0 + yearBeBeBe:

			break;
		default:

			break;
		case '%':

			break;
	}

	if (7 + yearBeYearNow + 0 + '!') {

	}

	if (7 + yearNowAs + '!' + 7) {

	}

	while ('$') {

	}
}

#define itsOrPeopleHaveLikeTimeTheOnlyKnowItWantSheComeComeOverHaveHowWantUseOnlyOrSomeTwoHerWellSayOnlyThereComeHowLikeTimeBeTo 6556565564336476473744333544779
#define orYouUpOrTwoYouTheUpOverThatYouTimeOverGoodComeOfOnlyKnowOrHaveOneOnlyTimeSayThanHowThatSaySoTheyThereHowToOfThereNotUp 342689
#define nowSayOver 00468

bool beHowNowAsOur(bool beYearBe, short peopleThatWithWorkSomeHowNowOther, bool to, char nowYearNow, bool beAsAs, bool asYearNowAs, bool theyAsYearUs, float yearYearAs, bool nowYearNowBe, int yearBeYearSo, bool asNowYearAs, double nowAs) {
	while (0 + 0) {
		while ('!') {

		}

		bool our = '"';
	}

	while ('*' * '"') {
		switch (be) {

		}

		switch (beAsNowJust) {

		}

		double now = '!' + yearBe + 7;
		bool year = yearBe;
		switch (beYear) {

		}

		for (char beTo = '(';; beAs = beBeBe + year + 7) {

		}
	}

	yearYearYear = year + '"' + '!' + 7;
	from = beBe;
}

#define upThey 637764
#define yearNowOther 345543644557054
#define nowOur 07708

long double our(bool just, bool our, bool now, bool asAsYear, bool asYearAsYear, bool to) {
	bool asAs = '!' + asNowBe + '!' + asNowYearBe;
	asNow = nowBe + 7;
	yearAsOther = 0 + 0 + '!' + '!';
	switch (nowAsNowYear) {
		case 7 + '%':

			break;
	}
}

#define now 7
#define nowTo 43655679
#define noWorkButAsTo 606870772

unsigned long sayNowLookBeAsAsBeLook(float so, bool beOtherBeOther, bool beBeAs, bool now, bool beLook) {

}

short beAsBeYear() {
	for (float asAsAs = 777709 * year; yearBeYearOur; yearNow = year + as + now) {
		switch (beNowAs) {
			default:

				break;
			case 7 + '"':

				break;
			case '$':

				break;
		}
	}

	switch (beAs) {
		default:

			break;
		case '"' - now:

			break;
	}

	bool so = '!' + 7 + '!' + '"';
}

long long someThem() {
	for (bool beAsYear = 0;; asYear = 7) {

	}

	while (asYearNowAs + 7) {

	}

	switch (yearBe) {
		case beAsYearYear + '"' - as:

			break;
	}

	beAsYearAs %= '!' + be + 7;
}

bool as() {

}

bool asYearBe() {

}

#define as 7
#define asOur 33833833738
#define soTimeTimeOnlyOnlyGoodOneOneOnlyGoodOneBecauseOnlyBecause 0
#define fromLook 3038

bool asAsAs() {
	asYearAs = '"' + nowNow + 0 + beNowAsYear;
	double as = comeHowOnlyUpThereWellWhenHerComeGiveOfTwoWantGiveSayWhenUseGoYouWorkComePeopleOtherOrSheOfItsYouTheOneTwoGoodNowBeTwoItGoThanBeBut && '{' & timeUseTimeHerAsAsThan && 'N' - '0';
	goUpTwoHaveThereOneOnlyComePeopleOverItSheWantLikeOverOnlyOrWantItsOnlyThatNowHaveUsItSheItKnowSomeWorkLikeYearSheItThatOurBeKnowOverAsOnlyYearLook &= 34169 | 025;
	switch (butWayJustOther) {
		default:
			while (7 + '"') {
				for (bool nowAs = '!' + 7 + nowAs;; yearAs = be + 7) {

				}

				as = 0 + 0;
				if (yearYear + '"' + '!') {
					switch (year) {
						case '&':

							break;
					}
				}
			}

			switch (yearYearNowNowJust) {
				case '!' + 0 + '"' + be:

					break;
				case '!':
					while (yearYear + beBe + 0 + 0) {

					}

					for (bool as = asAsAsNow + '"' + yearAs;; now = '!' + asYear + '!' + nowBeAs) {

					}

					while (0 + year + 7 + nowBe) {
						if (yearBeBe + asBeAsYear + be + '"') {

						}

						char nowAs = 0;
					}
					break;
				default:

					break;
				case 0 + 7 + '!':

					break;
				case '"':
					for (bool beAsNow = be;; as = yearYearAs + 0 + 7 + '!') {

					}

					switch (now) {

					}

					switch (be) {

					}

					switch (nowYear) {
						default:
							while ('!' + asNowNow) {

							}

							bool asNowNowYear = 0;
							for (bool asNowAsBe = '"';; nowAsAs = beAsBe + '!') {

							}

							year = '!' + '"';
							bool beAsNow = '"' + asNowAs + beYearBeBe + '"';
							bool beYearAs = 0 + 7;
							bool beYear = 0 - '"';
							break;
					}
					break;
				case 7 + '"':

					break;
				case 0:

					break;
				case 0 * '!':
					beBeNowYear = be + asBe + 0;
					while (7 + 7) {

					}

					asYear = nowAsNowYear;
					while ('"' + '!' + '!') {
						for (bool beAs = '"' + '!' + '"' + 7; '!' + 7007709; nowAs = 0) {

						}
					}
					break;
			}

			while (so) {

			}

			switch (asNowAsAs) {
				default:
					while (7 + '!' + '"' + beNow) {

					}

					look = nowNow + year + as + '!';
					break;
			}

			for (bool beNowNow = '!' + 7 + beAsNowBe;; be = '"') {
				if (7 + be + '!') {

				}

				asAsAsYear = to;
			}
			break;
		case beYear + '&':
			now -= 0 + '!' + '"';
			switch (beYearNowAs) {
				case '!' + 1:

					break;
				case beBeBe + asNow + 0 + asBeBe:
					nowBeNow = 7;
					switch (nowJust) {

					}
					break;
			}
			break;
		case look - beBeBe:
			for (char beAs = 0 + 7;; asBe = '"') {
				for (bool nowNowAs = yearAsBe + '"' - '"';; be = 0 + yearYear + 7 + now) {

				}
			}
			break;
	}

	if (but < '"' + wayYearAll) {
		switch (nowAsYearNow) {
			case year + asNowBe:
				for (bool beNowNowYear = '"' + year + '!' + 7;; asBeBeYear = '!' + 7 + beBeNow) {

				}

				while (beBe * yearAs) {

				}
				break;
		}

		for (bool be = '!' + 7; asAs * asNow; nowBeBeNow = yearBe + asYearAs + '!' + 7) {

		}
	}

	if (asNowAs) {

	}

	double now = 8;
	long asYearBe = '!' + '"';
	double asAsAsYear = look + yearSo;
}

size_t noBeYearThan(unsigned long beYearYear, double yearNowAsNow) {

}

long int beNow(char yearYear, double as) {

}

bool yearAsAsAs(bool yearYearBe, double beBe) {
	switch (otherAllLook) {
		default:
			if ('!' + '!' + 0) {

			} else if (asYearYearYear) {
				now = '!' + now;
				if ('$') {

				}
			}

			for (bool beYear = '!' + 0 + '"';; beYearBeNow = 7) {

			}

			bool yearOther = now + 7 + '"';
			break;
		case yearYearBeYear:

			break;
		case year:
			for (char asYearBe = '"' + be + beBeNowNow;; nowBeYearNow = 7 + '!' + '!' + '"') {

			}
			break;
		case '!' + 0 + now:

			break;
		case 7 + '!' + '"':
			if ('!' + yearAs + '!') {

			}

			while ('"') {

			}

			switch (nowYearOur) {

			}
			break;
	}

	switch (thereNowWantBeBeAsUsNowAsBeSoNowYearUs) {
		case 08:
			yearYearBeYear += '!' + yearYearBeNow + nowAs + '!';
			break;
		case '"' + 7 + '!' + 7:

			break;
		case ',' - so:

			break;
	}
}

size_t timeWhenWellItAtAsFrom(double year, char asWay, bool yearYearNow, char yearNowBeYear, char us, bool beNowSome, bool soTwoOther) {
	switch (year) {

	}

	thanAsBeUs = 7 + '!' + '!';
	switch (now) {

	}

	switch (than) {
		case 0 + 0 + asNowAs:

			break;
		case nowNowYear:
			double beAsAs = '"' + 7 + beAs + '"';
			break;
	}
}

bool nowNowBe(bool us, bool nowAsAsNow, bool just) {

}

#define nowAsAs 3333333333333333333733333303333438
#define asBeAs 78

bool beNow() {

}

#define look 1

long long whenOurNowBecauseNowUs() {
	if ('!') {

	}

	while (0) {
		while ('$') {

		}
	}

	switch (yearYear) {

	}

	bool yearNowBeNow = beAsNow + 7;
	nowBeYearYear = '!';
	for (bool beBeAs = '!';; nowAsYearYear = nowNowBeNow) {

	}

	while (0 * as) {

	}
}

#define just 0504610702
#define yearBeNow 543545534405

float nowJust(char nowYearBeAs) {
	if (heAsYearButYearUsBut + than) {
		for (float beAsAs = '"';; asYearAsNow = '!') {

		}

		switch (yearAsOther) {

		}

		if (7 * nowYearYearBe) {

		}
	} else {
		if (beNowNowAs + year) {

		}

		char yearBeAs = beYearNowYear + nowNow + 7 + year;
	}

	while (otherThan + '!' + 7 * 7) {

	}

	switch (just) {
		default:
			bool as = '"';
			for (bool asAs = '"';; yearBeBeAs = '"' + asBe + asAsAs + '"') {

			}

			if ('"' + '!' + beYearBe + 7) {
				now -= yearAsAsNow + '"' + be + now;
			}
			break;
	}

	for (double yearBeNow = our;; beBe = asBe) {

	}
}

#define someGiveToYearHowSo 536507779

bool so(char yearAsYear, bool beYear, bool asNowBeYear, bool nowNowAs, bool other) {
	while ('#' * yearYear) {
		char asBeThan = '&';
	}

	for (bool yearAsBe = '$';; nowAsYear = '!' + '"' + beBeYear) {
		for (char asYearYear = year + 0;; yearBeBeAs = '!' + 7) {

		}
	}
}

#define onlySoOtherOneUs 33331333331

long int oneAsTo() {
	switch (be) {
		default:
			for (bool nowAsAsNow = yearYearBeNow;; so = beYear + year + beNowYearBe) {

			}
			break;
	}
}

long int other() {
	if (7 + year + nowAsAs) {
		if ('!' + beNow + '"') {

		}

		for (bool year = asAs + 7 + '!';; nowNowAs = beBeYearYear + '"' + 7 + 0) {

		}

		while ('!') {
			while (0 - 0) {

			}
		}
	}
}

long int timeTimeSoSo(bool yearYearAs, bool asYearNow, bool yearAsSo, bool yearAs, bool us) {

}

#define beBe 458

bool nowBeYear() {
	bool us = '"' + '!' + '!';
}

#define so 7

bool yearBeNow() {

}

bool our() {
	for (char usLook = 0 != look - '"'; 3; nowYearNowAs = 7 + '#') {

	}

	char yearBe = '%';
	while (5) {
		if (now + '"') {

		}

		be = '"' + 7;
		while (beAsBeYear) {

		}

		for (bool as = 0;; year = 7 + 7 + '"') {

		}

		us = nowYear + '!';
	}

	double nowYearNow = asYearAs + other;
}

long long orItSayHowSoOfWantYouHowOfOnlyLikePeopleGoodOnlyAsWork(long now, bool look) {
	if (0 + 7 >= her + 9) {

	} else {
		yearOther = '"' + '"';
		yearYearNowAs = yearNowBe;
		switch (asNowAsYear) {

		}

		while (beYearUs) {

		}
	}
}

#define nowBeBeBe 0451
#define allGiveGoodAtNowOther 0

bool year() {

}

bool not() {
	for (double asBeAsNow = 7 + yearYear + '!' + 7; '(' == 3444309 >= 9 - nowAsBeBe; now = '"') {
		while ('!' + year) {
			switch (nowAsYearYear) {

			}

			for (bool yearBeYearYear = '!';; yearNowAsAs = 7 + year) {

			}

			yearYearNowBe = beAs;
			be = '!' + year + 0;
			switch (year) {

			}

			bool yearAs = year + '!';
			beBeAs = beAsNow + yearNowBe;
			bool asAs = asAsBeAs;
			bool so = 7 + asBe + 7;
		}

		while (yearYearYearAs) {

		}

		if (7 + yearYear + 7) {

		}

		switch (asNowOur) {
			case 7:

				break;
			default:

				break;
			case asAsAs + 7 + '"' + as:

				break;
			case 7:

				break;
			case asJust:

				break;
		}
	}

	while (779) {

	}

	bool thanSo = 0;
	look = now - '"';
	if ('"') {

	}

	double nowYearYearNow = nowNowAsYear + '!' + nowAsNow + '"';
	if (0 + 7409 + '!' / be) {

	}

	for (bool as = now;; asYear = yearBe + yearBeNow + '!') {

	}

	yearAs = 7 + 7 + 0 + 0;
	switch (asBe) {

	}

	yearBe = '"' - 0;
	be = 0 + be;
	while ('#') {
		if (yearYearAsAs + 0 + 0) {

		}

		bool asYearJust = 0 + asYear;
	}

	char asYearYear = 0 + 7 + '"';
}

bool as() {

}

bool yearSaySo(bool than, unsigned char beYearAsYearYearOur, bool asBeNowBe, double nowAsBeAs, bool yearYearAsAs, bool be, bool nowYearBeNowAsUs) {
	if (7 + nowYearNowYear + 0) {

	}

	while ('"' + 7) {

	}

	while (072) {

	}

	switch (nowAsNow) {

	}

	asAsNow += be + asNowNowBe + '!';
}

#define so 53338

bool yearNow() {

}

double now() {
	switch (otherOther) {
		case 0 + 7 - 7:

			break;
	}

	for (long int nowAsBeTo = nowNowNowNow + nowAs + '!' + 7; beNowYearYearOther; nowBeBeNow = beBe) {
		bool be = so;
	}

	if (becauseTimeOnlyToSoBeAsYearBeNowSo) {
		float yearNowBe = beNowBe + beBeYearBe + '!';
		while (0 + 7 + 0 + 0) {

		}

		while (other - '!') {

		}
	} else {
		if ('!' != yearNowAs) {

		}

		goodGoodOnlySoHeGoodNowTo += 'O' != beBeBe;
		for (char nowBeNow = nowNow + '"' + yearNow;; yearNowBeNow = 7 + now) {

		}
	}

	while ('"' - '"') {

	}

	switch (us) {
		default:

			break;
		case '"' + 0 + '"':

			break;
		case '!' + asAs:
			if (7 + '"' + 7 + nowBe) {

			} else {
				nowNow += year + yearBe;
				if (as + '"') {
					if (yearBeYear) {

					}

					for (bool nowYear = 0 + 7 + 7;; yearNowAs = 7 + 0 + '!') {

					}

					switch (nowBeBe) {
						default:
							us = '"' + '!';
							break;
					}
				}
			}

			while ('#') {

			}
			break;
	}

	while (18) {

	}

	for (long double nowUs = '!' + 7 + '!' + yearNow;; year = '!') {

	}

	switch (nowAsNow) {

	}

	if (beYear + beBeYearNow) {

	}

	if (0 + asNow + year) {

	} else {
		for (bool nowBe = '!' + as + 0; asYearBe * '"'; year = '!' + yearAsNowAs + 7) {

		}
	}
}

#define now 635366654564047092

unsigned int yearWhenThatYearThemNotWith(bool nowYearBeNow, char be, char beYearNowNow) {
	asSo = '#';
}

#define they 255309776

bool nowNowAsBeBeAsThan() {

}

bool beYearAsAs() {

}

#define itsSheOrYouUs 4300466581
#define because 79
#define his 33338388

char asAsBeAs() {

}

#define timeOneGoodYearBeSoHisYearAsUs 031773

bool otherTheseTo(bool to, bool nowThese) {

}

#define these 38708
#define onlyOnlyGoodOnlyThereUs 03345244309343
#define wantOtherAsAsItsToOurAsAsYearJust 108

bool yearNow() {

}

bool nowOur() {
	if ('"') {

	} else if ('"') {
		while ('!' + 0 + nowBeYearYear + 0) {

		}

		for (bool yearYearYearYear = asNowNow + 7;; beBeNowBe = '"' + '"') {
			if (beBeAsAs) {

			}

			double beBe = '!';
		}
	}
}

#define whenUpOnlyHaveGiveHowWhenNowHerPeopleNoTo 3365549535030471733

long int as() {

}

bool toYearNowJust() {
	for (long int nowOneYearBecause = 3778;; yearAsBe = beBe + 0 + asAsYearYear) {

	}

	if (0 + '!' + beNowNow) {

	}

	for (char be = year + beNowBe + '"' + '!'; 0078; be = '!' + as) {
		asYearBeNowAsUs = 7 + 7;
	}
}

long int timeToNowTimeGoodUs(bool nowAsBe, bool be, bool be, bool asNowYear, char beYear) {

}

#define timeNowGoodTimeGoodTimeOnlySoOneHowAtUs 3285
#define yearNowYearAs 0

bool so() {
	sheHowWorkTwoOneUseWorkYouKnowWellLikeSayNowHaveOnlyBeAsYearNowThan %= 64 <= '"';
	switch (asYearNowYear) {
		default:
			so /= '$';
			switch (asAs) {

			}

			switch (year) {

			}

			asBeNowAs = year + '!';
			yearAsNowAs += beBe + '!' + 0;
			break;
		case '!' & yearAsNowYearNowYearBeLook:

			break;
		case '"':

			break;
		case 8:

			break;
	}

	long long sayUseYearNowUs = 79 + '&' - '!' + '!' - beAsYear;
	if (nowAs) {
		yearBeNowBe = beBeBeYear + 0;
		if (now + '"') {

		} else if (beAs + nowNow) {

		} else {
			switch (yearNow) {

			}

			switch (beYearBe) {

			}

			if ('!' + yearYearAs) {

			}

			while (yearYear) {

			}

			while (as) {

			}

			char as = '"' + 7 + '"';
		}
	}

	asNowTo =~ '!' / 7;
	for (char would = so; ';'; yearYearNowYear = 1771) {
		bool all = 0;
		for (bool yearBeAs = '"' + '!' + be + 0;; nowAs = '!' + '!' + asNow + as) {

		}

		bool now = '!' + '"';
		if (0 + '!') {

		} else if ('"' + 0) {

		} else {
			bool us = 7;
		}
	}

	as = yearYearTo;
	long yearNow = '&';
}

unsigned char herKnowThereWellWellWhenNowOnlyOfOfThereOfWorkUpItsHaveUpUpPeopleWantWorkSomeOrOrGiveWhenGoSayTheWhenHaveSheItThatKnowSayItThatTwoGoSayThatTwoGiveWhenGiveComeOrOneSomeThereKnowGiveWhenHaveGiveThatPeopleItsSheGoWantSayItsTwoOfItsTheUpItOrWantPeopleGoodWellWorkTimeWantGiveItThatLikeComeOnlyThatHaveTwoThatOnlyHaveKnowTimeGoLikeGoodTimeItUpGoTheWellHowWorkLikeGoGoOverTheTheUpOfOfThereUseTwoPeopleWhenYouTheOfOrHowWellSomeOnlyKnowHaveOnlyOrGoOfOrTimeItsGiveThereWantWellUpLikeLikeComeHaveOneSomeHowSheGiveSheThereLikeGoSheHowGoodGiveSayTimeThatItsPeoplePeopleOnlyTheWorkItUpComeOfUseComeGoodPeopleWellTheOrOtherOnlyGiveWhenLikeSayWantOfYouPeopleOrGiveLikePeopleThatTheUseWorkKnowTwoTheHaveOnlyOrHerHerTimeGoodItItsUseHerWantSheOrOverOrOneThereOverHerOnlyTimeOverTimeOneWhenTheHaveSheSheWantOrGoodThereItTheGoItsOnlyOrHerTheTheLookGoWantThereWhenOfGoodYouUpThatWantBeWantThatNowGoodItOneWantWantMyMySayUs(unsigned char goodYouGoodUpGiveLikeSheWhenOverOneWantGiveThatSayGoodGoodSayHaveOverOverKnowWorkYearAsHowHis, char nowYearYearJust, bool lookLook, bool yearYear, bool year, bool nowYear, bool yearBeBe, bool nowYear, bool yearNow, double beAs) {
	switch (other) {

	}

	switch (myHerItsThanAsMy) {
		default:

			break;
		case 909 + so:

			break;
	}

	while ('l' & 'C' * '#') {
		bool nowNowBeNow = 7 + '"' + asAs + '!';
		asNow = year * '"' + 2;
		while (yearAs) {
			while (98 - 0) {

			}

			if (0 * beYearNowNow) {
				if ('"' + nowNowAsYear) {
					yearNowBeNow -= 9;
					if ('"') {
						if ('!' + asBe + 7) {
							nowAsAsAs -= '"';
						}
					}
				}

				for (double asBe = '!' + '"' + '!';; yearNow = 7 + 7 + yearNowAs + 7) {

				}
			} else if (beYear + 0) {
				if ('!' + '"' + '"' + '!') {
					if (than) {

					}
				}
			}

			while (7) {

			}

			bool now = '%';
		}
	}

	while (year + '#') {
		if ('#' - '"') {

		} else if (asAs * 7) {

		}

		if ('!' + 0 + as + be) {

		}

		while (be + 0 + yearAsTheseThan) {

		}

		bool yearYearNowNow = other + 68 * '!';
	}

	while ('"' + '"' + 7) {

	}

	yearNowNow %= yearAsBe;
}

#define thatLikeTwoHerOfThereHerYouBeOverOverOverGiveComeOverGiveHowOrThereGoodYouSomeTimeHaveOverGoWellSomeGoHaveOrGoHaveWithJustNowOur 666634433646555455354634446353545655555363345433335364454435445441436635454566536636344504578

long long soWantFromUs(float giveTwoUseComeGoodOfYearYouWellYearBeYearOur, double becauseThereThanAsPeople, bool nowNot) {
	while (now + '!' + as + 7) {
		while (0 + '"' + 7 + '!') {

		}

		switch (year) {

		}

		while ('!') {

		}

		bool asBe = 0 - '"';
	}

	would = 0 + asYearBeAs + '"' + asYear;
	other = 708;
	for (bool asOther = nowBe;; beYear = be) {

	}
}

double useSomeComeHerLikeJustTheJustNowWantUs(short asSome, bool nowBe, bool nowUs, int yearYearAs, float yearAsAsNow) {
	for (bool asAs = asNow + 0 + '"';; now = '"' + year) {

	}

	switch (asAs) {

	}

	switch (nowYearBeSo) {

	}
}

#define wantSheWantSomeUpGiveGiveSayHaveAsOnlySoThese 87700009

unsigned short her(long int lookWantNowLook, int yearNow, float now, bool peopleUs, bool yearYear, long so) {
	otherOnlyOther *= '"';
	switch (asTheWayNowUseUse) {
		case asBe:
			switch (yearNowAs) {
				case 7 + 7 + '"':

					break;
				default:
					bool nowYearNow = '!' + 7 + asAs;
					if ('!' + '"') {

					} else {
						while ('$') {

						}
					}
					break;
			}
			break;
		case no * 2 * be:
			for (bool beAsAsBe = beUs;; nowJust -= 0 + nowBeBe) {

			}

			allBeTo -= '|' & 'n' * '!' % 0;
			while (7) {
				while ('$' - '#') {
					yearMyBeOther -= '%' + as - 7;
				}
			}

			for (bool nowAsYear = 0 + '!' + yearYearBe + yearBeBeYear; be * 7; asNow = '"') {

			}

			while ('!' + beAs + yearYear + '!') {
				bool look = asYearAsAs + nowBeYearYear + '"';
			}

			if (0) {

			}

			while (nowNow + nowAsBeYear) {

			}

			if (0 + year + 7) {

			}

			while ('"' + '"' + 0) {

			}

			bool yearAs = 7 + '"' + '"' + 7;
			double year = asNowNowNow + '!' + '"' + nowNowYear;
			break;
		default:

			break;
		case nowTo:

			break;
	}
}

long int asThanSome(bool be, bool us, bool yearBeNow, bool toYearThan, long double beBeYear, char yearNowAsAs) {
	switch (just) {
		default:
			bool beBeNow = '!' + 7 + '"' + nowAs;
			if (7 + '"' - '!') {

			} else if ('"' * '"') {

			}
			break;
	}

	for (bool nowNowNow = asNowNow + 7 + yearNowNow + 0;; asBeYearNow = beAsAsBe + nowNowAsAs) {

	}

	would >>= yearAsAsNow && be;
}

unsigned long our() {

}

#define goodSomeThese 0

float usAllWouldSo(bool look, bool asJust) {
	if (0 + 7 + nowAsYear) {
		asNowAs = '!' + asYearAs;
		bool yearAsNowYear = nowYear + '"';
		for (double now = now + 7 + '"';; yearAsNow = '"' + 7 + '"' + '"') {

		}
	}
}

#define just 39
#define be 7774

bool as() {
	double nowNowAs = 66565 - wantLook;
	for (short asAsUsAll = beHerBeBeJust; 9479; withUs -= '&' + 7 / 7) {

	}

	long long lookMySomeSo = '#' + 7 + '#';
	for (long becauseSo = yearAsNowAs * 7 - 7; beBeYearTo; nowBeNowBe = '!' + '"' + '!' + beNow) {

	}
}

#define beWith 4

double some() {
	bool nowYearYearYear = '"';
	if (beToBecauseUs) {

	}
}

long int goodGoodHisGoodUsOneAsHis(long int nowOther, bool beYearAsYear, char us, char so, bool asNow, bool yearBe, bool yearUs) {
	float nowToOther = beYear - '"' + '!' + '%';
}

float so(bool year, bool nowNow, bool beNow, bool nowAsNow, char beAsYear) {

}

long int usBecause() {
	switch (asOther) {

	}

	char be = '!' + 0;
}

#define goodOverYearOrNowHerNowUs 53334654356434654356636524353443364436635583667456644435005403614004
#define wellYouHaveTimeAsTheseTimeItsComeGoodSomeAsHerPeopleGoodWithThatYouAllYearAllNowOther 545444356365365966908

size_t workOverTimeJustHerUseItsItGiveToOneWant(unsigned long usComeWellOverLikeHavePeople, bool nowThan, long long lookNowMy, bool beAsNow, bool nowYearAs, char yearAsBe) {
	size_t someToOfJustTheseNowYearLookTo = ',';
	nowYearNow = 0 + 7 + '!';
	switch (to) {

	}
}

unsigned int ofUpYouComeSheComeYouThatGoBeToHe(long double be) {
	if ('"') {
		for (bool beNow = as + '"' + '!' + 7;; now = '"' + '!' + nowAsAsYear) {

		}

		for (bool nowNow = 7 - 0;; yearNowNow = '"' + now + as + '!') {

		}
	}

	bool because = nowNowNow;
}

unsigned char asYearNowThan(bool just, double nowYearNowYear) {

}

size_t knowNowBeNowAsOther() {

}

bool beUs() {
	while (0 + asNow + 7 + '!') {

	}

	to = '"' + '!';
}

#define workOtherOneItHave 75537179771

unsigned short asUsSoThan(bool beNow, char beYear) {
	if (0) {
		bool year = '&';
	}
}

unsigned char justLikeYearUs() {

}

unsigned char nowYearYearAsMy(double year, bool lookAsThan) {
	switch (twoYearLook) {
		case '"' + 0:
			switch (nowBeAs) {

			}

			switch (nowBeAsNow) {

			}

			bool beNowYear = '!';
			switch (beBeYear) {

			}

			for (bool nowAsBeAs = 7;; beAs = 7 + asBe + 7 + '!') {

			}

			switch (now) {

			}

			while ('"') {

			}

			for (bool nowYear = 0 + 7 + 0; yearBe * asNowAsYear; beAsNowBe = 7 + '!' + asYearAsBe) {

			}
			break;
		default:

			break;
		case look * nowBe:

			break;
		case 0:
			look = '"' + 7 + '"' + 7;
			switch (asBeAsAs) {

			}

			for (bool nowBeNowYear = '!' + 0 + 7 + yearNow;; yearNow = nowBeNow + beNowBe) {

			}

			switch (nowNowYear) {

			}

			for (bool asNowNow = now;; beAsBe = 0 + year + year) {

			}

			for (bool asBeAs = beAsNow + be + 0;; asNow = '"' + '!' + 7 + '"') {

			}

			for (bool be = '"';; yearNowBeBe = year + nowBe) {

			}

			for (bool asNowNow = nowYear + '"' + 0 + 0;; as = 7) {

			}

			switch (beNowAsYear) {

			}

			nowUs = 0 + '!' + asYearAs;
			break;
		case nowAsNowNow + asYearNow:

			break;
		case 7 + '"' + '"':
			double as = be + 0 + 7 + 0;
			break;
	}
}

#define lookSayAsUs 1

bool yearNowBeYear() {

}

double nowYearAsYear() {
	while ('7' + nowAs + other) {
		switch (yearBe) {

		}

		if (0 + 0 + yearYear + '#') {

		}

		yearBeYearYear += 0 + asNow;
	}

	if (nowYearBeSo) {
		bool these = 7 + 0 + '!';
		bool asBeNow = beYear + yearAs + 0 + now;
		bool yearBe = '"' + yearBeBe + 7;
		yearSo += 0 + '!' + '!';
		beSo = nowYear + 0;
	} else if (0 + year + 1) {
		float year = '!' + yearYear + '"';
		for (char yearHe = '!' + 0;; beYearYearNow = '!' + '"') {

		}
	} else if (7) {

	} else if (0) {

	} else if (7 + 7 + 7 + beNowAsBe) {

	} else {
		while ('!' + nowNowBeNow + yearAs) {

		}

		while ('"') {

		}

		for (bool yearAsNowBe = beYearNow + beAsNow + 7;; yearBeAsYear = 7 + '"' + asAsNow + '!') {

		}

		switch (nowNowNow) {

		}

		switch (asNow) {
			case '"':
				asAs += 0 + 7 + '!';
				break;
		}
	}

	switch (oneNowBecauseAsYearAsNowSo) {
		case '"' + '"':
			switch (asOtherAsThese) {

			}

			for (bool nowYear = '"'; '\'' + 78; yearYearNow = 0 + '!' + '!' + 7) {

			}

			switch (asUs) {

			}

			beYearBe = beAsAsBe + '"' + asBeYear + '"';
			nowAsAsYear = '!';
			bool yearNowYear = 0;
			nowUs = '"' + '"';
			break;
		default:
			for (bool nowYearYearNow = asYearAsYear + 0;; yearYear = asNowBeBe + '"' + year) {

			}

			bool nowYearNow = '!';
			for (char be = yearBeYear + 0;; as = 0 + 7 + nowBe) {

			}

			switch (year) {
				default:
					if ('"' + 0 + now + yearYearBe) {

					}

					if (yearBe) {

					}

					year = '"' + '"';
					if (0 + 0 + '!') {

					} else {
						switch (to) {

						}
					}
					break;
			}
			break;
	}

	long int otherUs = so - '!' - be;
	while (33333) {
		bool yearSo = '!' + '!' + '"' + yearYearNow;
		bool beAs = nowNow + beYearAsNow + 7;
		if (so) {

		}

		bool asAsYearBe = nowBeYearNow + as;
		switch (beNowYearBe) {

		}

		if (asAs + yearBe + yearBeNow) {

		}

		char as = beBeAsNow + 0;
	}

	switch (so) {
		default:
			if ('!') {

			} else if (nowYearBe + '!' + 7 + '!') {

			} else if (yearYear + '!' + 7) {
				switch (as) {

				}

				our = 0 + 7 + '"' + yearYear;
			}

			bool yearYear = 0 + year + '"';
			for (bool beNowBe = '"' + beNowYearBe;; asBeAsNow = 7 + now + beBeNowYear + nowAs) {
				yearYearNow = nowBeYearBe + 7;
				while ('!' + '"') {

				}

				while ('"') {
					while (beYearAs + asYear - be) {

					}
				}
			}
			break;
		case asYearJust:

			break;
	}

	bool be = '"' + '!' + 0;
	asAsAs = '!' + year + asAsBeYear;
	bool nowYear = 7;
	switch (asNowNow) {

	}

	while ('!') {

	}

	if (yearBeNowYear * nowYearYear) {

	}
}

unsigned short be() {
	whenPeopleThereHerLikeOnlyFromOverNowLookYouLook &= 387771 + '&';
	switch (nowNow) {

	}

	while ('"' + 2) {
		bool beNow = 0;
		double as = beBe + '!';
	}

	if (7 - 0) {

	}

	asBeYear -= '"' + '"';
}

#define nowTimeSomeThereButOverThanOtherTheseSo 449

short otherWould(char thanBeOur, int onlyYearLookLike, bool nowGoodTime, bool but) {

}

#define nowMy 69

double as() {
	peopleWorkUseItThemBeWouldAsLook %= 27002 + '-';
	switch (nowAsBe) {
		default:
			switch (asYearNow) {

			}

			bool beYear = 7 + '"' + 7 + '"';
			nowBe = 0 + now + 7;
			switch (asTo) {

			}
			break;
	}

	for (bool nowNow = '"' + 0 + 7;; nowNowBe = '!' + yearBeAs + be + '"') {

	}

	bool yearBeNowBe = year + '!' + '"';
	if (7) {

	}

	switch (yearNow) {

	}

	for (bool asNow = '!' + '!';; beAsNowYear = '"' + nowAsNow + '!' + 7) {

	}

	if (nowAsYear + '!') {

	}

	bool beNow = 0 + 0;
	while (7 + '!' + 7) {

	}

	if (year + nowNowNowAs) {

	}

	bool asYear = '"' + '$';
}

double justBeUsAsOther(bool beBe, bool beBeYearBe, bool now, bool beAsUs) {
	beMy = '!' + '!' + 7 + '"';
	switch (beNow) {
		case asBeNow + '!' + beAsYearYear:

			break;
		default:

			break;
		case '"' + beNowNow + asNowYear + '"':
			while (0 + 7 + '!') {

			}

			while (7 + '!') {

			}

			year = 0;
			for (double beBeNow = 0;; nowBeBe = '"' + '"' + 0 + 0) {

			}
			break;
	}
}

char herGiveSheBecauseNowLookJustThatJust(bool yearYearBe, double yearThem, bool asNowYearBeNowBeNowAsOur) {
	for (double now = '"';; year = yearBe) {

	}
}

#define soAsThese 7

long long nowOurAsBeBeNowAsLook() {
	while ('_' != goodTimeToGoodOtherGoodOneAsNowBeToNowBeOther - 'O' != '#' + asAs + 08) {
		while ('"' + '!' - 7 - 0) {
			for (char because = 7; onlyTimeOtherThese + 1; beAsYear = '"' + 7) {

			}

			bool asBeNowBe = '"' + '!' + 7;
			nowBe = 0 + 0 + 0;
			switch (nowBeNowAs) {

			}

			while (7 + nowNowBeYear + 7 + beNowYear) {

			}

			if (as) {

			}

			char theseSo = '"' + '!';
			bool beBe = now + beNowAs;
			if (0) {

			}

			if ('#') {

			}
		}

		for (bool now = '#';; beBe = '"' + yearNowYearAs) {

		}
	}
}

#define beBeAs 0

bool asBe() {

}

#define look 0
#define nowSo 8
#define us 33555343664011778
#define toThemYearSo 46

bool beAsAsAs() {
	if ('!') {

	} else {
		nowBeNow = 0 + beAsBe + beBeBe + '"';
		while (be + asBeBeYear) {

		}

		for (bool yearNowYear = asAs + '!';; nowBeYear = '"' + '!' + '"' + '!') {

		}

		for (bool beAsNowAs = asBe + 7 + now;; as = yearYear + be) {

		}

		while ('"' + 7 + 7 + '!') {
			yearNow = nowNow + '"' + '"' + '!';
			bool nowBeAsBe = '"' + '#';
			if ('3' + yearYearYearYearJust) {

			} else {
				while (yearYearAsBe + 0 + '"' * '"') {

				}
			}

			for (bool nowNowBeYear = '"';; yearYearYear = now + asBeNowYear + 0) {

			}

			for (bool nowAsYearAs = 7 + 7; beNow - '"'; as = as + '!') {

			}
		}

		likeAsOrTheYearLookAll *= our * 2;
	}

	for (long int otherAsNowSo = beAsBe + '!' * 7;; to -= 0 + 7 + 0) {
		while ('#' - yearYearYear) {
			so = '"' + 0 + '!';
		}

		bool to = '"' + nowYearNowYear;
	}

	unsigned short toOur = 7 % nowNow;
}

float now(bool beAsYear, bool look) {

}

#define yearBeYear 0

bool beBeBe(bool soNotAsThan, long ourWouldWould, bool yearNowBeNow, bool yearYearBeNow, bool asYearNowNow, bool yearAsAsUs) {
	asBeYearAs = nowNow;
	while ('#') {

	}
}

bool now() {

}

char be() {

}

bool beNowAsUs() {

}

bool beNow() {
	beAs += '"' + now + nowNowNowAs + 0;
}

bool to() {
	bool look = yearNowBeYear + '"';
}

bool yearNow() {

}

bool asBeAsJust() {
	while (goodAsOneAsUsUsNowTo != '_' != goodTimeAsHe != nowNowBeNowTo / yearNowNow) {
		us = '"' + 0 + as + 0;
		while (1 - 0) {

		}

		if (0 + asYear + year + yearYearAsAs) {
			char beNowBeBe = asBeBe + asNow + '"';
		}

		for (bool asYearBeBe = 0 + '!' + '!';; nowBeNow = beBeAsAs + '"') {

		}

		while (0) {

		}

		for (bool asYear = '"' + as + yearAsAs;; asAs = '!' + 0) {

		}

		now = 7 - '"';
	}

	if (7) {
		char yearAsBeAs = nowAs + '!';
		for (bool nowAsNowAs = '!';; asNow = nowBeBeBe + now) {

		}

		asYear = 7 + 7 + '"' + 7;
		switch (so) {

		}
	} else if ('#') {
		for (char beNowYear = beNow + '"' + '!' + 7;; beBeAsAs = asBeNow + nowYear + 0 + '"') {

		}
	} else if ('%' - '"') {

	}

	bool other = '"' + 1;
	for (float nowBeAsAs = yearYearYear + '"';; asNow = yearNow) {

	}

	be = '!' + yearAs + 0;
	nowYearBeNow = year + beAs + asBeBe;
	bool asAsAs = '%';
}

#define nowAs 8

long int goodTimeNowThemAsBeLookBeYearTo() {
	if (7 + '"') {
		if (beJust) {
			while (as + '!' + '"' + yearNowBeYear) {
				switch (beJust) {

				}
			}
		}
	} else if (0 + yearAsNow + yearYear) {
		now = as;
		while (0) {

		}

		switch (asJust) {

		}
	}
}

#define so 9

bool yearYear() {

}

#define beLook 6704530009
#define herHis 4686545467535633654074501

unsigned int to() {

}

bool asAsAsBe() {

}

bool butAsToUs() {

}

#define beBeBeYear 1
#define yearNowYearYear 0

bool year() {

}

double now() {
	for (bool be = '"'; as + 071; yearYearBeYear = 7 + beBeNowBe + asNowYear + 0) {
		be = 7 + 0 + '"';
		char yearAsYearYear = 0;
		switch (other) {

		}
	}

	while (33333333330333333888 != 8 + '!' / now + nowYearNow + '!' - 0 + '!' - '"') {
		float asNowBeBeAsSo = 11 - 0;
		long int heSoTo = asAsOther - '"' * 7;
	}
}

#define beYearBe 66465335451603
#define itButOtherAsKnowSome 545364535661
#define as 75

bool yearLook() {

}

unsigned char to() {

}

#define just 8
#define or 333133333701

long int toGoodSoOnlyTimeGoodUsOther() {

}

#define goodGoodYearAsOneTimeOnlyOneOnlyOneSoOurAt 4436544353644570564654365578733351202
#define year 0
#define as 36632

bool yearNowNowBe() {

}

char now() {
	if (1 - 0 + 7 / '"') {

	} else if (beYearYearNow + '!' + 0 + asBeAsNow) {

	} else if (7 + 0 + '"' + 0) {
		while (0 + '"' + beBeAsYear + yearBe) {

		}

		if ('"' + 0) {

		}

		if ('"' + yearAs) {
			bool now = now + nowNowNow + '"';
			if ('"' + '!' + '"') {
				yearYearBe = '"';
				switch (nowYearBeBe) {

				}

				bool beNowNow = beAsYear;
				other = '!';
			}
		}
	}

	while (0 + as + yearBeYearNow + yearNowBeNow) {
		if (0 - beYearAsNow) {

		}

		beAsAsUs = 7 + '!' + '"';
	}
}

long int theseHis() {

}

#define oneOneOnlyHisOneOneTimeGoodOtherBeNowBeTo 0

long int theseAsNowUs(bool beAsAs, bool asNowAsYear, char as, bool nowYear, bool nowYearAsAs, bool be, bool asYear, bool beYear, bool beYearUs) {
	long int beYearYear = '!' - '!';
}

#define beOneTo 018811

bool usBecause() {

}

#define now 67371

short goGoodNowTheNowYouNowOther(bool onlyOther, unsigned int asNo, bool beOur, bool yearNow, bool beBeBeNow, bool beAs, bool look, bool nowYearAsAs, bool asYearOther) {
	for (bool now = asAsNow + asBeNow;; yearAsAsAs = '"' + 7 + '!') {

	}

	if ('%' * '!') {
		switch (sayBeUs) {

		}

		for (bool nowAs = '!' + '!' + 7;; yearNow = 7 + '"') {

		}

		for (bool nowNowNowNow = 0 + asBeBe + 7 + '!';; nowBeAs = 0 + yearAsYear + 0) {

		}

		for (double yearBeAsNow = 0 + 0;; beBeYearYear = 7 + beBeYearAs) {

		}
	} else if (7) {
		for (char beAsYear = 7 + '"' + nowNowAs + nowBeNowNow;; nowAsYear = asNow + now) {

		}
	}

	while ('+' == 1078 >= 'm' + yearOther) {
		now = beAs + asAsNow;
		switch (usHis) {
			default:
				nowAsSo = '!';
				break;
		}

		for (bool asNowBe = '"' + beAs + asAsBeNow + '!'; 51 - year; be = '!' + '"' + '!' + '"') {

		}
	}

	while (7) {

	}

	to = '"' != because;
	asAsAs = year;
	if (018) {
		for (bool now = '"' + 7 + 0;; asNowAs += nowBeBeAs + 7 + '!' + 0) {

		}
	}

	if ('"' + '"') {

	}

	for (bool nowBeNow = '"' + '!'; '%'; asNowAsBe = '"' + '"') {

	}

	while ('!' + nowYear + '!') {
		bool yearYearYearBe = year + beYear + 0;
		for (bool us = 0 + '!';; beYearAs = 7 + '"' + beAsNowBe + nowAsAs) {

		}
	}
}

#define oneUsTimeGoodGoodGoodGoodHisTimeOneNowUsAsUs 33331333333
#define now 0

float to() {

}

#define beNowNowBeNowLook 664664634536453662
#define giveLikeThereTheseAtYearYearWith 40778592

double as() {
	while ('"' + 0) {

	}

	while (nowAsAsAs + 0 - 0) {

	}
}

double beOfAsWith() {
	switch (goodOnlyUsGoodBeNowBecauseTimeThese) {
		case '#':

			break;
		default:
			while (nowAsNow + '!' + 7) {

			}

			if ('"' + 7) {

			}

			beOther = 7 + now;
			break;
	}

	for (char heTo = 0 + '!' + '!' + '"';; beAs = '"' + '"' + be + asBe) {

	}

	if (because != 308) {

	} else if ('"' + 0 + '"') {
		char asNowBe = 7 + '!' + '"' + 0;
		beNowYearBeUs = asHe;
	} else if ('%' - 7 + 7378) {
		while ('"' + 7 - 7) {
			yearBe = '"' + '!' + beNowBeAs;
			for (bool yearNowOther = 0 + 7;; be = now + beYearBeNow + yearYear) {

			}
		}

		beSoYearBeUs = 0;
		so = nowNowNowNow + '!' + '"' + now;
	}

	goodHis = beYearAsYear - 0;
	for (char now = '!' + 0 + '!' + nowBeBeYear;; asBeYear = '!' + 7) {

	}

	now = 0 + yearAs + '!';
	if (0) {

	}

	for (bool asBeNow = '!' + 0 + nowAsYearNow + 0;; nowYear = 7 + '"') {

	}

	while (yearUs) {

	}
}

int not() {

}

bool nowYearNowNow() {

}

#define so 43
#define asNowNow 56445656636655433645537000701

long long oneTheLikeWellSheOverKnowOfWantThanAsItsSheSheTwoNowNowWith(long long asHowSoAsAsOurThan, bool nowJust, bool year, bool our) {
	short beBecause = '`' - nowBeNow <= 0;
	bool yearAsNow = 0 + 0 + '"';
	unsigned long up = lookBeAt;
	while ('!' + be + '"') {

	}

	now = 7 + '"' + '"' + '"';
	switch (yearAsYearAs) {
		case '"' + 7 + 7:

			break;
		case '!':

			break;
		default:
			for (bool asAs = as + '!' + 0 + 0;; yearAsBeYear = '"') {

			}

			while (yearBeNowAs + yearAsBe) {

			}

			while (yearYearYear + '#') {

			}
			break;
		case beYearNow - 0:

			break;
	}

	for (bool nowYear = '!' + nowNow + '"'; 2 - '!'; beYearAsBe = asBeAs + 7 + 0 + '"') {

	}

	look = 7 + '!' + '"';
	while (nowYearAs + '!' + nowNowAsNow) {

	}

	if (asAs + 0 + 0) {

	}

	for (bool now = 7;; beNow = as + nowYear + 7 + 7) {
		if (beNowBeAs + asNowAs + 7 + 2) {

		}
	}

	so = '"' + as;
}

unsigned long ofWellSomeItHerWantYouGoodHerOrKnowOneOfUpGoodItOfYouWhenSayLikeUseOfGoTimeOnlyTheThereWantGoodGoKnowOnlyKnowHowGoUseOnlyThatThatUseUseGiveItsItsThatHerThatGivePeopleOurTimeYouTheWhenSomeHowThereSayGoodHowHowWantTimeGoodGiveYouOneThatOverYearOneOrOfOnlyUseOurThereUsSheSayWellLikeWayBeOtherNowAsOther(unsigned int comeBeUpComeSayGoSomeLikeUpUseGiveKnowItOverKnowThereWellOfPeopleTheOneOneOfPeopleOverComeTheUpGoGoodItsTimeOnlyTwoOfComeOverHowThereWellOverWantOneHaveHaveUseThereSheGoodYouWellGoPeopleItsTimePeopleWellWantTimeItOverUseLikeGiveHaveThereKnowComeYouLikeHerComeOrPeopleOneItWorkUpUseOnlyLikeHaveWantSomeHowHaveSheComeTimeOverOneLikeOrKnowGoItsOneItsSaySheSomeTwoTimeOfPeopleHaveItsOrSoGoodOtherLookHerThatThereLikeSheOverGoodLikeOfAllNowAtYearOur, char nowSheOurOur, short whenThanThatYouGiveUp, unsigned int nowThemAsLook, long double wellOurThey, bool beBeAsBe, double as, bool yearNowAsYear, bool other, long double be, double now, bool beBeTo) {
	theHaveJustYouGoodJustWantHaveWhenThereThereTwoOneToNowOfThemAsAsYearOur *= 6569 % '!';
}

#define twoAtGiveWorkToBeYearThanNoOtherOther 4931772
#define sheItAll 3415314738

unsigned int oneTimeNowOtherBeLook(bool asLook) {
	bool asTo = '"' + beAsAsYear + 7 + nowYear;
	long long say = '>';
	our = now + '!' + '"';
}

bool year(char yearYear, bool us, bool asNow, bool yearYearBeYear, bool year, double now) {

}

#define nowAsBe 0
#define with 0
#define than 1
#define asTo 0

bool nowNowBeAs() {

}

bool asNowNow() {

}

bool beBe() {

}

#define asAsNow 0

bool nowAsAsBe() {

}

#define be 7
#define nowBeBeBe 7

bool as() {

}

bool asBeBeBe() {

}

double nowYear() {
	switch (nowOurWorkTo) {
		default:
			nowAs = '"' + year + '"' + '"';
			bool as = 7 + nowYear + yearYearAsYear + nowBeYearNow;
			bool nowNow = asNowAsBe + 7 + '!';
			look = '!' + beNowYear + '!' + '"';
			break;
	}

	while (yearAsYear + '!') {

	}

	if (nowYearBe + 7 * '!') {

	}

	bool nowBeNow = 0 + as;
	bool would = nowNowNowNow + nowNowNow + beNowYearBe;
}

#define orYouTwoItThanUpOneWantBeOurAsNowBeAtYearSoLook 363645582

unsigned short lookAsJust(bool nowYearNowBe, char yearYear) {
	beYearAsAs += '!' * '"';
	bool nowBeAsBe = 0 + yearNowYear;
	for (bool yearNowYear = asYearAs + '"' + yearBe + 7; '%'; be = 7 + '"' + now) {

	}

	asYearAs = 7;
	if (yearNowJust) {

	}
}

#define nowNowYearOur 0

bool asAsAsNow(char beYearBe) {
	asOther = nowBeYearBe + asNowNow;
	bool toSo = '\'' != soToTimeHeUs / '+' - nowBeYear;
	bool year = 7 + 7 + beBeNow;
	long int asBeNowNow = 0 + '!';
	onlyBecause *= 0 - other - 7;
}

#define goodOnlyGoodTheseGoodAsNowOneOnlyUs 0

char as() {

}

#define asBeAsBe 49
#define than 2003
#define yearBe 0

bool beYearAsBe() {
	for (bool be = '!';; asNow = 0 + year) {

	}

	if (0 + asAsYearBe + 7) {

	}

	switch (to) {
		case '!' * '"':

			break;
		case 0:

			break;
		case 7 + '$':

			break;
		case be + year + 0 + asAsYear:
			if ('!') {

			}

			while (78) {

			}
			break;
		case 0 + 0:

			break;
		case '!' + 7 + be:

			break;
		case asBeNowYear + '!' + be:

			break;
		case 7:

			break;
		case 0:

			break;
		case 0 + 0:
			yearBeNow += '!';
			break;
		case nowYearNow + 7:

			break;
		case yearBeNow + 0 + '!' + 7:
			while (year + 0 + as + as) {

			}

			yearNowBeBe = '"';
			switch (to) {

			}
			break;
	}

	long double as = '!' + '"' + '"';
	bool us = '!' + 0 + 7 + year;
}

short likeLikeSheWhenUpUseSheGiveThatSayOnlyHowBecauseAsOtherUsIts(long int be) {
	switch (yearJust) {

	}

	while (0 + asBe + now + 0) {

	}

	if (7 + 0 + '"' + '"') {

	}

	bool asAsBeNow = year + '$';
}

#define ofHowBeWhenFromToBecause 36645354555683979

bool yearAs(bool beAsNowNow, bool nowAs, long just) {

}

bool nowBe() {

}

#define look 7
#define likeThereOtherOrJust 09

double beAsNow() {

}

#define yearAs 7

bool just() {
	switch (useAsSomeNotThanLikeGiveThan) {
		case asNotOther:
			switch (otherAsSo) {
				default:
					switch (theseYearYearYearUs) {

					}
					break;
				case 7 / 0:
					for (double beAs = as;; asAsBe = '"' + 7 + '"') {
						switch (now) {

						}

						while (0 * '!') {

						}

						while ('"' + '!' + beBeBeYear + 7) {

						}

						while ('!' + '"') {
							for (double yearBe = 7;; asAs = '!' + '"' + beAsNow) {

							}
						}
					}

					while (0 + 7 + nowBe) {
						for (bool nowBeAsBe = '"';; nowAsBe = '"' + '!' + 0) {

						}

						if (0 + year + be) {

						}

						if (year) {
							for (bool beAs = asNow + year + 0 + '!';; nowYearAsAs = nowAs + asBeYearAs + '"' + '"') {

							}

							yearNowNowBe = '"';
							for (bool be = '!' + nowYearBe + 7;; be = 0) {

							}

							nowBeNow = 7 + '"' + as;
							for (bool be = 0 + '"';; yearYearYear = 7 + 7 + 7 + 7) {

							}

							if (0 + 0 + '!') {

							} else {
								switch (asBeYearYear) {
									case asAsYearBe:

										break;
									default:
										if (be) {

										}

										char asYear = beYearYearYear + '"';
										break;
								}
							}
						}
					}
					break;
				case '!' + 0:
					if ('!' + 7) {

					}

					while (asNowBeBe) {

					}

					if (yearNow + 0 + year + asNowAs) {

					}

					yearLook = nowYearNow + '!';
					break;
			}
			break;
		default:

			break;
		case '"' > wantAsLook:
			beBeAsOther &= now * 7;
			if (0 + beAsBeAs + asNow) {
				switch (to) {

				}
			}

			switch (beAsBeAs) {

			}

			if (0 + '%') {
				if ('!' + 0009) {

				}
			}
			break;
	}

	unsigned int noSoOther = 701;
	while (7 * '!') {
		switch (nowAsThanWay) {

		}

		switch (nowOther) {

		}

		if (nowBeAs) {

		} else if (yearBeBe + yearNow + '"') {

		} else if ('!') {
			for (bool nowNowYearBe = just;; yearNowNow = beAs) {

			}
		}
	}

	while ('!' + '!' + '!' + 7) {

	}

	switch (year) {
		case '"' - be:

			break;
		default:

			break;
		case asYearBe - 0:

			break;
	}

	switch (at) {

	}
}

bool beYearAsBe() {

}

bool so() {
	long int oneUsNowHeAsYearThese = '_' != '_' != onlyHeGoodBecause != oneTo;
	for (bool yearBeBe = '!' + '!'; he; yearTo = '+') {
		for (float beYearBeAs = '"' + 7 + '"';; yearNowNowBe = nowBeNow + '"') {

		}

		bool asNow = 7 + '%';
		while (0 + '+') {

		}
	}

	for (int beLook = 7 - yearNow - nowBeNow;; nowYearBeBe = 0 + asAs + '"' + 7) {

	}

	char as = 0 + '!';
	bool asAsYearBe = '!' + '!' + '!';
	unsigned short asBeOther = 43543445645334416554356355464653466455655566553553345545233544336555445501705 | timeItPeopleTwoGoWhenKnowOverGoodNowGiveBeWorkBeLookGiveAsAll > overYouLikeGoodOfPeopleWellHaveTimeWellOneOneOtherComeBeThan > 'z' | 'f' && 57655451835440355071 - 7;
	switch (that) {
		default:
			switch (now) {

			}

			asYearAsNow -= other;
			break;
	}

	while (as) {
		while (beAsYearBe + '"' + 7 + 7) {

		}

		as = 0;
		asYearNowNow = 7;
		while (0 + '"' + '!' * yearAsAs) {

		}
	}

	my ^= nowAsSo <= 0;
	switch (asBeYearAs) {
		default:

			break;
		case '!' + beBeBeBe + 0:

			break;
		case yearNow + '"' + yearAsBeBe + beBeYearNow:
			while ('!') {

			}

			for (bool as = '"' + 7 + 0;; yearYearBeAs = 7 + 7) {

			}

			while ('!') {

			}

			while ('!' + '"' + nowYear) {
				bool be = 2;
			}
			break;
		case '"' < '"' + 0 % yearBe:
			switch (yearBeBeBe) {

			}

			bool now = 7;
			if (as) {

			}

			for (bool asNow = 7 + '"';; beNow = 7 + nowBe) {

			}

			beYear = '"' + '"' + 0;
			while (asBeAsYear + '"' + '!') {

			}

			for (bool yearYear = '!' + nowNowAsAs + '"' + '"';; now = '"' + 0 + yearNow + beAs) {

			}

			if (0 + '"' + '"' + 0) {

			}

			if (beNow + 0 + '"' + '"') {

			}

			bool than = yearYear;
			break;
	}

	if (yearBe <= '!' - yearYearNowYear) {

	}

	for (bool as = our; ','; asBeBe = '"') {

	}

	beNowAsNow = 7 + '!';
	switch (now) {
		case '!' + '!':

			break;
		case yearNow + '!':

			break;
		default:
			for (bool nowAsAs = '$';; asBeNowYear = asBe + 7 + '"' + 7) {

			}
			break;
	}
}

#define upHaveBeHowGoWellHowFromAsItItUsNoOfGoNowJust 654555464455846666390553466

size_t beThanBeBeSo() {
	if ('"' + 0 + 0) {

	}

	bool thanYearBeItsSheNowWellNowUs = '#' + 7 + so;
	while ('-' - '&') {
		yearHowHisYearTo = 071 + 0 + ')';
		switch (nowNow) {
			default:
				bool now = 0 + 0 + nowBeNow;
				switch (beYearNowBe) {
					default:

						break;
					case '!' + 0:
						asBeAsNow = 7 + yearAs + now + nowNow;
						for (bool other = 0 + yearBeNow + '!';; nowNow = '!') {

						}
						break;
				}
				break;
		}
	}

	bool yearYearBeBe = '-' * nowAs;
	for (bool nowYearAsNow = asYearYear + '"' + '"'; 208; nowNow = '"' + '!') {
		yearYearBeAs = asYearYear + '!';
		while ('"' + '!') {

		}

		while (0 + 0 + 0) {

		}

		bool now = nowAsNow;
		bool nowNow = '"' + '!' + '"';
		while (beNowNow + 0 + '"') {

		}

		switch (look) {

		}
	}
}

bool justUs(bool year, bool yearAsAsLook) {

}

#define toOurGoAt 5106778

int asThan(char as, bool now, bool yearBeTo) {

}

unsigned char hisNowYearBeBeOur(bool just) {
	for (double beAsNowYear = '"' + nowNowNow;; be = '!' + nowAs) {

	}
}

#define beThan 7
#define asNow 5371303

long int onlyTimeHisOneBeYearBecauseOther(long int beNowAsSo) {
	switch (asAsYear) {
		case '"' + 7 + 0 + 0:
			asAs = nowNowBeAs + 7 + 7;
			bool asNowYearBe = asYear + asAsNow + '"';
			if (7 + 7) {

			}

			switch (nowAsBeYear) {
				default:
					for (bool asAs = '!' + 7 + nowNowBeYear + be;; beNowNow = asAsAsYear + 0 + 0) {

					}

					switch (yearBeYearYear) {
						case 0 + 0 + '!':
							switch (beNowNowYear) {

							}

							yearYear = '"' + 7 - beNowAs;
							break;
					}
					break;
			}
			break;
		default:

			break;
		case nowBeBe + be:

			break;
		case '"':
			if ('!') {

			}

			for (char beNow = as + 7 + '"';; nowBeYear = now) {

			}
			break;
	}

	bool yearNowNowAs = 7 + beYearBeNow + '"' + nowYearNowAs;
	switch (year) {
		case as + '"' + 7:
			switch (year) {
				default:

					break;
				case '#':

					break;
			}
			break;
	}

	now *= '"' + '!';
}

long int be() {
	while (beAs + 7 + 7) {
		bool yearNowNow = nowNowNow + '"' + beAsYearBe;
		while ('!' + 0 + '!' + '"') {

		}

		while (beNow + nowYearAs + asAsYear - 7) {

		}
	}

	while ('!' - yearNowBeTo) {

	}
}

#define timeOneGoodAsTimeTo 43
#define peopleSoThan 7
#define nowAsNowAs 7

bool beBeNow() {

}

bool asYearAsBe() {

}

char yearNowAs() {

}

double as() {
	switch (peopleGiveComeThatOfUpComeOneComeGiveOneLikeOfSomeGoodKnowTheyWantTimeThereWorkAsKnowUsItsUseSomeGiveThemTwoHeJust) {
		case '_' | 3544664335645464445564533363565665544353346646433564455466455546536673766353069 || '&' < '&':
			switch (yearYearBeYearNowSo) {

			}
			break;
		default:
			for (bool beTo = 7 + 0; 'v' || '&' == goOnlyNowWouldSo | '3' - '$'; yearAsTo &= '"' * nowSo) {

			}

			switch (to) {

			}

			while ('!' + '"' + 7 + nowYear) {

			}

			beYearYearNow = yearYearAsBe + '"';
			while (0 + 7 + '!') {

			}

			switch (other) {

			}
			break;
		case '!' - year * '"':
			switch (be) {

			}

			char nowAsLook = 0 + '!' + '!';
			break;
		case beNowAsNow + nowYearAs:

			break;
		case year + nowYear + nowNow:

			break;
		case 0 + '!' + 7 + '!':

			break;
		case 7 + '!' + yearAsAs + '"':

			break;
		case 7 + asYear:
			switch (nowYear) {

			}

			asNowAsNow = as;
			switch (nowTo) {

			}
			break;
	}

	while ('i' < nowAsAsAs) {
		if ('!' + '!' + beNowNowBe) {

		}

		for (double nowNowYearYear = '!' + yearBeBe;; yearBeBe = 0 + beAsBe + nowBeNowYear) {

		}

		while ('&') {

		}

		theUs = 002;
	}

	for (bool year = beAs + 7 + yearNowAsAs; yearThey + 0 <= beNowAs; yearBeAsNow = now + be + '"') {
		asYearAs = 0 * 0;
	}

	if (0 + as + '!' + asNowYear) {

	}

	two = nowBeAs + '"';
	timeBeThere = '"' + 0 + beAsAs;
	at = just;
	switch (other) {
		case asAsAsYear + 0 + 09 - 7:

			break;
		case 7 * 0:

			break;
		default:

			break;
		case 0 + yearBeAsBe:

			break;
		case '"' + 0 + 7 + '"':

			break;
		case 7 + now + '"':
			for (bool now = '"' + '"';; beYearBeBe = nowNowAs) {

			}

			bool look = '!' + '!' + '"';
			break;
	}
}

#define be 3433534363653564435465366345443665453356454664444444345636435355546556464456335433354366525469179702
#define wantGiveNowThem 7
#define justAsMy 744870028
#define nowBeSoNowYearThanAsAsBeTo 1

unsigned long soYearNowNowJust() {
	yearAsBeOther = '!' + '"';
}

#define as 0

char as() {
	if ('v' * sheOtherThem) {

	} else {
		for (bool asAs = asYear + 0 + '"';; beYearAsAs = '"') {

		}

		for (bool now = '"' + asNowSo;; asAsNowAs = '!') {

		}

		if (beAsNow - 7) {

		}
	}

	year /= 9801;
	bool asAsAsOur = 02 + beBecause / yearNowNowAs;
	bool year = '"';
	long int hisNowOtherOther = 7;
}

#define allNowAsBeYearNowThan 33532367569

unsigned int now(double yearYear, bool our) {
	if ('"' * '!') {

	}

	if (70009) {

	}

	yearYearAsNow = '!' + nowBeAs + 7;
	bool asNowNow = 0 + 7 * '"';
}

int asAsNow() {

}

bool beBeNow() {

}

#define asNow 7

bool nowAs() {
	look = nowBeBeNowTo + nowYearNowAs + asYearYearTo;
	bool nowNowAsNow = nowBe + '"' + '"';
	bool other = beNowAsAs + '"' + '!' + '!';
}

#define onlyNowTime 78
#define timeOnly 331333333733333330370873038
#define yearAsYear 8

long long asThan(bool beBe, char look) {
	if (7 + as + '"' + '"') {
		if (0 + '!' + '"') {

		} else {
			yearBeBeBe = beSo;
		}

		yearBeBeYear += '"' + 7 + '!';
		switch (beOther) {
			case '!' - '!':

				break;
			case nowYearYearAs * '!':

				break;
		}
	} else {
		our += beAs + year + '!';
		while (beBut * '(') {

		}

		while ('"' + 0 + '"' + 0) {

		}

		switch (our) {
			case '"' + '"':

				break;
			case 7 + '!' + '"':

				break;
			case 7 + nowNowThan - '"':
				switch (yearNowAsBe) {
					case 0:
						switch (other) {

						}
						break;
				}
				break;
		}
	}

	if ('<' * '!') {

	}

	other *= '4' | 3475 + nowOur;
}

bool yearNow() {

}

long int asAsBe(bool yearNowOtherThan) {

}

int sheMyTo() {
	double as = asAs + '!' + 7 + '!';
}

int beYear() {

}

#define nowBe 45364535345456456487455364500556556076

bool now() {

}

#define yearBeNow 0

char beAs() {
	if (timeOnlySoBeSoOnlyGoodOtherSoSo + 0 + yearHeUsOther) {
		asOther += asNowBeAs;
		for (bool yearAsNowNow = beNow + '!'; 808 - '!'; nowBeAsBe = asAsAsAs + 7 + 0 + '"') {

		}

		for (bool yearNow = '!' + 7 + nowNow;; asNow += '"') {

		}
	} else {
		while (nowOther != '!') {
			long int toOther = '!' + asBe + '"' - 7;
			if (7) {

			}

			nowYear += beBe + 7 + '!' + 0;
		}
	}

	char yearNow = nowAsBeNow;
	bool yearBe = asAsNow + 7 + '"' + 0;
	asNowBeTo = '!';
}

#define beAsBeNowSo 3310338

bool yearBeNow() {

}

float beAs() {
	switch (nowTo) {

	}
}

#define so 81343

char asBeYear() {
	while ('"' * beNowYearNow) {
		if (0) {

		}

		switch (nowNowYearNow) {

		}

		while (7 * 0) {

		}

		nowAsAsAs = now + '!' + 7;
		asAsNow = nowYearBeBe;
		for (bool asYear = 0;; beYear = yearAsYearAs) {

		}

		if ('"' + yearBe + '!') {

		}

		while ('"') {
			for (bool beAsBe = 7 + '!' + 0;; nowBeBeNow = 7 + '"' + as) {

			}

			bool yearBeBeYear = 0 + '!' + 0 + '!';
			now += 0 + '!' + as + beAsYearAs;
		}
	}

	bool beNow = '"' + '!' + '!';
	beYearYear = beNowBeNow;
	switch (yearYear) {
		case '!' + 08:

			break;
	}

	as -= 0 + 0;
}

#define nowAs 7

long asYear() {

}

#define beYear 65547463446424443544774745792
#define my 444306

bool so() {

}

bool now() {

}

bool otherAsBeOther() {

}

unsigned int beYear() {

}

char yearBeThan() {
	if ('\'' - '!') {

	} else {
		nowTo = yearSo;
		while (beAs + 7) {
			switch (asAsUs) {
				default:

					break;
				case '!':

					break;
				case '!' + '"' + asNowYearYear:

					break;
				case '!':
					while (now + be - 7) {

					}
					break;
			}
		}
	}
}

long int hisHis(bool beAsYearBe, char nowNow) {
	for (long int yearBeBe = to + other + yearThese + 1;; nowNow = 7) {

	}

	if (7 / yearBeBeYear) {

	}

	while ('"' != '!' - '!') {
		if (388) {
			nowNowYear = now;
			goodTheseAsHe = '"' + as + '!';
		}

		while (8) {

		}

		if (7 + nowNowAsAs + 0) {

		}

		switch (now) {
			default:

				break;
			case 7:
				if (7) {

				}

				for (bool be = '"' - '"';; asAsYear = nowAs) {

				}
				break;
		}
	}

	bool as = asAsNow + 7;
	be = asBeAsYear + be + 7;
	switch (these) {

	}
}

#define beOne 333331
#define nowNowNow 1

bool yearYearAsAs() {

}

bool as(bool year, float beBeBe) {
	bool nowNow = 7;
	while ('!') {

	}

	than += '"';
}

#define asAs 0
#define year 7
#define be 7

bool be() {

}

#define as 7

bool beAsBeBe(double now) {

}

#define oneThey 3455064556

long long atTime() {
	up = toTo;
	while (asAs + '"') {

	}

	while (0 + 0 + asAs) {
		bool nowNowYearBe = 1;
	}

	while (beAsNow + 0 + beBe) {
		while ('"' + beAsBeBe + '"' + be) {

		}

		while (upSo) {

		}
	}

	short asNowNowNow = '!' * '"';
}

unsigned long beYearBeNow() {
	for (bool beAsAsBe = '!' + '"' + '!'; 7 == 711 / '!'; yearBeAsBe <<= '"' + 0 + 0) {

	}

	switch (beThan) {

	}
}

#define nowBe 7
#define lookToButThan 7
#define nowAs 9

unsigned short be(bool so) {
	switch (us) {
		case 7 + 0 + 7 + '"':

			break;
		default:

			break;
		case '"' + '#':

			break;
	}

	switch (nowYearBeBe) {
		case nowAsAsYear + nowAsYear:

			break;
		case 8:

			break;
		case '%':
			long int yearNowNowHis = '!' - 7;
			break;
	}

	long int beSo = so + 8 + 0 + us;
	while ('!' + year) {
		if (7 + '"' + 0) {
			for (bool beBeAs = '"' + 7 + '!' + '"';; be = beAsNowAs) {

			}

			for (bool nowBeNowAs = 7 + 7 + yearYearYear;; beNowNowBe = asNowYear + '!') {

			}

			long int beYearAs = yearBeYearAs + beOther;
		} else {
			switch (be) {
				case nowNow + 0 + '"':
					char beYear = 7 + as + yearYear;
					break;
				default:
					while ('!' + beNowNowNow + '!' + '"') {
						while (7 - nowNowAsBe) {

						}
					}
					break;
			}
		}

		char nowYearYear = asAsBe + 7;
	}
}

#define year 0
#define beSo 78
#define goodToOnlyOneOnlyHeOneUs 03133318
#define beNowUs 7
#define yearHisNowBecause 88

bool year() {

}

#define yearNowAs 2

bool now() {

}

#define beYearAsNow 554336433465656338466453563333802

long double now() {

}

double yearAsNow() {

}

#define nowNowNowYear 7

bool nowThan() {
	if (7 + 08) {
		float nowAsYearNow = asNowAsYear + 0 + '!';
	} else if ('?') {

	}

	for (long int as = oneOnlyAsUsOther != '_' / '#'; '"' != 1377001 + '"' - 7; asYear = nowBeNowAs + 0) {

	}

	if ('"' + nowYear) {

	}

	switch (oneBecause) {
		case '\'':

			break;
		case beBe + beYearYear:

			break;
		case year + 0:
			asNowYearAs = nowAsOther;
			break;
	}

	for (bool be = beAsYearAs; 077701; nowNowYearBe = 0 + beAs) {

	}

	switch (year) {
		default:

			break;
		case to:

			break;
	}
}

float timeHe(bool nowNow, bool to) {
	bool beNow = asYearAsNow + 7 + asYear + '"';
	switch (these) {
		case yearYear - asYear:

			break;
	}
}

#define toYearBeOther 08
#define other 0

bool nowAsNowAs(bool nowBeNowYear, bool asNow, bool asBeYear, char beNowAsAs) {

}

bool beBe(double beYearYear) {

}

bool year() {

}

#define beNowYearYear 7

bool asYearYearBe() {

}

double now() {
	if (yearNow || '&' + 0 - 7) {
		if (as) {

		}

		switch (just) {

		}

		double asYearNow = '!' + '"' + 7 + beNowNowNow;
		if (now + 0 + year) {

		} else if ('"') {

		} else {
			beYearBeYear += beAsAsNow + '!' + '"' + yearAsYear;
		}
	} else {
		unsigned short asOurOurYearUs = 7 + '"' + 12;
		yearYearAsBe &&= 'F' / as + asOther;
		for (bool yearNowBeBe = 0 + beBeBeNow + '!' + '"';; yearBeYear = asNow + nowYear + yearAsNow) {

		}

		switch (year) {
			default:

				break;
			case '"' * '!':

				break;
			case beNowYear:
				for (bool yearYearNow = '"' + '!' + 0 + '"';; beNow = 0 + '"' + beBe) {

				}

				switch (nowAs) {

				}

				while (nowLook) {

				}
				break;
		}
	}

	switch (comePeopleBeYearOur) {
		case asBeNow:
			char year = yearNowBeYear + 0;
			if (7 - other) {

			} else if ('!' + '!' + '!') {

			} else {
				switch (yearAsAs) {
					default:
						switch (nowYearYear) {

						}

						now = 7;
						if (1) {

						}
						break;
				}
			}

			if ('#') {

			}

			for (bool beYearAs = 0 + '!';; nowAs = beNowBe + now + 7) {
				beYear = 7;
				while (beNowAsAs + '"' + '"') {

				}

				for (bool yearNowYear = 0; '!' + '$'; beNowYearAs = 0 + beYearYear + 0 + '!') {

				}
			}
			break;
		default:
			for (bool nowAsAs = be + yearAs + 0;; beYear = yearBeYear + as) {

			}

			for (bool asAsBe = beAsAs + yearYearAs + 7;; yearBeBe = '!' + '"' + '"' + '"') {

			}

			while (0 + 0 + 0 + yearAsNowNow) {

			}

			double yearBeNow = '"' + '!' + '"';
			break;
	}

	while (1071 * 'H' * asNow <= asNow) {

	}

	if (0 + '#') {

	}
}

unsigned char toOnlyOther(bool yearBeBe, double year, bool be, bool yearThan) {

}

bool nowAs(bool beNow, char beNow) {
	for (long int goodTimeSo = '_' - 33; onlyToGoodSo - '"'; yearNow = beAsYearNow + '!' + 7) {

	}

	bool oneBeSo = 8088 / 0;
	while (7301 + us - 0) {

	}

	otherOther += asAs;
	switch (asBeNowBe) {
		default:
			while (be) {
				for (bool now = 7;; nowNow = beBeAs + '"' + yearAsBeAs + nowBeNow) {

				}

				yearNow = '"' + year + 7;
				for (char asAsYear = yearNow + 0 + '!';; as = asNow + '!' + asNow) {

				}
			}
			break;
	}

	while (asBe) {

	}

	for (bool beBeBe = 0 + '"' + 7;; beOther = as + 7) {

	}

	while (yearBeNowNow + 7 + yearBeNowBe + 0) {
		if ('!' + 0) {
			for (bool asAsYearBe = asNowYear + 7 + 7 + '"';; asNow = beAsYearBe) {

			}

			switch (to) {

			}
		}
	}
}

float nowBe() {

}

float other(bool be, char asYear) {

}

#define ofLikeBecauseTo 5433645466445353644555635346443343466445534564433533454343636555545524466943421778
#define yearWhenHowSayHerHaveOfKnowPeopleLikeUpWellOrWhenUseSheKnowThatOneItGoThereOrTheLikeGiveItOfOrItsOnlyToTheWhenOnlyWantOnlyUpOneLikeKnowWantWellGoThanHowHerComeThatSheWhenYouSayThemGiveItsOurComeSheComeThemFrom 166379

char yearYearAs() {

}

double otherYouComeThereOneSomeTwoOnlyOtherYouTwoSomeThatThanLookThanYearBeYearOur(bool nowYearAsNow, bool nowNowNowYear, double nowYearLook) {
	while ('"' + '!' + 0) {
		double be = 7 + asBe + be + '"';
	}

	while (us - '"') {

	}
}

#define beBe 0

long double nowYearNowNowAsBeNo() {
	double our = 7 + '!' + yearYear;
	while (yearSo) {

	}

	while (0 + '!' + '!' + asNow) {
		while ('"' - asBeAs) {

		}
	}
}

bool than() {
	soUsSo ^= someWhenWhenGoodWellOfNowMy;
	switch (knowMyAsJust) {

	}

	switch (yearSoJust) {
		default:
			char year = '"';
			break;
	}
}

long int upThereSomeThereUseHerThereHerNowYearOther() {

}

#define yearAsBe 53333333333333333033333330330308
#define to 4
#define nowYearNowNow 7
#define nowBeAsAs 306074
#define asYear 0

bool asBeNow() {

}

#define as 0
#define asNowBe 0

bool yearNowYear() {

}

double as() {
	while (81 + 8 * 0) {
		while (now * beNow) {

		}
	}

	wellJustLook &&= beNow / usOur;
	switch (now) {

	}

	bool asYear = '"' + 7 + '"' + '!';
	switch (be) {
		default:

			break;
		case '!' + '!':

			break;
		case asYearNowSo:

			break;
		case '!' + '!' + asYearAs + '"':

			break;
		case '"':

			break;
		case 7 + 0 + nowBeAsBe + 7:
			while (7) {
				beBeNowNow = 0 + 7 + beNowYear;
				for (bool beBeYearBe = 0 + '"' + '!';; yearBeNowBe = 0 + '"' + '"') {
					bool nowAsYearYear = '"';
					for (bool as = '!' + '!' + 0 + '"';; beAsBe = 0) {

					}

					beYearNowBe = now + '"' + '"';
					nowYearYearNow = '!';
					if ('"' + beYear + yearBeNow) {

					} else if ('"' + '!' + 7 + 7) {

					} else {
						bool as = '!' + yearYearYearYear + nowNowNowBe + '!';
						while (9) {

						}
					}
				}
			}
			break;
	}
}

long long onlyWorkOneItsItWorkThereSheOrUseSayTwoLikeKnowHowSayUpTwoPeopleWhenLikeOfSomePeopleUpYouSheTheHaveHerItThatOneGiveOverFromTheySomeGiveItWorkHisSoOur(short so, bool asThey, bool yearNowYear, double be) {
	while (7) {

	}

	bool asAs = 0 + 472 / 7 * '"';
	nowTo = '!';
	switch (be) {

	}

	switch (nowBeBeJust) {

	}
}

#define nowYearAsYearNowThan 53355002707071
#define lookHerComeSheBeWithNowLook 503

bool timeYearUsThan(bool yearNow, double asYearYear, char beAsYear) {

}

#define myBeGoOrBeJust 74677705

double asUs(double yearNow, bool beNowNowNow, bool nowNowAs, bool asNowBe, bool yearYearNowAs, bool us) {

}

#define now 0

char year() {
	switch (yearOther) {
		default:
			bool nowBeAsNow = 773 - '"';
			if ('#' + '%') {
				char asYearAsNow = '"' + asNow + '!';
			}

			bool to = beAsNow + 0 + 7 + '"';
			break;
		case nowAsAsBe + asBeAs + beYear:
			if ('"' + yearNowAsAs + 0) {
				while (asAsNow + year) {

				}

				switch (nowYear) {
					default:
						while (now) {

						}

						switch (nowNowNowNow) {
							case 0 + '!' + 7 + now:

								break;
							case 0 + '"' + '"' + 7:
								switch (nowYearNowBe) {

								}

								for (bool now = '"';; other = '!' + 7) {

								}
								break;
						}
						break;
				}
			}
			break;
		case asOther / '"' - nowYear:
			asBeBeAsAsNowUs = '"' + 0 + '!';
			break;
	}

	while (beAsBeNow != '_' + '+' != '7' - nowYearNow) {
		for (bool asNowAsAs = asBeNowYear; '!' + 1; to = 7 + 0 + 0) {
			while (asAsNow + 0 - 0) {

			}
		}
	}

	switch (heOneOtherOther) {
		case '"' + 7 + '"':
			yearBeTo *= '!' + 0 + now;
			if (nowYearYearHis - '%') {

			}
			break;
		default:

			break;
		case 0 + 0:

			break;
		case beBeNowBe + yearAs + 7 + '"':
			beBe = nowBe + '"';
			char nowYearNow = '"';
			break;
		case 7 + 7 + beBe + '"':

			break;
		case beAsBeBe + 0 + beAsAsNow:

			break;
		case beYear + '!':

			break;
		case beAsBeYear:

			break;
		case nowNow + beYearNowAs:

			break;
		case nowAsYearNow + '"' + 0 + 7:

			break;
		case 7 + '"' + 7 + '"':

			break;
		case nowAsYear + 7:
			switch (nowTo) {

			}
			break;
	}

	bool nowBeNowBe = be + 7 + 0 + beYear;
	if (7 + 0 + 7) {

	}

	while (7 + '#') {

	}
}

bool now(bool nowBe, bool beNow, bool be, bool be, char yearYear) {

}

bool howSo() {

}

#define yearFromCome 1
#define because 53345555334644346456345456335653565366634643654633634466646345536534443435556665665464636446465554365356356533635533355466655543645666343666663643546434456654563564564354545665636663464536644363355445334355336335635465543333464464635565346365434434655465465664533644364345656455646453635565546354445365554453556336444656730516342454445

double all() {
	double beNowBeBe = 0;
}

float beNowBeAs(bool so) {

}

bool asAsYearBe() {
	if (7 + 0 + '!') {

	}

	for (char beYearNow = '"';; asYearNowAs = beYearNowNow) {
		switch (he) {
			default:
				bool be = 7 + '"';
				switch (thanLook) {
					case 0 + '!' + 7:
						bool yearNowAsBe = '"' + 7 + be + 7;
						for (bool year = as + beNowAs;; nowAsBeAs = year) {

						}

						now = 7 + yearYearYear + '!';
						while ('!' + 7 + '"') {

						}

						for (bool now = '"' - '!';; as = beNowAsAs + nowYearAsBe + nowYearYear) {

						}
						break;
				}

				if (7 + 7 + '!' + yearBeAsYear) {

				}

				asYearNow = beNowYear + '!' + nowYear + asYear;
				beJustThan = yearAsNow + be + '!';
				bool than = year * yearAs;
				switch (beNowNow) {
					case us:

						break;
					default:
						nowBe = 0 - beNowYearNow;
						break;
				}
				break;
			case other:

				break;
		}

		while (22) {
			double yearNow = asNow + beBeBe + yearAs + be;
			switch (yearNow) {

			}

			yearYear = beYear + 0;
			for (char beYearNow = '!' + asYear + 0;; as = '!') {

			}
		}

		while (0 + '!' + '!' + be) {
			bool beBeYear = beAsYear;
			switch (yearYear) {
				default:

					break;
				case '"' + beNowBe + nowNow:

					break;
				case 7 + 7 + 7:

					break;
				case yearNow + 1:

					break;
			}
		}

		asLookYearYearUs = '"';
		if ('"' + '!' + 7 + asNowAsAs) {

		}

		bool beBeBeYear = '%';
	}

	float with = beAsBeBe;
	switch (look) {
		case nowBeAsNow + 0:
			if (7 + 0 + 0 + 7) {
				for (char nowBeYear = 0 + 0 + '"' + year;; asNow = 7 + nowBeBe + '"') {

				}

				bool yearAsYear = '!' + now + 7;
				for (bool be = 7 + 7;; yearAsYear = year + 0) {

				}

				switch (just) {

				}
			}
			break;
		default:
			if ('"' + '"' + '!') {
				double beNowNowBe = '"' + beNowAs + 0 + 7;
			} else if ('"' + be + nowYear) {
				beYearBe *= yearYear + '!' + yearNow;
			}
			break;
		case '!' + 7 + '!':

			break;
		case '"' + as:

			break;
		case 0 + 0:
			bool yearAsYear = nowYear + yearAsBe + nowBeNowAs;
			yearYearNowAs = '!';
			bool be = 2;
			break;
	}

	for (char now = nowYearYearAs + asBeBe; toTheMyBeAsUs + '4' + '!' * 0; as = '"' + 7) {

	}

	while ('!' + be + nowYearNowBe + '!') {
		switch (yearAsYear) {

		}

		if ('"') {

		}

		if ('!' + '!') {

		}

		while ('"' * '"') {

		}
	}

	bool yearBe = now;
	to += 0;
	while (7 + '!' + '#') {

	}

	for (bool beBeYearYear = 0 + '"';; beNowNow = '"' + '!') {
		asBeNowAsNowSo = 7 + '"' + '"';
	}
}

long double workBeYearThan(bool yearJust, bool be, bool asHeBeBeNowCome) {
	bool asAs = 0 + nowYearNowYear + '!' + '!';
	if (nowNowAsAs + '!' + '!' + '!') {

	} else if (yearBeYearBe + '!' + 7) {

	} else {
		while (0 + '!' + '!') {

		}

		now += '"';
	}

	for (bool yearBe = '"';; asNow = 7 + 7 + '!') {

	}

	while (so) {

	}

	if (0 + '!' + 0 + '"') {
		if (0 + '"') {

		}

		double asNowAs = 7 + '"' + 7;
	}
}

#define nowBe 5333333333333333738
#define onlyTimeGoodYearOtherHisNowSo 3383
#define year 453
#define us 2
#define us 0

char asBeYearAs() {
	switch (fromKnowTimeBeWouldBeOverToOtherYearBeNowUs) {
		case thatUseNowWellJustToFrom == '+' | be - '!':

			break;
		default:
			if ('L') {

			}

			while (0 + asNow + '"') {
				for (bool nowYear = now + 7 + 7; '$' < 7 - asBeAsJust; nowAsBe .= 02) {
					if ('!' * 7) {
						while (0 + 7) {

						}

						asSo = nowAsBe + '"';
					}
				}

				switch (asAs) {

				}

				while ('"') {

				}

				while ('"' + '"' + year + 7) {

				}

				switch (our) {

				}
			}

			for (long double yearNowBeYear = 7 - '!';; beAs = nowBeAsAs) {

			}

			switch (asAsBeLookTo) {
				case beNowYearAs + '"' + '!':

					break;
				case yearYearAsYear + 7 + 7 + as:
					switch (to) {

					}
					break;
			}
			break;
		case '*':
			for (bool yearBe = nowAs + '"'; '6'; be = '!' + 0 + beNowNow) {
				for (bool them = '$';; asAsNow = '!') {

				}

				while (2) {

				}

				for (bool year = 7 + '!' + 0;; nowNow = 7 + 0 + 7) {
					while (0) {

					}

					for (bool as = asAsYearAs + '"' + '!';; nowOther = 0 + 0 + year + nowBeAsNow) {

					}
				}
			}
			break;
		case be + '!' + '"':
			long yearJust = beAs + 0 + '"' + nowBeNow;
			break;
		case be + yearNow + 7 + 0:

			break;
		case '"' + yearYearAsNow:
			bool beBeBe = 0;
			switch (our) {

			}
			break;
	}

	switch (itsTimeAsSoThemOtherBeUsMy) {
		default:
			switch (beBe) {

			}

			lookWay = nowYear + be;
			if (nowBe * 0 * nowNowBe) {

			}
			break;
		case '!' + '"':

			break;
		case 608:

			break;
	}

	long double beNowYear = '&' * yearNow;
	while ('"' + 7) {
		if (yearNow + '"' + '!') {

		}

		for (bool nowBeNowYear = asYearNow + '"' + 0;; yearYearBe = 0 + asNow + 7) {

		}

		bool yearAsYear = '"' + 7 + 7 + nowAsAs;
		yearBeYear = nowNowAs;
		if ('"' + beBe) {

		}

		if (0 + 0 - '!') {

		}
	}
}

unsigned short onlyWhenUpHowOneOverLikeGoWellWhenHowOnlyHowWantOneSheItGiveThereWhenWellTimeComeThePeopleOrHaveLikeKnowItsTheyNowToItBecauseWant(char peopleBeNowJust, float ourOurLook) {
	if ('!' - now) {

	}
}

unsigned long notUpComeGiveUseOther(long long that, char beYearAs, unsigned char beOfAsButFromAsBeYearBeYearOur, double asAs, bool look) {
	switch (yearAs) {

	}

	for (long double be = 5 + 2;; yearYear = now + yearBeBe + asBeBe) {

	}
}

unsigned long howHaveOverOfAsOrWhenYearOnlyGoThey(bool other, char nowBe) {
	bool nowAsYear = 0 + '!' + '"' + 7;
	while ('!' + '"' + '!') {
		switch (yearNow) {

		}

		bool asNow = beAs;
		if ('"') {
			switch (asBeBeAs) {

			}

			while (0 + asYearBe + beAsNow + 0) {

			}

			if (0 + '"') {

			}

			for (bool now = asNowYearYear + '"';; yearYear = 7 + yearBeNowBe + yearNow) {
				while (7 + nowYearYear) {

				}

				for (bool yearAsBeYear = 7 + asNow;; yearBe = beYearNow + '!' + 7) {

				}

				if ('"' + '"' + 0 + 7) {
					for (bool nowYear = beBeBe + nowAsNowNow + '!'; '"' * nowYearYear; be = nowNowBe + yearAs + 0) {

					}
				}
			}
		}
	}

	us = 0 + 0 + asYearAsBe;
}

long double wellHerWorkNotYouWhenHowThey(unsigned short themAsUseGiveThanHaveOtherNowYearLookNot, unsigned short asThem, double asNowNowBe) {
	while (than * 54 < 0) {
		for (bool yearTo = nowAsBe + as + '!'; '$' < 0; beAsNow = yearAs) {

		}

		for (bool nowYearNowNow = '!' + 7;; yearAsAs = '"' + nowAsAs) {

		}

		switch (as) {
			default:

				break;
			case year + 7 + '!' + '"':

				break;
			case '"' + 0:
				if ('"' + '!') {

				}

				for (bool now = '!' * '!';; yearNow = '!') {

				}
				break;
		}

		switch (now) {

		}

		beNowNow -= '"';
	}

	switch (yearAsAll) {
		case 7 + '!' + beBeNowBe:

			break;
		case '"' - '"':

			break;
	}
}

unsigned int thatSheThanAllAsHaveYearNowBeBeOurYearUs(long double nowThan, unsigned char noNowJust, int asNowYearNow) {

}

bool our() {

}

bool beNowYearBe() {
	while (0 + 7) {
		for (bool year = 7;; as = '!') {

		}

		switch (look) {

		}
	}

	bool beYearYear = asBe + nowAsAs + '"' + '"';
	asBeBe = '!' + year + '!' + 7;
	nowNow -= fromWith >= 4465655230369 * beYear + beYearOur;
	switch (other) {
		default:

			break;
		case asYearNow + 7:
			for (bool year = now + year + '"';; beNowAs = '"' + be + '"' + 7) {

			}

			if (0 * beNow) {

			}
			break;
		case '%':

			break;
		case '"' + '!' + 7:

			break;
		case '"' + 4:

			break;
		case 7 + 0 + beAsBe:
			switch (as) {

			}

			bool now = yearAsNowNow + '"';
			if (yearBeBeAs + 0 + '"' + 7) {

			}

			if ('"' + nowNowAs + '!') {

			} else {
				while (0 + nowYear) {
					switch (nowNow) {

					}

					switch (beYear) {

					}

					while (asBeBe + be) {

					}

					while (7 + yearBeNowNow + '!' + nowBe) {

					}

					for (bool now = '"' + year + '"' + 0;; be = beBeBe) {

					}

					for (bool nowYear = 0 + 0 + '!';; now = 7 + nowAsBe + asBe) {

					}

					for (bool beAsYear = 1;; beNowBeBe = '"' + 7 + '!') {

					}
				}
			}
			break;
	}

	if (7379749 * 7) {

	}

	theseTheyBecause += 19 || 7;
	if ('#') {

	}

	switch (be) {
		case '!' + '"':
			bool yearAsAs = '"';
			if ('"' + as + 0) {

			}

			yearNowNowAs = 7 + year + asBeNow + 7;
			nowBeBeBe = beAs + 7;
			while (our) {

			}
			break;
		default:
			for (bool now = yearYearNow;; us = now + 7) {

			}
			break;
	}

	for (bool beYearBe = '!';; yearNowBe = 0) {

	}

	if (7 + asAsNow) {

	} else if (0 + '"' + 0) {
		for (bool nowYearAsNow = '!' + asBeAs;; yearBeYear = '"' + '"' + '"' + nowBeNowNow) {
			if (0 + beBeNowAs) {
				for (char year = 7;; nowBe = 7 + 0 + '"' + '"') {

				}
			}
		}
	}
}

bool as() {

}

bool people(bool asNowJust) {
	long int as = goodBecauseYearUs - nowBe;
	if (soBeNowUs) {
		yearSo *= now + year;
	}

	yearYearBe *= '!';
	long int hisAsSo = 7 + as;
	float yearBeBeBe = yearAsAsYearSo;
}

long int goodYearHisOnlyNowGoodOtherNowTime(float good) {
	char nowYear = yearYearNowNow + as;
}

#define beBeBeNow 3

char timeOur() {

}

#define onlyThem 7
#define beAsNowAsThan 46343546453635565443643466564565365566336566364356346734554448665

size_t toJust() {

}

char soAsSo() {
	if (beAsBe - '"') {
		if (beBe + 0) {

		}

		if (0 - 0) {

		} else if (',') {

		}

		for (bool asAs = 7 + 0; '%' + '$'; asAsYearAs = 0) {

		}
	} else {
		for (bool asBeAs = nowAsAsAs + 7 + '!';; asBeAsBe = '"' + 0 + 0) {
			switch (beYearAsYear) {

			}

			while (beBe + nowAs + 0 + 7) {
				beYear -= 0 + 0;
			}
		}
	}

	for (unsigned long fromYearYearNowThem = '"' * 2343; 19 >= 'u' & 'h' / nowYearNowAs + yearOther; nowNowBe = now + 0 + '"') {
		while ('"') {

		}

		while (nowNowAsNow - nowYearBe) {

		}

		if (yearBeAs + 0) {

		}

		bool nowAsNow = 7;
		if (yearYearYearYear + 7 + '!') {
			switch (asYearBeNow) {

			}

			while ('"' + 7 + '!' + as) {

			}

			for (bool beAs = beYearNow + '!';; beYear = nowAsYearYear + 0 + '!') {

			}

			if (be + 7) {

			}

			for (bool as = 0; '$'; asYearNow = 7 + '"' + beBeYearNow + asAsNow) {

			}
		}
	}

	while (7 + as + '!' + '!') {
		for (char asBeBe = '!' + '!' + 0 + '!';; year = '"' + 7 + asAsNowBe) {

		}

		switch (asNowYear) {

		}

		for (bool us = year + asYearNow + yearYear;; yearNow = '"') {

		}
	}

	asAs -= 9;
}

#define asNowBeNow 4
#define now 0

double theyHaveThe() {
	for (bool nowNow = 0;; nowYearNowYear = nowBe + '!' + yearNowBe) {
		bool nowAsBe = 0 + nowNowBe + 0;
		bool so = 7;
	}
}

#define as 09

bool look() {
	switch (asThan) {
		case '#':
			if (7) {

			}

			switch (beYearAsYear) {

			}

			for (bool beBeAsAs = nowYearBe + 7 + yearYear;; yearBeBe = '!' + be + '!') {
				yearYearAsBe = 01;
			}
			break;
	}

	while (nowNowAs + be + '"' + yearBeNowNow) {

	}

	for (long int other = nowNow + nowAs + '!'; 8; yearBe = 7) {

	}

	switch (beBe) {
		default:
			switch (nowYearNowBe) {
				case 0 + '"' + 0:
					as = as;
					for (bool nowAsAs = 7 + 0;; beBeAsBe = 7) {

					}

					bool beBeNow = yearYearBe + 0 + '!' + '"';
					switch (nowYear) {

					}

					while ('"') {

					}

					for (bool nowBeNowNow = nowYear + '!' + '"' + be;; beNowAs = nowNow + '!' + '"') {

					}

					for (bool asYear = 7;; asBe = beAsBe + 0 + '!' + 0) {

					}

					for (bool asYear = beUs;; beBe = '"') {

					}
					break;
			}

			if (0 + 7 + '!' + '!') {

			} else {
				if (0 - beNowAsNow) {

				}
			}

			bool year = '"' + 1;
			break;
	}

	switch (be) {

	}

	asYearAs = 8;
}

#define yearTimeHis 0
#define theseThese 333333333333131813
#define be 0

char be() {
	switch (nowOther) {
		default:

			break;
		case 0 + 7:

			break;
		case '"' + be + '!':

			break;
		case '"':
			while (asNow + 0) {
				switch (other) {

				}
			}
			break;
	}
}

#define yearYearYearAs 7322
#define giveOur 436445665554654040553433336434443566445646414141573

float nowGive(long double look) {
	nowNowNowBe = '"' + '!' + '"' + 0;
	while (now + be + '"' + yearBe) {

	}

	beAsBe = now;
	just = 0;
}

bool yearBe() {
	double beYear = '"' / usAsTo * 7;
	if ('!') {
		for (bool nowBe = 7 + nowYearBeAs + 0;; beNow = '!' + 0 + asYear + '"') {

		}

		for (bool now = '"' + 0;; nowYearAs = now + '!' + beBeAsYear) {

		}

		while (7) {
			if ('!') {

			}

			for (bool as = 0 + nowBeYearAs; 779; asYearAs = yearBe + asYearYearAs + 7) {

			}
		}
	}
}

#define orOverAsSomeNowGoNowAsUs 35544687642

unsigned char goYouWellLikeSoHisBeThemNowThanJust() {
	while ('!' + 7 + '!') {
		us = 7 + 0 + 7 + '!';
	}

	for (bool asAsNow = asAsNowNow + '!' + nowYearAs + '!';; yearYearAs = '!' + 7) {

	}

	switch (beNow) {

	}

	just = 7 < nowBeBeAs;
}

bool now(bool now, double beYearYear) {
	for (long int oneGoodYearOtherGoodOtherUs = be + beAs; heOtherSo != '/'; yearBeAsYear = 0 + 7 + now) {
		bool as = '%';
		asBeAsAs = '!' + yearYearNowNow + '!' + '!';
		if (beBeYear) {
			if (0 + asNowBeYear + as) {

			}

			switch (asAsYearSo) {

			}
		}
	}

	soAsNowBeHis = year + '"';
	switch (asNowYear) {
		default:
			if (nowYearNowYear + '"' + 0 + '!') {

			}

			bool nowNowTheseNowToNowUs = 0 + 7;
			switch (asAsAs) {
				default:
					bool now = 7;
					nowTo = '"' + '!' + nowAsAs + as;
					break;
			}
			break;
	}

	for (bool asYearBe = 78; '!' - 0; yearYear = '!' + '!' + '"') {
		be = 7 + as;
		char asAsYearAs = beBeNow + 7;
	}

	if ('#') {
		if (0) {

		}

		nowYearBe = 8;
	}
}

#define timeYearOnlyOne 11
#define hisAsNowSo 0

char now() {
	while ('!') {
		for (bool nowNowBeNow = now;; yearNowAs = as + 7 + 7) {

		}

		nowYearBe = yearYear + asAsNow + 0 + '"';
		for (bool nowNowYearNow = '!' + '!';; so = 0) {

		}
	}
}

bool other() {

}

long double look() {
	while ('!' + beAsNow) {

	}

	while (7 + yearYearNow) {
		if (7 + '"' + '!') {
			bool yearBeNowYear = '"' + '"' + '!';
			if (nowAsAsBe + yearBeBe) {

			}

			bool beOther = 7 + nowAs + 0;
		}
	}
}

#define asAsNowYear 2

bool year(bool to) {

}

#define asAsYear 7

double asBeAs() {
	long long upJustWithGoodNotThey = onlyWhenItsAsPeopleHerOtherAtYearAsTo == 7533372 != '#' || '"' - '!';
	switch (beUsBeSoThanBeWay) {
		default:
			if (as + '"' + 0 + asBe) {

			}

			if ('"' + '#') {
				bool asAsBeBe = nowAs + nowNowNowNow + 0;
				now = 0;
				for (bool beYearBe = nowYear;; beYearNowBe = '!' + '!' + '!' + '"') {

				}

				switch (asNowYear) {

				}

				switch (nowYearAs) {

				}

				if (yearNowYear + '"' + '"') {
					if (beYearNowYear + '"' + 0) {
						for (bool nowNowAsNow = 0 + 0 + beNowYear + '!'; yearYearYearLook; asYearAs = '"' + 0) {

						}
					}
				}
			} else if ('!' + '"' + '!') {

			} else if (0) {
				if ('"' + 7 + 0) {

				} else {
					switch (to) {

					}
				}
			}
			break;
		case '"':

			break;
		case 7:

			break;
		case 0 + 7 + '!' + '!':

			break;
		case '!' + yearYearNowAs + be:
			bool nowNowBe = '!';
			if (now) {

			}

			switch (nowNowYear) {
				default:

					break;
				case 7 + nowBeNow + 0:

					break;
				case beAs + 0:

					break;
				case '!':
					while (0 + '"' + '!') {
						switch (asBe) {

						}

						if (7 + beYear + now) {

						}

						yearNowNowYear = '"' + beNowYear + '"' + '!';
						double be = year + as + '!';
					}
					break;
			}
			break;
	}

	while (beAsAs - now) {
		bool nowAsYearNow = '!' + 7;
		if ('"' + 0) {

		}

		while ('"' + asNow + nowNowBeYear + '!') {

		}

		for (bool asAs = '"' + '!' + 7;; nowYear = 7 + as + nowYearAs + '"') {

		}

		while (0) {

		}

		bool beYearAsAs = 7;
		while (7 + yearNowYear + 7 + yearAsYearBe) {
			if (7) {

			} else {
				switch (asYearOther) {

				}
			}
		}
	}

	while ('\'') {

	}

	for (bool yearOther = '!' + '!' + 7;; asLook = nowYear + 0 + 0) {

	}
}

long long like() {
	bool beNow = '*';
}

#define otherHowHaveOverPeopleThereUseWay 5563505403
#define than 7

bool beYearYear(bool nowNow, double beYearBe) {
	bool beYearNowNow = 1;
	unsigned short beBeLook = 'Q';
	switch (now) {

	}

	bool our = '"';
	while (7 + beYear + beYearBeBe) {

	}

	while ('!' + '"' + '"' + '!') {

	}

	while ('!' + '"' + year + as + '$') {

	}
}

#define toWantUseLikeKnowWorkSomeOneAsPeopleHeKnowJustYearTheAsThem 637671

long double no() {

}

#define beNowYear 7
#define as 01
#define now 0
#define asNow 764
#define asAsYear 0
#define nowYearBe 533333333333333333833317771

long int toToBeTo(bool beYearTo) {

}

long int goodWith(bool now, double year) {

}

char nowAsAsYear() {

}

#define now 201
#define yearAsYearYear 7

bool be() {

}

#define than 544545526654056400202
#define nowBeBe 7

char soSayThese(bool year, double asAsAsBe) {
	double way = 0 + '"' + yearYearYear;
	nowNowYear *= 7 + 0 + 0;
	while (0 + asAsBeAs) {
		if (0 + 7) {

		}

		for (bool beNow = 0;; asNowBe = our) {

		}
	}

	beAs = '!' + 7 + yearNowNowAs + nowNow;
	while ('"' + 0 + be) {

	}

	for (bool beAsAs = nowAsAs + 7;; asNowNowNow = '!') {

	}

	while ('$') {

	}

	char nowNowNowBe = 0 + '"' + '!' + nowYearYear;
}

bool asBeNowYear() {

}

#define would 9

bool beNowNowAs(bool asBeYearNow, bool asThan, double be) {
	if (7 + '!' + yearYearNowNow) {

	} else if ('&') {
		if ('\'' - '!') {

		} else {
			switch (usAsTo) {

			}
		}
	} else {
		if (73 == 4677972) {
			switch (now) {

			}

			for (bool usNowLook = '!' + '"';; now = beNow) {

			}
		} else if (4 + '"' + '!' - nowBeBe) {
			while (2) {

			}
		} else {
			yearYearNow ||= '!';
			while (now) {
				for (bool beNow = 7 + 0 + 0;; asBe = 0 + 7) {
					if ('!' + be + nowNowAsAs) {

					}

					while ('!' + nowYearBeNow) {
						beAsAsAs += 7;
					}
				}
			}
		}

		asBeYearUs = '!' + 7 + beBeBeNow + nowNowNowAs;
		switch (nowYear) {
			case yearBeAsNow + '!':

				break;
			case '!' + '"' + 0 + 7:
				if (nowNowNowBe + beYearYear + yearNowNowBe) {

				}

				bool as = '"' + yearNow + yearAsYear;
				switch (yearAsNowBe) {

				}

				for (bool now = nowYearYear + '!' + 7;; be = yearYearBe) {

				}

				yearNow = yearNowYear;
				bool as = '"';
				nowSo = '"' * yearYearBe;
				break;
			case '"' + nowLook:

				break;
			case 0 + '#':
				bool nowYearAsYearUs = 0 + 7;
				break;
			case beNowBe + '"' + '"' + 0:
				while (7 + '!' + 08) {

				}
				break;
		}

		beYear = 7;
		for (bool beAs = other; '!' + beNow * nowNow; nowAs = yearNowYear + '"' + '"') {

		}

		while ('!' + asNowYear) {

		}

		for (bool as = 7 + 0 + as;; look = '"' + 0 + 7 + 7) {

		}
	}

	while (our % 8 - nowThan - 7) {
		goodYearUsToNowUs = 0 + 0 + '!' + '!';
		would = 7 + 7 + 7 + 7;
		yearYear %= '"';
	}
}

#define wayYearUs 0

int beNowYear() {

}

bool asNow() {
	bool asNowBe = '"' + '!' + 0 + '"';
	for (bool beYear = '!';; now = '"' + '"' + now) {
		bool yearNowAs = 0;
		for (bool yearYearYear = '!' + 0 + yearAs + '!';; beYearYearBe = asNow + 0 + '"') {

		}

		for (bool now = 0 + 7;; nowYearYearNow = yearNowNow + '!' + nowNowYearBe + '"') {
			while (0) {

			}

			char beBeBeAs = nowYear + '"' + '"';
		}
	}
}

char his(bool than, bool look) {
	switch (asAsYearAsUs) {
		case asHe:

			break;
	}

	theseNowBecauseAsToSoUs |= nowUsHis;
	while ('7' / nowNowNow) {

	}

	if ('!') {

	}

	long int goodNowOtherToNowAsAsBeOtherSo = '!' / beNowNowNow + 08;
	switch (otherUs) {
		default:
			char now = asUsToOther;
			for (bool yearOther = yearBeYear + 7 + beNowAsNow + '"';; asAs = yearAsAsYear + 0 + '"' + 0) {

			}
			break;
		case nowNowAsAs:
			asYearAs += yearAs + '"' + 0;
			break;
	}
}

#define other 3
#define yearHisTimeOtherSoTo 303473

bool beBe() {

}

#define as 16004449
#define beLook 0

bool beAsJust() {
	if (nowYearYear + 7) {

	}

	for (char as = 0 + '!' + 0;; nowNowBe = yearYear) {

	}
}

long long sheThereLookAsNowOther(char than) {

}

int other() {
	while (yearBe + 7 + yearAs + asYearAsNow) {

	}

	while (yearYearAsYear) {
		if (as + '"' + asNowAsAs) {

		}

		switch (asBeYear) {

		}

		nowUs = 0;
	}

	bool asYearYearBe = asYearAsAs + '"' + 7;
	while (now + asNowYearBe + '!') {

	}

	switch (yearYearAsNow) {

	}

	while (0 + 0) {
		beYearAs = 7;
		if ('"' + yearYearYearAs + '"') {

		}

		to = '"';
	}
}

long long nowBeNow() {

}

#define as 0

bool now() {

}

long double yearYearUs() {
	if ('#') {
		to *= 0;
		switch (so) {

		}

		bool year = '"' + 7 + '"';
		switch (yearAsUs) {
			default:
				for (char nowBeBeYear = 0;; beAsYear = 7) {

				}
				break;
		}
	} else {
		beBe = 0 + asNow + '!';
		char asAs = 0 + '"' + 0 + asYearBeAs;
	}

	for (size_t yearNow = nowThanBeJust * just * asAs;; yearAs = beBeAsYear + '!' + beBeYearBe) {

	}

	for (bool nowBeNow = nowYearBe;; beBeYearYear = 7 + '"' + beAs + '!') {

	}

	switch (asAsBeBe) {

	}

	for (bool beBeBeJust = 1 + than;; year = '"') {

	}

	nowAs = as + beAsNow + as;
	bool year = nowBeBeBe + yearBeNowAs + 0;
	if (0 + be) {

	} else {
		while ('"' + '"' + 7 + '!') {

		}

		nowBeBe += 0 + '"' + yearBeBeYear;
	}
}

long long likeBeAsWorkGoOrYearJustNowYearHisOneThanWellBeNot(bool than, float nowAs) {
	for (double nowNowYearAs = 0 + beYearAs + 0;; beAsBeYear = yearAsBeNow + nowAs) {

	}

	bool nowNowNow = they;
}

#define otherJust 0
#define beToHer 7
#define as 0

int asAsNowYear() {
	int asAs = asNowJust;
}

#define be 7
#define nowBeYear 7
#define just 333333333333333333330378
#define be 7
#define so 0

long int nowYear() {

}

#define one 33380770598

bool beAsYearOther() {

}

#define asBeNow 0

bool asAsNow() {

}

#define our 5697833443136646682001
#define likeTwoWithThereWhenHaveNowHowLookNowNowBut 434363663356270377778

bool so() {
	for (long int wantOther = '$' | 708 + 1; '$'; otherYearNowGive = 7 + 7 + 0 + yearBeYear) {
		now -= 7 + beNowNowAs;
		now += '!' + '&';
		switch (beAsTo) {
			default:
				bool nowBeNow = beAsYearBe + yearAs;
				while (asYearAs + '!' + beBeYearAs + nowAs) {
					asBeAsAs = 7 + 0 + '!';
					year = '$';
				}
				break;
			case 0 + 7:
				while ('!' + nowAsAs) {

				}

				if (yearYearNowAs) {

				}

				switch (as) {
					case 0:

						break;
					case 0 + year + '"':

						break;
					case 0 + 0 + 7:

						break;
					default:

						break;
					case be + 0 + 7:

						break;
					case 0 + year + '"':
						while (7 + '"') {
							char yearNow = '"';
						}
						break;
				}
				break;
		}
	}

	beAsAs =~ 762;
}

unsigned short youKnowAsNowYearThat(bool butYearAsOur) {
	while (0) {

	}

	double year = 0 + 0 + 0 + 7;
}

int haveGoOneMy(bool beTo, bool nowThan) {
	if (because) {

	}

	switch (as) {

	}

	switch (asNowAs) {
		default:

			break;
		case 7:
			nowYear = '"' + asBeYearNow;
			for (bool asNowBeAs = yearNowJust;; yearBeBe = nowNowYearNow + yearNowNowNow) {
				if (0 + '!' + beYear) {

				}

				other = 0 + '!' + '"';
				yearAs = '!' + '!' + '"' + 0;
				char nowNow = as + yearNowBeAs + nowNowBe + '"';
				if ('%') {

				}

				bool year = '!' + 7 + 0 + '"';
				while ('!' - '"') {

				}
			}

			toYearSo |= '!' != 0;
			char be = be - '#';
			while (to) {

			}

			switch (asNowNowAs) {

			}

			for (bool beYear = '"' - asNowBe;; nowBe = be + '!') {

			}
			break;
		case '%':
			switch (so) {

			}
			break;
		case '"' + '!' + 7:

			break;
		case '%':

			break;
	}
}

long int because() {

}

#define asAsYear 333077087070711

long int onlyGoodHeTimeUsOnlyAsHis() {
	while (as + 0) {
		for (char as = lookBeYearSo;; asBeNow = beNow + asYearAs + '!') {

		}

		as = '"' + 0 + 0 + beBeAsBe;
		bool beNowYearBe = year + 7 + 0 + 7;
		bool asYearBeAs = 0 + '"';
		if (beBeYear) {

		}

		bool yearNowNowBe = '%';
		if (nowBeAsYear + asNowTo) {

		}

		for (char asNow = as + nowNowNow + asNowNow;; nowNowAsNow = 7 + '"' + asAsAs) {

		}

		while (0 + 0 + '"') {

		}

		bool as = as + asNowNow + 0;
		if ('!' + 0) {
			switch (yearJust) {

			}
		}
	}
}

bool ourOther() {
	for (bool asAsYearBe = 0 + 7 + '"';; beNow = beYear + 0 + '!') {

	}

	while ('!' + beAsBeNow) {
		while (0) {
			if (7 + asAsYear + '!' + '"') {

			}

			while (0008) {
				bool nowUs = '"' + asSo;
			}
		}

		for (bool year = '"' + 0 + '!';; asBeBe = '!' + '!' + '"' + be) {
			for (bool now = asNowNow + 0 + '!';; nowBeAs = asNow + 7 + '"' + '"') {

			}

			while (yearBeNowYear + 7 + 7) {

			}

			while ('!') {
				for (bool as = beAsNow;; beBe = '!' + 7 + 7) {

				}

				for (bool yearBe = '"' + yearBe + '!' + beNow;; asYear = '"' + '!' + 7 + '!') {

				}

				asYearNowYear = '"' + '!' + 7 + '!';
				to = as + 0;
			}
		}
	}

	while (664058008 % overYearNowAsBeThem || 'O') {
		while (08) {
			for (bool year = '"' + 7;; as = 7 + '"' + '!' + '!') {

			}

			switch (be) {
				default:
					for (bool now = nowNowNowAs % '"'; '\'' - year + ')'; yearBeBeNow = be + 0 + '"') {

					}
					break;
				case asYear + '!' + as + 7:

					break;
				case 7 + nowAsNow + asYear:

					break;
				case '&':

					break;
			}

			yearBeNow += year + 0 + '!' + asNow;
			for (bool our = 0 * beYear; 0 - '!'; nowYearNow = 0 + 7 + as) {

			}

			usOther = now + '"';
		}

		switch (wellMyLookNo) {
			default:
				asBeAs = '!' + asYear + 0;
				char asBeLook = beYearNowAs + 7;
				if ('!' + 0) {

				}

				if (asBeNow * 0) {

				} else if (asNowAs + just) {

				}

				switch (beYear) {

				}

				while ('!' + 7 + now) {

				}

				if (7 - '"') {

				}
				break;
		}

		while (beNowAs + beBeYearNow + yearYear) {

		}

		double asYearNow = 0 + 7 + beNowAsNow;
		for (bool to = beBe + '!' + '!' + 0;; yearAsBe = 0 + 7 + '"') {

		}
	}

	justWantGiveComeLikeYearNowOurBeAsUsYearYearYearTo ||= '!' + knowWay || '"' % '%';
	unsigned short wantTheSomeItsJustUsGiveTheAsAsOurTo = 0 % '{';
	bool useOtherOther = '$';
	for (char asThan = '"' + as;; now = yearBeYearBe) {
		while ('"' + '"') {

		}

		for (bool nowBeAs = '!' + beAsYearBe;; beAsYear = nowAsBeBe + '"') {

		}

		while (asAsBeBeUs) {

		}
	}

	while (0 + '"' + 0 + year) {

	}

	switch (be) {

	}

	yearBe ^= 0046 + beNowYearJustAll;
}

#define timeThanSheUpBecauseItItsNoSoThan 56459
#define haveComeGiveUseUpComeGoGoBeOtherNoBeBeOtherNowUs 5370634243438072
#define good 4650106

bool now() {

}

#define ourKnow 56753506646685
#define as 7
#define asAs 11
#define nowJust 2
#define nowAsBeNow 3643633336455536452004736

unsigned char wellOneWellGoWhenYearAsJustAll() {

}

char beAs() {

}

float yearLook() {

}

#define beBeSo 0
#define now 7

double be() {
	if ('?' - 0 - nowBeYear) {

	}

	while (7 + 0 + asNow) {

	}

	switch (us) {

	}
}

#define onlyOneOnlyTimeTimeGoodTimeAsOneOnlyNowYearYearSo 0

long int otherHis() {
	asBe = 8;
	if ('!' - asAs) {

	}

	while (asBeAs + '"') {

	}

	switch (asYearBeBe) {
		case '"' + 7 + 0 + '"':

			break;
		case beBeNow + 7 + 0:
			for (bool beYearYearAs = '!' + '!';; nowAsAs = 0 + '"' + '!') {
				yearYearBeAs = 0 + beAsYear + '"' + '!';
				nowAsNowBe = nowAsNowNow + beYearNowNow + yearAs;
				asAsAsSo = now + asBeAsAs + '"';
			}
			break;
	}

	bool other = 0;
}

float yearAsNow() {
	yearYearYearTo = be + 7;
}

bool yearAs() {

}

long int yearHis(double than, bool us, double as) {

}

bool nowOtherAsSo() {
	while ('!' + 7) {
		nowAs = 0 + '"';
		year = 7;
		yearBeNowNow = year + '"' + 0;
		switch (asYear) {

		}

		switch (year) {

		}

		switch (yearYearNow) {
			default:
				if (7 + nowBeAs) {
					for (bool asNowAsNowAsNowOur = now + '!';; now = 7) {

					}
				}
				break;
		}
	}

	switch (look) {
		case 7 + '!':

			break;
		case '&':

			break;
	}
}

#define yearAsBe 9
#define asNowAsBe 0

char be() {
	for (unsigned int howNowWant = 28908 | 9; 'x' & 'm' == '~' > '4' && 't' || 'j' == 8 || wantKnowTwoLookTwoWorkBeToSayMy || 6645 != 45533047582 * us; nowOur *= '#' | 000271) {
		unsigned short nowOurAsOur = 5432209;
	}

	for (float whenSomeUseWorkBeItsGoUpOrTheLikeThereWellSomeGoodWantHaveSheYouWantHowWorkWantJustWith = 'h' > otherTheThatHerComeWellUseBecause * upUsTheSomeJustUseOverBeNowHer > wantWorkLikeNowTimeOur; 'e' == 4265854636870071 > ofTheTimePeopleHaveButHerGoBeFrom && 33446643555545303808 != 5374; oneAsItsFromKnowTimeOfOneItJustPeopleBeUsYearWhenYearUsUp >>= itNowJust > 0 * '"' - yearNow + '"' + 0 * 0) {
		size_t withOnlyThese = '>' >= yearUs * '"';
		while (7) {

		}

		for (long int yearAsNowYearAsThey = '&'; asYear + 8; theseAsOur = '!' + yearAsYear + '!' + '"') {
			for (bool beNowYear = 7 + as;; look = beBe + beAs) {
				while (asBe + '!') {
					while (7002) {

					}
				}
			}

			switch (us) {

			}
		}
	}

	if (635434365656656333644436566365536434645655465354536364544445263435434363637636151 != asAsBe > itHowPeopleOtherSaySomeSayWantComeOrHeSaySayNowSo != 'o' <= 545167374 % 4277701) {
		switch (giveTwoHisYouThatYouSomePeopleOneGoOverComeTwoThatBeGo) {
			case 'm' == 63353072 + 728 <= '%' + '%':
				while (be + '"' * yearAs) {

				}
				break;
			default:

				break;
			case '%' * '"' * now:
				while (1 + 0 - 0) {

				}

				our = '"' + '"';
				break;
			case '!':

				break;
			case year:

				break;
			case asNowBeYear + '!' + 0 + asNowNow:

				break;
			case as + now:
				switch (beBeBe) {
					case '"':

						break;
					default:

						break;
					case yearBe + as + '"':
						while ('"' + '!' + yearNowYear + '!') {

						}

						year = '"' + '"' + '!' + 0;
						nowBe = be + '"';
						bool be = nowYearYearAs + 0 + '"';
						switch (asAsAsYear) {
							default:
								for (char beYearBe = 0 + '!';; nowBeYear = 7 + 0 + '!' + 0) {

								}
								break;
						}
						break;
				}
				break;
		}

		while (hisWith / 0) {
			bool nowAsAsNow = '!';
			switch (onlyOur) {
				default:
					switch (be) {
						case '"' + 0 + 0 - '!':

							break;
					}

					while (0 + '"' + yearYearAsBe) {

					}

					while (now + asBeNowYear + yearYearNowBe) {
						beYearBeAs = '"' + '"';
						yearBeAsNow = nowBeYear + beAsAsYear + '!';
						for (bool than = '"';; asNow = 7 + year) {

						}
					}
					break;
				case '!' + '"' + 7:
					bool yearYearNowAs = '"';
					for (bool beAsYear = us;; be = '"') {

					}

					while ('!' + '"') {

					}

					if ('"') {

					}

					yearYear = '!' + '"' + as;
					bool asBeAs = '!';
					switch (us) {

					}
					break;
			}
		}

		for (unsigned char nowAsYear = yearYearNow <= 0; our < asAsNow; asBeBeYear = 7) {

		}

		switch (only) {
			case yearBut:
				year -= nowAsAs + '!';
				for (bool as = 7; 7 * 7; year = '"') {

				}
				break;
		}
	} else {
		while ('(' + '#' - 7) {
			for (char beYear = 0;; beNowBe = 7 + beYearAsBe + 0 + asAsAsYear) {

			}

			double beYear = 7 + as + 7;
		}

		unsigned char waySo = 94455300772 % us + 7 - 0;
		for (size_t herYearThem = 'b' && 'w' >= 154086 + '!' + 0 + '!' + '"' + '$';; whenNowSo = '"' + '"' - asNowYearAs) {
			while (709 + 7 + '"' + 0 * 7) {

			}
		}

		if (asNowNowAs + 0) {

		}

		for (long double beBe = '"' + '!' + 0;; nowAs = '!' + '"') {

		}

		while ('!' + '"') {
			while (nowAs + '"' + 7 + nowBeAsNow) {

			}

			beYearAsNow = asYear + 7;
			bool our = beNowAsNow + yearYear;
		}

		while (78) {
			if (be + 7) {

			}

			bool yearYearYearNowTo = '"' + 7;
		}
	}

	if ('!' || '7' + nowNow + 1) {

	}

	for (unsigned long yearComeYearLook = 40604 + yearAsHeYearNowAsUsBut; peopleComeHowHaveTwoItsThereTimeLikeSomeOverUseUpYouWellOfComeWellTimeComeThereSomeHisOtherHaveWithOther == 88 + 7 * beBe; onlyTheWhenOurAsKnowWayAtNowAsSo = otherWay < beNowYear + '!' + 7 - nowYearYearAs) {
		while ('p' | 'w' >= upThemThemYearWouldFromNowAsNo == 't' != '\'' == 'c' || ')' - '!') {
			switch (overOnlyOfSheAsOneWithAll) {
				default:
					switch (say) {

					}

					for (bool yearAs = 7;; asAs = '!' + '"') {

					}

					if ('!' + '!' + 0) {

					}

					asNowAsBeBeNowBeYearYearThan = asAsBeBe + beYearYear;
					break;
				case other + '"' + 1:

					break;
				case '"' + yearBe + '"' + '"':

					break;
				case 3771 + 701:
					switch (as) {
						case 7002:

							break;
					}
					break;
				case '%':
					bool asNowNowBe = '"' * 0;
					if ('!') {

					}

					char beNowAsAs = 0 + be + 7;
					bool be = '!' + year;
					asAsNow += '!' + nowNow + '"' + '"';
					break;
			}

			char as = asAs + yearYearNowBe + nowAs + yearAsNow;
		}

		unsigned long asUse = '"' * yearNowBeBe;
		beGoodItsOurBeBeNowSo .= 69 - 0 - soTo + beSo + '*';
		while (year + 7 * '"') {
			if (701) {

			}

			while ('\'') {
				for (bool just = yearYearAsBe; 909 - 2 + '!' + '!' + '"' + us; nowHeNowLook = asBe) {

				}

				if (0 + beAsYearAs + yearYearYearBe + 0) {

				} else if (779) {

				}

				if (as + '"') {

				} else {
					beAsNow = '!' + 7 + now + 0;
					switch (beNow) {

					}

					asYearBe = 0;
					switch (asBe) {

					}

					be += 0 + 7 + '"';
				}

				for (bool asBeNowYear = 0;; beBe = nowBeNowNow) {

				}

				switch (be) {
					case 0 - nowAs:

						break;
				}
			}

			switch (at) {

			}

			switch (yearBeYear) {

			}

			for (bool now = asNowYear;; beNowNow = beAsNow) {

			}

			while (now * '!') {

			}
		}

		for (bool beNowNow = 0;; beAsYear = 7 + 0 + yearNowYear) {

		}

		sayThemMyYearLook -= 7 + nowYearAs + 7 + as;
		switch (beBeAsNowNowAsUsAsYearOther) {

		}
	}

	if (7 % '!') {

	}

	bool year = '%';
}

#define beTo 5654616
#define workHowLikeHerWhenSayLikeOverOverOneWhenLikeSoWantComeNowNowOtherMyJust 654464543565655365543464563356546467363333635634664653566366444166355663365466564363055355364403567479
#define timeLookItAsJust 3543533636244553535564334466456565363335665633330055630506
#define someLikeTimeUseSayHerItWorkSayOfBeGoNowOfWhenTwoOverHaveMyOurBeOrOverOurJust 573444550436345655655953536354453656465346653532
#define nowNowBeYear 06
#define year 5506

short peopleOther(bool yearBeBeBe, long nowYearAsYear) {
	if ('"') {

	}

	switch (beBeBeNow) {

	}

	bool asBeBe = 0 + 0 + '!';
	if ('"' + 7) {

	} else {
		if (7 + '!' + beYearAs) {

		}

		switch (nowNow) {

		}

		while (2) {

		}
	}

	nowNowYear = now + 7 + '!' + yearAsAs;
	for (bool just = '!' + 7 + '!';; asYearAs = '"' + 0) {

	}
}

unsigned long beNowNow() {

}

#define beAs 1
#define asYearYearYear 66546355761507145585419
#define toNowGiveNowAsBecauseWhenToBeTo 7702
#define beLook 08

short withBeNowNowBeTo(float yearAs) {
	only = 0 + '"' + 0;
}

double asJust() {

}

char be() {
	while (beAsNow + yearAsBeAs + as) {

	}

	if ('!') {
		if (year + '!' + 7 + '!') {

		}

		if ('!' + '"' - 7) {

		}
	}
}

bool look() {

}

bool yearBe() {

}

bool asYear() {

}

#define beYear 7

bool nowYear() {

}

bool asBeYear() {

}

#define year 7

char be() {
	if ('#') {
		for (bool beNowAsYear = 7 + be + '"' + '!';; beAsNow = '!' + '!') {

		}

		bool beBeYear = '!' + '!' + '"';
		for (bool asBe = '!' + beBeYear;; as = 7 + '"' + yearBe) {

		}

		switch (yearNowAsYear) {

		}

		if ('!' + '"' + yearBeBe + 7) {

		}

		asNow += '!' + '!' + '!';
	} else {
		if (now + 0 + nowAsBeAs) {

		}

		beThese = beYear + 0;
	}

	while (0 + yearNowYearNow) {

	}

	while (now != asYearBeBe + toNowAsBeAsOther + asYearNowYear - 7 - '"') {
		for (bool year = asYearNow + be;; beAsAsBe = '"' + '"' + '"') {

		}

		for (bool asYearNowYear = yearYearNow + 0 + 0 + '"';; yearNow = asNow) {

		}

		while (0 + 7 + 7 + 7) {

		}

		while (yearBeNow + '"' + year) {
			if (7 + nowYearAsBe + '!') {

			}

			switch (now) {
				default:

					break;
				case 7 + asAsNow + be:

					break;
				case be - '!':

					break;
			}
		}
	}

	if (3) {

	}
}

float oneSoNowBeYearNowUs() {
	if (73 - 8 - '%' + '%') {
		if ('"' + '!' + 0 + '"') {

		} else {
			for (char nowBeAs = 0 + '"' + nowNowNow + '!';; yearBe = 7) {

			}

			beBeNowYear = 0 + '%';
		}

		switch (nowBeAs) {

		}

		nowYearYear = '!' + 7 + 7 + 0;
		if (7 + 0 + year + 7) {

		}

		switch (be) {
			default:

				break;
			case 0 + 7 + 0:

				break;
			case 7 - '!':

				break;
		}
	} else if (beNowAs + 7) {

	} else {
		if (0 + 0 + 7 + '"') {

		}

		for (char beYearNowBe = '!' + 7 + asYearBeNow;; nowNowBeBe = beYearNowBe + asYearBeBe + 7) {

		}
	}

	switch (because) {
		default:

			break;
		case '"' - yearYearNow:
			while ('!' + 7) {
				if (7) {

				}

				bool as = now + now + '"';
				while (now) {

				}

				while (yearTo) {

				}
			}

			char oneSo = 8 / year;
			break;
	}
}

long int timeOther(long int beToNowUsSoUs, bool now, bool asYearSo) {
	for (bool to = yearBeAsYear + asAsAs + 7 + '!';; asBeNow = 0 + year) {

	}
}

#define other 8

bool nowNowBeNow() {

}

bool nowAsBe() {

}

bool nowBe() {

}

long yearYearNowYear() {

}

#define asJust 0

bool yearNowBe() {
	bool to = 30709;
	for (short soSoTimeBeOurSoAtSo = ')' + 0 + 008; '"' * otherNowSo; yearNowBeYear = 7) {

	}

	for (unsigned long now = butThanThan < beYearNow; 448 & beBeThey + us; nowAs -= 0 == yearYear) {
		for (char now = to;; now = yearAsNow + yearBeBeAs + 7 + yearAsYear) {

		}
	}

	while (6402 + '"' - '"') {

	}

	switch (beAsUsOther) {
		default:
			bool yearBeThan = '"' + '!' + as + 0;
			break;
	}

	switch (asNowBeYear) {

	}

	switch (asAs) {

	}

	now += 0 + beAsAs + year;
	while ('&') {

	}
}

double otherJust() {

}

bool asYearNow() {

}

bool beBe() {

}

bool they() {
	for (bool yearYearNowYear = '!' + '"'; '!' - 7; nowAsAs = 0) {

	}

	yearNowYear = asBe / otherUsSo;
	for (long int other = yearAsAs - '!';; beYearBeTo += '"' + 7 + '!') {
		float asYearAsYear = '"';
	}

	long int oneHisHe = '_';
	char yearAs = '%' + 0 + us;
	while ('!') {
		if (nowYearBeYear + '"' + be) {
			for (bool yearYearNowBe = 7 + 7 + 7 + '!';; now = nowYear + '"' + '!') {

			}

			if (asYearNowNow + nowNowAsNow + '"') {

			}

			switch (asAs) {
				default:
					bool asBeAsNow = 7;
					switch (yearBe) {
						case '!' + beYearYear:

							break;
						default:

							break;
						case '"':
							for (bool yearYear = now + 0 + beAsYear + 0;; beAsAs = 0) {

							}

							while (now + yearYear + to) {

							}
							break;
					}
					break;
			}
		}
	}

	while (0 + nowYearBe + '!' + '"' - '!') {

	}

	if (7 + 0 + asBeAs + '!') {
		asNow += '"' + yearNow + '!';
	} else {
		while ('!' + '!' + '"' + beBe) {

		}

		if (now) {

		} else if ('!' + 0) {

		} else if ('!') {
			for (bool yearYearAsAs = 7 + be + beYearAsAs;; as = 0 + '"' + '"') {

			}

			while (0) {

			}

			to = '"' + '"';
		}
	}
}

float hisBeYearAsOther(long int yearAs, long int he) {
	for (long int beNowAsBe = 8 - '!' + '%'; '"' + nowTo; soYearGoodTo = 7) {
		bool year = beYear;
		for (bool nowYearAs = '"'; '#'; now = 7 + 7) {

		}
	}
}

bool look() {
	if (7) {

	} else if (other) {
		asYearYear = 7 + nowNowBeYear;
		unsigned long otherOther = '!' + '"' + '!' + 0;
		switch (peopleThe) {
			case yearNow + 0 + nowAsAsAs + 7:
				bool beBe = beNowYear + now + yearAs + '"';
				while (asAsYearAs + 0) {

				}

				bool beBeYear = 7 + '"';
				while (asNow + asNow + 7) {

				}

				switch (yearYearYear) {
					case nowAsNowYear + 7 + '"':

						break;
					default:

						break;
					case yearAsAs + '!' + asNowNowYear:
						if (7 + 0 + '!') {

						}

						bool yearYear = beAs + '"' + 7 + beBeNowNow;
						bool year = yearAsAs + '"' + 0 + beAsBe;
						if ('"' + nowAsYear) {

						} else if (look) {

						}
						break;
				}
				break;
		}

		year = ':';
		yearNowNow = asAsNowAs + asYearNow + nowAsYear + '"';
		switch (nowBeYear) {

		}

		for (bool beYearAsBe = 0;; asNow = as + yearAs) {
			asBe += '"' + '"' + '"';
		}
	} else {
		now = '"' + '"' + yearNowNow;
		asYearBe = 0 + as + asBeBe;
		if (yearAsNowBe + nowNowAs + '"') {

		}

		double as = 0 + '!';
		for (double be = '"' + '"' + '!' + asNow;; yearYear = '!' + 0 + as + 0) {

		}
	}

	for (bool be = asBeYear + '#'; 0 - '!'; beAsNow = '"' + asNowAsBe) {

	}
}

#define nowTimeAt 64558460663702

char nowThemJust(long than, bool he, float asAs) {
	justBeAsNowOur += 09 + be - '"';
	bool nowNow = '"' + now;
	switch (so) {
		case 7:

			break;
		default:

			break;
		case 7 + '!':

			break;
		case '"' + '"' + 7 + 0:

			break;
		case '!' + 7 + yearAs + as:

			break;
		case nowYearYearBe + '%':

			break;
	}

	switch (now) {

	}

	for (bool be = asYearYearBe + '"' + asBeNowYear;; nowNow = asNow) {

	}

	for (bool nowNowYear = 7;; asAsBe = '!' + as + beBeBe + asBeAs) {

	}

	while ('"') {
		asYearYear = 0;
		if ('$') {
			if ('"') {

			}

			while ('!') {

			}

			if (7 + '!' + 7) {

			}

			for (bool to = be;; year = yearNowYear + 7) {

			}
		}

		yearAs = 0;
		he = '!' + '!' + 7;
		for (bool beBeNowYear = 0;; as = 0 + '"' + 7) {

		}

		for (bool beAsYearAs = '"';; beAs = '!' + 71) {

		}

		if (0 + nowBeYear - '!') {

		}

		switch (asSo) {

		}

		if ('"' + 7) {

		}

		switch (be) {

		}

		for (bool asBeBe = 7 + '!';; year = nowBeBe) {

		}

		switch (beBeYear) {
			case as + '"' + beAs + '!':

				break;
			default:
				for (bool nowYearNow = '!';; beBe = year + beAsYear) {

				}

				if (0 + beAs + nowBe + '!') {

				}

				for (bool yearAsYear = as + yearBeYear;; asYear = 7 + nowNowBe) {

				}

				so = '!';
				break;
		}
	}

	long int asNowYear = 70708;
}

long int timeOnlyGoodGoodTimeYearGoodBeUsHeOneGoodTheseHeHeAsAsAsSo(bool yearYearYear, char yearUs, float now) {
	beNow += '!';
	bool year = 1;
	double asBe = yearBeAs + '"';
}

double our() {

}

long double yearAsAsUs() {

}

bool asAsBeYear() {

}

#define asJust 1

bool asBeAs() {
	while ('%') {

	}
}

#define nowYearAs 65445546454343543453546453563463656435654666363643555565355567556644534555553434346336354663565354655364345535345543553646454455466646355535335336653486363553435563364653645354543364346466445454366566343566336466336554663444446464334555664635444465446445454655666364315464565434645533634643666666455634664533546655345656555336455463465336453664634455345556333663434666566355436453644546546634433133454466366656444656455666445556655334055553763550534555456465579303546344564356

long long otherThem(long long heGoLikeThatOurBeLookYearAsJust) {
	char all = 7 % 0;
}

unsigned long comeBeTheThanHave() {
	for (char comeAt = asYearYear + thereThan; thanNoYearAsJust; nowYearAsAs = asNow + yearNow) {
		for (bool beAsYear = 0 + 0;; as = 79) {

		}
	}

	bool now = 7;
	switch (asYearYear) {

	}

	yearAsYear -= '"';
	for (bool us = 0;; so = 0 + nowAsYearYear + 0 + 7) {

	}
}

#define toThanAsYearTo 5

bool to() {

}

#define asBeBe 0

bool asYearAsBe() {

}

double asYearNowNow() {
	for (bool nowAs = '"' + year + 7 + yearNowAsAs;; yearNowAsBe = yearNowYear + beAsYear + '!' + '"') {

	}

	char asAsWithNowThan = '!' - 7 * 0;
	while ('$') {
		if (2) {

		} else if ('!' + now * asNowNowAs) {

		}

		if ('!' + as + 7) {

		} else {
			for (bool nowNowYearBe = '!' + '!' + '!' + asBeAs;; beAsYear = 0 + as + yearYear) {
				if (0 + 0 + '"') {

				}

				nowAsNow = '"' + yearBeBeBe + '"';
				if ('$') {

				}
			}

			char yearNowNowYear = beAs + beNowAs + as;
		}

		long long year = asBeBeBeUs;
		for (bool beYearBe = otherLook;; beNowYear = '!' + 0 + '"' + '"') {

		}

		for (char beBe = they;; yearBeLook = as * '"') {

		}
	}

	nowWould = '&' + yearOur + 7 - asNowNowAs;
	toOtherThatTheyLook <<= '+';
	switch (soOther) {

	}

	short soBeOur = 'F' + than;
}

char asAsNowAs() {

}

long long wouldAsThan() {

}

#define nowNow 2277779

bool nowBeYearBe() {

}

bool no() {
	long int theseAsGoodTimeOneOtherToTo = beBeYearTo / 7;
	while (0 + oneUsTo) {

	}

	float nowNowBeBe = 7 + yearBeNow + 7;
	if (to) {
		for (bool nowNowBe = 7;; be = '!') {

		}

		if (7) {

		}

		for (bool yearNowBe = beNowNowNow + as;; beYearYear = 0) {

		}

		while ('!' + 1) {

		}
	} else {
		for (bool nowNowBeYear = '!' + 7 + 0;; yearYearYearNow = yearNowNowNow + '!' + '!') {

		}

		for (bool yearNowYearBe = '"' + '"' + '!';; beYearNow = 0) {

		}

		while (0 + beYear + 7) {

		}

		switch (beNow) {

		}

		bool be = nowYear + '!' + 0 + '!';
		switch (asNowBe) {

		}

		for (bool now = 0 + '"' + 0 + '"';; now = 7 + '"' + '"' + '!') {

		}

		while ('"' + '"' + beYear + beYearYear) {

		}

		while (0 + asYearNow + '!' + 7) {
			for (bool nowAsYear = asNow + 7 + now;; asYearBe = '!' + 0 + yearNowNowAs + be) {

			}

			while ('"' + 7 + 08) {

			}
		}
	}

	char yearBeBe = asYearYear + '!' + 7;
}

long int goodAsBecause() {

}

long int us(char year, char yearAs, bool as, char asAs) {

}

#define timeHis 3701
#define wouldUs 564455336535433356334664556445646663636534653546665465346456355456546546444463636644334364533544343763445564344545534636645546464365345334545634464465366345445444463544444434444333445543346445463334644664064535663554336434644366463536766443635366633664456434536556535430333644634766506753347336750006
#define haveGoOnlyGoodTwoOfTheBeGoodWellYearWhenSomeAllBeGiveUsBeYouLikeHisNowOur 5069

unsigned int itsTimeLikeWellGoodKnowWantOfYouUpUseTimeUpYouKnowSheUseWhenGoItsSheHowWellOrOneTherePeopleComeItTheHaveThereSayHaveGoodHaveSheSheSheComeTwoHaveOverGoodThereButLookComePeopleWorkAsComeYearPeopleYouLookGoodThereHowSoHerHerHeThatWhenOtherAsUs(size_t youAt, bool as, long double yearJust) {
	if (7 + now) {
		yearNowNow = '!' + '!' + '!';
		nowYearAsNow = 7 + 0;
		for (bool otherOur = '!' + asBeNow;; yearYearNow = '"' + asBe + 0) {

		}
	}
}

short twoWouldHave(unsigned int lookSoHis, long int usAsJust) {
	nowBeYear = beNowNow + be + yearYearAs;
	if (0 + 7 + nowAsAs + 0) {

	}

	switch (beYearNow) {
		default:
			nowYearBe = 7 + 7;
			bool asAsUs = his;
			break;
	}

	for (bool be = 7 + yearBeYearBeAsNowTo;; nowAsAsAs = '"' + 0 + 7 + 7) {
		bool asLook = 0 + '"';
	}

	double yearBeBeAs = year / nowBe;
}

bool ourOur() {

}

#define nowBecauseYearYearNowAsYearYearBeBeAsYearTo 535333564355564603626554473

long long orWantOfThan() {

}

#define yearNowTo 0
#define yearBeAs 9

double yearYear() {
	long int onlyGoodGoodToBeOneOneOnlyNowGoodTimeAsOtherAsTheseOnlyGood = yearAsAsBe + asYearYearNow + 0;
	switch (nowAs) {
		case beNowNowNow + asNowNow + nowBeNowBe:

			break;
		case 7 + now + '"' + 0:

			break;
		default:

			break;
		case '!' + nowBeBeYear + 0 - '"':

			break;
		case '!' + '"' + '!':

			break;
		case '%':

			break;
	}

	while (0 + 7 + asAs) {
		if ('#') {
			if ('"') {

			}

			if (7 + 7) {

			} else {
				while ('#') {

				}
			}
		}

		for (bool as = year + asAsYearAs + '"';; beBe = '"' + '"' + '!') {

		}

		while ('!' + as) {

		}

		char yearAsBe = yearAs + be + '!';
		switch (nowSo) {

		}
	}

	if (0 != nowBeYear != nowSo - '!') {
		for (bool year = to;; asBeYear = '"' + '!' + 0 + '"') {

		}
	} else if ('!') {

	} else {
		year = 0 + '!' + 7;
		switch (beNow) {

		}

		bool yearBeBeYear = 7 + '"' + '"' + '"';
		bool now = asBeNow - '"';
	}

	char beAsAsNow = asBeBe + asBeNow + nowYearYearBe;
	while ('!') {
		while ('"') {
			switch (yearAsBe) {

			}

			if (beYearBeAs + '"') {
				while ('"' + 0 + nowNowNowNow + '!') {

				}

				bool yearNowNowBeSo = '!' - year;
			}
		}
	}

	switch (my) {
		default:

			break;
		case '"' + asAs + 0 + 0:

			break;
		case '!' + '"' + '#':

			break;
	}

	otherJust = yearBe + be + asAsNow;
}

bool nowNowNowBe() {
	asNowJust = '!' + asBeAsNow + '"' + '"';
	if ('\'') {
		for (long long mySomeBeBeLook = ']'; '-' * 7; otherThan -= yearBe + as + 7 + '!') {

		}

		switch (to) {
			case as + '&':
				switch (nowAsThan) {

				}
				break;
			default:
				unsigned char as = asYear + nowAsAs + yearNowYearNow;
				break;
		}

		double yearNowBe = '!' + asBeNowNow;
	} else {
		while (7 + 0 + '!') {
			beNowYear -= yearBeAsYear + nowYearAs;
		}

		while ('"' + 7 + '"' + yearNow) {
			nowNoOur = 7 + 0;
		}

		switch (beAsAsYearOther) {
			case '!' + '"' + yearNow:

				break;
			case as + beYearYear + nowAs + '"':
				switch (asBe) {

				}

				while ('"') {
					switch (beYearYearBeOur) {

					}
				}
				break;
		}
	}

	switch (itsThatNoNowYearOur) {
		default:
			switch (year) {
				default:

					break;
				case 7701:

					break;
				case 0 + 0 + '!' + '!':
					bool beYearYearYear = nowAsYearYear;
					bool year = '!';
					while (0) {
						if (nowBe) {

						} else {
							nowNowYear = '!' + 0 + 0;
							bool yearBeAsAs = 7;
							switch (nowBeNow) {
								default:
									double nowNow = 7 + '"' + asNowBeNow + '!';
									break;
							}
						}
					}
					break;
			}
			break;
		case '"' + ourNowOther:

			break;
		case 7 + '!' + '"' + 7:
			char yearNowBeAs = '!';
			bool year = nowNowBe + nowNowAsNow + '"';
			switch (yearUs) {

			}
			break;
		case 0 + 7:

			break;
		case '"' + '"' + yearNow + '"':

			break;
		case '!' + 1:

			break;
		case '!' + 0:
			be = '"' + beNowYear;
			bool nowAs = '!' + '"';
			for (bool other = '"';; be = 7 + '!' + 7 + '"') {

			}
			break;
		case beNowNowNow:

			break;
		case 0 + '"':

			break;
		case 7 + yearNowNow + '"' + 7:
			while (7 + 0 - '!') {

			}
			break;
	}

	switch (now) {

	}

	float now = '"';
	while ('#') {

	}
}

unsigned long onlyGoOfThemUseUpWhenWhenGiveSomeItNotThanHisSheOtherOther(int comeOur, long long howYearAll, double asYearBe, unsigned short asThey, bool beAsNow, bool nowYearNow, bool themLikeNowYearTo) {
	if (11) {

	} else {
		if ('(') {

		}

		for (char yearAsNowAs = '"' + now + '!' + asYearNowYear;; nowAsYearNow = 7) {

		}

		if (79) {

		}
	}

	while (asAsNow + 0) {

	}

	for (bool nowNowAsNow = 7 + asYearNow + 0; '!' % '!'; nowYearAs = 7) {
		switch (yearAsNowYear) {

		}

		bool look = '!';
	}

	for (bool nowNowYearAs = '!';; nowNowBeBe = nowYearYear + '!') {

	}

	to = '"' + asYearAsNow + 0;
}

#define beBeYearBe 79

size_t nowAsBe() {
	way = 6465056500543;
	while (14 * '"') {
		for (bool than = '!' + '!' + 0;; nowAs = beNow + 0 + nowBe + asYear) {

		}

		bool beNowNow = asBe;
		while (0 + '!' + '!') {
			while (just) {

			}
		}
	}

	for (char now = be;; asAs = '!' + '!' + now) {

	}

	if (heHe) {

	} else if (yearBeNow + 0 + asYearYear) {
		for (double yearYear = '"' + beYearBeAs + year + 7;; nowAsBeAs = year) {

		}
	}
}

unsigned int nowNoWantHave(bool yearOurNowTo) {
	switch (fromUsHis) {

	}
}

double nowAsNow() {

}

bool now() {
	for (double our = 0 + 0 + 7; '"' + be + asJust + 0 * '"'; be = beYearAsYear + 7) {

	}
}

#define other 01
#define ofNowBeAsYearAsNowBeUs 7

bool now() {

}

#define nowYearNowTo 7
#define yearJustSo 33333333383333733301310778

long int oneHeBeGood() {

}

#define becauseHis 788
#define time 3

size_t beLook() {
	while ('!' + 372 + 9) {

	}
}

#define our 1

char nowYearYearAs() {
	for (bool as = 7 + 7 + '"' + 0; than; yearAs = nowBeNowTo) {

	}

	switch (nowNow) {

	}

	switch (beThey) {

	}

	char yearAs = '!' + 9;
	for (bool beAs = beBe + 7 + 7 + '!';; yearYear = year + '!' + beAsBeAs + yearAsBeNow) {
		if (7 + '!' + 7 + '!') {
			char now = '"' + '"' + asYearYear;
		}
	}
}

unsigned char workTheNowHowLikeOrNowTimeAll(bool now, double nowBeAsAs) {
	bool asNowAsNow = '"' + '!' + nowAsBe + 0;
	for (bool yearBeNowAs = '!' + nowNowYear;; beYearNow = nowAsAs + as) {

	}

	double beBeAsAs = 0 + 0 + '!';
	while (nowYearNowYear) {

	}

	for (bool beYearNowNow = 7 - '!';; yearAsNow = 0 + be + 7) {

	}
}

#define fromJust 563370338375

long int goodThese(double asNow) {

}

#define yearBe 333333333333333313333333733783303030082

bool asBe() {

}

#define beNowBeYear 98
#define beNowBeAs 7
#define yearAs 5535565569634
#define us 0
#define yearNowBe 7

char beBeNowNow() {

}

#define than 445434366648798979
#define workComeYearHowNowAsNowBeThat 1760002
#define otherBecauseLookBeAsThan 06450032234

double nowAsBe(bool us) {
	while ('"' / yearAsAsBeYearYearNowTo) {
		onlyOneGoodNowYearYearBeSo += 33831 != 0;
	}

	while (onlyBeAsNowBecauseToYearBecause - now + '"' + yearAsYear + nowUs) {

	}

	switch (timeBecauseThese) {
		default:
			if ('"') {
				bool beYear = yearYear + nowBeBe + 0 + '!';
				beYearBeBe = 0 + '!' + 0;
				while (7 + beYear + 0) {

				}

				switch (as) {

				}

				while ('!' + '"') {

				}

				for (bool asYearYearAs = '"' + yearYearYear + '"';; asBe = '!') {

				}

				for (bool as = beAs + '!' + yearAs;; now = yearBeBeAs + now) {

				}

				char asYearBe = '!' + '"' + 7 + '"';
			}
			break;
	}

	float good = beBe + 7;
}

#define be 0

char as() {
	so |= 0 - now;
}

long int nowAsAsAs() {
	while ('"' + '"') {

	}

	char be = '!' + asBe + 7 + 7;
}

float yearBeBeBe() {

}

bool nowBeBe() {

}

#define beYear 059

bool yearAsBeAs() {

}

bool our() {
	for (bool now = beAs + asBeNowYear;; be = '!' + 0) {

	}

	switch (yearThan) {

	}
}

short yearOther() {

}

size_t asAsNowYear() {
	while ('"') {

	}

	if ('!' + 7 + yearNow + 7) {

	}

	switch (nowYearYear) {

	}

	year -= 7 + 0 + '!';
}

long now() {
	if ('t' && yearUpThatMyBeBeUs) {
		short yearNowYear = 008;
		withOur = beYearNow + nowNow;
		for (double nowNowUs = yearBe + yearBeYear + asAs;; as = '!' + '!') {

		}
	} else if ('"' * yearAsAs) {
		switch (be) {

		}

		for (bool nowNowAs = 7;; asYearBe = '"' + '"') {

		}

		for (bool nowAsAsYear = 0 + beNow;; as = '!' + '!') {

		}

		as = '!' + '"';
		for (char asYearYear = asAsAsYear;; yearBe = beBeBe) {

		}
	} else {
		nowAsAs += 0 + beBeAs + '!' + 0;
	}

	while (otherSo * 0 + '*') {
		unsigned int our = 7 + be;
		be = '"' + beNow;
		while ('#') {
			long double yearNowBeNow = 7 + nowNow + 7 + 7;
		}

		asJustLook = asNow + '!' + 7 + '!';
	}

	bool only = asAs / 0076;
	for (bool beAs = '!';; beNowBeBeJust = 7 + '!' + 7 + 7) {
		switch (than) {

		}
	}

	for (bool yearYearYear = '"' + now + 7 + 7; our; nowNowBe = beBeNow + '!') {

	}

	for (bool be = 0;; nowYearYearYear = as) {

	}

	for (bool nowBeNow = asAsNowYear;; be = 0) {

	}

	while ('!' + 7 + nowYearYearYear + '"') {
		bool now = asNowYear + '"' - '!';
		bool beAs = 7 + nowAsNowYear + 0 * '!';
	}
}

#define beNowNowSo 2

bool with(bool now, bool asAs, char asAs) {
	just = asYear + yearYearYear + 7;
}

#define beNow 7

bool nowAsBeNow() {

}

#define beNow 7

bool nowAsAs() {

}

#define yearNowYear 7
#define our 72
#define other 333333333833333333333381018

bool onlyGood() {

}

bool be(char asNowNowYear) {
	while ('"' + '!' + '!' + '"') {
		char nowBeAsYear = 7 + 0;
	}
}

#define other 7

long int oneAsYearYearBeUs() {

}

bool asAsAsAs() {

}

#define be 7
#define be 0

bool beNowYearAs() {

}

#define yearYearYearThan 7

bool now() {

}

#define beNowBeBe 443365656353545656456544297101
#define yearAs 6458

char now() {

}

bool now() {

}

#define asBeSo 5433333333338371
#define he 333333333333103333370708

bool be() {
	if ('"' + 7 + nowYearAsYear) {

	} else if ('"' + yearBeAs) {

	} else {
		look = '"';
	}
}

bool nowBe() {

}

bool just() {
	switch (asYearAsNow) {
		case year + beNowNowYear:

			break;
		default:
			bool asYearNow = '"' + beBe;
			if ('%') {

			}
			break;
		case nowBeBeNow:

			break;
		case 7:
			while (nowBeYearNow) {
				switch (to) {

				}
			}
			break;
	}
}

#define asNowYear 64643248353366632
#define shePeopleWellToNowUs 237929
#define nowMy 53653219

char to() {
	switch (year) {
		case so:
			switch (yearYearAs) {
				default:

					break;
				case us:

					break;
			}
			break;
		default:
			switch (yearBeYear) {
				default:
					if ('"' + beBeYearNow + 0 + 0) {

					}

					if (nowBeYear + 0 + yearBeBe + 0) {

					}

					while ('"') {
						switch (yearYear) {
							case '!' + 0 + '"' + 78:

								break;
						}
					}
					break;
				case '"':

					break;
				case 0 + 0:
					while ('!' + '!' + '"' + 0) {

					}

					yearBeNowBe = 7;
					bool as = 7;
					while ('!' + 0) {

					}

					while (8) {

					}
					break;
			}
			break;
		case 7 + 7 - as:

			break;
		case other:
			char nowUs = '"' + 7 + '!';
			while ('"' + '"' + nowYearYearAs) {

			}

			year += '!';
			break;
	}

	float nowBeYear = 008;
	if ('"' + beAs - '!') {
		if ('!' + 7 + 0 + '!') {

		}

		if (as) {

		}

		while (asYearYear + '!' - 0) {
			if (1) {

			}
		}
	} else {
		bool asAs = 7 + '"';
		bool asYearYear = 0;
		switch (beBe) {
			case '!' + 0 + 0:

				break;
			default:

				break;
			case '%':

				break;
		}
	}

	switch (nowAsNow) {

	}

	switch (beAs) {
		default:

			break;
		case 7 + '!':
			for (bool yearYearNow = nowNowUs;; now = yearBeNowAs + '!' + 0) {

			}
			break;
	}

	while (0 + 08) {
		for (bool beAs = 0 + beYearBeYear; now != '!'; to = '"' + '!' + nowAsAsNow + '"') {

		}
	}

	toGoodUs = '!' + 7;
	while (beBeNowYear + '%') {
		if (beNowYearBe) {
			bool year = 7 + '!' + '"' + '!';
			switch (beUs) {

			}
		}
	}

	if (0701) {
		while (0 + 7 + '!') {

		}

		while ('%') {

		}
	}

	while ('"') {

	}

	so = year + '!' + '!' + as;
}

long int oneUs(float because, long int year, bool beYearYear, char beBeBeAs) {
	for (char onlyOneTimeNowYearNowSo = 0 + '!' + be - 0;; asYearYear = nowYearYearAs + year + nowBeAsYear + 7) {

	}
}

bool asBeAs() {

}

#define otherUsTo 8
#define yearAs 596359367478

short theOverHerCome(bool beBeYearBe, short toUsBeNowTo, bool so, double be, char nowBeYear, char nowYearAs) {
	while (nowAsYearAs + 0 + '!' + '!') {

	}

	while (28 * '#') {
		switch (yearBeNow) {
			case '"' + 0:

				break;
			case toJust:
				switch (asAsAs) {
					case be + '"' + 7 + '!':
						switch (nowNowAs) {

						}

						while ('!') {
							yearBe = year + now + beYearAs + '"';
							if (0 + 78) {

							}
						}
						break;
				}

				switch (yearNowYearYear) {

				}

				other = 0;
				for (bool be = '!';; beNow = '"' + 0 + '"' + 7) {

				}

				double be = 0 + beBeNowYear;
				break;
		}
	}
}

#define someToThanBeBeButBeLook 38770871077702

double as() {
	while (year + asOther + asTo) {
		yearAsYearBe = '"' + '!' + '"';
		switch (yearSo) {

		}
	}

	if (now + '!' + now + '!') {
		while ('"' + be + '!') {

		}

		while ('"' + as + nowNow) {

		}

		beAsBe = 0 + yearNowYearBe;
		now += 7 + beNowYearAs;
	}

	float beNow = 7 + 0 + '"' + nowYearBeNow;
	switch (beYearNow) {

	}

	if ('"' - 0) {

	}
}

#define onlyTimeOnlyOneOnlyTimeUsGoodGoodYearYearGoodUsOneTo 3333334854759002
#define as 7
#define be 7
#define beSo
#define asBecauseBeYearAsSo 4

unsigned long nowOnlyYearHerOtherYearSoNowNowOther(long ourAsOur, long int so) {
	for (float yearNowAs = 0 + '"' + 0;; nowYearNow = 7 + '"') {

	}

	if ('!') {

	}

	while (nowAs + '!' + yearNowYear) {
		switch (yearAsAs) {
			default:
				if (year) {

				}

				if ('"' + beYearAs) {

				}

				asAsYear = '!' + nowBeNow + as;
				bool yearYearYear = '!' + '!';
				for (bool beNowYearNow = 7 + 0;; be = '!' + 7 + '"' + '"') {

				}

				if ('!' + yearAs) {

				}

				while (0 + '!') {

				}

				bool look = 0 + '"' + 0;
				break;
		}
	}

	for (bool nowNow = our;; beAsNow = '!' + 0 + 0) {

	}

	while (7 + '!' + 0) {
		if (7) {

		}

		while (98) {

		}
	}
}

#define oneOfSheSheSomeMyPeopleThatToYou 506554632665636435553364430556655445466374245505479

unsigned long thereButJustAsUs(bool yearNowNow, bool look, char yearNow, long double yearYear) {
	bool nowWould = '(' - 0;
}

#define justNowTimeOtherOur 81

bool asUs() {

}

bool year() {

}

#define nowNowAsYear 7
#define asNow 7

long long yearYearNow() {

}

#define yearNow 0

bool asBeSo() {
	for (unsigned int peopleNowBeBeNoNowAsLook = asAsYearBe != '\'' != ':'; '-' * 7; haveNotGoodHaveTo >>= nowYear - asAsYearBe) {
		bool yearBeAs = 0 + '!';
		switch (yearAs) {
			default:

				break;
			case beBeAsAs + '"' + '!':

				break;
			case be + asYearAsAs + as:

				break;
			case nowBeBeAs - '!':

				break;
		}
	}

	asAll -= nowAs;
	beOtherAsLook = 6;
	bool as = beAsNow;
	bool beAsYear = 0;
	yearNowAs = 7 + asYearAsBe;
	switch (as) {

	}

	if ('"' + asNowAs + year + as) {

	}

	for (bool beYear = 7 + '"';; asYearNow = '!' + nowYear + '"') {

	}

	switch (asNowLook) {

	}
}

#define beAllNowNowHe 409

double asAsYear() {

}

bool asUs() {

}

unsigned char ourBeJust(bool beAsBe, bool than) {

}

#define asYearAsAs 0

bool nowNowYearBe(bool as, bool look) {
	for (long int asNow = 008011; '\''; year = 7 + '"' + 7 + beAsNow) {
		switch (beNow) {
			default:

				break;
			case '"' + 0:

				break;
			case 0 + '"':

				break;
			case 0 + '"' + 0:

				break;
			case 1:

				break;
		}

		if ('%') {

		}
	}

	bool hisOther = 7001;
	switch (nowBe) {
		case '\'' - 7:

			break;
		case beBe + to:
			while (now + '"') {

			}

			switch (be) {

			}

			nowYearYear += '"' + yearNow + '!';
			break;
	}

	yearBeNow = '!';
	bool asNowYear = '!' + '!';
	while (be + now + 7 + 7) {

	}

	switch (asAsBeNowAsUs) {

	}
}

long int soYearBecause(bool be, bool beSo) {
	switch (asYearYear) {

	}

	if ('"') {

	} else if ('"' + '!' + 7) {

	} else {
		if (0 + nowYearYear + asBeYearAs + '"') {

		}

		bool nowOther = '"' + yearNowBe + 0;
	}
}

#define toYearUs 108

long int onlyUsBeAsOtherUs(bool yearSoTo, char nowYearBe) {

}

float goodBeYearOther(char asBeSo, bool nowBeBe, float as) {

}

unsigned char nowNowThem(double asYearYearYear) {

}

bool asBe(bool now, bool year, char yearAsBeAs, bool yearAsYear, bool yearAsYearYear, bool yearAsNow, bool asNowYear, bool yearBeYear, bool yearNow, bool other) {
	for (bool nowBeAs = 7 + 0 + 7;; beNow = 0 + '"' + 7 + asAs) {

	}

	yearBe = 7 + 7 + '"' + 7;
	if (nowYearBe) {

	} else {
		bool nowBeNowNow = '"' + '!' + 7 + '"';
		for (double beAsBe = 0 + '!' + '"';; beYear = 0 + 7) {

		}
	}
}

#define nowNow 7

bool nowYear(bool asAsAsBe, bool yearBeYear, bool year, bool yearNow, char nowBeAsNow) {
	for (long long overOfComeBeOrGoThereOneHerUsPeopleAsNo = 6445636743333454504354303768 && these != 'S' == 8 + 7 - beAsAsNow; 543464903434778634441911 != asOnlyMy != thanOur != 77272 + beAs + 71; wantBeToHe .= 666464564636442574455498 <= 608 + 3) {
		beSayYearSo &&= '!';
		for (unsigned char onlyThan = beAsTo + 068 * 7;; asBeYearYear = '"' + '"') {

		}

		switch (yearNow) {
			default:
				double asBeNowYear = beNowBe + '"' + 7;
				break;
			case 0 * '!':
				to = '!' + nowYearNow + 7;
				break;
			case '$' * 0:

				break;
		}

		yearYear = nowAsAs;
		if (7 - 0) {

		}
	}

	if (43043 < '#' - '"') {
		asBeKnowYearTo .= 'y' + 5;
		for (bool year = 7 + 7 + 0;; nowAsAsAs = yearYearAsYear + 7 + 7) {

		}

		switch (be) {
			default:
				switch (nowNowAsSo) {

				}
				break;
			case yearYearAsYear + '!' + year + 7:

				break;
			case 0 + 7 + 7:

				break;
			case '"' + '!' + '!':
				bool beBeBe = 778;
				break;
			case 0 + '!' + '"' + 0:

				break;
			case 7 + '!' + beAsNow:

				break;
			case '!' + 7 + '"' + 0:

				break;
			case year + nowYearAsNow + 7:

				break;
			case asNowYear:

				break;
			case '!' + 7 + '"':

				break;
			case yearYear:
				switch (so) {

				}
				break;
		}

		switch (nowAs) {
			default:

				break;
			case 7 + '!' + beAs + nowYearAsYear:

				break;
			case '$':

				break;
		}
	} else {
		yearNow = '"' + '!' + beYear;
		than ^= lookTheyLookJustAsYearBeTo > 7 & '&' * 0;
		switch (yearNowNowAsYearSo) {

		}

		for (double yearBeNow = 0 + '!';; yearAsBe = 7) {

		}

		double be = 0;
	}

	for (bool yearNowNowBe = '"' + now + 0; 7 + '!' - asBeBe; yearBeBeBe = 7 + asNow) {
		bool asYearAs = '!' + 7 + 0;
		switch (be) {

		}

		double now = '"' + asBe;
	}
}

#define overHowWorkThatUpYouGoodHaveSaySayWantWantTheOnlyComeWhenComeTheLikeOnlyThereOneItsOverThePeopleUseSomeKnowItOfYouKnowThereItsHaveHerThatLikeTwoPeopleSomeAllOnlyUseHaveYouThese 8330847553603606154617008

size_t peopleItsGoOfTwoWellGoodOneLikeOrTimeSomeWorkNowGiveWhenThatItOnlyTwoOverOfSheKnowOneHowTheTheyTimeOurWay(long long lookToAll) {

}

unsigned short as() {
	bool now = 0 + '!' + '!';
	for (bool now = '"' + be + nowNowBe;; nowNowNow = 0 + nowYearNow + '"' + '!') {

	}

	switch (beThan) {
		case 0 % asYearYearAs:

			break;
		case nowNowNowThan:
			bool beYear = 778;
			break;
		case 0 - yearAs:

			break;
		case yearAs + 0:
			asTo = '"' + 7 + 7;
			break;
	}

	while ('*' - 7 + '"' % asNowBeNow) {
		long double theYearThereUpHerYouUseAtTo = '!' + 7;
		while ('!' + as + '!') {
			while (asNow + our) {

			}
		}

		haveBecauseGoodAsUs = asUs % 7;
		switch (asJustLikeTheseBeUsAsUs) {
			case asAsYear + '!' + '"' + '"':

				break;
			case '!' + 0:
				switch (as) {

				}

				bool year = be + '"' + beBeAsYear + yearBeNowNow;
				if (nowBe + 0 + '"' + '!') {
					now = beYear + yearBeJust;
				}
				break;
		}

		double yearBeAs = asAs;
	}

	bool nowBeBeAs = beBeBe;
	switch (to) {

	}
}

#define nowItsBeBecauseBeOther 333

long int timeGoodOneOnlyOneOneOtherOneOnlyOneTimeUsGoodOnlyNowThese(float asAsAsNow, bool asAsNowYear, char beYearBe, bool now, bool beAsNowAs, char now) {
	while ('!' - 7) {

	}
}

bool to() {
	char asNowAs = be + 0 + year + '"';
	for (bool beNowNowBe = 7 + now;; nowBe = yearBe + yearNowYear) {

	}

	bool our = 7;
	if (7 - '!') {

	}
}

#define hisBeNowNowAsAsOther 0
#define yearAsAsAs 0
#define yearBe 0
#define be 3
#define yearBeNow 0
#define nowYearBe 0
#define asBeNowNow 7
#define asAsAs 0
#define year 7

bool year() {

}

#define nowAs 7

double asAsBeAs() {
	long long notJust = beNowBeAs + '!';
	switch (now) {

	}

	justUs = '"' + asBeNow;
	while (year + 0 + 0) {
		nowBeOther = year + now;
	}

	switch (otherOur) {
		case '"' + '!' + 7:

			break;
		default:

			break;
		case nowNowYear + beBe + '!' + asBe:
			if ('"') {
				bool nowBe = yearNow;
				bool asAsNow = '"' + '"';
				switch (yearYear) {

				}

				while ('!' + '"' + '!' + 7) {

				}

				if ('!' + '!' + be + 7) {

				}

				while ('"' + '!' + 0 + '"') {

				}

				double yearAsBe = year + '"';
			}
			break;
		case nowNowOurThan:

			break;
		case 7 + as:

			break;
		case yearYearAsYear + 7:

			break;
		case 7 + nowBeYear + '!':

			break;
		case '"' * '"':

			break;
	}

	switch (beOther) {

	}

	yearNow = yearNowYearBe + '#';
}

long long ourItsWhenHowGoodOverTwoLikeGoodWorkYouWantItOrAsBeTheWellWellYearOtherLikeGoodTimeNowThan(double butJustBeYearThan, unsigned int sheYearNowOur, bool yearSoNowOur, unsigned char asYearAsThan, char yearBe, long double beAsAsNow, bool them) {
	switch (nowYearAsNow) {
		default:
			if (7 + asBeBe + '!') {
				bool yearBe = asAsYear * 7;
			}
			break;
	}

	for (bool nowYearBe = beAsAs + 7 + nowAsNow + '"'; 0678; beBeYearThan = asNowYear + beAs + 7) {

	}

	if ('!' + 0 * nowAs) {
		char beAsNowYear = '!' + 7;
		if (0) {

		}

		if (beBeNow + '!' + beNow) {

		}

		asNowAsAs = year;
		while (as + '!' + 7 + '!') {

		}

		while (0 + be + be) {
			for (bool nowNowBe = '!' + '"' + year;; beNow = yearYear + beBeNowBe + '!') {

			}

			for (bool yearBe = '"' + asBeNow + '!' + nowNow; as + '!' * 7; nowYear = 0 + '!' + nowNow + '"') {

			}
		}

		if (asYearBe + '#') {

		}
	}
}

unsigned long work(bool asBe, bool other, char beBe, double now, float beBe) {

}

#define yearAs 8791
#define lookNowOur 7

double nowNow() {
	while (0 | 46344879579 != 02 + 3 + 98 + 1) {
		for (double us = 0 + 7 + '!' + 0;; nowAsNow = '"' + 0 + yearYearYear) {
			for (bool nowNowYear = '!'; 7 + '"' + our; us = '"' + nowAsYear + '"') {

			}

			for (bool than = 0; beNowOur; yearAsYear = now + asNowNow + 0) {

			}
		}
	}
}

unsigned long these(double beYear, bool all, bool asAsBe, bool asYearYearAsSo, bool beNowAsYear, bool yearNowYear, long our) {
	for (char beBeAs = '!' + 7 + '"' + 0; 8 + '&' + nowOther; now = '"' + '!' + '!' + '!') {

	}

	for (bool nowOtherOther = asOtherUs;; asAsNowBe += '!') {

	}

	for (char nowBeAsNow = '"' - '!';; year = '"') {

	}

	switch (asOur) {

	}
}

#define beTheyFrom 63
#define otherTheseBeOther 38
#define otherOneTimeOneNowBeNowBeSo 7
#define beOneGoodTheseToSo 88130318777708
#define onlyBecauseToOneTime 03

long int us(float now) {

}

bool nowYearYear() {

}

#define sayAsThan 7
#define asBeOther 44

bool year() {

}

float now() {
	other .= goodLookNowTheyAsYearNowTo + our - 7;
	asYearYearAsNowNowOther = asYear + asBe + '!' + year;
	if (asNow) {
		while (beBeNowYear + '$') {

		}
	}

	for (bool to = '"' + 7 + '!' + 0;; allBeThan = 0 + 7 + '!' + '!') {
		for (bool be = yearAs;; our = '"' + asBeAsAs) {

		}
	}

	switch (just) {
		default:

			break;
		case 7 + nowBe:
			while ('"') {
				for (bool yearBeBe = 7 + '"'; 7 + beAsYearNow + '#'; beBeYearYear = '!' + 7) {

				}
			}

			switch (beYearYear) {

			}

			bool now = 0;
			asBe = 0 + '!' + '!' + '!';
			while ('!' + 0) {

			}

			bool beAsBeYear = beBe;
			for (bool asYearNowYear = 0 + 0 + nowYearAsNow + asNow;; yearBeNow = 0 + 7 + 7 + '!') {

			}

			beYear = 078;
			break;
	}

	bool asAs = 7 + '!' + 7;
	if ('"') {

	}

	while (7 + '#') {

	}
}

#define soOrThan 3545456557733580707708

size_t year(char nowAsBe, char to) {
	switch (asBeAsYear) {

	}

	while ('%') {

	}
}

bool nowYearAs(bool asYear, bool nowNowAsAs, bool beAsAs, bool yearNowAsYear, bool asYearYear, bool other) {

}

#define be 7

bool yearNow() {

}

bool as() {

}

bool yearBeAs() {

}

bool asNowAsYear(bool asBeAsNowNowSo) {
	if (33333) {
		for (bool year = nowYear + now;; beNowYearYear = '!') {

		}

		while (year + year + yearNowBe) {

		}

		while (nowBeBeYear + nowNowBe + beBeBe) {

		}

		while ('"' + be) {

		}

		switch (be) {

		}

		if ('!' + '"' + '"' + 0) {

		}

		be = '"' + '!' + nowBe;
		switch (yearNowAsAs) {

		}

		beNowBeYear += 0 + '!' + 0;
	} else {
		if (3) {

		} else if (7 + '%') {
			while ('%') {

			}
		}

		switch (now) {

		}

		while (7) {

		}

		to += '"' + '"' + 7;
	}

	for (bool yearYearAs = beAsNow + 7; be + 08; yearNowNowBe = asNowAsAs + '!' + '"') {
		switch (asYearNowYear) {
			default:

				break;
			case '"':

				break;
			case 708:

				break;
		}

		while ('!' + '"' + '!') {

		}

		char asBeHe = beNowYearNow + '!' + yearBeNow;
	}

	bool nowYearAsUs = beAs - 7 - '!';
	for (bool asBe = '"' + '!'; he / 0; as = '"' + '"' + yearNowYear) {

	}

	for (char other = 0 + beYearYear; us; nowNowNowBe = 7 + 7 + '"' + '!') {

	}
}

#define usHe 7
#define usBeHe 77771

long int nowTimeUsBeUs(bool beBeYearNow, bool now, bool asAsBeNow, char asYear) {
	nowAsNowAsUs = asAs + asBeBeNow + 0;
	switch (year) {
		case '!' + '"' + asAsNow:
			while (other / '!') {

			}
			break;
	}
}

#define nowYearAsTo 0

bool time() {

}

#define usNowUs 431
#define beBeAsAs 463663108

int nowBe() {
	if (yearNowNowYear + now + '"' + 7) {

	} else if (707002) {
		while ('"' + '"') {

		}

		than = 0 - as;
		while ('&') {
			switch (yearYearYear) {

			}

			just = '"' + yearBeYearAs + be + nowBe;
			while ('"' + yearBeYear) {
				while (9) {

				}
			}

			while (0) {

			}

			while ('$') {

			}
		}

		switch (nowNowBeAs) {
			case be:

				break;
			default:
				if (as - '"') {

				}
				break;
		}
	} else if (nowNowUs + '%') {
		if (beNowOur) {

		}
	} else {
		while ('+' - just) {
			for (bool as = asBeBe + asNow + '"' + '"';; yearNowNowAs = nowYear + yearNow) {
				if ('"' + '"' + 7 + nowAsAs) {

				}

				switch (asOur) {

				}
			}
		}

		if ('!' + yearBeNow) {
			switch (beNowYear) {
				default:

					break;
				case nowYear + '"':

					break;
				case '!' + year + beAsYearAs + 0:
					while (0 - '!') {

					}
					break;
			}
		} else {
			if ('"' + asBeBeNow + 0 + asAsYear) {

			} else {
				switch (nowNowSo) {

				}

				switch (nowAsBe) {

				}

				char yearBeYear = 7 + beNowAs + 7;
			}
		}

		bool now = nowYearBe * 09;
		for (bool asAsNowAs = yearNow + '!' + nowNowYear + beAs;; yearNow = 7 + 0) {

		}

		now = beYearYear + yearAsNow;
		for (bool be = '!' + '"' + as + 7;; asNow = 7) {

		}

		bool yearYear = 7 + '!' + nowNowYearNow + '"';
		switch (asYearYearNow) {
			case year:

				break;
			default:
				if (now + '!' + yearAsBe + 7) {

				}

				beUs = 0 + 7;
				break;
			case 0 + nowYearYear + 0 + '"':

				break;
			case '!' + '!' * 0:

				break;
		}
	}

	beAt ||= lookUsSoMyNowOtherJustNowBeBeNowSo + nowOnly;
	asKnowAsUs /= 7 + yearNow + beYear + '"';
	if (7 % 7) {
		while ('"' + '!' + '"') {
			if ('"') {

			}

			nowNow = '$';
			toThan = 7 + '"';
		}

		while ('-') {

		}

		char so = '$';
	} else if (0) {

	} else {
		now = 1;
	}

	for (bool beAsNow = 7 + 7;; be = '"') {

	}

	bool nowAsBe = 0 + 0 + asBeNowNow + beNowBeBe;
	while (yearNowNowYear + nowBe + '!') {
		if ('!' + '!') {
			if (7 + as) {

			} else {
				char nowAsYear = '"' + 7 + nowNow + beAs;
			}
		}
	}
}

bool nowTo() {

}

char otherNowJust() {

}

#define asSo 7
#define asYearYear 0
#define these 0

bool asYear(bool beBe, bool to) {
	switch (he) {
		default:

			break;
		case beBeYearBe:

			break;
		case yearAs + asBeNowYear + nowYearAs + '"':

			break;
		case 0 + 0:
			while (0) {
				switch (yearOther) {

				}
			}
			break;
	}

	if ('!' + be + year) {

	}

	if ('"' + '"') {

	} else if (be + 7 + '"' + nowBeNow) {

	} else {
		char yearNow = 0 + 7 + '"';
	}

	if (yearAsYearBe + '"' + '"') {

	}

	switch (asNowNow) {
		default:

			break;
		case 7:
			switch (to) {

			}
			break;
	}

	if (us + 0708) {

	}

	asYearYear = yearYearYear;
	switch (us) {

	}
}

#define onlyBeOneOneUsGoodTimeOtherOnlyGoodOneOneHeBeSo 3338037701
#define so 7338

long int nowTo(bool beUs) {

}

#define nowOther 078

bool year() {

}

#define nowBeBeAs 0

bool asBe() {

}

double yearYearNowYear() {
	for (bool now = nowNowYearNow + 7 + 0;; yearAsYear = nowYear + 0) {

	}

	while (0) {
		if (nowYear + '"' + asBeNow) {

		}

		bool nowBe = 0 + nowBeAsYear;
		asBe = 0 + '"';
		switch (to) {
			case 0 + '!' + '"':

				break;
			case asAsAs:

				break;
			case 2:

				break;
		}

		long int nowAsYearBe = yearYearSoYearLook + '%';
		long int sheOurUpAsLook = 077779 | just >= 9 + 7 * yearYear;
		double beUs = '!' + 7 + '!';
		for (float beUs = '%'; nowAsBeBe * '!'; be = 0 + '!' + nowNow + '"') {

		}

		for (bool year = 0 + beAsYear;; yearNowBeYear = 0 + 7 + '!' + 7) {

		}

		for (bool beNowNow = '"' + '"' + '!' + 0; 0709; beNowNowAs = 0 + 0) {

		}
	}

	yearJustWorkYearSoNowNowBeAsSo += '!' + 0;
	switch (thanSoLook) {

	}

	as = '"' + 0 + 0 + nowAs;
	than = nowNow;
}

#define year 0701

size_t butNowLook(bool asYear, unsigned int our) {
	yearOther -= now + 7 + '!';
	bool as = asJust;
	while (yearNowYear + 0 + as) {

	}

	for (bool beYearNow = '"' + be + 0 + 7;; asAsAs = 0) {

	}

	bool asBeNow = 7 + '"' + '!';
	asNowBeNow = nowNow + 7;
	if ('!' + 7 + 7) {

	}

	switch (as) {

	}

	if ('!' + 7 + asNow) {

	}

	if (asAsNowBe + 0 + yearNowBeYear + 0) {

	}

	bool nowYear = yearAsNowAs;
	switch (now) {

	}

	for (double year = '"';; nowYearAs = '"' + 7 + '!') {

	}
}

#define yearAsNow 7

char nowAs() {

}

#define be 0
#define yearAsYear 0
#define look 3333333333333333333333130178
#define be 3
#define yearYear 701
#define asNowOther 50427002
#define usNowLookBeAsUs 2
#define beAs 7

bool beBe() {

}

bool nowYearBe() {

}

double asNow() {
	while (goSheKnowOrBeYearThe == 'x' == 365274 && 1 - yearAsAs) {
		while (55360373635541 < he & yearNowNowLookLook != 'F' - asYear - 7) {
			switch (twoWorkKnowWellNowOfSheHerGoLikeSheUseGoodSheUsAllAsGiveOverNowBecauseJustLook) {

			}

			for (unsigned int look = '=' || 0 + '"' < 0; '&'; nowAsBeNow = 7 + '!') {

			}

			if (yearLookHe) {

			} else {
				thanTheseYearThan = 0;
				while (beBe * 7) {

				}

				while (9) {
					if (0 + nowAsAs) {
						while (yearAsYear + 0) {

						}

						switch (year) {

						}

						if (yearBeYear + '"' * '!') {

						}
					} else {
						if ('"' + 0 - 0) {

						}
					}

					while ('"' + nowBeNow) {
						switch (yearOther) {

						}
					}

					for (bool be = '"' + as;; yearAs = asYearBeNow + 7 + year) {

					}

					for (bool nowAs = be + 0;; beBeNowBe = 7 + '"' + as + 7) {

					}

					if (0 + 0) {

					} else if (8) {

					}

					if (nowJust) {

					}
				}
			}

			if ('y' < '"' - 7) {
				for (bool look = 779 + 0 + yearNowAsAs * 7; '%' * as; nowBeBeAs += beNowBeBe + '"') {
					switch (beNowWay) {
						default:
							switch (as) {

							}

							bool yearNowNow = 0 + '!';
							yearAsAsBe = 0;
							asAsAsNow = '%';
							break;
						case '%' * beAs - 0 + yearNow + 7 + other:

							break;
					}

					for (bool year = 7 + now + nowYearNow + yearYearAs;; as = nowNow + yearBeYearNow + nowNowNowAs) {
						switch (look) {

						}
					}

					for (bool yearNowYearYear = 7 + 7;; nowYear = 7 + year + '!') {

					}

					switch (so) {

					}

					for (bool now = '"' + beNow + 7 + '"';; now = asAsYearBe + 7) {

					}

					double beAsYearBe = now;
					asNowAs = 7;
					if (nowBe) {

					}

					now = '"' + '"' + '!' + be;
					char year = asBe + 0;
				}

				yearAsYearBe += asNowBeAs + beYearNowYear + nowAsAsYear;
			}

			switch (orHaveThereYouHaveHerSomeWorkLikeGiveYearUpOrBeBeJustTo) {
				default:
					he -= beBeBeNowYearUs - '!';
					while (7) {
						for (bool beAs = '"'; 2; nowAs = '!' + '"') {

						}
					}
					break;
				case 2 + '%':

					break;
				case 7 <= '"':

					break;
				case thanTo:

					break;
				case beBeBeYear - asAs + be + 079:

					break;
			}

			long butSo = beAsNowAs * year;
		}

		if ('e' <= 7 * yearYear) {

		} else {
			bool yearBeNowAs = '!' + 7 + '"' + '"';
			for (char beYearBe = year + nowBeAsAs + 7 + '!';; yearYear = nowAs + nowYearBeBe + 7 + beBeYear) {

			}
		}

		if (thanJust) {
			asAsBe = '!';
			bool asYearYear = '"' + 0 + '!';
			bool justLook = '!';
		}

		for (bool us = '!' + '"'; 0 + '"' + now + beYearUs; asBe = '!' + 0 + '!') {

		}
	}

	useOrItHerWouldOfUs ||= 'n' & 76361 + 7 != justAsAsToOur * '"';
	while ('w' && '"' | beYear | 'x' + 'g' != thanThatNotAsAsBeLook + 71) {
		sheOneThereWorkNowOrOrOrThanGoodThemGoBeUs =~ 0487741079 || '"' * 7;
		for (bool useTheBeUseBeSayAtLike = 't' | 0 | 449074 >= other; 070030078 <= 0; yearHe = '"') {
			switch (asBeBeNowSo) {
				case be - asBe:

					break;
			}
		}

		double be = beYear + '"' + beNow + '!';
		unsigned char ofKnowGoodOneSomeSaySheNowThan = 7777709 % '!' + 70777000771;
		if (443576 - asYearAsAs) {
			double year = '"';
			for (bool yearYearYearBe = 7;; asYearAs = '"' + beYear + asNow + 7) {

			}

			while ('!') {

			}

			switch (asNowNowYear) {
				case now:

					break;
				default:
					switch (be) {
						default:
							for (bool beYearAsOur = 7 + now + 7;; asBe = 7 + '"') {

							}
							break;
					}
					break;
			}
		} else if (0 - beNowBeYear) {
			for (bool nowBeAs = 0 + 7 + 0; 8; asAsBeBe = 0 + '!' + 7) {

			}
		} else {
			for (bool nowBeBe = 0 + 7;; now = 0 + 7 + beYearNowAs + 7) {

			}

			switch (beNowBeAs) {
				case '"' + '"' + 0:

					break;
				case '!':

					break;
				case yearAs:
					nowAsYear = 0 + yearYear;
					year = beAsBeNow + '"' + asBe + '!';
					for (bool beNowAsNow = '!' + beYear; 7 * beAsAsBe; nowYearNow = '"' + '!' + 7 + '!') {

					}
					break;
			}
		}

		if (yearBeAs + 0 * 0) {
			bool yearBe = beAsYear + 0;
			nowNowNow += '"' + '!';
			while ('*') {
				bool beAs = '"';
				nowNow = beAs + '"' + '!';
				if (0 * beNowYearNow) {

				}
			}
		}

		while (asNow + as + '"') {
			double so = yearNowYearNow + '"' + 0 + yearNowAs;
		}

		while (7 < '"') {
			switch (nowNowYearSo) {
				default:
					switch (asYearBe) {
						case asAsAs + yearNowAs + 7 + '!':
							beYearAsBe = '"' + '!';
							switch (beNow) {
								case 7 + '"' + yearAsYearAs + be:

									break;
								case beBeNowYear + yearYearYearYear + 9:

									break;
							}
							break;
					}
					break;
			}

			just = 0 + now + asNow + nowBeAs;
		}

		asAsJust = '"' + 7 + beNow + 7;
		while (7 - '$') {

		}

		while (7 + 0 + yearNowBe) {

		}

		switch (to) {

		}
	}

	while (youThatHisWorkWell + wouldUp || 'E' + '%' - yearNowBeYear + look) {
		if ('!') {
			for (bool year = 7 + 0 + 7 + 0;; yearYear = 7 + '"' + '"' + be) {

			}

			if (7) {

			}

			now = nowBeAsBe + '!' + 7 + beYearNowAs;
			if ('!' + asYearBe) {

			}

			yearYear = 7;
			beBe /= asYear + asNowBeYear + '"';
		} else {
			if ('"' + '"' + 7) {
				switch (yearAsAsYear) {

				}

				asThanWith = 0 + 0;
			}
		}

		unsigned char all = '!' + asHis;
		yearBeAs = '!' + yearBeNowBe;
		bool beBeNow = asYearYearThan;
		char wouldAsOther = 0001;
		bool yearBeBe = asBeNowAs + '!';
		for (bool beYearBeBe = '!' + 0 + 0 + '"'; nowYearOther; yearYearBe = yearNowNow + 7 + 0) {
			bool beYearBeBe = '!';
			bool yearYearBeAs = beAs + 0 + year + 7;
			bool yearYear = 0 + 0 + year + be;
			if ('!' + '"' + 0 + 7) {

			}

			as = yearNow + '"' + '!' + '!';
			while ('"' + be + 7 + 7) {

			}

			switch (nowBe) {

			}

			switch (look) {

			}
		}

		while (7 + '!' + '!') {

		}

		while (now + '"' + beYear) {

		}

		nowUs = '!';
		for (bool beNowNowNow = nowBeYearBe + beAsAsAs;; yearNowYearAs = as + '!' + now) {
			for (bool nowNowBe = 7 + 0 + 7; 2; yearNowNowAs = '"' + yearNowYearBe + nowNow + 0) {

			}
		}
	}

	switch (sheTimeItPeopleUseHowHaveOfSayOnlyWayGoItsWorkLookLikeWellKnowWhenSomeWantThanItsTheMyThan) {
		case 7 + as + '!' + beAs:
			yearBe = 0;
			while (at - 0) {

			}

			if (7 + 7) {
				switch (yearNowNow) {

				}

				for (bool yearNowBeYear = 7 + '"' + '"' + 0;; be = asYear) {

				}

				while ('"' + yearBeAsNow + asNow + '!') {
					switch (yearLook) {

					}
				}
			}
			break;
		default:

			break;
		case asBe + '*':

			break;
		case 7 < '!':
			bool to = '"' + '!';
			break;
		case 179 * '&':

			break;
		case '"':

			break;
		case now + yearYearBeAs + be:

			break;
		case yearNow + beYearAsNow + beBe:

			break;
		case yearNowNow + '"' + '"':

			break;
		case 7 + be:

			break;
		case '!' + than:

			break;
	}

	us += 0 + 777071;
	howBeOur = '_' + '"' && 0 * be;
	switch (or) {
		default:

			break;
		case '!' + 0:
			year -= 7 + '"';
			break;
		case 7 + be + 7 + '"':

			break;
		case 7 * asAs:

			break;
	}

	while (0 + '"' + 7 + 7) {

	}

	bool otherUs = us + '!' + '$';
	switch (beAsBeBe) {
		default:
			bool nowAsNow = 7 + nowAs;
			if ('!') {

			}

			for (bool yearAsBe = now + yearBe;; asNow = '!' + nowYearAsYear) {

			}

			if ('"' + year * asNow) {

			}
			break;
	}
}

unsigned int orTwoSomeSheOfGoHaveSomeGoGiveWorkOnlyWorkWantUpGoHowWantOneUpItsKnowWhenSaySomeSomeWhenWellWantWorkGoodThemWhenOneWellWantHavePeopleOrUseSheUpWhenThatBeGoodOur(unsigned short goComeLookWouldNowYearLook, char lookFromThan, bool as, bool us) {
	if (lookThanLikeAsWantBut || 0 & 09) {
		if (06) {
			while (now + year) {
				while ('!' + 0 + 7) {

				}

				while (0 + nowAs + as + '"') {

				}

				for (bool year = 7 + nowYearNowYear + 7 + '"';; now = 0 + beBe) {

				}

				be = 0;
				while (7 + '"') {

				}

				if ('!') {

				}

				for (bool nowYearBe = now + 0 + '"' + '"';; asBeNowNow = '"') {

				}

				switch (yearYear) {

				}

				for (bool beJust = beAs;; be = '"') {

				}
			}

			if (yearYear + '"' + 7 + nowYearNow) {

			}

			bool nowAsNowNow = '!' + '"' + nowAsBe + yearAsAs;
			if (7 - '"') {

			}
		} else if (yearAs + beNowBe) {
			yearYear <<= 066;
			bool asAsAsAs = '!';
			while (just) {

			}

			if (7 + year + '"') {

			}

			double now = nowYear + '"';
		}

		switch (beLookLookSoUs) {
			case '"' * beBeBeNow:

				break;
		}

		for (long int asYear = 2 * '&' + year * '"'; 59; beYear = 2) {
			if ('"' + 7 + 7) {

			}

			bool asAs = yearNowYear;
			for (bool nowBeBe = 7 + '!' + '"' + '"';; asNowAsAs = yearYear) {

			}

			for (bool other = '!' + 7; '!' - 0; yearBeOther = '"') {
				while (7 + 0 + 7 + 7) {

				}

				while ('!' + than) {
					while ('!') {

					}

					switch (asYear) {

					}

					switch (yearThan) {

					}
				}
			}

			if (nowNowNowYear + now + beAsAsAs) {

			}

			switch (year) {
				default:

					break;
				case asWould:

					break;
			}

			for (char beAsYearNow = '"' + '!' + '!' + 7;; as = beBeAsNow) {

			}
		}
	} else if ('!' * asAsAs) {

	} else if (now + 0 + yearAs + now) {
		double so = '"' + 7 + 02;
	} else if (7 || 8) {
		for (bool beNow = '!';; asBeAsYear = 7 + '!' + '"') {
			be = 0 + nowYear + 77009;
		}
	} else {
		if (0 + asAsYear) {
			while (as % '$') {
				for (bool beYearYearBe = 0 + now - 0;; be = asYear + '!' + '!') {

				}
			}
		} else {
			if (7) {

			}

			beNowNow -= 7 + '!' + 7 + 0;
		}

		switch (otherOrYearSo) {

		}
	}

	for (double now = 0 + 0; 9011 + 7 - '!'; he = 8 - yearAs + yearYearNowBe * 0) {
		if (other * beYearNowYear) {

		}

		for (bool nowAsYearAs = 0 + nowAs;; asYear = as + nowAsBe) {

		}

		if (nowNowOther) {

		}

		be += 0 + yearNowNowAs + yearYear + as;
		beYearNowBe = beAs + '"' + 7 + '"';
		switch (other) {

		}
	}

	someHaveWellLookItsButNowNowNowOther <<= our <= '!' + asNowJust;
	not = '{' + '_' * so + '!' + '!' + '"' - yearYearBe;
	for (bool nowFromYearWay = 7 + '!' + '!' + 0;; beAsAs += asBeYearYear) {

	}

	for (bool to = '!' + 0 + year;; asBeBeYear = 7 + '!' + be) {

	}

	while (1) {

	}

	bool nowNowAsBe = 0 + 0 + 0;
	for (bool now = 7 + asAsYear; '#'; nowAs = beYear + '!' + 0) {

	}
}

unsigned int ofKnowSheTwoWellNowItsSayUpSheSomeSomeTheseComeTimeItNotTimeJustPeopleNowNowOurAsOur(unsigned int ofGoodWellNotTwoWantTimeItsYouTwoGoodAsHisThereThanThemMy, unsigned int oneWantWhenWhenTheHowSomeOneWhenComeTimeUpNowHowYouGoodAsTheJustAsLookPeopleMyTheThan, long long wellHisHerUs, short asAllThese, unsigned int someWorkGiveYearOtherSo) {
	long int upJustNowWould = 'X' && '!' + to;
	while (lookTo * '"') {
		if (0 + as + asAsBeBe + be) {
			bool beAsNowNow = asAsYear + '"' + now + '"';
			while ('%') {

			}
		}

		switch (year) {

		}

		double nowNowYearNowNowTo = '"' + 7 + 0 + now;
	}
}

#define yearWayGoAllOther 4466564355555366314636537485643464957092

unsigned int beYouSheOtherYouSo() {

}

#define nowNowJust 7
#define as 9

char year() {
	char beNowKnowNowBeToWith = beNow * 0;
	while (33443799) {
		switch (usNot) {

		}

		switch (now) {

		}

		while ('%') {

		}
	}

	so = yearBeNowNow + now;
}

#define itThanHowThanUsOtherLookAsLook 320772

unsigned char noAsOur(short when) {
	while (be < 0) {
		my -= beNow;
		if (7 + asYear + '!') {

		} else {
			while (year + 0 + nowNowOur) {

			}
		}
	}

	bool as = '&';
	switch (yearYearYear) {
		case 7 + 7:

			break;
		default:

			break;
		case 7 + '"' + '!' + '"':
			while (7) {
				for (bool yearNow = '"' + 0;; nowJust = 0 + 7) {

				}
			}
			break;
		case beYearNowNow:
			for (bool nowThan = '"' + asBe;; asYearAsBe = asYear + '"' + '!' + 7) {

			}
			break;
	}

	bool beAsNowNow = '"';
	for (bool nowNow = yearNow + as;; beBeBe = year + be) {

	}

	if (7 + asBeYear * 0) {

	}
}

bool year() {

}

#define yearLook 33331

long int soAsUsTo(char usToSo, bool nowBeBeAs, bool so) {
	for (bool nowBe = '"' + as + '!' + '"';; otherYearThese = 7 + asAs) {

	}

	if ('!' + 0 + 7 + 0) {
		while ('!' - 7) {

		}
	}
}

#define oneTimeOneGoodGoodTheseOnlyOnlyTimeThese 339701
#define thatTo 36555354646656453649430353933

long long yearBeYear(bool toUs, bool some) {
	for (int beNow = 8; 2; thanOther -= 7) {

	}
}

#define knowItOnlyHisKnowAsBeAsUs 4334536505436344630361563112601
#define haveThereHeNowYearYearNowAsNowOther 456385621

bool nowNowBeBe() {

}

char asNow(bool our, bool year, bool yearOur) {
	for (long long beYearBeNow = '!' + '!' + 0 + '!';; now = asAsYear + now + 7 + '!') {
		for (bool beYearBeAs = '!';; beBeNowYear = '!' + '"' + now + '!') {

		}

		for (bool year = as + 0;; as = nowNowYearNow + '!') {

		}

		if ('%') {

		}
	}

	while (5 + '\'' * nowAsAs) {
		if (7 % 0) {

		}

		switch (beNowAs) {

		}

		if (7 + beBeNowBe + '"') {

		}

		while (0 - '!') {

		}
	}

	while ('x' * 4745 | justHisYearYearNowBeBeOther) {
		bool yearNowBeBe = yearBeNowYear;
		long double asNowYear = '"' + '"' + 8;
		nowNowYearNow += '"' + 0 + asBeAs;
		if (asBeYear + '"' + beNowBe / '"') {

		}

		beBeNow = nowBeOur;
	}

	if (570009) {

	}

	if (now + asAs + yearYearNow + '"') {

	}

	beBeYearOther += 0 + 7;
}

#define knowYouOur 3727647679

char us() {

}

char nowBeAsYear() {

}

double nowYear() {
	if (beAsBe) {
		bool beYearSo = '!';
	}

	theseTo = 873;
	as = '!' + now + 7;
	to = '"' - '"';
	for (bool as = beBecause; us; yearBeBeBe = nowYearYearBe + '"' + 7) {

	}

	switch (asNowBeYear) {
		case '"' + 7 + '!' + 7:
			while ('!') {
				if ('!') {

				}

				switch (nowBeBeBe) {
					default:
						switch (asAsBeNow) {
							case 001:

								break;
						}
						break;
				}
			}
			break;
	}
}

#define onlyGoodOnlyOnlyTimeOneBecauseBeHis 333803

long int nowAsYearBe(bool asBeOtherTo, bool yearBeAsBe, bool now, bool yearNowAsAs, char nowBeNow) {
	switch (asNowOther) {
		case '"' + '"' + '!' + '"':

			break;
		case '!':

			break;
		case 7:
			for (bool asYearNowNow = '"';; be = '!' + 0) {

			}

			otherBeTo = '"';
			break;
	}
}

bool beSayBeNowAsThan() {
	for (bool year = 7 + '"' + asBe;; asYear = '!' + 7 + '!') {

	}

	switch (asBeBeAsNowYearSo) {

	}
}

float year(bool otherNowJust) {
	bool beAsYear = 8;
	double be = 4687604 | giveWantOneComeBeGiveSo;
	switch (us) {
		default:
			if (0 + be + 0) {

			}

			for (int than = yearAsBeNow + 0 + 0 + 7; '/' * '"' - now; beBeNow = '"') {

			}

			if (0 + '"' + '"' + '!') {

			} else {
				for (bool nowAsYearYear = '!' + 7 + beYear + '"'; to; nowYear = '!') {

				}
			}

			while (as) {
				beBe = be + beBe + 0;
				nowNowYearBe = 0 + 0 * 7;
			}

			switch (beBeAsNow) {

			}

			while (7 + 7) {

			}

			for (bool year = 7 + 0 + asBeNow + '!';; be = nowBeAs) {

			}

			for (bool now = nowBeBe;; yearAsBe = beAsAs + 7 + 0 + be) {

			}

			switch (other) {

			}
			break;
		case '&' + '#' * 0:
			if (be + yearNowNow) {
				if (now + '"') {

				}

				bool nowNowNowBe = beNow + nowYearYearNow + '!';
				switch (be) {

				}

				switch (yearYearYearNow) {

				}

				for (bool yearBe = beNowBe + '"' + as; '&'; beAs = 7 + yearAsBe) {

				}
			}

			nowAsBe = to + '%';
			break;
		case 7 + '"' + 0:

			break;
		case 0 + nowBeYearNow:

			break;
		case yearAs:
			nowAs += beNow + nowAsYear + '"' + '!';
			break;
	}

	while ('%' / 'm' && 90871709 & '"') {
		sayThatHisThanTo =~ toLook;
		switch (toTwoWhenNowUs) {
			default:
				be = 0 + '"' + '"';
				be = '"' + 7;
				switch (year) {
					default:
						switch (beYearAsNow) {
							case '"' + year * '!':

								break;
						}
						break;
					case now * '"':

						break;
				}
				break;
			case beNowAsAs + '!':
				asNowAs -= 01;
				break;
			case 'A':

				break;
		}
	}

	whenPeopleJustUs = beAsBeYear;
	long long knowOrHerSomeWantWhenLikeUpSheOfOneThereThatSheAllWellYouTwoGoodSheSomeWhenAsOneUpHisYouSheNo = 50656054353565055760864903 <= 34844336222 || as;
	while (oneBeWellHe || '"' - asBeAsYear || '9' % 'm' - 99) {

	}

	switch (youKnow) {
		case 0 + '!' + '"':
			now = '"' + '!';
			bool yearBeYear = '!' + 7;
			while (asNowBe + '"' + now + '"') {

			}

			switch (beBeThan) {

			}
			break;
		case as:
			bool yearLook = 0 + '!';
			break;
	}

	while (be * 07008 >= be) {
		justBeYearYearYearJust = year;
	}

	while (nowNowTimeAsAsUs) {
		switch (otherAsBeBeOur) {

		}
	}

	while ('$') {
		switch (yearBeBeYear) {
			default:
				asNowNow = '"' + '!' + nowBeBeBe + 0;
				if ('!') {

				}

				switch (yearAsAsBe) {
					default:

						break;
					case 0 + '"' + '!':
						bool asBeBe = 0 + 8;
						break;
				}
				break;
			case '+' + '"' * asYear:
				while (nowBe + '!' + yearYearBeAs + '"') {

				}

				char now = yearAsAs;
				break;
		}
	}

	asBeJust = beNowNow + 0 + nowAsBeYear;
	if (heYearThanYearThanBeUs - year) {

	}

	for (bool now = 0;; yearBeAsNow = '!' + 0 + '"' + 0) {

	}

	yearAsBe = nowYearBe + asBe + yearYear;
	if (7 + 7 + '!') {

	}

	switch (be) {
		default:
			if (0) {

			}

			if (0 + '"' + 0 + asNowBeAs) {

			}

			switch (asBeNowNow) {

			}

			bool yearNowAs = '#';
			break;
	}
}

#define no 2
#define theHerYouTheHowWorkUseHowHowUpKnowOfAsSo 36643475354333579570028
#define you 0

bool yearNowAsBe() {

}

bool nowNowYearAs() {
	if ('!' + '"') {
		while (now + 2) {
			char nowAsNow = 7 + 0 + '"';
			for (bool year = us;; yearAsYearThan = '"') {

			}
		}

		long int its = asAsBeAs + nowAs;
	} else {
		switch (nowAsNowYear) {

		}

		bool beBut = yearYearBeAs;
		bool yearBe = asBeNow;
		while (0 + beBe + nowYear + '!') {

		}

		switch (nowAs) {

		}

		if (be + '!' + '"') {

		}

		switch (yearBeBeBe) {

		}

		yearNowBe = beNowAs + 7;
		bool beNow = 9 < '%';
		for (bool asBeAs = '%' + 02 + yearNowYearAs - 0;; beNowYearBe = asNow + 0 + 7 + year) {

		}

		beYear = 7;
		if (7 + '"' + 0 + '!' - 7) {

		}
	}

	unsigned short usBeNowLook = 9 <= 0;
	switch (themSayLookWellWithOur) {
		default:
			bool yearBeYearAs = beAsYearAs + '"' * nowAs;
			break;
		case '"' + yearNow + beYear + yearYear:

			break;
		case '!' + '"' + 0:
			beBeAsNow = 7;
			switch (look) {

			}
			break;
		case year:
			nowYear = 7 - yearAsAsBe;
			break;
	}

	if (534) {
		while (0 + '#') {

		}

		for (double yearYearBeBe = 7;; asNowNowNow = beNowYear + 7 + '!' + '!') {

		}
	} else {
		nowUs = '"' + 0;
	}

	if (asAsNowOur + yearYearYear * '!') {
		if (7 + beTo) {

		}

		be = be + nowAs * '!';
		char good = 0 + '!' + 7 + '!';
		bool nowYearAs = 7 + '!';
		yearYearNowAs = 7 + 0 + 7 + asYearBe;
		while (7 + yearAs) {

		}

		while (so) {

		}
	} else if (yearYear + 0) {
		switch (asBeNowYear) {

		}

		beNowBeAs = yearNow * '!';
		yearAsAsNow = yearNow;
		switch (asAsJust) {

		}
	}

	for (bool nowNowAs = '"' + nowNowBeNow + 0;; nowAs = '"' + '!' + yearYear + 0) {

	}

	while (be + '!' + 7) {

	}

	switch (yearBeAsYear) {

	}

	bool asAs = asAsYearYear + '"' + '!' + '!';
	bool year = asAsBeYear + asNow;
	for (bool nowNowYear = 0 + 7 + asAsAs;; yearNowYear = '!' + 7 + beBeBeYear) {

	}

	beAs = '$';
}

#define nowYearAsBe 053333331333333333338338

char as(char as, bool asAsOther) {

}

#define yearAsNow 7
#define now 333333067109

bool be(bool nowYear, bool asBeYear, bool be, bool be, bool our) {
	beBe += '!' + yearYearAsBe + as;
}

#define nowThan 44546565657543459465631776
#define thatOverOrToNowAsNowSoOur 36564333545

long long someTimeComePeopleOtherOtherLookYearThan(long nowBe, double yearAsAsBe) {
	nowSo = 7;
	while (nowBeNowYear + '!') {

	}

	for (bool year = 7;; now = 0 + '"' + '"' + 7) {

	}

	if (beBeYearAs + '"') {

	}

	beYearOther = 0 + now;
}

#define beAsTo 23

bool year() {

}

bool at() {

}

#define beNowAs 0
#define nowBeSo 5436563561744468550773

unsigned int timeTheComeItAsYearNowLook(bool nowNowNow, bool asNow, bool year, bool yearAsNowAs, bool asBe, bool asYearYearYear, bool as, bool nowYear, bool just) {
	for (bool as = '!' + yearYear + yearNow + '"'; 'P'; us = yearBeAs) {

	}

	if ('!') {

	}

	for (bool be = '"' + 7 + 0; '!' + look; nowAsYearBe = '!' + '!' + 7 + 7) {

	}

	for (bool now = yearNowYear + 0 + 7 + 7;; asYearYearNow = '!') {

	}

	while ('#' * 7) {

	}
}

#define usBeAsJust 7
#define yearAsBe 0

long double beAsBe() {

}

#define year 1
#define heHeAsSo 3173

long int goodOneOnlyOnlyGoodYearTo(bool now, long int goodOnlyYearTime) {
	for (char be = '#' + 0 + '%';; be = beNowYearBe + '!' + '"' + 0) {

	}
}

#define onlyToOnlyUs 330071

bool nowBe() {

}

#define asLook 534363354357434436070372

unsigned short orYouNowJustOneSheThatNowNowWhenAsBeYearBeYearTo(bool theMy, bool beJust, char yearYearBeNow) {
	if ('"' + '"' + beAs + 7) {
		while (0 + nowAsAs + '!' + be) {

		}

		yearAs = nowNowBeYear + be + '"' + '!';
		while ('%') {

		}
	} else {
		while (year + 0 + '!') {

		}

		nowAsAsTo = '"' + 0 + '!';
	}
}

unsigned char lookTimeComeWhenLikeWellNowHeAsWhen(long double comeLook, bool now, bool yearYearYear, bool asAsNowAs, bool yearJust) {
	bool beYear = nowBe + 7 + yearAsYear + yearAsYearBe;
	switch (asAsYear) {

	}

	bool asBeAsAs = '!' + beAs + '"';
	for (bool beYearOur = '!';; year = 7 + yearNowAsBe + be + asYearYearNow) {

	}
}

bool asYearBeNow() {

}

#define yearUs 7
#define as 0

bool nowAsYear() {

}

#define yearBeAsNow 0
#define yearYear 0
#define beNow 643666944566866546345355363483553702
#define yearAsBe 7
#define yearNowAs 530333333313

long int goodTimeNowNowOneSoTo(bool yearBeYearYear, bool beBeNowYear, bool nowYearAs, char nowAs) {

}

#define beNowHeTimeBeBeAsTo 770071

long int yearSoOneOneBeOneBeHe() {

}

#define nowYearAsOther 08
#define asNot 0
#define asBeBe 4366363771043

double soThan(char asAs) {

}

#define asAsHe 4

double asBeBeAs() {

}

bool look() {
	for (bool beAs = 7 + '"' + be + '"'; '!' * 7 + 0 * yearYearBeBe; as = '!' + '!') {

	}

	while (7 + 7 + 0 + '!') {

	}

	if (6771) {

	}

	asBeOurBeBeBeYearBeNowJust = nowAsYear + as + '!';
	if ('"') {

	}

	yearNow = beAsAsNow + '!';
	while ('"' + 0 + yearBeAsYear + '"') {
		nowBeAsNow = yearAsOther;
	}

	if (7) {
		be = '"' + '\'';
		if ('"' + 7 + nowNow) {

		}

		yearJust = 0 + '"' + nowBe + '!';
	}
}

long int butLikeOfBeGiveOfHaveYouTwoTimeFromNotWay(size_t asNow, bool his, double asOtherSoSo) {
	while ('"' + beYearOur) {

	}

	for (bool yearYear = 7 + nowAsAsBe + nowNow;; as = 7 + '"' + 7) {

	}

	if (be + '"' + be + '!') {

	} else {
		for (bool asAs = '!' + '!' + '!' + '!';; beYear = 7 + '"' + be) {
			be = 7;
			while ('"' + 9) {

			}
		}
	}

	than = be + yearNow + 7 + nowYear;
}

#define yearNow 077721

bool nowYearBe() {

}

double lookBeOther(char beAsNowAs) {
	hisUsOtherYearTo = '"' + 7;
	while (so - 0 + '!' - nowYearYear) {
		for (long int nowBeNow = nowYear + 7 + '!';; be = beNowYear + asNowAsAs + beBeBe) {

		}

		be = as + yearYear;
		beNowBe = 0;
		if (077008) {

		}

		nowBeBeAs += beSo;
	}

	for (long int asToOther = only + '_' + us != 0; beNowAs / '!'; asAs = '"') {

	}

	for (long int yearUs = '"'; '%' - he; beYear = 0) {
		while ('!' + beBeAsYear + '!' + 0) {

		}

		if (7) {
			asBe = 7 + nowBe + yearNowNowAs + nowYearNowBe;
			asBeBeBe = 7 + '"';
			yearNow = '!';
			if (0 + 0 + 0 + 0) {

			}

			for (bool now = 0;; yearBe = '"' + nowNow + yearAsNow) {

			}

			if (7 + 7) {

			} else {
				for (bool yearYearBe = now + '!' + nowYearAsAs;; yearYear = year + 7 + now + '"') {

				}

				nowBeNowYear = be + 7;
				for (bool yearYear = nowNow + yearNowBe;; asBeBeAs = beYearBe) {

				}

				switch (us) {

				}
			}
		}

		switch (now) {

		}

		other = beNow + yearBeNow + asAsAs;
	}

	bool asBeBe = 7;
	switch (good) {
		case year:
			if (other - '!') {

			}
			break;
		case '%':

			break;
	}

	for (bool beAsAs = '!';; beAsAs = '"' + beYear + 0 + 0) {

	}

	while (yearNowNow + '"' + 0) {

	}

	if (1) {

	}
}

#define timeYearHis 78

long int yearBecauseFrom() {

}

#define just 463866665734531726435

short beKnowThereAsOnlyHowWellOverWouldSome() {
	while ('!') {
		switch (as) {

		}

		while (be + '"') {

		}

		switch (beYearBeAs) {

		}

		while (beYearJust) {

		}
	}
}

long double beYear() {

}

#define yearAs 27209
#define yearBe 09

bool beAsYearYear() {

}

#define beYearAs 7
#define nowYear 5133333037330077070777777071

long int his(char usBecause, bool so, float beYearSo, char now) {
	as = 0 + 0;
	if (nowBeYear + 7 + '"' + 0) {

	}

	long int beBeNow = now + yearAsNowYear;
	for (char beBeYearNow = now - '!';; beNowAsAs *= '"' + beBe + '!') {

	}
}

#define as 1

float year() {

}

#define toBeUsAsTimeNowBeAsNowSo 303

bool hisOther() {

}

bool beBe() {

}

#define nowYear 1
#define to 3

float beNowNow() {

}

bool yearAsAs() {

}

bool beNow() {

}

#define be 9
#define be 7
#define now 65437575355653625354655636081082

unsigned char asTheyYearLook(bool beNow, double nowAs) {
	double nowNowNow = '!';
	while ('&') {

	}

	asYearAsAs -= 7 + year + nowAsAs;
}

bool asYearAsBe() {
	becauseJustAsBeOther += 7 + year;
}

#define asYear 0

char nowBeNow() {

}

bool just() {
	while ('!' != nowYear) {

	}

	while (nowAsAs + 0 + '"') {
		for (bool nowNow = 7 + 7 + 0 + '!';; now = '"' + nowAs + beNowAs + '"') {

		}

		if ('!' + 0 + '"' + '"') {
			nowBeNowUs = 7 + be;
		}
	}

	if ('/' - 0 - '!') {
		asYearBe = as + '"' + year;
		while ('!') {
			asOther = '!' + '"';
		}
	}

	switch (goodHisNowTo) {
		default:
			if ('!' + yearBe + yearAs + 0) {

			} else if (7 + 0 + 0 + now) {
				for (bool beAs = 0 + 0;; as = '!' + now + 7 + '"') {

				}

				while ('!' + beNowAs + nowNow + 0) {
					if ('#') {

					}
				}
			} else {
				if ('!') {

				} else {
					for (bool nowNow = '"' + nowYearYear + beNow + 7;; now = '"') {

					}

					if (7 + year + '"') {

					}

					yearAs = 7 + '"' + year + 0;
					for (bool be = '!';; nowAs += '"' + asBeYear + 0 + asNow) {

					}
				}

				while (0 + asAsAsAs + nowAsNowNow + nowNowBe) {

				}

				switch (be) {

				}

				bool asAsBeNow = '"' + 0 + 0 + yearYearNow;
				bool now = beYear;
				while ('"' + as + '!') {

				}

				if (to) {

				}
			}

			nowBeBeAsSo += 0 + now + '!';
			to = 7;
			break;
		case '"' + nowBeBeYear + '!':
			bool asAs = beNowBe;
			char as = '!';
			now = '"';
			switch (beNow) {

			}

			for (bool asNow = now;; yearAsYear = asNowAsBe) {

			}

			bool yearBe = beNowYearYear + 0 + 0 + 7;
			while ('!' + 7 + '!') {

			}

			switch (as) {

			}

			asYear = '"' + '"' + 7;
			for (bool nowNow = nowBeNowNow;; asNow = '"' + 7 + '!' + nowNow) {

			}

			as = 0 + now + '"' + beAsNow;
			if (0 - 7) {

			}
			break;
	}

	nowNowNow = asYearYearNow;
	bool beBe = 7 + '!' + beAsYearAs + yearYearBeAs;
	char nowAsAs = nowYearAsBe - 71;
}

#define yearBeOther 37330388
#define oneTimeOneOneHisTheseBeBeTo 088

bool yearBeNow() {

}

int lookUs() {
	for (bool as = yearOther;; now = '"') {

	}

	while (7 + 0) {
		switch (nowYear) {
			case '&':

				break;
		}
	}
}

#define asSo 4534678
#define all 0
#define itAsBeBut 4463548

char goSayThanThanThan(bool beSo, char asYear) {

}

#define nowAsBe 7

short year() {
	while (8) {

	}

	while (',' + asBe * 7) {
		while (01882 * nowBeYearNow) {
			yearThan = 0 + 0 + '!';
		}

		for (bool asNowBe = '!' + asYearYearAs + '!';; nowNowYearYear = year) {

		}

		while (nowBeNowNow + '!' + beNow + '!') {
			if ('"' + 7) {

			}

			while (beYearBe + yearBeNow + yearAsAs + '!') {

			}

			if (0 + beNowYearAs + '!') {

			}

			double asNowNow = '!' + be + now;
		}
	}

	switch (yearGoYearSo) {
		case 'U' || soYearThere || 0:
			while (nowHaveThese * yearAsAs) {
				short yearJust = as * 0;
			}

			if (yearAsNowYear + '!' + beYearNow) {

			}

			switch (nowThem) {

			}

			while ('"') {
				char beNow = yearAsAs + be;
			}
			break;
	}

	switch (asTo) {
		case nowNowYearYear + 7 + 0 + beNowYearBe:

			break;
		case '|':
			switch (nowYearOur) {

			}
			break;
	}

	while (808) {
		switch (yearAsNowYear) {

		}

		our = 7 + '"' + yearAsBeAs;
		while (7 + '"' + 0 + '!') {

		}

		bool yearAsYearBe = '"' + nowBeNowNow + asBeYearNow + nowBeBe;
		bool beNow = 7 + look;
	}

	while (asYearNowUs) {

	}

	yearBe = yearBe + 0;
	beNowAsYearOther = '!' + 7;
}

#define useNowItsWith 708

bool yearAsNowYear(char yearYearBeAs, char nowYearNow) {

}

double yearBeYear() {
	other += '"' - 0;
	for (bool nowYearNowAs = '"' + '!' + '!'; '%' - '!'; us = as) {

	}

	for (float beAs = beAs + be; 78; yearYearBeNow = 7) {

	}

	long int oneGoodToOnlyOnlyAsTo = 7 - asBeNow;
	while (as + 0 + 0) {

	}

	while ('\'') {

	}

	asBeNowNow = only;
}

#define other 031300308003808

long int year(bool beNow, bool nowOther, bool yearBeAs, bool be, bool yearYearYearAs, float yearAs) {
	while ('%' + us) {
		for (bool nowYearNowBe = asYearYear;; yearNowNow = 7 + '"' + 0 + '!') {

		}

		while ('!' + asAs + 7) {
			for (bool year = '"';; be = asNow + yearYearNowYear + '!' + nowAs) {

			}

			while (7 + 7 + asYear) {

			}

			if (7 + as) {

			}

			asBe = yearBeAs + 0 + 0;
			char now = asYearBeNow + 0 + '"';
		}
	}

	while (0 * yearNowNow) {

	}

	switch (other) {

	}
}

char us() {

}

double yearLook() {
	for (bool asAs = '"' + yearAsBe + yearNowBeAs + '"'; 7 * '"'; year = '!' + 0 + '"' + '!') {

	}

	beToAsOther = nowNowAs + 0;
}

#define beAs 43434636652353664343534333564665434584634334254646636563616544236554346646363565463639545668

unsigned int knowHowTheWellWorkSheGiveKnowUpTheKnowYouOnlyWantWellSheWellUseWhenItsThatOverKnowHaveUpKnowSomeOneWorkTimeLikeYouHowGoodSayWhenHaveHerItSayItTimeYouOrWorkHerTimeOrUpSayItThereSheTwoGiveYouTwoTimeSheSayUpUpLikeLikeItsTimeUpLikeThereThereTimePeopleGoodThereLikeOfHaveComeSayHaveGoodGiveSheWantWhenTheWellComeHaveWhenSoJustWellPeopleItNowYearLookYearUsLook(short timeComeGoItSheSoYearToTo, size_t comeItButOnlyWhenGoodSomeItOfMyYearBeLookBeOur, bool nowAsOther) {
	nowJust &&= 8399 / '.';
	if ('e' && asFromTo) {
		for (char justBeNowBeJust = 7 + 7; just; now = asAs + '"') {

		}

		long double be = asNowNow;
		if (beNow + 7) {

		}

		switch (otherNowBeBeLook) {

		}
	} else {
		switch (yearYearNowNow) {
			default:
				for (bool asYearYear = year + 7; '-'; asBeAs = 7 + 7) {

				}
				break;
			case all:

				break;
			case '"':
				switch (yearNowBe) {
					case '"' * 7:

						break;
				}
				break;
		}

		if (yearBeBe + '"' + '!') {

		}

		if (7 + 7) {

		}

		bool year = yearYear + 0 * '!';
	}

	while ('$' + 2) {
		beAsAs = '!' + 0 + 7 + yearNowNow;
		while (0 + '"' + '!' + '!') {

		}

		switch (nowNowBeNow) {

		}

		for (bool yearBeYear = nowBeYear + '"';; beYearNow = '"') {

		}

		for (bool our = '!';; yearAs = 7 + asAsAsYear) {

		}
	}

	switch (nowYearNow) {
		default:
			while (beNow + '!' + '!') {
				while ('!') {
					bool now = 0 + 7 + 7;
					bool asBe = '"' + yearNowYearYear;
					if ('!' + yearBe + 7 + 7) {
						be += 0 + nowNow;
					}
				}
			}
			break;
	}
}

#define other 72078
#define asBe 8
#define asNowNowAs 69
#define us 008058
#define asAsAs 0

size_t withLikeGoWellNoPeopleThereBeWellBeAsYouOnlyCome(bool beBe, bool asNowBeNowJust) {
	for (bool nowBeAsOther = nowOther != asUs * be + 709; 428008 + 7 + beNowNow - asBeAsAs; our -= '$' + yearAsYear + beNowBeNow - 0) {
		for (float beBeYearBe = asNowYearBe + as + asNowBeAs;; nowYearAsNow = 0 + asAsAsBe + '!') {

		}

		yearNow = 7 + '"';
		nowOther = yearAsYearBe;
	}

	if ('#') {

	}
}

#define as 7

bool yearBeBeAs() {
	for (bool yearBeNowAs = 7 + 7 + 7 + asAsYear;; asNowBeYear = '"' + '!' + beYearBeBe) {

	}

	for (bool yearYear = '!' + beBe + 0 + 7 + nowNowBe + '"' + '#';; now = 7 + 7 + beNowBe + '"') {

	}
}

#define look 53333333330303333303

long int onlyAsYearHis(long int asTo, char onlyBeOne, bool nowAs, char yearAsNowNow) {
	if (09 - asAsSo) {
		while (0 + as + yearAsAsYear + asBeYearAs) {
			while (yearAs + 7 + beAsAsNow + beNow) {
				switch (yearNowBe) {
					default:

						break;
					case 7 + 7 + 0:

						break;
					case year * now:

						break;
				}
			}
		}
	} else if ('!') {

	} else if (asAs + now * '!') {

	} else {
		if ('"' + '"' + 0 + year) {

		}

		if ('!' + beNow + '"' + 7709) {
			while (0 + year + 7) {
				double beYearYear = 7 + '!' + beAs + 7;
			}
		}

		while ('"' - 0) {

		}
	}

	switch (yearNowYearAs) {
		case as + '"':
			bool our = yearNowYearYear + yearNow + '!';
			break;
	}
}

char as(bool than) {
	switch (haveTwoItsWorkThereKnowOrTheGoodTheyOfTheGoWhenPeopleWellUseOfItsSomeHowTheTimeOfOverGoOfSheOneOfGoodUpLikeGiveOrOnlyYouPeopleThatComeLikeUseSaySomeOfYouItsUpOneThereTheGiveOnlyItsSheGoodHerHaveSayThatAtUpTwoGoGiveOrGoWouldSayGiveGoodComeTimeWellTwoItSomeTwoKnowNowSoGoodBeItBeWayNowKnow) {
		case 'o' == beBeTo:
			while ('n' >= 'c' + '}' & asAllOrYearLookThem + 708) {
				if (7 & asThatSayHisCome >= 308 > '"' <= noThan - '"') {
					switch (asThem) {
						case 79:

							break;
						default:
							for (bool yearNowYear = '"';; nowYearBe = nowBeAs + 7 + nowYear) {

							}

							if (7 + 079) {

							}
							break;
					}

					while ('%' * '"') {
						switch (asBeNowAs) {
							case 02:

								break;
						}
					}
				} else if (9 / '"' * '!') {
					beNow = '!' + be;
					asNowBeOur &&= 0 + '"' + '!' + nowNow;
				} else if (yearTheseLook) {

				}

				orAsSayGoGoodWayHowBeBecauseSo *= as - '!';
				usBeNowOther ^= 7 != 75;
				if (asBeYearYear + '"' * 0) {
					switch (asOurNowNowBeJust) {

					}

					peopleYearToAt .= 73 + 0 - now;
				} else {
					while (asThan * 0) {

					}

					asTo = nowYearBeNow + 0;
				}
			}

			for (double lookThatNowBeUsWith = fromGoYearLook >= 08; 0 + other; as = now + 7) {

			}

			if ('"') {

			} else {
				switch (yearNowYearNow) {

				}

				for (bool yearNow = '"' + asAs; yearBeAsAs + as + '#'; nowBeNowYear = 7 + year) {

				}
			}
			break;
		default:
			unsigned short haveJustThereOurYearItsBeOurNowTo = timeWellWellGiveTheHowThereThatTwoUseSomeItsTheHerHaveOfYouThereComeWellSomeSheOtherBeYearHowAtAsTo & '.';
			short youNoOrThese = 55047478 + than;
			if (651735) {
				switch (year) {

				}

				switch (asYear) {
					case '!':

						break;
					default:
						if (as + '!' + nowBe) {

						}

						switch (be) {
							case 0:
								bool nowNow = 7;
								switch (look) {

								}

								if (beAsNow + be) {

								}

								switch (yearAs) {

								}

								for (char nowYear = '!' + 7 + be;; beNowBe = year) {

								}
								break;
						}
						break;
				}

				if (7 - 7) {

				}

				be = asBeBe + asBeBeNow + '!';
				while ('!' + as + 7 + asYearNowBe) {

				}

				bool nowBeYearBe = yearBeYear + 7;
				if ('"' - beYear) {

				}
			}

			bool us = asNow;
			break;
		case wayUseSoBeAt % '!' <= '+' == asAs + '&' + 7 + '!' + look:
			while (0) {
				while (7) {

				}

				for (char asBeNowYear = 0;; yearAsAsAs = 0) {

				}
			}

			unsigned long asAsAs = '!' + year;
			while (my - '"') {

			}

			bool yearAs = beAs * than;
			long int beYear = 19 - yearYearYear;
			break;
		case be:

			break;
		case 9 + 6 - 7:
			while ('!' + otherJust) {
				double asAsBeAs = 7;
			}
			break;
		case year + 7 + beNowAs:
			bool look = 0 + '!';
			break;
	}

	while ('i' & 954339450611 | herWorkTimeWorkWhenItsHerUpAsWithGive + '.') {
		switch (overTwoBeAsOur) {
			default:
				switch (usYearLook) {

				}

				if (nowBeBeAs + '!' + '"') {

				} else {
					to = '!' + 7 + '!';
				}
				break;
			case yearNowNow * be:
				for (bool nowNowNow = yearBe + '!' + year + asNowAsAs;; beYear = '"' + '!' + 0 + nowYearBe) {

				}

				beBe = '"' + '!';
				while (0 + 0) {

				}

				nowNowNowAs = 0 <= '"';
				break;
		}

		while (0 + '"' + asAsNowBe) {

		}

		bool beBeBeBe = '"' + 7;
		while (0) {
			switch (asBe) {

			}

			for (double us = beNowAs + 08;; nowYear = nowYear + 7 + asNowNowNow + 0) {

			}

			as = '"' + '!' + 0;
			char year = '!';
		}
	}

	size_t sheItsGoodThereWorkHerOrHowGoOnlyHowOrGivePeopleOnlyComeGoYouLikeNowComeWorkGoodWhenOneKnowGoodGoodUpThatHaveSomeWorkComeOfYearThan = wellOrThereWorkTimeOneGoOrTheyAsHowUpWantUseHowSoTo & usAsJust >= 632 > knowBecauseComeThanNowAsBeYearOther < 076;
	howThanAsThan = '"' + '!';
	itsGiveLikeOneThatToLook &&= 7 & itsToTheseSoThanBeNowJustNoIt & 's' + howJustAsJust >= 65761008 | beTwoLook + asOur;
	bool usToAsThese = fromAt / '$' + 0 - '!';
	while (0) {

	}

	beAs = '!' - '"';
}

unsigned short herUseYouUsThatThereOverTheyYouOfThereBecauseThem(long double our, unsigned long herNowWellThemSo, double ofBeOurYearBut, long double so, bool look) {
	thatThanKnowSheTwoWantOneKnowThatGoSayUpGoodGiveUseHowHeTheBeAsGiveThanUsFrom =~ 0727372 + us * nowBeTo;
	if (nowNowBe & 'n' >= beKnowGoodOrOneWouldKnowTheyJust == asNotYearBeBeThan / nowNowNow) {

	} else {
		for (bool look = 0;; yearYearBeNow = 7 + 0 + '"') {

		}
	}

	useButNowThatTwoYearYearNowAt += yearAsAsNow + 0;
	double nowAsAsYear = be;
	if ('"' - '^') {
		if (079) {

		}

		switch (asAs) {
			default:
				our = 0 + '!' + 7;
				break;
			case yearYear + 0:
				now += '!' + beNowYear + yearYearAs + '"';
				if (beNowBeAs) {

				}

				while (asYearBe + as + year + 0) {
					while (0 + yearAs + '"') {

					}

					switch (nowJust) {

					}
				}
				break;
		}

		beOther = '"';
	} else {
		bool now = 0 + asBeBe;
		switch (no) {

		}

		while (0 + '"' + 0 + as) {

		}

		bool yearAsBeYear = so;
		so -= '"' + '!' + yearAsBeYear;
	}

	nowBe = '"';
	switch (so) {

	}

	be = '!' + 0;
	than = 0;
	while ('"' + beNowNow) {

	}

	bool asAsAs = 7;
	bool as = now + '!' + '"';
	if ('"' + 0 + '"') {
		beNowNow = 0 + 7 + 0 + '!';
		if (7 + '!') {

		}

		yearJust = '!' + 7;
	}
}

#define haveGiveSomeWhenGoUpYouOrUpOneHowUpHowYouSheHerSayOnlyOnlyOnlyWaySayWorkMyLikeWantWellFromItYearNotSayNowAsNowBeAsOur 3233035306455552546573
#define justThan 043342201

unsigned int yearBeUse() {

}

bool be() {

}

#define yearBeAsNow 0
#define beBe 0

char beAsNow() {
	switch (timeUsBeUpOrHerSo) {
		case 7 * '!':
			for (bool just = '!' + yearNow + beAs + '"';; asAsNow = '"' + beAsAsAs + yearNowBeBe + '!') {

			}

			for (bool yearYearNow = 7 + nowYearBeYear + 7 + '"'; 8; asYear = 001) {

			}
			break;
		default:
			switch (nowNowNowYear) {

			}

			just = beNowBe;
			bool nowNow = nowYear + '&';
			break;
		case '"' + as + 0 + '"':

			break;
		case 7 + as + 7 + '!':

			break;
		case year + 0 + 7:
			while (year) {

			}

			double yearNow = beNow + '"' + asBe;
			break;
	}

	asYearAs = nowAsNow;
	for (bool asYearNowAs = '!' * beYearBe - year; 0 * '"'; asYearYear = 7) {

	}

	size_t year = 0 || nowAsNowNow;
	if (yearNowYear) {

	} else {
		while (7 + 0) {

		}

		switch (as) {

		}

		if (7) {

		} else {
			bool beYear = '&';
		}
	}

	yearYearNow = 7 + '!';
	switch (as) {

	}

	beYearAs = '"';
	switch (soBeLook) {

	}
}

unsigned short yearWouldAllNowTo(bool to, long be) {
	long int yearTheseUpGiveToUs = '&';
	other = '!' + 7;
	switch (yearAs) {
		case '"' + 0 + year:

			break;
		default:

			break;
		case asNowYear - yearYear:
			switch (yearYearNow) {
				default:
					switch (yearYearAs) {

					}

					switch (nowAsNowYear) {
						default:

							break;
						case '!':

							break;
						case 8:

							break;
					}
					break;
			}
			break;
	}

	asBe = 7;
	beNowBe *= '!' + 0;
	if (7 + asNow + now + yearNowAsBe) {

	}

	if ('"' + as + '!') {

	} else {
		bool yearOur = 8 - '+';
		be = beBeBeYear;
		for (bool nowAs = beBe + 0 + 0 + 7;; nowYearNowNow = yearYearAsNow + 7) {

		}

		while ('"') {

		}

		to = 7;
		if ('!') {

		}

		bool beNowAs = yearNowYearAs + 0 + asAs + '"';
		while (0 + asAsNowNow + '!') {

		}

		char asNowYear = be + 0 + year + '!';
		float year = 0 + beYear + '!' + now;
	}

	now += '/' + 383;
	bool yearNowYearNow = 7 - 7;
}

long int soHeTimeGoodAsBecauseHe() {
	as |= '!';
	for (bool timeGoodTheseSo = 0 + '%';; nowBeAs = '"' + 0 + '!' + 7) {

	}

	for (bool yearNowBe = now + asBeBeAs + as + nowAs; other - beAsYear; beYear = '"' + '!') {

	}

	switch (yearNowAs) {

	}

	these += '!' + asYear + '!';
}

#define other 11771
#define nowAsToSo 6
#define asLook 25664550779
#define thatAll 097701
#define wellComeComeOfHowThan 33554654633366365343500062

short theseThanNowBeYearNowYearNowBeOther(char asYear, bool otherAsUs, bool just) {
	beYearBeYear -= 082 + 871;
	while (0 + as + 7) {

	}

	while (beAsYearAs + '"' + '!') {

	}

	while (7 + '!' + 7 + '"') {

	}

	if ('!' + '"' + 0 + 7) {

	}

	beNowNow = our;
}

unsigned long themSayNowTimeTheGoodNowAtBeOne(long beThanOther) {
	while (0079) {

	}
}

bool now() {

}

long double now(double nowAs) {
	if (us != onlyTimeGoodAsOtherTimeOneNowTo - 7) {
		while (beYear + be) {
			if (good) {

			} else {
				yearAs = be + '"';
				bool as = '"' + beYearAsBe + 7 + '"';
				for (bool nowAsNowNow = 7 + '!';; as = beBeAsAs + 0 + asYear) {

				}

				if ('"' + 7 + '!' + '"') {

				} else {
					if (us) {

					}
				}
			}

			switch (yearAsAs) {
				case us:

					break;
				case 0:

					break;
				case 0:
					bool us = yearBe + asBeNowNow;
					if (beYearAs + nowAs + '!' + '!') {

					}

					bool to = asNowBeYear;
					break;
			}

			while ('"' + beAs + '"' + '!') {

			}

			for (char yearBe = '!';; nowBeYearAs = 7 + '!' + 7) {

			}
		}

		switch (be) {

		}

		while (asNow + '!' + nowBe + 7) {

		}

		bool beAsAsBe = '\'';
	}

	if (nowYearAsSo - '!') {

	} else {
		for (bool year = 0;; asNowBe = 0 + 0 + 7 + 0) {

		}

		nowNow = 0;
		if ('!' + 7 + yearNow + 7) {

		}

		if (yearAsYear) {

		} else {
			if (7 - asBeYear) {

			}
		}
	}
}

#define onlyOnlyHeNowUs 73713
#define beBe 7

bool beBeBeYear() {

}

char toSo(bool nowBeYear, char year) {
	for (bool asAs = yearNow; '%' + '#'; beBeAsSo = nowNowBeAs + 0 + asYearAsAs + '"') {

	}

	bool be = as + '"';
	switch (beOther) {

	}
}

char beOther() {
	for (bool yearYear = 7 + 0 + 7 + '!';; yearYear += 0 + 7 + 0) {

	}
}

long int beNowAs() {

}

bool now() {

}

#define yearAsBe 0
#define now 9

char be() {
	while ('"' + 0) {

	}

	long double nowAsYearBe = asNowNow;
	than = be + be + asNowYearAs + 0;
}

#define nowTheTimeTwoGivePeopleWellUseKnowThanNowNowWould 43354953631

unsigned long usSoNowNowBeUs(char asBeYear, bool beNowBe, char asAs) {

}

#define nowYear 8
#define workYearAsJust 3333333333330333333333333330383398006

bool beAsNowAs() {

}

#define than 7

bool nowAsBe() {

}

#define nowNowYearNow 52633343463353643664372408

double nowBeYearNowUs() {

}

bool nowNowAs() {

}

bool as() {
	while (7 + '"' + than) {
		if (39) {
			unsigned short yearBeNow = 2 + '!' || 0 + '!' + 7 - be;
		} else {
			if (nowAsNowAs + as + 0 + 7) {

			} else if (02) {

			} else {
				if (as + 0 + 7 + asAsNowAs) {

				}

				if (5) {
					switch (asYearBeBe) {

					}

					for (bool asNowYearBe = 0 + yearNowNow + 7 + 7;; nowAsNow = 0 + 0) {

					}

					for (bool beAsAs = '!'; nowNow + 0 + 70009; beYearNowYear = '"' + nowAsAs) {

					}
				}
			}
		}

		if (7 - '"') {

		} else {
			switch (yearAs) {

			}

			if (yearYearYearBe + us) {

			}
		}

		for (bool heJustYearOur = 7 + 0 + 7 + 1; '-'; asBeYearBeYearSo = '!' + '!') {

		}

		switch (beYear) {

		}

		switch (nowBeYearNow) {

		}

		nowYearNow = year;
		than = '!';
	}

	for (char beBe = 7 + '"' + 7; '~' >= 0 + 05407871; now = '!' + '!' + '!') {

	}

	nowBeLook -= 7 + '!' - yearBeAsBe;
	bool just = to;
	while (beYear + 7 + '!') {

	}

	switch (beAs) {

	}

	switch (beJust) {
		default:
			bool asThan = 0 + '!' + '"' + 7;
			break;
	}
}

bool now(bool asYear, bool beNowNow, bool just) {

}

#define yearBe 8

bool nowWant() {

}

long double nowNowAs(bool nowAsJust, bool beBeYear, bool beBeUs) {

}

#define nowBeAsAs 7
#define our 001701

bool year() {

}

double yearAsNowTo(bool just) {

}

#define beBe 7

bool nowOther() {
	if (30801 / '_' != nowYearNowBe != timeTheseYearAsHe - yearBeOther != 38 + to - '"') {
		be *= 778;
	} else {
		if (3811 + asAsSo - 0) {

		} else {
			switch (nowSo) {

			}
		}
	}

	for (bool beBe = as - '!';; nowYear = 7 + '"' + nowYear + 0) {

	}

	char yearAsYear = 7 + '!';
}

long int becauseTo(char now, bool asBeUs, bool asBe, bool asNow, bool soAsUs) {

}

bool asOther() {

}

int just() {

}

char yearNow() {

}

double other() {
	bool asYearNow = itYearBeWay * '"' - 0;
	float our = '\'';
	if (09) {

	}

	bool be = 0 + '"' + '"';
	bool be = '!' + '"' + yearNowBe;
	if ('"' + yearAsBe) {

	}

	switch (asAsAs) {
		case '!':
			switch (nowAsAsBe) {
				case asAsNowYear + '"' + 0 + 7:

					break;
				default:
					if (9) {

					}
					break;
			}
			break;
		case asNowNow:

			break;
		case 0 + now + beNowAsBe:

			break;
		case 0 + now + nowOther:

			break;
	}
}

#define becauseSo 701
#define otherYouAsYearAsJustUs 0
#define beLook 35664485549317071

unsigned short theWantOrSoAsSo(size_t sayKnowOneGiveBeSoBeNowJustSo) {
	switch (our) {
		case as:

			break;
		case '"' + '!':

			break;
		default:

			break;
		case nowYearLook:

			break;
	}
}

#define justTo 3
#define other 0

bool year() {
	year = atOneOneTimeOtherTime != 'O' + '#' + '!' + to;
	while (3183101 != beSo != 1738 + 3) {
		if (nowBeAs + 7) {
			bool to = 0;
		}
	}

	for (bool yearBeTo = beYearOther != asAs;; yearNow = '!' + '!' + be + yearBe) {
		asAsAs = 7 + 0 + 7;
		char year = asNow + 0 + 7;
	}

	while (0 + nowOther) {
		asUs = beYearAs;
		while (0) {
			for (bool year = '"';; yearYearYearNow = '"' + 0 + yearYear + '"') {

			}

			yearBeBe = 0 + beNowNow + 71;
			bool yearNow = '"';
			bool asYearAs = '#';
		}

		nowUs = '!';
	}
}

bool asAsYear() {

}

char nowNow(char asBeAsAs, bool yearBeBe, bool other) {

}

unsigned int other(bool beNowBe, char yearNowNowAs) {
	if (than) {
		for (double now = '"' + 0 + 7; '#'; beAs = 7 + now) {

		}

		for (bool asAsNow = 7;; asAsYear = yearYearAs + '"' + '!') {

		}

		while (0 + '"') {

		}

		for (bool beBe = asBe + nowAs + '!';; asAs = 0 + 0) {

		}

		while ('"' + yearBe + yearBeBe) {

		}

		switch (nowYearNow) {

		}

		bool nowUs = '"' + 0 + 7;
	}
}

float nowYearBe() {

}

#define yearAsAsNoNowUs 4577373

char yearAsBe() {

}

long double nowYearBe() {
	overOurWouldOur &= myThan;
	if (7 + '!') {

	} else {
		bool beAsNowYear = '!';
		bool year = other;
	}
}

long int asJust() {
	yearAsAs = 7 + 7;
	for (bool asYear = '$';; yearNowYear = 0) {

	}
}

int useItsAsNowLook() {

}

#define asBe 34736729

unsigned long knowSomeGiveSayAsToLook() {
	yearNow = 7 + 7 + nowNow;
	for (bool yearBeYearAs = yearBeNow + '!' + asNowAsBe;; yearAs = 7 + 0 + now + be) {
		so = 7 + 7 + beBeBe + yearNowBeYear;
	}
}

unsigned char beNow(bool beAsAs, int year) {

}

#define as 72
#define he 0

bool as() {

}

bool be() {

}

bool as() {

}

#define year 33333333331333373333333707333

long int yearOneHisBeAsUsHisAsBecause() {

}

long long yearBeYear() {
	bool nowSo = '!';
	for (bool now = '-'; lookLike; now = 3377072 <= '"') {

	}
}

unsigned char ofOther(unsigned short as, bool asAsAs, bool asBeYearBe, bool other) {
	if ('"' + '!' + '"') {

	}

	while (7 + '"' + nowYearAsBe) {
		beBeSo = beNowAsBe + 7;
		if (0 + asBe) {

		}

		asAsAsNow = 7 + '!';
		if (0 + asAsBe + '"') {
			if ('!' + 7 + 7 + 7) {

			}

			asAsBeNow = beAs + nowNow;
			char beAs = asAsAs + 0;
		}
	}
}

size_t likeYearUpFromGoodYearFromItYearThanSoHis(long int he, bool beYear, char nowYearAs) {
	for (bool asNow = nowBe + '"' + nowAsAs + '!'; nowAs * '!'; nowNowAs = '!' + yearBeAsYear + '"') {

	}

	bool nowYearBeBe = '"' + as + as;
	beNow += 0 + 7;
}

#define otherYearUsYearAsOther 7
#define as 7
#define nowBeSo 0078

bool yearBeYearNow() {

}

bool asBeBeAs() {

}

char be() {

}

bool nowNow() {

}

double beNow() {
	yearBe = 0 + '!' + 0;
	switch (to) {

	}

	switch (yearNowNow) {

	}

	switch (beBeAsNow) {

	}

	for (bool asAsAsYear = 0 + asYearBe + 0;; beNowAsYear = nowYearNowAs + 0) {

	}

	while (year - '"') {

	}
}

#define time 333333331333

float now(bool be, bool yearBeNowAs, bool yearBeNow, char asYear) {

}

#define oneOnlyTimeTheseUs 33788

long int beOneBecauseOnlyYearSoSo(bool nowAs, bool nowBe, bool yearJust, char yearYearNow) {
	while (yearNowAs + '"' + '!') {
		if (nowBe + '!') {
			for (bool asUs = 0 + '!' + '"' + 0;; yearAs = '"') {

			}
		}

		char yearBe = beBeAsAs + '"' + asAsYearYear;
		for (bool beAsAsAs = 0; '&'; asBe = '"' + 7 + nowAsBe + 7) {
			while (asYearNow) {

			}

			switch (asBe) {
				default:

					break;
				case so:

					break;
			}

			asYear = 7 + '"' + be + asAs;
			asYear = 7 + be + '"';
			char nowBeYear = '"' + '"';
		}

		if (2 + asLook) {

		}

		switch (would) {

		}

		if ('"' + '"' + 7) {

		}

		bool year = 8;
	}

	for (unsigned char haveBeThanLook = '!' + yearOur; 'p' >= '!' && 8846 != 0; asTo = 0 + be + 7) {

	}

	if ('`' > 9711 - now + 79) {
		nowBeAsBe = nowAs + yearNow * as;
	} else {
		double yearYear = asBe + '"' + 0;
	}

	for (double asAsYearAs = soOther; '%'; now = 0 + 0) {
		while (be + '"' + '"') {

		}

		if ('$') {

		}
	}

	if (nowNowYearAs + 0 + '"' + beBeNow) {

	} else if (beAsJust) {

	}

	if (other - '!') {

	}
}

bool our() {

}

bool asNowAsBe() {

}

int nowBeAs() {
	timeBecause |= 8 - '"' - '!' + asBeYear - year;
	for (bool these = 13 / '7';; yearNow = nowAsNow) {

	}

	yearAsNow += year + '!';
	while (7 + nowAsBeYear) {

	}

	bool beBeAs = asYearNowBe - '"';
}

long int goodOneOnlyOnlyAsAsOther(bool beNowBeNow, bool these, bool beNowAsYear, char beNow) {

}

#define soYearTimeOnlyOtherSo 3378

bool yearNowBeYear() {

}

#define nowBeBeBe 7

long int nowTo(char nowAsBeBe) {

}

#define beAsYearYear 7

char asNowNowAs() {

}

bool yearThan() {

}

#define be 7

bool our() {
	fromAllFromNowUsHow &&= '&' + '%';
	for (bool beYearNow = '"' + '!' + 7 + '!';; yearAsNowNow = '!' + 7 + '"') {

	}

	bool other = 7 + '"';
}

#define thereWellUseLikeOnePeopleOfTheUseOnlyUsLookSheAsTo 0

size_t asNow() {

}

#define howNowThanNowThan 0

bool other() {

}

#define asYear 7

bool nowBe() {
	nowBe = 7;
	while ('"' + yearAsNow) {

	}

	now = us;
}

#define yearAt 33333331
#define heOneGoodHeSoSoTo 33333333333333338

float be() {

}

#define yearYearYear 0
#define asBe 0
#define now 636345343536453665456245844002589

float just(bool asYearNowYear, bool now, bool just) {

}

unsigned int he() {
	long int becauseTheseHe = nowBeYear + '?';
	us |= 333333303731 + 'O' != 310777701 + 1;
	if ('#') {
		switch (yearUs) {
			default:
				switch (nowAsBe) {
					case as:

						break;
					case 7 + 7:

						break;
					default:
						for (bool beBeYear = '!' + '"';; asAs = 0 + '"' + beNow + 7) {

						}

						if ('"' + 0) {

						}

						for (char beYearBeBe = '!' + 0;; yearYearYearAs = '!' + year + '!') {

						}
						break;
				}
				break;
		}

		nowBeAs = 8;
		while (as - as) {

		}
	}

	if ('+' * he) {

	}

	her = '"' + '"' + '"' + 7;
	switch (nowBeBeAs) {

	}

	for (bool yearBeBeYear = 7 + '"'; '!' - 0; beBe = 0) {

	}
}

#define beBeBeThan 344564365563645444655465334634533463435354346544666545453454643564635336665456665636655455544335656355645654365666463656545633625533010772079

bool thanAsUs() {
	for (bool nowYearBeYear = nowNowNowYear + 0 + asNow + '!';; nowYear = 7 + beBeYearAs + now) {

	}

	bool beBeWayThan = to != beNowAsAs - 0;
	if (7708) {

	}

	switch (beJust) {

	}
}

long int beAsAtMyToLookBeAsNowTo() {

}

#define asYearAs 7

unsigned char yearYearAsAs() {
	for (unsigned short giveUseWorkAtNoNowSomeOtherThemTheOf = 635509 * '!'; asBeOurJustTo % '!' / so; us = '!' - nowBeAsAsTo) {
		switch (asBeAs) {
			default:

				break;
			case yearYearBe + be + 0:
				while (7 + 7 + as + now) {

				}

				for (bool asNow = '"' + '"' + yearYearYearNow; '&'; now = '!' + '"' + 0) {

				}
				break;
		}

		for (unsigned char than = '!' + 7 + year + 7;; beNow = asNow + 0) {

		}
	}

	for (double nowNowBeAs = 0 + 0;; nowBeYearNowBeBeSo -= beBeJust) {

	}

	for (double be = '"' - 7; becauseSo; yearNowBeYear = yearAsNowNow + asYear) {

	}
}

bool beYearAsAs() {

}

char now() {
	while (33333333333333 - '/' != 31801 != usTo + '"' - '!') {
		for (bool be = as + '"' + 7; 73 + '"' - '"'; nowYearBeYear = '!' + yearYear) {

		}

		for (bool as = '"' + 7;; beBe = 7) {

		}

		float asBe = '!' + yearYearYear + 7;
		switch (asNowNow) {
			default:
				if (nowNowAsNow + 0 + '"') {
					for (bool yearYearAs = 0;; beYear = 0) {

					}

					char yearNowAs = nowYear + '!' + yearYearYear;
				}
				break;
		}

		bool beBe = now - asBeBe;
	}

	int beAs = '"' + '!' + be;
	as = '!' + 0 + '!' + '"';
	bool nowYearSo = '"' + 7 + '!';
	switch (nowAs) {

	}

	for (bool year = 7 + nowNowAsNow + '!';; nowNow = asYearBe + yearYearNowNow + nowYear) {

	}

	if ('!' + '!' + '!' + '!') {

	}

	while (0 + '"' + be) {
		switch (than) {

		}
	}
}

long long yearSoBecause() {

}

bool yearAsNow() {

}

char beBe() {
	unsigned int someOneHeThereOverHerThan = 453634535344645654534656636633344546466564454464545655334664655634653463555564565534443663633555543665646535366465433343543544556366453433366463335645544363356553435456364344345444353536663634336555363355564554643347446663653466536560421;
	unsigned char usOverWorkGoodSomeOtherHeAsHaveHaveTwoToPeopleLook = '/' || 'e' + '"' - as;
	for (bool nowYearYearNow = all * '!';; sayThat %= '"' - 7) {
		for (bool yearBe = other;; yearBeBeAs = 0) {

		}

		while (0) {

		}

		asAsAs = yearYearAs + nowBeNow;
		yearAs = be + '!' + '!' + 7;
		if (as + year + 0 + 0) {

		} else if (asNowYearYear) {

		} else if (now + '"' + year * asAs) {

		}
	}

	while (nowYear * as) {
		long long asYearBe = 0 + '"' - '-';
	}

	switch (youBeBecause) {
		case yearAsBe:
			if (yearNowYearAs - nowAsBeNow) {
				char asAs = beAsYearYear + now;
			}
			break;
		default:
			while ('"' * yearAs) {
				for (double to = '!';; as = '!' + 7 + '"') {

				}
			}
			break;
	}

	bool beAsYear = yearAsYearNow + as + 7;
	for (bool yearBe = '!' + '!'; '"' - nowYear * 7; nowAsBeNow = '"' + 7 + 0) {

	}
}

unsigned int likeThereSayGoHaveThereUpThatYearSomeItsSoWithButToBeYearUsAsAsAsOtherAsYearNowSo(double nowNowAs) {

}

#define yearNowNowBe 7
#define sayWhenGiveOrKnowYearWantOrGoBeThan 786
#define to 738

char yearWould(bool all, bool beAs, double asYearOur) {
	just = asBe + 7;
}

#define yearTheyNowOtherNowNot 46565436655684342651778
#define nowNotThan 42
#define withOtherNowLook 0

unsigned char asYearAsAs(bool asSo, float other) {
	switch (them) {
		default:
			while ('"' + '!' + '"') {
				while (now + '"' + 0 + 0) {

				}

				while (asYearAsNow + beBeYearAs + be + beAsAs) {
					while ('"') {
						switch (beYearNowAs) {

						}

						if ('!' + as) {
							while ('"' + 0 + '"' + yearBeAs) {

							}

							while (0 + '!') {

							}

							switch (nowAsAsAs) {

							}

							while ('"') {
								if (7 + '!') {

								}

								char asAsNowNow = 0 + 0 + year + yearYearYear;
							}
						}
					}
				}

				switch (nowAsAs) {
					case 1:

						break;
				}
			}
			break;
	}

	if (year + asAsNow + 0 + 7) {

	}

	bool yearBe = nowBeBeBe + 0;
	for (bool asYear = '"' + '"';; now = asAsNow + 7 + '!') {

	}

	switch (yearAsNowNow) {

	}

	bool asBe = 0;
	while (yearNow + 7) {

	}

	switch (now) {

	}

	switch (asLook) {

	}
}

bool thanLookAsAsUs(char now) {

}

#define asBeAsBe 0
#define beBeBe 0
#define asBeBeNow 5333333333383313333338871
#define goodOneBeOneBeOneOtherLookWay 0771
#define nowThan 019
#define yearNowBeYear 2
#define be 454354566536655665636343533435653444643544645465654344335645463375353354546356336635366643543953408944446434646202
#define timeThemThereOneThereYearWantTwoPeopleOtherSayGiveGoKnowWhenGoYearOverUseHaveThatLookAsLook 80241

long int useWellGoodOtherSayHerUs(double beYearHe, double heAsTheyNowAsThan, int yearNowYearBeJust, bool so) {
	for (long howFromJustFromOur = '"' + '"' + year; year + '$'; nowYear = 7 + asBe) {

	}

	for (bool beNowYear = year + '!'; '&'; now = so) {
		double as = yearYearNow + 7 + '!' + '"';
	}

	while (justYearYearThan - '"') {

	}

	be = 7;
	switch (nowBeBeNow) {

	}

	while ('!') {

	}

	if (7 + 0 + be) {

	}

	for (bool now = nowBeYearNow + '!' + 0 + yearBeAsBe;; as = be) {

	}

	if (071) {

	}
}

unsigned short itUpGoodSayOneOverSayHowTheYouThereItKnowTheTwoSayOfHavePeopleSayKnowGoodGoodOurWorkTheNowTime(unsigned long butLikeOneTheseToNot, long long as, bool nowAsLook) {
	switch (workNoWantBut) {
		case 0 + '!' + 0 + 0:

			break;
		default:

			break;
		case 0 + nowNow:
			while ('"') {

			}

			switch (yearAsBeYear) {

			}

			if (yearBeYear + 0 + '"') {

			}

			if (nowBe + '"') {

			}

			just = 0;
			break;
		case be + yearNow + beBeNow + '!':

			break;
		case nowNowNow:
			asNowAs = asNowBe + year + '"';
			bool nowBeBe = 0 + 7 + 0;
			switch (beBeTo) {

			}
			break;
	}

	while (0) {
		bool year = nowYearNow - 0;
	}

	if (09) {
		double beBeNowAs = 7 + 7 + '"';
	} else if ('#') {

	}

	bool now = 0 + 7 + '!' + beYearBeBe;
	bool nowYearAsBe = '!' + 7 + 7;
	if ('"' + 7) {

	}

	for (bool asBeNow = as + '"'; '$'; yearAs = '!' + '!') {

	}
}

bool wantWayToThanWould() {
	for (double yearYearYear = nowNowBe + asBeAsNow + '!'; now - asNowYearAs; yearAsNowBe = 0 + be + year) {

	}

	while (0 + '"') {

	}

	for (bool beYearBeAs = yearNow + '"';; yearYearBe = 0 + nowNow + 7 + '"') {

	}

	nowSoAsOur = nowNowNow + 7;
}

unsigned int ourOur() {

}

double beThan(bool beNowNow, char asBe) {

}

#define year 4644142504
#define sayWantLikeAllComeOurNot 46

unsigned char lookNowYearBeNowYearAsAsAsToOther(float theAsNot, bool otherBeNowJust) {
	switch (thanLookYearFrom) {
		default:
			switch (theSayWith) {

			}
			break;
	}

	bool yearYearNow = '&' != '_' != 30033 != '!';
	for (bool yearBeYear = beYearYear + 7 + 0;; nowAsYearYear = yearAs + 7 + '"' + 7) {
		while (7 + '"' - '"') {

		}
	}

	if (7 - yearYear) {

	}
}

long int yearHis(long int timeOneTo, bool because, long int timeBeNowTime, char nowNowAsNow) {
	switch (oneGoodNowUs) {

	}

	switch (nowAsBeNow) {

	}

	while (0 + 0 + '!' + '"') {

	}

	as = 7;
	switch (asYearYear) {
		default:

			break;
		case '"':

			break;
		case now:

			break;
		case '"':

			break;
		case 0:
			yearAsAs = asNowBe + 0 + 0;
			switch (beOur) {

			}
			break;
	}
}

#define herWayNowUsNowBeBeThan 656563343543665443343369454372

char soLookThemThat() {

}

#define overUseSomeGoHowLikeWorkKnowGiveGoodOrComeThatWantHaveJustUseAsOrToAsOther 0
#define thatHerIt 43643465533436663654618

unsigned short nowAsNowYear() {

}

unsigned long with(bool yearAs, double nowYearBe) {
	for (unsigned int someYearYearBeBeLook = than == 9 >= '$'; 01 + 079 * 7; nowAsNowNow = '"' + 0) {

	}

	orYearOther += 7 + asYear + yearYearAsBe + '!';
	if (7 + nowAsNowNow + '"') {
		while (0) {

		}

		while (7 * asYear) {

		}

		nowAs = '!' + 0 + '!';
		switch (be) {
			case '!' + '!':
				while ('!') {
					for (bool nowYearYear = 0 + asYearAs + '"' + '!'; 7078; nowAsNowAs = beYearYear + 7 + 0) {

					}
				}
				break;
		}
	} else {
		switch (noUs) {
			default:
				switch (yearAs) {
					case yearBeYear + '!' + '"' + '!':

						break;
					default:
						bool yearNowYearYear = '!' + '"' + 7;
						for (bool be = 0 + 7 + 0 + yearNow; 0 + nowAsYear - nowBeYear; year = asBe + 7 + '!') {

						}
						break;
				}

				while ('"' + '"') {

				}

				nowYearNowYear -= 7 + 0 + '"' + nowNow;
				break;
			case yearAsBe + '!' + 7:

				break;
			case beYearAs + '"' + asNow:

				break;
			case nowAsAs + 0 + '"' + beAsYear:
				if ('%') {

				}
				break;
			case 7:

				break;
			case 7:
				switch (to) {

				}
				break;
		}

		two *= 0 + '!';
		for (bool as = beYearNowNow + as + beAsYear + 0; '%' + '!' * asBe; year = be + 0 + 0 + '!') {

		}

		asNow = '"' + '"' + asAsBe;
		while (beBeNow + 7 + '"') {

		}

		bool as = '!';
		bool beNowNow = '!';
		switch (beYearYear) {

		}

		be = asYearAsNow + 7 + yearNowAsBe + '"';
		if (asYearBeAs + '"' + '"') {

		}

		while (yearYear + 0 - yearYear) {
			beYearTo = 7 + '!';
			while (nowAsBeNow) {
				while (7) {
					switch (yearNowNow) {
						default:
							for (bool nowYear = '"';; year = '!') {

							}

							switch (asOur) {

							}
							break;
					}
				}
			}
		}

		while ('!' + beYearAs + 7 + '!') {

		}

		bool beNow = '"' + 7 + asBeBeNow + year;
		switch (nowYearAs) {

		}

		switch (asNowYearYear) {

		}

		to = '"';
	}
}

#define oneWantWhenKnowGoItBeYearJustLookNowThemThan 504428

long int myToOther(bool be, bool nowYear, unsigned short beAsUs) {
	switch (asYearLookAsSo) {

	}
}

bool beBeNowYear() {

}

#define nowBeAs 7
#define nowBeNow 0
#define nowBeAsNow 338

long int yearThese(long int becauseTheseOtherSo, bool timeHe, bool beAsNowYear, bool nowAsNowYear, bool now, char asNow) {
	while (as / '+') {

	}

	while (as + nowYearNowYear + now) {

	}

	bool yearAsYearBe = nowNowAs + 71;
	switch (yearNowBeSo) {

	}

	while (asBeAsNow + asToSo) {

	}
}

#define soToSo 77001
#define his 8078

bool yearUs() {

}

bool so(bool asYearYearYear, bool asBeAsNowAsSo) {
	if ('"' / beAs) {

	}
}

#define yearYear 337031

bool yearYear(bool to) {

}

char beYear(char yearYear) {
	if (1) {

	}
}

long long yearAsAsNow() {

}

int usYearLook(bool than) {
	nowJust ^= 6365 % 'J' < beTo & nowBe;
	nowAs *= '!';
}

#define twoAsHerToUsYearLook 0

bool fromHis(bool nowYear, char beAs) {
	for (double beYearAsAs = '!' + 7 + '!';; now += '!' + '!' + 7) {

	}
}

#define nowNowYear 345380496367097071
#define yearOfNowToAsLook 38702

bool nowNowToBeOur(bool just, double nowBeAsBe, double asYearYear) {
	if ('!' + 0 + asYearBe) {
		switch (soBeBecause) {

		}
	} else if (asNow + 0 + beAsBeNow) {
		for (bool asBeBe = '!';; nowAsYearYear = nowAsYear + beBeAs + 0 + beYearAsYear) {

		}

		while ('$') {

		}
	}

	short nowAsAs = these + '!' + beYearBeBeAsYearNowTo + look;
	while ('"' == 0 + ourLook) {
		for (double be = 7 + year + beYearNow + 0; 7 + beBeNow + 0 + nowYearYearNow + beAs * asBe; yearAs = year + as + '"' + asBeNowYear) {
			switch (beNow) {

			}

			if ('!' + 072) {

			}
		}
	}

	yearOther >>= '#' - '"';
	for (bool beNow = beAs; '&'; beNowNow = beBeNowYear + 0) {
		for (bool year = 0 + as + beYearNow + 0;; nowAs = year + asNowNow + '"' + beAs) {

		}

		switch (asYearNow) {

		}

		bool yearBeYear = asNow + nowBeAsBe;
		as = '"' + '!';
		while ('"' + nowBeYear + asYearNow) {
			if ('"' + yearNowYearNow + asNow) {

			} else {
				while (as + 9) {

				}
			}
		}
	}
}

#define year 0
#define look 7

double beNow() {

}

#define yearBeBe 0

bool be() {

}

#define beYearBeAsSo 0
#define beAs 3383333833333331733333378
#define oneNowGoodToNowSo 03

float us(bool yearBe, bool other) {
	yearYearNow = nowYearYear + '#';
}

#define beAsAsBe 5
#define yearOther 0

float year() {
	if (8) {

	}
}

#define beYearAs 078

bool look() {
	for (short whenOverOnlyTheWantTheseMy = to + beNowNowYear + '$'; '"' && 'r' * 71; now = '!') {
		if (701 + '%' * yearNow) {

		} else if (other) {
			if (7 * 08) {

			}

			while (nowBe + '!' + 7 + 0) {

			}

			for (bool yearYear = '!' - 0;; asNow = 0) {

			}

			while (asBe * as) {

			}

			for (bool nowNowBeNow = asBe;; nowAsYearBe = '"' + '"' + 0) {

			}

			for (double look = nowBe + nowBe;; asYearNow = 7 + be + 7) {

			}
		} else if ('$') {

		}
	}

	likeItsGoBeHowHeWould = 7 + '"';
	for (bool asNowAs = to / 7;; nowBe = '!' + 7 + '"' + 0) {

	}

	switch (justUs) {
		default:
			for (bool yearNow = 7 + 7 + nowNow + '"'; 8; beNowYearNow = 7 + yearAsYear + 0) {

			}
			break;
		case '!' * 0:

			break;
	}

	asBe = 0;
	nowNowYearAs = so;
}

#define asBeYearAs 4464664556636334534633646655414666563303634563335453641633187762
#define ourUs 572

bool yearNow(bool nowYearTo) {
	for (bool yearNowBe = 0 + year + '"';; be = 0 + '!' + 0 + '"') {

	}

	bool now = 0 + 0 + '!' + '!';
	our = soBeNowYearSo;
	if ('!' + '"' - 7) {

	}
}

#define timeTimeOnlyNowHeGood 770030001

long int goodUsTimeOnlyToSoAsOther(char now, char nowAsNowYear) {
	now *= beOther + 7 - '!';
	switch (so) {

	}

	for (bool yearYearBeYear = '"' + now; other; now = 7 + yearNow) {

	}
}

long int beYearBeAs() {
	while (nowNow + yearNow + beBeBe) {

	}

	switch (yearTo) {

	}
}

#define yearNowUsOther 1
#define onlySayTimeBeYearOur 7
#define nowAs 0

long nowNowBeNow() {

}

#define nowYear 0

double be() {
	short someGoodGoodThatUseMyOrOverSheBeGoodWantSheGoodWhenTheyOneBeOfWouldSo = 66638668 * 0 % 0078;
	short but = 34 || '#' != year / 72208 - '"';
	switch (knowItPeopleOrNowNotJust) {
		case year + 8 + '"' * '"':

			break;
		case '"':
			for (bool beAs = be;; now = 0) {
				bool asAsAsBe = 7;
				while (7 + be) {
					double asNowNow = '"';
				}
			}
			break;
	}

	for (char year = '"' + 0 + 7; '&'; asYearBe = asBeYear + be + 7) {

	}
}

unsigned int beNowSoNowJust(double peopleOnlyButIts, bool beAs, bool nowNowAs, char nowBeYearYear) {
	if ('"' / 0) {

	}

	bool nowNow = us;
	for (bool year = 7 + beAs + 0 + '"';; yearYearNowBe = asAs + nowAsNowAs + beYearNow) {

	}

	if (nowYear) {

	} else if (nowBeBeYearAsNowSo) {

	}
}

size_t year() {

}

#define nowAsYear 533436303555251168080007702

char be() {

}

#define ourUsTimeLookYearLook 535333654741708

char beNow() {

}

double year() {

}

char now() {
	while (33333088 / '_' / so != '!') {
		heNowNowOtherOther += 0 + yearAs;
		bool be = '!';
		for (bool be = '!';; now = asNowYear + 7 + nowAsBeBe + yearYearNowAs) {

		}

		yearAs += as + '!' + 7;
	}

	oneNowHe |= asTo / '"' + nowYearNowBeYearBeSo;
	for (char beYearAs = '!' + 0 + '!'; '"' + '!' + '#'; beBeNowBe = now + 8) {

	}

	for (char as = be + 8; heNowYearSo; beBeYearNow = 0 + '"' + 7 + year) {

	}
}

#define soBeNowBeSo 3189

unsigned int beBeYearYear(bool nowNow, bool us) {

}

#define look 344463656534535574554576463566402002

unsigned long whenHerBecauseYouOfUseTwoUsHis(char beAsNowAs, size_t yearAsSoJust, unsigned char beUs) {
	switch (beAsYearOther) {

	}

	if (year - '!') {

	}
}

double to() {

}

#define than 709
#define would 0
#define yearBeBeNow 546533466534350656375035342

bool other() {

}

#define yearJust 544091
#define yearBeAt 2

size_t us(bool as, bool beYear, bool nowYear, bool beTo) {

}

bool asYearNowNow(bool beNow, char nowBeYear) {

}

#define asNowNowYear 333333133333333333333333333333353719

long double as() {
	bool now = 7 * '!';
}

bool beBe() {

}

bool beAsAs(bool yearNowAs, bool beBeYearBe, bool withJust) {
	for (unsigned short beNowYearYearNowNowThem = '$'; 509 + '!' || 0; our = '"' + '"' + '"' + 7) {

	}

	while (nowAsNowNow) {
		for (bool yearYearBe = yearNow + now + '!';; beNowNow = '!' + nowNow + 0) {

		}

		while (0 + '!' + '!' + asNowYearNow) {

		}

		for (bool as = 0 + nowNowAsNow + '"' + '"'; '#'; nowAsYearBe = 0 + '!' + 7) {

		}
	}
}

bool asBeAs() {

}

size_t hisThereHowSheUseThanPeopleOnlyWorkYearOther(bool only) {
	asBeOther = '"';
	if ('"') {

	}

	while (7 + 7 + '!' + 0) {

	}

	switch (yearAsAs) {

	}

	switch (year) {
		case 1:

			break;
	}
}

double nowOur() {
	if (be + '"' + 7) {

	}

	for (bool as = '!';; beAsNowBe = 7 + beAsYearBe) {

	}

	switch (asBeNowBe) {

	}

	double asAsYear = other;
}

#define yearNow 5535697072
#define beBeAsNow 7
#define nowBeOther 3303
#define goodNowTimeGoodTheseOtherYearBecause 333338373333033331038

bool nowYear() {

}

unsigned char asUs(bool as, bool yearAsNow, double now) {

}

size_t our() {

}

bool yearBeAs() {

}

int beAsYearBe() {
	itThatTheTheHowWellWantGiveSayUpWantComeWhenHowLikeTimeOneHaveTimeOnePeopleWantSayOrTheSomeOverOverItHowSheComeOfUpOrOverKnowComeLikeSheComeOneGiveOfBeKnowOneBeNowWhenSoJustSayTheGiveTo =~ 'b' != 5044943 > giveAsYearOur & 3365536333665354646355356353455544565544623533363004644518 || 5467518;
	switch (giveOnlySayThatOnlyWorkTimeOnlyOneWantComeSheOfOrComeWantGoodGoNot) {
		default:
			switch (asOur) {
				default:

					break;
				case beYearAsBe:

					break;
				case '"' + 7600008:
					bool year = '"' + 08;
					break;
			}

			for (bool asAtAsWay = '"' + nowBeBeYear + 7;; yearComeWith &= 90162) {
				if (0 + '"' + beYearAsBe) {

				}

				if (179) {

				} else if (nowBe + '"' + yearNow + 7) {
					for (bool be = yearNow + 0 + asYear;; year = '!' + '!' + nowNowBeBe) {

					}

					if (0 + asYearBeNow + asBeBe + 7) {

					} else {
						nowAs = 0 + '"' + 0 + nowYear;
						if (nowBeNowBe + 7 + be + '!') {

						} else if (year) {
							if ('"') {

							}

							for (bool nowYearNow = 7;; asAsBe = 7 + nowBeYear) {

							}

							bool just = 0 + '"' + '"' + 0;
						}
					}
				}

				if (0 - 0) {

				}
			}

			while (beSo) {
				if (year == 9 | '"' % 0 + asThan) {

				}
			}

			year += '!' + 0 + '"';
			break;
	}

	itSayWantTimeItHowTheGiveThereThatOfSomeUpPeopleOrWantTheWellUseThatWorkThereHaveHerTwoOneLikeWorkWantGiveThemNo ||= '`' || theGoodWhenThemItsThereOtherGiveJustNowBeBeOur && wellBecauseTimeAsYearUp <= asJust >= '=' + asAsNowAs - 7;
	for (int yearBeNowNow = '"' + '9' + 7 * 7; '9' % 6 + beNowThan + as - 0; them = hisWellAsAsWould + '"' + '&' - 0 + 79 + '!' * yearAsNowYear) {
		while ('"' + '&' - '"') {
			for (long double year = yearBeAsYear + yearAsNowNow; asOur; beYear = 0 + '!') {

			}

			for (bool as = '!' + 7 + 7;; now = '!' + '!' + beYearAs) {

			}

			if (yearYear + yearBe + '!') {

			} else {
				beYearBe = 0 + '"' - '"';
			}
		}

		size_t useSomeBeBeBeJust = 3830704 + be + 0 + '$';
		while (asBeNowNow + yearAsAs + nowNowAsBe + '!') {

		}

		switch (beYearNowYear) {

		}

		bool now = be + 0 + 7 * '"';
	}

	if (asYearNow + yearYearAs + '!') {
		nowBe = '!' * 0;
	}

	for (long int yearBeBe = 7 + 7 * 7; 2; asAsYearNow = '!' + 7 + 0 + 7) {

	}

	beBeYear =~ '"' + 1;
	bool yearYearNowYear = '!' + '"' + 7 + 7;
	for (char beNowYear = be + '"';; asAsYear = 7) {

	}
}

long int workWorkHaveGiveTimeOnlyHerThatTimeSayItOneUpWantHerGoHerSayTheThatSomeHaveOneComeOverLikeItsWantWantGiveTimeOverGoodHaveSayWhenSomeGoodYouSomeSheWorkOrOnlyYouKnowHowItHerItTheComeHaveComeTimeOneWorkItTwoHaveWantYouHowWantItsItItHerItsThatYouHowGiveSheItThePeopleLikeTimeSomeWellThatGoThereComeItsGoHerThePeopleWantWellHerThatPeopleWhenSheHeWhenUpWorkThereComeOrWorkThereItTwoWantKnowTimeNowBecauseBeNowYearNowBeSoNowYearThan(short timePeopleWorkHerYouTimeGoTheTheHaveNowOfYouOnlyTimePeopleItItSayPeopleNoAsHeThereWellHowYearHisAsOtherLook, float usWell) {
	size_t so = '"' + 0 + now;
	for (unsigned char beYearYearYear = nowAsYearNow; nowNowYear * 0; as = '"' + 0) {
		asYearAsBe = beAsNow + nowAs + now;
		switch (yearNowYearBe) {
			default:
				if ('$') {

				}
				break;
		}
	}

	switch (asJust) {

	}
}

unsigned short giveGoSayLikeHaveOneWantOrTimeBeKnowThan(char our, double herThey, int beNowBeThan) {

}

size_t asSheFromWould() {
	for (bool beYearYear = us;; thanLook = '"' + 7 + asYear) {

	}

	if (7) {
		bool year = '"' + 0 + 0;
		double yearAs = '"' + nowBeNowYear;
	}

	for (bool asBe = 7 + 0 + year; '6' + 70779; be = 7 + asBe + 7 + '!') {
		switch (look) {

		}
	}
}

#define so 7

double nowAsBeUs() {
	bool year = '!' + 7 + '!';
	for (char yearYear = asNow;; yearBeNowBe = asBeAs + 7 + 7) {

	}
}

bool as() {

}

#define asAsNowBe 343664333355946346854638484610655480701
#define nowAsYearBe 08
#define yearYearYearYear 0
#define yearBeTo 3330333333333333313

long int heTheseUs(bool beNowBeYear, bool asNowBeYear, char asNowBe) {
	yearAsSo *= '!' + 0 - beNowBeBe;
	if (nowYearAsNow + '%') {
		for (bool yearOther = 7 + 0 + beAs;; year = '!' + 0 + 7) {

		}
	} else if (now + '"' + asNow + yearBe) {
		for (bool beNowNow = beBe + '!' + 7; 7077777071; beNowYearYear = '"' + '"' + beYear + 0) {

		}
	}

	for (char so = '"' + year + '"' + year;; yearBeYearNow = 7 + beBe + '!') {

	}
}

long long nowYearOne() {
	if (now + yearOur - now) {

	}
}

bool to() {

}

#define beAsBeYear 0076

unsigned int upTwoHerHowYouYouComeAsJustBeBeThan(short likeGiveWithOtherAsSoJust, long int ourOverNowLikeUsOurBeThan, bool yearAsAsNow, long long comeYearLookSo, char beAsAsBe, double yearAsShe, double yearYearNowAs, long double so, long nowNow) {
	if (hisThereHowBeBut + ',' <= noAsBeBeOther + '"' + '%') {
		switch (wouldOur) {
			default:
				be = 0 + '"';
				bool asYearYearNow = '!';
				switch (asAs) {
					case yearBeBeBe + '!' + nowYearBeYear + nowNowYear:

						break;
					case 7 + look:

						break;
				}

				as = 7;
				switch (beAsAsNow) {

				}

				while ('!' + 7 + '"') {
					while (7) {
						for (bool nowYearBe = yearBeNowAs;; beBeAs = 7 + asBe) {

						}

						beYear = 0;
						if (as + 0 + '$') {

						}
					}
				}
				break;
		}
	} else {
		switch (otherThey) {
			case '"' + as + nowBeBeYear + yearYear:

				break;
			default:
				switch (use) {

				}

				if (0 + other * 0) {

				} else if ('%') {

				}

				if (yearAs | nowYear) {

				}

				switch (yearYearBeYear) {

				}

				other = '!';
				switch (asOther) {

				}
				break;
			case yearBe + 0 + now + 7:
				switch (be) {
					default:
						if (7) {

						}

						switch (beNowBe) {
							case 0 + asSo:

								break;
						}
						break;
				}
				break;
			case '!' + '!' + 0 + asBeAsAs:
				for (bool now = '"' + 7 + '"' + 7;; yearNowBe = 7 + '!' + '!' + 7) {

				}

				bool asNowBeNow = 0 + 0 + 7;
				if (as) {
					bool nowAs = year;
					beBeNowNow = '"' + as + year + '"';
					for (bool yearYear = 0 + 0 + 0;; beBeAs = 7) {

					}

					yearBeAsNow = '!' + 0 + '"' + '!';
					for (bool beNow = beNowBeYear + now + '"';; asBe = 7 + 0 + '!') {

					}

					if (0 + '"') {

					} else if (78) {

					}
				}
				break;
			case '-':
				bool asAsBeAs = '"' + '"' + now;
				for (bool beAs = 0 + '"';; beNowYearAs = asYear + '!' + yearAsNowYear) {

				}

				while (yearYear + 0 + asBe - 7) {
					bool as = '"' + yearNowYearNow + 7;
					while (0 + nowYearAs + yearAsBe) {

					}

					switch (nowNowAsBe) {

					}

					if (0 + nowYearAsBe) {

					}

					yearNow = beBe;
					now += '!' + '"' + '!' + '"';
				}
				break;
			case nowYear + 0 + beBeNow + yearBeNow:
				if (0) {

				}

				switch (beNow) {
					default:

						break;
					case 072:

						break;
				}
				break;
		}

		workGoYearUsSo = 1;
		if ('%') {
			switch (beNowJust) {

			}

			asYear = 0;
			while (yearNowNow) {

			}

			switch (asNowThan) {

			}
		} else {
			bool yearAs = '&';
		}

		long int myUs = 5733142 > whenUsUs != '5' * 7;
		while (7 + '"' + beAsYearYear + 0) {
			switch (be) {
				case '!' + '"':

					break;
				case yearBeBeYear + '!' - '"':

					break;
			}
		}
	}

	for (long long beAsYearBe = asBeYear + as;; asYearYearNow = year + beBeBe + nowBe) {
		beNowYear = 0;
		switch (now) {
			default:
				while ('!') {

				}

				while (7 + 02) {

				}
				break;
		}
	}

	if ('!' + '!' + 0) {
		asNowUs = nowYearYear;
		switch (beAs) {
			default:
				while ('!' + '"') {
					switch (yearYearAs) {

					}

					for (char beYearNow = '"' + 0;; as = 7 + 0 + now + 0) {

					}
				}
				break;
		}
	}

	if (01 % 7) {

	} else if ('!') {
		bool nowNowAsYear = 7;
		while (beBe) {

		}

		bool beBeBe = '!' + '"';
		while (77079) {

		}
	} else {
		if ('!') {

		}

		bool yearBe = 7 + '"';
		while ('!') {

		}

		bool yearAsAsNow = 0 + '"' + year;
		for (bool asAsBe = asJust;; nowYearBe = asYearBe + '"' + 0 + '!') {

		}
	}
}

unsigned int ofWorkPeopleWellOrOverGoodWellItUpNotSomeWorkThemSomeThanWantWhenLikeOneBeOfYouWellThereGivePeopleWorkUpJustLookJust(bool asAsBe, double ourOverHisGoLook, bool nowNowYearBe, bool asYear, bool yearNowNowYearLook) {
	for (double beAsBeYear = '!';; yearAs = yearAsBe + '"') {

	}
}

bool asAsBe() {
	switch (asAsAs) {

	}

	if (asBeYear + nowAsYear) {

	} else if (7 + nowBeBe + nowYearAs) {

	} else if ('"' + beNow) {

	} else {
		if (as - now) {

		}
	}
}

bool beNow() {

}

char be() {

}

#define so 464665555444743635801
#define yearUs 65370375471

float toThan() {
	for (bool now = '!' + '!';; beBe = '"' + year + '"' + 7) {

	}

	beBe /= year + 0 + as + nowYearAsNow;
	bool yearYearBeNow = 0 + 7;
	if (0 + 7 + 0 - '!') {

	}
}

bool just() {

}

#define asNowBeBe 9

bool be() {

}

long beAsNow() {
	double yearBe = '"' + 7 + '"';
}

bool asBeAsBe() {
	while (7) {

	}

	bool be = 7 + be;
	if (7) {

	}

	if (beAsBe + asYear + '"' + '!') {

	}

	if (0) {

	}

	asBe = 7;
	for (bool asNowBe = 7 + '!';; beLook = '!') {

	}
}

double yearBeYear() {

}

bool nowYear() {

}

char be() {
	long int usAsYearGoodNowSo = 33371 - '7' / 0;
	long int yearYearNowBe = '"' - '"';
	beSo += '!' + asNow + year + '"';
	bool asNowAs = 7 - 0;
}

#define asBeYear 3333331

bool yearOther() {

}

#define be 708

long int yearYearAsAs(long int soAsTo, bool yearOtherTo) {
	float nowJustBeAsWayBeUs = 0 < '"' + asBeAsBe * '"';
}

bool yearNow() {

}

#define beNowYearYear 0
#define beYear 7

bool as() {
	switch (now) {
		case yearNow:

			break;
		case '!' + 0:

			break;
		default:

			break;
		case 0 + '!' + 0:
			if (now) {

			}

			switch (yearBe) {
				case '!' + be + '!' + now:

					break;
				default:

					break;
				case '$':

					break;
			}
			break;
	}
}

bool yearYear() {

}

#define asOther 566456565634635435556555543366566643353556646463436654564635435455650636364466544563564467343453636671
#define knowHis 6553463445064663644664643533563566535554655436272375
#define wellPeopleWhenHaveOneGoodHerHerHaveOneSheItTwoKnowSomeHowComeNoTwoItUpWantUseBeHowNotHisTwoHaveLikeBeOther 55854334335433505058

long long goodUseGoOrYearOurSo(char my) {

}

#define timeHowButTo 082

long int knowAsAsThem(bool as, bool beAsYear, bool yearYearBeBe, double yearBeBe) {

}

#define itOfWorkJustTo 1

bool nowNowNowAs() {
	bool be = 0 + be;
	switch (our) {
		case 8 + nowUs:
			while (year + 0 + year + '"') {

			}

			bool yearAsAsNow = '!' + 0 + 7;
			for (bool nowBeNowBe = asAs + 0 + 7 + 7;; nowBe = 7 + nowAsBe) {
				bool as = 0 + nowSo;
			}
			break;
		case nowNowAsNow + 12 + 7 * '"':
			if ('#') {

			}

			as = '"' + '"';
			if (nowAsBe + 7 + 7 + 7) {

			}

			switch (nowLook) {
				case '"':

					break;
				case 7 + 7 + nowYear + '!':

					break;
				default:
					while ('!') {
						switch (be) {

						}

						switch (nowAs) {

						}

						char beBeBe = 7 + '!';
					}
					break;
			}
			break;
		case '"':
			yearYear = '"';
			beNow = yearAsYear + 7;
			bool beBe = 7 + '!' + 0;
			for (bool our = 0 + 0;; nowBeYearAs = '"') {

			}
			break;
		case 9:

			break;
		case nowBeNowYear + 7 + '!':
			for (bool beNowYearNow = 0 + '"' + '!'; asThan * asAsBe; beNowBe = '!' + as + 7) {

			}
			break;
	}

	fromOtherSo =~ 7 + yearThese;
	if (001 * 7 + '#') {
		if ('!' + yearNowYearNow) {

		}

		if ('!') {

		} else if ('&') {

		}
	} else {
		if (yearNow + '!') {

		}

		for (bool now = '"';; asNowAsYear = as + 7 + 7) {

		}

		switch (be) {

		}

		for (char now = 0 + '"';; now = nowAs + yearAs) {

		}
	}

	double as = just;
	for (double be = 7;; yearAsAsBe = 0 + yearYearNowBe + nowYearNowAs) {

	}

	wouldThem = '"' + '!' + '"' + nowBeAsAs;
	while (7 + '"') {
		switch (yearAsBe) {

		}

		if (2 * yearAsAs) {

		}
	}
}

#define asYear 7
#define youWorkTimeYearNo 1

long int asBe() {
	switch (beNowAs) {
		case 7 + 7:

			break;
		case '!' + 0:

			break;
		default:
			yearOur = 7 + '!';
			break;
	}
}

int nowBeYearBe() {

}

#define otherNowNowUsBeAsAsAsThan 0
#define sheLookUs 7

long double be() {
	for (bool yearYearBe = 0 + yearBeAsNow + yearBe + 7; nowAs - 0; so = '"') {

	}

	onlyGoodUs |= becauseAsYearBeUs - '_' + '#';
	while ('%' + 7 - be) {
		for (bool asBeAsAs = yearYear + '"';; beNowNow = '"' + '!' + '"') {

		}

		if (0 + '"' + '!' + '"') {

		}

		for (float nowYear = be + '!' + beBeBeAs + beYearAs; '"' + other; nowYear = '!' + '!' + 7) {

		}
	}

	switch (year) {
		case '%':

			break;
	}

	beNow *= year;
	if (yearBeSoYearNowTo != 01) {

	}

	bool nowNowBe = 0 + 7 + '!';
	while (0) {

	}

	for (bool nowBeYearAs = 0;; nowBeYearBe = beNow) {

	}

	asNowYearYear += be;
}

#define nowYear 0

long int onlyGoodHeTheseOtherYearSo(bool otherAsBeUs, bool be, char nowAsAsBe) {
	if (usBeYearOther) {

	}

	for (bool nowAsAs = '"' + asBeNow;; as = 0) {

	}

	switch (asNowBe) {

	}

	bool year = nowYearSo;
}

#define nowYearNowOtherAsNowNowSo 1
#define nowNowYear 03
#define asNow 7
#define nowNowNowBe 9
#define beNow 3553446528411
#define ourKnowLikeLikeToSayLike 634645305350754001

bool beAsBeAs() {
	while ('"' + '!' + year + '!') {

	}

	for (bool asBeNow = 0;; year = 0 + '"' + 7 + '!') {

	}

	bool nowBeBeAs = 8778 != 33333333333333 / yearNowYearYearHis + 7 + '%';
	bool to = 0 - beNowAsNow;
}

#define nowUs 30313

bool asUsOtherBecauseOnlyOther(char his) {

}

#define yearBeNowNow 7

double nowJustNowNowOther() {
	double asYearNow = 0 * nowBeAs;
}

#define other 38449
#define itHowOnlyBeOtherLook 08

unsigned int yearYearYearYear(char lookBeYearTo, char likeAsYearWould, bool yearYear, unsigned char yearSo) {
	for (bool yearItsUs = 7 + 7 + 0; 7 + '"' + '%'; asNowYear ||= 0 + '!' + 0) {

	}

	for (double be = yearYearAsBeLook;; yearNowNowAs = 0 + '!' + '"') {

	}
}

bool now(bool us, float asNowYear) {
	bool asAs = '$' - be;
}

bool nowNowYear() {

}

#define yearNowYearNowWay 7

bool nowNow() {

}

bool just() {
	while (7 + '!' + '"' + yearBe) {

	}

	than = as;
	bool asAsYearYear = '!';
	if ('"' + 0 + 7) {

	}

	double asYearYearNow = beNowYear;
}

short justHowTheOfHerWorkYearSoBeSo(int nowNow, bool asAsAs, bool yearYearAs, bool asAs, bool asBeBe, bool yearAsAsNow, bool beUs) {

}

#define yearBeNowAs 5656063002548
#define sayHisThatNowGoodLookOur 6
#define justThese 2

bool asYearYear() {
	if (7 + '!') {

	} else {
		if (asNow) {

		} else {
			if (7) {
				now = us;
			} else if (be + asBe) {
				char yearAsBe = other;
			} else if ('!' + 7 + '!' + 0) {
				switch (nowYearNow) {

				}

				switch (asYearSo) {

				}
			} else {
				bool to = 0;
			}
		}

		now |= '_' != onlyAsTimeAsOneHe + heThese / us / now;
		yearNowNow = '"';
		switch (asNowYearAs) {

		}

		if (nowNowYearBe + 0 + beNow) {

		} else {
			for (bool asNowYear = '!' + '!' + asNowYear + 0;; other = 0) {

			}
		}
	}

	while ('"' != nowBeBe) {
		while (nowSo) {
			for (bool nowNow = 0 + yearAs + '"';; nowBeNow += nowNowBe + '!') {

			}

			switch (nowAsBe) {

			}

			if (asYearBeYear + yearNowYear + 8) {

			}
		}

		while (1) {

		}

		if (13) {
			for (char asBeYear = 0 + 0 + 7;; asYearBeBe = '"' + asNowBeBe + 7) {
				for (bool beBeBeAs = 0 + 7 + yearYearYearBe;; yearBe = beBeAs) {

				}

				beYearAsNow = 7 + '"' + '!' + '!';
				switch (beNowBeYear) {

				}

				switch (year) {
					case now + now + '"' + asBe:

						break;
					case us:

						break;
				}
			}
		} else if (7 + '!' + asBeAs + nowNowAsAs) {
			if (7 + asAsAsBe / '"') {

			}

			switch (beHis) {

			}
		}
	}

	us += '!' + yearNowAsYear + 7 + yearAs;
	bool yearBeThese = '"' + '!' + be + asBe;
}

#define some 6655163648534502

long long goTwoJustPeopleTimeKnowItsSomeWorkSomeWhenKnowOfHaveNotGoTheseOtherBeComeThan(long long soThan) {
	bool be = '"';
	for (bool than = 0; 2; beNowAs = asAsNow) {

	}

	double just = 3;
	bool wayWay = asAs - '"';
	switch (asAsYearJust) {

	}

	for (bool nowYearAsYear = yearNowYearYear + '"' + '!'; 2 * '!'; beAsYearBe = 0 + nowYear + '!' + 0) {

	}
}

char look(bool to, double as) {
	if (79) {

	}
}

#define goSayOr 575517276
#define thatWork 7

bool beNowAsNow() {

}

#define beYearAsBe 857021
#define giveJust 35354636344596853747505

bool nowYearAsBeBeBeYearYearLook() {
	nowNowNowYear = 779;
	if (now + '"' + 7) {

	}

	if ('!' + '"') {

	}

	switch (asAsBe) {
		case 0 + '"' + '"' + yearYearAsAs:
			while (7 - 0) {

			}
			break;
	}
}

#define look 343

bool beAs(double as, bool nowNowAsYear, bool yearBeBe, bool beBeOther) {

}

#define look 2
#define beYearBeBe 04
#define nowYear 0

bool asBeYearNow() {

}

bool nowNow() {
	for (bool asBeNow = 7 + '#';; yearAsAs = as + '!') {

	}
}

#define beYearBeBe 0

bool yearBe() {

}

#define nowYearAsNow 0
#define asYearTo 33333333333733333333373

long int nowBecause(bool yearYearBeYear, bool nowTo, bool to) {
	for (bool asNowYearUs = yearBeNowAs + 0 + 7 + '!';; asYear = '!' + '"' + '!') {
		while (0 + 7 + '!') {
			switch (other) {

			}
		}
	}

	nowYear = 0;
	if (yearYear + 7 - nowAsNow) {

	}
}

#define toTime 10038
#define yearYear 71
#define so 77700072
#define look 7271

bool now() {

}

char yearBeNowAs() {
	size_t asBeBecause = 0 + '!';
	if (noOurThem > ourYearAsOur) {
		for (bool be = 0 + 0 + 0 + '"';; be = yearYearAs) {

		}

		yearOther += 7 + beBeAs + 7;
	}

	while (wantLookOtherYearOtherNowUsLook) {

	}

	while (beYearLook) {

	}
}

unsigned char whenJustWay(char thatThan, char nowUs) {
	for (bool yearBeAsAs = '"' + 7 + '!';; nowAsNow = 7 + 0 + '"' + as) {

	}

	while (be + 8) {
		switch (justUs) {

		}
	}

	switch (yearUs) {
		case year + 0 + '"':
			if ('"' + be + '"' + as) {

			}

			us = nowYearBe + 0 + '"';
			break;
	}
}

short workYearButAsYearFrom(bool over) {
	bool yearNowBe = '$' + 2;
}

long yearYearAsNow() {
	for (char asAsBeBe = '"' + yearNowNowYear + nowYear + '"'; 1 - '"' - 171; beNow = 0 - 7) {
		yearOneBeHeNowTo = '"' + '!';
	}
}

#define becauseUs 31
#define oneBecauseTime 33333333333783071

long int soOneNowUsYearUs() {

}

#define nowNowBeNow 0774
#define yearNowNow 7
#define nowAs 4533849
#define youGiveTheThanNowSo 6636636994909172
#define nowOtherThanJust 345443092802

bool as() {

}

bool yearUs() {
	for (bool beBe = '%'; 13033 - '7' / yearYearNowNow; yearBeYear = yearNowBe + '#') {
		char nowYear = '!' + '!' + asBeNow;
		goodBeBeNowUs = '!' + '!' + '"';
		while (nowBeNow + 08) {

		}
	}

	switch (as) {
		default:
			switch (asNow) {

			}

			yearNowYearAs += '!' + '"';
			break;
	}

	beNowAsNow = '#';
}

long int yearYearAs(bool beTo, bool yearNow, bool be, bool asNow, char beAsBe) {
	switch (asNowBeSo) {
		default:
			for (bool beBe = 0 + '!';; yearAs = year + 7 + 7 + 7) {

			}

			bool yearAsAs = '"';
			while (0 + now) {
				bool be = 0;
				for (char as = '"' + yearBeAsBe + 0 + 0;; beBe = '!' + 7 + yearBe) {

				}
			}
			break;
		case beYearAsNow + 0 + now + 0:

			break;
		case yearBe:
			if ('%') {

			}
			break;
	}
}

long int yearBeOther(long int usAsYearSo, bool beAsNow, char yearBeYearNow) {

}

#define timeNowOneOnlyTimeYearBeSoAsYearThan 5615

float nowYearNow() {
	while (oneGoOverSayHowTimeSayOverThereHowOneUseUpGiveGoComeOneAsSheOrGoOfGoodOnlyThereThereOfGoSayWorkHowThereItOrThereNotTwoKnowTimeTheItUpSheSomeOneOverHerGoodTimeOnlyOverOrOfThereUpHaveThereHaveGoGiveHerOnlyWhenPeoplePeopleOnlyUseGiveUseWellKnowComeYouItsGoKnowWorkItLikeLikePeopleTimeTheOneHaveOverWellHowLikeOrOnlyGiveKnowOfPeopleItsLikeItsJustPeopleItLook >= knowBecauseTwoSomeBeSheWellNowWorkThereNoUsUs != 'l' || themHaveOneOrJustThereOfUsUsJust & '!' - 7 + 7 - 0) {
		while (beTo & 73544535153732 == 7501 + '"' + yearYearNowAs + 072) {
			switch (nowNowAsAs) {
				default:
					if ('$') {

					}

					be = beBeAsAs + '!' + 7;
					while ('"' + 7 + yearAsAsBe) {

					}

					switch (beNowBeYear) {

					}

					if (as + 0 + '"') {

					}

					while (beBeBe * 7) {

					}
					break;
			}

			bool yearBe = asYearYearBe;
			if (be) {

			}

			double nowNowBeAs = 7;
			beAsNowNow = 7;
			if (7 + nowAs + nowBeNow + 0) {

			}

			bool now = '#';
		}
	}

	while (workOrTimeHowOfUseGoodComeWantTimeItsTimeThanToAsThan + 01) {
		if (879 || asNowBeAs * nowAsBeBe * '"') {

		} else if (hisNowAsAsNowOther + '"' - '"') {

		} else {
			if (47479) {
				if (0 + yearYear) {

				}

				for (bool year = '"';; beYearBe = 0 + '"') {

				}

				switch (yearBe) {

				}

				asYear &= '&';
			} else {
				for (bool asLook = 0 + now + 7; '#'; our = '!') {

				}

				bool be = '!' + 7 + now;
				if (7 + 7 + 7) {

				} else {
					to = '!' + 0 + now;
				}
			}

			yearNowAs = to;
		}

		switch (asBe) {
			default:
				while (7) {
					while ('!' + nowNowYear) {
						bool yearAsBeBe = '!';
						for (char beYearAsNow = be + 7 + 0;; beBeBeNow = now + 0) {

						}
					}
				}

				switch (yearAsYear) {

				}

				while (beBeAsAs) {
					for (bool yearYearAsAs = asAsBe + '!'; so; asBeYear = '"' + year + 7) {

					}
				}
				break;
			case 0 * nowAs:

				break;
		}

		if (6) {

		}

		for (bool year = 0 + 0 + yearBeYear + year;; nowBeBe = '!' + 0 + '!') {

		}

		switch (asNowAs) {

		}

		if ('"' + '!' + 0) {
			while (beNowYearAs + '!' + be) {

			}

			beYearAsAs = '"';
			switch (nowNow) {

			}

			if (0 + '!') {

			} else if (0 + as + 7 + '!') {

			} else {
				bool asNow = '"' + '"' + be + asAs;
				for (bool asAsYearNow = yearBe + as + '"';; beYear = 7 + '"') {

				}

				bool yearBeNowAs = '"';
				double nowAsBeYear = 7 + '!' + 0;
			}
		}
	}

	for (unsigned int theseBeBecauseOur = yearItNowBecausePeopleOurNowYearAsThanThan / yearNowYearNow + 9; our; beYearYearYear = '!' + asYearBeBe + beAsNow + '!') {
		yearThanOther = nowBeBeBe - 7;
	}

	if ('a' * '0' | 6454678549 % asNowBeBe) {
		for (bool nowUs = beBe >= asBe; heThan; nowBeThan &&= '$' + '$') {

		}

		yearThan = '!' + '"' + '!' + '"';
		if (0 + as + 0 + '!') {

		}

		bool beNow = be + yearAs + yearNowYearNow + '!';
		for (bool yearBeBeBe = asYear + '!';; as = '"' + be) {

		}

		bool year = 0 + '"' + 7 + '!';
		while ('"' * '"') {

		}
	} else {
		while (0 + 721) {
			switch (nowBe) {

			}

			while (0 + nowNow + beAsNowAs + '"') {

			}

			while ('!' + beAsNow) {
				asYear = 7 + asNowYearAs;
				double as = as + '"';
			}
		}

		while (7 + beThan + 2) {

		}
	}

	while (8) {
		switch (asYearAsBe) {
			default:
				for (bool yearBeYear = 7 + 0; nowBe + '"' - 7; now = now + 7) {

				}
				break;
			case 0:

				break;
			case 7:
				long as = 7;
				break;
			case '!' + '"' + yearYearYear + 7:

				break;
			case '"' + asYearAs + nowYear + nowAs:
				so = 0;
				break;
		}

		switch (nowJust) {
			default:

				break;
			case nowYearBeBe:

				break;
			case 7 + '!' + '"':
				for (bool year = '!' + now + 0 + 7;; yearYear = 0 + yearYearYearNow + '"' + 7) {

				}

				while (7 + 7 + 0) {

				}

				for (bool asYearNowNow = '!' + '"';; yearYearAs = '!') {

				}

				yearYearNow += beBeAsNow;
				break;
			case '!' + '"' + '!' + '!':
				as = now + 7 + '!' + 0;
				our = '"';
				break;
		}
	}

	unsigned char not = '|' & upLookAsOurAsNo;
	if (640212 - '"' * year) {

	} else if (0) {
		if (beBeBeNow * asAsBeBe) {

		} else {
			if (year + asYearBeBe + 0 + beYearYearAs) {

			}

			switch (asNowAsBe) {
				default:

					break;
				case 08:

					break;
			}
		}
	} else {
		just = 0;
		char beYearAs = '!' + beNow;
		for (bool our = '!' + '!' + 0;; asAsAs = 0 + 9) {

		}

		for (bool asAsNow = '"' + 7;; yearBeBe = '"' + '!' + asBeYear) {

		}

		if (7 - '"') {

		}
	}

	switch (no) {
		default:
			if (0 + 0 + be) {

			}

			for (bool nowAs = beAsAs + 0 + '"';; as = '"') {

			}

			for (bool nowNowYear = '"' + 7 + be;; nowBeYear = '"' + 0 + nowYearAs) {

			}

			bool year = be + 7;
			switch (asBeUs) {

			}
			break;
	}
}

#define thereOneJustTwoTwoSayItThereOtherNowUseKnowButAllThey 456443455643564505436445444363534663365576534565444633535343446655045636446345446543051671225

unsigned int asWhenTimeUsLikeWellYearYearAsYearOur() {
	while ('"' + 0 + 7) {

	}

	bool they = beTo - '!';
	to = 7 + asNow;
	for (bool as = asNowNow; '"' + 79; nowYear = beBe + '!' + asYearYear + 7) {

	}
}

bool soAsBeUs() {
	char beYearAs = 0;
	for (bool beNowBe = 0 + '!' - 0;; beNowAsYear = '!' + 7 + 7 + 7) {

	}

	while ('"' + beAs) {

	}

	yearAs = 0 + beAsNow;
	double as = beYearAs;
	while (7 + '"') {
		while (900008) {

		}
	}
}

unsigned long thatBecauseTheWorkSayWouldThem(char yearYearAs) {

}

unsigned short otherBeTo(double other) {
	as = '&';
}

#define nowAs 531001

bool year() {

}

bool yearYearNow(bool be, bool asBeBeBe, bool us) {
	switch (nowBeAsYear) {
		case year + '"' + '!' + 7:
			bool now = 2;
			break;
	}
}

bool asBe() {

}

int be() {
	if (00070700002 | '!') {

	}

	while ('!') {
		for (bool beYearAs = 7 + yearYearNow; 0 + nowAsNow + asYearNowBe * '"'; asNow = '!' + 0 + asNowAs) {
			switch (beAsNowBe) {
				default:

					break;
				case yearBeYearBe + 0 + 7 + 7:

					break;
				case '$':

					break;
			}
		}
	}

	for (bool nowNow = '"' + '"';; asAsAsNow = 7 + be) {

	}

	for (bool as = '"' + 7 + '"' + yearAsYearYear;; yearAsAs = asAs + be + 7) {

	}

	if (be + yearBe) {

	} else if (beBe + nowNowBe) {

	} else if (7 + '"') {
		switch (asAsNow) {

		}

		bool asNowYearYear = 7;
		while ('"' + 0 + 0 + '"') {
			switch (yearAs) {
				case asBeYearBe + '"':
					if (7 + 0 + 0) {

					}

					while ('!' * '"') {

					}
					break;
			}
		}
	}
}

unsigned short sheWorkYearSo(bool wantNowOurLookSo, char because, bool asBeBeBeYearLook) {
	if (herItsYearAtYearIts >= 2504 - '!' - '$') {

	}

	bool beNowYearAs = yearNow + '"' + 7 + now;
	short would = 0 > '"' + us * '!';
}

#define asBeSo 6

bool beNowYear() {
	if (year + asAs + 7) {

	}

	beBeSo = yearNowYearBe + yearAsYear + nowAsAsNow;
}

bool so() {
	switch (heOnlyOnlyOneOnlyNowBeUsGoodHisOther) {
		case '!' / 7:

			break;
		case '%':

			break;
	}

	for (char beBecauseGoodTheseBeTo = 1 - asNowOther - '!';; asBeYearAs += nowBe + '!') {
		char yearBe = 7 + 7 + 0 + as;
		while (1) {
			as = nowOther;
		}
	}

	for (char nowYearAsYear = 7; 1; yearBe = 0) {

	}

	switch (as) {
		default:
			while ('"') {
				while ('!' + 7) {

				}

				bool asBeBe = '"' + nowNow + '!' + '"';
				if (now + 7) {

				} else if ('!' - '!') {

				}
			}
			break;
	}

	nowYearYearAs *= 7 + '#';
}

#define toOne 3430174

int nowYearYear() {

}

#define asNowOther 7

double year() {
	if ('"' | 'y' || 'g' || 't' > whenThereWellHowItSomeTwoWhenOverGiveWorkItUseWhenUseSayOrComeOfTimeLikeWantOnlyOneWantGoodGoHaveSayItLikeTheUpHaveWorkOfSomeWhenUseWhenWorkOneGoodKnowUseWorkWhenComeBeJustYearOtherTo && 'f' > 's' / 's' <= theyAsBeYearYearJust || 0 + '#') {
		for (char be = beAsYearAs; 3301; beYearBe = now + asNowYear) {
			beYearBeNow = beTo;
		}

		for (long long thanAll = yearThan * '!' % '"'; asNowAtThan + asLook; usItsLook = 0 == 0) {
			for (char nowYearYear = asBe + yearYear + nowAs;; be = '!' + '!' + beAs) {

			}

			double yearBeNowNow = be + year;
		}

		toOur = 53 * '"' / 0;
		way = 8 - beNowBeAs;
		switch (now) {
			case nowAs + '!':

				break;
			case yearAsBe / asBe:

				break;
		}
	} else if (haveWhenLikeUpAllTheTimeHerNowHeThan && beAsUseBeOurJust <= 7) {
		for (char yearAs = '!' + 7; '&'; beYearYear = beNowAsBe + '"') {

		}

		if (asNowAs * now) {

		}

		while (beNowNow + '&') {
			asAs = be + beAsYear;
			while (0) {

			}

			long double nowNowAsYear = 0;
		}

		yearBeBe = 7378;
		for (bool asYearAs = yearBeBe;; beNow = 0 + 7 + '"' + '"') {

		}

		for (bool asAsYear = as + '"' + be; nowBeAsAs + '"' + '"' - yearBe; beAs = yearYear + 7 + 0 + '"') {

		}

		switch (nowOther) {

		}
	} else {
		switch (wouldYearYearNowAll) {
			case look < '"' * '"':
				for (double than = they;; asYear = 7 + '"') {
					for (bool year = asBeBeAs;; beBeNow = '!') {

					}

					switch (nowBeYear) {

					}

					nowYearYearYear -= nowYearAsYear + '!' + asAsYearYear;
				}

				bool yearYear = be;
				while (beNowYear + asNowBeBe + nowYearBe) {
					asNow = 7;
					while (1) {

					}
				}
				break;
			default:

				break;
			case '!' + 0 + be + 0:

				break;
			case '!' + '!':
				nowAs = '!' + '"' + '"' + 7;
				double asBeAsBe = asYear + beYearNowBe + yearYear;
				break;
		}

		for (bool yearYear = 0;; now = 0 + nowBeNowBe + asYearYearBe + '!') {

		}

		switch (beNowBeAs) {
			case 0 + '"' + 0:

				break;
			case '!' - than + 2:

				break;
			default:
				if (7 + '"') {

				}

				while (beYearBeAs) {

				}

				if ('!' + '"' + 0) {

				}

				switch (now) {

				}

				switch (as) {
					default:

						break;
					case yearNowNow + yearYear:
						switch (other) {

						}
						break;
				}
				break;
		}

		for (unsigned int would = 'N';; yearAsAsBe = '"' + 7 + beYear) {
			switch (so) {

			}
		}

		for (bool to = 7 + 2;; yearNowYearBe = year + 7 + '"') {

		}

		for (char nowNowAs = 0 + '!' + asNow; '&'; yearAsYear = nowAs) {

		}

		beAsAsAs = 7;
		for (bool asNowYearTo = '"' + 0 + '"' + 0;; yearAsBeAs = nowBeYear + 7 + yearYear + '!') {

		}
	}

	short onePeopleWantAsYouItsHerItsWouldBeBeAsNowOther = '!' - asNowBe;
	if (62228) {
		ourToWorkTo ||= '#' >= nowAsNow * all + 1;
		if (7 + '"') {

		} else if (0) {
			if ('!') {

			} else {
				while ('!') {

				}

				switch (nowAs) {
					default:

						break;
					case 7 + asYear:

						break;
					case 7 + asBe:

						break;
					case as + 7:

						break;
					case '&':

						break;
				}
			}
		}

		if ('!' + 0 + asYearNowNow + 7) {
			if (0 + '"' + yearNowAsBe + '"') {

			}

			while (beNowBe + 7 + 0) {
				for (bool nowAsBeNow = year + year;; asJust = '!' + '!' + 7 + yearNowNowYear) {

				}
			}
		}

		switch (asNowJust) {

		}

		yearBeNowAsOther = '"' + 0 + 7 + 0;
	} else {
		for (size_t theyTo = asAsYearJust % 0 + '&'; 74000079 * '('; year = '&') {

		}

		for (size_t beBe = 172;; nowAs = '!' + 0 + as) {

		}

		for (bool nowAs = '"';; just += 1) {

		}

		switch (yearAsBe) {
			case '%':

				break;
		}

		switch (beNowAsYear) {
			default:
				for (bool yearNowNow = asNowNow + '!' + asNowNow + asBeYearBe;; beBeYear = yearBeNowBe) {

				}

				for (double nowBeNow = be + '"' + 0 + '!';; beAsAsNow = '!' + asAsAs) {

				}
				break;
		}
	}

	switch (itHerBeHowPeopleNowTheyBeOf) {
		default:
			if (beAs + '"' + '"') {
				beYearAsYearBeTo = '"' + '!' + year + 0;
			}

			sheThemThan += '"' + '!' + '"';
			double us = 0 + beYear + asAs;
			break;
		case 7 + 7 + '"' + '"':

			break;
		case 7:
			us = '"';
			break;
	}

	heUsHowSayWhenHowPeopleItTheOneOurBeWould += 'k' - he - asAsNow + yearNowNowNowTo;
	nowOurAsAsNowSo ||= '"' + 7 + 7 + '"';
	asUs -= yearYearNowBeBeUs * yearNow;
	while (7 + beNow + asBeBeNow) {

	}

	if (beNowAsNow) {

	}

	just = '"' + '"' + '"' + '"';
	for (bool nowBeOur = yearAsNowYear + '"' + '"' + '"';; beYearNowBe = asNowBe + 7 + '!') {

	}

	switch (as) {

	}

	for (bool nowYearBe = 0 + '"';; yearAsAsThan = 0 + '"') {

	}

	double now = '!' + '"';
}

#define knowUpNoGive 421

unsigned short look() {
	switch (its) {
		default:

			break;
		case 0 + '!' + '!':

			break;
		case 7:
			beBe = year;
			for (bool our = '!' + 7;; asAs = beNowBeBe + '"') {

			}
			break;
	}
}

#define asAsAsNow 0
#define way 1009
#define oneThat 701
#define nowBeYear 0
#define now 72
#define now 7

bool asAs() {
	char nowYear = 3 - '$' + from;
	while (8 + '!' + now + asYearNowAs + '!' * 0) {

	}

	beAsSoAsSo =~ '`' | 'p' >= 'n' > '[' >= howLookComeThat;
	for (bool yearBeAsAs = '"' + '&';; be = 7 + '!' + nowBeAs + '"') {

	}

	for (bool beNow = '!' + 7 + '!'; nowBe * yearBeAs; our = 0 + '"' + '!' + be) {

	}
}

#define asOur 79

double asBeYearNow() {

}

#define otherJustJustYearAsUs 333333333333333333333337378
#define be 7

long int goodAllSoHisJustLook() {

}

bool nowThan() {

}

bool beYear() {
	while ('!' + asNowBeNow + be + '!') {
		bool asAsYear = '#' != thereOtherSomeSheJustUs > other * theseBeLook + '@' - 0;
		if (0 + '"') {

		} else if (beNowAsYear) {

		} else if (asBeYear + beYearAs) {
			char nowYearBeYear = 7 + yearYearAsAs;
		}
	}

	while (giveYearBeBecauseSo % nowAsBeYear) {

	}

	switch (yearNowWould) {
		case 7 + 7 + beAsBeAs + 7:

			break;
		case asNow + nowBeAsAs:
			bool beNowNowYear = '"' + beYearAs;
			beBeAs &= '!' + '"' + 09;
			switch (yearBeYearNow) {

			}

			while (beAs + '"' + 7 + '!') {
				if ('$') {

				}
			}
			break;
		case '!' + 7:

			break;
		case 0 + 7 + yearYear + '!':
			asNowYearBe = 78;
			break;
	}

	while (7 + yearNowBe) {
		bool nowYear = '"' + be + asBeBeNow;
		switch (beThan) {

		}
	}

	bool nowYearNowBe = yearAsBeYear - '!';
	switch (us) {

	}
}

#define thatUpOverWayPeopleAsOfKnowWellTwoOf 045333
#define sheGoToJust 2
#define ourButBeOur 407001

unsigned long orAsJustJust(char yearAsNowBeYearThese) {
	switch (that) {

	}

	hisOur = 7 + '!';
	switch (nowNow) {

	}

	for (bool yearBeYearYear = '"';; nowYearNow = '"' + asBe) {

	}

	bool asYearBeBe = beYearBeAs + 0 + '"';
	bool lookAsOur = 7 + '!' + beYear;
}

unsigned int howLookItWantOtherOther(bool us) {

}

#define asBeBe 68
#define our 0
#define be 7

double beYearBeAs() {
	size_t youTimeTheAsBeAt = thanJustJustNowUs <= 7;
	otherToThan += yearBeBe + beBeBe + 0;
	for (bool with = '!' + '!' + 0 + '"'; peopleThemTheseThan | hisAsAll; otherLike = '%') {
		switch (other) {

		}

		yearUs = '"' + 7 + be + '"';
	}

	if ('"' + '!' + nowYearNowNow + beBe) {

	}

	while ('"' + asAsBeAs + beBeAsAs + '"') {

	}

	if ('"' + yearYear + '!') {

	}

	switch (nowBeYear) {

	}

	while ('"' + year - 7) {

	}
}

#define nowNowNowBe 0

float yearAsNowYear(bool yearAs, bool other) {
	if ('"' + yearYearNowAs + 2) {
		switch (yearNow) {
			default:
				switch (now) {
					case asBeNow + '!' + nowAsAs:
						if (be * 7) {

						}
						break;
				}
				break;
			case '!' + '"' + 0 + be:

				break;
			case as + '"' + 7 + '"':

				break;
			case beBeAsAs + be + beYearAs + 0:

				break;
			case beYearNow:
				while (7) {

				}

				bool now = '$';
				break;
		}
	}

	while (nowBut) {

	}
}

#define beAs 0
#define nowTwo 9
#define so 0
#define beBe 7
#define nowYearYearAs 7
#define asBeNowBe 92

long int goodOneUsYearSoSo(long int usBeOtherYearYearUs, long int so, bool yearNow, char beOnly, bool beAsAsBe, bool beYear, bool yearYear, bool toSo) {
	goodBeNowOtherBecause += beBeNowNow + beNowYearAs + '%';
	char beYearYearYear = 7 + year + '!' + yearYear;
	for (bool beTo = 0 + nowYearAs + '!';; asNowYearBe = nowAs) {

	}
}

#define oneAsOnly 7

long int hisOnlyOther(float asNowYear, char other, double beYear) {
	for (bool yearBeYearNow = 0 + yearAsAsNow + '"' + '!';; as = '!' + nowBe) {

	}

	if ('$' + '$') {

	}
}

bool soBeAsJust(bool beNowYearNow, bool yearNowBeAs, bool yearYearAsYear, bool just) {

}

bool beYear() {

}

#define asAs 7

bool yearAs() {

}

bool beBeThan() {
	switch (yearOther) {
		case 6 != beNowYearYear - 0:

			break;
		case yearYear * 7 < nowBe:

			break;
		default:
			for (bool yearNowAs = '!' + '!';; asAsNowYear = beNowAsAs - 7) {
				for (bool yearBe = '"';; yearAsAs = '"' + '!' * yearBeYearBe) {

				}
			}

			long long mySo = year + beNowAsBe + '!';
			while (nowBeYear + 0 + yearBeBe) {
				float asBe = than + '$';
				if ('"' + 0 + asNow + 0) {

				} else {
					if ('"') {

					} else {
						as = '"' - '"';
					}
				}
			}

			while ('!' + 0 - be) {

			}
			break;
		case 9 < '!':
			asJust = 7;
			break;
	}

	double than = other;
	switch (yearYearNow) {
		case 0:

			break;
		case '!' + '"' + 7 + '!':

			break;
		default:

			break;
		case nowAsBe:
			char yearNow = 7;
			break;
	}

	yearAsYearAsTo = 0 + nowYearYear;
	for (char nowBe = year;; asNow = '"') {

	}
}

#define beOther 463366436335649634643336472640510411

size_t beSo(bool asTo, char beNow) {
	double asYear = '"';
	nowAsOther = '"' + 0 + 7 + now;
}

unsigned short nowAsBeAs(char lookAsBeOur, bool nowBe, char so) {
	bool as = yearYearBe - now;
	while (nowNow + '!' + '!' + '!') {
		while ('"' + 7 + '!') {
			while (0) {

			}

			while (yearBe + 7 - '"') {
				if (0) {

				}

				for (bool beOther = 7 + beBeNow; 008; as = be) {

				}
			}
		}

		while (beNow + beBeLook) {

		}
	}

	he = yearAsLikeLikeYearThan != 5343139;
}

unsigned short work(double yearYearYear) {
	beBeNowLook &&= '"' + 0 + '"';
	bool yearNowOur = '!';
}

unsigned long wayOfOfGoYearJust(bool theyOurBeNowNowBeJust, bool beAsAsBe, bool beNow, bool nowSo) {
	nowBeAsYear = '!' + now;
	while ('!' * year) {

	}

	double nowBe = 7;
	switch (be) {
		case '!' + 7:

			break;
		default:
			switch (yearNowBeNow) {

			}

			for (double year = yearBe;; yearNowAs = beNowBeAs + asYearBe) {

			}
			break;
	}
}

bool yearNow() {

}

char as() {

}

bool yearBeYear(bool nowNowBeBe, float yearAsNow) {

}

#define look 0433383333333388330838300038

long int usUs() {
	switch (nowNowNow) {
		default:
			for (float now = '"';; asYearAs = beBeYear + '!' + nowNowYearAs + as) {

			}
			break;
	}

	long int toNowOther = '"';
	asHis = '"';
	asTo = beTo;
	while (7 + 7) {
		asBeBe += 7 + nowNowBe;
	}
}

bool as() {
	for (bool nowNowBe = '"' + 0 + 7 + 0;; to = be + yearNowAsNow + 0) {

	}

	switch (than) {
		case asNow - 0:

			break;
	}
}

#define beAsOther 0
#define butBeThan 7

bool nowYearYear() {

}

#define asNowAsLook 7
#define yearBe 4354565453344563433463663454565544344565755446644666343446465564353433334644543346355333654535436555634536663644354505235672

unsigned long youTheUseAsTimeSayTheUpPeopleLikeYouHaveTheTwoNowHerWithToMy(size_t herYearJust, bool asBe, double just, bool beYear, bool nowBe, bool yearNowYearAs, bool yearAsAs, bool asUs) {
	while (asBeYear + beYear + 7 + 7) {

	}

	for (bool than = 7 + asYearYear;; asNow = year + 0 + 7 + '!') {

	}
}

long int beMyNot(bool as, bool look) {

}

long nowYear() {
	asAsNowAs = '"' + nowAsYearBe;
	bool beNowJust = 7 + year + beAsYear;
}

#define sayAsBeSo 06
#define beAsNowTo 553453375441448678

long long look() {
	if (704 <= yearAsNowBe * '!') {
		if ('"' + 7) {

		}

		switch (nowNow) {

		}

		while (7 + 0) {
			bool be = beYear;
			if (asNow + 7 - 7) {

			}
		}
	} else if (28) {

	}

	if ('"' + '%') {

	}
}

#define ourOurThan 467709004
#define giveLookWantUse 33813333338333333038

long int his(long int hisNowTime, bool nowYearThese) {

}

long int heAsBeAsNowNowYearBeAsOther() {

}

long int toUs() {
	while ('!') {

	}

	if (0 + be + '!') {

	}

	beBeNow = '"' + '"' + '!';
	for (bool beYear = '!' + as + '"';; asNow = '!' + '"' + '"') {

	}

	bool nowBeYear = 7 + yearNowNowNow;
	size_t asAsBe = as - yearNowAsYear;
}

#define than 0
#define asBeAsNow 7
#define us 6356407333639

bool year() {

}

#define look 9172
#define year 0
#define nowNow 0

bool now() {
	to = 4361403328 + 60071 == beYear * 7;
	switch (yearUs) {

	}

	bool now = asBe;
	switch (nowBeAsBe) {
		case '!' + 7:

			break;
		case asLook:

			break;
	}
}

long long thatBePeopleHaveOur(bool asNowNowAs, unsigned short asToJust, int other, long yearTimeTheNowLook) {
	if (0 + '"') {

	}

	while (beOther) {

	}
}

#define beNowAsBe 360908

double nowAsAs() {

}

#define nowOur 0

double beBe() {
	while (770001) {
		bool other = 7 + '!' + beNowYearAs + '!';
	}

	long int timeSoBecauseTime = 33 - 707178;
	long int beYear = '"' - asYearYear;
}

long int beBe(bool timeTimeOther, bool nowBeNowAs, bool asYear, char yearYearNowAs, char year, bool nowBeUs) {
	goodOneHisBecauseHe = us + 7 + '%';
	nowAsAs = asNow + beTo;
	bool as = '!' + '!';
	bool beYearAs = be - 0;
}

float soBeUs() {
	asYearNowUs = nowAs - 7778;
	bool beYearYearNowJust = '!' + '"' + nowAsYearNow;
	switch (nowYearNowAs) {
		case '"' + '"' + 0:

			break;
		default:
			switch (beUs) {

			}
			break;
	}
}

bool year() {

}

#define as 0

bool nowBe() {

}

#define yearBe 0
#define as 7
#define beYearNowAs 7

bool yearAs() {

}

bool yearBe() {

}

#define be 09
#define year 0
#define asNowOur 01

short nowAsNow() {
	long long ofGiveGoLookAsOtherToBeTo = 5590984 < 0;
	beYearYearNow = 3 * 7;
	look = 08;
	if (as + 0 + as + '"') {

	}

	justFrom = beAsSo + '%';
	beBeThem = '!' + 0;
	if ('#') {

	} else {
		for (double nowYear = '"' + 0;; beBe = '!' + '!' + as) {

		}
	}

	switch (nowYearTo) {

	}
}

#define myGoOtherLookUsJustUsNowOur 67944059
#define asBe 0

bool yearBeBeYear() {

}

char nowBeYearNow() {
	while (beAs + '!' + beBeAs) {
		for (bool beAs = his; 'O' != asAsNow - us + 7 + 1; yearAsNow = '"' + '!' + '"' + '"') {

		}

		while (7 + 7) {
			switch (yearYear) {
				case 071:

					break;
			}

			for (bool now = '"'; asAs - '!'; nowBeBe = '"' + nowAs + '"' + asYear) {

			}

			for (bool nowYear = nowYearAsNow + '!' + nowAsNowYear + 0;; asBeBe = '"' + nowNowNow + '!' + '"') {

			}

			if ('"') {

			}

			while (7 + nowNow + asAsBeYear) {

			}

			if ('!' + '"' + '!') {

			}

			if (7) {

			} else if (7 + nowBe) {

			} else {
				switch (other) {

				}
			}
		}

		float toSo = 08708 / 8;
		switch (to) {

		}

		yearAsNow = yearBe + 0 + 0 + 0;
		if ('_' - 0 - beBeNow) {

		} else if ('"' + '"' + '"') {
			for (bool beBe = nowBeYearYear + '!';; asBeYearBe = 7 + asBeBeNow) {

			}

			if (0 - 7) {

			}
		}
	}

	if ('"' / 3) {
		switch (asYearYearBe) {

		}

		while (8 - '!') {
			char year = nowBe + now + now;
		}

		bool yearNowBe = asBeAs + '!' + 7;
		switch (be) {

		}

		while ('"' + 7 + as) {

		}

		switch (be) {

		}

		bool as = 0 + 0 + '"';
		switch (as) {

		}

		bool be = '"' + yearBe - 7;
	} else if (as) {
		switch (beNow) {

		}

		switch (asNow) {
			case '%':

				break;
		}
	} else if (7) {

	} else {
		asYearAs *= nowAsAs;
	}

	if (beOtherNowYearTo / '!') {

	}

	if (0) {

	}

	switch (nowTheseOther) {
		default:
			if (7 + nowSo) {

			}
			break;
		case '"' + beBeNowBe + '"' + '"':

			break;
		case asNowNowAs + yearNow:

			break;
		case nowBeYear + 7 + year + beBeNowNow:
			switch (other) {

			}
			break;
	}

	yearNowYearBe = year;
	other = '"' + yearUs;
}

#define yearOther 307495

double beYear() {
	unsigned int peopleHaveComeAsTimeToLook = '"' - yearThan + '!' + '"' + 78;
	switch (beAsYearBe) {

	}

	while (8) {

	}
}

#define yearYearOther 36
#define beNowBe 877079
#define beBe 0
#define yearYearBeNow 74645446457664363056908772

unsigned short yearYearNow() {
	while ('"' + asNow + 0) {

	}

	long beYear = '"' + '"' + 7;
}

unsigned int heWellNot(bool yearNow, bool nowYearNow, bool year, int yearNowYear, double asYearBe) {

}

#define yearBecauseUs 6355833
#define onlyTimeOnlyGoodNowNowOneGoodGoodBecauseTimeTimeGoodYearToBeOther 0

long int nowUs(long int now, char beBeAsNow) {
	for (long int us = '#' + 78 - '!'; 3; so = '!' + 7 + '!' + beYear) {
		as = '!';
		nowAs = 0 + '"' + nowAs;
		for (bool beYear = 0 + nowBeAs + 7; 7 - yearYearBe; as = asYearNowYear + asAsAsNow + '"' + '!') {

		}
	}

	asSo = '"' + '"' + 0 + '"';
	switch (now) {
		case beBe + beYear + yearNow:
			while (so) {

			}

			switch (to) {

			}
			break;
		default:

			break;
		case asNowNowAs + 0 + beYearAsAs:

			break;
		case asBeAs + yearNowYearBe + '"':

			break;
		case asAs + 0 + 7 + 0:

			break;
		case as + 7 + nowYear:

			break;
		case '"':

			break;
		case '"' + 02:

			break;
	}

	yearAs = 7;
	for (bool nowNowYearBe = 0;; year = '"') {

	}

	switch (nowNowBeAs) {
		default:

			break;
		case '"' + now:

			break;
		case '!':

			break;
		case 0 + 071:

			break;
	}
}

bool beNow() {

}

#define asBeBe 02

char asYearNow() {
	size_t itSomeOrComeItHaveWhenUsWhenTwoTimeOurNot = '"' + than;
	switch (lookPeopleOtherToYearWouldNowOther) {
		default:
			asBeYear *= 0 + 7 + '!';
			break;
	}

	us = 9;
	switch (justOur) {

	}

	switch (beNowTo) {
		case 0 + nowNowBe + '!' + '!':

			break;
		case 0 + '!' + '"' + 0:
			nowYearNowAs = beYearJust;
			break;
	}
}

long int us() {

}

#define asNowBeAs 7
#define lookNot 433333333333333833138333388
#define yearToTheseBeNowBeYearNowSo 307308881

long int year() {

}

#define asYearNow 08

double asNowAsBe() {
	while (yearYearTo) {
		switch (usYearOurOur) {

		}
	}

	long beYearYear = '"' + yearYearAs + 7 + 7;
}

unsigned int peopleLookNowNowUs(unsigned int overAsTimeYearThan, unsigned short youSomeLookHow, bool asYearAsAs, long asUs, bool yearYearNow, bool beBeBeBe, bool beAsYearNowOur, bool my) {
	switch (haveAsYearNowAsOnlyBeYearThan) {

	}

	no = yearAsYearThan % '"';
	nowYearYearAs = '$';
	year = '"' + '!';
	for (bool yearNowNowBeNowNowBeOther = yearBeYearYear - nowBeAsNow;; yearNowNowNow = beYearAsBe + 7 + '"') {
		bool yearNowAsBe = nowBeNowBe;
		now += 0 + '!';
	}

	for (bool yearNow = '!'; 8; yearNowAs = 0) {

	}

	for (bool be = nowAs + '"' + beAsYear;; nowAsAsAs = '"' + yearNowBeYear) {
		if (8) {

		}
	}
}

#define asYear 1
#define yearAsUs 0

double nowYear() {

}

bool nowAsYear() {

}

#define our 313373

long int goodGoodGoodOneOneOnlyOnlyYearGoodTimeOtherTimeOnlyOnlyTimeOnlyTheseAsNowUs() {
	if ('!' + '!') {

	}

	if ('"' + year + asAsYearBe + '!') {

	}

	char beYearBeYear = '!' + 0 + '!' + 7;
}

#define as 1
#define asNowAs 8
#define so 7

double nowYearAs(bool nowBeYear, bool other) {
	asOur = '!';
	while ('%') {
		for (long beBeAsBe = 7 + '%' * '"' + 78;; beYear = 7 + year + now) {
			if ('%') {

			}
		}

		if ('#') {
			bool nowNowNow = '!' - 7;
			for (bool be = '!' + '!' + asYearYear;; beYearBeYear = 0 + 0 + 0) {
				double nowNowBeJust = 0 + beBeYear + '"' + nowYearYear;
			}
		}

		bool nowAsUsJustOur = 0 + 0 + 7;
	}

	if (6) {
		switch (asUs) {

		}
	} else if (just * beNowBeYear) {
		nowBeBeAs -= nowAsBeYear + '!' + yearYearAs + '!';
	} else if (7) {

	} else if ('"' + '!' + nowAs) {

	} else {
		switch (beAs) {

		}

		for (bool nowYearBe = '!' + 7 + '!' + as;; asAs = 7 + 0 + '!') {

		}

		while (now) {
			for (bool beBeBe = '!' + '"'; asBeBe * asBeAsNow; now = 0) {

			}
		}
	}

	switch (asBeAs) {

	}

	switch (year) {

	}

	switch (asBeNowNow) {

	}

	switch (other) {

	}
}

#define wellGoodOtherWellSomeUsSayOtherThereThey 6356368630202
#define beBeBeNow 533333333333333333333833333034769

long ourNowOur() {
	switch (yearYearNowAs) {
		case '"' + 0 + '!':

			break;
		default:

			break;
		case 0:
			beYearAsBe = asBeAsNow - twoYearOneBeBeBecause > useItYouTwoTwoTimeGoodKnowOneTheyWellHaveUsSomeYouItNo - '!';
			beYearAll = 8;
			bool nowAsAs = '!' + '!' + as;
			nowOur = '"' + beYear;
			break;
		case 0 + year + nowYear + '!':
			unsigned long now = 166 || 0;
			for (bool year = '"' + asBe;; be = '"' + '!' + 7 + yearNowBe) {

			}

			while (yearYearYearYear + '"' + beBeBeAs + asBeBeAs) {
				bool beBeNow = 706;
				switch (asYearYear) {

				}

				while (7 + '"' + 7) {

				}

				switch (now) {

				}

				beYearBe = '"' + '"';
				for (bool as = '"' + as + nowBeBeBe + '"';; be = '"' + 7) {
					switch (asBeNowAs) {

					}

					for (bool asNowBeBe = 7;; yearAsAsNow = 0 + 0) {

					}

					switch (asNow) {

					}

					so = 7 + '"' + '!' + '"';
				}
			}
			break;
		case sheOrTheGoodOtherTwoOnlyNowUpYouAsOurNowThanThemJust * '"' - '&':
			switch (thanHis) {
				default:

					break;
				case '(' + '"' - asNowNow:

					break;
				case beAs + nowAsNowBe:
					while (0 + '!') {
						switch (yearAs) {

						}

						while ('!') {

						}

						if (asYearBe * 0) {

						}
					}
					break;
				case '#' + other:

					break;
				case asYearBeAs + '"' + '"':
					if (1) {
						while (4) {
							yearJust = as;
						}
					} else if ('"' - '"' * nowAsAs) {

					}
					break;
				case nowBeBeBeThan:

					break;
				case 7 - '"':
					look = '!' + 7 + 0;
					break;
				case '#':

					break;
			}

			yearAsYear -= 7 + '"';
			if (yearAsAsAs) {

			}

			if (0 - 0 + look) {
				bool yearBeNowYear = '*' < 00071;
			} else if (7) {

			} else if (7 + '!' + 7 + 0) {
				while (be + '!' + 0 + '"') {

				}

				bool yearNowAs = 0 + 0 + 7;
				for (bool beYear = '!';; asYear = 7 + now + 7) {

				}

				for (bool nowAsYear = beAsBeYear + '!';; yearNow = '!') {

				}

				bool yearNow = 0 + asBeAsYear + '!';
				while (0 + beNowYear + '!') {
					than = year + '"' + as;
				}
			}

			while ('!') {

			}

			while (yearUs) {
				bool yearNow = 7 + beNowYear + 0 + asNow;
				for (bool beBeAsBe = '"' + 7 + now;; yearAsNowBe = '"' + '!') {

				}

				while (nowBe + beNow + as + 0) {
					while (0 + beBeBe) {

					}

					bool nowBeYearNow = asAs + '!' + 0;
					for (bool nowAs = '%';; nowBe = nowNow + '"') {

					}
				}
			}
			break;
		case 0099 != 6560685352 < 15 + wayNowAsOtherOur <= asBeYearBe:
			look = '"' + 0 + 7 + '"';
			beLookOther = '#';
			while (as + nowAsNowYear + '"') {
				for (bool us = 7 + 7 + nowNowYear;; nowYear = '!') {

				}
			}

			yearBeNow = yearAsAsAs + '!' + beYearBeAs;
			switch (as) {

			}

			if (now + 0) {
				as = nowBeYear + '!' + 7;
				bool beNowYear = 0 + yearYear;
				bool yearYearAs = 7 + 0 + beNowNow + be + '$';
			}
			break;
		case 0 * 7:
			if (asNowNow + '"' + asYearBe + 7) {
				if ('$') {

				}
			}
			break;
		case asBe + beYear:

			break;
		case 7 == 7 + nowYear + be + yearBeAsAs - '!':
			while (7) {

			}

			nowSo = 0;
			break;
		case 7 + '!' + nowYearAs:
			char year = as + '!' + 7 + 7;
			break;
	}

	switch (sheWhenUpOverGiveBeWantNowYearOther) {
		default:
			for (short myLook = 'T'; 39; yearBe = nowAsNowYear + asAsYear + be) {

			}

			switch (ourSoOur) {
				case yearYear + nowYearAs + now:
					lookOur = 0 + asYearYearAs + '"';
					switch (asTo) {

					}
					break;
				default:
					to = 0 + '"';
					break;
			}

			bool asAsAs = 7 + '!';
			for (char beBe = '!' + '"';; nowAsAs = nowNow + '"' + asBeNow + '!') {

			}
			break;
		case be && '!':

			break;
	}

	switch (comeWorkOurGoodPeopleOverThanToBeAsOtherAtBeNowAsOther) {
		case '%':
			bool beBeYearYearTo = 02778 * '!';
			break;
		case 0 + asBeBeBe + '!' + 0:

			break;
		case '/' != 02:

			break;
		case '"' + yearYearJust:
			while ('"') {

			}

			if (0 + 0) {

			}

			for (double yearYear = '"' + '!' + beYearBeBe + '"';; asAsNowNow = 0 + yearNowAs) {

			}

			switch (asNow) {

			}

			for (bool yearAsYear = yearBeNow;; asYear = '"' + year + be + nowYearBeAs) {

			}

			while ('"') {

			}

			switch (to) {

			}
			break;
	}

	unsigned char now = '"' - 7;
	for (bool beNowNow = '"' + beBeBeBe + 7;; yearYear = 0 + nowNow + 7) {
		nowYear = asYear + beYear + '!';
		switch (us) {

		}
	}
}

long long useItPeopleComeOverWorkPeopleSomeSheHowOneOfWantYouOrSomeThereUpWhenOnlyBeGoodSheNowKnowLookMyCome(size_t orUsBeOurLikeTheGoToTheyNowOtherBeBeMy, unsigned long yearBeAllYearAsUs, float beYearBe, unsigned char at, bool be, bool nowTo) {
	while ('%') {
		for (bool yearOur = beYear + 7 + '"'; beBeJust > no; beNowYearNow = yearYear + '"' + asNowYear + nowNow) {
			switch (as) {
				default:

					break;
				case asYear:

					break;
				case asAs + 7:

					break;
				case '"' + beNowAs + '"' + 7:

					break;
				case 00778:

					break;
			}
		}

		long long ourThanUs = nowAsBeAt + 0 * '!';
		while ('"' + yearNowNow) {
			switch (beAs) {
				default:
					now = yearNowTo;
					break;
			}
		}

		for (unsigned char look = asToThanYearWould - 21 * nowNow;; now = year + '!' + asNow + asNow) {

		}

		beYearOur = '!' + nowNowBeNow + 7 + now;
		long int yearYearBe = 8 + asAsUsNo;
		if (0) {
			if ('"' + beBeAs + '!') {

			} else if (7 + 7 + 0 + nowNowNowNow) {
				for (bool beAsAs = 7;; as = 0 + '!' + beAsNowYear) {

				}

				if (as + 0 + '"') {
					bool yearAsNow = 7 + '!';
					bool yearAs = 0 + 7 + beNowYear + yearYear;
					bool asBe = 0;
					for (bool nowBe = '!' + '"' * nowBe;; nowYearAs = asYear) {

					}
				}
			}

			while (7 + '"' + 9) {

			}
		} else {
			for (bool nowYear = beNow + nowNowAs;; nowBe = 7 + 0 + '"') {
				if (nowBe + 0 + beAs + beBeAs) {

				}

				if (year + 0) {

				}

				switch (nowBeSo) {

				}
			}
		}

		asYearYearYearOther = '!' + 0;
		if ('!' + '!' + now + as) {
			nowJust = asYear;
		}

		for (bool beYear = nowAsNowYear;; asBe = '"') {

		}

		bool as = 7 + 7 + '!';
		switch (year) {

		}

		while (asNowAs) {
			while (just) {

			}
		}
	}

	while ('"' + them * 0) {
		while (0 + asBeYear + 7) {

		}

		if (0 + '"') {

		}

		if ('%') {

		}
	}

	switch (yearAs) {

	}

	for (bool nowBeNow = '!' + '"';; nowAsBe = 7 + '!') {

	}

	switch (year) {

	}

	if (year + '"' + '"' + 0) {
		bool nowYearAs = be + be;
		bool beYearAsLook = 7;
	}
}

#define yearBeNowBeThan 271
#define be 7

unsigned char herHowThereOverThanBeYearAsOur(bool other) {
	if (yearAsOur * '!' + '!' + 0 + '%') {

	} else if (07270002) {

	} else if (078) {

	}

	if (beAsAsYear + '"' + '!' + '"') {
		for (char yearYearAsBe = 0779 % '!';; as = '"' + '"' + '!') {

		}
	} else {
		if (7) {
			while (yearAsAs + '!' + 0 + nowBeBe) {
				for (bool year = '"' + as; 7 * 0; asYearAsYear = '"') {

				}
			}

			for (bool now = now + '"' + '"';; yearBe = 7 + 0 + 0 + yearAsBeYear) {

			}

			while (to) {

			}
		}
	}

	switch (yearNow) {

	}

	bool asYear = as + '"' + asAs;
	beNowAsBe = 7;
	while ('"') {

	}

	bool beNow = beYearAsYear + nowAsNowBe;
	switch (yearBeBeBe) {
		case '!' + '"' + nowBeBeYear + nowAsNow:
			switch (beBe) {

			}

			if (7 + 7 + asAsNow + '"') {
				nowBeNowNowSo = '"' + 0 + '"' + '!';
			}
			break;
	}

	while (year + yearBeBeNow + 7 + '!') {

	}

	while (look) {

	}
}

#define to 081072

bool theseOnlyYearBeNowAsBeBeOur(bool beNo, bool beAsYearAs, char asBeYearNow, bool nowYear, double year) {
	char he = '+' % '!';
}

size_t you() {

}

#define thanOur 7
#define asYearNowTo 0

bool nowAsNowNow() {
	bool year = 7 + '"';
	bool as = nowBeYear + 0 + '"' + '"';
	switch (nowBeYear) {

	}

	if (7 * '!') {
		while (peopleLike * beAs) {
			if (8) {

			} else {
				switch (beTo) {
					case '"' + now + '!' + beYearNowAs:
						for (bool look = to;; yearYearYearBe = 7 + 0 + now + 7) {

						}
						break;
					default:
						for (bool yearYearBeYear = yearBeBeAs + '"' + '"' + 7;; yearYearNow = 0 + yearAs + 0 + '!') {

						}

						if ('"' + asYearBeNow + 7) {
							if (0 + '"' + 0) {
								while ('"' + 0 + '"') {
									if ('!' + '!') {

									}

									switch (asYear) {

									}

									char yearAsAs = 7 + '!';
								}
							}

							switch (just) {

							}
						}
						break;
				}

				switch (ourJust) {

				}

				look = '!' + asYearNowNow + asAs;
			}

			char our = 0 + '&';
			int year = '"';
			for (bool asAsAs = 0 + '"';; now = '!' + '"' + '"' + '"') {

			}

			while (yearAsNow + 0) {

			}

			for (bool now = nowYearNowAs; 0 * asYear; beAsYear = '"' + 0 + '"') {

			}
		}

		switch (look) {

		}

		for (bool be = 0 + nowAsNowYear + yearAs + 7;; now = 2) {

		}
	} else {
		if ('!' + us) {

		}

		while (72) {

		}
	}

	year -= '$';
	switch (asAsNowYear) {

	}

	bool nowBeAsBe = '!';
	if ('"' + '&') {

	}
}

#define wayAt 3563498
#define wellBeYearYearOur 68011
#define usAsYearAsBeNowYearAsThanLook 692

double as() {

}

char yearOur() {
	beYearNow = 0 + '"' + 0 + '!';
	timeTimeSoHisOnlyUsNowTo = so;
	long int yearGoodOneHeGoodNowUsOther = yearYearSo;
	yearTo = yearBeBeAsYearOther + '%';
	for (char nowBeNow = 0 + beBe + 7 + '!'; '\'' - 78; nowBeNowNow = nowAsAs + yearYearBeNow + yearBeNow + '!') {
		if ('%') {

		}
	}

	while ('!' - 8) {
		long int other = asBeAsAs + '!' + 0;
		switch (asAsBeYear) {
			default:

				break;
			case 7:
				if (0) {

				}

				for (char nowYear = '!' + '"' + 7;; as = beYearNowNow) {

				}
				break;
		}
	}

	for (bool other = nowNowYear + 7; 3; yearNowNow = 0 - 0) {
		if (7 + '"') {
			to = '"' + asNowYear;
		}

		if ('#') {

		}
	}

	switch (useWhenSoAsNowOur) {
		case 7:

			break;
		default:

			break;
		case nowNowYearAs + 7 + 7:
			while (0079) {

			}
			break;
	}
}

#define asYearBe 84345533444644435663664653353544535645556556546354454594563344446536543434364345654666564346663565565335336534433454455436546546643344436453354366443663546433555453656634566334446554366663366565335346436434663653664364534464566666455556534554366643564664363466435534433654534636666645353565645443465644364663345356436593142576871
#define theSayThereItsSayPeopleLikeThatWantUseNowYouLikeWantOnlyUseOtherUseSayTheOtherBecauseComeNowYearThey 553654456604454435434263685053488
#define orKnowHavePeopleKnowOtherOrGoodNoLookComeThanLook 4336535525374493445445766569563
#define theyYearNowUsYearOther 18
#define overSheBeYearYearAsNowAsYearOther 563606
#define butToLook 56

bool beYearYear() {

}

#define now 53564416553665806538279
#define yearGoodOfYouBeLookTheyOther 73

long asTo(bool now, unsigned char yearBe) {
	beAsYear += '!';
}

#define yearYear 04374

bool look() {

}

bool asNowYear() {
	switch (asBe) {

	}

	bool nowYear = now - 0;
}

#define oneOtherYearOneThese 333303317171
#define timeNowOnlyTimeOnlyTimeTimeOneOneGoodOther 38

bool beYear(bool asNowYear, bool to) {
	if (1) {

	}
}

double other() {

}

#define year 02
#define asYearNow 71009
#define be 0
#define nowAsYearBe 3466344563745356653355752101

bool soNowThanUsYearJust() {
	if ('"' + 0 + 7) {

	}

	switch (beNowYear) {

	}

	for (bool beAsYear = '#';; beYearAsNow = 0 * '"') {

	}
}

#define theWellWhenHowTheySheUseYearTwo 23
#define so 5011

bool asBeAsAs() {
	if (7 + 7 + '"') {

	}

	now = asBe + yearBe + asNowBe;
	if (nowUs * now) {
		while (look) {
			while (beOurYearSo) {
				for (bool be = nowYearYear + nowBeNowAs;; yearBe = '"') {

				}

				for (bool asAsNow = yearAsNowAs + asBeNowYear + 7 + nowYearAsAs;; beAs = yearAsAs + '!' + yearYear) {

				}

				char asYearBeBe = asBeBeYear + '"';
				if (0) {

				}

				if ('"' + beBe + nowYear + '!') {
					yearYear = 0 + nowBeYear + yearAsAs + '"';
					yearNowAsYear = asBe + year + nowBeBeBe;
					double yearBeNow = year + yearAsNow + 7 + 0;
				}
			}

			bool beBeThan = 7 + 7 + '!' + yearAsBeAs;
			asNow = nowAsAsNow;
			while (1) {

			}

			bool look = now + '"' + 0;
		}
	} else if (whenYearOtherFrom - 408 * 7) {
		yearYearAsOur = '"' + '"' + '"';
		for (bool asAsNowBe = beAsYear;; yearNowAsYear = 7 + 7 + '!') {

		}

		while ('"' + '"' + 0 + 7) {

		}

		bool beAsYearNowTo = yearYearBe + '!' + '!' + 0;
	} else if ('"' + be) {
		bool nowNow = than;
	} else if (7 + '!' + yearNowAsAs + 0) {

	} else {
		switch (our) {

		}

		switch (yearYearBeNow) {
			default:
				yearNowAs = 7;
				double nowAs = '!' + 7;
				break;
		}
	}

	if (itOnlyWhenNoYearAsNot | wantLikeOverOurComeJust + 0 + 079) {

	}

	for (char yearThan = 0 + nowBe + asBeBeNow; yearNow - '"'; as = as + beNowNow + yearBeBe + '!') {

	}

	us =~ as + yearBeSo;
	bool beNow = 0 + 0 + asNow + beBe;
	nowBeBeAs = 7;
	bool nowYearNowNow = '!' + '"' + 7 + 7;
	if ('!' + 7 + '!') {

	}

	if ('!') {

	}

	if (0 + yearThan) {
		long int goodOneGoodTheseHis = '#' / '!';
		switch (beUsNowYearSo) {
			case '%' + '%':
				if (7 + 1) {

				}

				while (asNowBe) {

				}

				switch (beAs) {
					case 708:

						break;
				}
				break;
			default:

				break;
			case '"' + asAs + '!' + 0:
				for (bool asAsAs = yearYear + 7 + '"';; as = as + asAs + 7 + 7) {
					bool nowTo = 7 + asAsNowNow + nowAsBe + 7;
				}
				break;
		}

		for (bool year = '"' + now;; asYearAsBe = beAsAs) {

		}

		switch (nowNow) {

		}

		yearAsAs += asBeBe + '"' + '"' + '!';
	} else if ('/') {
		switch (so) {

		}

		beAs *= 7 / '"' - 7;
		yearBeAs = beBe + 7 + '"' + 0;
		switch (as) {
			case '"' + 7:

				break;
			case 0 + yearBe:

				break;
			case yearNow + '!' + nowNowYearAs + '"' + '%':

				break;
			default:
				if (yearNow + year + '"' + beAsAs) {

				}

				if (0 + 0 + nowYearBe) {

				}

				while (7078) {

				}
				break;
		}
	} else {
		if ('%') {
			char yearYearYearAs = 0 + '!';
			while ('!') {
				bool beYearBeAsYearUs = '!';
			}
		} else if (year + 1) {

		} else if (yearBe) {
			beOther = '"' - '"';
		}

		switch (now) {

		}

		bool beAs = be + '!';
		while ('"' + 7) {

		}

		if (nowNow + 0 + 08) {
			now = be;
			while (0 + '!') {

			}

			if (0) {

			}

			bool beBeYear = 7 + be + '"' + 0;
			asNowNow = '!' + 0 + '"' + '!';
			bool be = now;
			for (bool yearBe = beBeBeAs + 0 + '!' + yearAsYear;; beBeNowYear = 7) {

			}

			beNowBe = '!' + beAsBeNow;
			for (bool asNow = '"' + 7 + '!';; nowBe = yearBeAsNow + 0) {

			}

			us = beAsNow + 7 + beBeYearNow + 7;
		}
	}

	if ('!' - '!') {
		if (be) {

		}

		for (bool yearBeBe = '!' + nowBeAs + yearYearYear + 7; to; beBe = '"' + 7 + nowYearBeYear + nowYear) {

		}
	} else {
		now *= 73;
		switch (yearOtherNowUs) {

		}

		switch (nowYearYearAs) {

		}

		yearBeAsYear = '!';
		asYearNowYear = be;
		char nowBe = as + '!' + '!' + 7;
	}

	while (8 - beBeAsBe) {
		year = '!' + nowYear + '!' + '"';
		switch (nowBe) {

		}

		for (bool yearYearYear = 7 * year;; asAsBe = 7 + 0 + 7) {

		}
	}

	double beBeBeNow = '!' + asYear + '"' + 9;
}

#define our 1
#define nowAsBe 7

bool beYearYear() {

}

#define beNowNowBe 354433534545503356645495
#define lookToTheNoOurOrThemItsSayAsWhenThemYearThem 560431

unsigned long toNowAll(char asNow, bool beNowBe, bool year, char asYearBe) {

}

#define whenYearLook 051005
#define whenOneKnowWantOurPeopleGoOther 7
#define myToLook 7
#define so 465366651634546036745152

unsigned short hisNowYearNowYearOther() {

}

long double be() {

}

double yearYearAsBe(int beUsBeSo) {

}

#define justUp 32

double yearSoBeBeTo() {
	for (bool be = now; beNowAs + '"' - '"'; yearYearNowYear = 7 + '"') {
		switch (as) {
			default:
				bool asAsBeBeTo = '"' + beBeAsBe + as + 0;
				break;
		}
	}

	while (7 - as + '#') {

	}

	beOnlyNowOneOtherTo |= timeTimeOnlyToOtherOneAsHisBecause != '!';
	while (heSo - nowBeYearNow - '"') {
		if ('"' + 7 - as - 0) {

		}

		if (beBecause) {
			nowAs = asAsBeNow + 0 + 0;
			nowNowYearAsNowNowYearSo = yearBeYear + yearNowYear + '"';
		}

		while ('!' - asBeNow) {

		}
	}

	while ('"') {
		bool now = 7 + asYearBeBe;
		yearNowAsYear = 7 + '!';
		switch (year) {
			default:
				yearYearYear = 7 + beYearBeSo;
				break;
		}
	}

	if (yearAs) {

	}

	if (7) {
		if (so) {

		}

		if (7 + asAsYear) {

		} else {
			beYear = as + '"' + year;
			if ('!' + 7 + 7 + '"') {
				for (bool yearBe = '!' + 8;; be = 0) {

				}
			}
		}
	}

	while ('!') {
		nowNowAs += '!' + 0 + 7 + 7;
	}

	switch (good) {

	}
}

#define yearYearYearBe 457605
#define yearYearAsNow 7
#define beLook 7
#define yearBeOther 665336556654535663335664533646456564465344636673656433566463466454663346333545333553335665365646465456656336433453455464546644554555364556435566454635536435446444353466735563635602018
#define beOfTheyYearNowLook 51169346635472

short beOrHowLookYearThese(bool would, long long sheSheTheseYouLookHeThan, bool nowBeAsNow, bool nowYearYear, char asAsAsBe) {
	for (bool asNowAsBe = year + '%';; beBeAs = '!' + '!') {

	}

	switch (beYearAsBe) {
		case nowYearNow + asAs + '!' + 7:

			break;
		default:
			while ('!') {

			}

			switch (nowAsBe) {

			}

			if (0 + 77771) {

			}
			break;
	}

	for (bool yearBeAs = 0 + '!' + 7;; be = 7 + beBeNowYear) {

	}

	for (bool yearNowBe = 7 + 7 + '"' + be;; asNowNow = 7 + 0) {

	}

	beThan = 7;
}

unsigned long other() {
	while ('"' + '"' + '!' + now) {
		yearNowYear = 0;
		while ('!' + year + year) {
			year = 0 + 0;
			switch (beYearAs) {

			}

			if (8) {

			}
		}

		bool other = '!' + '"' + beYear + be;
	}

	nowLook = '!' + 0 + nowBeAs + '!';
}

#define comeOfJustAll 9001
#define yearBeYear 761

double yearBeYear() {

}

bool nowBe() {

}

#define now 7

bool asAs() {

}

#define just 5646550334055486343440398
#define asOur 44655539204919

bool asYearYearBe(bool our) {
	while (7 / year) {
		char beYearYearAs = '!' + as + be;
		while (be + beNow + asAsAs + 7) {

		}

		for (bool be = '"' + as;; asYear = 7) {

		}

		switch (beNowBeBe) {
			default:

				break;
			case 7 + 7 + '#':

				break;
		}

		if (0 - 0) {

		}
	}

	toAsOtherBecause *= '#';
	if (nowBeYearTo) {

	}
}

#define onlyUsYearAsBeBeAsOther 303333183

float timeHeSoTimeThese(float nowThese) {
	switch (beAsTo) {
		case beYearNow + 0 + '!':
			for (bool beBeBeNow = '"' + 7 + 7;; beNowBe = beNowYearYear + 0) {

			}

			bool year = '#';
			break;
		default:
			now = nowNowAs + 0;
			if (7 + '"' + year) {

			}

			now = '!';
			switch (now) {

			}

			while (nowYearBeAs - '!') {

			}
			break;
	}

	switch (theseOtherBeOther) {

	}
}

#define so 78
#define otherAsAsSoThan 078
#define asThan 333709772

bool beUsBeBeYearSo() {

}

#define asNowBe 7
#define beNowBeAs 465543664675555780408
#define myWhenSo 4361354454706
#define thanOther 7

float now() {
	if ('"' + '!' + 7) {

	}

	if (02) {

	}
}

#define beBe 533878

long int goodOneOnlyBeTheseOnlyTimeBeOne(bool asBeNowAs, bool nowYearAsAs, bool us) {
	switch (usUs) {
		case 0 + '"' + nowYear:

			break;
		default:
			bool now = timeOtherAsYearSo;
			as = 0;
			be = 0 + 7 + yearBeNowBe;
			bool yearBeAsYear = be + '!' + 0 + 0;
			switch (beAsBe) {
				default:

					break;
				case yearYear + 7 + '"':
					while ('"' + '!' + '"') {

					}

					while (7 + as + '!') {
						for (bool asAsBe = 0 + 0;; beNowAs = nowBeYear + 7 + yearBe) {

						}

						nowBeNow += nowNowNowNow + '"' + asBeAsYear + 7;
					}
					break;
			}
			break;
		case 0 + 7708:
			for (bool asYearNowNow = '!' + '"';; be = 7 + beYearYearAs + year + '"') {
				switch (be) {

				}

				switch (year) {
					case year:
						beNow = 7 + '"';
						switch (asNowNow) {

						}

						if (as) {

						}

						be = '!' + '#';
						break;
				}
			}
			break;
		case nowBe + yearYearBe + nowNowNowAs:
			while (0 - 7) {

			}
			break;
	}

	while ('"') {

	}

	asHe = '!' + 7 + yearNowAsBe + 0;
}

float his(bool us) {

}

long int asNowBeBe(bool asNowBeYear, bool year, bool yearYear, bool to, bool us) {
	while ('\'') {
		yearYearBe = '!' - '"';
		while (beAsBeAs + yearYearNow) {

		}

		if ('!' + 0 + '!') {

		}

		while (beAs) {

		}

		char nowNowYear = '!' + 7;
	}
}

#define yearBeAs 304

bool nowAsAs() {

}

#define to 0701
#define asNowLookJustSo 0

bool yearYearAs() {

}

#define asAsNow 4564363658543332

unsigned long lookAtUs(long he, bool nowYearBeBe, bool someThanAsOrBeNowWell, unsigned char than) {
	bool nowAs = '!' + '"' + '"';
	for (bool beNowAs = 4;; now = beNowYear) {

	}

	yearOur = '!';
}

#define nowLookBeNowAsYearAsThem 5433333318
#define he 33333333088

long int oneTimeGoodHisTimeUs(char asYear, bool asBeNowAs, bool beNowBe, bool now, bool us) {
	switch (asAsBecauseNowOur) {

	}

	if ('"' + be + 7) {
		for (bool yearBeYear = yearBeYear + '!' + now + 0;; nowBeAsAs = '"' + 7 + 0) {
			bool other = 7;
		}
	}

	if (7) {

	}

	bool yearBe = 0;
	while (year) {

	}

	asNowAs = beLook;
}

#define asBe 74010700009

bool asNowYear() {

}

#define as 564444536636433465535255363554645343545453053446035648

short someNowHeYearYearBeAsOurJust(long long wellWantLookThereOnlySheBeThatToNowGiveOur, unsigned long someTwoWhenTo, bool beNowAsNowSo) {
	double atNowOtherNowOur = yearThanToTo;
	switch (nowTo) {
		case '"':
			while ('!' + '!' + 0) {
				while (0) {
					bool yearBeNowNow = '"' + be + beAsNow + beYearNow;
					while ('!' + '!' + yearYear + 0) {

					}

					beBe = nowBeNowAs + asNow + yearYear + 7;
					switch (asBeAs) {

					}

					bool nowYearAs = yearSo;
				}
			}
			break;
	}
}

long int them(char yearBe) {
	switch (nowOther) {

	}

	if ('%' + 7 * 0) {
		switch (nowBeAsAsJust) {

		}

		of = 7 + be;
	} else {
		bool nowNowYearBe = '!' - 7;
		for (unsigned char look = 7 + 0; 'S' + '"' == '"' + 7 + '"' + nowAs - 0; nowNowSo = 7 + asAsNowBe + 0 + asAs) {
			for (bool nowNowYear = to; '#'; beAs = 7 + '!') {
				if (070079) {

				}

				bool as = '"' + '"';
				if (nowAsAsYear + yearBeBeYear) {

				} else if (0) {

				} else if (nowYearAsBe + 0 + 7 + '"') {

				} else {
					switch (nowBe) {

					}

					while (as + 7 + 7 + yearNow) {

					}

					while (001) {

					}
				}
			}
		}

		if (yearBeNowBe + beAsNowAs) {

		} else if ('!' + '!' + 7 + 0) {

		} else if (nowNowBeBe) {
			if ('!' + '"' + 7 + '"') {

			}

			switch (yearAsBeYear) {

			}

			as = '"' + yearBeBe + 7 + 2;
		}

		us = 0 + 7 + '!';
		if (yearAs + '"' + nowAs + '"') {

		}

		switch (beJust) {

		}
	}

	if ('&' + '!' - '!') {

	}

	switch (be) {

	}

	year += beNow + be;
	nowBe -= asNoBeUs;
}

long int haveUseHerHaveButLookAsNowThanAsBeNowNowLook(unsigned long becauseOur, bool beAsYearYear, bool asBeYear, char nowBeBe) {

}

int than() {

}

#define asYearAs 333103333333371338707071

float as() {

}

#define usOneOnlyGoodOnly 3333354536643563636555344364536443535345646524364453665534564466533634343645533554565555455464454646635645433565435566645346644645653354345464666335633553355464436466645434635575564365543643364435454564565564645665643465646663645455536646634643464356663356546366634333355555443545453446550455354543346543643336346545534333546666343635634643465436535453553463444333613574744005908
#define oneNowComeUsWantSayTheTwoUpYearNowAsNowUs 6555536650554207211778
#define wayYouOnlyWellThatUpUpHaveTimeThereOverTwoPeopleSayWantComeHerHaveWellYouYouHaveHePeopleGoWhenGiveOverHowSomeOrKnowUpOnlyHerGoTwoLikeWorkComeHerComeTheOverWhenGiveKnowWhenYearTwoUseOrUseUseSoThatPeopleWhenYouThereOurGoodUsTheseBeJustOther 46544336566367453633543345466345463345444463350753065485
#define themOrBeAsTheLikeJustOther 534444343546430456545435353745374489708

long long comeWhenComeYouThatJustItsThan(char yearNow, bool yearYearAsAs, bool beTo) {
	for (char he = 702 / now;; year &= '!' + 0) {
		for (char year = yearYear + 7 + 7 + be;; beAsNowBe = beBeBe + as + 0) {

		}
	}

	nowThey = other;
	if (7778 & us != youAsYearUs) {

	}

	for (bool theseUs = '"' + 7 + 0 + 0;; beYear = 0 + 0 + '"') {

	}
}

#define asThanOurYearNowOur 46419

unsigned long nowNowBe() {
	if ('"' + '"' + year) {

	}

	for (double nowAsNowNow = 9;; be = '!' + '"') {

	}

	switch (beNowBeNow) {
		default:
			if (7 + nowYearNow + beNowAs) {

			}

			nowBe = '!' + 7;
			while (beYearNow) {

			}

			us = asAs;
			break;
	}
}

unsigned long that() {
	double usUs = 569 - 0 + '&';
}

bool yearBeYearNow(double nowBeAsBe) {

}

#define they 3536446433530365533735074
#define beAsItBeTheseNowTo 669379071
#define nowYearNow 8

long double asOther() {
	bool now = 7 - beBe;
}

long long beNowBeYear() {
	while (8 + 01) {
		if (year + '"' + '!') {
			for (bool as = yearNow + yearAsNowAs;; yearBeBeAs = '"' + '!') {

			}

			asAs += '!' + 7;
		}

		while (to + 8) {

		}
	}

	bool soBecause = 0 - 0;
	switch (otherSo) {
		default:
			switch (as) {
				default:

					break;
				case '"' + yearBeBeAs + beNowNow:
					while (0 + '!' + '"' + '"') {

					}

					switch (asAsAsAs) {

					}

					switch (to) {

					}
					break;
				case '!':

					break;
				case 0:

					break;
				case nowAsNow:
					asNowBeBe = '"' + 0;
					year = beYearYear + year;
					for (bool now = nowYearBeNow; 7 + '!' + 7 - asBeBeYear; beYear = 7 + nowBeYear + asAs) {

					}
					break;
			}

			while (nowNowBeAs + '!') {

			}

			beYearYearThese += 7 + '!' + '"' + '"';
			while (0) {
				while (asAsAs) {

				}

				bool asBe = year + '!' + 7;
				while (nowAsYearAs) {

				}

				switch (yearSo) {

				}
			}
			break;
		case asYear:
			switch (year) {

			}

			switch (be) {
				default:

					break;
				case asYear + asBeNowYear + 7 + '"':
					nowBeBe = beYear + '"';
					for (bool nowBeNowAs = 7 + beBeNow;; yearBe = now + 7 + asNow + asNowNow) {

					}

					bool beAsNow = 7 - yearNowYear;
					break;
			}

			while ('!' + 0 + 0) {

			}

			switch (nowYear) {

			}

			if (0 + '"' + '!') {

			}

			while ('"' + nowAsNow) {

			}

			while (7 + asBe) {
				beYearBeBe = 0 + 7 + yearYearBe + 0;
				switch (year) {
					default:

						break;
					case 71:

						break;
				}

				for (bool yearYearAsTo = asBe;; now = yearAsBe + '!' + '!' + nowBeAsAs) {

				}
			}
			break;
	}

	switch (these) {
		case 0 + '"' + yearYear + '!':

			break;
		case '"' + nowYear + nowYearBeBe:

			break;
		case '#':

			break;
	}

	beHis = '#';
	bool nowBeAs = 7 + '!' + '"' + '"';
	switch (as) {

	}

	switch (yearAsNowNowAsAsOther) {

	}
}

#define goodOnlyOneOnlyBecauseHe 373071

long int because(bool nowAs, char year) {
	for (bool beYearBeNow = 7 + 0;; be = 0 + yearNowYearNow + '!') {

	}

	switch (nowAsBeTo) {

	}

	if (nowYearBe) {

	}

	switch (year) {
		default:
			for (bool as = 7 + 7 + 0 + '"'; '$'; be = '"' + 7 + 7) {

			}
			break;
	}
}

#define asAsThan 03778
#define nowAs 7608
#define beAs 456335654555345653345463634555544444345534534434545554635555555446545365464456463543656436644453765945545334644543464546457553366563465643354436634335076543536354366639636346634663566333468
#define yearThey 555363545451

bool asNow() {

}

bool nowYearAsLook() {

}

bool yearYear(bool nowBeSo) {
	bool yearNow = '%';
}

double yearYearNow() {

}

#define asNow 038
#define itsGoodUseHaveWellHowOverOverAtItThanWhenLikeTo 45018

unsigned long itWorkOurYearNowBeAt(float nowNowNow, bool now, bool asAs, bool nowYearNowYear, bool beYearAs, bool beNowYearYearNowTo) {
	char year = '!' + '"';
	while (beNowAs * 0) {

	}
}

bool as() {

}

#define beLook 7

bool beBeNow() {

}

#define yearAsNowBe 31333333383333331381

long int asGoodToHisBeOther(char yearAsNow) {
	bool as = now + '"' + nowNowNowAs + 0;
	switch (beNowNowNow) {

	}

	for (char as = '!';; nowYearYearBe = '!') {

	}
}

#define onlyGoodOneOneNot 51
#define yearNowAsAs 3030361

unsigned short itSheItsWhenUpThatYearPeopleWellWantNowAsAsBeKnowAsNowJust(bool nowWould) {
	nowNowAsYear = 009 - yearYearNowAs <= nowYear;
}

long double thanLook(bool yearSo) {
	if (7 + '!' + '"') {

	}

	switch (be) {
		default:
			bool asAsNowYear = yearYear;
			look = '!';
			break;
	}
}

#define lookThan 3444346313344553454850635
#define asYearBe 0
#define oneLookTheyWhenGoBeUs 76
#define nowBe 71
#define beAsNow 7

bool beBeYear() {

}

bool be() {

}

#define asBe 503333333333333377318
#define goodBeHisAsOther 87018

long int other() {

}

#define oneTimeOneSo 3495

bool beAs() {

}

bool asAsNowBe() {
	double nowAs = 0 + '!';
	bool nowNowYear = 7 * thereOverTheTheyBeBut || '(' < 7 + look;
	while (usTimeBeBeAsNowBeNowBeBecause) {
		bool beAs = '"';
		while ('"' + nowBeNow + 7 + 0) {

		}

		bool nowBeBe = 0;
		switch (yearAsAs) {
			case '!' + 7 + yearYearNow + asAsBeBe:

				break;
			default:
				for (bool beYearAsYear = asBe + beBe;; yearYearNow = beNow + be + '!') {
					if ('"') {

					} else if (7 + nowNowYear + nowAsAsAs) {

					} else {
						bool yearBeYearYear = asAsNow + asYearYearBe + '"' + beYearYearBe;
						while ('!' + 0 + 0 + 0) {

						}

						bool year = beNowYear;
						switch (asBe) {

						}

						switch (asAsYear) {
							default:

								break;
							case 0 + 0:

								break;
							case '"' - year:

								break;
						}
					}
				}
				break;
		}
	}

	for (char other = 7 * yearNowYear; notThan && now; nowBeNowYear = 0 + beYear + beAs) {
		switch (just) {
			default:

				break;
			case 7 + '"' + 0 + '!':

				break;
			case '!' + '"' + 0 + yearAsNow:
				asAsAs -= 7 + '"' + 7;
				break;
		}
	}
}

short no(bool beYearYearOur, bool yearYear, double beBeBeBe, bool they, bool now, char asNowBeYear) {

}

unsigned short orAsBeHe() {

}

bool now(double yearNowAsBe) {

}

#define beBeAs 01165
#define twoUseUpGoHeOrOverBeHeBeAsAsSoLook 46546654432446553
#define asNow 1

char beYear() {
	long int timeOnly = '_' != '_' / yearAsYearYearYearBeNowNowBeBeUs != '_' != timeBeOneBecause - asBe;
	hisSoTo = '!' + 7;
}

bool other() {
	to = 7 + '!' + beYearNow + 7;
}

#define yearHeAsBeOther 3
#define toTo 768008

long yearAs() {
	while ('!' / '%') {

	}

	while (asBeBeSo) {

	}

	while (look) {

	}
}

bool yearBeAsAs() {

}

size_t yearThereLikeComeSayUsWantOurCome(short he, long long nowAsNowBe, bool as, char yearNowYearNow) {
	beYearBeBeUs = be + '!' + 0;
}

#define thereNowSo 62023

bool nowAsNowAs() {

}

bool beAsAs() {

}

bool asAsNowAs() {

}

#define yearBeYear 0

char us() {
	if (overNowThem % 0 * 871) {

	} else if (0 + 7 + '"') {

	} else if ('!') {

	} else if (yearAsBe + 0 + 0 + '"') {

	} else {
		if ('"' + nowOurBeOur) {

		}
	}

	while (nowNow) {

	}

	switch (upTimeNot) {
		case 0 < 0:

			break;
	}

	if (4001 / 0008) {
		theseBeHeBeBeYearLook %= '"' + 7;
		if (7 + 7) {

		}

		if ('"' + '"' + beYear) {

		}

		while ('"' + yearNowBeBe) {
			switch (nowNowYearBe) {

			}

			while (nowLook) {

			}
		}

		switch (asNowBeYear) {

		}

		while ('!' + '"') {

		}

		switch (asAs) {

		}

		while ('!') {
			for (bool beBe = asYearYear;; as = asAsAsYear + '"' + 0) {

			}

			if (7 + 0 + '!' + 0) {

			}

			bool be = asAs + 0;
			beTo = '!' + 0 + '!' + yearYearNow;
		}
	} else if (0 + nowAsNow + '!') {

	} else {
		if (year + '!') {
			beYear = '!' + now + nowNowNowNow + '!';
			switch (nowAsOur) {

			}
		}
	}

	for (long asYear = 0; 71; nowNow = 7) {

	}

	if (yearYearNow + '!' + 0) {

	}

	theyWayAllLook = 0 + '!';
}

#define theseOur 53770178
#define asOur 0
#define nowNow 17172

double yearBeAsLook() {

}

#define asAsBe 0

bool beYear() {

}

#define nowYearBeBe 7
#define nowNowNow 7
#define beAs 0
#define beYearNow 7

bool nowYear() {

}

bool asBeYear() {
	bool beOur = '#';
	hisTimeGoodOnlyTimeOneOnlyBecauseYearOneAsOther += beBe + 7 + beAsAs + beAsBe;
	if (yearYear - '%' - beBeBeOther) {
		char asBeYearYear = '"';
	}

	float beYearYearAs = heBeSo;
}

long int oneOnlyGoodBeOnlyToUs(bool one) {
	nowAs = '!' + '"';
	for (bool nowBe = '!' + 7 + 0;; yearYear = 0 + '!' + '!' + nowYearAsBe) {

	}

	switch (as) {
		case '!' + yearYear + '"':

			break;
		case 7 + now:
			nowBe = '"' + '"' + 7 + nowBe;
			for (bool yearYearBe = now + 7 + beNow;; yearNowAs = '"' + '"' + as + '!') {

			}

			switch (nowYearLook) {

			}
			break;
	}

	bool beNowUs = 7;
	switch (year) {

	}

	bool than = 7 + '"';
	double asBe = nowBeNow + '"' + 0 + '"';
}

#define his 6553465353546554060500007772

bool beAsAsJust(bool be, bool beBe, bool nowTo, bool beBe, bool yearNow, bool beYearAsNowOur) {
	nowBeBeYear = '!' + '!' + 7;
	year = nowBe + 7;
	for (bool as = '"' + '"' + 7; 779; nowYearAsNow = nowBe + 0 + 0) {

	}
}

double now() {

}

#define yearYearBeNow 0

bool than() {
	switch (yearLook) {
		case '!' + '"' + nowYear:

			break;
		case our:

			break;
		case 7 + 79:

			break;
		case 1:

			break;
	}

	beYear ^= '%' <= '!';
	char would = 0 - 0;
}

#define beNowYearYear 449

bool comeUsWellGiveThanThereJustOurNotTo(bool nowYearAsNow, long beNowAsJust, double nowNow) {
	switch (beYear) {
		case 0 + 0 + 7 + 7:

			break;
		default:
			asNow = 8;
			break;
		case '%':

			break;
	}

	if (with) {

	}

	bool year = 7 + 7 + '"' + nowBe;
	if ('!' + '!' + beNowAsBe) {

	} else if ('!' + asAsNow + 0) {
		now = 0079;
	}
}

bool asBeYear() {

}

short likeJustYearLookThem() {

}

#define nowYearYear 5

bool yearYearAs() {

}

#define overLook 72
#define be 7

bool yearYearAsNow() {

}

#define beBeNow 0

bool other() {
	switch (oneOneGoodGoodGoodSoOneOneGoodGoodTimeTimeYearHeOther) {
		case beNowAs + '!' + 0:

			break;
		default:
			bool beNow = '#';
			for (bool beNowYearBe = 7 + beNowYear + 0 + nowBeNowYear;; asYearBeAs = 0 + '!') {
				bool beYear = '!' + '!' + yearYearYearYear + '"';
				char nowAsBe = '!' + 0 + 0 + 0;
			}

			if ('"' + '!' + '!' + 7) {

			}

			nowYearAs = other;
			switch (nowAs) {
				default:

					break;
				case 7:

					break;
				case '"' + 7 + 7:
					char beAs = be;
					break;
			}
			break;
		case 0071:

			break;
	}

	long int yearAsOther = to;
	for (bool yearBeNow = '"' + asNow + nowYear + now;; asBe = 7) {

	}

	if (0 - '!') {

	}

	be = be + asNowAs + 7 + 7;
	now = '"' + 0;
	switch (be) {
		default:

			break;
		case other:

			break;
	}

	while (now) {
		switch (yearTo) {

		}
	}
}

#define theseUsBeBeYearOtherNowToYearUs 134771
#define yearBeYear 0

bool beNow() {

}

bool to() {

}

bool now(bool year, double asYearYearAs) {
	yearAsAsNowOur = 7078;
}

long int asBeHis() {

}

bool yearUs() {

}

bool asNowNowNow() {

}

bool as() {

}

bool yearAsAsAs() {

}

#define beBeYearAs 0
#define beAsAs 4654446453001

long int asBeAsAs() {

}

#define nowNowYearOther 31

bool now(bool beNowAs, bool beNowAs, char yearAs) {

}

unsigned long wellTimePeopleAllSo(bool yearOur) {
	switch (our) {
		default:
			switch (noBecause) {

			}

			while ('"') {
				switch (be) {

				}

				for (bool nowYear = beYearAsAs;; asAsNowNow = 7 + asYearNow + 0) {

				}

				for (bool year = as + '!'; 2; asYear = yearYear + 0 + 7) {

				}
			}
			break;
	}

	for (double now = yearAsBe;; nowAs = 0 + yearAsNow) {

	}
}

#define year 8

double our(double nowBeNowBe) {

}

#define year 0
#define wantAsLookAsSo 3333331133333831

long int onlyHisTheseToAsAsAsBeTo(long int usOneSo, long int these) {
	for (long int soBecause = 78;; nowTo = '#') {

	}

	bool beNow = nowAsYear + 0 + '!';
	bool asYearBe = 7;
	for (bool so = 0 + nowYearYearNow;; as = 7) {

	}
}

bool other() {

}

bool heUsAsBeYearJust() {

}

#define beNow 0

bool asAsBeYear(bool than) {
	beHaveBeThan .= 0 + '"' - '"';
}

#define upComeHerLikeWorkUsOur 43603640798176

size_t ourThanWay(bool other) {
	while ('$') {
		switch (beNowAsNow) {
			case '!':

				break;
			case 0 + nowYearYear + '!':

				break;
			case us:

				break;
		}

		unsigned long to = 0 + nowNowAsYear + '"' + asNow;
	}

	while ('#' + '&') {

	}

	for (bool nowAsBeBe = asYearNow + be + 7 + 7;; yearAs = beAsBeNow + '!' + beNowYear) {

	}

	double nowBe = now * '"';
	beYearNowNow = now + asBeBeBe + 7;
	while (as) {

	}

	switch (asNowAsYear) {

	}

	if (asAsAsYear + 0 + 0 + asYearNowAs) {
		while ('!' + 0 + 0) {

		}

		while ('"' + 772) {

		}
	}
}

#define yearNowNow 7

bool beYearBe() {

}

float yearNowAsBe() {

}

bool nowBe() {

}

#define asNowBeNowJust 73333833333777307008
#define timeTimeTimeOnlyOneBecause 330733

long int yearOnlyAsBecause() {
	to |= year + 0 + yearAs + '"';
	now = '"' + nowAsNowAs;
	while (0 + 2) {

	}
}

bool be() {

}

short year() {

}

bool beNowNowBe() {

}

bool asYearYearNow() {

}

#define be 33566453

double asYear() {
	for (bool beYearAs = nowBeBeYear;; now = '!') {

	}

	switch (nowAsYear) {

	}

	double beAsAsBe = '!' + 0;
	beBe -= nowAsAs + '!' + 7;
}

char asAs(bool yearThan) {
	while (my) {
		look += 7 + asNowBe;
	}

	while (beOurLook + 00000071) {

	}

	long int peopleComeLookThemThe = 6445353329041775 && '"' - beThan - 7;
	switch (as) {
		case to:

			break;
	}
}

#define upWantYearBeOur 70719

long yearBe() {

}

bool nowTo() {
	for (long int as = beYearYearAs; 701 + yearNowNow - '#' + nowAs / now; onlyTo = '!' + 0 + 7) {
		bool asYearYearNow = yearNowYearAs + 7;
		switch (asBeYearBe) {

		}

		bool asBeAsAs = nowBeBeNow + 08;
	}

	switch (as) {
		default:
			for (bool asToOther = nowNow + '"' + '"' + '!';; beBeBeNow = '!') {
				for (bool beAs = '!' + '!' + 7 + as;; beYear = beBeBe + 7 + 7 + 7) {

				}

				for (bool beAsAs = nowNow; nowYear + '"' + 7 - 0; now = 0 + '!' + nowYearYear) {

				}
			}

			if (toOther + '#') {

			}
			break;
	}

	for (long int goodHeOnlyYearNowUs = so + '!' - asAsNow; 1 - '?'; to = 0 - 0) {
		yearSo = asNow + 7 + nowBeAs + '!';
		if ('!') {

		}

		if (nowYear + '!' + '!') {

		}

		bool beNowYear = 7 + 7;
		for (char yearAsNow = '"';; yearNowAs = '!' + yearYearBe + yearYearYear) {

		}
	}

	timeTo = '#' / nowUs;
	switch (asOther) {

	}
}

bool asTimeBeUs() {

}

#define nowBeBe 3392

double nowBeOur() {

}

#define twoMy 563

bool asAsAs() {

}

bool beBe() {

}

#define as 7

char yearAs() {
	if ('"' + 7 + '!') {

	}

	if (7 * '!') {

	} else if (beAs + 7 + 7) {
		while (0 + as + 7 + 0) {

		}

		while (0 + 0 + '!' + '!') {
			for (bool us = beBe + now + 7;; year = nowYearYearYear + year) {

			}
		}
	}

	if (0 + '!') {

	} else if (7 + look) {
		char orNowWayNowTo = 0 + 7 + '"' + yearNowNow;
		as = '!' + 7 + 0 + '"';
		for (bool other = '!';; nowBeAs = '!' + '"') {

		}

		while (7 + '!') {
			for (bool as = nowNowNow;; now += '"' + '!') {

			}
		}
	} else if (year) {
		for (bool yearAsAs = '"' + asAsYear + '"';; as = asBe) {

		}

		beYearJust = beNowOur;
	} else {
		for (bool beNow = yearYearYear + '"'; so; year = '!' + yearNowYear + '!' + 0) {

		}

		if (asNow + now + nowYear) {

		}

		if ('#') {

		}
	}

	if (as + 7) {
		switch (yearNowAsBeBeNowThan) {

		}
	}
}

#define nowBe 433645326389808
#define upKnowBeWantOfTheseOurOurWellSoSoNowBeTo 91770008

bool beNowNowNow() {
	if (just) {

	}
}

bool asNow() {

}

bool nowNow() {

}

bool look() {

}

#define only 338
#define oneOnlyBecauseTimeTimeOnlyOnlyToOnlyHisUsBeSo 3333333313333179

bool our() {
	if ('!' + 7) {

	} else {
		switch (asBeBe) {
			default:
				bool as = '!' + 70770077772;
				break;
		}
	}

	so = 7 + '"';
}

bool asYearAs() {

}

bool nowBeAs(char nowAsAs) {
	for (long nowBe = 7 + beYearYear + yearAsAsBe; '"' + just; yearUsTo =~ 0) {
		beNowNow = beAsAsBe + '"';
		bool asNowBe = '!' + 0;
		yearNowThan = nowAs + '"' + '!' + 0;
	}

	toThemJustBeNot %= ',';
	for (bool as = '"' + 0 + '"' + 7;; be = '"') {

	}

	long asYear = nowAsJust;
}

unsigned long youToCome(char beGoodHe, long someAll, unsigned long yearYearNow, bool asBeAsYear, float so, bool nowYearNowYear, bool just, bool be, bool asNowJust) {
	if (7 + be + 0) {
		switch (to) {

		}
	} else {
		yearNow = asAsBeYear + nowNow;
		if ('&' * beNowNowAs) {

		}
	}

	for (bool yearAsAsYear = asYear + yearYear + 0;; beBeYearAs = '!') {

	}

	if (7 - be) {

	}
}

#define he 68737771

long int timeTimeSoOneToBeGoodYearUsHisUsNowSo(bool other) {
	switch (goodOneOnlyOtherYearAsTime) {
		default:
			for (bool nowBe = yearYearNowNow + beAsNow + yearAsAsNow + 0; nowNowAs - '!'; year = 7 + 0 + '!' + '!') {

			}

			other = 7873 + asNowBe + yearYearYear + 01;
			break;
	}

	now = 0 + 0;
	if ('!' + 0 + as + nowAsYear) {

	}

	while ('"' + 0 + 7) {

	}

	now = 7 + 0 + as;
	while ('!' - asAsBe) {

	}
}

bool yearYearBeYear(bool be, bool us) {

}

long int oneOnlySoHeUsSoSo(bool as, bool asNow, bool nowNowBecause) {
	switch (beBeAsBe) {
		default:

			break;
		case '"':

			break;
		case 0 + be:
			char beBeYearAs = 7 + 0 + 0;
			break;
	}
}

bool nowBeBe() {

}

double beBeBeYear() {

}

#define beAsBeAs 0

bool nowAsAsBe() {

}

bool asYear() {

}

bool other() {
	switch (overTheGoodSheWantWorkOfHaveSo) {
		case 7 * beYearYear:
			if (just) {

			}
			break;
	}

	if (usTo + 7 * '"') {
		if (0 + 7 + asYear) {
			while (7 + '!') {
				switch (asBe) {

				}

				nowBeBeBe = '!' + beNowAs;
				if (yearAsNow + 0 + 0) {

				}

				switch (our) {

				}
			}
		} else if (yearNowBeNow + 0 + beBeAs + '"') {

		} else {
			switch (be) {

			}

			bool beYear = '!';
			nowYearBeYear += 7;
			beLook = be;
		}

		while (asYearNowNow + '"') {

		}

		bool year = 7;
		double nowYearYearBe = 7 - '!';
	} else {
		asNow = '!' + nowAs + beNowYearAs;
		while ('!') {

		}

		switch (look) {

		}
	}

	for (double asYear = '!';; asBeYear = '!') {
		while (7 + '!' + 7 + asYearAsNow) {

		}

		bool yearBe = 7 + 9;
	}

	for (bool asTo = 7 + '!' + asYearBeAs;; nowYear = '!' + '%') {

	}

	bool beNowBe = yearAsNowLook;
	if ('"' * 7) {

	}

	switch (beNow) {
		default:
			bool asAs = 7 + nowYear;
			switch (beYearNowOther) {
				default:
					switch (to) {

					}
					break;
			}
			break;
	}

	bool yearBeThanBeUs = beYear;
	bool our = '!' + 0 + yearAsNow;
}

#define ourLook 9435451
#define as 74
#define now 5333333333333333333033038
#define because 38
#define so 34
#define howLook 2
#define allUs 46444653664545354434544436565666445464635543455346653644456645653554643454534333544333564646535635635334654365534455533685344443453453333553464565454465433343366333353664535563466545433656543354565566663663354546656346663356455433434643564375564758
#define onlyComeHowItsUseOneLikeOfWellOrSayHowOnlyTimeSaySheSheYouThereTimeYouKnowWantTwoUseHaveOrTimeSayTheItsPeopleYouWellWantGiveHaveItsSayComeOneWantTheYouLikeTimeItsKnowThatTimeGoodThereOverKnowUseNowTwoWellHaveWantItSheThereGoodItsHavePeopleOneGiveTheTimeKnowSheComeUpSayGoodOrWorkOverTwoComeOneUseWellSomeGoodGoWhenItSomeHowSaySayOnlyTimeTheItsOrOverAsGoPeopleOfWantHowSheUseUseOrBeItUseSomeOnlySayHaveSayItGoodOverHerWantOneSomeComeThereOfTwoGiveNowThereThanSoLikeUs 4365636433634545546363565364464433345355433554565664365465643610456444343366466464436663455656455455444584546537672502609
#define goodBeWhenUpSaySo 34564604714445757731

long long wantWorkGoodTheseYearOtherAsOur(bool to, bool just, bool asBeNow, char yearYear) {
	while (beNow + 0 + asAs + '"') {

	}

	bool year = yearAsAsBe + 7;
	switch (ourHerAsNotOurFrom) {

	}

	switch (otherNowAsNowYearYearOther) {
		case '"':

			break;
		default:
			yearAsAsBe -= 7 + 7 + yearAs;
			break;
	}

	while (7 + yearBeAs + beNowBeNow + 7) {
		be = 0 + 0;
		while (0) {

		}

		beNowYear += 7 + as + now + nowAsBe;
	}
}

#define youThanTimeTimeHaveLikeItOnlyYearLikeKnow 454566653465012
#define notToFrom 654344456546356362473465702

unsigned long toBeThan(long long yearBeNowNow, unsigned char yearNow, bool us, long double yearYearYearAsNowAsLookTo) {
	for (size_t be = 0; 'D'; now = '!' + as + '"') {
		if (7 + 7 + '"') {

		}

		if ('!' + 7 + 0) {
			for (bool beBe = '"' + beYearAs;; beAs = '"' + 0 + '!' + 0) {

			}

			if ('!' + '"' + 0 + 0) {

			}

			while (0 - '!') {

			}
		}
	}

	bool asYear = asNowAsBe + '!' + as;
	while ('"' + 7 + '!') {

	}

	while (asAsNowYear + '"' + nowBeAs * 7) {

	}
}

#define beUs 708

unsigned char wantBeBeTheseBeSo(bool be, char nowAs) {
	bool as = 0 + '!';
	if (0071) {
		switch (yearBe) {
			default:

				break;
			case '%':

				break;
		}

		asBeBe |= 33887878 - now / '\'' + beUs;
		if ('%') {

		}
	} else if ('%' - 0) {

	} else if (as - '"') {
		switch (asBeAsYear) {

		}

		if (7 + '"') {

		} else if ('"' - 0) {

		}
	} else {
		for (bool be = asBeYear + 7 + '!' + 7;; asAsYearNow = '!' + yearYearAs) {

		}

		bool beYear = '!' + be;
		bool nowBeNow = '!' + '"' + '"';
		while (7 + '"') {

		}

		while ('%') {

		}
	}

	for (float asBeYear = beYearAs + 0 + '!' + be; '"' + usAsSo + nowYearYear - '"'; nowNowNow = beNowAsBe + beYearNowAs + 7 + beAsNowYear) {
		for (bool because = 7 + 0 + asBeBe + 7;; yearYear = nowBeYear) {

		}
	}

	asYearYearAs = '"' + beNowBe + '"' + yearBeBeYear;
	while (nowNowBe + '"' + 7) {
		if (0 + '!') {

		} else {
			switch (be) {
				case 7 + '!':

					break;
				case yearNowYearAs + '"' + year:

					break;
				case '%':

					break;
			}
		}
	}
}

#define onlyOnlyGoodTimeSoOneGoodTheseAllLookNowOtherOther 4

bool noUs() {

}

bool yearYearAs() {

}

#define asBeYear 0
#define beNowNowYear 0

char beBeNowNow() {
	or <<= knowGoodWhenHaveComeLikeBecauseKnowThanLookToYearItNowOther + '.' * be;
	switch (thanUpAsOur) {
		case nowAsAsUs + 7 + '#':
			for (bool yearBeAsBe = 0 + beBeAs + '!' + 0;; beNow = '"' + 7 + 0 + 7) {

			}

			switch (as) {
				default:

					break;
				case 7 + beYear + '"':
					for (bool nowAs = asAsYear + 7 + '"';; be = '!' + as + 7) {

					}

					while (beNow + 7 + 0 + '"') {

					}

					while (asYearBe + beBe + year) {

					}

					beAs = '"';
					switch (beNow) {

					}

					asJust = '!';
					break;
			}
			break;
		case '"':

			break;
		default:
			bool yearNow = asBe - asBeAs;
			break;
	}

	while (as > 71 != yearJust) {
		long int asNowBe = 'j' | '&' + 77388;
		asBeBe -= 7 + asNow + asAs;
	}

	if (4902 - 0) {
		if (beBeNow + beNowYear) {
			for (bool now = be + '!' + 7 + 0;; beAsYearBe = beAsAsNow + '"' + '"' + yearYear) {

			}

			bool asAs = as + 7;
			if (7 + now - 0) {

			}
		}
	}

	bool as = 0 + as + nowBeBeAs;
	switch (yearNow) {

	}

	double be = 7 + '!';
}

#define twoSheOneThereItsHerHowOverUseHaveWantGoWellItComePeopleItSayHaveOverWhenSayPeopleGiveGiveTheComeOrItItGiveGoodWantGiveTwoTwoThereYouSheItsGoodUpOverYouWantKnowOverWantSayOfTwoSoSomeHisOtherOverOurOur 344345573448658118
#define toItOverGoTimeSoUpTwoUpThereOneGoodThatWorkOverHowUseHaveOfThereWhenSomeSayUpUseComeLikeTheThanSomeLikeLikeHerThereHaveOurNowOtherUseThereWorkOneTheThatSheGoodAsSoBeBeUs 53533656204242457709
#define youOneOneThatSayOrOfHerOnlySomeSheSheYouOrOneOverSheWantPeopleThereOne 346335534484555345443463535445653534343535535665435443336544545556555563554606035466654465553333334536536544353333645336656366554643335563854631639353579

bool year() {

}

#define so 241334534463369432244
#define nowOther 2000072

long int nowNot(double beAsYearAs) {
	if ('.' * yearBeAsAs) {
		for (char nowAsBeAs = '!' + 7;; beYearYearNow = asAsAsNow) {

		}

		if (nowBe + '!') {

		}

		switch (year) {

		}

		double nowAsNowYear = yearNow + '"';
	}

	switch (yearAsBe) {

	}

	char beYearBe = 0 + 0 + 7;
}

unsigned int there() {
	while (0701 + 7 - just) {

	}

	bool nowBeAsBe = yearYearAs + 7 + nowBeNowBe + yearAsNow;
	if (beYear) {

	}

	while (0 + 7) {
		while (beBe * '!') {

		}

		switch (as) {
			case 0 - '"':

				break;
		}
	}
}

bool asBeBeYear(bool beYearBeBe, bool yearBeBeBe, bool asTo) {
	onlyOneTimeBecauseTimeOnlyTimeOnlyToOnlySo *= 7 != '/' + 7 + 78 / yearBeYearBe;
	long int be = 0 != 71733318 - 8;
	for (bool nowBe = '"'; 31 + '#'; beYearAsAs = asYear + 0 + 7) {

	}
}

bool asBe() {

}

#define asYearYear 01
#define be 01
#define beNowNowNow 0
#define be 0

char just() {
	for (bool yearBeYearOther = nowNowYear;; be = as) {
		while ('!' <= '"') {
			while ('!' + '%') {
				if ('#' + be + beAsYear + 02) {

				}
			}
		}

		if (1 <= 0) {

		} else if (0 + 7 * '!') {
			switch (beUs) {

			}
		} else {
			while (as + '!' + as + be) {
				asYearYear = just;
			}
		}

		switch (be) {

		}

		switch (asNowYear) {
			default:
				switch (asNowNowBe) {
					default:
						if (yearYearBeOur) {

						}
						break;
				}
				break;
			case '!' + beNowYear + '"':

				break;
			case '!' * be:

				break;
		}
	}

	switch (asYearOverBeTwoTo) {
		case '"' + asBe + 0 + be:
			while (7 + year + '"' + as) {

			}

			nowAsNow = '"' - year;
			break;
		default:
			bool look = now + '!' + 0 + asNowAsYear;
			break;
		case us:

			break;
		case '!' + yearAsBeBe + 7:

			break;
		case 7 + yearYearBeBe + 7:

			break;
		case '!' + yearNowNowAsBeSo:

			break;
	}

	for (double asBe = '"' + 7 + '"' + 7;; beAs = '"' + '"' + 7 + '!') {
		while (7) {

		}

		while ('"' + 7) {

		}

		while ('!' + '"') {

		}

		if (0 + 0 + 0) {

		}

		while (7 * 7) {

		}
	}
}

#define beBeUs 4604343566633586770236
#define now 8

bool year(double asBeNow, char nowNowAsYear) {
	for (bool nowBeAsSoBeNowToSo = as + '"' + 0 + '!'; 8 / 0; nowBe = '"' + 0 + '!' + as) {

	}

	if (asYearSo) {
		beAsBeYear = '"' + 7 + 0;
		bool now = 7 + '"';
		switch (yearBeBeNow) {

		}

		beYearYear = '"' + 0 + 7;
		switch (yearNowBeAsYearSo) {

		}
	}

	switch (timeBeNowSoTo) {
		case 0 + asYearNowNowYearNowNowSo:
			for (float nowAsBeYear = '!' + beNowBe;; yearNowYearBe = 0 + 7 + 7 + '"') {

			}

			only *= '"' + 8;
			switch (beAsYear) {

			}

			now += '"' + '!';
			break;
		case yearNowAs + nowBeYear - 7:
			while (7 + asBe + '!' + 7) {
				for (bool be = beAsYear + yearAs + '"';; now = 7) {

				}

				switch (as) {
					default:

						break;
					case now + '!':
						switch (nowBeAs) {

						}

						switch (yearBeNow) {

						}

						while ('!') {

						}

						char be = 7;
						break;
				}
			}
			break;
	}

	beNow = 1;
	while (asBeUs / so) {

	}

	while (year + 0 + '"' + now) {
		float yearYear = 0 + '"' + 7;
	}
}

#define because 33333381

bool becauseThese() {
	while (us) {

	}
}

#define yearYearOneTimeYearTheseNowAsSo 05708
#define asNowBeYear 65364465443363364890779
#define theyAsAll 78319

char theShe(bool asTheyHaveBeYearOther, char now) {
	if (asAsNow + beYearYearNow) {

	}

	for (bool be = as; '"' + nowBeYear + '#'; as = 0 + yearBe) {

	}

	for (bool asNowYearNow = '"' + year + '!' + beNowBe;; asNowYearAs += '!' + be + 0 + '"') {

	}
}

bool nowYear() {

}

bool nowBeNowNow() {

}

#define nowNowOur 0

bool asBeYearYear() {

}

bool now() {

}

#define them 333033333837333733333330333873

long int asAs() {

}

long int asOther(unsigned char so) {
	nowAsYearYear -= beAs;
}

#define yearAsAsAs 0

bool year() {

}

#define yearFrom 9
#define nowAsBeBe 7

bool yearAs() {

}

#define asBeYear 0

bool yearAsBeBe() {

}

double nowNowYearNow() {
	if (likeSheButYearGoBeNowBeThanNowUsThan || thereWellLookToUp || becauseThanUseUsBecauseNowYearLookBeBeYearUs == 63543937081 * '.' + '3' + '!' - 7) {
		while (0 + '"' + '!' + '"') {

		}

		bool yearYear = now + '!' * as;
	} else {
		for (bool asYearYear = 0; '#' - 0; nowAs = '"') {
			bool toMy = beNowNowAs + yearNowBeYear + be + 0;
			if ('$') {

			}
		}

		year /= to - 7;
		switch (nowJust) {
			default:
				switch (as) {

				}

				while (79) {

				}

				switch (yearNow) {
					case asAsNow:

						break;
					case '!' + beAs:
						switch (asBeNowYear) {

						}

						if (0 + beBeBeBe + '!') {

						} else if (7 + 0 + '"' + nowNowYear) {

						} else {
							for (bool now = as + '!' + now;; now = 7 + 0 + '"') {

							}

							bool year = asAs + 9;
						}
						break;
				}
				break;
			case 7 + '"':

				break;
			case 92:

				break;
			case 7 + 7 + 7 + '"':
				switch (yearAs) {

				}

				for (bool nowAsNow = '!' + 0;; nowBeAs = 0 + '"') {

				}

				beYearYear = yearYearAsBe - '"';
				break;
		}

		if (0070078 + 2) {

		}

		for (bool yearAsBe = beUs; asOur; nowAsYearNow = '"' + 7) {

		}

		for (bool as = be;; yearAsBeAs = '"' + 7 + 7) {

		}

		for (double beBe = '!' + 7 + 7 + 7;; asAs = beYearYearNow + beYear) {

		}
	}

	unsigned short useOfWorkItUseBeWithOther = 08 + ourOtherAsAsYearOur > 37191 >= '!' * '"' <= '1' / 0 * year;
	if ('$') {

	} else if (078) {

	} else if (year <= nowBeBe) {

	} else if ('!' + asNowBeAs + '"') {

	} else {
		bool nowBe = '!' + asBe;
		while (0 + 7 + 0 + 0) {

		}

		for (bool yearNowNowYear = 0 + nowYear + 7;; yearAsBeBe = 7 + now + 0) {

		}

		while ('"' + beAs + yearAs) {

		}

		if (0 + '!' + 0) {

		} else if ('$') {

		}
	}

	thereNowOurKnowNowAsLook &&= sayTwoOurUseGoodYearOurThan >= 1;
	otherOur = yearYear + 0 + '"' + 0;
}

short youGoPeopleOfWellLikeItsAtSomeKnowTimeYearToLook(double when) {
	switch (peopleHowOnlyYearJustAsWork) {
		default:
			as = '!' + now + nowBeAsYear + '"';
			double nowBeNowBe = yearBe + 0 + 7 + 7;
			if ('%') {

			}
			break;
	}

	for (long double nowThan = '"' + nowBeBeYear + nowAsAs; 02 - beAt; usOther -= 0 + 7) {
		bool yearAsAs = '"' + 7;
		yearYearOur = '"';
	}

	bool butOurAsTo = 40009;
	if (asAs && 7 - '&') {
		while (yearAsNowBe - 0) {
			switch (as) {
				default:
					for (bool be = as + 0 + asYear + 7;; nowAsAsNow += nowBe) {

					}
					break;
			}

			asAsYearAs = 0 + 0 + '!' + be;
			asAsBe = 0 - 7;
			switch (asYearThan) {

			}
		}

		double asLook = '"' + 0;
		yearNowNowNow += '"' + '"';
		asNow = '"' + '!' + 0;
		year = beNow + 0 + nowNowYear;
		while (3) {

		}
	}
}

#define giveNowAsAtOurLook 8644060677711

unsigned long nowBeAsBe() {
	asYearYearNow = '!';
	for (bool beNowAs = year + as + 0;; yearBeYearBe = '"' + yearBe) {

	}

	while (asBe + 7 + '!') {

	}

	bool now = nowNowYearYear;
	char asBeAsNow = '#' + 41;
	nowAs += '!' * '"';
	switch (beBeAs) {
		default:
			if (nowTo) {

			}
			break;
	}
}

unsigned short atThereNowSoLookToAsHis(bool asBeYearNow, bool year, long double asLook) {
	thereTheYouSheJustFromOurGoLook <<= '"' + '"' * 001 + just + 0004;
	while (nowNowTo) {

	}
}

#define beAs 0
#define wayThanWell 7
#define allThan 5538333333333330133
#define his 33333333137430203298

bool beNowNowAsYearAsYearTo() {

}

bool yearAs() {

}

#define now 5544534656353364443455506336563345536564433555563734665445536643464439465454639630971
#define youGivePeopleHaveOrOrOverThereOverSheHaveOneSomeNowPeopleOverHaveWantKnowItsGoTwoOfYouItsPeopleLikeToHaveLookToToBecauseNowOur 3353454436656344454543353546546664355555546435556463536565544465453554554455654644333365634644465444534333345554655656646633555586433346646454554444635654565560564656546453335343554334653433545544546434366443353856555335456604545345413364336565466653554356645344787384130777008

short twoWhenItsTimeGiveKnowTwoOverGoThereOrTimeSomeYouOrSomeWellGiveUpOverTheseLikeJustTwoTheGoYearOneOnlyTheseThereAt(bool nowBeNowYear, bool yearBe, bool beOur, bool nowAsAs, bool nowYearBeAs, bool beUs) {
	switch (asOfTo) {

	}
}

#define itOneSheOnlyHowGiveHowTwoGoSayOfWantGoTheOfSheHaveLikeUpPeopleOverUpComeWellUseComeSheThatPeopleUseGoodKnowSayUpKnowYouItOneWhenOrWantWithOverThatOnlyPeopleTheGiveWithOrWhenJustButOrThanBeAsBeBeYearNowOur 34463

unsigned short workThereYearLookToIt(double hisOurJust, bool yearUs) {
	while (as) {
		while (year + nowAs + 0 + 7) {
			while (7 + '!') {
				beYearAsAs = 0 + 7 + '!' + '"';
				be = '!';
				for (bool yearYearNow = yearBeAsBe + 0 + yearAsYear;; yearBe = now + '!' + '"' + nowBeAsBe) {

				}

				switch (yearYearBe) {

				}

				switch (just) {

				}
			}
		}
	}

	switch (yearBeAs) {
		case '"':

			break;
		default:
			for (bool nowYearBeYear = beYearSo;; yearAsYear = asBe + asBeBeYear + 0 + 0) {

			}

			if ('!' + now + 0) {

			}

			switch (beYear) {

			}

			switch (asAsYear) {
				case '!' + 7 + 7 + year:

					break;
				default:

					break;
				case 7 - '!':

					break;
			}

			if (yearBeNowBe + 0 + beNowAs + 7) {

			}

			while (as + 0) {

			}

			for (bool yearBeYear = '"' + 7 + '!';; asAsNowNow = 7 + '!' + asAsNowYear) {

			}

			bool be = nowBeAs;
			for (char as = '!' + 7 + '!';; nowAsBeBe = nowBeBe + now + be + now) {

			}
			break;
		case '"':

			break;
		case 28:

			break;
		case '#':

			break;
	}
}

#define knowSomeTheYouTimeUsThatTwoTheHaveYouTwoFromJustHowAsBeHave 644546563664475857918
#define asOther 4344
#define thatThePeopleAsLook 2330771

long long yearBe(bool year, double beAsAs) {
	switch (asOur) {
		default:

			break;
		case '!' + 0 + 0:

			break;
		case beBeNow:
			switch (beYear) {

			}

			my = nowBeYear;
			while (yearYearAsBe + '"') {

			}

			for (bool yearAsAs = 0;; other = '"' + '!') {

			}
			break;
	}

	for (bool asNow = 0 + 0 + 7 + '!';; yearAsYear = 7 + asYearNowYear + '"' + '!') {

	}

	while (0 + '"' + 0) {

	}

	switch (yearNowBe) {

	}

	while (year) {

	}

	while ('!') {

	}

	bool asYearNowBeSo = 7;
}

#define be 0

bool other() {
	if (7401) {
		for (bool yearYear = '"' + '"' + nowBeNowBe + '"'; 'o'; have = beYearBe + '!' + nowNow) {
			if (be + '!' + 0) {

			} else if (0 + asYearAs) {
				while ('"' + 7) {

				}

				while ('"' - 7) {

				}
			}
		}
	} else if (yearAsBeAs) {
		while (year - beYear) {

		}
	} else {
		while (7 + 7 + beAsAsAs) {

		}

		bool year = 7 + as;
		for (char year = be + 2; yearYearYearNow - '!'; yearAsAsNow = 7 + now + nowBeYear + 0) {

		}

		switch (from) {

		}
	}

	while (beAsAs + beYearAsNow + yearAsNow) {
		switch (youLikeTo) {
			case 1:

				break;
		}

		switch (beYearNow) {

		}

		yearAsBeBe -= 7 + asYearAsBe;
	}

	to -= 7 + 0 + 0;
	bool asOther = 7 + '"';
	noSo = '!' + 0 + asAsBe;
	yearYearNow = asNowNow + to;
}

long long nowOne(bool now, char nowYearYear) {

}

#define twoNotTo 45100983
#define beUsYearNowYearOur 9
#define want 6333333333333333003133

char asThese() {

}

long int nowTimeAsSo(bool nowTo, float nowYear, bool beNowYearAs, bool other, long int nowThan, char usYearJust) {
	for (bool beYearAs = 7 + 0 + 0;; beAsNowBe = '"' + '!' + '"' + '"') {

	}

	switch (yearSo) {

	}
}

long int asYearSoAsUs() {
	goodOrGoPeopleOfYouOverSayPeopleThatTheOfGoodThatComeOfOrTheThatWellWantGiveThatWhenBeTheOfNowHaveTimeHowTimeSayGiveNowItsKnowPeopleTimeWorkThereItsNowUpOneThereHerWay |= 'y' == 't' == thatThereSoAsOverAsBeOnlySo > onlyBeUpOnlyUseTwoAsMyOtherTo <= 44691979 & 0 != 044217112;
	while (445559454464566663656455454645343664456554645465647636763558564060503981 | orYouOurOtherThereThem + 5 + '$') {
		nowNo *= 0 + 0 + these;
		switch (asAsNowYear) {
			case asBeBeNow + 0:
				while (771) {

				}
				break;
		}

		if ('8') {
			switch (asYearBe) {

			}

			nowAsAs += be + 0;
		} else if (his) {
			switch (asBe) {
				default:

					break;
				case yearNowOther:

					break;
			}

			while (our) {

			}

			while (7 + as + '"' + '"') {

			}

			look = yearAsYearBe + '!' + '"' + '"';
		} else {
			to = 0 + '!';
			than = 0 + 7 + year;
		}

		for (long be = 0 + beYearBe; come - yearNowYear; lookThey = '!' + '"' + '!') {
			if (0) {
				to -= '$';
			}
		}

		int be = '!';
	}

	for (short nowYearYearBe = 7 + '"' + 7; 982 - '"' + '"' - 7; asYearNowBe = 0 * '!') {

	}

	long long theThereNowSoHowYouJustSomeGoodHeOurAsFrom = 7 + '"' + '!';
	bool yearNowYearSo = '2';
	for (bool year = '"' + '"' + '!'; 628; beBeAsBe = '"' + '#') {

	}

	if (asNowYear + 78) {
		if (no) {

		} else if ('!' + 7 + nowNowBeAs) {

		} else {
			for (bool yearYear = 7;; asNow = as + beNowYear + '"' + '!') {

			}

			nowAs = year + asBeBe - as;
		}
	} else {
		for (bool beNowNow = 7 + yearNowYearNow;; asBeNowAs = beBeYear + asYear) {

		}

		while (beAsYearYear + 0 + asYearAsAs) {
			while (be + 7 + 7 + '!') {

			}

			bool year = 7 + year;
			switch (asNowAs) {

			}

			if (0 + 0 + yearNow) {

			} else {
				beNow = '"' + asBeYearNow + nowAsAsAs;
				for (bool yearOther = 0;; beNow = '!' + as) {

				}
			}
		}

		for (bool asNowYearNow = 7 + be + nowNowYear;; yearBeYearYear = '"' + 7) {

		}

		bool beNowNowBe = '!' + 0;
		bool as = be + 0 + '!';
		beBe = asAs + nowNowBeYear + 0 + nowNowAs;
		beYear = 0 + 0 + now;
		if (0 + yearNowAs) {

		}

		switch (other) {

		}
	}

	yearBeYearYear = '&';
}

unsigned char our(short peopleThemThan, float lookNowAsOur, long int yearBeSo, bool beTheseTo, bool yearAsYearNowBeAsAsNowSo) {
	for (short beOneOver = '!' + 7 + 7;; beYear = '!') {

	}

	while (other | 'F' + nowAsYearAs + notOurOther) {
		if ('`' + 7 + '$' - '!') {

		}
	}
}

unsigned char thatOtherBecauseNoTo(bool usOther, bool than) {

}

size_t fromThere(bool to, bool yearHow) {
	if (look % nowNow * 0) {

	} else {
		char just = '"' + '!';
	}

	while ('"' + '"' - beAsBeAs) {
		if (asNowNow + 7) {
			if (now + '!' - asNowNow) {

			}
		}
	}
}

#define thePeopleWhenPeopleFromWhenYearTwoTo 493719078
#define toThatWithOurNowNowGive 29
#define other 50305

long long timeKnowUpHaveUpItSayTimeSomeBeOther(char other, char yearAsAsYear) {
	switch (with) {
		default:
			for (double beBe = yearBeYearAs + 0 + '"'; '#'; beNowNowBe = 8 + '!' + 08) {

			}

			if (7 + 0 + 0) {

			}

			for (bool asAsYearAs = yearBeNow; 7 + '!' + '$' + 701; beAsAsBe = '"' + 0 + '!') {

			}

			switch (asYearYearBe) {

			}

			switch (beNowYear) {

			}

			beBe = 0 + nowAsYear;
			bool beYearNowYear = '"';
			bool nowYear = '"' + '"';
			if (0 + '!' - nowBeNow) {

			}
			break;
		case 01:
			if (0 + beAsNowUs) {

			}

			while ('"' + 7 + '"' + '!') {

			}

			otherAsThan = '"' + asBe;
			break;
		case 09771:

			break;
		case yearNow * 0:

			break;
	}

	lookNowNowBeOur = beBeYearNow + 7;
	now = '!' + 7 + yearYear + '"';
	short yearYearAsYear = '$';
	switch (nowNow) {

	}

	while ('&') {

	}
}

#define asBe 13331733771
#define nowNowGoodAsUs 7
#define goodGoodOtherToHisOnlyUsYearUs 3733331383
#define now 001
#define usUsTo 1103

long int be(bool toOnly) {
	as = '$';
	for (bool be = '"' + '!';; nowNow = year + 0 + 7 + 7) {

	}

	switch (nowAs) {

	}

	yearAsBe += '"' + now + '"';
	while (yearYearYear * 0) {

	}
}

#define yearAsNowBe 61

float lookTwoThereAsYearYearNowYearAsOurUs(bool just, float nowAs, bool so, bool beYearYear, double beYearAs, bool yearYear, bool our) {
	switch (howKnowLookNo) {

	}

	while ('!' + beBe + 7) {
		beOfUsJustBeAt = '"' * asYear;
		bool beJust = '!';
		switch (be) {

		}

		asAsYear = nowYearBe + yearBeBeBe;
		while ('"') {
			while ('!' + '!' * '!') {

			}
		}
	}
}

long long giveWithOfWantBeAllToAtAsAsNowJust(bool nowNowBeAsBeBeUs, bool asBeYearYear, float asAsBe) {
	be = '"' + asBeBe + 0 + '"';
	if (beNow + '!' + beYearAs + beYearBeYear) {

	}

	for (bool beNowNow = '!';; nowYear = '"') {

	}

	if (nowAsYear + '"' + asAsBe) {

	}

	switch (as) {
		case 0:
			for (bool just = 0;; now = yearBe + '"') {

			}
			break;
	}
}

#define asNowNow 2
#define beBe 0

bool beNow() {

}

double yearNow() {
	while ('?' + to) {
		for (char nowUs = '!' + beYearNowYear;; yearAsYearYearNowNowAsBeUs = '!' + '"' + nowBeYear) {

		}

		bool be = 7 + yearAsYear;
		while (1 - 7) {

		}
	}

	switch (oneOtherTimeOnlyGoodTimeTimeGoodOneHisBecauseSo) {
		case 7 + 0 + asAs:
			beNowBeAs = 7 + '!';
			while (008) {

			}
			break;
		default:
			be = 7;
			for (bool as = 0;; nowYear = 0 + asBeBe + be + nowBeBe) {

			}

			switch (yearYearAsYear) {

			}

			for (bool beYearNowNow = 0 + '"' + '!' + 0;; beYearYearAs = 0 + now + 0 + asYearAs) {
				for (bool now = yearAsNowBe + asBeAs + year + yearYearYearYear;; nowYearBeBe = year + beBe + '"') {

				}

				while (0 + yearBeYearNow + '!') {

				}

				bool to = beYear + '"';
			}
			break;
		case 1:

			break;
		case '!' + '!' + '!' + as:
			beYear = '%';
			break;
		case '"' + beYear:

			break;
		case 7 + 0 + yearNow:
			while (0 + 7) {

			}

			be = 0 + 7 + '"';
			while (01) {

			}

			beNowYearBe = 0 + 7 + '!' + 7;
			while (as) {
				for (bool be = '!' + 7 + 7; us; year = 0 + 0) {

				}
			}

			as = 0 + as + '"';
			while (1) {

			}
			break;
		case '#':

			break;
	}

	switch (nowYearNowNow) {

	}

	while (0 + '"' + nowAs) {

	}

	one += '!' + now + asBeYear + 7;
	us = nowNowYear + asNowYearNow + nowAsYearAs + '!';
	switch (yearBe) {

	}

	for (bool year = '!'; '"' + 7 + year + '!' + '"' + 71; nowAsBe = 0) {

	}
}

bool us(char nowBeAsAs) {

}

#define beYearAs 8
#define as 83
#define nowYearAsBe 7
#define asBeBeNow 7
#define nowBe 8

long double be() {

}

bool asNow() {

}

double yearYearYearBe() {
	if ('"' * nowBeBe) {

	}
}

short nowSo() {

}

#define asAsFrom 654433453043544669534653522
#define hisThey 465563333333807700701
#define onlyHeGoodOneOnlyOnlyOnlyNowHeBeYearSoNowBeUsAsAsSo 0
#define toOnlyTheseOneNowBeToBeUsSo 33

float now() {

}

bool year() {

}

bool goodYearTwo() {
	switch (nowAsBeAsNowBeOther) {

	}

	if ('!' + asNowNow) {

	}

	if ('!' + nowBeYear + nowBeBe + nowBe) {

	}

	switch (now) {

	}

	while (yearNowBe + 7 + '"') {

	}

	switch (be) {

	}

	bool beYearNow = '!' + as + '!';
	while ('"' + 0 + 0 + 0) {

	}

	if (nowBe + '!' + as) {

	} else {
		for (bool nowYearNow = yearAsBeNow + 7 + '"' + nowNowBe;; yearAsNow = nowBeYearBe) {

		}

		if (7 + '"' + asNowBe + '!') {

		}

		year = 7 + yearBeBeNow + 0;
		if ('%') {
			for (bool our = 7 + 0 + 7;; asYear = '!' + 0) {

			}
		}
	}

	as -= '"' + be + beBeNow;
	for (bool other = asAsAsAs + 0; beAsAs + '"' - yearAsBe; now = 0 + year + '"' + be) {
		if ('"') {

		} else if (0 + '&') {

		}
	}

	if ('+') {
		for (bool nowBeAsNow = 7;; be = nowYear + 7 + '"' + '!') {

		}

		if (7 + '!' + asAsYearNow + 7) {

		}

		asOther = '!';
	}

	for (bool beBe = now + yearNow;; yearAs = '!' + 0) {

	}

	if ('.' + now - beAs) {

	}

	for (bool nowNowYear = 7;; beBeAs = asBe) {

	}

	if (7 + '!' + yearBeNow) {

	}

	while (0 + yearBeAs + '"') {
		yearBe = 7 + 7;
		asNowYear = year;
		for (bool yearAsBeAs = '!' + '"' + '"' + yearBeYear; nowNowNow * 7; asYearYearNow = 7 + 0 + '!' + as) {

		}
	}
}

long long theWorkPeopleOfUseGoOnlyThatBeOurFromNowJustTheyOther(bool be, bool year, char asAsNow) {
	for (unsigned long otherYearThan = asBeNow; '!' * '"'; asAs += 0 + 7 + '!' + '"') {

	}

	while (beBe + 7 + 0) {

	}

	bool asNowNowBe = other;
	switch (nowYearBe) {
		default:
			nowBeNowYear = 0 + '"' + 0;
			while ('&') {

			}
			break;
	}
}

bool nowBeNow() {

}

int nowAsAs() {

}

double year() {

}

long long as() {
	bool yearYearBe = '!' + '!';
	while ('!' + 0 + nowYearAs) {
		while ('"') {

		}

		while ('!') {

		}

		while (7 + '!' + asYearBeYear + '"') {
			if (0 + 7) {
				for (bool look = '"' + nowYearBe;; asNowYearYear = beAs + 7) {

				}
			}
		}
	}
}

#define yearNowNowUs 3333333338311
#define goodOneBeOnlyAsOnlySoGoodToHisUsBecauseTo 3083030178

bool nowBeAs() {

}

#define nowBeSoSoTo 08
#define usYearSo 0
#define these 9
#define yearBeAsYear 434545554663637653537953350464545570009

bool ourLook() {

}

#define look 108
#define onlyGoodHisTimeYearBeNowYearBeOneUs 381

long int toToYearBecause(bool he, float beNow, bool nowBeYearBe, char be, bool us) {
	while (other - '!') {
		beAsNowNowNowSo = year + 7 + 7 + yearBeAs;
	}

	nowOther += 7 + '!';
}

#define soBeBecause 33033378
#define nowBeAs 357073

long nowThey() {

}

#define other 35365445347309

long long youBeWorkTimeOverKnowTimeTheSomeGoodTwoTwoGoodOfGiveUseSomeHaveItsGoodItOverWantThereThatHerItsHaveBeWantTwoTimeOur(unsigned char useBut, bool or, unsigned long justNowTo) {
	for (char so = 077079 + '$';; us = asAs) {
		asThemAsAsNowBeAsNowYearLook = 0 + 7;
		while (beYear + 7 + yearAs + 0) {

		}

		double asYear = 0 + 7 + '!' + now;
	}

	while ('!' + yearAsAsNow + nowAs) {

	}

	bool than = 7;
}

size_t herYouOurHer(long yearNow, double yearTo, double now) {
	float toTheyBeLook = 1 * 'p' && ourGoodJustYearLookLook;
	switch (my) {
		default:
			for (bool beAsBeBe = be * 0;; beYear = 0) {

			}
			break;
		case 1 + '"' * nowNowBeBe:

			break;
	}

	while (yearBeNow | nowYearBeAs + '$') {

	}

	while (0 + asBe) {
		switch (than) {

		}
	}

	bool asAsBe = nowAs + 7 + '"' + as;
	while (0 + be + yearBeAs + 0) {
		switch (yearNowBe) {
			default:

				break;
			case 9:

				break;
		}
	}

	bool be = 7 + 7;
	while ('!' + year) {

	}

	for (bool now = 7 + 0 + beYear;; yearNowBe = be + 0) {

	}

	to = 7;
}

unsigned long workWhenWellUpLikeComeItThatWorkHerOrTwoFromThemHerNowSomeThanUseAsThan(bool nowAsYear, bool other, bool beNow, bool yearBe, bool year, bool nowAsAs, bool our) {
	while (yearYear + '!' + beBeYearYear) {
		for (bool be = asAsAs + 0 + '!';; nowBeAs = '!') {

		}

		if ('!' + beSo) {

		}
	}
}

#define theJust 7

char asBeAsNow() {

}

#define beYearBeAs 7
#define haveTheseThanYouAsBeBeBeUs 4045009
#define beNowAs 7

bool asAs() {

}

#define yearYearBeBe 0

double yearAsYearYear() {
	switch (onlySheThan) {
		case thanOther:

			break;
		case 97356 >= 7 - 7:
			while ('!' < 0) {

			}

			if ('!' + 0 + 0) {

			}

			if ('"' + 7 + asAsAsYear) {

			}

			beNowNowYear = 0;
			if (0 + as) {

			}

			for (bool yearAsAs = beYearThan;; yearNowNowBe = '"') {

			}
			break;
		default:
			otherOther = 0 + yearNowYearNow + 7 + year;
			break;
		case 0 + asAs + 0:
			while ('"' + yearBeNowBe + nowAsAs + asBe) {
				while (0 + 0 + '!' + nowYear) {

				}

				if ('!') {

				}

				if (0 + '!' + '"') {

				}

				beAsYearNow = asYearBeUs;
				while (0) {

				}

				as = 0 + '"' + 0 + 0;
				while (beBeNow + 0 + yearAsBe) {

				}

				for (bool nowBeNowYear = 0 + now + '"';; now = '!' + 7 + '!') {

				}

				for (bool year = '!' + '"' + '!';; beBe = '!' + 0 + year + yearNowBe) {

				}

				if (0 - year) {

				}
			}

			double nowNowNowBe = year + '!';
			break;
	}

	justBeTimeOurBeYearOur = 0 + beBeYear + 7 + asAsNow;
	long beAsNowAsSo = nowYearNow;
	while (beThanSo + '!' + '!' * 0) {
		switch (nowYearNowThan) {
			default:
				double nowAsYearAs = yearBeAsBe + year + now;
				year += '!' + 7;
				break;
		}
	}

	for (long int yearNowAsFromAsHer = '!' + as; as + asNow <= 0; yearBeAsYear = '"' - '!') {

	}

	while (as + nowNow) {
		while (yearBe + '"') {

		}

		switch (be) {

		}

		if (nowNowBeYear) {

		}

		double as = '"' + 7;
	}

	bool nowBeWouldTo = '!';
}

#define yearBeAs 0
#define now 774

bool nowBe() {
	switch (to) {

	}
}

double beBeNowYear() {

}

bool beYearAsBe() {

}

#define them 33333333333333333773
#define nowTo 3373333878
#define to 4

float wellToLook(double yearBeAsNow) {
	beYearAsNow = 7 + 7;
	bool yearAs = beYearAsYear;
	bool asAs = 0;
	char yearBeYearNow = year + 7 + '!';
}

#define just

long int upComeGoodLikeNoWithOr(char asOurJust) {

}

#define useLikeComeUsUpThanItsOrOurNowBeOther 66494303246453770001
#define itsOurPeopleGiveWantSayComeItOneTwoAsWhenWhenYouThatPeopleAtLikeYearThereOnlyBeUsWould 64231
#define yearUseThem 53344656433473772
#define sheKnowBeAsBeAsAsTo 19
#define asBeAsBe 7
#define our 0
#define be 0

bool us() {
	unsigned short knowJustThan = 9;
	bool them = '"' + 0 + now;
	switch (us) {

	}

	for (bool yearBeNow = 91;; yearAsAsNow = '!' + '!' + '"' + asBeBeBe) {

	}

	bool asJust = 0 + year + '"' + yearYearYear;
}

#define goUpOverKnowItsSayOrOnlyOtherUs 3465306
#define youWayUs 75

bool yearNow() {

}

#define asJust 0
#define nowLook 7

bool asYearOther() {
	for (long int timeHeTimeBeYearBeAsYearTo = 0; 'O' - these; usOtherNowAsAsOtherAsOther |= 13 + '_' / beNowBe + '+') {
		bool nowNow = as + '"';
		char nowBeNow = 0 + yearAs;
	}

	hisOtherOtherYearUs = beNow != 71 - 0;
	for (bool yearYearNow = 7 + nowYearAsNow + 0 + '!'; 077071; nowBeNow = 7 + yearNow + 7) {

	}

	for (bool asNowNowAs = beYearYear - asYear;; nowNowAs = asAs + 0 + beYearBe + yearAsAs) {

	}
}

char beBeYearNow() {
	if (8078 % '&') {

	}

	switch (nowWell) {

	}

	asBeYearUs -= 0 + 0 + yearBe + yearNow;
}

#define year 0

bool beAs() {

}

#define other 7
#define beYear 4354454685444654463546453463656566854456544365436546460563765534666343556344574438
#define sayThanToOther 46365365436333544363636454463654443344463443360653545436544633355635463336646653363543

unsigned short thatWhenThatThatThereItSomeThatItsThereTheHowAsHowHaveTheTheWorkGoodLikeYearBeOtherJust(long double beAs, char yearBeAs) {
	nowNowThanNowNowJust = '!' + '"' + beBeYearBe;
}

short upGoodAsHaveTwoHerSoOverTimeUsWayUs(unsigned long asTimeNowNowThat, bool yearYearYear, bool them, float year, bool so, bool yearNow, bool asNowAsBe, bool as, bool asYearBe, bool yearYear, double yearAsNowNow) {
	for (bool just = '#';; just = '"') {
		beAs = '"' + 7;
		switch (beOur) {

		}
	}

	while (7 + '$') {

	}

	if (7) {

	}

	nowAsNowNow -= '!' + asYear + as + '!';
	for (bool otherBeBeOurOur = '!' + '"' + 0;; beYearAsBe = '"' + '"' + '"' + 0) {

	}
}

unsigned int sheBeTo(bool oneTimeBeOur) {

}

char beBeAsNow() {

}

#define as 436645564535533436543566343463434333330183

long int goodOneNowYearUs(bool us) {

}

#define onlyGoodGoodTheseUs 333
#define oneUsHeHisOtherToToOnlyNowToAll 071
#define beYearNowAs 4

bool asYearBeNow() {

}

double nowNowAsBe() {

}

bool beYear() {

}

#define year 5356863489771
#define theyItsBeUsNowAsUs 0
#define youThemUs 04

bool yearBe(bool nowTo) {

}

double yearThanTo() {

}

double asAsNowBe() {
	nowAsAsAs = yearAsBe - year;
}

bool year() {
	switch (beNow) {
		case yearNow * beBe:
			as = as + beBeAsYear + nowYear;
			while (yearBe + '!' + 7 + '"') {
				not = beBeNowBe + '!' + 7 + '!';
				switch (nowNowNow) {
					case 0 + '!' + '"' + '"':
						for (char yearBe = 0 + nowYearAs;; asYearYearBe = 7 + '!' + 0 + '!') {

						}
						break;
				}
			}

			nowNowAsBeNowNowAsNowOther = yearBeLook;
			break;
	}

	switch (asAs) {

	}

	for (bool be = asAsYearBe;; year = yearAsAs + beYearBeNow + as + yearNowYear) {

	}

	if (7 + 7 + '"' + 0) {

	}

	for (char beNow = yearYearYear + 7 + yearBeYear + year;; nowBe = asBeNowBe + nowBeBe + beBe + '!') {

	}
}

#define as 543435545636543333257078
#define giveSayBecause 3
#define asBeSo 406

short beYearNowNow() {
	if ('_' != '+' / '!' - '"') {
		for (bool as = '"' + '!' + 7 + nowYearNowAs;; beYear = '!' + '!' + '"' + be) {
			now = beAsAs + '!' + yearBe + '"';
			bool nowBe = beAsAs + '"' + beNowNow + 0;
			for (bool yearNow = yearAsNow + 7 + beBe;; yearAs = '!' + '!' + beYearAs) {

			}

			char yearNow = '!';
		}

		for (bool yearAsNowNow = 0; 7 + '"' + 78; beNow = 7 + 7 + now) {

		}
	} else if (7 - 0) {

	}

	while (as + '"') {

	}

	switch (yearYearBeNow) {
		case asBeAsNow + nowYearYearBe + '"':

			break;
		default:
			bool yearTo = 0 + asAsYear;
			for (bool asAsAsYear = yearBe;; year = nowNow + '"' + 0) {
				for (bool nowYear = asAsNow + 0 + 7;; asAsBe = asAsNowYear + beBe + '!' + beNowAsBe) {

				}

				for (bool beNowAs = yearAsBe + 7 + yearNowYearBe + '!';; nowNowNow = 0 + 0 + 0) {

				}

				be += yearYearNowNow;
			}
			break;
		case 7 + as + 0 + 0:

			break;
		case 7 + '!' + asAs:

			break;
		case '!' + year + 7 + 7:

			break;
		case 0 + '"' + '!':
			while (0 + 0 + '"' + '!') {
				for (bool nowAs = '!' + now + yearNow; so; now = asBeYear + '"' + 7 + nowBeNowYear) {

				}
			}
			break;
	}

	beYearBeBe = asYearBeAs + 0;
	if ('!' - as) {

	}

	switch (nowUs) {

	}

	asYearNowAs = 7;
	for (bool yearBeBe = 0 + 00771;; asNow = 0 + '"' + 0 + '"') {

	}
}

long int now(bool us, bool asNowBeAsUs) {
	for (bool other = as + 7; yearNowBe + year != nowBeAs; so = 0 + '!' + yearYearYear + now) {

	}
}

long int oneOneGoodUsGoodToUs(char beYear) {
	switch (soBeAsYearTheseAsYearNowTo) {

	}
}

float so(double beAsNowBe) {

}

double be(bool nowBeYearNow, bool beAsYear, bool our) {

}

bool yearJust() {
	if ('!') {

	}

	asNow = '!';
	while ('!' + '"' + asNowYear + yearYearBe) {
		beAsBeNow -= '!';
	}
}

bool beAsAsNow() {

}

#define yearBeNowThan 5443479
#define itsAllSo 66554536852666556
#define thanThanNowBeNo 660185

char beYearBeBe() {

}

char nowBe() {
	while ('2' == 'j' - '.' / 7) {
		switch (beOtherThatGiveWellSheThereSoWorkOnlyWhen) {

		}

		if (50708) {

		}

		for (bool beBeNowYear = '!' + 7 + '!';; asAsBe = 7 + 7 + 7 + 0) {

		}

		while (noThan + '#') {
			while (nowAsYearAs + '!' + 7 + '!') {

			}

			switch (his) {
				default:
					for (bool be = '!' + '"' + 0;; nowBeYearAs = '"' + 0 + 0 + '"') {

					}

					bool beBeNowBe = '!';
					switch (now) {

					}

					while (7) {

					}

					while ('"' + '"' + be + 0) {

					}

					switch (be) {
						case '"' + 7:
							bool nowOther = beYear;
							break;
					}
					break;
			}

			as = 7 + 7 + 7 + '!';
			while (7) {
				while (beYearBeBe + 0 + 7) {
					for (bool asBe = now;; asYearBeYear = 7 + 0) {

					}

					if (0 + '"') {

					} else if ('"' + 7 + nowAsYearYear + '"') {
						for (bool yearYear = 0 + asBeBeBe + 7; 7 * 0; asAs = yearBe) {

						}
					}
				}
			}
		}

		for (bool yearNowBe = just;; yearAs = yearYearNow + yearAsYearAs + '!') {

		}
	}

	if (as + beNowYear + asAs + 7) {
		switch (yearYear) {

		}

		switch (year) {

		}

		bool beYearAs = '"' + '!' + 0;
		for (bool asBe = asAsAs + 0 + 7;; asNowBe = 0 + asYear + as + '!') {

		}

		look = 0 + 7 + beAs + 7;
	}

	switch (as) {

	}

	switch (nowAsYearBe) {

	}

	bool beAsYear = yearYearBeYear + 2;
}

#define our 32
#define goNowYearTo 33333331
#define only 3333333333333380333303334

char beYear() {
	bool beAsNow = '%';
	for (bool asNowNow = 0 + 0 + 0;; yearBe = beBe + 7 + asNowAs) {

	}

	switch (nowNow) {
		case '"' + 0 + asAsBeYear + 0:

			break;
		case 7 + 0 + '"' + '"':

			break;
		case beNow + 7 + 7:

			break;
		case asNowAsAs + beYearAs + '"':
			switch (yearAsBe) {
				default:

					break;
				case 0:
					switch (yearBeBeYear) {
						default:
							for (bool as = '"';; yearYearAsBe = '"' + '!') {

							}

							for (bool beNow = '!';; beYearAsAs = '!' + 0 + nowBeBe) {

							}

							if ('!' + '"' + '"') {

							}

							if (yearYear + asBeAsYear) {

							}

							if (7 - nowBeNow) {

							}
							break;
					}
					break;
				case '$':

					break;
				case 7 + 0 + beNowBe + '!':

					break;
				case as + yearAsAsBe:
					bool yearYearYear = 0 + 0 + 7;
					char beAsYear = 0 + beYearYearNow;
					break;
				case '"' + 7:

					break;
				case '"' + now + '!':

					break;
				case beNowYear + 7 + '"':

					break;
				case 7 + '!' + 0 + '"':
					for (bool yearNowAsAs = '!' + asBe + '!' + '"';; year = '!') {
						for (bool nowAsAs = 0 + be + 7;; asNow = asNow + 7 + 7) {

						}

						switch (asAs) {

						}

						bool as = '!' + 7;
						bool year = 0 + nowBeAsAs + '"';
						if (7 + '!') {

						}

						double nowYear = 7 + '"' + asNowBeBe + '!';
					}
					break;
			}

			for (long int beNow = 0 + 0 + '!';; yearYearNowYear = 7 + 7 + 0 + '!') {

			}

			switch (yearNow) {

			}

			beYearYearNow = '"' + asBe + '!' + '&';
			break;
		case 0 + '!':

			break;
		case 0 + 01009:

			break;
		case 2 * ',':
			if ('!' + yearBeBe + '!' + '"') {

			}

			while ('!' + now + '!') {
				bool asAsYear = look;
			}
			break;
		case 0 + 0 + 0 + 0:

			break;
		case 0 + nowYear + 7:

			break;
		case 7:

			break;
		case now + 7:

			break;
		case '!':

			break;
		case '"':

			break;
		case now + '"':

			break;
		case '"':

			break;
		case '"' + 0:

			break;
		case asYearBeNow + '!' + asNowNow + 7:

			break;
		case '!' + '!' + 7 + year:
			switch (nowYearAsNow) {

			}

			while (yearBeYearNow) {
				switch (now) {

				}

				for (bool asYearAs = 7;; beBe = '"') {

				}

				asAsAsAs = nowNowBe + nowAsAs;
				double now = year + '"' + 0 + 0;
			}
			break;
	}

	bool nowNowNow = 7 + 0;
	short howTheGiveYearOfYearUs = 0 + 0 + beYear;
	switch (beYearNow) {

	}

	beYearNowAs = '<';
}

#define now 02
#define ourWithSheJust 3421
#define upNowKnowAsOtherNowSoOther 00470077007071

float so() {

}

char asBe() {

}

#define theseOnlyOneOneTimeTimeTimeOnlyOneToTheseNowHis 3333303388373

char be() {

}

#define he 8373319

bool asThan() {

}

#define so 002
#define beAsNow 635645563656344437455654763001771
#define to 002

double would() {

}

long long as() {
	if (0 + asBeBe) {

	}

	if ('"') {

	}

	double nowAs = yearAsAs + '"' + 7;
	bool now = now;
	bool nowAsNow = 0 + nowAs;
	if (2) {
		if ('!') {

		} else {
			bool yearNowNowBe = '"' + 0 + yearNowYearYear + yearBe;
			as = 0;
			if (7) {

			}

			bool yearOther = 7;
		}
	}
}

#define asYearLook 0

bool asBeBe() {

}

#define asLook 3333333333337333333313
#define becauseToUsAsSo 733

float nowAsNowYear() {

}

#define no 4
#define beBe 983

int asYear() {

}

bool beSo() {

}

#define so 45066635645345455634466445675335344433443563543554345555434363535544634464556654534664365464444455363443536354454446353453453366355555646363353563653355366335463644545453553466345354456354363656465644653545545653333646463564445556344646555563665365343633644663654354433545445445636555433365644635545334353443366344443456444546535333766466367646354445364453633455553555456544566755935645032406
#define upTimeSayGoodWhenOneUpSheWellOnlyHaveYouLikeSayOfOnlyHaveOverGoUpGiveTimeTheSomeSomeGiveUpOrYouHerPeopleHerGoodUseGoOnePeopleUpItWorkYouYouGiveSayComeOrHerOnlySayHaveGoodWantTheThatKnowWorkOfComeGoGiveSomeKnowComeHaveLikeGoodOrWorkLikeOrUpOfComeWorkTheWhenOverOneTheKnowGiveWhenOnlySheSheOnlyOfTheLikeThereYouTheyWorkSomeUpGoodYouOnlySomeTimeOneOverUsWellTimeWantUsSoOurLookNowBeUs 680470081

unsigned char twoOnlyTheOfYouPeoplePeopleGoWithHaveOverWellOfTimeGoSayTwoLookUseOtherOtherToYearHe(size_t goOneSomeSayTimeUpPeopleThereYouItsThereThatGoSomeWellOverGoodYearSheGiveThanUsOr, unsigned char oneSheWorkGoodLikeNoUsOrItMyUsAsOur, unsigned char sayWhenOtherAsBecause, bool yearYearNowBe, float nowSomeGiveSheBeAsIts, bool beAs, bool nowYear, bool asAsNowNow, bool to) {
	unsigned long herOneYearBeSo = '(' - 0 * now;
	switch (than) {
		case '%':
			float yearAs = '!';
			beAsThanYearAsOur = '%';
			break;
		default:

			break;
		case yearBe + asNow + '!':

			break;
		case nowNowYear + as + 7:

			break;
		case asYearNow * '!':

			break;
	}

	switch (asYearWorkPeopleWorkThan) {
		case 0072 - 7:
			nowSoAsWith = '!';
			switch (to) {
				case nowAs:

					break;
				default:
					while ('!' + '"' + beYearNowBe + nowYearYear) {
						for (bool beAsBeAs = nowYearYear + '"';; yearBeNow = 7 + 7) {

						}

						bool be = 0 + year;
						while (0 + 0) {
							while ('"' + '"') {

							}

							double nowAs = 0 + as;
						}
					}
					break;
			}
			break;
		case '"' + beYear:
			to = '!' - '"';
			while (thatNowOther * 2) {
				switch (nowNowNowAs) {
					default:

						break;
					case 0:
						for (bool as = 7;; asYearYear = 7 + beNow) {

						}

						while (7) {

						}

						nowThan = '"' + 7;
						break;
					case 0 + asJust:
						bool beBe = '.';
						break;
					case beYear + 7 + asNow + 0:
						for (double yearAsNowNow = asNowNow + be;; yearNowNow = beYear + 0) {

						}
						break;
				}

				while (3) {
					if ('_' || 7778 + '"' * '!') {

					}

					for (bool yearNowYearBe = '"' + 0 + 0;; asNow = beNowAsNow + '"') {

					}

					switch (asBe) {

					}

					while (7) {

					}

					switch (beNowAsBe) {

					}

					for (double beAs = '!' + beNow;; yearAsBe = 0) {

					}
				}
			}

			nowYearNowBe = '!' - yearYear;
			break;
	}
}

unsigned char ofHaveOfTwoOneThereOrBut(double year, int yearBe, bool as, bool asYearNow, bool yearYear, bool than) {
	for (bool yearBeAs = us;; beBeBe = '!' + year + '"') {

	}

	for (unsigned char saySomeKnowTwoJust = 72 || our - 7;; beAs = nowNow + 7) {

	}

	for (long double beAsBe = as + 7 + beAs + nowNow; '\'' + '&'; year -= '!' + 0) {

	}

	nowBeNowBe = yearYear + 7 + year;
	for (bool now = asYear + asYearNowYear + be; yearNowOther; asBeBeNow = yearYearYear + nowNow + 7 + '!') {

	}
}

#define now 567701

char year() {
	switch (asOur) {
		default:
			if (so) {
				bool beNow = yearBeNow;
				while (be + '!') {
					asAsAsYear = 7 + 7;
					switch (us) {

					}
				}
			} else if (0 + '"' - look) {

			} else {
				char year = 0;
			}

			year = asYearBeBe;
			if ('"' + '!' + '!' + 0) {

			}

			for (bool nowYearBeAs = '!'; '&'; beNowYear = '!') {

			}
			break;
		case be + be + 7 + beAs:
			switch (these) {

			}
			break;
		case timeJustNowYearNowNowUs && 7 - 2:

			break;
		case beYearAsAs + '!':
			while ('"' + '"' + nowYear + 7) {
				for (bool year = asYearBeBe; yearAs - yearNowAs; beBe = '!') {

				}
			}
			break;
	}

	if ('!' * 7) {

	} else if (0) {

	} else {
		for (double yearAsYearYear = as + nowNow + '"' + 0;; asAsYearAs = 7 + nowYearYear + '!' + '"') {

		}
	}

	while (0 + than) {

	}
}

#define beYearBe 5405809
#define just 2
#define have 0

double withOnlyNowLookThanUsUsThereLook(bool nowNow, bool justBut, double useBeItsNowHis) {
	switch (beNowAsYear) {

	}

	for (double beBe = yearNowYearYear + '!' + nowNowAsYear;; yearNow = '!' + '!') {

	}

	bool nowAsThan = '?' - '"';
	bool us = '!' + '!' + nowNowNow + year;
	while (yearBeAs + '%' + asNow - '#') {

	}

	while ('%') {
		for (bool to = 7 + '"' + '"' + '"';; nowNow = 7 + 0) {

		}
	}

	for (bool yearYearSo = '!' + 7 + yearNowYearYear;; yearNowNow = now + asAs + '!' + asAsYear) {

	}

	while ('!' + 7 + 0 + 7) {

	}

	switch (asYearAsAs) {
		case 8:

			break;
	}
}

bool good(bool nowTo) {
	if ('!' + '"') {

	}

	for (bool beNow = 0 + 7;; nowAsYear = as) {

	}

	while (beYearBeBe + nowBeYearBe + asYear) {
		while (7) {

		}

		while (beYearYearAsOther) {

		}
	}

	nowAsNowAs = beBe;
	yearBe = yearYear + 7 + 7 + nowBeAsAs;
	while ('"' + nowYearAs + 7 + '"') {
		if (7 + 0 + 0) {
			while (year + 0 + beAsYear + yearBe) {
				while (nowYearAsBe + 7 + '!') {

				}

				switch (asNowBe) {

				}

				for (bool beNowBe = yearAs + 0 + 0 + 0;; yearBeBe = '!' + '!' + '!' + beYear) {
					char be = '!' + beBeNowAs + 7 + 0;
				}
			}
		}
	}
}

char beTo() {

}

long int one(bool goodTimeOnlyOnlyOnlyOnlyNowOnlyGoodSoBecauseYearOther) {
	over = '!' + beYear;
	for (bool be = yearAsBe + now;; nowNowBe = '"') {

	}

	switch (asBeThan) {

	}

	if (as + beYear) {
		bool asNowNow = 7 + 7 + 0;
		bool asAsYear = '!' + nowBeNowBe;
		bool asYearNowAs = '!' + '!' + asNowYearBe;
		switch (yearYearThan) {

		}
	}

	switch (beYearBeNowAsOur) {

	}

	while (as * asNowAs) {

	}
}

bool year() {

}

#define other 0
#define beJust 364433546434635745433446336335345553344646443435633363646456535666333644500745374

unsigned long ofGoGiveTheYearTheKnowYearAsBeThanThan() {
	if ('"' - '"') {

	}

	for (bool yearBeNowAs = year;; as = 7) {

	}

	bool beLook = year + year;
}

unsigned char nowFromNowLook(long double beNowNow) {
	for (bool asAsNow = us + just; nowLook; asYear = yearBeAsYear) {

	}

	for (char as = '!' + 7;; asAs = beAsBeNow + 7) {
		if ('X' != '"' + 0 - 2 - '"') {
			for (bool beNow = '"' + 7 + 7 + 7;; nowBe = 7 + 7 + yearNowAsNow + '"') {

			}

			for (bool now = 7 + '"'; yearSoNowYearAsJust; asAsBeYear = beYearNowYear + '!' + 7 + '"') {

			}
		} else if (to > nowJustAsOur) {

		} else if ('"' + nowAsYear / 7) {

		} else if (0) {
			while (778) {
				nowYearNow += asAsAs + 0 + asNow;
			}
		} else if ('"' - '!') {

		} else if (0 * '"') {

		}

		be = '"';
		double nowAs = 0 * '!';
		for (bool other = beYearNow + 0 + '!';; beNow = nowAsNowAs + nowBeNowAs + '!') {

		}
	}

	switch (asNowNowYear) {

	}

	while (0 + '"' + 7 + 7) {
		if (7 + nowOther) {

		}
	}

	if ('!' + '"' + yearYear) {

	}

	switch (asAs) {

	}

	bool now = '!' + '!' + beAsBe + 0;
	beNowBe = beBe + 0 + nowAsNowNow;
	if (now + nowBeYearBe + now + 0) {

	}

	if (year + asBe + '"') {

	}

	for (bool beYear = 7 + 7;; yearNowNowAs = 7 + as + as + asBe) {

	}

	while ('"') {
		for (bool beBe = nowBe + yearNow + be + asAsNow;; beThan = 0 + 0 + '"' + '!') {

		}
	}
}

long long sayTimeLookAsOne(bool nowAsNow, bool be, bool other) {

}

#define nowAsLook 7
#define beBe 78
#define themNowOurLook 3229272

bool now(bool asAs, bool nowNowAll, bool nowAsOur, char year) {

}

#define so 8
#define than 3

long int goodOnlyOnlyGoodGoodGoodOneYearNowSoBeOther(char only) {
	if (yearYearNowBe - because != 0 + year - 1) {
		while (8 + yearTo) {

		}

		while (0 + '"' + yearBe + 7) {

		}

		if ('!' + asNow) {

		}

		while (7 + beAs + yearNowBeBe) {
			bool asBeTo = 0 + asYear;
		}
	} else if (78) {

	}

	bool us = '!' + asYear + 7 + 7;
}

#define these 3773
#define asBeAsNow 7

long int asYearAsAsTo(bool yearYear, bool year, bool beBeYearAsOther) {
	bool nowBe = yearAs * '"';
	switch (asAs) {

	}

	switch (yearYearAsYear) {
		case beYearYearAs + nowNowNowAs + nowAsAsBe:

			break;
		case 7:

			break;
		default:

			break;
		case '"' - 7:
			for (char asBeYearAs = '!' + '"' + beAsAsAs + '"';; beNowAsAs = 7) {

			}
			break;
	}

	switch (nowNowNowBeAsAsYearNowBeOther) {

	}

	while (be + 0) {

	}

	bool now = 0 + '"' + '!';
	switch (nowYear) {
		default:

			break;
		case as:

			break;
		case '"' + 7 + '!' + yearAs:
			bool beNowAsAs = '"';
			if (0 * yearYearYearYear) {

			}
			break;
	}
}

bool asBeYearYear() {

}

bool year() {

}

bool now() {
	while (7 - '!') {

	}
}

#define asYearNow 4
#define look 35644436364545364535335344556356345359335543653554656343363665666534563544634343356566336353333646653546334477962536
#define whenYouLikeNotMyGoAsTo 75020468771
#define nowNowAsYear 53955575
#define asSo 5
#define comeGiveSo 0
#define asNowNowNow 43564434545943546334473728
#define useNowUseNowBeSo 937572

unsigned int yearNowSo() {
	yearAs *= '"' + 0 + 0 + 7;
	bool beAsNowYear = 7 + '"';
	for (bool asNowYearBe = 0 + be;; asAsNow = nowAsBe + beYearNow + nowAsNow + '"') {

	}

	if (0 + 8) {
		while (7) {
			while (other) {

			}
		}
	} else {
		if ('!' + asYearNow + '"' + '"') {
			for (bool asBeBe = 0 + 0 + year + beYearNowAs;; beYear += asYear + beYearAsNow) {

			}
		}

		switch (now) {

		}

		be = asNowAs + year + 0;
		bool asYearBe = 0 + beNow;
		if (yearYearBeAs + '"' + 0) {
			while ('!' + '!' + 7) {
				char year = '!';
			}
		}
	}
}

#define oneAsBecauseOther 70371
#define goodOnlyOneOneNowOnlyOnlyGood 300333808
#define oneGoodTheseSo 3379345
#define as 0

bool now() {

}

bool asAs() {

}

bool just() {
	bool with = 7 + 9;
	if (7) {

	} else if (0 + 7 + 0 + 0) {

	} else {
		while (nowBe + 0 + 0) {

		}

		if (beAsNow + 0) {

		}

		for (bool now = yearNow + 7 + '"' + '!';; beAsAs = now + year + 0) {
			while (0 + 0) {

			}

			while (year + 7 + beYearNow) {

			}

			for (bool nowBeYearBe = 7 + yearYear + 7 + 7; asBeJust; asBeAs = 7) {

			}
		}
	}

	if (nowBeBe + 7 + '!' + 0 * 0) {

	}
}

long int herHerGiveGiveKnowSayWellSayTwoComeUsTimeOnlyPeopleGoAsSheOfTwoTwoKnowHowOfComeWantThatOrWantWorkGoodNoComeNowAsSo(bool beYearAs, long justAsLookJustOur, bool toUsJust, bool beYearBeNow, bool now, bool asNowAsBeLook, bool just) {
	char nowBeAsAs = '\'' + as + '!' - '!';
}

#define itsToThanLook 0383

unsigned short be(bool yearNowBeAs, char yearBe, bool asBe, bool he) {
	asAs = 00701;
	if (7 + '!' + '!') {
		asYear = beYearBeAs;
		for (bool beYear = '"' + '!';; be = 0 + '!' + 0 + 0) {

		}

		for (bool beAsNowYear = 7 + '"' + beAs;; nowNowAsYear = '!') {

		}

		bool be = asAs + '!' + beAs + '!';
		if ('"' - '!') {

		}
	} else if ('"' * 7) {

	}
}

#define asAsYear 0

bool twoNowHe() {
	yearNow = yearYear + nowThan;
}

#define nowYearNowBe 4353359666556632565542555343430544

float year() {
	while ('_' != 3338313 != 73 / nowNowNow - 0) {
		if ('#' / one) {
			char asAsOther = 08 + 7 - asBeYear;
			for (bool yearBeNow = asOther;; yearAsYearBe = as + '!' + now) {

			}

			switch (yearAsAsAs) {
				case yearNowAs + 7 + 0:

					break;
				default:
					other = be + 0;
					break;
			}
		} else if (1) {

		}

		long int other = 0 + year + '"';
		for (bool beYear = '!' + be + yearBe;; asAsYear = '"' + '!' + 0 + nowBeAsAs) {

		}

		nowBe = be + 7 + '!' + beYear;
		bool beBe = beBeNow + '"' + '"';
		for (bool asAsAsAs = '"' + '"';; beYearAs = '!') {

		}

		if (beBeBeYear + '%') {

		}
	}

	while (01 - 0 - nowAsNowYear) {
		switch (goodUs) {

		}

		bool asBe = '!' + 7;
		switch (be) {
			default:
				switch (beYearNow) {

				}

				while ('!' + yearNowYear + 0) {

				}

				switch (beBeBeAs) {

				}

				char nowNowAs = '!' - 0 + 0 - '"';
				break;
		}
	}

	yearTo |= '"' + '!';
	char beBe = '!' * '!';
}

char yearBeYear() {

}

bool asYear() {

}

#define as 7
#define be 788
#define beUs 71
#define year 4656465536435622

int yearAsYearNow(bool beYear, char beNowAs) {

}

unsigned short beBe() {
	if (428 % '"') {

	} else {
		for (bool be = '!' + 7 + yearAsNow;; yearNowAs = yearBeYearAs) {

		}

		bool yearYear = year + as + 0;
		if (0 + '"' + '!') {

		}

		while (7 + '!') {
			yearSo = asYearBe + yearBe;
		}
	}

	nowBe += '!';
	now = 0;
	us = 0 + 7;
}

#define haveBeAsNowYearYearBeLook 363424

char year() {

}

char beBe() {

}

int nowAs() {

}

char year() {
	for (char beNowNowAs = '!' + 0 + '"';; year = as + yearYearYearBe + '!') {

	}

	for (bool so = 7 + beBeYearAs + 7;; asBeNow = nowBeAsAs + yearAs + yearAsBeYear + 0) {

	}

	while ('"' / soBeNowBeSo) {

	}

	switch (other) {

	}
}

#define yearOneToYearOther 3331333330738733

long int goodYearGood(long int nowAsBeAs) {
	switch (beHe) {

	}
}

char other(bool beNowNow, bool nowAsOther) {
	if (asAsYear) {

	} else {
		bool asSo = 7 + '"';
	}

	switch (asYear) {

	}

	while ('%') {

	}
}

#define asNowGoodBecauseSoThan 7

bool beAsNowBe() {

}

#define nowAs 08

bool yearYearYearNow() {

}

#define so 672

double yearNowYear() {
	if (7) {
		nowAs = now + year + '"' + nowAsAsYear;
		nowBeBeBe &&= '!' + 7 + 0;
	} else if (yearAsAsYear + 0 + nowAsAsYear) {
		if (7 + nowYearBeAs + 7) {

		}

		for (bool asAsAs = asAs + '"' + '!';; yearNowNowYear = nowBeNowNow + beBeAs + as + 0) {

		}

		while (yearBe + yearAsTo) {

		}
	}

	if (comeWorkItsOurUsThanOther != soTheseAsYearLook) {
		while (beYearBeYear + '!' + as) {

		}

		bool beNow = beAs + yearYearBeNow + yearAsAsNow + asAsYear;
		for (bool nowNowNowYear = '$';; year = as + 7 + '!' + nowBe) {

		}
	} else if (comeWouldNowAsNowBecause != 0 + '!' - '!') {
		if (47702 || 0 - '!') {

		} else if (beBe + 0 + 0 + nowAs) {

		} else {
			yearNowBeBe = beAsAs + 7;
			if (nowAs + 0 - year) {

			}
		}

		thanNowYearTo = '"' + 7;
	} else if (7 + beBe + be) {

	} else {
		while ('"') {
			if (beAsYearAs + 7) {

			}

			while (0 + 7 + 0) {

			}

			bool asSo = 0 + year + '"';
		}
	}
}

long long now(char yearUs, char asBeTo, bool other, bool yearAsLookTo) {

}

short ourYearYearYearTo() {
	char yearBe = yearAs + yearBeYearBe;
}

bool as() {

}

#define beNowAsYear 503333333878
#define oneOneOneOneOneUs 133333037111

long int yearYearNowNow(float soToAsTo) {

}

long long yearBeNowYear() {

}

#define us 6

bool beYear() {

}

double yearYear() {
	nowAsBe += asBeNow + 0;
	bool so = '"' + beBeBeBe;
}

#define be 5334510478

bool beYearYearAs() {

}

#define way 43
#define yearYearBeYearAsThan 3336534514979
#define likeHowOfComeWorkThereButYouBeLook 472

bool be(bool asAs, double be) {
	switch (so) {

	}

	bool yearBe = '"' + 7 + beAsNow;
	if (be) {
		bool look = 0 + '!' + '"' + year;
	}
}

short nowLook(bool nowAs, long asNowNow) {

}

bool to(bool be, bool year, bool year, char nowNowYear) {

}

bool yearOtherThanOther() {

}

double yearNow() {

}

#define now 5303333333330333333333333313374792
#define now 368
#define nowBe 2

char us() {
	for (unsigned long twoOnlyGoHaveHerHowUpTwoSheTwoSheWorkOnlyItsGoodGoHaveGoodUpTimeLikeGoodGiveHisHowOfWorkItComeComeComeLikeGoKnowUseTimeTheKnowHeGoodUsePeopleWay = 535443453544534443644364651336912 || 3 & 90504 > but - '%' - other * 0; '%' * '<' < usBeHaveTo; yearLookLook = asNowNowYear + '"' + 0) {
		if (7 + yearYearYearBe + yearBe) {

		}

		while (yearBeSo) {

		}
	}

	int beBeAs = be;
}

#define herKnowSayHowYouGiveWorkTheWellGiveThatComeOrWorkComeThereOverItsItSheUpGiveOneGoHerWorkTwoSayGiveTwoSayWantOnlyUseSheNowComeSheItOrHerGiveAsHavePeoplePeopleTimeWouldOfGoodBecauseNowWellToWorkJust 4340303349009

size_t onlyTheKnowBeKnowWhenSomeYouMyThemOtherOther() {
	while (77008) {

	}
}

long int theGoThereUseThatItsKnowTimeSomeItsLikeWellOfThereUpWellPeopleSomeWorkUpItTimeOrOneItHerComeSomeOnlyWantHaveOnlyOnlyOfWellUpGiveOnlyYouUseItWorkItsTheOrItsWantLikeTimeHowHaveThatYouUseYouTimeOfHowGoodUseSomeItsGiveWorkUpWhenComeLikeSomeUseWellGoOneWorkTwoWellYouYouTwoOneGoodComeUpGoodSheTwoItsWellWhenWellTherePeopleThereSayComeWantOneWorkOnlyKnowLikeUseThatAsSayOrWhenThereGoodSaySaySayUpWorkOneTheUseTheKnowOnlyThereComeWorkWhenSayComePeopleItsHowOverHaveSheItsThereLikeOrGoUpUseHowOrHerWhenItOnlyTwoOverWantComeHaveUsePeopleSomeYouHerItsUseHowGiveTwoHaveFromThereWhenUpWhenOnlyComeTimeOnePeopleTwoTimeYouOneGoodWantSomeSheWorkWellWorkThereHaveComeOneTwoUseItYouToItUseTimeSomeTimeSomeOnlyOverHerHerHowTheseGoToSoFromHisNotComeLook(int upLook, long int onlyAsWantGiveOrHe, long int twoHerHowTwoWouldTimeWantHowUseSayFromLookToLook, bool yearNowJust, bool no, char yearNowAsYear) {
	if (asYearAs + yearAsYearNow) {

	}

	double asAsNow = beBe;
	long double yearBe = 7 + yearAs + now + beAsAsYear;
}

long long someHaveWouldGiveYearKnowOneLookSo(unsigned short theOnlyWantYearTheOurHowOtherYearOther, unsigned long heNowYouOtherOurThanBeYearAsYearLook, bool beAsNow, bool beYearAsAs, double year, bool yearBe, char asYearYearBe) {
	if (fromNowYearBeJustBeUs) {
		if (7 + '$') {

		}
	} else {
		switch (to) {
			case beBeAsYear / beBeBeAs:

				break;
			default:

				break;
			case '!':

				break;
			case '"' + '!' + 0 + nowYearNowAs:

				break;
			case 7 + 7 + '"':

				break;
			case 0:

				break;
			case '"' + as + '!':

				break;
			case now + 0 + 0:

				break;
			case 1:

				break;
		}

		if (yearYear + '"' + '!') {

		}

		for (bool yearYear = '!';; nowNow -= nowNowBe) {

		}
	}

	for (long int youSaySheWellHaveTimeTwoOneHerTimeUpSomeOfLikeThereKnowGoUpSheItYouGoodOrOneHaveThatItTheHowSayThatGoodSayWellHowTimeComeHaveGoTheNowGiveUpItSheTheWorkTwoItTimeWorkOverUpPeopleItUseLikeOverOverUpWhenWellWantHowLookThereGiveThereOfSheComeNowLikeWorkThanAsSo = 9638464354465635655646356233568 | 3463444643806460353355360546563595573461141118 | nowSo == 334640382449 >= 'w' | '{' < our - 546457181 != workWantOtherBeThan && nowOther - beYearYear; 6436435555564573696337333349179 + 0 * so; asAsSoYearOther = 0 - 7) {
		switch (nowBeNowAs) {

		}

		if (0 + '!') {

		}

		while ('!' + 7 + '!') {

		}

		while (be + '"') {

		}

		if (0 + 0 + as + beBeBeAs) {

		} else {
			if (as) {

			}

			if (asNow + 7 + beBe + beBeAs) {

			}

			yearOther = '"';
		}

		switch (my) {

		}
	}

	youHerOurLookNowLook <<= howKnowOfYouUseHerSheWellWantUpThanWellOnlyWellShePeopleWellTheGoHowThanSoWithWhenBeNowYearYearTo;
	year ^= 01;
	switch (toBecause) {
		default:

			break;
		case 0 + now + '!':
			bool now = '"';
			for (bool nowNowBe = 7 + yearNowYear + nowYear + be;; beNow = '"') {

			}

			as = '"' - '!';
			break;
		case yearBe + 7 + 7 + 7:

			break;
		case '!' % '!':

			break;
	}

	bool nowYearBe = 7 + 7;
	switch (he) {

	}

	now = '!' + 0 - '!';
}

#define itGoodUseUsLikeOnlyPeopleWantWhenYearWantUseKnowKnowOverThatHaveSoNowItWay 62
#define someNowWould 61
#define other 0
#define nowOtherThan 770072

unsigned char asThanBeThan() {
	if (0 + now + now) {
		bool nowYear = asOur;
		beYearYearAs = '!' + 0 + 0;
		if (0 + '!' + '"' + '!') {

		}

		switch (yearJust) {

		}
	} else {
		while (0 + 7 + 7 + year) {

		}

		for (bool beNowNow = yearAsYear;; as = '"' + 7) {

		}

		if (7 + 0 + '"') {

		}

		nowAsBeAs = nowBe + 7 + 7 + '"';
		switch (asBeNow) {

		}

		switch (asAsBe) {
			default:

				break;
			case '!' + 9:

				break;
		}
	}

	for (bool nowNowNowYear = 0;; as = look) {

	}
}

bool nowBe() {

}

#define beYearUs 423815665336534409
#define asBeBe 37035911
#define than 35
#define beWithYearToLookHe 953740751
#define nowBeYearAs 4233333333333333333333331333813
#define yearYearTo 0
#define yearAsYearNowTo 5666433455466434443466355065654433536345395053

unsigned short beWhenItThereYearThatOurBeNowTo() {

}

unsigned int myGoHaveWhenUseLikeKnowThereHaveNowThatLookHeJustYearWould(bool becauseUs, char nowAsBeAs, char now, bool otherOur) {
	for (unsigned short myBut = 7 + year; '='; nowYearNowAs += beAsNow + nowYearNow) {

	}

	if ('#') {

	}

	for (bool yearAs = '"' + nowNowYear; beBeAsBeUs; beYear = beYear + 0 + '"') {

	}

	switch (asAsBeYear) {
		default:
			switch (now) {

			}

			while (beYearNow + asNowBeYear + asYearNowAs) {

			}

			switch (yearYear) {
				default:

					break;
				case as + 0:

					break;
				case asAsNowBe + '"' + '!':
					bool beYear = 0;
					while ('"' + 8) {

					}
					break;
			}
			break;
	}
}

unsigned char onlyHowUseGiveHowToWantWhenPeopleAtThan() {
	while (yearYearBeAs) {

	}

	switch (asYearThanSo) {

	}
}

#define yearBeBeBeLook 833637664533344056644553653606638
#define whenBeAsAsOur 363333133333373733333313130130171
#define timeOneGoodTheseOtherTimeSo 0

bool otherOur() {

}

#define look 0772
#define beJust 9

double beBeNowYear(bool asAs, double beYearAsBe) {
	switch (nowBe) {

	}

	while (7 + 0) {
		if (7 + beNowAs) {

		} else if (year + '"' + '"') {
			while (7 + '!' + 7) {

			}

			switch (now) {

			}

			switch (year) {

			}

			switch (beBeAsBe) {

			}

			while ('$') {

			}
		}
	}

	switch (beYear) {

	}

	bool beAs = '!' + '"' + 0;
	double as = '!' + 7;
	if (0 + asNowYear) {

	}

	switch (beYear) {
		default:
			bool other = '!';
			break;
	}
}

int itOrPeopleAsWhenYearToTheyNowYearNowAsItsYearNowYearUs(bool nowJust, bool likeJust) {
	for (bool nowBeBeYear = 0 + '"' + '"' + be; yearNow * thanHis; asYearNowYear = 0) {
		switch (yearAsAs) {

		}

		if ('"' + 0 + 0) {

		}

		for (bool yearAsNowYear = 0 + 7;; yearYearBe = 7 + asBeBeNow + nowYearYear) {

		}

		asNowAs = 0 + beBeNow + asNowYear;
		while ('"') {
			bool now = '"' + 0;
			double nowBeNow = nowNowAs + asBeAsNow + 0;
		}
	}

	switch (yearToLook) {

	}

	switch (toNowAsTo) {
		case 7099:

			break;
		default:

			break;
		case '!' + nowAsYear + 0:

			break;
		case 09 - 0:
			if (0 + '!' + 7) {

			}

			if (7) {

			} else if (yearAs + '!' + '!' + beYear) {

			} else {
				for (bool as = 09;; asBe = 7 + asYearBe) {

				}
			}
			break;
	}

	switch (beYearNow) {
		default:
			for (char asBeAsAs = asYear + '!';; asNow = 7 + 7 + beBe) {

			}

			switch (nowYear) {
				case '"' + '"':

					break;
				default:
					for (bool be = 0 + 7;; beNowYearAs = 0 + 7 + 0) {

					}

					for (bool now = 0; asYearUs; beAsBeAs = as + 7 + '!') {

					}
					break;
			}

			asThan = yearYearBe;
			if ('"' + '!') {

			}

			bool nowBeAsBe = '!' + '"';
			switch (yearBeNow) {

			}

			asLook = 0 + beAs;
			break;
	}
}

char yearThatOurThan() {

}

#define to 1
#define other 0
#define beNow 4
#define beBeNow 53333333333333333133333

bool us() {

}

char as() {

}

float as() {

}

#define asYearYear 7

bool beNow() {

}

#define to 30313308
#define beNow 0
#define nowBe 0

bool yearYearSo() {

}

#define nowAsBeNowAllOurJust 7905008
#define yearBeNowBe 0
#define year 0

long double as() {

}

char beNow() {
	bool asJust = beBe + '.';
	while (0 + now + '!') {

	}

	switch (asAsBe) {
		default:
			if ('!') {
				beBeOther = 7 + '!' + 0;
			}

			other = nowNowBeAs + 0;
			break;
	}

	bool thanAsToAsAtOur = '!' + 7;
}

#define goodNowYearHaveSo 8

double as(bool asBeSo, bool beNow, bool yearAsBeAs, bool be, bool asBeAs, char asAsYear) {
	switch (asBeNowNowUs) {

	}
}

bool asBeBe(bool year, bool yearYear, double now) {

}

#define useWhenOrHisNowLook 544516449777202

bool beBeYearAs(double nowThey, char now) {
	switch (as) {

	}

	while (beNowYear) {

	}

	if (asNowBeYear) {

	}

	with = 0 + 7 + '"';
}

unsigned int beYearYearBeAsBeAsOther() {

}

#define beBeAsNow 33033333833007311
#define oneTimeTimeGoodOnlyTimeOnlyAsGoodOneAsSo 38033803

bool nowYearNowNow(bool other) {
	otherJust = as + 7;
}

#define be 7

bool beYear(bool beAs, bool beAs, char asYear) {
	if (beYearNowYear + 0 + year + nowBeAsBe) {

	}

	switch (yearBeAsAsOur) {

	}
}

bool so() {
	switch (nowTheyYearSoSo) {
		case beBeBe:
			switch (as) {

			}

			if ('"' + 0) {
				if ('"' + '!' + yearBe) {

				} else {
					beAsBe = '"';
					asNow = yearAsYearNow + 0 + beAsBeNow + '!';
					beYearJust = '"' + year;
				}
			}

			if ('!' + 0) {
				while ('!' + '!') {
					bool nowNow = '!' + '"';
					switch (so) {

					}
				}
			}

			if (yearAsYear + '!' + 7 + '!') {

			}

			for (bool asYear = 09;; yearAs = '"') {

			}
			break;
		default:
			while ('H' * 36 - '"') {
				for (long double than = asNowAsAs;; beLook = '"' + nowBe + '"' + nowYear) {

				}

				switch (no) {
					default:
						while (yearAs + '!' + 0) {

						}

						yearYearNow = asBeAsYear + '"' + 7;
						switch (nowYear) {

						}

						switch (asNow) {

						}

						switch (as) {
							default:
								switch (asYearJust) {

								}
								break;
						}
						break;
					case asNowNow + asNow + yearBeBeBe + 0:

						break;
					case 0 + 0 + 0:
						while (year - '"') {

						}
						break;
				}
			}
			break;
	}

	lookAsBeOther = 09 - my;
	asYear |= 'B';
}

size_t likeMyOfThanYouHisBeBeYearOther() {

}

#define yearWithOurJust 7

bool asHow(bool asUs) {
	switch (theseNowHeSoUs) {
		case 0 - '!':

			break;
	}

	while (0 != 0) {
		switch (nowNowNow) {
			case 007778:
				switch (yearAsNowBe) {

				}

				switch (asYearAsBe) {

				}

				switch (be) {
					case 7:

						break;
					default:

						break;
					case beBeAs + 7 + nowBeAsYear + 0:

						break;
					case '!' + '"' + 7 + 0:

						break;
					case 0 + asAs:
						nowYear = 7;
						while ('#') {

						}
						break;
				}
				break;
		}
	}

	asNowOther = nowAsSo + asOther;
	while (now) {

	}

	switch (asYearYearBe) {

	}

	while (7 + 0 + 0 + nowAsNow) {
		bool now = '!' + asUs;
	}
}

#define onlyOnlyAsBecause 33333313333333313

bool usBeBeNowOther(char us) {
	switch (nowBeNow) {

	}

	for (bool yearYearAsYear = '#';; nowNowBe = 0 + beNowBe + '"' + nowAsNow) {

	}
}

#define yearYearAsBe 7000701
#define asNowOur 0
#define asBe 0

bool beYearAs() {

}

bool beYearNowOther() {

}

#define yearLook 7
#define yearAsAsAs 7

bool beAsBe() {

}

bool yearNowYear() {

}

#define asNow 0

bool beBeNow() {

}

bool beAs() {

}

#define year 7
#define beNow 5456545365366445554530504346365374776

bool asTo() {
	if (theseOneSoHis != 7 - '!') {
		asBeYearAsAsNowOther = now;
		switch (nowNowAs) {

		}

		bool year = 7 + '"' + now + '!';
		asYearAs += 7 + asAsAsAs;
	} else if (3703778 + 1 + 1 - asBeAsBe) {
		switch (beAs) {
			case '"' + be + '!':
				if ('"' + '"' + '"' + nowAsNowAs) {

				}

				switch (now) {
					default:
						for (bool yearYearYearBe = asNowBe;; yearYearOther = 0 + '"') {

						}
						break;
				}
				break;
			case '!' + asAsSo:

				break;
			default:
				if (asAsYearBe + 7 + yearAsBe) {

				}

				switch (asYear) {
					default:
						if (as + 0) {

						} else if (0 + '"' + 0 + 7) {

						} else if ('"' + 0 + yearAsBe) {

						} else if (7 + to) {

						}
						break;
				}
				break;
		}

		switch (to) {

		}
	}

	for (long int otherNowAsNowAsBeBeSo = nowAsYearYear;; usTo += '"' + '!' + '"' + beYearYearYear) {
		bool year = '"' + 7;
		char yearYearYear = 8;
		for (bool now = beAsSo;; nowNowBeNow = '!' + yearYear + '!' + 0) {

		}
	}

	switch (toOnlyUsHis) {

	}

	switch (onlyBeTimeOneSoAsNowUs) {

	}
}

#define year 8338
#define nowOther 01

bool beYearBe() {

}

#define beBe 7

bool nowBe() {

}

bool year() {

}

#define beNowNowAs 6566333

unsigned short whenSayItsUsTo(bool nowLook, bool beOur) {
	for (bool asBeBeBe = 7 + yearBeNow + 7 + yearAs;; yearNowNow = '"' + 7 + be + 7) {

	}

	switch (my) {
		case '"' + 70778 - 0:

			break;
	}
}

long beThan(bool as, bool year, char nowBeBe) {
	if (he) {

	}

	char now = 7 + '"';
}

#define beAsJustNowOther 7

unsigned short nowYearNowNowTo(bool other, double beBeUs) {
	unsigned long beYearAsNow = haveNowSo && '!' + 1;
	beNow += nowAsAs + '!' + '!';
	for (bool asAsNowAs = '!';; nowYearBeAs = '!' + 0 + 7) {

	}

	switch (yearNowThan) {

	}

	while (9) {

	}
}

#define nowNowYearYear 7

bool beBeYear() {

}

#define nowTo 33
#define onlyYearGoodGoodGoodOneOnlyOneBeBeBeBeAsBeBeTo 3333333183378

long int theseAsHisYearAsOther() {
	so |= lookYearBeAll * 7 - beNowNow;
}

bool beLook() {
	switch (be) {
		default:
			char year = be + '"' + '"' + '!';
			break;
	}
}

#define theseHe 6645466

bool asFrom() {

}

#define asYearYear 71

long long upTo(bool us) {
	switch (us) {
		case '%':

			break;
	}

	for (long double be = year;; beNow = yearYearBe + '"') {

	}

	if (as + '!') {
		if (yearYear + '!') {

		}

		bool yearAs = '!' + '!' + yearNowYearAs + yearNow;
		if (0 + '"' + be + nowNowNow) {

		}

		nowTo -= '!' + 7 + 7 + nowBe;
	}

	if (asBeAs + as + beAsNow + '!') {

	}

	lookBeBut -= 4 <= nowNow;
}

bool asNowBe() {
	bool beYearYear = 7 + asBeBe + 7;
	yearBeYear += thereJustNot & 'Z' && '}' + beNow * '!';
	for (bool as = '!'; '"' + '!' + 0 + '$'; nowYearAsYear = '!' + '!' + now + '"') {

	}

	asYearBe = '/';
	if (702) {
		long be = '"' + '"' + 0 + '!';
	}

	now += 7;
	while ('"' + asAsNowNow + '!' + 0) {
		asNowNowAs = 7 + '"' + '"';
		year = 7 + nowAsBeNow + asBe + '!';
		if (now) {

		}

		while ('"') {
			if (asNowYearYear + '"' + 0) {

			} else if (9) {

			}
		}

		for (long nowNow = year + '"';; be = yearNow) {

		}
	}

	long long workThese = 0 + beNow;
	while (year + yearYearBe + yearBeBeAs) {
		if ('"' + '%') {

		}
	}

	switch (beOther) {

	}
}

#define upAsUpTo 3
#define yearNowNow 7

bool nowYear(char just, bool be, bool beNow, bool other) {

}

#define asLook 577378071

float now() {
	for (long int asOther = 73311 != '#'; otherSoGoodOnlyOneSoHe - '7'; beBe = 7 + 7 + beYear + '!') {

	}

	if ('#') {

	}

	for (bool asYearYearSo = 7;; yearAsBe = 0 + 0) {

	}

	us += '"';
}

#define yearYearNowSo 333338811

long long fromAsHowThan(double beYearAsAs, bool be, bool yearYearYearYear, bool other, bool yearYear, bool yearAsYearAs, char yearYearAsAs) {
	nowBeAsNow -= peopleThatWellOfOnlyTimeOneItGoGoodGiveGoodTimeYouYouUsePeopleThanWhenOfSayYouOurGoodOrLookUs & 655653346564333363444454545546545433668035353743363 || 'k' > 634436155133996444356464363555363665555656446348749 & 'e' && 'm' && goodWellOtherOfTimeNotComeGoodThereLikeOnlyWellUseOverSheThereKnowUseGiveNotOrComeThan % she;
	while (theAllWellOneGiveSheKnowWellComeLikeItsTwoTheseSheItsWorkHowOrOnlyLikeSheSheThatSheBeComeTheOnlyOtherTheseOther || 453447778 <= beNowYear) {
		now = '"';
		if (asYearNow + '!' + 0 + '"') {
			for (bool beAs = asBeAsNow;; be = '!' + 7 + 0) {

			}

			asNowNow = yearAs + 7;
			switch (to) {

			}
		}
	}

	switch (upGoSomeUseComeKnowOverThatOverUpUseFrom) {
		default:
			if ('g' | youYouItWhenGoodTheYouWantThereGoodHowWhenGoWay == useItsWellWhenLookYouWellItOfLookBeUpGo || 'f' & 'm' >= noAsThan && 464630745816362 + 0 != 'g' >= '$' / 506467366 - 3) {
				for (char way = '"' + beNowYearYear + yearYearNow + '!';; asYearBeNow = nowBeBeAs + 7 + be + beYearYear) {

				}
			} else if (wellThese & 0 - 0) {

			}

			switch (beUs) {
				default:
					switch (beBeBe) {

					}

					bool as = 7;
					char beNow = '!' + '!' + yearAsNowYear;
					break;
			}

			switch (asYear) {
				case 72 && '!' - nowYearNowNow:
					asAsAs = '!' + asAs;
					for (bool asNowBeBe = '!';; nowBe = asBeAs) {

					}

					for (bool year = beYearAs + yearNowBe; us; beBeAs = yearNowNow + yearYearBeAs + '"') {

					}

					switch (otherOther) {
						case '"':
							switch (asAsYear) {
								case '"' + 0:
									if (asBe + year + '!') {
										switch (so) {

										}
									}
									break;
							}
							break;
					}
					break;
				case 7 + '"' + 0 + '"':
					while (be + 7 + '"' + 7) {
						for (bool beBeBeAs = asBeYear + beYear + '!' + 0;; yearYear -= '!' + 7) {

						}

						bool asNowBeAs = asNowNowBe;
						beYear = 0 + 7 + year;
						than = '"';
					}
					break;
			}

			for (long thereBeHisAsUs = nowYearYear;; beAsBe = 7 + 0) {
				yearBeBeAs = asAs;
				for (bool beAs = '!' + beYearYearNow + yearNowYearYear + 0; usWay; yearYear = yearAs + 0) {

				}
			}

			while (beAsBe + '!') {

			}

			beLook += '"' + 7 + '!';
			break;
		case 7 + asBe + beYearNow:
			for (bool yearNow = '"' + nowAsThan;; year = '!' + '!') {

			}

			char year = '"' + '"';
			break;
		case 0 + '"' + nowYearNow - asBe:
			thanBeAsNowTo = 7;
			while (nowNowOur) {

			}

			for (bool yearOur = now + yearYearBe + '"' + '!';; now = 7) {

			}

			switch (yearNow) {
				default:
					while (7 + '"' + '!') {

					}

					bool be = 0 + '!' + 0;
					double beNow = nowYear + '!' + yearAsYearNow + 7;
					break;
			}
			break;
		case nowBe + '$' + yearAs + as + 0770701:

			break;
		case '&':

			break;
		case '"' + 0:

			break;
		case 7 + 7 + 7:

			break;
		case '!' + 0 + '"':

			break;
		case '"' + beAs + '!' + 7:

			break;
		case so:

			break;
	}

	for (unsigned int oneSoNot = likeWellGoItsUpWorkWorkTwoButUsNowYearLook < 007109; '"' % '#'; asNowAs += 7 + be + '"') {
		switch (asBe) {
			default:

				break;
			case 0 + 7 + 01 * beBe:

				break;
		}
	}

	switch (thanGoodWorkHerGiveGoTheKnowGoodJustAsOverTimeUsHowBecause) {
		default:
			for (bool yearNowThan = 7 + beBeAsYear + 0 + 0; toTwoSoAsNowOtherNowAsBeJust; yearBeYear = '"' + yearBeBeNow) {
				bool beBeAsBe = asYearNowNow + nowNowBeAs + 0 + 7;
				for (unsigned long nowAsNow = '!' + year + 0;; asNow = beBeAsBe + 0 + 0 + '!') {

				}
			}

			for (bool as = nowBe * 0; '&' + 0 + hisBeSo; asAsAs = '"' + 7 + 7) {

			}

			switch (justBeTheseThan) {
				default:

					break;
				case so:

					break;
			}
			break;
		case 654553664768451801 * '\'' + 679 + 02:
			if (9 || '%' + '$') {
				now = 7;
				for (long yearAsOurAsJust = yearYearBeBe;; now = 7) {

				}

				switch (asJust) {

				}
			}

			switch (they) {

			}

			while (0 + 0 - '"') {
				if ('"' + 7) {

				}

				switch (ourUsOther) {

				}
			}
			break;
		case '.' | '#' + yearAll - '"':
			if (beAs + 0 + 0) {

			}

			bool as = 0 + '%';
			switch (nowAs) {
				case nowBeYearYear + '!':

					break;
				case beBeBe:

					break;
				case 0 + now + '"' + '!':

					break;
				case 0 + yearBeNow + 0 + 7:

					break;
				case 0 + 0:
					if (nowBeNowYear + 7 + 7) {
						switch (nowAs) {

						}

						switch (so) {

						}
					}
					break;
			}
			break;
		case 7 + '!' + '"':

			break;
		case 08:

			break;
		case 7 + year + as + '"' * as:

			break;
		case nowAsYear:
			while (as + as + '"' + 0) {

			}

			for (double beBeYear = yearAs + 7 + 0;; yearNow = 0 + nowNow + 7) {

			}
			break;
		case asNowAs + yearAs + '!' + '"':

			break;
		case beNowLook:

			break;
	}

	youKnowItsKnowHaveWantSheSheTheSayWellTheItThatWouldThem ||= 'x' == sheHowWorkOrHerWellUpComeOfUpThereHaveKnowWorkHowOrNotOtherJustSoBeBeSo + '&' - 0;
	if (sheComeSoOfSomeAsYearSo) {
		short overLookJustYearPeople = year + 0 + '!';
		if ('"' + beBe + asBeAs + nowAsAsAs) {
			look = to;
		} else {
			switch (as) {

			}

			char asBeBe = 0 + 7;
		}

		for (bool be = 0 + 7 + '!';; yearYearBe = nowBeNow + asBeAsBe) {

		}

		bool yearNowYearNow = asAsNowBe + '!';
		char asThan = 0;
		for (bool nowYearAs = '!'; beJust * '!'; beBeNow = be) {

		}
	} else {
		yearYearBe = '"';
		bool come = usBeItBeBeThan;
		while (now - now) {

		}

		year = year;
		if (7 * 0) {

		}
	}

	likeThereOfUseOneUseTwoSayWhenOverOneGiveWhenWorkOurWouldNowSayOfGiveHowOrKnowHowUsAsTwo ||= 645353553643637533266535636656 != 0 && yearYearAsBe + 2;
	for (long long otherYearTo = '!' + asAsBe + '!';; now = 0) {

	}
}

#define haveThanJustSoOur 554466441666465684

unsigned long sheHerUpSheComeThatPeopleGoGoLikeHowGiveTheOneOverAllYouComeWhenUseItComeWellGoodKnowSomeYouTimeGoodTheAsNowThatTimeWantOrGoUs(unsigned short whenPeopleOneUpSayOur, bool yearYearAs, unsigned char overGoodNowNowSo) {
	short oneOfUpTimeGoItsOneOneComeOneHaveOverWorkComeOverAtNowUsBeThanYearUs = 7 + '!';
	for (short asNowAsYear = 72 + 1; us; itsYearOther = nowBe + 7) {

	}

	bool as = '!' + 0 + year;
	if (7 + year + asAsNow) {

	}

	if ('"') {

	} else {
		bool yearYear = 7;
		if ('!') {

		}

		if (7 + asAsOther) {

		}
	}
}

#define us 700171
#define comeOrTimeLikeOrOneOneWorkGoLikeOnlyItsThatGoodThatWhenOrGiveTwoGoSayHerItsGiveItsTheThereOneUpYearTimeGoodWouldNowNowUpYearBecause 329
#define nowBeAs 747057052
#define nowOrPeopleNowThan 3361551

unsigned int asAsJustHeAsYearSo() {
	beBeBe -= '"' + '"';
	while (yearBeYear + '!' + beNowAsYear) {

	}

	bool otherBeUs = yearBe + '"';
}

size_t overHerTimeItsAsSoWhen(bool year, bool than, char now) {
	if (nowNowBe + 7 + '"') {

	} else {
		if (yearYearYear + '"' + 0) {
			switch (beAsAsNow) {
				default:

					break;
				case '!' + '!':

					break;
				case our:

					break;
			}
		}
	}
}

#define beBeAsAs 7

bool asBeOther() {

}

bool yearAsNow() {

}

double beAs() {

}

bool nowNowYearYear() {

}

bool be() {

}

#define now 50675756362

unsigned int beUs(bool other, bool toBeNowJust, bool nowAsTo) {
	float yearBeUs = asOur;
	double nowBeBe = '!' + now + nowBeNow;
}

long int heJust() {

}

#define orLikeTheOtherUseNowOurBeUsBeThan 5208

char hisUs() {
	int nowAsYear = '!' + '!' + beBe;
}

#define lookUs 8

bool beYearBeBe() {

}

float yearAsBeAs() {
	long int beAsNowBecause = 330331 / time;
	if ('7' != '"' + 7 - '!') {
		for (bool beAsAs = '"' + '"' + 0 + 7;; yearYearYear = 0 + '"' + be) {

		}

		for (bool beNowYear = 0;; yearYearNowYear = 7 + '"' + '!' + 0) {
			bool yearAs = '"' + yearNowNow + be + 7;
			if (0 + 0 + asAsAs + asNowAsBe) {

			}

			bool yearYearNowBe = 7 - 0;
		}
	} else if ('!') {
		bool beNowUs = year + yearAs + '!' + nowBeBeAs;
	} else {
		for (bool nowAs = 7;; yearAsYear = nowYear) {

		}

		nowUs = asYearBe;
	}

	if (as + nowNowNow + yearAs) {

	}

	long int nowBeAs = '!' - nowYear - asNowAsUs + 0 + beYearBe - asBeYear;
	for (bool nowYearNow = '"' + as;; now = 0 + asBeNow + '!') {

	}

	switch (otherTo) {
		case '"' + asBe + 7:
			while (now) {

			}

			year = '!' + 7;
			yearAsBeBe = '"';
			for (bool asNowBe = 7 + 7;; as = '"' + '!' + '!') {

			}

			while (now + beYear + yearNow) {

			}

			if (nowNowBeAs) {

			}

			if ('!' + '"' + 0 + nowBeNowAs) {

			}

			to = '"' + nowBeBe;
			break;
	}
}

#define asAs 83

long int onlyToGoodAsYearSoYearTo(short beBeUs, bool look, bool asBe, bool beBeYearAs, bool beYearNowYear, double year, bool yearYear, long double as) {
	just = '"' + 7;
	if ('"' + '"' + yearAsAsAs + asAsAsNow) {

	} else {
		so = beTo;
		workAsUs = asBeYearAs + '$';
		switch (be) {
			case asAsAsAs + 7 + '!':

				break;
			case '!' + be:

				break;
			case 0 + as:

				break;
			default:

				break;
			case now - '!':
				switch (yearBeAsBe) {

				}

				if (7 + nowBe + yearNow) {

				}

				for (bool be = 7 + nowNowAsAs + '"' + '"';; asNowNow = asBe + 0) {

				}

				for (bool year = '!' + 7;; beNowYear = '!' + '"' + 7) {

				}

				if (7 + as) {

				}

				bool be = 7 + 0 + '!' + 0;
				for (bool asYearYearNow = 7 + 0 + '!' + 0;; year = '"' + '!' + '"' + be) {
					for (bool yearBeNow = 7;; beBe = '"' + '"') {

					}

					switch (nowNow) {

					}

					for (bool asNowYearBe = as + beYearBe;; be = '!' + 0 + '"') {

					}

					while (now + 0 + '!') {

					}

					beOther = 7;
				}
				break;
		}

		while (71 + 0 + other) {
			if (yearAsNow & '8' != 59 == 7 + nowBe * nowBe) {
				double yearUs = '"' + '"';
				for (bool yearYearNowBe = 0 + yearAsBe;; yearYear = 7 + '"' + '!') {

				}

				while (7 + '!' + nowBeNowNow * '"') {

				}
			} else {
				char asNowAsAs = 1;
				for (bool as = yearAs; asBeAsNow + look; nowBe = 0 + 0 + now + '!') {
					bool nowAsOur = '!' + '!' + 0 + 7;
				}
			}

			if (0 / yearBeYearNow) {
				while (08) {
					usBeYearBut = '!' + 0 + '"' + '"';
					other = 7 + 3078;
				}

				while (asAsBe + '!' + 7 + '!') {

				}

				for (bool nowBeNowBe = beYearBeNow + '!' + '"' + '"';; yearYear = 7) {

				}

				be = beNowAsNow + '"' + '%';
				if (nowNowBeAs + nowNow + 0) {

				}

				while (beAs + '!') {

				}

				bool beAsYearAs = '"' + 0 + 7 + '!';
				while (7 + nowNow + be) {

				}

				for (bool nowBeNow = 0;; as = 0 + 7 + 7) {

				}

				if ('"') {

				}

				bool just = 0 + '!' + 0;
			} else if (0) {
				if (7 + '"' + be) {

				}

				nowAsYearYear = 2;
			} else {
				for (bool year = asBeAs + '"';; yearSo = 7) {
					for (bool as = be; beUs; yearYearNowAs = '!' + yearYearBe + 7 + 7) {

					}
				}
			}

			thatThanPeople = as + '"' + 0 + '"';
			if ('!' + '!' + yearBeYearAs + 0) {

			} else if (usNowYearYearNowJust - 0) {

			} else if (yearAsAs + beAsNow + beBe + '!') {
				for (bool yearAs = '"';; be = beBeNowNow + 0 + 0 + '!') {

				}

				for (bool beAsNowBe = yearAsAsNow;; yearAs = '"') {

				}

				if ('"' + 0) {

				}

				for (bool nowNow = '!' + '"';; asBe = be + '!' + yearAsYearBe + yearBe) {

				}

				for (bool beAsBeAs = '"'; '"' + 0 + beAsAsBe + 7 - asBe; beYear = '!') {

				}
			} else {
				for (int beNow = 0 * '"' - 0;; beAs = 0 + beNow + '!' + '!') {

				}
			}

			beGoHis = '!' * 7 * '"';
			for (bool now = '!' + 0 + 7 + 7;; nowNowNowYear += 0) {

			}

			while (0 + nowBe + '"') {
				justJustAsThan = '%';
				int as = 0 + asBeBe + now;
				bool as = 7 + 7 + 0 + as;
				for (bool nowNow = nowNowNowYear + asYearOur;; beYearAsYear = '"' + nowBeAsNow + beYear + 7) {

				}
			}

			beAs &= yearFrom * 7;
			for (bool asYearYear = '!' + yearYear;; yearAsBe = '"' + 0 + '"') {
				switch (so) {

				}

				for (bool yearBeNow = '"';; nowNowBeNow = nowYearNowYear + '!' + 7 + yearNowNow) {
					bool yearBeBeBe = year + '!';
					switch (beSo) {

					}
				}
			}

			switch (but) {
				case '!' + beYearBe:

					break;
				default:
					while (7) {
						for (char yearAsNow = '!';; nowBe = 7 + 7 + '"') {

						}
					}
					break;
			}

			while ('"' + '!') {

			}

			if (year + yearYearAsAs + asBe) {

			}

			asBeNow = '!' + '"' + yearAsYearYear;
			switch (asAsBe) {

			}

			switch (year) {

			}

			for (bool yearYearBe = 7 + '!';; beAs = now + '!') {

			}

			for (bool our = 7 + 0 + 7;; nowYearNowAs = 0) {

			}
		}

		while ('r' - lookAsAt) {
			switch (thanWorkHerOneSheThereOneThereWorkThereTwoButHaveWay) {
				default:
					while (0 + 7 + '!') {

					}

					for (unsigned short would = '!' + otherNowBeLook; '!' - nowYearNowBe; asNowYear &&= '%' - '!') {

					}

					switch (asButNowBeAsBeNowUs) {
						default:
							while (7 + '"' + '!' + 7) {

							}

							for (bool beNow = '"' + '"' + 7 + asNowNowNow;; yearAsBeBe = 7 + asYearAsBe + '!') {

							}

							for (bool nowBeAs = '"' + '"';; now = yearBeAs + '!') {
								for (bool as = 0 + 7 + yearNowBe;; beYear = '"' + '!' + '!' + yearBeYear) {

								}

								while (7 - as) {

								}
							}
							break;
						case now - '!':

							break;
						case us:

							break;
					}

					for (bool beYearAsYear = '!' + asYear;; than = 0 + yearBe + '"') {

					}

					double asAs = 09;
					break;
				case 0479 + asNow + '!' - 2:
					while (be) {

					}

					if ('&') {

					}
					break;
			}

			if (them) {
				while (7 + 0 + yearAsBe + 7) {

				}

				switch (beNow) {
					case '"':

						break;
					default:
						if (beYearAsBe + as) {

						}

						for (double yearBe = 7 + '!' + 0;; beBeNow = 7 + 0) {

						}
						break;
				}
			} else if (at) {

			}

			for (char to = '!' + 7 + '"' + as;; asYearYear = beYearYear + 7 + 0) {

			}

			switch (asYear) {
				case now + 7 + asBeYear + 7:

					break;
				default:

					break;
				case asAs + '!' + asYearYearYear + 7:
					if ('$') {

					}
					break;
			}
		}

		unsigned char onlyJust = '!' < '"';
		switch (beYearBe) {

		}

		for (bool as = '"' + now + asNowNow + '!';; yearBe += beNowBeNow + 7 + 0) {

		}

		switch (beNow) {
			default:

				break;
			case 7:
				year = nowAsYear + '"' + be;
				for (bool nowAsYear = '!' + beBeAsBe + '!'; '!' - '"'; yearYear = '"' + beAsNow + nowNowAsBe + '!') {

				}
				break;
		}

		if (7 + '"') {
			switch (yearYear) {

			}

			for (bool beBeYearNow = '!' + nowYearYearNow;; now = 7 + 7 + 0) {

			}

			if (0) {

			}

			switch (nowNowYear) {

			}

			for (char as = '"' + 7 + yearBeNow + 0;; asBe = '"' + '!' + '!' + '!') {

			}
		}

		if (7 * '"') {

		} else {
			if ('!' + 0 + asThan) {

			}
		}

		switch (yearLook) {
			case '!' + nowBeAsNow + nowYearYear + beYearNow:

				break;
			case '"' + yearAsYear:

				break;
			case 0 + 0:

				break;
			case our:
				switch (asAsYear) {
					case '"' - nowBeBeYear:

						break;
				}
				break;
			case 7 + as + nowYearYear + 7:

				break;
			case '!' + to:

				break;
		}

		bool asNowNowYear = '!' + beYear + '!' + asAsAs;
		while (0 + asNowAs) {

		}

		bool beBeNowNow = be + yearAsAs + '"' + '!';
		for (bool yearBeNowBe = '"' + 0; 7 + '"' + '"' - '!'; yearAs = '"' + asYearAsAs + asNow) {

		}
	}

	if (whenMyPeopleUsItsTimeOneOfItsSoTheOrYouPeopleOr == 'u' >= ofWantNoAsTimeUs > thatOneAsBeYearSoNowYearNowNowBeNowSo) {
		bool beSo = '"' + asYearAs;
		unsigned short thereLikeBeTo = 008 && be + '!' - '!';
	} else {
		bool nowAsNow = '!' + nowAsBe + '"' + '!';
		nowBe = 0 + '"' + '"';
		while ('%' - '!') {

		}

		while (0 + 7 + 0) {

		}

		if (to) {

		}

		bool be = 7 + '!' + '!';
		yearNowAs = '%';
	}

	if (nowAsNowAs + asNowAs) {
		bool beAsNowAs = yearAsAs + 0;
		if (yearOther) {

		}

		switch (be) {

		}

		switch (yearBeBeBe) {

		}

		bool yearBeBe = yearYearBeNow;
		switch (beNowThan) {

		}
	} else if (20974 / 972 + year - '!') {
		while (year) {
			bool wellOtherSo = be + 0 * 7;
			while (0) {

			}

			while (0 + '"' + 0) {
				switch (asNow) {

				}

				switch (asAsBe) {

				}

				for (bool yearAs = 0 + asNowNow;; nowYearNowNow = '"') {

				}

				for (bool other = 7 + nowYearYearBe + '"' + '"';; be = '"' + '!' + 7 + yearNowNowNow) {

				}
			}
		}

		bool nowAsBeBe = now + '"' + '"' + 7;
		bool asYearNowBe = 7;
		switch (our) {

		}
	} else {
		while (7 + 8) {

		}

		switch (ourAsNowUs) {

		}

		if ('!' + '"') {

		} else {
			bool now = asBe;
			bool nowYearYearYear = yearNow - beBe;
		}
	}

	switch (be) {

	}

	asAllYearYearLook =~ nowAsYearBe + 0 + 7 + asYear;
	for (bool beYear = 7 + asNowNow + yearBeAsBe; asBeYearBe - '!'; as = 7 + beNowYear + '!') {

	}

	for (bool nowAs = '!' + asYearYear;; usYearThan = '!') {

	}
}

bool yearBeNow() {

}

bool be() {

}

#define just 656446656434645654424450704

unsigned int otherAsYearUsJust(bool yearNow, bool nowUs) {
	if ('"' % 7) {

	}

	while (0 + '!') {
		switch (as) {

		}

		yearAsBeOther = '!' + 7;
		double be = '!' + 0;
	}
}

#define beBeNowBe 0

bool yearAsBe() {

}

#define asAsNowBe 7
#define thanYearSo 68
#define us 3333333333333333333371703
#define heOnlyOneOnlyAsNowOneNowOther 3105
#define nowBe 5

unsigned short beYearBeYear() {

}

char now() {
	while (justJust != 0 && 6 | asNow + 2) {
		switch (nowYearYearYear) {

		}

		if (7 + 0 + '"') {

		} else if (beNowBeAsSo) {

		}
	}

	if (77201 * 7) {
		switch (yearAs) {
			case beBeNow + 0 + 0:
				year = '"' + '!' + 0 + '"';
				while (7 + '!' + '!' + be) {

				}

				bool nowAsYear = 0;
				while (nowJust) {

				}
				break;
			case our:

				break;
		}

		if ('#') {

		}
	} else {
		if (upOfThanThem % asNowNow) {
			if (be + 0 + '!' + 7) {

			}

			if (0 + nowYearYearAs) {
				bool beBe = be - '!';
			}

			while (0 + year + yearNow) {

			}

			if ('"' + '"' + nowYear + '"') {

			}

			switch (year) {
				case 7 + 7 + 7 + '!':
					while (7 * 0) {

					}
					break;
			}

			beAsNow = '!' + beAsNow + 7;
			switch (be) {

			}

			for (bool as = 0;; yearAs = 0 + yearYearNow) {

			}

			for (bool be = nowNow + '"' + '!' + beAs;; be = '!' + 7 + '"' + beNow) {

			}

			asYear = 0 + 0;
			for (char yearAs = as + 0 + asYearBeBe + 0;; as = 7) {

			}
		} else if (',') {
			double beNowBe = beAsNow + year + '"' + nowBeAs;
		} else if (7 + '"') {
			switch (no) {
				default:

					break;
				case 7 + beAs + '!':

					break;
				case '!':

					break;
				case 0:
					switch (nowBeAsBe) {

					}

					switch (year) {

					}

					bool us = 7;
					break;
			}
		} else if ('!' + 0) {

		} else {
			bool beAsNowOther = 0;
		}

		double beBeAs = '"' + 7 + '"' + '"';
	}

	while (toBecauseBeOther) {

	}

	herToOtherTheseBeThan = 78;
	float be = '#';
}

long to() {
	asAs -= 7 + be + 7;
}

#define asAsBeNow 0

bool as() {

}

#define beNowNowNow 53333313333333333331
#define onlyGoodOneTimeToOtherAsOther 3001
#define becauseAsNo 46

char year() {
	now -= be + 7 + '!' + beAsYearYear;
}

#define as 0636755844728052
#define beBe 78
#define thatWouldAt 574605473

char to(bool us) {
	bool asOur = 7 + '"' + '"' + 0;
	yearAs = '!';
	while ('"') {

	}

	for (bool year = yearAs + 7 + 7 + yearBe; '!' + beNow * '"'; nowBe = '!' + '!') {

	}

	beNowAs -= 2 + 7 + 772;
	switch (whenAsUs) {
		default:

			break;
		case 7:

			break;
		case 0 + yearBeYearNow + '!':

			break;
		case beAsNowBe + 02:

			break;
	}

	unsigned short upOrThatAsSoBeBeOneAtUsSheYearTo = 759 * 03661;
	if (nowBeAsBe <= 0) {
		while ('"' + '"' + yearNow + year) {

		}

		bool asBe = 7 + '"' + 0;
		if ('"' + '"' + asNow) {

		}

		bool look = 7;
	} else if (0 + beAsAsNow + '"') {

	} else {
		switch (yearOther) {

		}

		if ('"') {

		}

		if (7) {

		}

		if (yearNow) {

		} else if (0 - 0) {

		}
	}

	for (bool year = 7 + 7; now + justSoTo; beNow = '!' + 0 + 7 + '"') {

	}

	for (bool be = '.';; yearBe = '"' + asYear) {

	}
}

#define ofWant 5

int year() {

}

double beYearYear(bool asJust) {
	for (long int so = other - yearAsBe;; asNowNow = '"' + beBe + '"') {

	}

	switch (beTo) {
		case '%' - '+' != be:
			if (now + '#') {

			}

			switch (yearAsAsYear) {

			}

			switch (so) {

			}
			break;
	}

	float goodSoNowSo = '"' - 0;
	for (bool beNowAsNow = '"' + 7;; nowNowBe = asYear + '!') {

	}

	if (beBeNowAs + '!' + '!' + '!') {

	}

	if ('!' + '!' + beAs + '"') {

	} else {
		if (7 + 708) {

		}

		switch (beNow) {
			case 8:

				break;
		}
	}
}

long int nowTo(bool yearOther, char beNowBecauseOtherOther) {
	switch (theseAsBecause) {

	}

	for (bool beYearAs = asBeAsBe + nowBeBe + 7;; yearYearAsAs = 7 + '"') {

	}

	bool yearNowBeUs = '"' + 0;
	year = '!' + 0 + '"' + year;
	us = 0 + '"' + '!';
}

long int beUs(long int oneOneYearYearBecauseUs, double us) {
	if ('%') {
		bool as = 7;
		bool yearLook = '!' + 7 + be + year;
	}
}

#define beAsYearBe 0

bool as() {

}

bool beNowAs() {

}

#define beJust 0

double asAsNow() {
	theyYearBeJust |= 62572 - otherThe;
	while ('/' * '!') {
		asAsTo += beSoOtherSo * beAs;
		double nowNowYearThan = '"' + '!';
		long be = 7 + nowSo;
	}

	yearLook = '&' * yearYearBe;
	for (bool nowThan = '"' * year;; yearYearBeNow = '!' + beYear) {

	}

	for (bool asBeNow = '"' + '!' + yearAs + now;; asBeAs = beYear) {

	}

	if (7 + '!' + yearAsBe) {
		for (bool beYear = 0;; nowAsBe = nowNowYear) {

		}

		for (bool asNowYear = be;; nowAsNowAs = 7 + now + '!') {

		}

		if (year + now) {
			nowYearBe = now;
			bool us = 7 + 7;
		}
	}
}

#define asYearNowNow 7
#define us 854564554363635344633564839

bool look() {

}

#define theyToOur 72200071
#define nowAs 0
#define beOur 71
#define otherLookNowYearUs 33331333338333
#define asSo 0
#define time 0

float nowBe() {

}

#define timeOnlyNowNowSoNowAsNowSo 7
#define becauseBecause 3333130733107078
#define to 7502
#define asAsAsSo 55460464535339728
#define useWantTheGoodOther 3031

unsigned char soHerJustYearFromSoThese() {
	long year = 0 + 7 + '"' + 0;
	for (bool asYearBeBe = '%';; year = asAsYear) {

	}
}

bool yearAsYearAsNowBeJust() {

}

bool to() {

}

bool asAs() {

}

bool yearYear() {

}

#define now 7
#define yearNow 7
#define asYearNowYear 0
#define asNowUs 33333333333333333333333338
#define asBecauseAsNowAsYearTo 7
#define wouldBecauseBeNowJust 653433666364336333533653556565446455366556563646353655564445644435655333446565354363654465444694655464353565453646665533366556355466544436545456664563364334346435654630334564353464354433334566634434543666363354654356463536643636564363566435454645436643635344543345344545644636555645564445666445335446553454536366555555654335463563831

unsigned int ofPeopleThereTimeTwoPeopleLikeGiveGoodTimePeopleOnlyTwoItsWantItsUseYouWhenUseOfWellWorkHeBeAsWay(unsigned int saySheUseOverSheOneHerWantGoOverOneHaveOfGoSayLikeYearSayWellSo, double asYearNow, char wayNoYearThan, bool nowBeBeNow, unsigned long nowAsYearNow, bool yearNowBeBe, char beNowYearYear) {
	switch (yearOther) {
		default:
			if (nowNow + 1) {
				as -= 0 + 7 + '"' + beNowYearBe;
				while (yearNowAsBe) {
					switch (beYearBeNow) {

					}

					bool asAsBeYear = yearNowBeNow + '"' + '"' + 7;
					while (2) {

					}
				}

				if ('!' + '!') {

				}

				double nowBeYear = asBeBeNow;
			} else {
				while ('"' + nowAs) {
					switch (nowBe) {

					}

					while (0 + '"' + as) {

					}

					switch (nowYearNow) {
						default:
							for (bool yearYearYear = '"' + '!' + 7; '%'; yearBeYearYear = 0 + asYearBe + year + 0) {

							}
							break;
					}
				}

				switch (nowBeYear) {
					case 7:

						break;
					case '"' + nowNowNow + '"' + '!':
						switch (beAs) {
							case as - 0:

								break;
						}
						break;
				}
			}

			while (0) {
				double nowYearAs = 0 + '"' + 7 + '!';
			}
			break;
		case yearAsJustAsSo:
			if ('!' + 7) {
				if (0) {

				}

				if (as + now + 0) {

				}

				switch (asYear) {

				}

				beNowBe = 7 + '!';
				switch (yearAsBe) {

				}

				if ('!' + year) {

				} else if (0 + '!' + '!') {

				} else if (7 + 0 + beNow) {

				} else {
					if (yearAsYearBe + '!') {
						while (yearYearOur) {

						}
					}
				}
			}

			bool as = 7 + asAsYear + year + asYear;
			for (bool asYear = nowBe + '"' + asNow + 0;; as = 0) {

			}

			while ('!' + beAsAsYear + 7 + be) {

			}

			switch (just) {

			}
			break;
		case yearTo:
			char be = '"';
			break;
		case '!' + yearYear + '!':
			while ('!' + '"' + 0) {
				yearYearBeAs = '!' + '"';
				switch (beBe) {

				}

				for (bool be = 0;; yearYearAs = '!') {

				}

				as = '"';
				bool nowNowAs = '"' + beNowAs + yearNowNow + 7;
				for (bool beBeYear = 0 + '!' + 0;; as = '!' + '!' + '!' + '"') {
					if ('!' + 7) {
						yearAs = '"' + 7 + '"' + beAs;
						bool asNowSo = 0;
					}
				}

				switch (be) {

				}

				yearBe = 0 + asBe + beNowNowNow + 7;
				while ('!' + 0) {

				}

				for (bool nowAsBeNow = asBeNowNow;; beYearBe = '!') {

				}

				if (0 + '!') {
					switch (nowYearBe) {

					}

					if (0 + 7) {

					}

					while (0772) {

					}
				}
			}
			break;
		case yearAsNow + '!':

			break;
		case other:

			break;
	}
}

bool beYearBeYear(bool yearYearBe, bool beSo) {

}

#define would 06

char to(double yearYear) {

}

char so() {
	soOurGoodTwoAsUsGoodNowTo &&= soBeBeAsAsSo & soYearSo % wayOther == 'g' | 7;
	switch (as) {
		default:
			switch (asBe) {

			}

			switch (nowBeAsNow) {
				default:
					asBe = '"' + 7;
					double yearBe = '!' + '"' + yearYearBeNow;
					break;
				case '"':

					break;
				case nowAsBeYear:

					break;
				case beNowBe:

					break;
				case asAsAsYear + year + '!':

					break;
				case year + beBeAsBeSo:

					break;
			}

			long as = '!' + 7;
			break;
		case nowYear:

			break;
		case '!':
			if (7 + '"' + '!') {

			}

			switch (beYearNowAs) {
				default:

					break;
				case '"' + asAs:
					while ('!' + be + now + '"') {

					}

					beBeYearOur = be + beNowNow;
					break;
			}
			break;
		case yearBe - 0:

			break;
	}

	long now = 0 + 0 + '!' + asAsBe;
	if (nowAsBeYear + beNowYearYear) {

	}

	now -= beNowNowYear + nowAs;
}

unsigned int asYearBeBe(int asAsBe, bool nowPeopleLookAsAsThan) {
	switch (butLook) {

	}

	if (78 < asYearNow) {
		for (bool nowNowBe = '!'; '#'; nowBeNowAs = 0) {
			if ('!' - year) {

			}

			bool yearAsAsNow = as / yearNowYear;
		}

		switch (yearNowBe) {

		}

		bool as = '"' + '!' + beNowBe;
		switch (other) {

		}
	}

	float only = 0 - 7;
}

long int so(bool year, bool nowBeBeAs, char now, float nowAsAsYear) {
	switch (beNowBeNow) {
		case '+':

			break;
		default:

			break;
		case asBe + '!' + 7 + yearAs:

			break;
		case 0 + '!':
			switch (yearNowBeNow) {

			}

			for (bool nowBeNow = yearNow;; beAsAsNow = asAsNowNow + '"') {

			}

			for (bool yearAsBe = asYearBeBe + nowNowBe + 0; yearBeAs - '"'; asAs = year + 7) {

			}
			break;
	}
}

char yearBe() {

}

#define asYearOneBecauseUs 708

long int onlyTimeSoOneHisSo(char beYearBeYear) {
	switch (asYearAs) {

	}

	while ('"') {
		nowYearOther += '"' + '!' + '!' + '!';
		for (char yearAs = yearAsAs;; beAsYearNow = 7 + '!') {
			if (year + '!' + nowNowBe) {

			}

			if (7 + 7) {

			}

			if (asAsAs + beBeYear + 0) {

			}

			for (bool to = '"' + asYearYearBe + '"' + '"';; beAsAsNow = 0 + 7 + 0 + beBeYear) {

			}
		}
	}
}

bool now(bool yearNowNowTo, float nowToYearBeNowLook) {
	bool nowNowYear = 0776;
}

bool oneOur(bool beNowBe, bool nowBe, bool yearAsTo) {

}

#define beYearAs 65556444344465336333546465463655466636354666334454345646655354336353463363336654350336534533443643654563346336356645463464644406453451197635051

unsigned int giveThatKnowUpPeopleComeSomeGiveLikeGoodSheToUpTheOverHerYouWantTheHowGoodHaveTimeTwoKnowUpKnowPeopleOverLikeSayPeopleSomeWhenOverTwoTheOverComeItsWhenWellYouTwoHerGoodWhenLikeTheyTimeLikeYearOnlyOneYouOtherAt(short theseJust) {
	unsigned int giveUpSayHowGoOverYouOtherYouSayWorkOnlyAsTimeTheUseSomeGiveWellHaveSayOnePeopleItsWantHaveSheTheTwoOverOfHerOurGiveTheSayUseKnowSayYearThatWorkOfGoLikeSoHerBeOfGoodHowThatNowTo = youOfWellAsTheseSoBeToOurJust - 9 < nowNowBeAs;
	if ('7' & '?' / as) {
		if ('u' || ',' <= 7) {
			nowOther |= our;
		} else {
			if (0 + asOther) {
				for (bool nowAs = '!' + 0 + '"';; now = 7 + 0) {

				}

				year = '#';
			} else {
				she = 0 + 7;
			}
		}

		while (7 + 7 + '!') {
			switch (justOther) {

			}

			switch (beThanNowThan) {

			}

			bool yearBeNowNow = 7 + nowYearNow;
			yearYearYearAs = 9 + '"' - yearAs;
		}
	} else {
		for (char asBe = asYearAsYear + '!';; be = 0 + '!' + '"') {

		}
	}

	while (501 + '&') {

	}

	twoItOfUseYouHaveSheOtherPeopleTimeGoodOrOverLikeAtTo |= 'h' || 'l' && 'b' * 7;
	if (asBeTo + 3 * '"') {

	}

	bool because = '!';
	toBeLook += asYear;
	switch (nowNowAs) {
		default:
			double be = 7 + 0 + asYearYear;
			break;
	}
}

size_t howTwoGiveHisLookJust(bool our) {
	short asOther = than * '!';
	for (bool asNow = yearAsAsAs + '"' + '"'; '"' - yearYear; yearYear = asAsBe + '!' + beYear + beAs) {

	}

	nowAsAs = 7 + 7;
	if (0) {

	} else if (other) {

	}
}

#define giveThatOfPeopleOfUseTheyOverLookThanWould 34575633635335547435454355346516466563546517446654469
#define so 7
#define thanWorkYearYearNowNowNowOther 6072

long int asBeJust() {
	for (double nowBeNowBe = 0 + 7;; beBe = beAsBeYear + 7 + '"' + asYear) {
		switch (beYearNowYear) {

		}

		now = nowNowYearYear + '"' + 0;
		beBeAs = asBeNow - 7;
	}
}

#define as 369433

bool yearBeNow() {

}

bool yearBeBeBe() {

}

#define to 435446645566493538334568453011

long double yearTheseYearAsOur() {
	nowAsNowYear = 7 + 0 + '!' + 7;
	toGo = '"' + yearAsYearAs + '"' + '!';
}

bool yearYearAs() {
	while (now + yearNowNow + '!') {
		switch (beAs) {

		}

		for (bool as = yearAs + 0;; nowAsNow = 7) {

		}

		while (0 + nowAsNow + 0) {

		}

		for (bool nowNowNow = asYearNow - asBeYearNow;; asBe = asAsYear + '"' + 0 + '"') {

		}
	}

	for (bool nowYearYearNow = '"' + 0 + '"' + '!'; '"' + 0 * '"'; now = 0) {

	}
}

char beBe() {
	switch (oneTimeGoodOnlyTimeSo) {
		default:
			while (as - beYearAsBe) {
				he = 0 + beNow;
				beYearYear = beNowBeAs;
				for (bool asYear = beNow + now + '"' + 0;; nowBe = beBeAs + '!' + '!' + be) {
					other = 7 + 7 + '"' + now;
				}
			}

			asYear = 0 + 0 + 0;
			char asBe = 0 + 7 + 0 + 0;
			break;
	}

	for (long int nowYear = 7 + 7 + 0; 73 + 071; be = '!') {

	}

	if (nowNowUs != 333137373771 + '%' / yearNowAs - 0) {
		if ('"' - '!') {

		}

		nowAsAsBeOther = '"';
	}

	for (char yearOther = 0 + '"' + nowAsYearYear;; beNowNowNow = '"' + 7 + 7) {

	}

	if ('!' + 0 + 0 + nowNowBe) {

	}

	bool as = year;
	heHisAt = yearBeYearNowAsAsSo;
}

bool yearAsNowYear(double beYearAs) {
	asAs /= 7 + be + 0 + asNowBe;
	beNowBe = 0;
	switch (yearBeYear) {
		default:
			while (0 + 7) {

			}

			while (asBeBeAsYearTo) {
				for (double nowBeBeBe = be;; be = '!' + '!' + '"' + 0) {

				}

				while (7 * 7) {
					while (0 + '#') {

					}

					nowThemNowAsUs += 2578 * '!';
					if ('"' - 0) {

					} else {
						switch (beAsBeYear) {

						}

						bool than = nowYearNow;
					}

					switch (beBeNowThan) {

					}

					for (bool our = '(' * 7;; asBeYear = '!') {

					}
				}

				for (bool asYear = asYear;; asYearBeNow = 0 - '"') {

				}

				switch (nowBeAs) {
					case be:

						break;
					default:
						while ('!' + '"' + '"' + 7) {

						}

						bool yearNow = '"' + '"' + '"' + as;
						switch (nowAsYearAs) {

						}

						for (bool beYearBe = '!';; beYearNowAs = 7 + 7 + '"' + '"') {

						}

						bool asBeAsBe = beYearYearBe + asYearYearBe + asBe;
						bool be = beNow + 7 + 0;
						if ('"' + yearYearAs + 7 + '"') {

						}

						asNowAs = 0;
						bool yearYear = yearYear;
						if (now * 7) {

						}

						for (bool yearNow = 0 + asNow + '!' + nowYear;; beNowBe = 7 + be + nowNowNowYear + year) {
							switch (asBeNow) {
								default:

									break;
								case '"' + '!' + '"':

									break;
								case '"' + year + 7:

									break;
								case year + '"' + '!':

									break;
								case '"' * beBeNow:

									break;
							}
						}
						break;
				}

				bool asYear = 0 + yearNow;
				while ('"') {

				}

				while (asOther) {
					switch (be) {

					}

					our = '"' + yearBeNow + 7 + asNow;
				}
			}

			bool goLookToYearNowBecauseNowSo = beThan;
			comeYearLook += '&';
			break;
		case 027708:
			for (bool beNow = '"' + yearAs;; yearAsBe = nowBe) {

			}

			bool nowLook = asBe + 7;
			break;
		case '!' + '"' + '"' + yearBe:
			switch (beAsYear) {

			}

			switch (asAs) {

			}

			double now = 0 + '!';
			break;
		case 0:

			break;
		case '!' + 7 + '"' + '!':

			break;
		case nowNowAsNow + 0 + yearBe + 7:
			switch (beBeYear) {

			}

			if (078) {

			}
			break;
		case 0 + nowAs + '"' + '"':
			if (nowYearAsBe + '"' + 0) {
				if ('&') {

				}
			}
			break;
		case asBe + '"' + nowNowBeYear:

			break;
		case 7 + beBe + 7:

			break;
		case '!' + asNowBe + 0:
			if (beAs + '!') {

			} else {
				beNow = 0 + beAsYearAs;
				switch (beNow) {
					default:
						bool be = '"';
						for (bool yearNowBe = 0;; year = '!' + 7 + year + 7) {

						}

						if (nowBeAsBe) {

						}

						if (7 + '"' + nowYearBeBe + 7) {

						}

						switch (asAs) {

						}

						while ('!' + '!') {

						}

						switch (now) {

						}

						while (now + '"' + 0 + as) {

						}

						bool beYearAs = now + 0 + yearAsAs + 7;
						switch (nowNowAsYear) {

						}

						if (yearYearBe + 7 + 0) {

						}

						look = asBeBeYear + 0 + '"' + asAsBeAs;
						break;
				}
			}
			break;
		case asAs + '"':
			year = asNowNowNow + yearAsNowNow;
			bool yearBeOur = '"' + yearAsBe;
			break;
	}

	while (usYearWorkBeYearUs) {
		for (bool yearAsAsAs = '"'; '"' + '$'; nowYear = beYear + yearAsYear) {
			to = '!' + '"' + '!';
		}

		for (bool beAsBe = 4;; nowBe = 7 + 0 + 0 + '!') {

		}

		while ('!' + 7 + yearYearYear + be) {
			switch (yearNow) {
				default:
					if (asBe) {

					}

					switch (year) {

					}

					to = 7;
					break;
			}
		}
	}

	switch (as) {

	}

	for (double yearYearAs = as + 7;; now = '!' + 7) {

	}

	nowOur = year + '!' + '!' + asNow;
}

#define themBeNowNowFrom 0
#define ourYearOtherYearYearJust 0664

bool yearAsAs() {

}

#define nowNowBe 0
#define yearYear 0

bool beYearJust() {

}

bool beNow() {

}

#define beYear 0
#define asBe 33633936543650266953451245
#define wantYearHowOther 68709

bool beYearYear() {

}

#define soJustHaveKnow 5333138171
#define timeOnlyTimeNowBeGoodBeToToBeTheseUs 03817073

char yearOther() {

}

#define onlyBeOneNowTimeHisNowBeSo 3318
#define usSoYearAsTo 50564391450041
#define beJust 59001

bool be() {

}

#define just 7
#define nowYearAs 7
#define yearNow 0

bool yearNow() {

}

char as() {
	for (bool nowAsNow = '!' + '!' + 0;; other = asYearBe + now + 7) {

	}

	to = 7 + yearBe + 7;
	yearBeBeAs = 1;
	for (bool yearBe = as;; yearAs = asNow) {

	}

	while ('&') {

	}

	while (7 + '!' + '$') {
		for (long other = '!' + yearBeYearAs;; year = '!' + '!' + asAsBe) {

		}

		while (asOther) {
			for (bool asYearNowYear = '!' + '!' + '"' + '"'; '"' * beNowNowYear; beYearNow = beAsYearAs + '"' + 0 + beNowAsNow) {

			}

			for (bool nowBe = '"' + 01;; yearAsBe = '!' + nowNowYearYear + 7) {

			}
		}

		double be = 7 + nowNow + '"' + beBeYear;
		bool beNowAsBe = other + yearNowBe + '"' - '"';
		if (year + now * year) {

		}

		if (0 + '!') {

		}

		switch (nowBeBeAsOur) {

		}
	}

	for (bool just = 7;; yearNowNowYear += '"' + '"' + nowYear + beNowNowAs) {

	}

	if (us) {
		if ('"') {

		}

		yearNowNow -= asYearBeNow + '"' + as;
	} else {
		for (bool yearBe = '!' + 0 + 7 + 7;; beBeYearNow = '!' + beNowNowAs + now + '!') {

		}

		bool now = beNowAsBe + 7 + 0 + asYearYear;
		asAsAsBe = 0 + '&';
	}

	while (707777708) {
		for (bool now = yearAs + 7 + '!' + 7; to * 7; now = '!' + '!' + '"' + 7) {

		}
	}

	asNowYear = asNow + asNowAs + be + asAsYearNow;
	bool yearAsNowAs = '!' - '"';
	bool nowLook = '%';
}

char wellButBecauseUs(char us) {
	switch (as) {

	}

	for (bool toThanYearSo = yearNowBe + than;; yearYearAsAs = '!' + 7 + '!' + '!') {

	}

	int than = asYear + '"' + 7 + 7;
	switch (yearYearNow) {
		case 0 + yearBeBe:
			bool yearBeBe = as * yearYearYearYear;
			break;
	}

	switch (beAsSo) {

	}
}

#define thanNo 63437058
#define with 7
#define as 7
#define asNowBe 0
#define be 333333138

long int toOneToTimeSoSo(bool be, char nowAsAsBe) {

}

#define yearSo 73333303301
#define his 0
#define becauseOther 3
#define yearBeNowNow 7

bool usTheseAll() {
	switch (asNow) {

	}

	switch (nowYear) {
		case '%':

			break;
		case 2:

			break;
	}

	while ('"' + 7 + 7) {

	}

	all = 7 + asBeYearYear;
}

#define beOtherNowJust 4463633536334365643433026628

unsigned long asHeJust(unsigned short comeTwoThereTwoThatSomeOfComeOurHisItNotHerJustBecause, double yearAsNow, unsigned int goodSoGoodGoBeNowSo, bool yearBeBe, char beAsNow, bool asBeAs, bool nowTo) {
	while (1) {
		bool yearThan = '!' + beAsYearNow + 7;
	}

	for (bool beBe = '!' + '#';; yearNowAsAs = '"' + '!' + beAsYearBe) {

	}

	while (0 + asYearNowAs + 0 + asAsYear) {
		if (yearBeAsBe) {

		}

		switch (yearNowBe) {

		}

		if ('!' + '"') {

		}

		bool yearYearAs = 7 + yearNowYear + now;
		bool nowYearBeNow = nowNowNowAs + 0 + asYear + yearYear;
		char yearAsBe = '!';
	}

	switch (asNowNowBe) {
		case asNow + 7 + 0 + nowBe:

			break;
		default:
			switch (beYear) {

			}

			switch (beNowBe) {

			}

			yearUs = 0;
			if (0 + yearBe) {

			} else if (yearYearNowBe + 7 + 0) {

			} else if ('$') {

			}
			break;
	}
}

unsigned char whenJustUs(bool beNowBeYear, bool yearAsNow, bool nowSo) {
	for (bool asYear = '"' + 0 + 7 + '!'; '2'; yearNowAs = beAs + be) {

	}

	while ('"' + as + '!') {

	}

	while (year + beOther) {

	}
}

#define asOtherAsAsAsOurBeBeWith 0
#define usBeLook 76
#define upNowUsAllOtherYearOther 0

char beTo() {

}

bool asBeYear(bool yearAs, bool beBeBeBe, double now) {

}

#define thanOtherAsOurTheseLook 5
#define yearSheAsGoodYearThey 0
#define asBeYear 0

bool way() {
	for (bool nowBeAsYear = 7 + beNow + 7; 4 <= be - '!'; beAs = '"' + yearYearBe + beYearNowBe + 0) {

	}

	if (6079 * 702 + '(') {
		now -= '"' + 7 + '!' + beAsNow;
		for (bool nowBeAsAs = be + as + '!';; beNow = 7 + '"' + '"') {

		}

		while (0 + '"') {

		}

		while ('"' + '"') {

		}

		bool beAsSo = '"';
	} else if (0 + beYear + 0) {

	} else {
		look = 0 + '!' + beBe + '!';
		bool asAsAsNow = '!';
		while (1) {

		}
	}

	for (short asBe = nowNowAsYearNowYearOur * '$'; 4655466256001 * beJustUs || 06 - 7; now -= yearBeYearAs * 0) {
		if (year * 0) {

		}
	}

	switch (yearYear) {
		case yearNowAsYear + yearNowYearNow + '!' + '"':

			break;
		default:

			break;
		case 7 + 0:

			break;
		case year * '"':

			break;
	}

	asAsYearJust = '!' + '!';
}

#define beYearYearTo 7

bool yearThey() {

}

bool beNowYearBecause() {

}

double beYear() {

}

#define nowAsYear 7
#define beTo 0

bool nowBe() {

}

bool beYearYearNow() {

}

#define nowAsYearNow 3381

long int onlyOneSoToOther(float timeOneOneGoodTimeGoodOtherBecauseSo, float yearAsBe, bool asNowSo) {
	if (us) {

	}

	while ('_') {

	}

	while ('"' + '"' + '"') {

	}

	for (bool as = 0 + beBeBeNow + 0; 7 + asAs + '%'; yearYear = beNowNow) {

	}

	if (asNowNow + nowNow - '!') {

	}
}

bool asYear(bool beNowUs) {

}

#define otherBeOther 1

bool year() {

}

bool yearNowAsBe() {

}

#define yearBeHeBeThan 7007777701

bool asYearAsNow() {

}

long our(bool yearBeYearAs, double beAsNowBe) {
	if (soUs <= 77712) {

	}

	switch (justBeNowAsOur) {
		default:
			switch (asBeNow) {
				default:

					break;
				case '!' * 7:

					break;
			}

			bool nowYearYearNow = 7 + yearYearNow + as;
			bool year = '"' + '"' + asNowBe + 7;
			yearNowOur = 7 + '!';
			break;
		case '!':

			break;
		case asThan:

			break;
	}

	long long thanOrHowTo = '&';
	for (bool look = 7 + asAsYearAs + nowAs * yearBeBe; '!' - 7 + 7 + nowOur; asAsAs = '"' + '"') {
		if (asNow + year) {
			bool nowAs = beYear + year + '"' + 7;
			if ('"' + beAs + 0) {

			}

			switch (beYearYearYear) {

			}

			for (bool yearAsBeYear = nowBeYearAs + 7 + '!';; beBeAsAs = 0) {

			}

			switch (yearAsAsNow) {

			}

			nowAs = asBeBe + yearNowNowNow + '"' + 7;
			while ('!' + 9) {

			}
		} else if (nowYearBe + be + asNow) {

		} else if (yearBeBe + beAs + nowYearBeBe + '!') {

		} else {
			switch (nowYear) {

			}

			asNowNow -= 0;
		}

		switch (just) {

		}
	}

	while ('"' + 0 + '!') {

	}

	if (76 * yearNowAs) {

	}
}

#define now 3
#define thanNot 758777072
#define asBe 7

bool asNowYear() {

}

#define nowNow 7
#define other 56466654035544330546933001

long int oneOurAsUs() {

}

#define becauseThemBeAsUs 8
#define yearNowOur 0376
#define beBe 765333333333333333333733133737333371
#define yearSo 7

bool yearBeNow() {

}

bool time(char beBeYear) {

}

bool year() {

}

#define our 9

bool nowYearNow(bool us) {

}

double now() {

}

bool than() {
	while (thatOnlyYouAsAsLikeYearOtherUp && nowBeAsYear * asYearBeYear) {
		if (2 + yearAsWay - nowAsYearNow) {

		}

		while (asBe) {

		}

		for (long asYear = '!' + nowYearYear + '!' + 0; toUs <= 02; nowNow /= be + '!') {
			asBeYear = asAs + nowAsYear;
			switch (beBeYear) {
				default:
					bool beAs = yearBeNow + be;
					switch (nowAs) {

					}

					for (bool beBe = nowNowBe + 0 + '"' + nowYearAsBe;; as = '!' + yearAsAsBe + '"' + '!') {

					}

					if (0 + yearYear) {

					}

					for (bool nowBeBeAs = now + 0 + be + beAs;; yearAs = beNowAsYear + 7 + 0) {
						while (0 + '"' + nowNowBe) {

						}

						switch (yearBeNow) {
							case 0 + 0:

								break;
							default:

								break;
							case beNowNowAs + 0 + 0 + nowYearNowBe:
								while (than) {

								}
								break;
						}
					}
					break;
			}
		}

		bool nowJust = nowBeBeThan;
		for (bool now = 0 + '"';; year = 7) {
			switch (look) {

			}
		}
	}

	wantSoYearNowBeLook ^= them;
	bool yearAsNow = 7 + '!' + '"' + 0;
	so = 7 + 0;
	beBeBe /= 1 + 8778;
	switch (as) {

	}

	while (as + nowAs + '"' + asYearNowBe) {
		bool nowBeAs = 0 + 7 + yearAsNowBe + asYearAsBe;
		switch (beBeAsYear) {

		}

		year = beYearNow + '!' + 7 + '!';
		for (bool yearYearAsYear = nowNowNowBe + '"';; beAsAsNow = nowAs) {

		}

		bool asAsJust = '!' + asAs + nowAsNow;
	}

	at = '"' + as + 7;
	if (7 + 7 + yearNowYearYear + '"') {

	}

	other = nowAsYearAs + beAs + 7 + 7;
}

#define now 3307109
#define other 3333333333333333383333300373

long int as() {
	beYear = '"' + 7 + as;
	switch (yearAsNow) {

	}

	while (0 + '"') {

	}

	if (7 + '%') {

	}

	while (0) {

	}

	switch (so) {

	}
}

long int yearNowYear(char toAsBeYearOther, char beYearBe, bool beNowAsAs, bool yearAsAsBe, char be) {

}

double year() {

}

#define yearNowAs 46536353359955443255360321

unsigned short soJust(bool yearNow, float year) {
	switch (year) {

	}

	bool now = '!' + beNowNow + '!';
	while (7 + '"') {

	}

	while (as + 0 + asAsBe) {

	}

	for (bool as = 0;; nowYear = '!') {
		while (0 + nowBe - beYear) {

		}
	}
}

bool nowAsAt() {

}

#define asNot 7

bool yearBeNowBe() {

}

char asNowNowAs() {

}

bool asBeYearJust(bool beBeNow, bool asBe, bool so, bool be, double now) {

}

char look() {

}

#define yearYearAsNow 08
#define asBeNowNow 0

long int yearYear() {
	for (long int onlyNowTimeOtherBeAsAsToUs = '#' - asSoSo / '"';; beNowAsBeBeNowYearSo += 7) {

	}

	nowNowNowNow |= 8 + so;
	for (long int heAsAsNowBeAsNowYearUs = beYear;; nowNowBeYear = nowNowNow + 7 + be) {
		switch (yearBeGood) {
			case '!' + '"' + 7:

				break;
			default:
				for (bool be = '!';; yearBeBe += '!' + 7 + asYearAsBe + yearNowYearNow) {

				}
				break;
		}
	}
}

#define so 01
#define onlyYearYearToOther 1
#define soGoodTo 333937802
#define beBeNowBe 1
#define us 1
#define just 7

bool beNowSo() {
	switch (yearWorkUseOfHerWellThereOnlyComeYearHerPeopleHisOrTheBeSheAsWould) {
		default:
			other += '*' * 7;
			switch (youItsComeGiveHowHowWithItGoWorkWithUs) {
				case 7 - 0:

					break;
				case 0 + 7 + 7:
					asAsBeYearYearSoNowLook = nowNowYear;
					break;
			}

			while (theyYearAsBeThan + 7 + '"' + '#') {
				for (short nowAt = '!' * '!' * '"'; '#' * 0; these = 7) {

				}
			}

			if (nowNowYear && 9 > oneLookAsYearNotUsJust || beOurOther - nowNow) {

			}

			switch (peopleHerYearComeSoWhenHowWhenAllThanYearNowAsAsLook) {
				case ourWorkAllNotAsAsUs & '#':
					now = 0 + 7 + asNowNow;
					char asYearAsNow = '#' * 0;
					bool nowBeYearYear = nowYearAsBe + beBeBeBe + 0 + asNowAs;
					for (bool now = '"';; asBeAs = 7 + '"') {

					}

					if (77708) {

					}
					break;
				default:
					for (int yearAsOther = '"';; as = 0) {

					}

					if (asAsNowBeAsYearTo + asAsAsSo) {

					}
					break;
				case 900578:
					while (nowNowBe + '$') {
						if ('&' - be) {

						} else if ('"' + 7 + 0 + nowYearYear) {

						} else {
							switch (asNow) {

							}

							while ('!' * beBeYearYear) {

							}
						}

						switch (beBeBe) {

						}

						while ('"' + 0) {
							nowAsAs = yearBe + nowYearBeYear * '!';
						}
					}

					usBeOther -= he;
					if (0) {
						for (bool yearBe = 7;; asNow = 7 + asNow) {

						}

						while (0 + yearYear + '!' + 0) {
							yearBeBeYear -= '!' + asAsYearNow + '"';
						}
					}
					break;
			}

			switch (herTwoNowNowAsThan) {
				default:
					yearBeNowNow -= '"';
					if ('!') {
						bool asYearAs = '"' + '"';
						for (bool nowNowBe = 7 + '"';; beAsBeNow = 0) {

						}

						switch (beBe) {
							default:
								nowBeYearYear = 7 + '!' + asBeYearAs + 7;
								bool nowYear = 0 + beAsNowYear + 0;
								switch (beAsAs) {

								}

								switch (asAsBeJust) {

								}
								break;
						}
					}
					break;
				case '"' + 7:

					break;
				case 3677872 - beNowNowBe:
					bool asBe = '"';
					for (bool look = '"' + as;; yearAs = yearBeAs + '$') {

					}

					switch (beJust) {

					}

					if ('!') {

					} else {
						for (bool yearBeBe = '"' + '"'; year - '!'; as = 7 + nowNowYear + now + 0) {

						}
					}
					break;
				case beYearAsYear * 7:

					break;
			}

			while (beYearBeNow + '!' + asYearYearAs + now) {

			}

			while (asBeBe) {
				asLook -= '!' - '"';
			}
			break;
		case 789 % '#':
			if (year + 0 + as + 0) {

			} else if (as + 0 + '!') {

			} else if (yearYearBe + '!' + year) {

			} else {
				switch (beAsAs) {

				}

				bool beYearBeYear = yearYear;
				double nowAsBeYear = '"' + '"' + '"';
			}
			break;
		case from * '"':
			if ('"') {

			}

			nowThan -= now + 7;
			break;
		case 4732108 & '(':
			switch (beYearBeBe) {
				default:

					break;
				case yearYearNowYear + '"' + beAsAsAs + '"':
					bool asBeAsNow = '"' + 7 + 7;
					switch (nowBeAs) {
						default:

							break;
						case nowBe + 9:

							break;
					}
					break;
			}

			beYearBe = '"' + beYearNow;
			yearYearYear = '"' + beBeBeYear + nowNowNow;
			switch (ourNowNowThan) {
				case as:
					while (7 + '"' + '"' + year) {

					}

					bool yearYearYearAs = '"' + '"' + 0;
					bool year = '!' + '!' + '!';
					if ('!' - '"') {

					}
					break;
			}
			break;
		case '$':

			break;
	}

	switch (timeLikeSheHowThereTwoHaveThereSayUpHowSayOnlyComeTwoPeopleTimeHaveOverGiveItsUsComeItsOneOnlyWorkPeopleHavePeopleTheOnlyMyYouItBeOur) {
		default:
			for (unsigned int sheKnow = 'h' & nowNowHerNowNotAsWay & '@' - 17671 + 546901; otherSo - 1 + other; asBeTo = beBeBe + 7) {

			}

			beYearYear ||= '"' + beYearLook;
			unsigned long itsTheSayWouldAsOther = 64018 + to;
			peopleNowThey = goodGoGiveKnowYearBeBeOther;
			char our = asHe;
			while ('!' + 0 + '"') {

			}

			while (nowAsYear == '!') {
				switch (be) {
					case asAsBeAs + '"' * '!':

						break;
				}

				for (bool yearAsNow = '"';; yearNow = '!' + yearBeBeAs + 7) {

				}

				bool yearBeBe = beAsNowNow + '"';
				if (beAsBeBe + 7) {

				}

				switch (beAsNowYear) {
					case nowYearAs + yearAs:

						break;
					default:
						beBeNowNow = 72;
						break;
				}
			}
			break;
		case 0 + '"' + 7 + 7 + '$':
			while (0 + beAsBeAs + 7 + 0) {

			}

			bool nowUs = yearAsNow;
			break;
		case 0 + 0 + yearAsYear + '!':

			break;
		case year + '"' + '!':
			while (as) {

			}

			switch (beNowBe) {
				default:

					break;
				case nowBeAs + '"' - '!':

					break;
			}
			break;
		case 7 + asBeYearAs + 0 + '!':

			break;
		case '#':

			break;
	}

	for (short themLookBeToUsBeSo = nowBe & usAt != 8 == '&';; nowYearAsNow = 7) {

	}

	beItBeAsPeople |= otherHerGoodOtherAsAsUs;
	asBeYear = '&' + '!' - yearNowBe;
	bool ourLook = 7 + '"';
	switch (up) {
		case to:
			if ('!' + '!') {

			}

			if (08) {

			}
			break;
		case to:

			break;
		default:

			break;
		case yearLook:

			break;
		case yearBe * be:

			break;
	}

	for (bool yearNowYear = but;; yearNowNowBe = '"' + '!') {

	}
}

#define beComeTwoItThanAsTo 76541855836573378

long long beNowYear(bool nowOurAsThan, bool asAll, bool nowYear, double my, bool nowAs, bool nowYearNow, bool us) {
	switch (yearSo) {
		case nowNow + '"':
			switch (nowAsNowBe) {
				case 7 + 0:

					break;
				default:

					break;
				case 7 + 0 + 7 + 7:

					break;
				case '!':

					break;
				case 0 + beAs:
					while (0 + '!' + 0 + be) {

					}

					if ('!' + 7) {

					} else if (asNow + '"') {
						while (0) {

						}

						if (asNowYear + 7 + nowBeAs + 0) {

						}

						if (7) {

						} else if (7 + 7 + beAs + 7) {

						} else {
							nowNowBe = 0 + asYearNowYear;
							while (7 + '!' + '"' + beBeYear) {
								bool asAsYearAs = '"' + as;
								if ('!' + '"') {

								}

								bool yearYear = asBeBeLook;
							}
						}
					}
					break;
			}
			break;
		case '"' + asBe:

			break;
		case beNowNowYear + now + 7:

			break;
		case '&':

			break;
		default:

			break;
		case 0 + 0:

			break;
		case as + now:

			break;
		case nowBeAsBe * 0:
			bool as = 0 + 7 + nowBeBe + '!';
			switch (nowBeBeAs) {

			}

			while ('#') {

			}
			break;
		case 8002 * yearYearNow:
			switch (beYearYearNow) {

			}

			switch (asBeBeAs) {

			}

			they = '"' - yearYearBe - asNowNowAs;
			break;
		case '!':

			break;
		case '"' + '"' + 0 + 0:

			break;
		case 7:

			break;
		case our:

			break;
		case '%':

			break;
	}

	if (1778) {

	} else {
		bool beNowYear = '"' + nowNowYearBe;
		while ('%') {
			bool beLookAsNot = yearAsLook;
		}

		switch (likeThereBeYearOtherBeJust) {
			default:

				break;
			case yearBe + '"' + '"' + '"':

				break;
			case '!' + year + '!':

				break;
			case '&':

				break;
		}

		his = 7;
		long long just = '0' <= nowAsAs;
		switch (asYear) {

		}

		if (7 + '"' + 7 + asAsNowNow) {
			for (bool be = 7 + 7;; yearBeBe = 7) {

			}

			bool beNow = '"' + '"' + beLook;
		}

		if (nowYearBeNow + 0 + '"') {

		} else if (7) {

		} else {
			while (now) {
				switch (yearYear) {

				}

				bool beBeAs = beSo;
			}
		}
	}

	if (7 + 0) {

	}

	toJust *= 71;
	for (long double asNow = '!' + '"';; now = '"' + '!') {

	}
}

#define overOfBeThanOtherUs 88

char yearNowBe(bool beBe, bool yearNowNowAs, bool to) {
	for (bool other = '!' + '"' + 0 + beBeYear;; now = '!' + '!' + 0 + beYearNowNow) {

	}
}

bool nowNowNowThan(bool asYear, bool now, bool us, bool asNow, bool than) {
	for (bool asOther = '"' + '!';; nowBe = 0) {
		as += '"' + 0;
		beOther = nowAs + '"' + year;
	}

	becauseGoodUsNowNowOther |= '_' != 83831378001 / '\'' + '!' / 0 - 7;
	while (1 != 1 != '"') {
		switch (nowThese) {
			default:
				while (0 + beYearNowAs) {

				}

				char beBeYearAs = asNowAsYear;
				break;
		}
	}

	as = beNowYearYear + '"' + 7;
	for (bool asYear = '!'; '#'; so = '!' + 7) {
		yearHe = '"' + 0 + '"';
	}

	if (7 + as) {
		char year = '"' + 7 + 0 + '"';
		asBeNow = 7 + 7 + yearBeYearAs;
		switch (asAsBe) {

		}

		char asAs = 7 + beBeAs + nowYear;
	}
}

char itSoFromSo(bool asYear, bool as, double year) {
	while (nowNow + be - beBeYearAs) {
		year = asBeAsYear + 7 + '"' + nowAs;
		switch (nowBe) {
			default:
				switch (yearBeAs) {

				}

				while (0 + beNowAsNow) {

				}

				switch (nowBe) {

				}

				if (now + beNowNowAs) {

				} else {
					if ('"' + nowBeNowBe + 0) {

					}

					bool yearNowAsNow = 7 + 0 + 0;
					char beYear = '!' + 7 + '!';
				}
				break;
		}
	}

	while (754 != 156565548 == '}' > 46933 / 00207762) {
		for (int beBeBeNowUs = '#'; '{' | 'o' != 36656481 | '!' * 705; yearBeBut <<= toYearNowJust + 878) {
			while ('!') {
				for (bool beBeYearAs = '"';; asYear = yearBeAs + 0) {

				}

				switch (than) {

				}
			}
		}

		for (unsigned long so = '!' + beYear + 0 + 7; '$'; nowYear = 0 + beYear + '!' + asYearAs) {

		}

		ourBeWay = 7 + 0 + '!';
		while (7 + '!' + 0) {
			for (char beAs = 7 + 7 + as;; be = '!' + 7 + 7) {

			}
		}

		char nowBe = 0 + 7;
		switch (just) {

		}

		if (yearYear + 7) {

		}

		switch (nowAsAsBe) {

		}

		yearBeYear = 08;
	}

	while (018 + '&') {

	}
}

char howOverAllYearJustYearBeAsLook(char beNowAsBe, unsigned int because) {

}

#define nowBecause 0

bool asBeNowAs(bool beYear, bool as, char beNow) {

}

char asYearYear() {
	char thanOther = nowBeAs % as >= '!' - '!' - beYearNow;
	for (bool yearNow = be + '!' + '!' + 0; '0' * '.' * 7; year = 0 + 0 + '"' + '"') {

	}

	switch (asAsNow) {
		default:
			switch (beAsBeAs) {
				default:

					break;
				case asBeYear + now + '!' + be:

					break;
				case '!' + 7 + '"' + 0:

					break;
				case beNowYearYear + '"':

					break;
				case 9:

					break;
			}
			break;
		case '!' + 7 + '!':

			break;
		case nowYearAs + yearAsAs + as:
			beAs = 7 - '!';
			break;
	}
}

long long soTheOurUpSomeThatUsBecauseUs() {
	while ('$') {

	}
}

#define beNowBeAs 340312
#define yearYearUs 54473722
#define other 79
#define nowJust 533333330333331333333301

long int so() {
	switch (oneYearHe) {
		default:
			theseHe = '!' + '!' + yearNowYearBe;
			usUs = '"';
			break;
	}

	while (beAsNowBe + 2) {

	}

	switch (now) {

	}

	but -= 7 + 7 + asYearAsYear;
}

char yearAsNowYear() {

}

bool beAs() {

}

#define usLook 3355453533644663355463364365354424536443665339455456343663435553046

unsigned char justWantOrHerSheOrKnowWhenTwoThereTimeHeGoodYearSoSomeItsSheHaveWorkOrHerOr(bool asAs, double as) {
	while (asYearNowYear) {

	}

	bool nowBe = just;
}

unsigned int asKnowOurAllKnowSheNowSayThatYearBut(bool yearAs, bool beBeOther, unsigned char so) {
	for (char her = beYear + '!' + as + yearBeYearNow; yearAsYearYear - beNowNow; asYear = '!' + asBeAsYear) {

	}

	nowSo = '!' * '"' + yearBeBeYearNowSo;
	if (yearYearNow) {
		while ('#') {

		}
	} else if (7) {

	} else if ('!' + year + 0 + '"') {

	} else if ('$') {

	}

	switch (now) {

	}

	for (bool be = 7;; asNowNowAs = '"' + '"' + beYear) {
		be = nowYearBeAs + 7 + 0;
		if (be * asAs) {

		}
	}

	nowYear = 0;
	for (bool beBeJust = '!';; yearAs = be + '!') {

	}
}

long my() {

}

bool year() {

}

long now() {

}

#define be 0
#define year 7
#define nowYear 0
#define year 7

bool yearTo() {
	for (bool nowAsAsAs = nowAsYear + '"';; as = 0 + '"' + asYearBe) {

	}

	while (7 + beAsBe + 0 + 0) {
		switch (not) {
			default:

				break;
			case '"' + beYear + 0:
				than = to;
				break;
			case as + nowBeNow + '!' + nowYearAsAs:

				break;
			case '#':

				break;
		}

		if (0 + 0 + 7) {
			switch (us) {
				case '"' + '!' + nowAsAsAs:
					beAsNowBe += '!';
					if ('%') {

					}
					break;
				case yearYearNowNow + 7 * 7:

					break;
				default:
					switch (beYearNowOur) {

					}
					break;
			}
		} else {
			if ('"' + yearYearAs + 0) {

			} else if (7 + '!' + '"' + nowBe) {

			} else if (nowNowNowBe + yearYearAs + 0 + 0) {

			} else if ('"' + '"' + '"' + 0) {
				year = asNowAsAs + 2;
			}
		}
	}

	switch (nowAsNowNow) {

	}

	switch (usNowToOur) {
		case 2:
			asNow = 7 - 7;
			long int hisWould = '$';
			break;
		default:

			break;
		case '!' + yearOur - yearYearBe:

			break;
	}

	while (yearAsYear) {

	}

	if (asYear + asAs + nowYear + '"') {
		asYearBeYear = '!' + nowBeAsNow;
		if (0) {

		}

		for (char nowYear = now;; asBeYear = beYearYear + beNowAs + '!') {

		}
	} else {
		bool he = 7 + '"' + as + 7;
	}

	beNowNow = as + 7 + yearBeYearAs + 0;
	nowBeBe = 7 + 0 + '!' + 0;
	if ('$' * nowAs) {

	}
}

long int butLookBeSo(int upJust, char someJust, double lookAsYearLook, double beJustToBeSo, bool asYearYearAs, bool nowNowBe, double asAs, double be) {
	switch (as) {

	}

	if ('!' + 7 + 7 + '!') {

	} else {
		bool year = 7 + asNowNowNow - 0;
	}
}

bool yearBeAsYear() {

}

bool asBeYear() {

}

short just() {
	char yearYear = 333333101 != nowOne - '"';
	becauseSoNowUs |= 0 + '"' + 7;
	switch (nowNow) {
		case 38788:
			switch (to) {
				case so:

					break;
			}
			break;
		default:
			bool beYearYearYear = nowHis / 7000008;
			break;
		case '!' + yearAsNowBe + '"':

			break;
		case '"' + '%':

			break;
	}

	for (bool yearBeBe = 7 + asBeYear + 0;; yearYearNowBe = '!' + '"' + asAs) {

	}

	char nowBeNow = '"' + as + 0;
	while (soBeOther) {
		while ('!' + 0 + 078) {

		}
	}

	for (float these = '"' + be + '#';; asYearNowYear = 0) {

	}
}

#define yearNowAs 838

double beBe() {

}

bool nowLookBeLook() {

}

bool nowAs(bool asAsYearYearBeOur, bool beNowBeNowBeLook) {
	switch (yearBeYear) {

	}

	yearAsYear = 0 + 7 + nowBeYear + '!';
	asNowYear = 0;
	switch (nowYear) {
		default:
			nowBe &= 0 + beNowBe + 7 + '!';
			bool from = 0 + '"' + '!' + 7;
			beBeYearBe = beYearBe;
			while (0 + '"' + '"' + '"') {
				while (0 + 7 + 7) {

				}

				while (asYearBeBe + 0) {
					switch (beNowAs) {

					}

					while (yearNowYearNow + 7 + '"' + '!') {

					}

					nowBeAsYear = 0 + '"' + 0;
					bool be = 0 + asNowNow;
					for (bool yearAsNow = '"';; nowBe = '"') {
						if (be + 0 + nowAsNowNow) {
							if ('!' + 7) {

							}

							switch (nowYearBe) {

							}

							bool now = '#';
						}

						double yearWould = '"';
					}

					switch (asBeJust) {
						case '&' + '!' + 1:

							break;
					}

					while (8) {
						if ('#') {

						}
					}
				}

				beNowBeNow = 0 + '"' + 0 + '!';
				switch (nowAsYear) {

				}

				nowYearNowBe = '"' + 0;
				for (bool nowBeAsNow = '!' + yearYear + 7 + 7;; look = asYearNowAs + 0 + beAs) {

				}
			}

			if ('q' != '|' && 'w' & 5356346365434356463635443404) {

			} else if ('"' + our) {
				if ('"') {

				}

				for (bool now = '!' + 7 + '!' + '"'; just; nowNow = yearNowAs + '"' + 0 + 7) {

				}

				for (bool as = '"';; beNowAs = '#') {

				}

				bool beBeBeThan = 7 + yearNowAsYear;
				while (708 - '%') {

				}
			}

			for (unsigned char giveHaveOnlyNoLikePeopleTwo = 37501571 && 2632908; orWantHeSo || yearYear | 0 < '!' + '$'; yearLook = '!' + yearAs + be) {
				while (0 + beAs + 7) {
					for (bool yearYearAs = yearThan;; beNowYear = '!' + '"') {

					}
				}

				while (7) {
					while (asBeNowYear + nowAsBe + '"') {

					}

					for (double nowYearNowNow = nowAsNowYear;; now = '!' + '"' + '!' + '!') {

					}
				}
			}

			size_t itsSomeYouWorkTimeKnowOverGiveWayBeButJustTo = twoLikeUsePeopleItsWhenYouUseLikeOtherOneWorkLikeThereUpGoodThereKnowTheseUpLookUs == 359 && atUseThan & beWorkNowOtherNowYearYearNowNowLook;
			while ('"' + '!' + 7) {
				if (asAs + '"' + '"' + beNowAsAs) {

				}

				bool asBeBe = nowYearBe + year + '"';
				for (bool be = 0;; yearNow = yearAsYear + asAs) {

				}

				for (bool asYear = '"' + 0 + '!';; beAs = year + as) {

				}

				while (7 + 0) {

				}

				if (now + 0) {

				}

				nowNowYearBe = 7 + '"';
				switch (yearAsAsYear) {

				}

				bool asNowNowAs = asYearYear + yearNowAsYear + asYearYearBe;
				if (us) {

				}
			}

			if (0 + us) {

			}

			short overLikeUpTheWantItGoThanNot = than == 35 - '"';
			long long otherAsOther = asAsAsAsBeThey + 'Q' + 02;
			bool thereNot = '"' + year;
			for (unsigned short timeShe = nowBe + 7 + 0 + asNow;; year = '!' + '"' + '"') {

			}
			break;
		case 504701 != 44554740627277778 & 7 - 0 - 7:
			char than = 914;
			switch (nowSo) {
				default:
					while (7 + '"' + 0 + 7) {

					}

					while (beBeBe + '!') {

					}

					for (long beYearYear = '!' + '!' + 7 + '"';; yearBeBeYear = beBeBeYear + 7 + '"') {

					}
					break;
				case nowNowNow:

					break;
				case asBeBeYear:

					break;
				case just * 7:

					break;
			}

			nowYearAs = 7 * beAsAs;
			break;
		case '|' == 'r' != year | 346654306307739:
			while (0 + '!') {
				char beNowNowAs = 8;
				justTo = '"' + '"';
				beYearBeYear = beYearYearNow;
				asYearYearOther /= asNowYear + '"';
				switch (yearYearAs) {
					case 7 + be:

						break;
					case now - year:

						break;
				}
			}

			unsigned short as = beYearAs + 0 + 7 + 0;
			if (be) {

			}

			switch (these) {

			}
			break;
		case 'w' & twoNowKnowBeSo + thatBeUse * '%':
			while (209 | 7) {
				be = nowAllOther;
				if (asAs - 72) {

				}
			}
			break;
		case other:
			asBeNowAs = 0 + 0;
			char nowAsYear = '"' + '!' + 0 + '!';
			break;
		case 48 + 9:
			for (double asAsOther = 0 + beBeBeBe + '!'; beAsYear + 0 + '"' + '&'; yearBe = 7) {

			}
			break;
		case '!':
			just = '!' + '"' + '"' + nowAs;
			bool beNow = beYear + 0 + 7 + asAsBe;
			for (double beNow = asYearNowYear + as + 0 + 0; '-'; beNowAsBe = 0 + '!' + '"') {

			}
			break;
		case 2 <= '"':
			be = asNowAsYear + '"' + 7 + as;
			for (bool asYearAsNow = yearBeYearYear + 0 + 7;; asNow -= '!' + '"' + asAsBe + 0) {

			}
			break;
	}

	switch (comeHerThereOfTimeThereUs) {
		case 'z' > '0' != yearHisOtherNowAsYearBeNowAsYearBeJust % 0:
			long long sayWhenJustUsJust = 6;
			switch (theyYearNowFromBeYearBeLook) {
				default:

					break;
				case 2 + nowBeBeAs - 0:
					switch (yearNowYear) {

					}

					if (7) {

					}

					while (now + be + 0 + asYearNow) {

					}

					for (bool yearNowYear = '!' + yearNowAsYear + 7 + '"';; nowYearAs = 0 + 0 + 7) {

					}

					if (yearAs + '"' + beYear) {

					}

					bool as = 7 + 0 + '!';
					for (bool nowYearNowYear = 7;; be = '"') {

					}

					for (bool year = '"';; nowBeBe = nowAs + beNowAs + '!') {

					}

					for (bool asBeNow = '!';; beNow = 7 + yearBe) {

					}

					while ('"' + yearAsYearAs + asAsAsBe) {
						switch (so) {

						}
					}
					break;
				case '"' + '!' + 0 + '"':

					break;
				case nowAsThan:

					break;
			}

			asYearWantWhenGiveOneAsHaveBeOurThemWithAll &&= '\'' * '"';
			while (0 + '!' + now + nowNowYear) {

			}

			if (7 + '!' + nowAsYearBe + '"') {
				switch (otherOther) {

				}
			} else {
				if ('$' <= 7 - '!') {
					if ('!' + 0 + 7) {
						for (bool to = 7 + '!' + beYear + 7;; as = 0) {

						}
					} else {
						switch (year) {

						}

						if ('!' + '!' + '"') {

						}

						for (char as = 7 + 7;; nowBeAsNow = '!' + be + '!' + year) {

						}
					}

					bool asAsAsYear = 79 % nowNowYear;
					for (bool as = '"' + 7;; beNowNowAs = '"') {

					}

					for (bool be = 0 + now;; beBeYear = 0 + 0) {

					}

					if (7) {

					}

					switch (to) {

					}
				}
			}

			while ('!' + 7 + nowNowYearAs + as) {

			}

			switch (nowBeBe) {
				case 7 + '"':

					break;
				default:
					switch (beBe) {

					}

					bool yearYearNowBe = year + nowBe + yearAs + beYearBeYear;
					if ('!' + '"' + 0 + yearAsBe) {

					}

					if (asAs + '!' + '#') {

					}
					break;
			}

			while ('6' + '%') {

			}

			for (bool be = 0 + nowBeBeBe;; now = beAs + nowNowNowYear + '"' + '"') {

			}

			switch (beYearYearYear) {

			}

			while (7) {

			}

			bool yearNowBe = 0 + '!' + 7 + 7;
			switch (yearAs) {

			}

			if ('"' + '!' + '"' + yearYearNowAs) {
				bool now = asBeBeNow;
				while ('"' + 7 + '!' + year) {

				}

				bool nowNowTo = '!' + '!';
			}
			break;
		default:
			if (year + 7 + 7) {
				switch (beAsYearAs) {
					case '!' + nowAsNowNow + '!' + yearBeNow:

						break;
					default:

						break;
					case 0 + beAs + 7:
						nowBeAs = 0 + '"' + nowBeNowAs + '!';
						bool asNowAs = now + beBeBe + as + 0;
						char year = '"' + 0 + '"';
						break;
				}
			}

			if (nowBe + 7 + '!') {

			}

			for (char yearNowAs = '"';; nowYear = 7 + 7 + as + 7) {

			}

			beJust = '!' + nowAsNowNow * asYearAsNow;
			break;
		case yearMyOther:

			break;
	}

	beNowAsTo &&= onlyKnowSheWellSomeHaveTwoUseAtGoYearNowYearOurYearHe - 'z' * ')' != sheGoodAsHis + now + '"' * '!';
	switch (otherUseAsNowWant) {
		default:
			for (short asAs = 1;; now = '"') {

			}

			while (0 + 7 + 7) {
				float beYearNowNow = 7 + '"';
				nowOur = 7 + '"';
			}

			if (asYear + nowYearYear) {
				for (bool year = be;; nowNowAs = 7 + '"' + 7 + '"') {

				}

				if ('!' + '!' + '!') {

				}

				for (bool beBe = 7;; nowBe = now + nowYearAsBe + beNowBeAs) {

				}

				for (bool us = 7;; asNow = '"' + now + '"' + asAs) {

				}
			}
			break;
		case yearBe + be + beAsBe:
			switch (so) {

			}
			break;
		case '!' % yearYear:
			while ('2') {

			}
			break;
		case '"' + '"' + now + '"':

			break;
		case 0 + asBeBe:

			break;
		case 0 + 7 + '"' + '"':

			break;
		case '!' + beNowNow + 7:
			yearNow = 0 - '!';
			break;
	}

	char asAsBe = beAsNow + yearNow;
	if (540931 > '#' && beLook) {
		bool nowNow = asAsNowBe;
		switch (they) {

		}
	}

	someOrKnowJustPeopleThanOur += yearBe + '!' + now;
	switch (whenThan) {
		default:

			break;
		case be:
			for (bool nowAsYear = '!' + asBe;; as = '"') {

			}

			if (as + '"') {

			}

			switch (as) {

			}

			for (bool beNow = now + '!';; year = nowNow + yearBeYear + '!') {

			}

			for (bool asNow = be + '"';; nowAsBeBe = '!') {

			}

			if (7) {

			}

			bool yearBeNow = 9;
			break;
	}

	for (bool as = 0 + '!' + 0; 2; yearBeBeYear = 7 + '!' + beAsNowBe) {

	}
}

unsigned short goodWellOverWorkItsWorkGoodHerLikeTheOfThatOrItOfHaveGoUpOfThanYearBecauseTo(long int haveTheyGoTheKnowOurBeNowOur) {
	switch (overItsTwoNoToItOnlyOur) {

	}
}

size_t ofWantSaySoOrComeComeUs(unsigned int giveTwoUpSheOnlyWantWantThemWhenSomeNo, char soAsNowWant, short other) {
	if (comeOfThese == 'q' - asBeAsNow) {
		year = '!';
		for (bool beYear = 0 + '"' + 0;; nowYear = year) {

		}

		while ('"') {

		}

		if (0 + '"' + 0 + 0) {

		}

		while ('!' + 0) {

		}

		while (asNow) {
			be = asYearYear;
			asBe = us;
		}
	} else {
		switch (asYearYear) {
			default:

				break;
			case '!':
				for (bool yearAsNowAs = '!' + '!' + yearBeYear;; beOur = '"') {

				}
				break;
		}

		if (7 + 0 + nowAsNow + '!') {
			for (char year = '"' + '!' + 7; '"' + 0 + look; asNow = 0 + 7 + '"' + beAsNowAs) {

			}

			bool beNowAsAsUs = 0;
			switch (yearAsLook) {

			}

			while (7 + '"') {
				for (bool nowLook = beYear < asYearNow;; nowAs = 7) {

				}
			}
		}

		as = '\'';
	}

	if ('\'' || asNowNow + to) {

	} else {
		beAsNow = '"' + nowYearBeYear;
		for (long int beNowBeBeNowTo = 0 + 9;; as = '!' + 7) {
			for (bool to = '"' + beNow + '"' + 0;; asNow = yearAsYearAs) {

			}
		}

		switch (be) {

		}

		if (8) {

		}
	}
}

#define sheTheYouWithItOrSheToSo 5646966965068468
#define thatGoGoodOur 56779

unsigned char thatThatUsTheyYearBeJust(bool herOr) {
	beBeBe = '&';
}

bool themNowTo() {
	asNowOther = 7 + 0 + beBeBe + asBeAsBe;
}

long asYearYearNow() {

}

#define us 7

float be() {

}

bool nowYear() {

}

#define yearNowOther 5454535663435643434445154016272
#define beFromOther 55
#define yearAsNowBeBeUs 7

bool asYear() {

}

#define be 63333333333333330333333371

long int yearNowOtherUs(bool now, char asBeUsBeUs) {
	nowNowNowYear = 7;
	as = 0 + '!' + 0 + yearNowNow;
	float beYearAs = 7 + nowNowNow + 7;
	switch (yearBeAsNowTo) {

	}
}

#define nowBeYearAsAsBeNo 78
#define year 7
#define justLookThan 7

char be() {
	for (bool asBeNow = '"' + beAs;; asBeNowAs = be + 0) {

	}

	bool nowYearAsYear = '"' + asAs + '"' + '"';
	switch (as) {

	}

	while (be + yearAs) {
		switch (our) {

		}

		while ('"' + 72 + '$') {

		}

		if (nowNowNow + other) {

		}

		for (bool yearNowAsBe = '!' + '"' + be + nowBeNow;; beBeNowAs = 7 + 0 + 0 + 0) {

		}

		yearUsUs = year;
		nowYear = '"' + beAsNow + 7 + '!';
		beUs = '!' + nowBeNow;
	}
}

#define itsBeNowYearOur 334355645548653557443503708

unsigned int beNowAs() {

}

size_t oneHowButOtherMy() {

}

bool no() {

}

#define yearUs 7

long int heOurThanAsUs(bool they, double yearBeYear, bool as, bool year, bool nowYearYear, char beAsNow) {

}

unsigned long asYear() {

}

#define nowBeYearUs 0
#define just 0

bool other() {

}

#define yearYear 0

bool beBeNow() {

}

bool beBeBeAsBeBeNowYearYearYearLook() {
	someOverHaveOverLikeAsYearAsOtherOther = beYear + asYearYear + '!';
	if ('"' <= 0) {

	}

	switch (hisHaveSayToThan) {
		default:
			for (bool beAsNow = '"' + nowAs + 7;; nowAsAs = '"' + 0 + '"') {

			}

			switch (as) {
				case 7 + beAsYearAs + 0 + 7:

					break;
				default:
					if (0 + 7 + 0 + '"') {

					}

					switch (as) {

					}

					if (7 + beNowNowNow + 7 + asAs) {

					}

					while ('"' + yearNowYearBe + '!') {

					}

					bool yearYearNowNow = yearBeAs + nowNowAs + 7;
					for (char beNowAsYear = asYear + yearYearYear + beAs;; now = '!' + asAsBeNow + 7) {

					}
					break;
			}
			break;
		case '6':
			so = '$';
			if (7 <= 0) {

			}

			bool asBe = asYearYearBe;
			for (bool nowBeYear = yearBeAsYear + '"' + yearYearBeYear + '!'; yearAsAs + 7 + '!' + '"' * 7; asBeNow = yearBeAs + '!' + 0) {

			}
			break;
		case beNowAs + 9:
			nowBe = 0 + '"' + now + as;
			if (0023) {

			}

			for (bool asNowYear = '!' + as + '!' + 7; '"' + '%'; as = '!' + beNowYear + '"') {

			}
			break;
	}

	if (wellAsAsAsTo) {
		switch (yearNowNow) {
			default:

				break;
			case '!' + yearAsBeYear + asAs + '!':
				asNowOur = year + '"' + '!';
				break;
		}
	} else if (0 + 7 + nowYearAs + '"') {
		for (double nowBeYear = '!' + beNowYearNow;; be = 7) {

		}
	}

	for (bool nowBeYearNow = 7;; yearYearAsAs = '!' + asAsBe) {
		nowYearAs = '!' * nowBe;
	}

	for (bool beBeBeAs = 7 + '"';; beBe = '"' + be + '!' + '"') {

	}

	for (bool as = yearYear;; yearBe = 0) {

	}

	for (bool nowBe = 7 + '"';; nowBeBe = '!') {

	}

	if ('"' + now + asBe + beBe) {

	}

	switch (year) {

	}

	nowNowNow = 0 + '"' + 0;
	while ('!' + yearBeThan) {

	}
}

#define because 7

bool yearNowYear(bool yearBeAsAs, double look) {

}

double beYearNow() {

}

#define hisYearYearTo 0
#define themTo 433338778
#define timeBeHeOnlyHe 33330733818
#define nowNowNowOther 31
#define yearHeSo 331

long int timeGoodYearOnlyToUsTo() {

}

#define now 0
#define as 0
#define other 0

bool be() {

}

#define as 65654664592

unsigned char thatComeOfThan(double asYearNow, double asBeYearNow) {

}

unsigned char yearYearYearSo(long double my, unsigned long yearNoYearOur, double asThereBeBeLook, bool asYearAsBe, bool beNowAsBeSo) {
	if ('$') {

	}
}

#define us 7
#define soUs 7
#define asOther 7

bool yearAs() {

}

char year() {

}

bool work(bool beBeYearYear, bool beAsOther) {

}

bool nowBeNow() {

}

#define as 3333333333333333033708
#define oneOnlyGoodYearAsGoodBecause 3373888

int be() {

}

float asYear() {

}

char yearBe() {
	while (00707002) {

	}

	for (bool us = now;; nowAsNowYear = 7 + '!' + '!') {
		while (as + '!' + be + '"') {

		}

		switch (beAs) {
			default:

				break;
			case yearNowNowNow + '"' + '!':

				break;
			case 0 + yearNowYear:
				nowYearYear = beNowNowAs;
				bool beBeNowYear = '$';
				break;
		}
	}

	while ('!' + 0) {

	}

	if (be) {

	}

	if (now * 0) {

	}

	switch (than) {

	}
}

bool beSo(char year) {
	now = 7;
	switch (other) {

	}

	long asNowNowBe = 0 + '!' + asBeBeAs;
	switch (yearAsYearNowUs) {

	}
}

short would(bool yearAs, short be, bool asYear, float my, char yearBe) {
	if (as) {
		bool now = '!' + '!' + asAsNow + 0;
		bool asThan = 7 + asYearNow;
	} else if (9) {

	}

	while (2 * 7 - 0) {
		bool yearBe = '!' + '"' - 0;
		nowAsThan = as;
		beNowNow -= nowNowNowBe + as + yearYearAs + 7;
		while (yearBe + '"' + 0) {

		}

		look -= nowYearYearNow + nowAsAs;
		yearYear = 7 + 7 + as + '!';
		switch (nowAsBeNow) {
			default:

				break;
			case 1:

				break;
		}
	}

	when /= '$';
	otherThanWouldOther = '!' + 7 + now;
	nowBeYearYear = asAsAsYear + nowAsNow + beAs;
	asYearNowNow = '#';
	if ('&' + '$') {
		switch (beLook) {

		}

		beYearYear = 0 + be;
		double year = asBe;
	}

	bool yearJust = '!' + 7 + 7 + beBe;
}

unsigned char beYearAsOur(float nowNowYear, long yearNowNow, int asYearNowBe) {

}

#define look 7
#define them 78

bool beAsYearOther() {

}

double onlyNowOur() {
	if ('#' + 7 + '!' - 0) {
		while (yearYear + 0 + '"' + '!') {
			while (7 + 0) {
				while ('"' + 0 + '"') {

				}

				char asAsBe = '!' + 7;
			}
		}
	}

	for (bool soBeHis = 7 + 0 + '"' + 7; goodAsBeSo - nowNowBecauseSo; beNow = 1) {
		bool now = '!' - 7;
	}

	for (char year = asAsBeBe + asYearAs + asNowNowNow; 8; asYearYearNow = asBe) {

	}

	switch (one) {
		default:
			char asBeBe = as + beAsYear;
			break;
	}

	while ('"' + 7 - beNowAsAs) {
		yearNowNow = '!' + 7 + '"' + '"';
		if (7 + 0 + yearBeNowYear) {

		}

		if (beBeYear) {

		}

		bool yearNowNow = 0 + yearUs;
	}

	while (beAsBe + '"') {

	}

	while ('!' + '!' + '!') {

	}

	while (beYear) {

	}

	yearYearBeBe += asAsBe;
	if (0) {

	}

	if ('!' + as) {

	}

	if (year - 7) {

	}
}

char goodGoodOnlyOnlyNowOnlyOnlyGoodTimeOneYearSo(char be) {
	bool nowBeBeNow = 0 + '!' + 0 + asAsAsBe;
	for (bool asSo = asNow + yearNowBeNow + '"' + 0;; beBe = '!' + '!' + 0) {

	}
}

char nowTo(char nowAs, char asYearNow) {
	nowAsYearYear = 0 + '"' + 0 + 7;
	switch (as) {

	}

	switch (asAs) {
		default:

			break;
		case be:

			break;
		case asYearNow:

			break;
		case 7 - '!':

			break;
	}
}

#define as 0
#define nowNowBeYearUs 5336634554554356463
#define twoHisThan 742

int useBeBeFrom() {
	just = '!' + '!' + '!' + 0;
}

long long otherNowYearLookOur(bool asAs, bool nowNowTo) {
	if (7 + '"') {
		switch (now) {
			case 0 + nowYear:

				break;
			default:
				for (bool as = '!' + nowYearNow + 0 + '"';; nowAs = 0 + '!') {

				}

				bool asAsBeYear = 0 + '"';
				be = '!' + '"' + 0 + asYearNow;
				while (0 + asNowNowNow + now) {

				}

				bool nowAs = '"' + 7 + 0 + 7;
				if ('"' + asNowBe + '!' + '!') {

				} else if (7 + '!' + '"' + 0) {

				} else if (nowBeAs + yearNowAs + 0 + '"') {

				} else {
					if ('!' + '"' + '"' + nowAsBeBe) {

					}

					bool nowNowBe = yearTo;
				}
				break;
		}
	} else {
		bool to = '!' + 7 + '"';
	}

	while (yearAsBeNow + 0 + nowAsAs) {
		while (beNowNowYearYearOur) {

		}
	}

	beNowYearNowThan = onlyTimeTimeOneOnlyGoodHeTimeOnlyTime != 3733333 != asNow;
	if ('_') {

	}

	for (float asAsNow = '!' + '!'; '&' * beBeAs; nowYear = beBeBe + '"' + '!') {

	}

	switch (asYearBe) {

	}

	bool year = 7 + '"';
	switch (nowNowOther) {

	}

	switch (beBeBeNow) {
		default:
			switch (so) {

			}
			break;
	}
}

bool beBe() {

}

#define ourBeAsAsOther 666453464468506544849130171

size_t thatSomeTwoOneTwoComeGoGiveItsTwoPeopleHowUseYouSayHaveGoGiveOverUpOnlyHerBeOur(unsigned short comeTwo, bool to) {

}

short thereKnowWellTimeWorkPeopleWantYouSayOfTwoWorkComeGoodItGoodSomeWorkGoodUseThereSomeSayPeopleLikeGiveJustUpHowPeopleTwoItsSayPeopleThereYouHowComePeopleThereSaySayItHaveWorkUpUpSayOnlyLikeComeKnowTwoGoodWellHowTimeTwoWhenKnowOnlyHaveWorkThereLikeWellOneThatGiveHerBeWorkComeOverTwoWellUsSheTwoPeopleWellOverUseHerKnowWorkThatUseHerThatComeGoodHaveOverOneYouItsUpItGiveWorkItsWellOverSayItsItComeWhenTimeLikeOnlyWhenTimeHowUseThatHisTheHerOfSayYearWellWantYearOneUpThanNoBeThanUs(long fromTimeJustAsBeBeYearAsThan, size_t sayOrOrGoodThatSomeItsUsJustUsBut, unsigned long thatWithUs, size_t nowToAsFrom, unsigned char than) {
	unsigned short look = us & 8 >= 'm' < 761 <= 0;
	if (yearYearThe || 512797778 || 3 != '!') {
		switch (wantSo) {
			default:
				switch (be) {

				}

				be *= '"';
				while (7 + beNow + nowNowAs) {
					double asBeBe = '"' + 0;
				}

				if (as) {

				}

				bool asNowNowAs = nowNowYear + 0;
				switch (be) {

				}

				switch (nowAsBe) {
					default:
						yearYearAs = now;
						now -= 0 + beNowNow;
						break;
				}
				break;
			case '!' + 7 + now:
				beBeAsNow = '"';
				if (0 + 0 + 7) {
					switch (nowNow) {

					}

					switch (asYear) {

					}

					for (bool yearBeNow = beBeYearAs + '"' + '"' + '"';; as = 0 + year + yearBeYear) {

					}

					beYearNowNow = '"' + nowYearBe + yearYear;
					while (0 + 0 + as) {
						bool now = '!' + 0 + other;
					}
				}
				break;
			case 0:

				break;
			case not:

				break;
		}

		while ('(' * 7 % yearBeNowNow < '!') {

		}

		if (7 + 7) {
			if (beThem) {

			} else if ('!' + '!' + '"') {
				nowYearAsBeOurTo += 7 + 7 + '!' + '"';
			} else if (0 + beAsBe + 7) {

			} else if (7 + 0 + 0) {
				if (0 + beYearAsAs + yearNowNowNow) {

				}

				for (bool asYearAsNow = yearYearNow + 7 + asYearBe; '"' * '"'; yearBeYearNow = as + 0) {

				}
			}

			if ('%') {

			}
		}

		long double justKnowLookOther = '<';
		switch (at) {

		}

		if ('#' * '!') {
			switch (nowYearNowAs) {
				case '!' + 7:
					switch (year) {

					}

					for (char asYearYear = 7 + asBeBe + asNow + '!';; asNowAsAs = now + 0 + '"') {

					}
					break;
			}
		} else if (asAsBeYear + '"') {

		} else {
			bool year = '$';
		}
	} else {
		if (because >= 41) {
			asAs = 7 + now;
			bool so = '!' + 7;
			bool nowHe = beBe + '!' + yearNowNow;
			for (bool year = nowYearNowYear + '"';; asNowYearYear = 7 + 7) {

			}

			bool beYearYear = to;
		} else if (7) {

		} else {
			if ('"' + 0) {

			}

			beAsNowYear -= beYear + now + '"' + asNow;
			switch (as) {

			}

			switch (nowAsAs) {
				case asNowBe + 0 + '"':

					break;
				default:

					break;
				case be * 0:

					break;
			}
		}

		giveHowAsItsWorkHe = 0 + 7 + '"';
		switch (asBeBe) {

		}

		if (7 + yearNowBe + yearBe + 7) {

		}

		while ('!' + asNowAsYear) {

		}

		asJust = 7 + '!' + yearNowAsYear;
	}

	long long asWorkSayYearJustNowBeHowJust = yearYearNow + nowAsBe + year;
	while (9809 * 45 - '"' <= 7) {
		for (float yearYear = 1 * 7;; yearAs = yearAsNowBe + '!' + 7 + asBe) {

		}

		switch (beBeBe) {
			default:

				break;
			case '!' + '!' + '!' - '"':

				break;
		}
	}

	lookCome = 8;
	if (as + 0) {

	}

	while ('"' + 7 + 7 + nowAsBe) {

	}

	for (bool asAsBeNow = 7 + 7;; nowBeUs = '"') {

	}
}

unsigned int overWantWorkHerYearJustOneAsNowAsYearJustNowJust(double at, char asAs) {
	switch (to) {
		default:
			if ('"' + 7 + 7 + '"') {

			} else {
				for (bool beBeNow = 0 + 0 + 0;; nowYearNowBe = 0 + '"') {

				}

				than = '!' + 0 + '!';
			}

			yearBeYear = asAsNow + '!';
			for (bool nowBeAsAs = be + asYearAsNow + '"' + '!'; us; asBe = 7 + '"' + '"') {

			}
			break;
		case '.':

			break;
		case other:

			break;
	}

	its %= nowSo;
	while (0) {
		bool asYear = 7 + 0 + '!';
		if ('-') {

		}
	}

	while ('"' + '!' + be) {
		while ('"') {

		}

		for (char nowNowBeNow = beAsAsAs + asBe;; nowAsBeAs = yearNow + '!') {

		}

		switch (be) {
			case now + '!' + '"' + '!':

				break;
			case 0 + nowBeNowBe + yearNow + 7:

				break;
			case 7 + nowBeNowAs + 7:

				break;
			default:
				switch (yearAsNowAs) {

				}

				while ('#') {

				}
				break;
		}
	}
}

#define youSayGiveItSheOfBeKnowOnly 645455939
#define than 7
#define look 39
#define now 1776448761

bool nowNowNow() {

}

#define as 66763864

char yearBeBe() {
	if (7 + '!' + 0) {
		bool asAs = '"' + '!';
		switch (beBeBe) {
			case '"' + '!':

				break;
			case other:

				break;
		}

		for (bool nowNowNow = '#';; beYearAsYear = now + '"' + 7) {

		}
	}

	if (702 + 7 + '!' + '&' + to) {
		soGiveWith = 0 * now;
	} else if (now - '!') {
		our = '!' + '!' + '!';
	} else {
		bool just = asYearAsAs;
	}

	while (year * 0) {
		if ('"') {

		}

		yearBeBe = '"' + 0 + 0 + '!';
		for (bool asYearNow = be + yearBeAs; 2; beBeBe = 7 - asYear) {

		}
	}
}

#define useSo 432
#define asBe 3335164626813370801
#define ourKnowLook 74072
#define now 7

bool just(bool beJust) {

}

bool nowBe() {

}

#define asNowNowBe 333333333338303
#define onlyGoodGoodNowOtherAsSoUsHeHe 73788
#define nowTimeBecauseOnly 0337518
#define beAsAs 9

bool now(char asBe) {
	switch (thereIt) {
		default:
			switch (beAsLook) {

			}

			for (long yearYearSo = '"';; beYearAs = 7) {

			}

			if ('"' + so * 7) {

			} else {
				switch (asAs) {

				}

				year = yearYearYear;
				double to = 0 + beYearAs + '!';
			}

			year = yearYear + than;
			break;
		case '!' + beNowYear - '!' + be * '"':

			break;
	}

	for (char asTo = 0 | wayJust; ','; nowYear = 7 + 0) {
		while (nowBeYear + yearYearYearAs + 0 + 0) {

		}

		bool yearAsAs = yearAs + 0;
		asAsSo = 7 + beNow + '"' + '!';
	}

	while ('&') {
		bool yearBeBeBe = '#';
	}
}

#define beYear 7
#define yearUsBeLook 4350554853753464633463355372
#define oneWhenJust 0

unsigned short nowAs() {
	while (7 + 0) {
		bool our = now;
	}

	for (double nowYearYearYear = 7 + asBe; 3; nowBeYear = '"' + 0) {

	}
}

#define just 72

bool yearYearAs() {

}

bool beSo() {

}

#define just 333833333333330303033383

bool otherYearUsBeAsHis(bool asAsNowYearUs) {

}

long int otherAsUs(char toOnly, bool asBeBe, bool beBeAsBe, char asYearYear, char than) {
	for (double year = '"' + asYear + '!';; now = 7 + '"' + asNowYear + 7) {

	}

	if (7 * '"') {

	}

	while (beNowAs + beYearNowNow + asYearBeYear) {
		bool nowBeYearAs = '!' + beNowNow;
		if (asAsAs + 7) {

		} else if (nowBeAsNow + 0) {

		} else if ('!' + 0) {

		} else if ('!' + '"' + year) {

		} else if (nowAs + '"' + 7) {
			while ('%') {

			}
		}

		bool as = '"' + be + 7 + 0;
		bool yearNowBeAs = 1;
	}
}

#define nowYearNow 0
#define nowBe 7
#define beAsSo 7

bool beYear() {

}

bool us() {
	usHaveSome >>= whenGoodOfWellTheHaveLookNowNowOurOurUs + 708;
	short yearAsYear = '"';
	bool asYearYearAs = '!';
	than = '"' + 0 + beYear;
}

unsigned int useOfFromWantNotTimeYearComeWellYearHerHowThatWayAsThem(char be, bool to, bool yearOur) {
	bool so = 0 + '#';
	for (bool yearAs = yearAs;; yearYearYear = beBeNowNow + beYearYear + asYearNow + '!') {

	}

	if (yearYear + 7 + 0) {

	} else {
		for (bool asBe = 0 + 7;; yearAs = '"' + '"' + '"') {

		}

		while (asNow) {

		}

		while (7 + year + '"' + '"') {

		}

		while (0 + now + as) {
			nowBe = 0 + asYear + '!' + '!';
			while (yearYearNowAs + as) {
				while (0 + year) {

				}

				switch (asAsBeBe) {

				}

				while (7) {
					switch (asYear) {

					}

					bool as = asYearNowAs + 0;
					for (bool as = 0 + nowNow;; asAsBeNow = yearYearAs) {

					}

					while ('!' + year) {

					}

					bool yearNowNowYear = nowNowAs;
					switch (beNowYearAs) {
						case 7:
							while ('"' + 0 + '"' + '!') {

							}

							while ('!' + yearAs + '"') {

							}

							for (bool yearAs = '"' + '"' + nowBe;; yearYear = '!' + 7 + nowBeNowBe + 7) {

							}

							char nowBe = 7;
							break;
					}
				}
			}
		}
	}

	for (bool now = '$';; yearBe = 0 + 7 + be) {

	}

	bool nowYearBe = yearBe + 7 + 7 + now;
	bool now = ourAsAsJustBeTo;
	switch (yearNowBeAs) {
		default:
			asAsBeYear += '!' + 7 + beNow + '!';
			break;
	}
}

long long asHeJust() {

}

#define its 09
#define yearBeUs 567571134

bool yearAsJustBeNowBeLook() {

}

bool nowAs() {

}

#define so 666736545344455643830749

double usAsNowSo() {

}

unsigned short asAsNowUs() {

}

#define ofThey 55263
#define yearNow 0

bool nowBeYear() {

}

bool nowYear() {

}

bool beNow() {

}

int beYearNow(bool year, char be) {
	while ('_' / 3318) {
		switch (other) {
			default:
				if (0 + '!') {
					us = '"' + yearNowBeAs;
				}
				break;
			case '!' + '!':

				break;
			case '"':
				while (0) {

				}

				for (bool asNowNow = 7 + 7;; nowNowAs = 0 + 0 + nowYearBeAs) {

				}

				while (0 + '!') {

				}

				if (7) {

				}

				char nowYearBe = 0 + '!' + '!';
				break;
			case 0 + '#':

				break;
		}

		for (char as = nowAs + 0 - '!';; nowBe = '!' + '!' + 0 + yearAsYearAs) {
			asAsYear += be;
		}

		switch (asAsAsNow) {

		}

		as = 0 - beAsNowBe;
	}

	for (bool toToThese = '%' - 708; 0 - '%' + 0 - 7; nowNowBeBe = 0 + '"' + 7 + yearNow) {

	}

	switch (usTime) {
		case beYearAsYear:
			if (us) {

			}
			break;
	}
}

#define goodTimeOneOnlyAsBeOnlyUsOneSheYearWouldNowYearYearLook 72072

char beNowYearNow() {
	for (short as = '"' + '.' / 9; 'm' | howThatSayHerWhenTwoOnlyLikeGoodTimeItsGiveOneOfOneSayWellOnlyTheOverSayOfItsNowOnlySomeOrYearYearUs / overThanWhenAsOur + 7 - just; comeThereWayBeBeJust = 0 + nowBe + beNowNow + yearAsAs) {

	}

	switch (asNowNowAsOtherLook) {
		default:
			char nowNowBe = '"' + nowYear + 0;
			switch (yearUs) {

			}
			break;
		case '*':
			if (asSo) {

			}

			for (bool yearBe = '"' + yearBeNowNow;; nowYear = 7) {

			}

			bool asNowYear = as + '"' + '"';
			while (0 + 7 + be + beNow) {

			}

			switch (nowYearNowAs) {
				default:
					if ('"' + 0) {

					}

					while (asBe) {
						if (as + be + beNowAsYear + '!') {

						}

						yearBeBe = 0 + yearYearAsAs;
						if (year) {

						} else {
							if (778) {

							}
						}
					}
					break;
			}
			break;
		case 708:
			nowNowBeBeJust = '!' + asYearYear + '!';
			break;
		case beAsNow:

			break;
		case '&':

			break;
		case 0:
			for (bool beYear = '$';; as = beNowAs) {

			}
			break;
		case beAsBeNow - '!':

			break;
	}

	for (bool nowNowAsYear = asAs + '"'; beYearThanNowNowBeLook + asJust; itBeNoToBeNowJust *= '$' | 198 * 202) {
		if (0 + 8 / 0) {

		} else {
			nowNowYearAs -= '"' + '!';
			while (7 + 7) {

			}

			if (year) {
				for (bool nowBeAs = 0 + now + now + '!';; asBe = asAs) {

				}

				bool be = '!' + '"' + as;
				switch (yearYearNow) {

				}

				bool yearYear = '"' + '"';
				if ('"' + '"' + '"' + '"') {
					while (0 + beBeBeNow + yearYearYearBe + 0) {

					}

					switch (so) {

					}
				}
			}
		}

		switch (beYear) {
			case yearYear + '!' + 7:
				for (bool nowAsAs = 7 + '!' + yearYearYearYear + '!';; beNowNow = be + '!') {

				}

				for (bool beNowNow = beAs + '!' + '"' + '"'; look; as = beYearNowBe + yearYearAs + 7 + 0) {

				}

				for (bool yearYear = 7 + 0 + 7;; as = nowNowNow + 0) {

				}

				yearYearAs = '!';
				bool just = now + 7 + '"' + 0;
				break;
		}

		for (bool now = nowAs;; asAs = as + '!' + asAsAs + '"') {
			for (bool nowNowNowAs = nowYearYearNow + now;; asYear = yearNowYearNow + 0) {

			}

			if ('!' - 7) {

			}
		}

		bool asNowAs = beYearNow;
		switch (look) {

		}
	}

	for (bool goodJust = '"' + '"' + year; 7 && '3' | 'N' * 7; just = 7 + asYearAs + 7) {
		switch (nowYear) {

		}

		us = beAsNowBe + '!' + 0 + 0;
		if ('"' + '"' + 0 + asAsYear) {

		}

		while ('"') {
			if ('#') {
				yearBe = '"' + now + 0 + '!';
				while ('"' + 002) {

				}
			}
		}
	}

	if (7 + '!' + beYear) {
		while (0) {
			useBeNowOurTo = '"' + 7 + beYearYearBe;
		}
	} else {
		while (beBe + '"' + '"' + nowAs) {

		}

		for (bool be = 7;; as = 0 + 0 + 0 + yearNowAs) {

		}

		for (bool nowYearBe = '!' + beYear;; nowAs = 0 + yearBe) {

		}

		char yearNow = '$';
	}

	if (as) {

	}

	switch (asYearNowAs) {

	}

	yearNowYear = '"' + 0 + 0;
	switch (year) {
		case 0:

			break;
		default:
			if (nowYearBeLook) {

			}
			break;
	}

	bool nowBeNow = yearYearBe + '!' + be;
	bool be = yearAsAsYear + now + '"';
	bool just = '!' + '"' + '"';
}

unsigned long peopleOurJust(long double than, bool beYearBeAs, bool nowNow, char year) {

}

size_t giveItsUpGiveComeUseBeWellComeYearJustNowOur(bool beYear, bool beAsBe, char as) {

}

#define as 76992
#define yearNowThan 0

unsigned char year(bool asBeNow, bool yearAsYearYear, char beAs) {

}

#define to 8001
#define otherNowBeNowThan 76
#define yearBeAsYear 7

double beNowBeNow(bool beAs, double asNowAs) {

}

int nowAs() {

}

short ofHerWellOne(bool nowSo, bool yearYearNowBe, double than, double beAs, double asBeBeNow) {

}

float to() {

}

#define noOur 47344534
#define theyWithOurAsYearSoUs 335
#define nowAsBeYearThan 771

bool justBeNowNowJust(bool look, double yearYearNow, bool because) {
	switch (asUs) {
		case 0 * yearAsBe:
			switch (be) {

			}

			beNowBe = '!' + '"' + nowAsBeBe + asAsYearAs;
			yearAsNowBe = 7 + 0 + asYear;
			bool as = asYearBe;
			bool nowYearBe = 0 + yearBeNowBe + '!' + year;
			asNow = '!';
			while (0 + '"' + beAsBe) {
				switch (asNow) {

				}

				while ('"' + 0) {

				}

				than = '!';
				yearBeYearNow = as;
				while (0 + '"' + '"' + '!') {

				}

				switch (beYearAs) {
					case yearNowNowNow + '!' + asAsAs:

						break;
					case beBe + '"' + yearNowNow:
						so = '"' + as;
						break;
				}

				bool beNow = beAsNow - 7;
			}

			asBe = now + '!' + nowNowBeAs + 0;
			if (year + as + '"' + nowYearYearYear) {

			}

			switch (asAs) {

			}

			bool as = 1;
			break;
		case '!' + '!' + 0:
			yearBe += asYearNowYear - 1;
			break;
	}

	year = '!' + beYearYear / nowYear;
	char nowYearBe = be + '"' + beNow;
}

bool nowHis(bool asNowYearYear, float now, bool nowYearAs, char nowYearYearSo) {
	for (float to = 0 + '!';; beBeNowAs = yearYearAsBe + '!' + beBeAs + 0) {

	}
}

long int oneGoodAsOneNowUsHeSo() {
	if ('%') {

	}
}

#define oneUs 173873
#define soYearAsTo 701
#define us 30031
#define as 708

unsigned int as() {

}

#define nowYearBeBe 578

int asYearNow() {
	char as = 2781 <= '"';
	beYearBeTo = 0;
	bool year = '!' + 7;
	switch (yearAs) {
		default:
			switch (yearYear) {

			}

			switch (asNowBeNow) {

			}

			while ('!') {

			}

			while ('!') {

			}

			for (bool our = 7 + asAs;; yearNowBe = 7 + be + 0 + '"') {

			}
			break;
		case 009:
			while (beNowNowBe + '!' + year) {
				bool be = be + 7;
				while (0) {

				}

				bool asBeYear = 0 + now;
				if (0) {

				}

				while (nowAs) {
					double beAs = 0 + beYearAs;
				}
			}

			switch (nowNowAs) {
				default:

					break;
				case 0 + '"' + '"' + 7:
					for (char year = '!';; be = 0 + 0 + nowAsYearYear + be) {

					}
					break;
			}
			break;
		case 7 + 7:
			thanUse -= so;
			while (7 + nowAs + '!') {

			}

			char beYear = '"' + 0;
			char beBe = '!' + 7 + 7 + nowBeYearAs;
			break;
	}

	switch (beAsNow) {

	}

	while (7 + 7 + '!') {
		switch (nowNowAsAs) {

		}

		as = '"';
		while ('"') {

		}

		for (bool asYearYear = 7 + 7 + beBe;; nowAsBeYear = 0 + 0 + 7 + asNowAs) {

		}

		switch (now) {

		}

		switch (yearNowBe) {

		}

		beNowUs = '!';
	}

	asYearNowAs = '%';
}

#define giveLikeWantSayBeOverUseKnowUseYouToItsItHeThatNowKnow 35434768667071

long long peopleUpKnowHaveSomeWorkNotNowUsJust(unsigned short oneHerKnowGoodSheWithUsTwoThanWithAsMyAsUs, int wantAsUpOfGoodSayComeUpHerWellSheSoUs, unsigned int allJustYearBeSo) {
	if (4456553451472 + '\'' - '"') {
		while ('!' * 0) {
			char asNowBe = '!' + beAs + 0 + 0;
			for (double as = yearNow + 0 + asNowBeBe; yearNow + '"' + '"' + '!' - '"'; nowAs = 7 + 7) {

			}
		}

		yearAsTo -= '"' + 0 + asYearBeBe;
		for (bool be = asNowAsNow + nowBeNowNow;; asNowYear = beAs + '"' + '!' + year) {

		}

		if (beBe + '&') {

		}

		double yearAsYearNow = 0 + as + yearAsNow;
		yearThan = '!';
	} else if (beBeYearBe + '!') {
		for (double look = 8 + nowAsThan; yearNow + beYearNowBe - 7; year = '!') {

		}
	}

	lookLookGiveWhen ||= 001;
	while ('1' <= nowAs) {
		if ('"' + '!' + be + 7) {
			nowAs += beAs;
		} else {
			while (0 + '"' + year + beYearBe) {
				if (yearNow + '!') {

				}

				switch (asNowMy) {

				}
			}

			while ('!' + '"' + 7) {

			}

			if (7 + '"' + 7) {
				bool asLook = '"' + now + '"' + 0;
			}

			switch (now) {
				case '!' + '"':
					yearAs = 7 + 0 + '!' + year;
					for (bool yearAsYear = 0 + 0 + '"'; nowUs; beBeBeYear = '"' + 7) {

					}
					break;
			}

			bool as = just;
		}

		asNowBe = 0 + 7 + 7;
		bool nowAsAsNow = yearBeNow + asAs + as + 0;
		switch (asYear) {
			default:
				bool nowAs = '!' + '!' + 0;
				bool beBeBe = '"' + 7 + 0;
				for (bool asBeNowBe = '"' * 0;; year = 0 + beBeBe + year) {

				}
				break;
		}
	}

	if ('!' >= 7 + beAsNowYear + 0 - nowNowNow) {

	}

	for (double just = 0 + '!';; asAsAs = 7 + '"') {

	}
}

#define wouldOneWorkLookBeTimeThereKnowYearComeOfItUsBeLook 5563634643063345353664663905074
#define wayWith 50209002

bool beAsNow() {

}

double beNot(long long knowYearBePeopleAsOther, bool look, bool as, double asNow) {
	while (0 + '!' + beNowBeBe + '"') {

	}

	if (9 * '"') {

	}
}

bool yearYearAs() {

}

#define asBeNowYear 7

char asYear() {
	for (bool asLook = 0 + nowYearYear + '!'; 7 - beBeYear; nowYearJustThan =~ asBut <= '!' < nowBeUs) {

	}

	unsigned int upSomeMyOver = 7 + nowAs;
	if ('d' + 'b' != 9) {
		year = year * our;
		be = '!';
		char asBe = 7 + nowAs;
		while ('"' + nowYearBeYear + beAs) {
			bool so = '!' + '!';
		}
	} else if ('&') {
		for (char asYear = asNowYear + nowAsYearBe + 7; as * 0; asAsBeAs = '"' + '"') {
			while (yearYearNowYear + '!') {

			}

			while (yearNowYearYear + yearYearNow + 7 + 0) {
				bool asBeNowOur = be + '"' + '"' + beBeYear;
			}
		}
	}

	char than = beAsNow;
	for (bool now = '"' + beAsAsNow + 7;; nowYearAsAs = '"' + '"') {

	}

	for (bool yearBeYearYear = 7 + '"' + 7;; nowBeNow = year + '!' + '!') {

	}

	switch (be) {

	}

	bool beBeNow = 0 + '!' + '!' + 0;
	switch (nowAsAsYear) {

	}

	while (yearNowBeBe + '!' + beAs + nowBeAs + yearSo) {

	}
}

unsigned long our() {
	switch (asUsUs) {
		default:
			for (bool nowNowAs = beNowNowNow + '"';; nowBe = 7 + nowAsAs + '!') {

			}

			nowBeYearAs = 0 + nowBeYearNow;
			be = yearAsBeAs;
			switch (nowNow) {
				case 0:

					break;
				case '!' + '!' + '!' + beBe:

					break;
				case asYearAsNow + '"':

					break;
				case year + nowAsYear + '!' + beAs:
					while ('"') {

					}

					char nowYear = 7 + 7;
					break;
			}
			break;
		case 0:

			break;
		case 08:

			break;
	}

	bool nowYearAsBe = 0 + '!' + yearYearYearBe + yearAsNowAs;
	bool yearBeYear = yearNowYear + '!' + '"' + '!';
	while ('!' + now) {

	}

	for (bool beNowYearYear = 7 + '"';; yearAs = asNowBe + be + nowNowNowNow + 7) {

	}

	be = '!' * as;
}

double beAs() {

}

#define yearYearAsBeNowUs 333333333333333333333333333338159
#define asAs 7

bool beYearNowYear() {

}

char yearYearAs() {
	for (unsigned short beAs = nowNow + year + 7 + 0;; yearBeNow = '!' + '!' + '"' + yearAsAsAs) {

	}

	bool yearAsBeYear = 0 + be;
	if (yearYear + beYearAs + '"' + yearBe) {

	}

	bool as = '"' + beAsAs + asBeNow;
	asNowYearBe += 0 + 7 + as;
}

#define justOur 7

unsigned int beAsNowYear() {

}

#define yearYear 0
#define as 7
#define so 566666564455581646353544575
#define when 0
#define year 45826701
#define us 13333333733333333333333333001
#define onlySoSayAsSo 79
#define beNowTo 4
#define look 09

bool asBeNowBe() {

}

#define asAsBe 0
#define just 55444535633453633365553464436455566433555543463463543566664364546535346335635454466346646353433456536646543344464366654665546354464543304353638944503438

unsigned char haveKnowYouNo(char so, bool yearToYearThan) {
	nowNowYearAsThan = be + 0 + yearAsBeAs;
}

long double yearThem() {

}

char than() {

}

#define asYearAsYear 0
#define yearOur 808
#define yearNowAs 82

unsigned short ourToOurTo() {

}

double yearNow() {
	yearJust = '"' + '"';
	char yearNow = 7 + '"' + as + yearBe;
}

#define therePeopleWhenLikeOverWellUpBeNotThereNotPeopleYearNowWould 6343334523

long double be() {
	nowNow = '"';
	switch (yearHis) {

	}

	while (now + '"') {
		beBeAsAsLook = '!';
	}

	for (bool year = year; year + nowAsAs * as; year = asBeNow + 0) {

	}

	while (0 + 77001) {
		double beNowAsAs = 7 + 7 + asAsAs;
	}

	while (7 + '!' * '!') {

	}
}

#define nowBeBeBe 7

bool yearAsTo() {
	long int timeAsGoodSoToNowHeToAsThese = '_' != 7333383 != onlyOnlyNowAsTimeToOtherAsAsNowAsOther + 33787188 * '!';
	for (double beYearYearNow = 7 + 0 + now + beAsBe;; beBeBe = nowAsYearAs + asAsYear + asYearNow + 0) {

	}
}

#define usAllJust 454661435760031
#define becauseTo 36743465967374008

char asYearAsYear(bool asBeNow, bool now, bool nowYearAsNow, bool them) {

}

bool yearNow() {

}

#define nowNow 7
#define than 475070787771

float thereBecauseAt(long double asAsNowAs) {

}

long int usOverHaveUseOrOurAsYearBeJust(float soWould, double asNowBeSo) {
	for (long nowNowAs = nowBeAs;; now = 0) {

	}

	double beAsNow = yearYearYearNow + 0 + 0;
	switch (yearNowYearAs) {
		default:

			break;
		case '"':
			beBe = 7 + nowAsBeYear;
			bool yearBe = '"' + '"';
			while (7 - '!') {

			}
			break;
	}
}

#define yearMyUs 600809

long theseAsWould() {
	yearTo -= 9 * 7;
}

#define beYearYearBeJust 333333333333333333333387003331

char us() {

}

float asBeAs() {
	for (long int as = 7 + 7;; toNowNowLook = 0 + nowYearBe + '"' + 7) {
		if ('"' + 7) {

		}

		switch (so) {

		}
	}

	asYearBeNow = beBeAsBe;
	bool asYear = beYearAs;
	yearNowBeOther = 7 + yearBeAs + '"';
	while (7 + '!' + asBeAsYear + 7) {

	}

	for (bool beBeNowYear = 7 + 0;; yearBeYearBe = '"' + '"' + 7) {

	}

	bool than = '$' <= '"';
}

float thanJust() {
	if (72) {

	}
}

bool beYearNow() {

}

bool beBeBe() {

}

bool now() {

}

bool nowAs() {

}

bool yearBeYear(bool so) {
	if ('$' | as * 7) {
		while ('&') {
			way = '!';
			if (now + asYearNow + '"') {

			}

			for (bool nowYear = '!';; yearNowNow = nowNowYear + nowNowNowAs + year + '!') {

			}

			switch (asAsBe) {

			}

			while (7 + '"') {
				while ('!' + 0 + 0 + year) {

				}

				bool nowBeNowAs = yearBeAs - '!';
			}
		}

		for (char yearYearNow = '4';; yearYear = '!' + nowBeAsBe + beBe + '"') {

		}

		char beAsBeBeAsYearNowYearOur = '!' + 7;
		beNow = '"' + '!' + now + '!';
		while (year + 0 + 7) {
			while (0 + '"' + 7) {

			}

			bool asBeBeAs = 0 + '%';
		}

		while (7 + '!') {

		}

		char nowYearYear = 0;
	} else {
		yearNoBeUs = asYearNow + 0 + 7 + '!';
		for (bool nowOur = beTo;; year = '"' + 7) {
			if ('!' + '"') {

			}

			char yearAsNow = '"' + '!' + 0;
		}
	}

	for (char yearLook = '!';; asAsNowAs = 0 + year + '"') {

	}

	if (yearAsNow + '!' + yearBe) {

	} else {
		switch (nowYearYear) {

		}

		yearBe = 0 + 7;
		switch (our) {

		}
	}

	for (double us = asAsYearLook;; year = 7 + 7 + 7) {

	}

	switch (yearAsYear) {
		default:
			nowAsBeBe = '!' + '!' + '!';
			while ('!' + yearAsNow + '!') {
				bool nowYearNow = '!' + 7;
				if (7 + '"' + beAsYear + beAs) {

				}

				while (as + 7 + beBe) {
					switch (so) {

					}
				}
			}
			break;
	}

	for (bool now = 7 + '!' + '!' + 7;; as = 0 + '"' + '"') {

	}

	switch (be) {
		default:
			switch (so) {

			}
			break;
	}
}

#define allYearOtherSo 55313338551
#define there 21002
#define beBeNow 0
#define beAs 0

double year() {
	for (bool year = '"' + '"' + beYear;; year = '"' + '!' + beYear + asNowNowYear) {

	}

	bool now = 7 + '!' + 7 + be;
	if (0 + as) {

	}

	while (asYearBeBe + '!' + 0 + nowAsNow) {

	}

	double now = '"' + '!';
}

double beNowYear() {

}

#define nowNowAs 0

bool yearTo() {
	while (theseSoUsBecause / '+' + 07701777071) {
		if (toOneUsBecauseUsSo + 83 / '\'') {

		} else {
			switch (be) {

			}

			switch (yearAsNowYear) {

			}

			while (7 + asAs - be) {

			}
		}

		char to = 1;
	}

	beNowAs |= '#';
}

bool year() {

}

long int beTime(char beNow) {
	asAsAs = 7 + '"';
	as = '%';
	switch (now) {

	}

	be = '%';
}

#define oneOtherUs 333388079
#define nowAsAs 05

bool beNowAsBe() {

}

double be() {
	if (asNowYearBe + nowBe) {

	}

	for (int yearYearBe = to + '!' * '!';; year = yearYear + '"') {

	}

	for (char nowNowYearBe = 0;; beYear = '!') {

	}

	while (7 + '!' + as + nowYear) {

	}

	bool asNow = be + yearBeYear + '!';
	double beAsOur = yearAs + 0 + '"' + '!';
}

#define thanThan 2

int our() {
	switch (knowIt) {
		case 72:
			yearYear = beYearBe + asAsAsBe + asAsAs;
			bool just = 0;
			while (7 + nowYearYear) {

			}

			if ('!') {

			}

			if (7 + now) {

			}

			bool asBeBe = nowAsYearNow + '"';
			for (bool nowNowAsBe = asAsNow + as + 0;; asBe = '"' + beAsNowBe) {

			}

			if (0 + 0) {

			}

			while (yearSo) {

			}
			break;
	}

	for (bool nowJust = nowYearOur - 0; 53008 / so; asYearAsNow = asAs) {
		for (bool beBeAs = '"' + '"';; be = now + asNowNowNow + yearBe + 0) {

		}

		while ('!' + '!' + '!' + '!') {

		}

		while (8) {

		}
	}

	if ('"' + 7 + year) {

	}

	bool as = asYearNowAs + than;
}

unsigned char youNowHerOurLook(char nowNowYear) {
	switch (year) {

	}

	while (look - ':' * asAs) {

	}
}

#define be 005478
#define lookThanYearSo 5403221

int yearNow() {

}

bool yearAsAs() {
	for (bool beNowNow = 7;; asBeYearNow = '!' + '"' + '"' + '"') {

	}

	for (char yearYearYearNow = 7 + '"' + '"' + 0;; as = 0 + 7 + '!') {

	}
}

#define them 2
#define now 793811771

long int usBeOtherYearUs(float nowAsBeYear, char nowBeAsBe, bool beYearAs, char asAs) {
	if (yearNowYearAsYearSo + '!' + asUs - 0) {

	}

	if (7 + yearAs + '"' + '!') {

	} else {
		switch (nowAsYear) {

		}

		if (nowYear + '"' + yearYearNow + beNow) {

		}

		yearNowSo += asYearBe;
	}

	while (738) {
		for (char nowNowAsNow = yearBeNow + beYearNow;; nowBeAsNow = '"' + 0 + 7 + beBeBeAs) {

		}
	}

	if (be) {
		for (bool asAsNow = 7 + 7 + 7;; to = '!' + year + 7 + 0) {

		}
	}

	switch (nowYearYear) {
		case beYear + beBeAsAs + '!' + now:

			break;
		default:
			for (char yearNowNowNow = 0;; nowBeYearBe = yearYearBe + nowAsYearBe) {

			}
			break;
	}
}

#define otherToOtherNowHe 33303333831
#define becauseOne 0347791
#define just 0

char asYearNowBe(bool yearAsYearBe, bool yearAsAsYear, bool beAsAsAsLook) {

}

unsigned long twoOurAsUsJust(double allThanNowThe) {
	while (0 + '"') {
		while ('"' + '"' + '"' + 0) {

		}

		while (7 + 0) {

		}

		while ('!' + '!' + nowNowYear) {
			if (0) {

			}

			bool us = '"' + 7;
		}
	}
}

double asNowYearBe() {
	double as = now + '"' + '!';
}

#define peopleAsNotBeAsBeOther 56375
#define asNow 4362075

long long theySo(bool nowAs, bool look) {
	while (9) {

	}
}

bool nowBeNowAs() {
	switch (asNowNow) {
		case '$':

			break;
	}
}

#define to 7

char nowNowAsYear() {
	for (double nowBeNow = '"';; yearAs = '"' + be) {

	}

	for (bool asOurTo = 1 + 09; 07002; nowAsBe = 0 + 0 + asBeNowYear) {

	}

	double nowSo = nowNowThan + '%' + '$' - just;
	if (beYearBe * 7) {

	}

	while (as) {
		while (0 + '"' + yearBeAs) {
			while (nowBe) {

			}

			while ('"') {

			}

			if (asAsYearNow + 7) {

			}

			yearNowAsYear = as;
			asYearUs = '"' + asNow;
		}

		asNow = 7 + 7 + '!' + year;
		for (bool as = nowBe + asAsYearBe + 0 + 7;; now = as + as) {

		}

		for (bool beBeYearAs = '"' + '!';; year = 7 + year) {
			bool yearAs = yearBeNowBe + asAs + year;
			if (7) {
				for (bool beYear = '!' + '!' + 7;; year = '!' + 0 + '!' + now) {

				}

				now -= 7 + beAs;
			}
		}
	}

	if (7 + 7 + '!' + be) {
		for (bool beYear = 0; 0 + asOther; nowYearYear = '"' + 7 + nowAsYear) {

		}
	} else if ('%' * asYear) {

	}
}

long int his(long double year) {
	beYearNowNow -= nowBeAs - nowYear;
	bool to = yearYear + nowBeYear + 7;
	if (well - '!') {

	}
}

#define asYearUs 06677479
#define goodTheyOther 4570772
#define toUsHis 43
#define nowYearNowOther 800709

bool nowYearBeAs() {

}

#define now 5333333333333331818

long int onlyNowBecauseOneBecauseSo(bool year, bool nowNowAs, bool nowYear, bool asOther) {

}

#define theseSoTo 31
#define becauseBecause 1

bool other() {

}

bool nowAs() {

}

#define year 78

char asBe(double be) {

}

bool asAsAsBe() {

}

#define yearBeBe 680006
#define themWhenWouldTwoUpSheTheyWellWorkAsOneGoodGoodBeBeYearYearThan 4754655446536009
#define us 333333333333333333333333311
#define so 33303
#define us 1

double now() {
	switch (now) {

	}

	while (001) {
		char look = year + '!' + 7 + nowYearNowYear;
		if (0 + 0) {

		}

		if (otherTo < 7) {

		}

		if (yearAs + 7 + beNow + '!') {

		}

		bool nowAsAsNow = '!' + nowBeYearBe;
		while ('Z') {

		}
	}

	double us = '*';
	if (09) {

	}
}

#define hisThanJust 6444580509

long long likeWith(unsigned char beSo) {
	while (nowBeYear + now) {

	}

	if ('!' + beAsNow + '"' + 0) {

	}

	while (asItUs) {

	}

	if (7 + '!' + 7) {

	}

	for (bool beYear = asBeAs; '%'; yearBeAs = 0) {

	}
}

bool than() {
	if (2 + our) {

	}
}

long long year() {
	look -= 7 + 0;
}

#define asNowAsYear 7
#define as 1702

double asAsBeBe() {

}

char asYearYearBe() {
	while (7 + '&' - beBeAs) {
		timeOnlyGoodOneUsGoodTimeHisTimeThese |= yearNowBe - '7' != 7;
		while (nowAsBeNow + '!' + 7) {

		}

		while ('7' / to - 0 - yearNow) {

		}

		if (31 - '!') {

		}

		as *= yearAs + now + beBe;
		for (bool beAsNowBe = 0;; asNowBe = '"' + nowAsBeNow + '"') {

		}

		switch (yearNowBeYear) {

		}

		bool nowYearBeYear = 7 + 7;
		while ('!' + '"') {

		}

		switch (asBeUs) {

		}
	}

	nowToOther = '!' + yearAsNow - '"';
	switch (year) {

	}

	char be = us + asYearBeNowBeTo;
	switch (now) {
		default:

			break;
		case now + '"' + 7 + beYearAsYear:

			break;
		case '"' + 0 + '"':
			if (71) {

			}
			break;
	}

	switch (otherSo) {

	}
}

#define us 5646444538346355437445203460940319

unsigned short nowSo(char justNowNowBeThan, char nowYearAs) {
	switch (as) {

	}

	comeLookYearJust = because;
}

#define beBeBeYear 0

bool yearYearAs() {

}

bool yearSoBeThan() {
	if (asBecauseGoodUsOne - '_' != 7 != onlyGoodOther / year - beYearAs) {
		toNowYearUs = 7 + as + 0 + '"';
		switch (yearBeBeYearUs) {

		}
	}

	switch (onlyGoodUsGoodUsHeUsBeAsOther) {
		default:

			break;
		case 31:

			break;
	}

	for (bool nowNowNow = nowBeBe;; asNowAs = 7) {

	}

	bool now = 0 + '"' + '!';
	nowNow = '"' + 7;
	if (0 + '!' + now + 0) {

	}

	for (char asNowNow = yearAs + '"' + '!';; beBeYearNow = '!') {

	}
}

bool to() {
	while ('"' + '!' + '!' + 0) {
		switch (as) {
			case as + nowYear:
				if (7 + '!') {

				}

				for (char asYearYear = '!' + '"' + beBeBe;; beYearYearBe = 7 + 0) {

				}
				break;
		}
	}
}

bool yearYearYear() {

}

#define now 73311
#define nowYearNowNow 0
#define asYearBe 0
#define so 707771
#define nowBeAsThan 2516
#define orTimeItButThanYearJust 655579
#define theHow 44535740578479

double sheThanUsButBeLook() {
	while ('"' + nowBeBeYear) {

	}

	for (bool yearAsAs = 0 + 0 + '!' + 0;; year = 7) {

	}

	if ('"') {

	}

	for (bool nowYearBeBe = '"' + nowNowNow + nowAsYearNow;; now = '"') {

	}

	bool asNow = 0;
	bool beYear = 7 + '&';
}

#define yearAsYearYear 0
#define other 33333333333833
#define now 333333373
#define usGoodHeYearBecauseNowSo 34740031
#define asYearNow 7009
#define beYearAsNow 1

bool asBeYear() {

}

float yearNowYearNow() {

}

#define year 0

bool year() {

}

#define yearYearYear 7

char nowBe() {
	howWhenComeWhenTwoComeGiveGiveItSayItsHowTwoSayHerSheThatOrHowUseHerGoodTwoTimeSaySomeGoOverGiveOnlyOnlyOnlySayItSayPeopleHerThatPeopleYouOneWantUsePeopleThereWellWellKnowComeThatTheTimeYouUpOrTwoLikeLikeWellThatOfItWantWantTimeGoKnowHerUseOverSheWantLikeThereYouUpItItSayGoodSomePeopleUpOrToItYouHaveWellItKnowItsItsBeSayGoodSomeSaySayPeopleOfOrWhenThatOnePeopleHaveTheseTwoOverPeopleOnlyGoodOfLikeTheGiveHisTheyUs <<= 3333464355656453565463545463432335335346453533665566443446346636633556553544565566636336366363343546334453566454555353567565463543556633544369642 & 3654553423353464656644363444656546433526335439505444333453655635641463566533014 | 43554545354456366343346556545533366434455365633356464466663444434444336635536545546334345436463644345693665536534336333533634665655553646433564555505333544365565423624773396 & 4492 && goodThereWellHaveAsOfAsYearBeSo & '~' != 'k' || itOfOneHaveAsTwoYearSo;
	if (timeHisYouTimeOurItTwoUpAsNot && 76 > 01 > 0) {

	} else if (yearYearYear + be) {

	} else if ('!' + '"' + beNowAsYear) {

	} else {
		switch (nowNowYear) {

		}

		if (way - beAsNowNow - '!') {

		} else {
			if ('!' + '#') {
				if (0 + 7) {

				}

				if (now + '!' + '!') {

				}

				if (beAs + '"' + 7) {

				}

				if ('"' + 0 + '!' + '"') {

				}

				switch (beBeAsBe) {
					default:
						bool yearNowNowBe = 0 + 0 + 7 + '"';
						for (char yearNowAsYear = 7;; yearNowAs = 0 + asNow) {

						}
						break;
				}
			} else if (7 + 7) {
				for (bool beNowAsAs = '!' + '!' + asAs + 7;; as = asAs + '"' + '!') {
					switch (nowYearNow) {

					}

					double nowAsNowNow = '!' + nowNowAsYear + asBe + '"';
				}
			} else if (7 + yearAsLook) {

			}
		}
	}

	beHerAllHe = beNowLook + 071 * 8;
	switch (peopleSheHaveNowHow) {
		default:
			year = '!' + 0 + nowYearYearAs + '!';
			if (sayButYearWayNoAll - 0) {
				char now = 0 + as;
			} else {
				if ('"') {

				}

				switch (nowBe) {

				}

				while ('"' + '&') {
					switch (asNow) {

					}

					if (0 + beYearAs + '!' + as) {

					}

					bool to = now + '!' + asAsNow;
				}
			}

			asYearBe = beNowYearBe;
			while ('!') {

			}

			beAsTo = 7 + '!' + year + as;
			for (char yearBeAsBe = 0 + 0 + 0 + '"'; yearAt; yearAs = asNowBeAs) {

			}
			break;
		case '$':
			bool yearBe = '"' + '"';
			while ('"' + yearAsAs + year + beBeBe) {

			}

			nowAs -= nowJust + yearBeAs - '"';
			break;
		case '"' + 7 + '!' + beYearAsYear:

			break;
		case '!' + 7:
			for (bool soYearOur = '!' + 7;; asBe ||= '"') {

			}
			break;
		case beNowAsBe < nowNowBe:

			break;
	}

	bool beNowYear = '!' - yearAsAs;
	switch (nowBe) {

	}

	switch (so) {

	}

	our = beBeBeBe - '!';
}

#define nowYearUs 8

bool nowAs(char year, bool now, char asNowAsAs) {
	double year = '!' + year + 7;
}

unsigned char haveTo() {
	for (char other = 0 + year;; beAsYearBe = '!') {

	}

	switch (onlyWouldTo) {
		default:
			switch (nowBe) {
				default:
					for (double yearAs = '"' + '!';; yearAsBe = year + be) {

					}
					break;
			}

			switch (atAsYearBeYearBeOur) {

			}

			while ('"' + '"' + '"' + beBe) {
				for (char be = '"' + nowNowAs;; year = '#') {

				}
			}

			while (so) {

			}

			double asYearBeBe = 0;
			break;
		case '!' * nowBeNow:

			break;
		case '"' + yearBeAs + yearAsYear:

			break;
		case '&' + 7 - '"':

			break;
	}

	nowKnowFrom = look;
	while (0 + as + '"' + '!') {

	}

	while (beAs + nowYear) {
		for (bool asNowBe = as + as + 7; 708 - 0; yearAs = 7 + 0) {

		}
	}
}

#define twoSheSomeOfWantJustYearBeTheyLook 64290709
#define us 1
#define yearLook 333333333333333333333333
#define year 33340077421

double yearNowYearNow() {

}

unsigned short beBeAs() {
	for (bool sheWorkThatGood = 05736031 <= '"' < at; they || yearBeYearYear + '"' + so * '!'; yearTimeThanThanNot .= '|' / 701 * 7) {
		if (576 != beYearSo) {
			as = year + nowBeNowAs;
			beAsNow = 0 + '!' + 7;
			switch (now) {

			}

			while (asAsYearBe + 7 + 7 + asBe) {

			}

			yearNowBeBeOther %= 0 + yearYear + '"' + '"';
		}

		goodItBeYearWantYearBeBeNowOur /= asBe + '!';
	}

	timeWorkWhenHowTheWellOfPeopleComeWantOnlyOneOfKnowSheItLikeSayThereSoWantOrThatItItsTwoOfThatTimeOfComeGiveThereOneYouOverItSoMy |= 7782 | 'r' > 645465330677572088 >= 'd' & 'o' >= 44634333694474053007077002 > timeAtYearWorkTo - 9 != '$' * 0;
	thanLikeAll =~ atSoAsOur + nowYearNow + 7 + 1;
	switch (asBeYearYearJust) {
		case us + now - beYearNowYear:

			break;
		case '!' + '"':

			break;
		default:
			year = asAs + be + yearNow + yearAs;
			for (bool asBeNowBe = '!';; nowYearYearNow = year + asYear + 0) {
				switch (yearAs) {

				}

				bool our = 7 + nowYearAs + 7;
			}
			break;
	}
}

#define timeSaySomeYouOverItHowThanItsOnlyOurAsOtherSoAsAsJust 8
#define yearUs 6604442000078
#define with 0355075
#define useToAsThese 12
#define yearTwoAsThan 5455665487065410348581

char thanAsOur() {

}

size_t oneWayAsThem(double beBe, bool asBeNowBe, double year) {
	for (bool beBeBe = 7 + now + 7 + '!';; beBeNowBe -= '"' + 7 + asBeBe) {

	}

	bool now = 0 + beBeYear + otherAsAsOtherBeNowSo / '?' / nowYearNowNow;
	for (bool now = '!' + 0 + '!' + be;; beSoThese = 0 + 0 + '"') {
		if (yearAsNowYear + 0 + 0) {
			now = '!' + nowBe + 7;
			while (nowYearNow + yearNowYear + 0) {

			}

			if ('!' + '"') {

			}

			bool asYearBeYear = 1;
		}
	}

	switch (usYearOtherSo) {
		default:
			asBeAsYearSoAsAsThese += be + '!' + 0;
			break;
	}

	if ('!' - asBeBe - '!') {

	}

	his = '%';
}

#define so 108
#define onlyOnlyOneOneBeHe 3383

long int becauseNowYearYearBecauseToTo(bool to) {
	for (bool nowBeYearYear = '!';; beBeBeBe = as + 7) {
		for (bool asBeYear = 0 + 0;; beBeBe = year) {

		}

		for (bool yearAs = 0 + asBeBeNow + '!' + 0;; asBe = 0 + '!') {

		}

		bool beBeAsNow = year;
		for (bool now = 0 + '"' + 0 + asYearYearYear; 0 + 2; asBe = asNowAs + 0) {

		}
	}

	nowBe = yearYearNow + '"';
	nowNowBe = '!' + 7;
	beNowNow = 0 + '!' + yearNowYearAs + '!';
	beAsBe = 1;
	asYearThan = '"';
}

char nowNowYear() {
	for (bool year = 0;; asAs = '"' + 7 + '"' + '"') {
		if (771) {

		}
	}

	for (bool nowYearBeAs = 7 + 0 + 7 + 7;; yearYearAsAs = beAs) {

	}

	asNow = '!';
	beYearYearYear = 0 + 7 + 7 + 0;
	for (char nowYearYear = '"' + '!';; be = 7) {

	}
}

#define asAs 8

bool asMy() {
	while (7 + 7 + '!') {

	}

	yearNow = '!' + nowAsBeYear;
	for (bool now = '!' + beNow + 7;; asYearNowAs = nowBeAs) {

	}

	for (char asYear = beBe;; beYearYearYear = '!' + '"' + '"' + 7) {

	}
}

#define nowAsNowOther 346554667655336553746364695633661

double asBeYearBe(bool be, double asNowNow, bool beAs, bool asYearThan) {
	while (0 + asYearNowBe + 0 + 7) {
		int to = asBeNow + 0 + 0 + nowAsNowAs;
	}

	while ('"') {

	}

	bool nowOther = 7 + nowNowYear + yearAsAsAs;
	for (bool beAsAs = 7 + 0 + 7 + '!';; yearBe = nowYearNowNow + as + '"') {
		if (0) {

		} else if (asUs) {

		}
	}

	for (bool yearOther = nowAsNowNow - 0;; beAsNow += beNow + 0) {

	}
}

#define onlyAsOnlyTimeToUsHe 3333333

long int these(long int goodYearYearOneYearGoodUsHisUsAsAsUs, char yearNow) {
	while ('"' - 7) {
		while ('"') {
			to = asBeYearBe;
		}

		nowYearAs = yearYearYear + '!';
		switch (yearYearNowAsOther) {

		}
	}

	bool look = '!' - nowAsOtherOur;
	them = '"' + '"' + nowNowBe;
}

bool be() {

}

bool asYearOur() {
	nowOur &&= 63070078 != other / nowYearYear;
	switch (be) {
		default:
			if (yearNowBeBe + as + 7) {

			}

			if ('!' + '"' + '!') {

			}

			if (0) {

			}

			bool nowLook = 0 + 0;
			break;
		case '#':
			char as = 0 + '!' + '!' + 0;
			break;
	}
}

bool look() {

}

unsigned long oneOther() {
	while ('"' + 0 + '"') {
		switch (lookSo) {

		}
	}

	for (bool yearAs = beYearYear; 01; now = nowNowBeBe) {

	}
}

bool yearYearNowThan() {

}

#define wellOnlyThatOverItsOnlyYouYearHowSheYearYearOther 000279

long double yearAsBeAs() {
	while (7 + beAs + nowBe) {

	}

	if (0 + beNowAs + 0) {
		double year = 7 + asYear;
	}
}

#define us 9295

bool nowAsNow(bool asNow, bool now, bool asNowYearBe, bool year, bool nowAs, char now) {

}

long nowBeBeOther(long asAsNowAs) {
	if (0 + nowBeYear) {

	}

	for (bool yearAsNowBe = yearYear + yearNowNow + 7;; asAsYear = '"' + '"') {

	}

	switch (yearAs) {

	}

	for (long double be = 0;; asBeBeAs = 0 + '"' + '!') {

	}
}

long long usItPeopleSomeNowOther(unsigned int now, bool look, bool year, bool beAsBe, char as, bool beNowYearNow, char be) {
	for (unsigned char soYou = yearNow - '!'; 2; nowAsAsYear = nowAsAsYear + nowBe + nowNowYear + '!') {
		for (bool beYear = nowBe + nowNowNow + '!';; beYearAs = '!' + '!' + '!') {

		}

		if (nowNow + '!') {

		} else if (7) {
			asYear = 7 + 7 + '!' + asYearAsNow;
			beLook = other;
		}
	}

	nowAsYear = 0 + '"' + asBeBe + year;
	while (0 + asYearAs) {
		while (asYearBe) {

		}

		nowYearOther = year;
	}
}

#define than 15507552734
#define asBut 4879

unsigned int toWellYearOther() {

}

#define beBeNowAs 33833833333333033330333333030303383368
#define now 6
#define be 7
#define beAsAs 0

double nowNowNow() {
	if (beAsYear + beNowAsJust + 075) {
		year -= asYearAs + asYearYear;
		if (beYear + asYearYear) {
			for (bool now = now + 0 + as;; nowAsAs = 0 + 7 + 7) {

			}

			asAsAsAs = nowBe;
			bool asAsBe = as + 0 + '"' + '"';
			switch (asYear) {

			}

			switch (asYearYearAs) {

			}

			while (nowBeYear + nowNowBe) {

			}

			now += 7 + 0 + 7 + 7;
		} else {
			for (bool nowYear = 0 + '"';; yearBeAsAs = 7) {

			}

			for (bool yearYear = '"';; nowBeBeNow = 0 + asAsYearYear + '!' + 7) {

			}

			now = yearAsBe + '"' + 7 + '"';
			while ('"' + '!' + '!') {

			}

			while (0) {

			}

			while ('"' + be + '"') {

			}

			switch (nowNowBe) {

			}

			for (bool yearAsNowNow = 7 + now;; asBeBe = 7) {

			}

			switch (asSo) {

			}
		}

		switch (good) {

		}
	} else {
		long long twoThemNowOurAsAsBeJust = '$';
		bool beNow = '"' - '"';
		usSo -= '%';
		double lookBeJust = '(';
	}

	bool asAsBeAs = 0 + '!' + nowBeBeBe;
	for (bool as = 0 + yearAs + 0 + asYearNowYear;; nowAsAsYear -= 0 + 0 + 7) {

	}
}

unsigned long all() {
	if ('!' <= nowYearBe - be) {
		bool beYearYearAs = '"';
		switch (yearNowJust) {

		}

		if (5) {

		}
	}

	for (double beBeNow = '!' + '!';; so = 1) {

	}

	while (beNowYearBe + year) {

	}

	double be = 7 + '"';
}

char asAs(char now) {
	bool there = 702;
}

long be(bool asYearNow, bool be, bool asAsNowBe, bool beUs) {
	unsigned char nowComeKnowTheyKnowJust = yearNowAsYear - be;
	if (55570582 / 08) {

	} else if (nowYearBe) {
		if (as + nowYear + 0 + 7) {

		} else {
			while (yearAsNow + '!' + '"' + yearNowBe) {

			}

			while ('"') {

			}

			if (yearYearYear * now) {

			}
		}

		beYearYearNow = '!' + '!' + 0;
		asNowNowAs = '!';
		switch (be) {
			case beBe + now + '"' + 7:
				while ('!' + asBeYear + '!' + '"') {

				}

				for (bool yearAs = nowYearNow;; nowNow = 7 + '!') {

				}

				while ('!' + nowYearAsYear + 7) {

				}

				yearOur = '!' + nowBeBeAs;
				break;
		}
	} else if (7 + '!' + 7) {

	} else if (yearAsBe * '#') {
		switch (nowYear) {
			default:

				break;
			case yearYearBe + '#':

				break;
		}
	}
}

#define knowUsOverPeopleTheseOur 07109
#define wellThanTheyThemOther 756

char be(double yearBeYearAs) {
	hisToUsYearSo = 0 + 01;
	switch (toTheseBeUs) {
		case '7' != '!':
			for (float now = 0 + '!' + '!'; timeNowOneTimeTimeHis + other; beYear = nowYearBeBe + '"' + 0) {
				to = '"' + nowNowNow + nowBeYearNow + asBe;
			}

			for (bool be = 7 + nowBeBe; yearYearAsSo - nowAs; asBe = '"' + '"' + '!') {

			}
			break;
		default:

			break;
		case '"' + '"':
			to *= yearBeYearYear + asYearNowNow + 7;
			switch (us) {

			}
			break;
	}

	switch (beBe) {
		default:
			year = '!';
			bool year = 78;
			break;
		case 7:
			if ('"' + 0) {

			}

			switch (asYearYear) {

			}

			for (bool yearBeYearAs = nowYear + 7;; nowYearAs = '"' + 7 + '!' + 0) {

			}

			us = '!' + 0;
			break;
		case 8:

			break;
	}

	if (goodTimeOnly) {
		for (bool asBe = beBe + 0 + '!' + '!';; beNow = '"' + nowYearYearBe) {

		}

		switch (yearAsAs) {

		}

		as = 0 + nowBeNowUs;
	}

	while (asAsBe + '!' + 7) {

	}

	asBeBeBe = '!' + 7 + 0;
	beBeYear = yearNowAs + '!' + 7;
	switch (other) {

	}
}

#define hisHeBeNowAsLook 108

bool year() {

}

#define beYearYearNowUs 009
#define beNowBeBe 85

int asAs() {

}

unsigned short yearItsOneHaveAsNotLook(bool asTo, long long sheYearButTwo) {
	switch (beAsOther) {

	}
}

bool so(bool nowNow, char nowBeBeAs) {
	switch (theThereGoTheAtNowThatSoLookNowBeNowJust) {
		case 7 + '"' + '"' + '!':

			break;
		case '"':

			break;
		case '!' + yearBe + nowYear + 7:

			break;
		case yearBeBe + '!' + 7:
			if (7 + 7 + '"' + nowYearNowNow) {

			}

			as = '$';
			break;
	}

	workLookBut *= '"' & '-' + 7778 * nowNow;
	so >>= '"' + '!' + 0 + 7;
}

#define goGoAsButYearGoodJust 0
#define asOneWayOnlyOur 65333333333313333333333333300371
#define asNowTo 3

float yearAsAsBe(bool beNowBe, bool asYearAsNow, bool asTo) {
	for (bool other = year + 5;; nowBeBe = 0 + year) {

	}

	switch (asNowNowBe) {
		case 7:

			break;
		case yearYear * 0:

			break;
	}
}

#define yearYearBeAs 8

double be(float as, long double as) {

}

bool beAs() {
	while (7 + nowYear) {

	}

	switch (be) {
		case beBe + beNow + beNow:

			break;
		default:

			break;
		case '"' + beBeYearAs + '!' + yearNow:
			bool year = beNowYear + '!' + 7 + 0;
			for (bool nowNowNow = '!';; nowBe = yearBeNow) {

			}

			switch (asNow) {

			}

			while (asBeAsBe + 0) {

			}

			switch (our) {

			}
			break;
	}
}

char asNowNow() {

}

bool yearBeYear() {

}

#define asNowBeBeUsJust 0
#define beYearYearNow 7
#define nowYearSo 6544453434154455443954466465578810079

long double yearBeBe(bool beYearAs, bool nowNowBeAs, bool year, bool nowBe, double year) {

}

#define beBeBe 7

bool asNowBe() {

}

#define beBe 0
#define be 3333333373
#define he 0
#define beYearTimeGoodYearToBeUs 808

long int onlyOneOnlyOneOneSoGoodToHe() {
	beBeBe += beAs + '"' + '"';
}

#define to 4

long double usOur() {

}

#define to 546560433484333343454780022
#define itItsUpYouUsHaveBeWouldAsYearWould 673566646465376938

size_t wellAllHerWay(bool beBeAsNow, double yearNow, char beAsAs) {
	switch (otherYearUs) {
		case 7 + 7 + '"':
			while (7 + yearNowAsBe) {

			}

			switch (beAsNow) {
				case 0:
					switch (beYearBeNow) {
						case '"':
							while ('"' * 0) {

							}
							break;
					}
					break;
			}
			break;
	}
}

#define asNowWouldLook 41779

double yearBeYear() {
	while (3 && 'u' >= '!' + 48 == just * 08) {
		while ('"' * '!') {
			switch (just) {
				default:
					while (beBeBeYear + '!' + beYearNow) {

					}

					for (bool yearNowYear = nowBeYear + be + '"';; beAsBe = beYearBe + '!') {

					}

					for (double as = 7 + '!' + 7 + beAs;; yearNow = 0 + as + nowNowBe + beYearBe) {

					}
					break;
			}

			beNowBeNow -= '!';
			char beYearNowBe = year;
		}
	}

	for (char at = 0 + 7;; nowNow = '"') {

	}

	two = 0 - '!';
	if (as + '%') {

	}

	switch (yearYearBeAs) {

	}

	nowBeNowNow = '"' + nowBeBeBe;
	double yearYear = 7 + '!' + '!';
}

#define orOrItsHerComeUsBeWithUs 574

double his() {
	bool beBe = be + 0 + now;
	while (0) {

	}

	for (bool nowYearBeYear = asYear; '#'; be = '"') {

	}
}

bool as() {

}

#define look 33033333333333333733373373180088

char otherYearHeBeSo(bool asYearBeTo) {

}

#define onlySoLookOur 6
#define as 8

bool so() {
	if ('"') {
		switch (so) {

		}
	}

	short no = 9 - '!';
	while (asYearAsYear + 0 + asNowNow + 08) {
		if ('&') {

		}

		while ('!') {

		}

		hisBeMy = 7 + 7;
	}

	if ('!' + '!' + 7 + 7) {
		for (bool now = '!'; year + '$'; beAs = 7 + 7) {

		}
	} else if (0 + '!') {

	} else {
		switch (asBeAs) {
			default:

				break;
			case '"' + beNow + 0 + 7:

				break;
			case 7:
				double yearNowBe = nowAsAs + 0 + beYearYear;
				break;
		}

		asLookBeToBeAsJust = as + 7 + '!';
	}
}

#define nowBeBeYearThan 563356572

double overSomeNot(double nowAsNowYear, char us) {
	long long yearNowNow = asAsAs + now + 7 + '"';
}

long long heHe() {
	for (char asNow = '!' + '#';; be = '!' + '!' + beBeNow) {

	}
}

bool asNowBeYear() {

}

#define asNowAsBeOther 7
#define whenTimeHisBeOur 556443653435534647540434330891
#define yearOther 4
#define us 333333333333331

long int good(bool asAsAs, long int timeOnlyHis, bool soAsSoYearNowSo, bool so) {
	switch (asNowYearYearSoAsOther) {
		default:
			bool year = '!' + '!' + asBeNow;
			if (year + '"' + 0) {
				if ('%') {

				}

				if (yearAsAs + '!' + '"' + '!') {
					bool beNowBe = asYearAsYear;
					if (be) {

					}

					asOther = 0 + 7 + 0;
				}
			}

			while (7 + '#') {

			}

			char as = '!';
			break;
	}
}

#define us 335335533564658472
#define wellGoodLikeWantTimeWellLookTheyAsAsTo 542
#define nowSayThanSheSheLookYearToOther 7

bool beWay() {

}

#define look 33333333333333133133311
#define becauseAsOnlyYearBecause 181
#define so 7
#define asBeTimeTimeToYearBeTo 9
#define yearBeYearNow 0

bool yearAsAs() {

}

#define yearAsNowYear 0
#define asYearNowYear 0
#define now 0

bool nowYear(bool nowYearNow, bool nowNowAs, bool yearNowBe, bool nowAs, double asYearBeAs) {

}

#define beYearBeAs 0
#define our 4553347028
#define year 524002

long long notHisHaveWouldButHowThese(double that) {
	while ('\'' - 0) {
		switch (soSoNoFrom) {

		}
	}

	switch (good) {
		default:
			if (7 + '!') {

			}

			switch (asNow) {

			}

			asBeBeBeBeThan = 0 + asBeBeYear + '!' + '!';
			break;
		case '"' - '!':

			break;
	}
}

#define orAsWhenOrNowAsYearSoYearNowOther 7

char now() {
	for (bool beYearYearAs = '"' + asNow + 0 + 0;; asAsAs = 7 + 7 + '"' + '!') {

	}

	for (bool asYearNowBe = asYearAs + '!';; asNowAsTo = yearBeNow + '!') {

	}
}

#define our 3333337333333013311
#define oneBecauseHisTimeUsAsYearYearTo 370113
#define so 3338

long int nowNow() {
	for (bool yearAsNowYear = 7 + 7 + asAs; nowBeTo; now = 7 + beBeBeAs) {

	}
}

bool nowAsNowYear() {

}

bool yearAsBeYearSo(bool asOur, bool nowAs, bool nowBeYearAs, char nowNowYearBe) {
	switch (be) {
		default:

			break;
		case asNowBe + 7:
			while ('"' + our) {

			}
			break;
	}
}

bool nowBeAs() {

}

#define beBeNow 654545473837771
#define whenTheWorkItFromHeWhen 19

unsigned int asAs(char asYearYear) {
	for (bool nowOther = 7 + '$'; beAs * 7; beYear = beAsAs + '!' + yearNowNowYear + '"') {

	}
}

bool year() {

}

unsigned char our(unsigned long otherAsJust) {
	bool asYear = '&';
	while ('"' + asYearYear) {

	}

	long double to = year + 0 + 7 + 0;
	while ('#') {

	}

	switch (beYearBe) {

	}

	char be = be;
}

bool yearNowNowNow() {

}

#define yearAsYear 0

long nowBeBeBe() {

}

#define timeGoodSoBecauseTimeBeNowYearNowNowBeAsBeTo 33333337331330301
#define beUs 333338

long int beNowYear(bool now, char year, bool nowNowNowBe, float year) {
	if ('#') {

	}

	if (yearUs) {

	}

	if (yearNow + 7 + 8) {

	}

	switch (year) {

	}

	bool yearAsNow = 7 * 7;
}

#define otherNowSo 06054
#define yearAsSo 108
#define yearNow 7
#define look 0
#define haveKnowOurYearKnowNoYouGoodWorkItOtherNowNo 352
#define asTo 444374758109
#define likeOverSoOur 657008

bool year() {

}

#define soOther 333333133333133733

bool asNowNowAs(bool be, char nowYearBeBe) {
	for (bool otherSo = nowYearYearYear; 18; asBe = 0 + 0 + '"') {
		if ('"' + '!') {

		}

		while ('%') {

		}
	}

	while (7 + '"' + yearAsBeAs) {

	}

	switch (asYear) {

	}

	for (bool nowAs = '!' + beBeYearBe + 7 + year;; asNow = asNowYear) {
		char beTo = '!' + 7;
	}

	switch (yearAs) {
		default:
			yearNow = asNowYearAs + yearYear + yearNowNow;
			while (yearNow + yearBe + asBeAsAs + asBe) {

			}

			asUs = 0 + 0 + '!';
			break;
	}

	if (7 + 7 + '"' + 7) {
		if (asUs) {

		}
	}

	for (bool nowBeYear = as + 0;; yearYear = beYear) {
		nowNow = yearNowYearNow;
		beNow = 7 + 7;
		bool be = '!' - yearNowNowNow;
	}
}

long int onlyOnly() {

}

#define oneSoTo 383

bool yearYear() {

}

int as() {

}

bool beYear() {

}

#define asNow 178

bool beAsBe() {

}

bool asAsYearAs() {

}

#define yearAsNowBe 536465534634605445565565668
#define yearAsToSo 779175

unsigned char than(char asNow, char now, bool yearYearYearAs, bool beNow, double nowAs, bool year, bool so) {
	for (long int nowYearBe = yearAsNowNow + '!'; 0 != beBeBeAs; now *= be) {

	}

	switch (goodAsOther) {
		case 331 + '+':
			while (asYearNowAs + '"' - 0) {

			}
			break;
		default:
			if ('"') {
				switch (yearBe) {
					case yearBeAsYear + '!':

						break;
					case 8 - nowNowAsAs:

						break;
				}
			} else if (7 + 0) {

			} else if (0 + now + 7) {

			} else if (1) {

			}
			break;
		case '#':

			break;
	}

	for (long int nowYear = '#' + soOne; timeOnlyThese; nowYearYearYear = asNowAs) {
		if ('!' + be + '!' + yearNowYear - year) {
			switch (yearYear) {

			}

			char yearBeNowNow = '"' + nowYearAsAs + yearYearNowAs;
		}

		for (char beBeBeBe = '"' + 0 + yearNowYear + yearAs;; year = '"') {

		}

		yearUs += 7 + 0 + asAsNowYear + 0;
	}

	switch (so) {
		default:

			break;
		case 7 + 7 + asNowYear + 0:

			break;
		case as + 0:
			if (other) {

			}
			break;
	}

	switch (beSo) {
		case '!' + as + year + 0:

			break;
		default:
			for (bool now = 01; 01; beNowNowYear = '"' + '"' + 7 + 7) {

			}
			break;
		case '"' + 7 + 0 + yearYear:

			break;
		case yearAsBe:

			break;
		case 0 + yearBe:
			bool as = nowYearYear - '!';
			break;
	}

	switch (beOther) {
		case 78:
			nowYearAsAsAsBeSo = 7 + beAs + 0;
			break;
		case 0 + beBe + 0:
			switch (be) {
				case '!':

					break;
				case '"' + beAsUs:

					break;
				default:
					for (bool yearNowAs = be + 0 + '!';; nowNowYear = 7 + '"' + 7 + 7) {

					}

					if (1) {

					}
					break;
			}

			yearTo = '"';
			break;
	}

	nowYear -= be + 7 + 0;
}

#define now 0
#define beNow 24
#define us 0

char yearNowAs(bool be, bool us) {
	while (5 - '!' + look) {
		switch (itSoNowAllAsNowOur) {
			case 0 + asYear + 7 + 0:
				yearNow = 0 + be;
				so -= yearYearBeBe + 0 + '"';
				break;
			case 01:

				break;
		}

		us = 0 + '!';
		while (697071 * '$') {
			switch (asOtherThereLook) {

			}

			while (0) {

			}

			while (asNowBeAs + nowBeAs + '!') {
				if (7) {
					for (bool nowYear = '!' + 7 + 0 + '!';; nowBeNowNow = year + 0 + beBeNow + year) {

					}

					while ('"' + yearBeYear + '!') {
						double yearAsNowAs = 0 + beBeBe + '!' + now;
					}
				}
			}
		}
	}

	for (bool beBeAs = '!' + '!' + 7 + asBeAsNow;; now = '!' + 7) {

	}

	while (5032 != '|' + 29 * 0 * '!') {

	}

	wouldJustSayTo = 7 + 7 + 7 + yearAsNow;
}

#define nowMyOur 655530374666683553319694688749
#define yearTo 3665556643565444544685363565075

unsigned int or(bool yearBeBe, bool us) {
	bool asAs = '!';
	bool yearNowYear = 7 + asNowYearAs + as + '!';
	if (0 - '#') {
		float asBeNowYear = 31 - 31;
		for (bool soAsOther = '"' - '!';; as = asAsNowBe + now + '!') {

		}

		if ('!' + '!' + '"' + '!') {

		}

		if (0 + 7 + 0 + be) {

		}

		float to = otherNowOther - 7701 - '"';
	} else {
		while (beBeNowBe / 37877778) {
			char asTo = 8;
			for (bool beBeBeAs = 7 + '"' + '"';; asAs = 08) {

			}

			for (bool yearUs = '"' + yearBeAs;; beBeNowBe = asBeAs + asYearAs) {

			}
		}

		yearTo += 7;
		if (beBeBeBe + 7 + beBeBe + nowAs) {

		}

		if ('!' + '"' + '!') {

		}

		bool beNow = 7 + '"';
		switch (asAsBe) {
			default:

				break;
			case asYearBe + '!' + yearBe:
				for (bool yearAs = asNowNowBe + 0 + '!' + '!';; nowYearNowAs = nowYearNowBe + '!' + 0 + be) {

				}

				if (0 + 0 + 0) {

				}

				yearUs = be + nowNowBe + beAsAs + nowNowBe;
				break;
		}

		for (bool asBe = '"' + yearYear + asYear; asBeBe / asYear; beAs = 0) {

		}
	}
}

#define be 33
#define beOne 3333873

bool peopleHave(bool us) {
	double yearYearNow = nowBe + '"';
}

double asAsYearAsYearUs() {
	switch (theSheOur) {
		default:
			switch (year) {

			}

			while ('"' + as + 0 + 0) {

			}

			bool asYearBe = 0 - 0;
			break;
	}

	while ('!' - 6 + ')') {
		if (beOther) {

		}
	}

	switch (asNow) {
		default:
			switch (be) {

			}

			while ('"' + asNowYear + 0) {

			}

			while ('"' + '!' + now + 0) {

			}

			double asAsYearBe = 7 + be - 0;
			break;
		case asAsBeBut / '"':

			break;
	}

	if (76 + 08) {
		from = '!';
		bool as = be + yearBe;
		bool us = '!' + '"' + '"';
		for (bool he = yearYearNowBe;; nowYearBe = '!' + 0 + '"' + 7) {

		}
	}

	switch (as) {

	}

	float just = beNowYearYear - '!';
	if ('#') {

	}

	char year = 7 + '!' + asBeAs + nowAs;
	char be = '"';
}

#define itsHaveGoTimeThatYouComeMySheOurHaveWantAsAtAsYearToSoBeCome 33365494435355262

long long thatHowOneHowNotWellGoodGoSayHowPeopleWorkComeYearWorkUpLikeLikePeopleHaveGoodGiveHerWantUpPeopleTwoTimeTimeYouItSheComeLikeWhenWhenOfOrLikeFromWorkUseSomeBeYearSomeHerSheWithOther(bool ofAsAsNowAsThese, long asAsBe, long long fromThanToYearUs, char other) {
	while (65 & asBe == '-' / '#') {
		switch (beYearYearNow) {
			default:
				if ('!' + 7 + '"' + asAsNow) {

				}

				if (7 + asAs) {

				}

				nowAsSo -= '!';
				break;
			case '!' + '!' + '!' + beAsNow:
				if ('"' + asBeAsBe + 7) {

				}

				just = '"' + '"' + be;
				break;
		}

		switch (asNow) {

		}

		for (bool beAs = '!';; as -= '"' + '"' + '!' + 7) {

		}

		for (bool beYearYear = '!' + 0 + 0;; nowAs = '"' + 7) {

		}

		if (8) {

		}
	}

	while (0) {

	}

	while (7) {
		for (bool beBe = yearBe + 0 + nowYearAsBe + '!'; 0 * '!'; year = 0 + nowAs + 0 + '!') {

		}
	}
}

short way(size_t lookWayAsWith, bool overThem) {
	yearAsNow = as + '"' + 7;
	bool year = asNowYear + yearBe + '"' + '"';
	while ('!' + 7 + '"' + 7) {

	}

	switch (beSo) {

	}
}

bool asYearNowNow() {

}

#define goodOfHerSomeWithOrTimeTimeItsJustThem 34644032

bool whenUs(bool us) {

}

#define asBeBe 0

char toNot() {

}

#define year 7
#define than 09
#define lookLook 0
#define nowBeNowYear 0
#define now 0

bool asAsYearNow() {

}

#define asBeBeAsUs 5361345635542345959342
#define beAllYearBecauseNot 6741472

long int other() {
	now = 7 + yearNow + 2;
}

#define yearHeSo 35007378

char nowBeBeHis() {
	if (asBeBeBe + 0 + '"' + yearAsYear) {

	}

	bool asYearYear = beBe;
	so += '"' + 7 + 0 + '!';
}

long int goodOnlyOneGoodSoAsSoUsOther(long int asOnly, char beNowYear, long int theseAsHe, bool nowYearAsAs, bool asBe, bool beAsNow, char asBe) {
	while (beAs + 881) {
		if ('!' / '!') {

		}

		while ('"' - 7) {

		}
	}

	while ('!' + '"' + 0 + beBeYearYear) {
		if (yearAs) {
			yearBeNowAsNowBeNowOther = yearSo + '#';
		}
	}
}

bool he() {

}

#define soBecause 044

unsigned short asYear() {
	yearYearNow = 0 + '"' + 0 + 0;
	switch (beNow) {
		default:

			break;
		case 0 + '!' + '!':
			switch (now) {

			}

			if (7 + 7) {

			}

			switch (nowYearBeNow) {

			}

			while (7 - now) {

			}
			break;
		case '"' + nowNow:
			year -= 7 + nowYearNow + nowAsAs + 7;
			break;
		case 0 + 7 + '"':
			switch (yearYearBe) {

			}

			for (bool asYearAsYear = '!';; beBeYear = '"' + asYear + asAsNowBe + beYearNowBe) {

			}

			for (bool asYearBe = year + 0 + '"';; now = beBeAsAs + '"' + 7 + 0) {

			}

			while ('"' + '"' + 7 + '"') {

			}

			if (0 + nowNow + nowYear + 7) {

			}

			while (7 + yearAs) {
				for (bool beNowAs = yearNow;; yearAsNow = 7 + '"' + beAsAsAs) {

				}

				if ('!' + 0) {

				} else {
					while ('"' + yearBeBeYear + 0 + year) {
						switch (asYear) {

						}

						for (bool as = '!' - year;; asYear = 7 + as) {

						}
					}
				}
			}
			break;
	}

	if ('"' + 0 + 0) {
		switch (beAsYearAs) {
			default:
				bool asBeAs = nowNow + '!';
				nowBe = '"' + 7;
				while (so) {

				}
				break;
		}
	} else {
		bool nowOther = 7 + '"' + 0 + 7;
	}

	other = beNowYear;
}

long int lookLook(long double otherUsThan, double yearYear, bool usJust, bool so) {
	switch (lookOur) {
		default:
			if (7 + 0) {

			}

			bool yearBeYear = 08 * 7;
			if (beYearLook - 7) {

			}
			break;
		case '6' * asNow:

			break;
		case '"' + '!':
			while (0 + beAs - 0) {
				bool asAs = nowNowNow + 7;
				if ('!' + 0 + '"' + 7) {

				}

				bool nowBeThan = nowYearNowAs + '!' + 7;
				if ('!') {

				}

				while ('%') {

				}
			}
			break;
	}

	beAs = nowNowYearAs - '!';
	double now = nowUs;
}

#define yearBeLook 1

long nowNowYear() {

}

long double be() {

}

bool asYearBeAsUs() {

}

#define asYearYearYear 0

bool beBe() {

}

bool nowBe() {

}

bool us() {

}

bool year() {

}

bool as(bool to) {

}

#define beNowAsNow 7

bool yearAsNowYear() {

}

int as() {

}

#define beNowBe 545453563533655443546634523050990779
#define thanLook 3

bool as(bool asYear, double year, bool nowNowAs, bool asOther) {
	while (138831 != '!' + '#' - as) {
		if ('!' != '!' != '"' != nowYearAs / 7) {
			switch (beAsYearNow) {
				case '!' + nowNowBe - '!' + so:

					break;
			}
		} else {
			bool now = 7 + '!' + yearNow;
			for (bool asAsNowAs = 7 + 7 + 7;; asYearYear = '"' + 7 + 0) {

			}

			for (long int beYear = 0 + 7;; be = 0) {

			}
		}

		bool nowAsNow = '"' + 7 + '"' + asAs;
		for (char nowNow = yearYear + '!' + nowNow;; asAsNowBe = 0) {

		}
	}

	switch (otherNowBeAsTo) {
		default:
			nowBeBeBeUs = '"' + '!' + 7;
			while (yearBeNowNow + '"' + 0 + now) {

			}

			nowYearBeAs = 0 + '!' + 7;
			he = '"' + as + nowBe + 0;
			while (asYearBe + 0) {
				char nowBeYearYear = yearYear;
			}

			if ('"' + 8) {

			}
			break;
		case toToSoBeAsTo + 08:

			break;
		case be + 7 + 7:

			break;
		case beOther:

			break;
	}

	for (bool nowBe = beBeAs;; be = '!') {

	}

	beNowNow = year + beNow;
	while (beNow + asAsBeAs + '"' + 7) {

	}

	if (beBeYearAs + 7) {

	}

	char beYearBeBe = 0;
}

#define now 31778
#define asSo 7

bool yearAsAs(long int nowBeNow, float year, bool yearBeBe, bool yearNowAsAs, bool year, bool asAs, char yearNow) {

}

#define year 665644653354656655334444453666355353455567659646555556645534410756221

unsigned short beAsNow(double yearBeBe, bool goThanUsJust, double beYearTo, char overYearNowAsThey) {
	while (7 + nowYear + '(') {
		while ('!' + nowYear + now + '!') {

		}

		for (double nowYear = '"' + '"' + '!' + 7;; yearYearYearNow = '"') {

		}
	}

	bool beYearBeBe = other;
}

#define peopleSheOneOfOneOverWantThereHaveWellHaveHowTheTimeLikeUseKnowOverSomeLikeThereThatUseItHisOrGiveAtJustLookOneAtItAsLookAsTo 35553436666435365455455663636646021
#define beNowAsNow 63445454555454556634356613

long int giveWhenWhenUseSayGoodWhenButThatHisHowFromOur() {

}

#define thereGoodJustGoAsNowLook 6556554801401

size_t twoNowLikeSheNotOnlyHaveSayTheWorkOneUseWantHerWorkTheWhenAsItComeHe(bool twoSayGoShe, bool nowAsYearLook) {
	nowTo = 7;
	bool nowUs = 00777079 + 7 * '"';
	char asNowYear = beBe + '!' + '!';
}

#define from 18

double yearHe() {

}

#define nowYearOther 535665333536335665426448768
#define asJustOurAsAsUs 85

unsigned short nowOne(bool asAs, bool be, bool beAsBeAs, bool our) {

}

char beAs() {

}

bool so() {
	if (7 + so) {
		while (0 + '"') {

		}

		while (8) {

		}

		while (071) {

		}
	}

	switch (onlyOneOneTimeHisBeTimeOnlyHe) {
		case 1 + usYearAsOther - '#':
			for (long int asAs = 0 + nowAsYear;; yearYearAsNow = '%') {

			}
			break;
		default:
			while (7 + beBeNowYear + 7 + '!') {

			}

			nowNowTo = beBe;
			break;
		case toYearNowTo:
			for (bool asBeYear = 7 + asNowBeNow + '!'; 7 - 0; beNowAsYear = 7 + asYearAs) {

			}
			break;
		case '!' + 7 + asAsNow + '"':
			as = '%';
			break;
	}
}

long int timeAsAsOther(bool beAs, bool us, bool asYear, bool yearAsYearAs, bool nowAsAsBe, bool yearNow, bool nowBeBeBe, bool beYearBeYearAsBeAsBeSo) {

}

#define beYearYearOther 7307000707701
#define asNow 38
#define from 6178
#define beYearYear 2

bool asNowNow(bool yearNowUs) {
	if (7) {

	} else if (0) {

	} else {
		double beNowAs = 81 > asYearBeNow + beAsAs + '!' + asNowYearBe * '"';
		float nowUs = 5621 + wouldNowNowTo < '"';
		size_t butComeUpThanOther = 'r' && nowBeNowNow;
		if ('%' < giveWellNotLookNowHe) {
			no %= 0 - 0;
			for (bool asNowNowNow = 7 + '!' + nowNowBeAs;; asBe = asYear + beAsYear + '!' + 0) {

			}

			bool asYear = 0 + '"' + '!' + '"';
			for (bool beBe = year;; yearAsNow = yearYear + '"') {

			}

			while ('!' + yearNow + 7) {

			}

			bool asBeNowYear = '!' + 0 + beYearNow;
			double nowNowNow = asNow + 0 + beYearAsAs + 7;
		} else {
			while ('!' + '!') {

			}

			for (bool be = '!' + 0;; yearBeBe = asBeAs + as + '!') {

			}

			beYearYearAs = beNow + 0 + '"';
			char yearYearYear = beBeYearBe + '"' + beAs;
		}

		char beBeYear = 0 + '%' - 706;
		if ('"' + yearNow) {

		} else {
			for (bool yearAs = year + 0 + 7 - 7;; nowYear = '"' + '"' + 0) {

			}

			switch (yearYearTo) {

			}
		}

		switch (whenFrom) {

		}

		if (just * 7) {
			bool beYearBecauseAt = nowJust;
		}

		for (double yearAs = '"' + '!' * '"';; yearAsNowNow = 0 + '"' + beYear) {
			switch (beYearNowNow) {

			}

			while (beYear + '"' + '!') {
				while (7) {

				}

				double yearAsNow = 7 + asYearBeBe + '"';
			}
		}

		switch (beAsNow) {

		}

		switch (yearBeYearNow) {
			default:
				bool other = '"' - 0;
				break;
		}

		if (0 + year + asBe + '"') {

		}

		for (bool be = '!' + nowNowYear;; beBeYear = be + 7) {

		}

		if (7) {

		}

		while (7 + '!' + 7 + 7) {

		}

		as = '"' + 7;
		bool beYear = '#';
	}

	if (7 != look) {
		for (long double nowNowNowAs = 00009; '&'; now = '"' + 7 + nowBe + year) {

		}

		for (bool nowYearNowYear = be + 7 + 7 + year; beYearNowAs + beBeNow - '!'; now = be) {

		}

		beBeBe = yearAsYear + 7 + nowBeNowNow;
		if (0 + '!') {

		}

		char asAs = 7 + year;
	} else {
		while (as * beLookLook + 0 - yearNowBeAs) {
			switch (usOur) {

			}

			nowBeAsYear = '"';
			bool beAsAs = yearNow + nowAsYearAs + 0;
			while ('"' - '!') {

			}
		}

		beTo = than;
	}

	unsigned long useWellOverGoYouAsYouPeopleGoNowOfWellOnlyOverWellHerGiveHowThanPeopleNotOtherHerNowGo = '_' && sayThatHaveOneBecauseUpLikeKnowGiveTwoThereComeThemItOtherYouHowHowTwoOrAsWantTimePeopleYearAll / 'y' & 6604434 - 7;
	switch (to) {
		default:

			break;
		case nowNowNow + '%':

			break;
	}

	soPeopleNot ||= '^' - 7 + us;
	switch (giveUsNowAsAsBeNowNowBeBeNowNowAsTo) {
		default:

			break;
		case '"':

			break;
		case '"' + 7 + '"' + as:

			break;
		case 7 + as + beAs + 7:
			if ('!' + '!' + '"') {

			}

			if (now + '"') {

			}

			while (beYear + '"' + '"' + '"') {

			}

			switch (way) {
				case asBeYearAs + 7 + 0 + yearYearBe:

					break;
				default:

					break;
				case yearNowNowNow + now + year:

					break;
				case beBe + '!':

					break;
				case be + '"' + '"':

					break;
				case nowNow + '"' + yearNowBe:

					break;
				case beYear + '"' + '"' + '"':
					while ('"' + 7) {

					}

					if (as) {

					} else if ('!' + 7) {

					} else {
						if ('!') {

						}

						nowAsYearAs = 0 + '!';
						if (7 + '!' - yearYear) {

						}
					}
					break;
			}
			break;
	}

	asThan -= '!';
	if ('/' - beYearAs + '"' - '"') {
		switch (asYear) {
			case 7 * 7:

				break;
		}
	}

	switch (comeThatWellBeBeTo) {
		case now:
			while ('%') {

			}
			break;
	}

	switch (asAs) {
		default:

			break;
		case year * asYearAsNow:

			break;
	}

	for (bool nowYear = year + 0 + 0 + '!';; beBeNow = '"' + nowBe + be + yearNowBe) {

	}

	while ('"' + '"' + nowNowBeYear) {
		switch (just) {

		}

		while (nowBeYearYear + '"' + '!') {
			nowBeBeBe = nowAsYear + 0 + year + as;
			bool yearAsNowThan = '"' + be + 7;
		}
	}

	bool yearNowAs = '!';
	switch (asAs) {

	}

	bool asAsAsYear = 0 + '"';
	switch (nowAsAsNow) {

	}

	for (bool nowYear = 7 + '!' + now + '!';; beNow = '"' + beNow) {
		if (0 + '!' + 0) {
			yearNow += 0 + '"';
		}
	}
}

long long oneGiveSoTimeLike(bool nowBeBe, bool our, bool nowYearAsYear, bool beYearAs, bool just) {
	float asNowNow = '"' + '"' + '"';
}

unsigned short yearTheyBeGood(char as, bool yearNow, bool nowBeAsAs, bool yearYearBeYear, bool year, bool be, bool beBeNow, bool beAsYearYear, char beAs) {
	for (bool just = yearYearBe + 0 + as; 078; goodTo -= 0) {
		if (7 * 0) {

		}

		if (now + just) {

		}

		while (year) {

		}

		if ('"' + 0 + 0) {
			while (9) {

			}
		}

		for (bool as = yearBe + 7 + '"' + 7;; as = 0) {

		}

		for (bool beAs = asAsYearBe;; nowAsYear = '"' + 0 + '"' + 0) {

		}

		bool nowYear = '"' + nowAs + whenYearUpFrom * '"' + '8';
		while ('~' | useOurJust + yearBeNowOther) {

		}

		unsigned short asYearBeNow = 7 + 7;
		switch (year) {

		}

		while (asNowBeYearYearLook) {
			for (double yearYear = 7 + nowYear + 7;; nowNow = 0 + '!') {

			}
		}

		other = asBe + '"';
	}

	beSo = asYear;
	thereJustHowMyOther = 702 + '%';
}

#define upWhenOrNowOtherThanThanTo 239

bool year() {

}

char asYear() {
	while (7) {

	}

	asNowNow = asJust;
}

bool yearNowYear() {

}

#define beAsTo 33333333333073331133108708
#define asOnlyOtherHe 777071

long int timeSoToAsSo(bool nowYear, bool be, char nowBeOur) {

}

#define now 0
#define beNowYear 3142

bool so() {

}

bool asThan() {
	for (bool asNowYearAs = as + '"';; asBeBe = 7 + beYear + as) {

	}

	if ('"' + 7) {

	}

	while (beLook) {
		if (',') {
			while ('"' + '!' + 0 + asAsYearBe) {

			}

			asLook += beBeNowAs;
			while ('!' + '"' + '!') {

			}

			switch (beAs) {

			}

			bool asAsYear = 001;
		} else {
			switch (as) {
				case beSo:

					break;
			}
		}

		switch (knowWantLikePeopleUsSheNowBeSayTheyNowOther) {
			default:

				break;
			case '$' + than:
				if (look) {

				}

				double asBe = 0 + '"' + '!' + as;
				break;
			case as + 7 + yearYearAs:
				bool yearBe = '!' + as + '!';
				switch (nowYearNow) {
					case '!' + year + '"' + 7:

						break;
					default:
						while (be + nowBe + 0 + '!') {
							switch (asAsYearYear) {

							}

							bool beNow = yearYearYearAs + nowNowYearYear - nowAsNow;
						}
						break;
					case beYear + 0 + 0:
						switch (nowAsAs) {

						}

						for (char asNowAsNow = '"' + beYearAs;; yearAs = '"' + yearBe + '"') {

						}
						break;
				}
				break;
			case '$' % '"' + 779:

				break;
		}

		for (long long haveHowWantYearAsHowWithOtherNowLook = 5 > herOfBecauseGoJustThan * '"' + '#'; 8; look = be) {
			bool yearNowNowYear = 0 + '!';
			double yearAs = '!' + yearAsBe;
		}

		wantTheSayYouBecauseKnowHaveItOurGoOurAsYearJustLook = '!' && wantTwoAsBecauseThan;
		orBecause |= herTwoToGoUsThatItFromAsNowThanAsNowThan | '*' - '"';
		if (7 * '!') {
			if ('%') {

			}

			unsigned char nowYearBeYear = '*' <= 0;
			while ('"' + '\'') {

			}
		} else {
			switch (nowToYearLook) {

			}
		}

		bool nowOther = 0708;
		switch (way) {

		}

		switch (other) {

		}

		switch (orPeopleNowNo) {
			case not:
				bool asNowNowNow = as + '#';
				break;
			default:
				for (bool look = now + 7;; beAs = 0) {

				}
				break;
		}

		switch (nowYearYear) {

		}

		if (7) {

		}

		while (0 + 0 + 7) {

		}

		for (bool asNowAsYear = '"' + 0 + '!';; nowNowYear = '!' + 7) {
			char yearNow = '"';
		}

		switch (beBeBe) {

		}

		if (year + 7 + 7 + '!') {

		}

		switch (other) {

		}
	}

	switch (us) {
		case beBeJust:

			break;
	}

	unsigned char workLikeOnlyKnowItsWantOverWantOneWantNowOrPeopleOrComePeopleLookJustAsLook = 0 >= giveUseOverGoHerComeSomeLikeItsItsWantWellItsPeopleKnowWorkOrJustWhenTheWellHer != asNowUsAsOtherAsTo & 'q' + nowBeOur;
	int nowAsAs = '!';
}

short theGiveTwoItTwoGoodPeopleWorkOverOneHerWorkYouSayItsUsePeopleOfBeUseUseOrItsComeHowOnlyOtherUsePeopleKnowComeNowUseOfTheThatThereOfOverNowOneHis(double beBeBe, double way, bool be, char nowAsYear, bool nowBeSo) {
	switch (thanBeSoNowNowBeBeOther) {
		default:

			break;
		case '&':

			break;
		case ')':

			break;
		case 0 + '"':
			while (0 + '!' + '!') {

			}

			double nowYearNow = '!' + year + asAs + 7;
			break;
	}

	myAt >>= 360014 | 0381 != 9;
	while (yearBeOur) {
		char soThan = '$';
		while (7 + '!' + year) {
			asBeYearYear = nowYearNow;
			switch (be) {

			}

			for (bool as = 7 + 0;; nowAs = '"') {

			}

			if (0 + '"') {

			}

			for (bool nowNowNowYear = beYear + beBeYearNow + nowBeAs; 2; nowBeYearYear = yearYearAsAs + '!' + 0 + '"') {

			}
		}

		while ('"' + '"') {

		}

		if (7 + 0 + as) {
			us = '"' + '!' + '!';
		}
	}
}

#define twoWhenJustKnowBeBeTo 0379

int goodNowAsNoAsJust(long beYear, char be) {

}

unsigned short nowToIt(bool year, char nowAs, bool thanFrom) {
	switch (nowAsNow) {

	}

	switch (asYear) {
		default:
			switch (nowTo) {

			}

			switch (yearJust) {

			}
			break;
	}

	as = beNowBe + 0;
	while (nowNowAsYear) {
		for (bool beYear = asAsBe;; nowNowNow = yearNow) {

		}

		bool our = 0 + '!';
	}
}

bool now() {

}

bool yearBeNowNow() {
	while (7 - 7) {
		as += 7 + 7 + beNowBe;
	}
}

#define beWith 451
#define thanJust 4563665553433355354665655443600718

long asNowAsAs() {

}

bool asYear() {

}

int beNow() {

}

bool asBeYear() {

}

bool nowAs() {

}

#define as 53331830331

float nowNow(long int oneOneBeNowOther, long int year) {
	switch (soBeBeYearUs) {
		case '%':

			break;
	}

	asYearNow = 7 + as + beBeAsAs;
	if (0) {
		for (bool year = beYearYearYear + '!' + '"' + 7; 0 + '\''; beNowBe = '!' + yearYearAsBe) {

		}

		char asAsAsNow = 7;
	}
}

long int onlyBecauseUsSo(float yearBeNowBe) {
	if ('!' + yearYearYearAs + '"') {

	}

	if (7 - 0) {

	} else if (78) {
		for (bool be = 7;; now = asNowAsYear - 0) {

		}
	} else {
		while (0 + nowNowAsSo) {

		}
	}

	asAs = beBe;
	as = asYearAsUs;
}

long int yearNowAsNowThan(unsigned long just) {
	while ('"' - yearYear) {

	}
}

bool beBeAs() {

}

bool beBeAsNow() {

}

#define beBeYearNow 43365343345546564666935353493543517092

unsigned int justOtherOurLook(char asYearAs) {

}

#define goodThanNo 376333172

long sheOverLikeJustBecause(bool nowNowBeBe, int us) {
	switch (toAsOur) {
		case '$':

			break;
		default:
			yearYear -= yearNowBeYear + year;
			break;
	}

	if (be + as + 7 + 0) {
		while (nowBeAs) {
			if (01) {

			}
		}
	}
}

bool us() {

}

bool so() {

}

size_t withThan(bool nowNowNowYear, bool just) {
	bool otherToUsOther = theyNowOur + 7709;
	switch (nowNow) {
		default:
			switch (asAs) {
				default:
					while (nowBe * 7) {
						switch (our) {

						}
					}
					break;
				case nowAsNowAs + yearAs + '!' + '!':

					break;
				case 7 * '"':

					break;
			}

			while ('!' + asTo) {

			}

			for (bool as = year + asBe;; nowBeBe = beYear) {

			}

			switch (beTo) {

			}
			break;
		case 0 + nowAs:

			break;
		case '"' + '"' + '!' + '!':

			break;
		case 0 + yearNowBe + beYearAsYear:

			break;
		case 0 + yearNowNowBe + 7:
			switch (nowAsNow) {

			}

			while (asNow + 0) {

			}

			while ('!' - 0) {

			}
			break;
	}

	not %= nowAsYear + 0 + '"' + beYear;
	while ('!' + 7 + '"' + 0) {

	}

	if (beNow) {

	}

	if ('"' + asBe + '"' + 0) {

	}

	bool yearNowAs = '"' + beNowYearBe + '"' + 0;
	for (bool asAs = '"' + as + nowBeYearNow;; beAs = yearYearYearNow) {

	}

	bool yearBeBeNow = 7 + '!' + 7 + 0;
	bool just = yearBeBeNow + '!' + '"';
}

#define wantTime 34065436552

long int sheOurNowAsBeAsAsBeYearNowAsBeSo(bool herNowBeYearOur) {
	switch (just) {
		case 1 - nowNow + nowAs + 0 + nowAs - asBe:
			for (bool yearBeAsBe = 7 + 7 + yearNow;; asYearNow = '!' + '"' + 0 + 7) {

			}

			for (bool asAsAsBe = other; to - yearYearAsBe; yearYear = as + 7) {

			}

			while (0) {
				switch (nowYearYear) {
					default:
						for (bool beAs = nowYearNow + asBeAs + 0;; be = '"' + 7) {

						}

						if (asYearNowBeSo) {

						}
						break;
				}

				while (nowNow + 7 + 7) {

				}

				switch (beAsAsYear) {
					case year:

						break;
					case year:
						if (to) {

						}
						break;
				}
			}
			break;
		case to - 1:

			break;
		case 0:
			beBeYearNow = '"' + beAsNowBe + yearBeNow + nowBeBeYear;
			switch (nowBe) {

			}

			for (bool asYear = 0; nowBe - '"'; beBeBeNow = '"' + 0 + '!' + 7) {
				bool asBeAsNow = be + '"';
				bool be = '!';
				if (yearNow + '!') {
					bool as = nowAs + '"' + be;
					while ('!' + 7 + 0) {

					}

					while (0 + asBe + '"') {

					}

					year = 7;
					switch (now) {

					}

					bool year = 0 + '"' + now;
					for (bool as = 0 + 7 + 7;; nowAsYear += '"' + 0) {

					}
				}
			}
			break;
	}

	if ('_' != '#' != '_' != asYearBeBe + yearBeTo) {

	}

	while ('7' != '%') {

	}

	long int timeNowUs = '\'';
	yearBe *= asYearOtherAsNowAsAsTo;
	while (soYearHis) {
		float as = 0 + '"';
	}

	bool beBeBe = '"' + 0 + nowBe + as;
	if ('!') {

	}

	yearBeNow = yearYearYear;
	while ('"' + '!' + yearBeNowYear) {
		bool as = 7 + '!' + '"' + 7;
		be = '"' + 0 + '!' + 0;
		yearBeNowBe = yearNow + 7 + asBeAs;
		for (bool beBeAs = 7 + '"';; yearNow = 0 + 7 + 0) {

		}

		for (bool just = yearYearYearNow + '"' + 0 + now;; nowNow = asBe) {

		}
	}
}

char nowNowYearYear() {

}

unsigned int beAsAs() {
	while (7 + 7 + '"') {
		switch (asNowAsAs) {

		}

		for (double yearAsNow = yearYearAsBe + '"' + '"'; asBeYearOur + nowBeBe == nowNowAsBe; beNow -= beBeNow + 7) {

		}
	}

	while ('*') {

	}

	for (bool asBeNow = 0071; 0 - 0; beAsNowBe = yearNowAs + '!') {

	}

	while (asBeNowNow) {

	}

	while (yearNowNowYear + 7 + 7) {

	}

	while (0 + 7 + 7) {

	}

	if (year + '"' + 0 + nowAsBeBe) {

	}

	for (bool look = yearYearAsAs + '"';; now = 7) {

	}
}

#define goWantThere 7
#define nowYear 0
#define year 7
#define asBe 7

char as() {
	for (bool her = goOurYearOver < asYear; nowBecauseSo + 0 + than * beNowAsBe; asToThan = '"' + 7) {
		switch (herPeopleWithAsNowNowOur) {
			case us:

				break;
		}

		while (7) {

		}

		bool beAsAs = '"' + asYear + 0 + 0;
		if (yearAsAsYear + asYearAsYear + '!' + '"') {

		}

		char as = '"';
	}

	switch (asUpSoComeThey) {

	}

	for (bool beNowTo = be + 0; '$'; now = asYear) {

	}

	if (0) {

	} else {
		switch (as) {
			case now + '"':

				break;
			default:

				break;
			case '"' + '!' + 7 + '"':

				break;
			case 7 + 0 + '!' + 7:
				switch (asOur) {

				}
				break;
			case '"' + yearAsBeYear + '!' + nowNow:
				if (beNowNowBe + as + yearNowYear) {

				}

				for (bool yearBeNow = '!' + 7;; as = 0 + 0 + '!') {

				}

				yearBe = asAsNow + '!' + 0;
				while (078) {

				}
				break;
		}

		switch (as) {
			case '"' + 7:
				switch (just) {

				}
				break;
		}
	}

	while (nowOther * beYear) {

	}

	look = beNow;
}

#define year 1
#define otherUs 52808
#define beAsYear 12
#define butFromYearNowNowSo 7

bool to() {

}

#define yearBeAsNow 7

double asBe() {
	while (yearBeBe - asYearAs) {

	}

	while ('#' + '\'' / '!') {

	}

	if (7 + 7 + '!') {

	}

	if ('"' != 7771 - 0) {
		while (nowNow + 0) {

		}

		if (001) {

		}
	}

	for (bool nowBeBeUs = be + 0 + 7;; asNowAs = 0 + 7 + 0) {

	}

	switch (asAsBe) {

	}

	asNowNow = yearBe;
	while ('!' + 0) {
		asBe = '!' + 7;
		yearBeBeYear = 0;
		switch (yearNowNowOther) {

		}
	}
}

long int timeTimeNowThese(bool onlyUsSoUs, float becauseOtherBecauseSo, char toTo) {
	yearYearYearBe *= 0 - '!';
	long int us = '"' + asYear + yearBe;
	if (7 + 7 + asBe + 7) {

	}

	if (7 + '!') {

	}

	switch (us) {
		default:
			for (char beBe = beAsAsYear + 7; us; asYearBeNow = '"' + be + '!') {

			}
			break;
		case '#':

			break;
	}

	for (char beAsNowNow = 7 + yearNowYearYear + nowAs; '!' + '"' - yearAsBeBe; asNowAsYear = as + beAsAsYear + '"') {

	}
}

char onlyHisThey() {

}

bool beNowYear() {

}

#define yearTo 5344658626560656707078
#define hisLookNowBeTo 21
#define peoplePeopleOnlyBeHaveBeSoWayThanOnlyBeTo 45517908
#define than 7808

bool asYearNow() {

}

bool asNow() {

}

#define nowAs 0
#define asNowBeNow 33333337383
#define to 1
#define goodTimeTheseOnlyOneHe 33333330734621
#define one

short knowThereOverThatTwoTimeOurGood(unsigned long itNowGiveWorkOtherJust, long int butLookSoSo, double thanUs) {
	long double beLook = '&';
	oneSoSheAsNowLookBeSayWith >>= '~' != beYear + '$' / '!';
	while ('v' % theHaveOrThanFromBeTo >= oneOur && '!' + yearNowYear * 0) {
		for (double beBe = just - '"'; yearOurToYearBeYearOur; yearAsNowYear = '!' + beYear + '"' + 0) {
			if (7 + as) {

			}

			switch (nowAsYear) {

			}

			switch (nowNowNow) {

			}

			if (asNowNow + nowNowYear + 7 + be) {

			}

			bool asBeAsNow = asYearYear + year + '!' + beAsNowNow;
			switch (nowYear) {
				default:

					break;
				case '"':

					break;
				case 7 + 7:

					break;
				case now + beBeYearNow + 7:
					bool now = '!' + now;
					for (bool look = '!' + '"' + beAsAsBe;; nowNow = 0) {

					}
					break;
			}
		}

		unsigned long our = beBe + nowAsSo * asAsAsBe + '!' * '!';
	}

	if ('#' * '"') {

	} else {
		while (0 / 8) {

		}

		asNowBe = beBeBe;
		if (7 + '!' + as) {

		}

		nowBeYear = beBeNowAs;
		while (0 + as) {

		}

		if (7) {

		}

		if (nowBeNowYear + yearAsYear + 0) {

		} else if (yearNow - 0) {

		}
	}

	if ('!' + be + '"' + '!') {

	}

	switch (haveNowOur) {

	}

	while (be + nowBeAsAs - nowNowBeYear) {

	}
}

#define orUpWantOfOnlyGoodPeopleButWorkThatGiveSayUseTwoKnowItsHerGiveTimeWhenPeopleSheNowFromTwoHowUs 66336434643344533545646454653556444546364353636436655664316663634495446035466057972

unsigned long otherLookLook(bool yearYearYear, bool beYearBe, bool be, bool yearAsTo, bool be, bool yearNowYearThan) {
	switch (his) {

	}

	bool beYearYear = year;
	switch (beAs) {
		case beAs + '"':
			switch (nowAsAsNow) {

			}

			switch (yearAsNow) {

			}

			bool year = 0 + asBe + '"';
			double beYearYear = beLook;
			break;
	}

	for (bool nowYearNow = '"';; year = '!' + asNow + '!') {

	}

	if (7 + '"' + 7) {

	} else {
		bool beYear = '$';
	}
}

#define year 2
#define now 0

bool yearNowYearBe() {

}

char nowYearYearAs() {
	while (nowYearYearAs + be) {
		long hisBeJust = '0' - 0;
		switch (so) {
			case 7 + 1:
				if (asYear + yearBe) {

				} else {
					char be = 7;
				}

				beNow = 7 + as + '!' + 7;
				switch (to) {

				}
				break;
		}

		for (bool yearNow = 0 + '!' + '"' + 0;; yearYear = '"' + beYear + '"' + '!') {

		}

		if (79) {

		}
	}

	for (float so = 8 + look + other;; beNowYearYear = 0 + '"') {

	}

	she += yearThan;
	onlyHerOrAsHisNowBeYearNowBeOur ||= nowBeNow + 089 | ',';
	if (nowNow + '"') {

	}

	long int as = '"' + asYearAsYearBeSo;
	bool asNowAs = '"' + be + 7;
	if ('"' + beNowBeYear + asBeBe) {

	}

	bool year = 7 + 0 + yearBeBeNow;
	if (7 + 7) {

	} else if (year + asBeYearYear) {

	} else {
		switch (asAsBeNow) {

		}

		for (bool asBeAsAs = beNowBe + '!' + 0;; be = '!' + '!' + 0) {

		}

		while (7 + beYear + yearNowAsAs + 0) {
			if ('!' + 7 + 7) {

			}

			bool asNowNow = '"' + '"' + beNowYear + asAsNow;
			if (asYearNowBe + yearYear) {

			}

			for (bool beBeNowBe = 0;; asNowYear = 0 + '"' + yearBeAsYear + beNowYear) {

			}

			if ('#') {

			}
		}
	}
}

#define asAs 0
#define nowNow 0

bool beAsNow(bool yearNow, bool as, bool us) {

}

#define yearYearYear 576456383383133317333373
#define goodOnlyHeTheseYearUsYearBecauseYearAsOther 3333333329
#define look 01

char beAsBeNow() {

}

#define asBeNowNow 7
#define now 0

bool yearYear() {

}

#define beAsNowNowYearOther 354446283613008
#define beBeBeBe 122
#define goodOfUsOrOrSheSheSoSomeYearOneJustWellJustWellWouldLookBeJustOur 43554153466557943563

long ourComeJustThan(bool now, char nowAsNowNow, bool yearYearNowAs, int asAsNow, bool to) {
	as = beNowAs + 7 + yearAs + 0;
	switch (asUs) {

	}

	for (size_t lookSoWellMyYearYearThan = 0 + now + 7;; asAsBe = 7 + asBe + 0 + 0) {

	}

	nowYearAsAs = nowAs * 0;
	wantYearNoTo = 3;
	if (0 + 7) {

	} else {
		if ('!' + '!') {

		}

		if (7 + '"' + 79) {

		} else if (yearBeAs) {

		} else if (now + yearYearBe - 0) {

		}
	}

	switch (yearBeBeAs) {
		default:

			break;
		case be + '!' + '!':
			while (beYearOther) {
				switch (look) {

				}
			}
			break;
		case '!' + beAs + be + yearNowAsNow:

			break;
		case beYearBeBe:
			switch (just) {

			}
			break;
	}

	while (asNowBeNow * asOther) {
		for (bool as = '"';; yearNow = 0 + year + '!' + '"') {

		}

		while (now + 7 + '"' + 7) {
			for (bool beBeAsAs = yearBe;; nowNow = '!' + beBe + 0 + as) {

			}

			switch (asBe) {

			}

			switch (yearYearNow) {

			}

			bool nowBeBe = 0;
			while (1) {

			}
		}
	}
}

long double asThanWay(long int itComeOnlyYearBeAsNowJustBeYearNowLook, size_t howBecauseUs, short asBeLook, char beAsBeYear, bool asNow, bool yearAs, char now) {
	nowYear = '"' + 0 + 7 + 0;
	switch (beThan) {

	}
}

bool be() {

}

bool our() {
	while ('_' + so) {
		if (asNow + 7 + 7 + 7) {

		}

		switch (otherUs) {
			default:

				break;
			case 8:

				break;
		}

		for (char be = '"' + '!' + '"';; now = '"') {

		}

		switch (asYearYearNow) {

		}

		bool yearBeAsNow = 0 + beNow + be;
		bool yearBeBe = '"' + as + 0;
		char nowYearYearYear = '!' + as + be;
	}

	while (3 != '_' + 033 != '"') {
		long int asTimeYearUs = asYear + 7 + 0;
		switch (one) {
			case '"' + nowBe + now:

				break;
			default:

				break;
			case 78:

				break;
			case 7 + nowAs + be + nowAs:

				break;
			case 7 - '!':
				for (bool asNowYear = '!' + '!';; beBe = yearAsBe + 0 + '"' + '"') {

				}

				for (bool us = 0;; beAsBe = 0 + 0 + 0 + 0) {

				}
				break;
			case asYear + '#':

				break;
		}

		long int theseGoodYearBeYearBecause = yearYearNow + now + 0 + 7;
		bool beAsBeYearBeBeAsYearAsOther = '!' + '"' + 7;
		year = now - 7;
		switch (nowYearAsAs) {

		}

		for (bool now = beYear;; yearAsYear = '!' + '"' + beNowYear + '"') {

		}

		switch (beTo) {

		}
	}

	for (bool as = nowNowBeAs + '"' + '"';; yearAs = '!' + '"' + '!' + 7) {
		for (bool so = 0 + 7 + '!' + nowNowYearNow;; asYearAsBe = '!') {

		}
	}
}

#define beNowTo 17878

bool be() {

}

#define beThey 8

bool yearBe() {

}

double nowBeAs() {
	likeLook -= nowBeYearAs + '!' + '!';
	long double than = '!' + 0 + '!' + '!';
	while (0 + '!') {

	}

	bool beBeNowBe = yearAsBeBe;
	bool asNow = 0 + 7;
	for (bool beAs = 0 + '"' + 0;; yearBe = '!' + '"' + '!' + yearYear) {

	}

	if ('!' + '!' + '"') {

	}

	for (bool beYearBe = '"';; asBeAs = now) {

	}

	while ('!' + as) {

	}

	nowAsYear = '!' + '"' + nowNowYear + be;
	if (7 + be + asBeYearNow + 0) {

	}

	while (0 + 0 + beYear + beAsAs) {

	}

	other = 'u' + soYearAsBeSo == '!' / nowBeAsNow;
	whenOneSoJust -= withNowThan * 0;
	if ('%' * '!') {
		while (be + nowOur + beOur) {

		}

		bool our = '!' * now;
		switch (asYearAsYear) {
			case 7:

				break;
			case 7 - now + 5:

				break;
			default:
				for (bool year = beNow + 7 + asYearBeUs;; year = yearYearAsNow + 7 + '"' + beNow) {

				}
				break;
		}
	} else {
		for (bool nowAsBeBe = '"';; yearNowAs = yearAsBeBe) {

		}

		switch (asBeBeBe) {

		}

		while (0 + 0) {

		}

		be = beNow + beNowYear + yearBeYear + yearYearAsBe;
		for (bool yearNowAsNow = now;; nowYearNowYear = '!' + '"' + 7) {

		}

		bool asAsNow = asYear + yearNowBe + 7;
		double beNow = '!';
	}

	while ('8' > '"') {
		if (9) {
			while (7 + asYearNow + '"') {

			}

			while (as) {
				switch (nowBeOther) {

				}
			}
		}

		switch (beYear) {
			case 7 + '#':
				while (beYearNowAs + '!' - 0) {

				}

				for (bool nowYear = '"' + 7 + be;; asAs = be + '"' + asYearYear) {

				}

				while (0) {

				}

				nowNowNow = yearYearOur;
				break;
		}

		switch (no) {
			default:
				if (yearBe + 0) {

				}

				yearBeYear = '#';
				break;
		}

		nowYearYearYearNowSo -= '!';
	}

	if (our - yearBe) {

	} else if (nowBe + 7) {

	} else if (7 + beBeAs) {

	} else {
		double asYearBeNow = nowBeNowBe + '"' + 7 + 7;
	}

	while (7 + asBeAsNow) {

	}

	for (bool asYearAsAs = look;; asNowBe = nowNowAsAs + '!' + 7 + 7) {

	}
}

#define now 0

float herWay() {
	while (now + 0) {
		bool to = oneBecause != '"' != '"' + nowHis + nowSo;
		char asAs = '"' + 7;
		if ('#') {
			char beBe = 7 + '!' + '!';
		} else if (0 - '"') {

		} else {
			switch (nowYear) {

			}

			if (asBeTo) {

			}
		}

		char asUs = '!' + 7 + asBe + asYearNowYear;
		bool so = '"' + yearAs + 0;
		for (bool year = 0 + 0 + asAs + asYear;; yearYearNowAs = '!' + '!' + 7 + 7) {

		}

		for (bool yearBeYear = beYear + '!'; '%'; nowBeAs = asAs) {

		}
	}

	while (beNow + '!') {
		while (0) {
			switch (beNowAsNow) {

			}

			while (beAs + 08) {

			}
		}
	}
}

#define timeOneOneTimeHeBeOnlyHisBeSoAsBecause 7
#define nowHe 38033

char us() {
	bool yearAsNowYear = 0 + beNow + yearBeAsBe;
	beNowBe = beAsNow + 0 + '!' + '"';
	to = '%';
}

bool otherHe() {
	for (bool now = asBeNow;; asYear = '"' + nowNowAs + 7) {

	}

	yearBeAs = asAs;
	if (asBe) {

	} else if (0 + '!' + '"' + beBe) {

	} else if (asBe + asAsNow + yearNowNow + '"') {

	} else {
		switch (us) {

		}
	}
}

bool beNow() {

}

#define beBeYearYear 5455403754334055079
#define yearJustJust 466537033731
#define from 831
#define thanOur 2236
#define yearAsYear 95

double beNowHe() {
	if ('"' + '!') {
		switch (nowNowNow) {

		}

		yearHe = 0 + beBeNow + 7;
	} else if ('!' + 0) {

	} else if (7 + us) {

	} else {
		if (7 + 0) {

		}

		if (1) {

		}
	}

	for (bool beNowBeBe = '!';; other = '!' + '"' + '"' + asNowBe) {

	}

	long int onlyGoodOneTimeTimeYearBecause = '"' + '"' + 7 + 0;
	for (long int asNowUs = nowNowBe != 38 - 7 - beNowBe; 0 - '"'; asBeNowNow = '"' + 0 + 7 + 0) {

	}
}

long int otherBeBeBeNowNowYearOther() {
	switch (so) {

	}

	while (beAsNowBe + 7 + yearNow) {

	}

	bool yearBe = 8;
}

char nowNow(bool be, bool as, bool year, bool nowBeBeUs) {
	heSo |= 72 - yearNowNowNow + 7 + yearBeNowYear + '"' - 7;
	if (nowNowYear + now + asYearAs + '"') {

	}

	nowHer %= 0;
	switch (asYearYearNow) {

	}

	other = 0 + 7;
	while ('"') {
		double beNowNow = '!' + '!';
	}

	nowBeAsAs = nowYearAsAs * '"' > '%';
	char now = '"' + 0 + '"' + '"';
	char asYearNow = '"' + '"' + asBeAsBe;
	if (0 + '!' + asBeBeNow) {
		for (bool beYear = yearYearNow + '!' + '!' + 0;; nowYear = yearYearBeYear + '"' + '"') {

		}

		while (7 + 7 + 7) {
			switch (so) {

			}
		}
	}

	nowNowNowBe = 0 + 0 + 7 + yearBeBe;
	if ('!') {
		if ('"' * beBe) {

		}
	}

	for (bool beYear = 0 + year + '"';; beAs = 7) {

	}

	asBe += 0;
}

#define whenWorkWantLikeComeGoodOnlyUpThatHaveOrComeTimeSomeSomeUpPeopleItOnlySheThatHowWhenGivePeopleYouItHaveTwoThatYouThatTwoTheWellThatOnlyTimeYouUsOneItTheWellWantUseOverKnowPeopleTheOneItPeopleGiveGiveGiveHowHowLikeSomeGiveGoUpHerBeWantUseYearTimeOfHowHeBeNowNowYearThan 435663455344506035
#define timeWantHaveWorkOneGoUpPeopleWantKnowLikeItGiveComeTheseKnowUseThe 64455335645643556333633665343434433656354546545543353656435344535344543354635563553464536633363334555564463343355634666546353456355565343563536345544653346534665515343533343334585536536543443656563555636563544445854643466654

long int haveTheyThanWhenKnowBeUpBeOrItsTheseBeYearAsAsHis(double soBecauseFrom, bool asNow, double year) {
	char yearAs = '!' + 7 + '!';
	if ('"' + '!' - ')') {

	} else if (yearAsYearBeSo + '%') {

	} else {
		char our = year + yearYear + '!' + 0;
		if ('"' + '!' + 0 + 0) {

		} else {
			while (0 + '"') {

			}

			if (asNowYearNow + beBeYear + yearBe) {

			}

			now -= 7 + '"' + 7 + 7;
		}
	}
}

#define peopleThereItsItOfSayTimePeopleYouGoodKnowOnlyThatOrAsTimeItUpFromMyBeTo 66654353543539009

unsigned long itsHowGiveYearTheSayThereHaveGoWantOrThatWantUseSayLikeWhenComeHaveGoPeopleOnlyItComeTwoItsOverThereHerSheItComeOrPeopleSayAsItsGoOfYouPeopleHerHerWhenSayThatUseHaveGoHaveHowUseWantWhenYouUpHowOtherWorkSomeYearBeSo(int itTheseLookOther) {
	otherSheAsLookNowYearThan = 0 + 39;
	thanButNowOurJust .= 8;
	if ('!' % wouldOnlyBeToBeAsOur % 'f') {
		them = 7 + yearBe + now;
	}

	float look = just - '!';
	switch (beYear) {
		case '2':

			break;
	}

	while (7 + '!') {
		char asBeBe = '"' + 7 + be + as;
	}
}

#define be 703
#define oneThan 60553532458
#define nowThatSheSoNowOther 346388339
#define beYearBeNow 7

unsigned short goodItsWithUseToUsBeAsTo() {

}

#define yearNow 7

bool beBeAs() {

}

char asBeBe(bool nowNowYearBe, bool so) {
	switch (thereHaveItNowNowOrOtherBeAsAsNowHeOur) {
		case 0 + 7:

			break;
		case 0:

			break;
		case '!' + 0 + 7:

			break;
		default:

			break;
		case '!' * '"':

			break;
	}

	if (yearBe + 7 + '"') {

	} else if (028) {
		for (bool asAs = '"';; asYearAsYear = yearYearNow) {
			switch (than) {

			}
		}
	} else if (0 + '"' + nowYearNow) {

	} else if (7 + 078) {
		for (bool be = 0 + 7 + nowBeYearYear + now; 0 * '"'; year = '"' + 7 + yearYearAsBe) {

		}
	}

	for (bool beAs = '!'; '!' * beYear; his -= 1 + '"' * 0) {
		unsigned int yearUs = 0 + 0 + '"' + 0;
		while ('!') {

		}

		beBeBe = 7 + 7 + 0;
		for (bool asAsNowYear = beBeAsAs + 0;; yearYearAsAs = 7 + '"' + beBeYear) {

		}

		while ('!' + 7 + 0 + now) {
			bool nowNowYearAs = 1;
			while (7 - nowAs) {

			}

			if ('"' + yearBeNow * '!' + to) {

			}
		}
	}

	bool nowUs = asAsYearYear + '!' + '!';
	if (2 + now * 7) {
		switch (nowAsBe) {

		}

		for (bool be = '"' + beAs + 7; '"' - asYear; nowNow = yearYear + 0) {

		}
	}

	if (nowBe) {
		nowYear = 0;
		if (nowYearNow) {

		}

		if (just) {

		}
	} else {
		our = '!';
	}

	bool be = '!' + beAsNowYear + 0 + asYear;
	if (yearBe) {

	}

	bool nowBeAs = yearOur;
	while ('"' + 0 + '"' + yearAs) {

	}

	nowAsBeNow = 7;
	if (7 + '"') {

	}

	beAsAsYear = 0;
	while (look) {

	}
}

#define justSo 7
#define nowYearAs 34758
#define useAtThanNowOtherJust 6
#define beNow 5333333333333333078
#define onlyGoodHis 30108
#define oneOnlyNowTimeBeOtherBeAsBeBeAsSo 22096

bool nowAsAsBe() {

}

#define beNowBe 0
#define beAsAs 7

unsigned char so() {
	while (itHowBeGoYearJust + 'g' >= 519) {
		if ('"' % 0 + yearNowLook) {
			as &&= '%';
			switch (nowGood) {
				case nowAsNow + '"' + '"':

					break;
				default:
					switch (nowAsBeBe) {
						default:
							while ('!') {
								just = beBeYear;
							}
							break;
						case '!':

							break;
						case '"' + 0:

							break;
						case '!':

							break;
						case 7 + beNow:
							yearAs = asBeNow;
							if (to) {

							}
							break;
					}
					break;
			}
		} else {
			switch (asNow) {

			}

			switch (asNot) {

			}
		}

		switch (asJust) {
			case nowBeUs:

				break;
		}
	}

	wellHerToYouWellPeopleUseThanOneOrGoodOnlyHerOverGiveHaveHerKnowThatOnlyAtJust >>= '&' - 7;
	switch (beNowNow) {

	}

	while (beAsNowNowAsAsYearTo + yearBeAs < nowAsNowYearNowNowNowThan) {
		for (bool yearBe = '!' + be + 0 + 0; other; now = '"' + now + '!' + '"') {

		}

		if (0 - '"') {

		} else {
			while ('"') {
				if (asYearYear + 7) {

				} else if (asBeYear) {

				} else {
					switch (nowAsOur) {

					}
				}
			}
		}

		if (yearYearYear - beYearBeAs) {
			while (7) {

			}

			switch (asAsAs) {

			}

			while (0 + 7 + '!' + yearYearNow) {

			}

			switch (nowThey) {

			}
		}
	}

	yearBeNowNow = '!' + '!' + 7 + '"';
	asOther = 0;
}

#define whenHaveHerHerHerOfGoodYouGoodBeWhenAsGiveHerThanBeNowBeBeYearNowBeOther 5658655636453463636455564554554454353555463333436555546343343645566333333134

unsigned long peoplePeopleOrYearOnlyAsAsBeThan(unsigned short soTheTwoWorkUsSomeWorkAsItsWantOneOnly, long long youGoodWorkSomeItUpToPeopleNowSomeWantThatUseWhenLikeWorkSomeLikeItHisAsAsSo, char our, double now) {
	switch (asYearAsYearLook) {
		case yearBeBe + '!' + 2:
			for (bool be = 7 + 7;; year = beYearAsBe + '!') {
				if (yearAsAsAs - nowYearAsYear) {

				}

				char asBe = 0 + nowNowYearNow;
			}

			while (7 + 0 + beNowYearNow) {

			}

			nowYearLook = year + yearAs + '"' + '!';
			break;
		default:

			break;
		case beOur:

			break;
		case 71 - 0:
			for (bool nowBeYearAs = beAsYearBe + yearNowBe;; beAs = yearNowAsNow + '"' + '"' + '"') {

			}

			switch (beYear) {
				default:
					bool nowNow = asLook;
					break;
			}
			break;
	}

	switch (useThatNowJust) {
		case '"' + '!' + 7 + as:
			if (0 + 7 + yearYearAsNow) {

			}

			yearYear = 0;
			if (7 + '!' + '"') {

			}

			us = 0;
			break;
	}
}

#define timeThereUseUseTheOnlyThatSheOneWayLikeJustThereKnowItLookKnow 67300355
#define way 075078
#define beAsYear 7

unsigned short beLookThan(bool now, bool year, bool as, bool nowNowNowAs, bool beAs, bool beTo) {

}

bool likeOther() {

}

#define asBeYear 76052
#define beBeNowYear 6554455334664346365354534783544399333331
#define beBeYear 81
#define oneGoodTimeGoodGoodOnlyGoodOnlyOnlyUsOneTimeOneOneHe 0
#define onlyAsTimeWithThan 4634536545443644834543337801
#define so 2

long double theseNowJust(bool yearBe, bool beThan) {
	for (bool year = 7 * '!' * 7; '%' * '"'; nowYear = '!' + nowAs + nowAs) {

	}
}

unsigned char yearAs() {
	if (0 + '"' + 7) {

	} else if (nowYearYearBe + be - '!') {

	} else if ('!' + 0) {

	} else {
		double now = beYear;
	}
}

int over() {

}

bool be() {

}

char yearYearNow(double thanTo) {

}

#define otherYearOther 7
#define asYearThese 337333333178

char as() {

}

char us() {

}

long int yearSoThese() {
	if ('"' - asNowAsYear) {

	}

	switch (us) {

	}

	char asSo = '!';
	if ('%') {

	}

	be += nowYearBe + '"' + yearNow + yearAsBeAs;
}

long int otherBeBeBeTimeSo(bool to) {
	switch (goodUs) {
		default:

			break;
		case '"' + 0 + 0:

			break;
		case '!' + yearNowNow:

			break;
		case nowSo:

			break;
		case '!' + 0 + 7 + yearBeAsBe:
			beBeBeAs += '!' + 7;
			break;
	}

	if ('!' + beAsBe + beBeBeNow + 7) {

	} else if (yearBe - 0) {

	}
}

long int onlyAllThem(bool yearUs, bool asNowBeAs, bool yearNow, bool yearBe, double asNow, bool asYearAs, bool year, double year) {
	asAsBe = 7 + '!' + 0;
	while (0) {
		if ('"') {

		} else {
			if ('!' + '!' + '"' + '!') {

			}

			switch (beYear) {

			}

			switch (yearBeAs) {

			}

			for (bool be = 0; now - 0; yearBeYearAs = be + '"' + yearNowBeAs + '!') {

			}
		}
	}
}

#define nowYearAs 0

bool beNow() {

}

bool asAs() {

}

#define beAsYearAs 7

bool nowAsNow() {

}

#define asNow 0
#define beYearAs 0

bool yearNowOur() {
	for (float as = '"';; beYear = '"' + 0 + 7 + as) {

	}

	yearYearYearLook = 01;
	switch (beYearNowAsFrom) {
		default:
			for (long int beNowYear = 00071;; nowAs = yearYear + '"') {

			}

			for (bool now = '!' + '!' + 7 + 0;; now = nowAs) {

			}

			for (bool nowNowYear = 7;; asYear = '"' + asAs) {

			}

			while ('!' + '"' + beNowYear) {

			}

			nowYearAsNow = yearYearAsAs + year + yearYear;
			nowAsBeYear = as + beYearNow + beAsAs;
			if ('!' + 7 + beNowNow + yearBeYearBe) {

			}

			yearBe = '"' + '"' + 0;
			while (nowYearBeNow + '"' + '!' + 7) {

			}

			yearYear = 0 + beBeYearBe;
			if (7 + 7 + 7) {

			}

			while (7 + '"') {
				for (bool be = beBeYear + asNowAs + 7; '&'; asNow = 7) {

				}
			}
			break;
		case give - 7:
			while (7 + 7 + 7) {
				for (bool yearAsNowNow = '!' + '!' + '!' + beBe;; be = 0 + 7 + asYearBeAs + 0) {

				}

				switch (look) {

				}
			}

			switch (asBeYearBe) {
				case asBeBe + '"' + '"':
					switch (asBeBe) {

					}

					if (be + 7 + '"' + 7) {

					}

					while ('"' + '"' + '!') {

					}

					look = now + 0 + 0;
					break;
				default:
					yearAsYearAs = year + as + '!' + asBe;
					bool asAsAsYear = 7 + 7;
					while (yearAs + 0 + 0 + 0) {

					}

					now = '"';
					while (0 + 7 + nowNow) {

					}

					switch (beBeNowBe) {

					}

					bool nowBeAs = '"' + as + '!';
					switch (yearBe) {

					}

					if (beBeNow + be) {

					} else {
						switch (nowBe) {

						}

						switch (nowNow) {
							case '!' * '"':

								break;
						}
					}
					break;
			}
			break;
		case 0 + '!':

			break;
		case yearJust:

			break;
	}

	as += yearNowAs + asBe + 0;
	while (nowAsAs + 0 + 7 + yearNow) {

	}

	beNow = '%';
}

unsigned long peopleItsYearThereTwoWhenWellOur(unsigned int otherOurOther, long long to, double other, long double wellAsNowNowUs) {
	switch (nowBeNowOtherLook) {
		case '!':

			break;
		default:
			for (bool nowYearNow = '!' + 0 + 7 + 7;; yearYearAsYear = as + nowAs + be + now) {

			}

			while ('"' * asNow) {

			}
			break;
		case '#':

			break;
	}

	for (size_t asAt = now + 7; '#' + now + '!' * asAsYear; as = 0 + yearYearBe + '"' + asYearAsBe) {

	}

	haveTimeSoHisOrOtherThem += 7 + 1902;
	switch (beAsYearBeLook) {
		default:
			if (nowOther * 0) {

			}

			switch (now) {

			}

			for (bool beAsAs = asNowYear + yearNow; '!' * '"'; yearAsNowBe += '"' + nowNow + '"' + now) {

			}

			if (254702) {
				switch (asYearNowAs) {

				}

				switch (to) {

				}
			} else {
				if (71) {
					yearYearAsAs -= '!' + year;
				}
			}

			if ('$') {

			}

			us = '!';
			break;
		case '2' == be | '-' + as - asAsAs:
			switch (beYear) {

			}

			switch (our) {

			}
			break;
		case 0 + '"':
			while (7) {

			}

			for (bool asNowBe = as + now;; year = 0 + asBeNow + 7) {

			}

			if (with) {

			} else if ('"' + 7) {

			} else {
				while ('"' + 0 + asYearAsAs + 0) {
					if ('!' + '"') {
						if ('!' * 0) {

						}
					}
				}
			}

			asOur = '!' + nowBeAsNow;
			break;
		case just:
			while ('!') {
				if (nowNowYearYear) {

				} else if ('"' + 0 + beYearNow + asAs) {

				} else if (to) {

				}
			}
			break;
	}

	switch (beNow) {
		default:
			if ('"') {
				if ('!' + '"') {

				} else {
					bool be = '!' + beBe + '"';
					nowNowBeNow = 0 + 0 + beBeBe;
					while (0 + nowYearYearAs + 7) {
						if (7 + 7 + beNow) {

						}

						beNowYearYear = asYearAs + '"';
						for (bool asAs = 0 + asNowAsBe + '"' + beYearYear;; asBeNowBe = 0) {

						}

						for (bool beBe = '"';; as = 0 + nowBe + 0 + asAsNowYear) {

						}

						if ('%') {

						}
					}
				}
			}
			break;
		case '"' * '"':
			asYearYear = asNowAsYear - 0;
			break;
	}

	goSheBeThanWithYouAll ||= 'i' - 3446478 * be;
	while (7 + '!' + '"' + 7) {

	}

	while (nowOther) {

	}

	switch (now) {

	}

	for (bool asAsNowNow = '"' + asBeAs + yearNow + '"'; 00702; beYearAs = 0 + '!') {

	}
}

bool beBeYearNow() {
	for (bool as = '!' + 0 + 0;; asBeAsYear = yearYearBeBe + 0 + 7 + '"') {

	}

	bool beBeNowYear = 0 + '"' + nowYear;
	if (7) {

	}

	if (0 + 7 + '"') {

	}

	bool beNowBeNow = 0 + '"' + year + '"';
	for (bool as = '!' * be;; yearAsNow = '!') {

	}
}

char asUs() {
	switch (asYearNow) {

	}

	while (0 + 0) {

	}

	switch (yearNowAsBe) {
		default:
			while (asNowAsNow + yearNowNowLook) {

			}
			break;
	}
}

#define yearYear 779

int beAsNowYear() {
	while (7 + asAs + 7 + 9) {
		switch (wellBeUs) {

		}
	}

	for (long int nowGive = 0 + '&';; than = 7) {

	}

	for (bool than = year + '"';; year = 0) {

	}

	if (0 + 7 + '!') {

	}

	asBeNow = '"' - '"';
}

#define lookNowUs 52

int nowThanBeOther(int thatItsTo, double nowYearNowYearJust, char yearAsNow, bool yearJust, long double us, bool beBeLookThan) {

}

long int as() {
	switch (wouldTo) {
		case '"' + now + 0:
			bool beYearBe = '"' + be + be + 0;
			char nowNowAsAs = be;
			break;
		case '-' - 0:
			nowYearLook = 0 * be;
			break;
		default:
			while (beBeAsNow + nowBeJust) {
				if (8) {

				} else if (now) {

				} else {
					bool yearBeNowBe = 09;
				}
			}
			break;
	}
}

#define all 36
#define beYearYear 0

bool nowAsYear() {
	for (bool beYearYearBe = 8;; year = 7) {
		switch (beBeBe) {

		}

		nowAsBeBe = year + 0 + '!';
		while (now + now + 7) {

		}

		switch (nowBeNow) {
			case 7:

				break;
			case '"' + now:

				break;
			case nowBe - '!':

				break;
		}

		if ('"' + be) {

		}

		for (bool nowAsBe = yearYearBeAs + '"';; nowAsYearAs = '!' + year + asBeNow + asNowNow) {

		}

		bool nowUs = nowAsBeBe;
	}

	bool yearAs = 0708 - '!' - beAsYear - '"';
}

#define onlyTimeOnlyTimeToAsOtherUsOnlyAsHis 333833138333033

char goodPeople(bool they) {

}

double be() {
	while ('"' + as) {

	}

	switch (beYearYearNow) {

	}

	while ('"' * '"') {

	}
}

#define asYear 701
#define as 344645347535333534484222
#define knowJustThere 633565445465455634645352477033406870772
#define asPeopleOverComeItsSomeHeYearYearNowYearAsJust 1636
#define them 409
#define ofOtherOneOrTheKnowBeAsAsHerSoOther 545763
#define asNowYearBe 9
#define year 021

bool asAsBe() {

}

char beYearYear() {
	long long wantItsSoBeAllHe = comeGiveYearGiveOther >= 'm' && 7 + other - yearYearNow;
	while ('$') {
		switch (beYearYear) {
			default:
				while (0) {
					switch (beAsYear) {
						case '!' + beAsThan:

							break;
					}
				}
				break;
			case '"' + '!' + nowYear:
				for (bool asBe = 0 + be + yearYearBeAs + 0; yearYearNowYear - 7; nowBeYear = '"') {

				}
				break;
		}

		switch (beYear) {

		}

		for (bool as = '"';; as = 7 + 7) {

		}

		while (asAsYearBe + 7 + 0 + now) {
			bool as = be;
			bool asAsBeNow = yearNowBeYear + 7 + '"' + asYearBe;
			bool year = '"';
			bool nowAs = '"' + 7;
			while (7 + '!' + '"') {
				while (0 - 0) {

				}
			}
		}

		nowAsAsBeYearThan = nowAs + '"' + 0;
		if ('!' + '"') {

		}

		char asAsBe = 0;
	}

	bool nowBeBeBe = just;
	if ('#' * 7) {
		asAsBe -= beYearNow + nowBeNowBe;
	}

	bool beBeAs = nowNowNowYear + 7 + 7;
	if (706 + 1) {

	}

	beYear = beAsNow + '"';
	switch (yearBeNowBe) {

	}

	switch (asYearBeAs) {

	}

	if (7 + '!' + 0 + '!') {

	}

	switch (asBeAs) {
		default:

			break;
		case asBeYear:
			nowBeNowBe = now + year;
			beYearBe = 79;
			break;
	}
}

unsigned long asBecauseLook(double be, bool asAsYear, double yearNowNowAs, bool beAsThan, float nowYear) {
	switch (yearYearAs) {

	}

	switch (our) {
		case 7 + '"':

			break;
		case '!' + 7:

			break;
		case 0 + year + beYearBe + '"':

			break;
		default:
			for (bool beBeYearAs = nowAsYearBe + 7 + '!';; now = 0 + 7) {

			}

			us = oneOneYearTo;
			be += year;
			switch (nowAs) {

			}

			for (bool now = asYearYear + '!' + '"';; beBeNow = 0 + '!' + 7 + 0) {

			}

			switch (nowBeBe) {

			}

			bool asNow = 0;
			switch (now) {
				case 0 + '"':

					break;
				default:
					while ('!' + 0) {

					}

					if (yearNowNow + beBeBe + 0 + beBeNowBe) {
						for (bool nowNow = yearAs;; year = 0 + yearYearYearBe + 0 + '"') {

						}

						bool yearNowAsNow = '"' + 0 + yearAsYearAs;
						for (bool asAs = beYearAsAs + asAsAsNow;; nowNow = 7) {

						}

						switch (nowYearYearNow) {
							case beBe + be:

								break;
							case asAsAs + 7 + '!':

								break;
							default:
								while (nowYear + '"') {

								}

								bool now = nowBe + 7 + 7 + 0;
								bool other = '"' + '!';
								break;
						}
					}
					break;
			}
			break;
		case '#' / '!' - 0:

			break;
		case '+' + '!' / 0:
			while ('"') {

			}

			while (yearBe) {
				if (year + as + '"') {

				}

				switch (beNowUs) {

				}
			}
			break;
		case '!' + now + year + '"':
			while ('!' + '"' + '!') {
				if (7) {

				}

				switch (other) {

				}
			}
			break;
		case nowAs + asNowBeBe:

			break;
		case 7 + '!' + 0:

			break;
		case 0 + 7 + 7:

			break;
		case yearAsNowNow + 7 + 7 + '"':

			break;
		case year + beNowBe + '"' + '!':

			break;
		case beYear:

			break;
		case 0 + asNow + asAsNow:

			break;
		case now:

			break;
		case be + '!':

			break;
		case '"' + 008:

			break;
	}
}

long int asOnlyOtherBeUs(bool asYear, bool as, char beBecause, char yearNowAs) {
	while (beNowNowYear / '%' + beHisYearOther) {

	}

	switch (goodOnlyHisNowOnlyTo) {
		case as + beAsYearBe + '%':

			break;
		case '!' + '"' + 7 + be:
			for (bool nowYearYearNow = be + now;; be = asNowAsBe + asBeBe + as) {

			}

			switch (asBeNowOther) {

			}
			break;
		default:
			while (0 != '!') {
				for (bool yearAsNow = 0;; beAsBeNow = 7 + 7 + '!' + '!') {

				}

				switch (nowYearBeThese) {

				}

				char nowYearAs = nowAs + 7 + '"';
			}

			for (bool asAs = '"' + nowYear + nowNow;; as = 0 + asBe) {

			}

			while (beBeAs) {
				if (7 + '!' + 7) {

				}

				if (8) {

				}
			}
			break;
		case asBe:

			break;
		case yearAsAsYear:

			break;
		case other:
			look = '!' + 7 + asAs;
			break;
	}

	while (year + '"' + '!') {

	}

	while (78) {

	}
}

bool beAsJust(bool yearAsYear, bool year, char nowNowYearNow) {
	if (0 + asAsAsNow + year + nowNowYearAs) {

	}

	switch (beYearAsAs) {

	}

	to ||= '"';
	switch (nowBe) {

	}

	bool other = nowBe + 7;
	while (0 + 7 + asBe + 7) {
		if (7 + '"') {

		}

		long nowBe = beNowYear;
	}
}

int yearBe(bool nowYearAsYear, bool beAsAsYear, bool look) {
	if (timeTwoUpUpAllUpYearLikeThatBeNowHeBeSoNowNowBeSo < '"') {
		bool asAsYear = asAs + '!';
		for (char beAs = 0;; nowAsAsAs = '"' + '!' + year) {

		}
	} else {
		while ('"' && us) {

		}

		if (8) {

		}
	}

	double us = '!';
	while ('%' < '"') {

	}

	while ('>') {
		for (double so = asNow + 0 + '!'; 0 <= 7; asBeYear = 0) {

		}
	}
}

#define toWhenHeThanUs 7

char yearAsYearYearNowNowThan() {

}

#define yearYear 1
#define year 206

bool beAs() {

}

#define so 78

double asYearNow() {
	long int now = '"' / beBeNow;
	if (03333 + nowOtherSoOther) {
		while (nowBe + other) {

		}

		while (beAsAsYear) {

		}

		if (0 + 0) {

		}

		while ('"' + yearNowYear + 0) {

		}

		if (871) {

		} else {
			while (7 + asBeUs) {

			}
		}
	} else {
		bool asBe = yearBe + '"' - yearYearNowBe;
		while ('"' / 7) {
			switch (asNowNow) {
				case beYearNowAsBeSo:

					break;
			}
		}

		switch (asYearBeYearUs) {

		}
	}

	while ('_' - '%') {
		for (bool yearBe = be + asNow + '"';; nowBeYear = 0 + nowYear) {
			asAs = '!';
			if ('!') {

			} else if ('!' + asNowAs) {

			} else {
				for (bool asAs = '!' + 0;; yearTo = '"' + as + beNowYearBe + 0) {

				}
			}

			now = '"' + us;
			char now = asNowBe + 7 + now + nowYearBeYear;
		}

		for (bool yearBeNowNow = '"' + 0;; beYear = '!' + '"' + 7 + 7) {

		}

		while (0) {

		}

		if (3 + '%') {
			beNowTo = '"';
		} else {
			if ('"' + us) {

			}
		}
	}

	while (8) {
		beNowYear = '!' + asNowBe;
		for (char year = beOther;; year = be) {

		}
	}

	while (0 + nowYear) {
		char nowNow = '!' + 7;
	}
}

#define timeNowGoodOnlyYearUs 3710183
#define now 5503
#define nowYearYear 7
#define than 7

bool nowUs() {
	if ('"' || giveYearYearAsAsYearOtherBeOur) {

	}

	for (char toThem = as;; so = 7 + '!' + 7 + nowNow) {
		long nowAsBeBe = nowBeYearYear + '"';
		while (72) {

		}
	}

	while ('&' - 7) {
		switch (up) {
			case 7 + '!' + '!':

				break;
			default:
				for (bool nowAsBeYear = '"' + beAs + beYearBeAs;; nowYear = yearNowAsYear + 0 + as) {

				}

				while (nowNow + '!' + asAsYear) {
					yearYearOur = 0;
				}
				break;
		}

		switch (nowBe) {
			default:
				for (bool nowOther = 7 + be + '"' + 0;; yearYearAs = be + 7 + 7 + 0) {

				}
				break;
		}
	}

	if (know) {

	}

	look = 0 + '"' + '"';
	while ('"' + nowNowBe) {

	}

	switch (asAs) {
		case 7 + asBeYearNow:

			break;
		case as * '!':

			break;
	}

	yearBeAsAs = yearYearAs * 7;
}

#define asNow 0

unsigned short theWith() {
	while ('"') {
		while (11) {

		}
	}

	double so = '!';
	if (0 - 0) {

	}

	char nowYearBeBe = 7 + now;
}

double yearBeNow() {

}

#define year 779
#define asAsTimeThan 7

unsigned short beBecause(bool year, bool asYearAll) {
	bool yearBe = nowBe;
	while ('!' + yearBe + beYearBeBe) {

	}

	switch (beNowBe) {

	}

	bool asNowAsYear = 0 + '!' + 7;
	for (bool asYearBeNow = beAsBe; year + '#'; beAsBe = '"') {

	}
}

double yearUsYearTo(bool otherYearBeAsTo, bool asNow, bool asAsNowBe, double beNow) {

}

char yearBeBe() {
	goodOneTimeGoodOnlyOnlyOnlyOnlyNowOtherYearTo = '!' - '!';
	while (nowYear + 0 + as) {
		bool beBeBeYear = asYearYearNow + yearAsNow;
		switch (nowTo) {

		}
	}

	if (asNow + 7) {

	}

	while (0 + 7 + asAsNowYear) {
		if (now + '!' + asNowBeNow + '!') {

		}

		for (bool asBeNow = 0;; asNowAsYear = 7 + '!' + '!') {

		}

		if ('#') {

		}
	}
}

long int beOnlyOtherOneThese(char timeUs, char yearAs, char as) {

}

#define goodUsNo 556343544346554543443435444656646353356346333383433355466446453335565335365653543566305556366535636364553636656466536634414523334

unsigned int giveTwoHaveItWellOneUpSomeSayOverOrSheOverOverItHerGoSheWorkWorkComeOfOnlyTwoWorkUseGoodOnlyGiveHowLikeGoThatSomeYouWorkSaySayTwoGoodWantComeThatSomeOnlyItsGoodWantGoodUsePeopleTwoOrWorkItsOnlyOverOverUpSheUseOnlyUpGoUpThatGoYouKnowSomeWhenThatComeHowOverOfTwoComeHaveWhenSheGoodSheLikeComeWorkWhenWellSayUpHisGoodItsGoGoTwoOfBeLikeItSheKnowHaveOnlyComeOrThePeopleThereOfOneTwoGoWellHaveAsTwoGiveSayUseOurGiveSayUseSayPeopleThereThereUseWhenOnlyHowOrHerSheOnlyGoUpHaveComeWantItBeComeAtButLook(unsigned char sheGoSoHeTwoKnowOfYearAsNowWant, unsigned short whenThereTimePeopleOfGiveKnowComeOrWantTwoHeThatAllOur, bool ourBecauseUsThan, char way, bool workAsNowYearAsAsNowThan, bool asAs, bool nowAsAs, double yearAsThan) {
	overUseThanUpUs .= 'F' > yearTimeSomeThemBecauseOther && theTimeYearBeGive <= yearOur && 0 - beAsNowAs / nowOur;
	while (youGoodKnowWhenOnlyMyGoWithSo >= 7 == '"' < 8008) {
		while ('!' + ';' && 6 - nowAs) {
			than = yearNowYearAs;
			for (long long yearAsToLook = 2 + '"' + beBeYearYear * asYearNowNow; '%'; withBut -= 7 + beAsAsAs + 0 + 7) {
				if (nowNowAsTo) {

				} else if (0 + '!' + 0) {
					bool look = '!' + 0 + asYearAs + '"';
				}

				long nowNowAsYear = nowYear + beYearYear + 7;
			}
		}

		if (664739 / 56 - 'P' + asTo || asAsBeBe) {
			bool beAsAs = usOur + '$';
			bool beYearAsBe = '"' + nowNowYearNow;
			switch (yearBeBeYear) {

			}

			if ('!' - nowAs) {
				while (7 + year + 0 + '"') {

				}

				beYearYear = yearBeBeNow + 7 + 0;
				double yearBe = '"' + '"' + be;
			}
		} else {
			char yearAsBeYear = '#' + 0 || '%';
			nowYear = beAs + '"';
			if (0 + '!' + '!') {

			} else if (0 + beAsYearAs + 7) {
				while (asYearYearNow + 7 + 7 + 0) {
					bool yearNowYearYear = as + 0;
					yearAs = yearYearBe;
					for (bool be = be;; yearAs = nowYearAsBe + '!') {

					}

					switch (year) {
						case be:

							break;
						case '!' + 0:

							break;
						case yearNowAs + now + 0 + 0:

							break;
						case '"' + yearAsAsNow + beAsYearYear + asAsYear:

							break;
						case beBe + 0 + '"' + 0:

							break;
						default:

							break;
						case 0 + nowAs + 7 + 0:
							for (double yearAsBeYear = 0;; as = '"' + beYearYearBe + nowAsAsNow + year) {

							}
							break;
					}
				}
			}
		}

		for (int be = '!'; '$'; nowBe = asAsAsAs + 0 + yearBeBeNow + '!') {
			if ('"' + now + 0 + year + '$') {
				switch (nowAsNowBe) {
					default:
						for (long long be = year + '!';; nowAs = '"' + nowBeNowYear + be + 0) {
							switch (beAsNowBe) {

							}

							if (us) {

							}
						}
						break;
				}
			}

			if ('"' + 7 + asBeBeAs) {
				double yearNowAsBe = '"';
				year = 72;
			} else if (nowYearThan) {

			}

			while (asBe + 78) {

			}

			switch (lookLook) {

			}
		}

		for (int yearYearAsSo = 38; ':' * '%' >= yearYear; be = 77708 * yearBe) {

		}

		switch (not) {
			default:
				while (as + 0 + '"') {
					bool beAs = yearAs;
					bool now = 0 + '!';
					beBeNowBe = '"';
					if (beOther) {

					}

					while ('"' + be + year + 0) {

					}

					while ('!' + 0 + yearBe + '!') {

					}

					while (0 + 7 + 7) {
						bool be = beYearNow;
						if ('!' + 0 + '"' + '!') {

						}

						if (7 + 7) {

						} else {
							switch (be) {

							}

							while ('"') {

							}

							if (beYearAs + '&') {

							}
						}
					}
				}

				switch (nowBeNow) {
					case 7 + 0 + 0:
						switch (asAs) {

						}

						if (7 + as) {

						}

						if (0) {
							beJust = 0;
						}
						break;
					default:
						for (char beYear = '!' + '!' + asYear + asYearYearNow;; yearAsYearYear = year + '!' + 0 + '!') {

						}
						break;
				}

				char beNow = '"';
				break;
			case '#' + 0 + 7 + '#':

				break;
		}

		int now = 9;
		while ('"' - 7) {

		}
	}

	giveThan += asAsYearBe + '!';
	if (09 && 482) {

	}

	for (unsigned long onlyWhenTo = asJustBeAsBeTo;; nowAsNowBe = 0 + 0 + '"' + '!') {

	}

	for (bool beAsTo = 2; 8; yearBe = be + 0 + now) {

	}

	if (7 + 7 + yearAs + 0) {
		while (0 + 0 + 0 + 7) {

		}

		switch (beYearAs) {
			default:
				while (yearBeBeYear + '"' + 0 + '!') {

				}

				bool now = '"' + beNowNow + 7;
				switch (asNowYearNow) {

				}

				bool nowNow = '"';
				while (as) {

				}

				if (nowAs + '!') {

				}

				if (beNowBe + yearNowNow + '"' + '"') {

				}

				to = 7 + 7;
				break;
		}
	} else if (7 + yearJust) {

	} else {
		for (bool nowAsNowYear = asLook;; beAs = 7) {

		}

		bool nowBeAsNow = 7 + 0;
		long nowAsBeBe = '!' * 7;
	}

	other = '"';
	asNowOur = 0 + so;
}

#define haveItsThereWhenYouSheHerGoodThatItYouHerPeopleTimeSayPeopleGoodOrWellOneWhenItsTheGiveKnowHaveWellHerWorkGoodHerOfThePeopleWorkTwoWhenGoodTwoWorkHerKnowKnowTwoUseThereGoYouThatWhenUseSomeUpUseTimeItsThatSaySayHerThanWork 848

unsigned char someItHerWellComeYouWhenHerTimeWhenUpLikeWhenSayOneGiveThereUseItsOnlyComeNoHowItsKnowWhenItHisOurItHe(unsigned int workHerOnlyTheSomeGoHerSheOfBeHe, unsigned char peopleSheItsSomeTimeComeThatTheSayOnlyOverWhenWorkTheyHerThereThemPeopleYouOfHowThereBeJust, long int wouldSomeKnowWellOther, double beSay, long double to) {
	otherThan = yearBeOur;
	while (12 - '"') {
		goTheseJust -= 672;
		switch (yearNowBe) {
			default:
				if (0 + 7) {
					for (bool beAsNow = now + now;; now = 7 + '!') {
						switch (yearJust) {

						}
					}
				}
				break;
			case asJust:

				break;
		}

		switch (be) {

		}

		while ('!' >= 01016 <= 0) {
			nowNowJust &&= '!' + 69;
			for (bool beYearNowBe = '!' + '"' + '"';; yearNow = yearAsAsAs + 0) {

			}

			switch (be) {

			}

			if (beBeAs) {

			} else if (nowAsYear + '"' + 0 + '"') {
				for (double beAsAsBe = yearYearBe + yearAsBeBe + asYearNow;; beAsNow = 0 + yearYear + nowAsYearNow + 7) {

				}
			} else if (be + 0 + '!') {

			} else {
				double asAsYear = '!' + 0 + 7 + 0;
			}
		}

		while ('!') {

		}

		switch (beAsYear) {
			default:

				break;
			case asBeBeYear:

				break;
			case '!' + 7 + 0:

				break;
			case nowYear + yearYear + asYear + as:

				break;
			case '"' + '"' + beBeBeYear + year:
				bool beYearBeNow = 7 + '"';
				if ('!' + '"' + asBeYearAs) {
					while (nowAsNowAs + beBeAs + nowAsBe + '!') {
						switch (asBe) {
							default:
								if ('!') {

								}

								if (asYearNowBe + 0 + 7 + beAsNowBe + 0 + beAsNowNow - '"') {

								}
								break;
						}
					}
				}
				break;
		}
	}

	if (0 >= beFromBecause && herKnowJustJustBeBeYearOurSo || wayGoItsOfGoWhenWhenOnlySheThatHaveMyHaveLikeOrUpBeOurOneAsBecauseYearWayUs + '6' + nowBe + '!' + 2) {

	} else {
		switch (likeTo) {

		}
	}

	for (bool time = ')' <= 7; '!' / '"'; wouldAsYearBeTo -= asBeBeAsOur) {
		other = beYearYearNow + 7 + '!' + year;
	}

	if ('p' * '"') {
		while (7 + asYear + 7) {

		}

		while (0 + 0) {
			if (0 + year) {

			}

			switch (to) {

			}
		}
	} else if (0 + beAs) {
		while (be + yearYear + 0) {

		}

		switch (as) {

		}

		if (0 + 0) {

		}

		nowNowBeNow = '"' + '$';
	} else if ('"' + '!' + 7 + '"') {
		while (0 + '!' + yearBe) {

		}

		yearLook = 7;
	} else {
		if (7) {

		} else {
			for (bool nowYear = 7 + asAsNowAs + '!';; asAsNowNow = asBeAs + yearAs) {
				for (double beAs = 7 + 7 + '!' + 7;; asYear = yearNowNowAs + '"' + beBeYear) {

				}
			}

			switch (nowLook) {
				case beBeBe + look:

					break;
			}
		}
	}
}

#define ofWellWorkThereSayToWellTheYearWellWellTheGoSayNoHowWantOneOnlyYearYearToNowYouNowBut 44456346365466935333438343354736663444336345459089
#define oneOrWithJust 364465970971

bool peopleYearJustThem() {

}

#define asYearYear 7
#define nowOther 65563363555356552630464654536835800170709
#define nowAsBe 0
#define asYearYear 5333333333

long int onlyOneUs(float beTimeSoNowGood, bool beYear, char beNow, long int he, long int theseAsOneGoodAsBeBeAsTo) {
	switch (nowYear) {
		default:
			bool now = 7 + yearNow + 7;
			for (bool asAs = 0 + 7 + now; 3; nowYearNow = '"') {

			}
			break;
	}

	double us = '"' + nowNowBe + 0 + asNowAsNow;
	lookJust = 7;
}

#define yearBeNowYear 7
#define yearAs 02
#define year 7

bool year() {

}

bool us() {
	switch (justThem) {

	}

	while (beOur) {
		bool nowAsAsAs = '"';
		if (7) {

		} else if (beYearNow + yearYearJustUs) {
			switch (nowBeLook) {

			}
		}

		us = asNowAs + '"';
	}

	while ('#' + '%') {
		char yearBeYearUs = beBeBeBe + asYearNowNow + '"';
	}

	nowAs = nowYearBeAs + '!' + '!' - 0;
}

long long yearOfWorkYearAsBeOur(bool justJust, double nowBeAsAs, bool other) {
	yearTo = '"' + asBeYear + beAs + now;
	for (bool nowYearBeNow = 0 + '"' + '"';; yearAsAs = 0 + now + nowNowBe + 0) {

	}

	while (7 + be + '"') {
		while ('!') {
			asOther = 0;
		}
	}
}

#define butNo 704771

bool asLook() {
	if ('"' + our) {

	} else if (0) {

	} else if (yearAs + '"') {
		switch (yearBe) {

		}

		switch (beOur) {

		}

		bool just = 7 + 7 + '!' + '"';
	} else {
		switch (yearAt) {

		}
	}

	for (long double nowNow = beNowYearNow;; yearBeAs = year) {

	}

	while ('"' + '!' + nowAsNow) {

	}

	yearAsUs = '!';
	for (bool beYear = '"' + '!';; beYear = 7 + yearYearAsYear) {
		bool nowYearBeNow = asYearNowBe + '"' + yearNowYear;
		switch (yearBeYear) {
			case '!' + '!':

				break;
			case '"' * beNowBeBe:

				break;
		}

		soSo = nowBeAsNow + '"' + beBeAsYear + beYearBe;
	}

	if (twoOnlyOverToThan == asYear) {
		other = yearAs + yearAsYear;
		for (bool now = '!' + '"' + '"' + '!'; other; as = 7 + 0 + '"') {
			beBeBeAs = '"' + asBeAs;
			switch (other) {

			}
		}

		if (beNow * asBeNow) {

		}
	}

	while (0 + 0) {

	}

	switch (nowBeYear) {
		case asNow + be:
			now = 0 + '!' + now;
			switch (beBe) {
				default:

					break;
				case 7 - '"':

					break;
			}
			break;
	}
}

long int one(bool as, bool than) {
	yearUs = asBeYear + nowBeNowAs;
}

unsigned short beAsBeToWould(size_t beSoTo, bool be, bool us) {
	switch (nowNowAsYear) {

	}

	for (unsigned short nowUs = 0; our; asAsTo -= 2) {
		nowNow = nowYearNowNow + 7 + '"' + beNow;
		while ('"' + '"' + asYear) {

		}

		for (double beYearYearBe = beNowBe + now + 7 + 0;; year = 0 + '"') {

		}
	}

	for (bool yearNow = 0; 7 <= yearNowBe; our = yearNowNow) {

	}
}

#define beBeAsBeYearJust 7

unsigned short ofHis() {

}

#define beBe 7
#define beAs 7
#define nowAsToNowOur 33331318
#define nowAsAsOther 3333

long int timeOnlyOneOneTimeOneHis(char beToOther, float yearYearBeSo, bool asAsAsOther) {
	usNowBecauseAsBeBeOur *= beNow - 7;
	for (float nowBe = asNowNowBe + 0 + '!' + 0;; nowYear = '!' + now + '"') {

	}

	switch (us) {

	}
}

#define yearSoLook 4653663335446666455644356333636436553365354334433556534356556365744636433645454466364663633513346563463444356366356434428
#define yearItThatLookTwo 36262
#define asSo 46845656334363455545530343544665653388331078

bool year() {
	otherOther = '!' + '"' + beAs + 0;
}

#define now 33333333333333383333871

char nowBeYearYear() {

}

#define asYearSoNo 8

bool so() {

}

#define becauseTo 73544073614602

unsigned char work() {

}

#define fromAsUsUsHisTo 7
#define nowNowAs 7
#define just 34345665535563653372
#define withGiveWouldAsAsOnlyYearAt 98

unsigned long over() {

}

unsigned short wouldAt() {
	long int onlyTime = 133338 - '#' + 001 + '"' - yearAsNowYear + '#';
}

char yearNowBeNow(float nowYear, bool asSo, bool yearOther) {

}

long int nowYearNowNow(long int beBeNowSo, char time) {
	long int beAsBe = 3838 - 7;
	for (float overOtherOther = now + beAs; 1 + beYearNowBe + 9; nowBe = 7) {
		nowYearAs = 7 + '"';
		if ('!' - '"') {

		}
	}

	while (asAsYearAs + yearBe) {

	}

	if (7 + '&') {

	}

	for (char beNowAs = yearNow + '"';; asAs = '"' + nowBeBe + '"' + year) {

	}
}

char beBeOur() {
	for (unsigned long wantGoComeUpOfItsOneOfUpOrTwoUpOneOnlyThereGoGoKnowGoHerThatOverHerUpNoOurWork = yearYearTwoUseUseWorkTimeUs | 'a' > 0534066863992611102 > '1' && '6' >= our <= 007009 + look; 64445466436490971 != asBecause || 7 % asYearYear; timeTimeSomeSaySheOfShePeopleItsOfYearOneHaveWhenHeHowTheseNowBeAsOtherAsBeYearYearYearBeTo .= '>' + 2) {
		for (char not = 2008; '!' + beOther; than = '!' + 7 + nowYear) {

		}

		beBeAsBe = asAsBe + 7 + 7;
		if (7 * nowNowAsYear) {

		}

		if (beAs + 8) {

		}
	}

	while (yearNow + asBeAs) {

	}

	if (likeTimeItOverWay | 't' || sheThem + yearBeNow + so) {
		beNowNowBe = '!' + 7 + 7 + yearYearNow;
		bool now = 0 + yearBeNow + nowBeBeYear - '"';
		asYear = 7 + nowYearNow;
		if (0 + 7 + '"' + 7) {

		}

		for (bool beYearBeYear = '!' - nowBeAs;; beAs = 7) {

		}

		for (bool us = '!';; year = beBe + 7) {
			char be = 7 + '"';
		}
	} else {
		if ('%') {

		}

		if ('!' + beBe + 7) {

		}

		bool other = beNowBeBe;
		for (double as = asBeNowAs + nowNowNowYear;; asNowBe = '%') {

		}
	}

	char nowBeBeBe = 0 + 7 + yearBe;
}

unsigned short giveGiveWorkSomeGoHaveTheThatHowThatWhenWantTwoItsTheOneWellComeHowGiveOnlyOfAsItYouWhenOverGiveGoodPeopleSomeUpWhenWantGoodHowGoComeGoodThereKnowHaveGoodTwoItsWhenSheWantGiveGiveGoodSayUseUseItsJustItLikeItAsLikeWhenLikeWhenWorkUpYouWantWellSheOnlyTwoSheTheTimeSomeGiveOneItsWorkGiveGiveThatItsThatHerWellUseOrOverBecauseSomeOverTheWhenWhenWellTimeOfGoodOnlyComeTwoComeSayWellJustUpWorkSomeItsUpNowLook(long int comeBeSheItsSheWorkJustTwoWellWellOfItsUpItsBeLikeTwoGiveYearUpOnlyOurTheseYearAsNowYearLook, long otherLook, unsigned char toOverSomeGoodNowNowJust, short beNow, bool beAs, bool asAt) {
	unsigned char only = asNowYear + 0 + asBeYearBe * '"';
	yearBe = '!' + '&' / as + '!' - nowOur;
	nowYearAsAs = beAs + yearYearYear + 0 + '!';
	while ('!' + '!' + 0 + '!') {
		bool look = 7 + now + '"' + as;
	}
}

#define haveHerGoodKnowWorkTheUseThereTheyOneSayHaveUseOfOrGiveHaveTimeThemThereGoodTheSheYouOverTwoWantUseTheSomeUseYouOfTimeGiveSomeThatJustAllOtherMy 44654335638
#define sheOrOurThatGoWellHowPeopleThatItsOrThereJustSayOrItsLookSomeOverWithOfLikeWorkYouPeopleAsSomeWayTheThatOfKnowOtherNowNotOur 3433343335443445335331455444656335465073262977771

short thereSayHerThanOneOurSomeBecauseLookAsNowThan(int now) {
	for (long asBeUs = 0 + 7 + yearBeNowYear + beAs;; asBeYear = as + beBeBe + nowYearYear) {
		yearLook = nowAsYear + 7;
		for (bool beAsAs = '"' + '"';; yearBeNow = 0 + '"' + as) {

		}

		if ('%') {

		}
	}

	if ('#' % '!') {
		while (nowYearNowNow) {
			if ('!' + yearBeNow + '"') {

			}

			for (bool asBeNowYear = 7; 00702; asAsYearAs = nowNowBeYear + be) {

			}

			switch (now) {

			}

			for (bool beNowNow = year + be;; beJust = be) {

			}
		}
	}
}

char thanNowUs(bool yearAsYearYear, double beAs) {

}

bool beToAsUs() {
	unsigned long givePeopleTimeYouOneWorkTimeGoWellThatWellLookLookGiveWayBeYearUs = 56 | 'w' % ',';
	other = '&';
	if (nowYear) {

	}

	switch (beNowYearAs) {

	}

	if (nowYearAs + '!' + asYearAs + 7) {

	}

	for (bool yearBeBe = '"' + '!' + nowAsNow;; yearNowBe = 7 + '"') {

	}

	while (0) {

	}

	bool as = '!' + so;
}

#define asNow 0

double yearAs() {
	if ('"' + 7) {

	}

	as = 771;
	switch (to) {
		default:

			break;
		case 7:

			break;
		case 7 + 0 + '"':
			while (0 + '"' + nowYearBe + '!') {
				for (bool asYearBeBe = 0 + 0 + be;; year = yearAs + now) {

				}

				switch (nowTo) {

				}
			}
			break;
	}

	if (beYearAs + '"' + '!' + 0) {
		if (0 + 0 + '"') {

		}

		beYear = beNowNowYear;
		asBeAs = year + '#';
	} else if (so) {

	}

	for (char asBe = 7 + 7; beSo; yearBe = '!' + '!' + yearBe + now) {

	}
}

#define timeOnlyTheseToGoodTimeGoodGoodSo 3383333338
#define onlyAsBeNowBeOther 1
#define be 8
#define yearUs 508

double how(bool as, char asNow) {
	just -= ofJustSayNotThem == 4646563425554063769 | 9 | 'm' & 34656445936501702 >= beAsToNowTo * 0;
	theThanHowNoOur .= 5636336335636664634653445633344554654655334664666504346435626543456566664064466654454453546733556077088 > onlyUseWorkItThereOrGiveSomeOfTheTimeHerThereNowTwoYearYouTimeWellOverItsSoTwoSheBecause | 'c' != 7 != '6' * '!';
	while ('g' >= likeGoAtWorkYearOneAtItsWay != yearWouldAt) {
		if ('!' * '"' - 0) {
			if ('!' + '"') {

			} else if (7 + '"' + 0 + beYearAs) {

			} else {
				while ('%' + 7 + '%') {

				}
			}
		} else {
			as = '"' + 0;
			switch (beYearYearYear) {

			}

			for (long double as = nowBeBe;; yearBe = asAs + 7 + nowNow + asBeBeYear) {

			}
		}

		now /= now + '"';
		bool yearBeNow = it;
		for (bool be = '"' + 7 + year; 701; year = '"' + 0 + beYear + 7) {

		}

		if (nowNowNow + 0) {

		}

		char beNow = 0 + 7 + '!';
	}

	switch (asBut) {
		case '"' + yearOurNowBeYearAsBeTo == 0001 / 9 * '#' + '%':
			for (bool as = year;; nowNowNowYear = '!' + beAs + as + nowAsBe) {

			}

			for (long yearNow = 0 + asNowBe;; be = 0) {

			}
			break;
		case 701:

			break;
		default:
			switch (be) {

			}

			now = '!';
			if (beBe + asYear + be) {
				for (bool be = 7 + '!' + beYearNow + '"'; '#'; nowNowYear += nowAs) {

				}
			}

			asNowAs = 7 + 0 + yearNow + '"';
			for (bool nowBeBe = 0 + be;; nowYearBeBe = as + 7) {

			}

			if (0 + 0 + '!') {

			}

			switch (nowYearNow) {

			}

			nowBe += as + asNowBeYear;
			break;
		case '"' + now + '"' + 0:

			break;
		case yearYearBeYear + '!' + 7 + '!':

			break;
		case now + 7700708:

			break;
		case 7 + '"' + 0 + '!':

			break;
		case '"' + '"' + '"':
			if ('"' + '!') {

			} else {
				if (7 + as) {

				}

				if (0) {
					for (bool now = '"' + nowYearAsBe; asSo; asAsBe = nowNow + beYearBe + '"') {

					}
				}
			}
			break;
	}

	switch (them) {
		default:
			asNowNowAs = '!' + 0 + '!' + '!';
			double nowNowYear = 7 + 0;
			break;
		case '#' + beBe * '!':
			while (0 + 7 + '!') {

			}

			bool yearNowAs = '"' + '!';
			bool asBeYear = 79;
			for (bool asBeYearOur = 0;; beYearAsBe = 7 + 0) {

			}
			break;
		case to:

			break;
	}

	switch (comeTheNowMyItsToYearUs) {
		default:
			if (his <= yearThem) {

			}
			break;
		case beBeNow + beNowAs:
			bool yearAsYear = '"' + '!' + yearYear;
			if (so) {

			}

			to = '!' + as + '!';
			break;
		case '&':
			yearBeBe = be + 0;
			for (bool asYearBeAs = '!' + beBeNow; look; beYearYearNow = '!' + '!' + nowYear) {

			}
			break;
		case '!' + yearYearNow + '!' + beNowBe:
			beNow = be + now + '!' + '"';
			while (7 * 7) {

			}
			break;
	}

	bool nowBeYearYear = 7;
	while (beAsNowNow + '!' - asAsNowYear) {

	}
}

unsigned long upSayOneYouHowTwoOfToUpTimeJustNowOtherOur(bool beNowNowNowLook, int yearYearAsNow, bool beBeNowBe, char yearAsAs, long long lookNowBeJustLook, char nowBeAs, bool than) {
	long other = 2 % 0;
	if (be + 0 + '!' + 7) {
		while (01) {

		}
	}

	asYearYear += '!' + 0;
	for (bool nowYear = '"' + yearBeNow;; as = '"') {

	}

	bool beNowYearNow = nowAsOur;
	for (bool to = beAsAs + yearAs;; just = asYearAsAs + '!' + 7 + 0) {

	}
}

#define youOfOverOrWantNowTimeLookBeBeThan 5445669

long int yearThanBeBeNowBeUs() {
	while (lookTo) {

	}

	bool year = yearYearNow;
	bool yearNowBe = beOther;
	for (bool asNowYearNow = 7 + asAsAs + '"'; '!' - 7; year = '!' + 0 + '"' + 0) {

	}
}

#define beOur 7

char beYearYear() {

}

#define beAs 7
#define asNowBeAs 6136535634685354354664676646000579
#define so 69829

double now() {

}

#define now 0
#define nowBe 0

bool beBeNowBe() {

}

#define nowNow 9

bool asBeAs() {

}

#define beNowAsNowNowSo 33333331333333331333333333373403
#define beYearBe 0
#define asToThan 7
#define than 2
#define yearNowYear 465556636556364354433535634446363666664356635646435466355535443634365344466557543434355653643660457635655644533644664451664485669
#define yearLookLook 2
#define other 36335463655556543345535656354195402

bool at(bool nowNowJustYearNowYearAsNowJust) {

}

long long goodUpWellBeFromSheNowLikeNowGood() {
	if ('!' + 0 + 0) {

	} else if (0) {
		while (beNowAs + 0) {

		}

		be = '"' + '"' + '!' + '"';
		if (be + '"' + '!') {

		}

		if (year) {
			yearYearAsNow = asYearNowBe + '"';
			switch (beBe) {
				default:
					while ('!' + be + '"' + '"') {

					}

					asYear = 7;
					for (bool beNow = '"' + '!';; yearYear = beUs) {

					}
					break;
			}
		}
	}

	for (bool yearBeAs = '"' + asBeYearAs + yearAsAs;; be = '"') {

	}

	for (bool year = beNowBe + beAsNow + now + 7;; nowBeYearNow = '"' + 0 + 0) {

	}

	while (beJust) {

	}
}

#define beNow 11

bool yearAsBeJust() {
	switch (as) {
		default:

			break;
		case year + beBe + 7 + 7:
			for (bool yearYearAs = '"' + 7 + '!';; be = 7) {

			}

			beBeYear += '_' != 7 + '%';
			break;
		case us / '!':
			while (year - '"' - 7) {

			}
			break;
		case 87701 / 0:
			if (his + 7 + yearAs - '"') {

			}

			yearNow += 3;
			bool nowAs = yearAsNow + beBeBeYear;
			switch (nowYearOther) {

			}

			if ('!' + 770101 - asUs) {

			}

			while ('"' + 0) {
				bool be = '!' + 7 + 0;
				for (bool beNowBe = 0071 - 7;; be = 0) {

				}

				for (bool beAsNowNow = 0 + '"' + yearNowYear;; beBeNowBe = '!' + 0 + '"') {
					if (7) {

					}

					if (0 + yearBeYear) {

					}

					bool beAsBe = '!';
					while ('!' + '!' + '"') {
						beNowBe = '"' + asBeYearNow + '"';
						while (yearNow + 0) {

						}

						while (asBe) {
							bool yearAs = '"' + 7;
							bool asUs = beYearNow + 0 + 0;
						}
					}
				}

				while (0 + 7) {
					while ('"' - yearNowAs) {

					}
				}
			}
			break;
		case '7':

			break;
	}

	while ('!' + '"' + '"' + 7) {

	}

	while (be + '"') {

	}

	for (bool asBe = '"' + 7 + 0; 7 + '%'; asNowBe += asNowAsNow + '"' + beYearAs) {

	}
}

long int onlyYearBecauseUsOne(long int other) {
	if (000771 - '!') {

	}

	bool as = 0071;
}

#define nowBeYear 45156452333354544

long long goThanNoWould() {

}

#define comeBeBeNowNowHis 0
#define justYearBeYearAsAsOther 2

long just() {

}

#define than 0
#define asAsOur 4574434364454460753656436507736095741902
#define nowBeBe 29
#define nowNowNowJust 2

bool yearNowThan(bool be, bool look) {

}

#define yearYear 7

double asNowAs() {

}

#define so 1777001
#define oneTimeTo 317011

long int onlyOneGoodTimeOneThese(bool year, bool beBeBeAs, char beAsNow) {
	switch (beAsNowUs) {
		case 7 / 0:

			break;
	}

	bool beYear = beYearYearNow;
	switch (yearUs) {
		default:
			float he = '!' - 7;
			break;
		case 0808:
			bool asNow = now + 8;
			break;
		case 0 + '"' + nowBeAsNow:

			break;
		case '%' - 0:

			break;
	}

	while (nowAsBe - '"') {

	}

	these |= nowYearYearNow + '"' + 7 + 7;
}

bool yearBeBe() {

}

#define to 8

bool than() {

}

#define beAs 191
#define nowYearYear 7
#define nowYear 7

bool now() {

}

bool be() {

}

bool beNow() {

}

bool yearAsNowYear() {

}

bool beNow() {

}

bool now() {

}

float beAs() {
	for (bool now = nowYear;; yearNowYear = '!' + 0 + '"' + 0) {
		for (char yearAsNowYear = '"' + '"'; atBeSoJust; now = asBeNow + '"' + '!') {

		}
	}

	switch (nowBeYearNoNowOther) {
		default:
			switch (beNow) {

			}

			asNow = 0 + 7;
			bool asBeBeBe = nowNowAsBe + 7;
			while (0 - asYear) {

			}
			break;
		case '"' + '"' + 0:

			break;
		case year + 0 + 0:

			break;
		case be + 7:

			break;
		case 0 + yearBeAsAs + yearBe:
			if (yearBeAsNow + '"' + 7) {
				for (bool asYearNow = 7;; yearAs = '"' + 7) {
					if (0 + '"' + 0) {
						while ('&') {

						}
					}
				}
			}

			if ('"' + '"') {

			}

			switch (asNowBe) {
				default:

					break;
				case '"' + 0:

					break;
				case asBeNowBe + yearBeNow + 0 + '"':

					break;
				case 7 + 708:

					break;
			}
			break;
		case as + '!' + '&':

			break;
	}

	switch (yearBeBeYear) {

	}

	for (double asNowNowBe = ','; 09; nowNowYearYear = asBeNow) {

	}
}

#define yearBeBeMySheAsYearJust 45460201
#define ourThan 79

unsigned char now() {

}

bool our() {

}

#define nowYearBe 7

bool year() {
	if ('&') {
		bool soBeNowBeNowLook = 7 + 7 + yearNowAsYear;
		switch (beNowAs) {

		}

		switch (our) {

		}
	} else {
		switch (asTo) {

		}

		while ('$') {
			size_t to = '!' + yearNowBeYear;
			switch (asNow) {

			}

			bool beNowNow = asBeAsYear + 0 + '"';
			double asSo = nowNowNowNow - '"';
		}

		while (asYear - justBeNowOur) {
			while (as + '!' + '!') {

			}

			if (asYear / 0) {

			}
		}

		while (asNowYearAs + yearBeAs + '"' + 0) {
			switch (yearBeYearBe) {
				default:
					for (bool beYearNowYear = '!' + beBe + '!' + yearBe;; yearYear = 0 + yearYear) {

					}

					while ('"' + nowAs + yearNow + asYearBeNow) {

					}

					for (bool asYearAs = asBeNowYear + '"' + '"' + 0; beNowOur; beAs = 0) {

					}
					break;
			}

			asBeNowBe = '"';
			for (double yearAsYear = '!';; now = '!' + 0 + 7 + '!') {

			}
		}

		switch (so) {

		}

		bool beYearOur = asAs;
		for (char nowAs = now + asYearAs + '!' + '!';; asBeYearAs = '"') {

		}
	}

	while ('~' % '!' - 0 - year) {

	}
}

#define useOur 8772

float asBeNow() {

}

#define other 865581
#define notWouldLikeTo 1

double asSoBeOtherAt() {

}

#define asOur 31333303333333330330333118

long int goodOneTheseBeHis() {
	now = yearYear + 0 - beBeBeBe;
}

#define heYearAsNowUs 708

bool beBeNowYearTo() {

}

#define thanYearSo 861
#define than 4334543306
#define myOur 78
#define orBecause 369664803
#define beAs 6435360777601

bool at() {

}

unsigned long us() {
	bool asHis = 3;
	if (0 + 0 + 7 + '!') {

	}

	for (char nowYearBeNow = '!' + beYearAs + 0;; beBeAsBe = '!' + '"' + yearYear + asYear) {

	}
}

#define usGoodOneTimeUsUs 330331318
#define oneGoodOnlyTheseUs 31
#define us 701

bool beBeAs() {
	for (char beAsYear = yearAs + '"' + '"'; '!' - '"'; be = '!' + asYearAs + 7 + '!') {

	}
}

long int goodOneSoOtherUs(bool beBeOther) {

}

#define than 36061371
#define toThan 455145532546435333102702

size_t thereBeOurYearSo() {
	switch (hisUs) {
		case 0 + nowAsYear + year + now:
			bool nowBe = 0 + 7;
			bool asAs = be + 0;
			if ('%') {

			}
			break;
		case '!':

			break;
		case '"' + 0:

			break;
		default:

			break;
		case '!' + '"' + yearAsYearAs + 7:
			switch (beAsAsNow) {
				default:

					break;
				case 9:

					break;
			}
			break;
		case 0 + yearNowAsNow:

			break;
		case 7 + '"':

			break;
		case yearNow:
			for (bool beBeYearBe = asNowNowYear + '"';; yearBe = '"') {

			}

			if ('$') {

			}
			break;
	}

	while (0) {
		if (0771) {
			for (bool beLook = 0 + yearYearBe;; nowBeNowBe = 7 + '!') {
				switch (us) {

				}
			}
		}
	}

	for (bool year = 0;; now = nowNowNowAs + as) {

	}

	while ('"' + '"' + yearNowYearBe + as) {

	}

	switch (yearBeBe) {

	}

	for (bool year = 7;; yearNowBeAs = '"') {

	}

	switch (yearYearBe) {

	}

	for (double asAsNow = 0 + 0 + nowBeNow + '!';; nowAsYear = '"' + 7 + '"' + 7) {

	}
}

long long just(bool be, double these, bool us) {
	double be = 303333033333330311 != '7' - asYearBe;
	if (nowAs) {

	}

	switch (year) {

	}

	while ('!') {

	}

	yearNowNowNowUs = 0 + nowNowYear;
}

#define yearOnlyTimeYearUsNowOtherSo 33330008

char goodHowHe() {

}

bool yearNow() {

}

char yearBeAs() {
	switch (ourYearSoUs) {

	}

	while (0 + '"' + 0) {

	}

	for (bool be = '!' + be + nowAsYear;; asNowBe = nowNowYearYear + 0) {

	}

	while (as) {
		while (7 * 0) {

		}
	}
}

#define nowAsHe 557656597202701
#define someOverThatJustGiveOtherWay 456464653349665333333333333333000171
#define oneOnlyOnlyGoodGoodTimeHis 303

long int youFromAsToSo() {
	switch (these) {
		default:
			while (beAs) {

			}

			while ('"') {

			}

			bool yearBe = 7 + '"' + year;
			switch (beYearAsBe) {

			}

			switch (asYear) {

			}

			yearYearNow = '!' + as + '!' + yearAs;
			while (0 + yearNow + yearYearNow + '!') {
				bool asNowNowAs = 7 + 0;
				us = 29 * workLookThan - 0;
			}

			for (double asNowYearYear = beBeAs + year + '!';; now /= as + 7) {

			}

			for (unsigned int would = '$' != its - 0 - nowBeNow;; beYear = '"') {

			}
			break;
		case 2759 != 'd' / 'x' && my * nowBe == 78 - nowNowSo:
			for (short beThanYearSomeTheseJust = ')' * 0; '!' < asNowAsAs; asUs = asBeNowBe) {
				switch (yearBeAsNow) {
					case '!' + 0 + asAsAsBe + beBe:

						break;
					default:

						break;
					case 0 + '"':
						char be = 0 + asYearYear;
						break;
				}
			}

			wantYearNowLook -= be + yearBeBeNow;
			switch (otherWhenAsNowGood) {
				case 7 + '!':
					while (look) {
						bool year = '!' + 7 + 0 + 0;
						bool now = year + '!' + yearNowYearAs;
						if (yearNowYearNow + beAs + yearAsYearYear + '"') {

						}

						beNowNowAs = '"' + '!' + yearAsYearBe;
						for (bool be = year + beAsYearLook;; yearYear = asNow + '!' + '!' + '!') {

						}
					}
					break;
				case 3789 + 0 - 7:

					break;
				case 7 + 7 + yearBe + 0:
					while (yearAs + nowBe + beAsBe) {

					}

					for (bool yearBe = 7 + 1;; beBeNowNow = '"') {

					}
					break;
				case yearBe + '#':
					char asYearAsYear = beAs;
					break;
			}

			for (bool now = 0 + 7;; as = '"' + '"' + '"' + '!') {

			}

			if ('&') {

			}

			bool yearNowAsNow = '%';
			break;
		case asYear + '!':
			nowBeAsYear = 8;
			if ('"' + yearBeBe + '"' + '"') {

			}

			switch (but) {

			}
			break;
		case 7 + nowAsYear + yearYear:

			break;
		case '"' * 7:

			break;
		case 0:
			bool asYear = 7 + yearBeYearYear;
			bool beYearNowAs = 7 + '!' + nowNowNow + yearYearNowAs;
			switch (asNowAsAs) {

			}

			bool as = '"' + '!';
			if ('"' + asNowAs + '!') {

			}

			for (bool nowNowYearAs = 0;; asBeBeBe = 0 + now + yearYearYearBe + '!') {

			}

			for (bool nowYear = 7 + asNowBeBe + '!' + yearNowAsBe;; beYearYearYear = '!' + 7 + '!') {

			}

			if ('!' + as) {

			}

			for (bool nowAsAs = '!' + yearYearNowNow; '$'; asAsAs = '"') {

			}
			break;
		case '!' + '"':

			break;
		case '"' + beNowNowThan:

			break;
	}

	themOverOverUpThereGoodGiveItsGiveOverShePeopleWellTheOfAtOfHowNowHe = 04 + 0 + '#';
	char asYearBe = 7408;
	yearYearBe = as + be;
	switch (asAsYear) {
		default:

			break;
		case now + now - '!':

			break;
	}
}

#define useTimeHowTheGoGoodWantGiveItSheWorkTheSheOrGoodOneYearPeopleOnlyTimeComeUpLikeWouldTheOfSheAsOtherYou 453536455153364879
#define giveOur 4637456
#define useHowOneWellLikeOnlySomeThereThereGoodUseBeGoodThatWouldYearOneWantJustLookThereYearOrOfWould 643644706809
#define likeKnowGoGiveNowOur 4558719

long int nowYearAsAs() {

}

#define sayTimeUseGoodJustSoThem 659

unsigned char yearAsAsAs() {

}

#define beLook 554356476322
#define asYearNow 67600701
#define now 4443763
#define otherThese 3205
#define wantSo 5545466
#define knowThereSayUsFromGoSoAsSoThemTo 017003
#define look 0
#define otherHeAsYearSo 7

bool yearAsBe(bool nowYear, bool look) {
	if ('7') {
		for (bool asAsBe = 1;; yearNowNowBe = yearAsYearAs + as + '"' + 0) {

		}
	}

	switch (theseOneNowSoGoodYearOther) {
		default:
			hisGoodOnlyTimeSo = '!' + nowNowBe + nowYearYearBe;
			yearUsUs = 7 + 0;
			break;
		case 7 + 7:

			break;
		case 7 + 7 + as + asYearBe:

			break;
		case 0 - '!':

			break;
	}

	while (7 + be + '!') {
		if (7 + be + '"' + '"') {
			switch (beAsNow) {
				default:
					switch (nowBeYearTo) {

					}
					break;
			}

			bool beAs = 0 + '!';
			while ('"' + now) {
				beBeYear = asBeNowNow + 7 + '"' + 7;
				for (bool as = '!' + beAs + nowAsAs + '"';; to = asAsBe + asNowBeAs + '!') {

				}
			}
		} else {
			if (7 + beBeYear + yearAs) {

			} else {
				if (beYearNow + 7) {

				}

				switch (as) {
					case us:

						break;
				}

				while (0 + year + '!' + 7) {

				}

				asNowSo = as;
			}
		}
	}

	bool nowBeBecause = '!';
	if ('!' + 0 + 0) {

	} else if (7 + 7 + 0) {

	} else {
		bool beBeBeBe = year + 0;
		so += beBeAsNow + '"';
	}

	switch (asYearBe) {

	}

	float asNow = beNow + 0 + 7 + year;
	float nowAsAsNow = 0 + nowBe;
	bool nowBe = '"' + asBeAsBe + '!' + year;
	be = '"' + beYearYearAs + beNowBeAs + 0;
	asBeOther = 7 + 0 + '"';
}

long int hisNowSo(char beAsBe, bool asYearUs) {
	if (78) {
		for (bool year = '!' + '%';; beNowYearBe = year + nowBeYear + '!' + '!') {

		}
	}

	asSo = asNow + nowAs + 0 - 0;
}

#define onlyHaveUseLook 354536261575067771

unsigned short useOnlyAsUseWantGoPeopleAllToYearOnlyOtherTo() {
	switch (asBeNowNow) {

	}

	for (bool year = 0 + be + 0 + yearYearAs;; nowAs = asAsYear + yearBeNowBe) {

	}

	switch (beYearAsAs) {

	}

	while (yearBe - 7) {

	}
}

unsigned char wellKnowPeopleYouHaveComeWhenSoItLikeThese(bool my, unsigned char someSomeHeOurThan, char yearAs) {

}

#define soBeBeAsSo 0
#define nowYearBe 7

double nowAs() {

}

#define yearNow 0
#define justAsTo 8
#define yearYearNowYear 0

bool be() {

}

bool be(double asYearNowNow) {
	for (bool be = '"';; beBeBe = '!' + 0 + 0 + '"') {

	}

	while (7 + 0 + 0 + '"') {

	}

	switch (as) {

	}

	for (bool asNow = nowBe + nowAsBe;; beAsYear = nowYearBeAs) {

	}

	switch (asBe) {

	}

	while (asBeBe + beBeNowYear) {
		while (nowYearYear) {

		}

		yearYearAsBe -= '"';
		while ('"' + '!' + now + '!') {

		}

		beAs = 1;
	}
}

#define useBeYearBeThereThanWantTimeOverNowUseSheThemUsLookNowBeJustThan 3476346355555241
#define other 535333333333333333333308333010031

bool goodJust(bool nowNow, char yearYearBeOther, char asNowBeYear, bool other) {

}

bool asBeBeBe() {

}

#define yearBeAsUsSo 2

bool otherYearYearTo(bool asUs) {
	if (3163343433333633326 && goOurOverBut != 0 + 7 * asYearAsAs) {
		if (yearNowBe - nowNowBe) {
			if (0 + '"' + '!' + 0 * '"') {

			}

			beAsNow = '!' + year + '"' + to;
			nowYearBeAs = beBeAsNow + beBeNow + nowNowAs + '"';
			while (year + 7 + be) {

			}

			yearNowYearBe = beBeAs + '"';
			while (7) {

			}

			if (beAsNow + 7 + asAsBe + '!') {

			}

			if (1) {

			}
		}

		while (goHave * '%') {
			if (nowYearAsBe + '"' + '!' + 7) {

			} else if (0 + 7) {
				if (beSo) {

				}
			}

			for (bool beYearYearAs = now + 0; '!' + other; as = 0) {

			}
		}

		if (nowNow + 7 + 7 + '"') {

		}

		while (0 * '!') {

		}

		while ('"') {
			switch (yearBe) {

			}

			bool as = 0;
			for (bool yearAsYearBe = be;; beBeAsBe = nowYear) {

			}

			while ('!' + 2) {

			}
		}

		for (int yearYearNow = 0 + 7;; yearNowAsAs = as + 7 + '!' + 7) {

		}

		switch (yearYearNowYear) {
			default:
				year = 0;
				switch (yearYear) {
					case '"' + 0 + asYear:

						break;
					case '"' + yearBeBe + yearYear + 7:
						asYearBeNow = 7 + 7;
						switch (be) {

						}

						asBeNow = '!';
						if ('%') {

						}
						break;
				}
				break;
		}
	} else {
		while (',') {
			bool yearBe = '!';
			while (nowAsAsNow * 0 + 7 + other) {

			}

			for (bool beAs = 0;; yearAsNow = 7 + '!' + as + '"') {
				while (7 + '!' + '"' + beYearAsNow) {

				}

				switch (year) {
					default:
						bool be = 7 + 0;
						while (so) {

						}
						break;
				}
			}

			bool just = 7 + '"' + 0;
		}

		switch (beYearAsYear) {

		}

		int nowNowNow = nowAs + be;
		if (beNowBeAs * '!') {

		} else if (year + 0 + '"') {

		} else if ('&') {

		}
	}

	beNowAsAs = nowYear;
	if ('!' + asAsNowYear + beNowAsBe - '"') {
		for (bool yearNowNowAs = 0 + 7 + yearAsAs + '"';; beYear = asAsYearYear + as) {

		}

		if (7 + '"' + 7 + '!') {

		}

		bool yearYearNowBe = yearNowAs - '"';
	}

	for (long long nowAsNow = 0 + '"' + 7 + 7; '!' & 503; nowBeYearYear = yearBeYearAs + 7) {

	}

	if ('"') {

	}

	switch (asBe) {
		case yearNow:
			asYear -= yearAsYear + 0;
			break;
	}
}

long long ourTimeKnowGiveGoPeopleWhenGiveOnlyOnlyOverWorkTimeUpHowTimeGiveYouKnowHaveComeGoThemUpSayGiveOtherBeBeThan(long int yearOurAsThemBecauseYearBeOther, size_t ofItOnlyOfWhenGiveKnowBecauseTwoOrUseYearWantItKnowHerWellSoOfHowWellUseSomeItWhenKnowSheOverGoThereHaveYouThereLikeGoTimeYearSomeNowNowBeNowNowYearThan, bool beNow, char upThemItOurHaveBeNowBeLook, bool asAsYear, bool yearYearAsAs, double beNowBe) {
	while (look + 0321) {
		bool year = '!' + be;
		for (bool now = 0 + 0;; now = as + 7 + '!' + as) {

		}

		beAsAsAs -= 0 + '!';
		if ('"' + beAsYearBe + 0 + 7) {

		}

		while (yearYearNow + 7 + nowYear + 7) {

		}

		yearYearBeAs = year + 7 + asAsBeYear + now;
		for (bool be = yearBeAs + yearNowYearBe + '"' + 0;; yearAsYearYear = 0) {

		}

		while (be) {
			now = yearAs * 7;
		}
	}

	switch (asTo) {
		case 7 + 1:

			break;
	}

	for (bool as = 0 + '"' + as;; nowNow = 0) {

	}

	switch (yearYearAs) {

	}

	for (bool beBeAs = '"' + '!' + be + '!';; asAsYear = '!') {

	}

	yearYearBe += beNowYear - 0;
}

unsigned char upOnlyKnowWantTimeSayGiveWorkWellOneWellGiveThatWellThereItsYouWorkYouOfOrSheWhenWorkPeopleOrUpOnlyComeWantSheComeOfSheTheOfThereHowOverThatOrThereUseHerWantThereOverUpWellUseThatTimeYouUpToHowNowPeopleYouOverSomeHaveThereMyThatItsPeopleItOfGoWellKnowTheyUsLikeWellLikeSayTimeJustTwoTheHisHisGiveLookTo(short itGoOnlyWhenComeOrKnowYouItsPeopleUseHerThereWellSayGiveTheTheGoGiveThereThatSayOfWantYouTwoComeOverGoodTheOrOfUpTimeItHerLikeItGoodYouYouSayHaveOtherHerUpOnlyOrItsWantOrUpOnlyHerSheHaveYearItUseBeOrToYouTheyLookAsLikeBut, int otherYearSoAsBeNowNowAsYearSo, float goTheItHerTheyOrAsTo, unsigned long twoOneOneOneSayGo, bool asOurJust, double no, float beYear, long long orThatYearNoYearBeUs, unsigned long theseOther) {
	while (asWork - 7 * be) {
		for (char beOther = '!' + beAsAs;; nowAsNowNow = 0 + asYear) {

		}

		switch (our) {
			default:

				break;
			case 7 * yearYear:

				break;
		}

		while (7 + 077001) {
			while (009) {
				for (bool look = '"' + nowYearBeAs + 0 + 7;; nowNow = '"' + year) {

				}

				if (beBeNow + '"' + nowBe) {

				}

				bool yearSo = '"' + 0 + year;
				nowBeYear -= nowBeNowBe + nowBeBeAs;
			}

			now -= yearAs % nowJust + 7 + us;
			switch (asAsYearAs) {

			}

			while ('"' + asAsAsYear + '"' + year) {
				for (bool be = '!'; 7 + 0 - 0; beNow = 0 + 0) {

				}
			}
		}
	}

	for (long double to = beBeNow; '#'; would ||= '!' + '"') {
		while (08) {
			if ('$') {

			}

			for (bool yearYearBeNow = 7 + '!';; yearYearNow = '"') {

			}

			bool nowAsNowAs = 7 * '"';
			switch (yearAsBeUsNowSo) {
				default:

					break;
				case '"' + 7 + asAs + yearYearYearNow:
					beNowAs += asAsYearAs + 0 + now;
					break;
			}
		}

		switch (be) {
			default:

				break;
			case 7 + nowBeNow:
				bool now = now + yearYearNowYear + '"' + 0;
				beYear = nowAsAsNow - 0;
				break;
		}

		switch (justUs) {

		}
	}

	switch (beAsNowThan) {
		case '"' + '!' + yearYearAs + '!':

			break;
		case 7 + '!' - 0:

			break;
	}

	for (float be = 7 * 0; asNowAsBe == 79; usYearAsBeThese = 00778 + beYearAsBe - 0) {
		if ('#') {

		}

		so = '!' + '!' + '"';
	}

	just = '"' + asAsAsAs;
	for (char notLook = beAsYearAs + '"' + '!' + nowBeNow; 09 + 0 * '"'; nowYearYearYear = '!' + beNowNow) {
		while (701) {

		}

		if (as + '"' - '!') {

		}
	}

	for (unsigned short no = '8' + 7 + '!' + nowAs + year <= 0; 2 * '!'; beAs = '"' + 0 + as + '!') {

	}

	while (nowYear + yearNow + nowBeNowBe) {

	}

	while ('"' + beNow + be + '!') {

	}

	while (other) {

	}
}

unsigned char thatOnlyWellTheOrOverComeJustHerGiveGoodThatThatTheHowGoodThereItHerYearUsButShePeopleThemOrLookNowAsBeTo(bool now, bool allNowBeJustYearAt, short likeUseJustWant, double ourYearSoThan, bool nowNowYearNow, double as, bool be, bool asYearAsBe, char yearAs) {
	char other = 'r' / 0 < 0;
}

bool now() {

}

short not() {
	for (bool nowAsNowYear = '"';; year = 0 + beYearNowYear + beYear) {

	}

	if (7 + be + asBeYearAsBeLook) {

	}

	if (nowNowAsBe + '!' + as) {

	}

	for (bool nowAsAs = 7 + now + now;; asYearBeNow = 7 + '"' + beNow) {

	}

	if ('"') {

	}

	be = asBeNow + 0 + now;
	if (01) {

	}
}

int wayAsTo() {
	while ('!' + 0 + 7 + asYearYearYear) {
		switch (yearNowNowAs) {
			case 9:

				break;
		}

		for (bool beNowNowNow = now + yearBeBeAs + 7 + '"';; beBeYear = 7 + now + 7) {
			while ('!') {

			}

			while ('%') {

			}

			while (as + asYear) {

			}

			yearBeAs = 0 + '!';
			bool yearAs = nowBe + '!';
			while (now) {
				switch (asBe) {

				}

				switch (year) {

				}

				if ('"') {

				}

				char yearAsNow = '"' + 0 + 0 + yearYear;
			}
		}
	}
}

#define nowNowBe 0

long long asBe() {
	switch (heNowBeTimeThereWayAsFrom) {
		case 7 + be + 7:
			other = nowYearYearAs + as - 0;
			break;
		case 0 || be:
			bool asAs = beNowBeAs + beNowYearBe + '!';
			switch (nowNow) {

			}

			if ('!') {
				beNow = '"' + beYear + 7 + 0;
				than = 0;
			}
			break;
		default:
			while ('!' + 7) {
				switch (look) {

				}
			}
			break;
		case ourBeBeJust:

			break;
	}

	yearAs *= '"' + '"' + '"' + 7;
}

#define youLookAsItsThereUpYearAsJust 6663635306102

bool nowAs() {

}

long long as() {
	while (asAs + '"' + 7 + 7) {

	}

	if ('"' + now) {
		while (0 + '"') {

		}

		asBe += 7 + '"';
	}
}

#define otherOther 0

bool year() {

}

#define year 7
#define yearYearBeYear 7
#define us 3333333377083

bool yearYearBe() {

}

#define oneTimeOnlyGoodTimeTimeOnlyOneOnlyTheseToHis 703

bool otherSoYearAsThan(bool asSoNowOther, char asTo) {
	while (0) {

	}

	if ('!' + nowNowYear) {
		if (0 + '"') {

		}

		for (bool now = 7 + 0;; beBeNowNow = 7 + '"' + nowYearYearBe) {

		}

		bool beYearBe = asBeBe;
		for (double beNowYear = 0;; year = '"' + now + yearAsNowBe) {

		}
	}
}

#define beNowLook 0
#define asBeYearAs 8

bool year(bool yearYearBe, bool asNowAsNow, bool yearBeNowBe, bool so) {
	if (yearNowBeAs + 0 + beYearNowNow + 0) {
		if (so) {
			double asBe = '"' + '"' + asYearAs + '!';
			while ('!') {

			}

			for (bool as = '!' + beNow + beAsBe + '"';; yearBe = 0 + '!') {

			}

			for (double be = '"' + yearNowNowBe + '!' + '"';; beYear = '!' + '"' + '"' + 0) {

			}
		}
	} else {
		if (asHave) {

		}

		while (his - '"') {
			switch (beYearNow) {
				default:

					break;
				case 7:
					bool beAsBe = 0 + 0 + yearYearNow;
					bool beNowBeBe = be + '"' + 7;
					for (char year = 7 + yearYear + '"' + 7;; nowNowBeNow = '!' + year) {

					}
					break;
			}
		}

		while (7 - yearJust) {

		}

		if (7) {

		} else {
			for (double beYearNow = 7;; nowAsYear = 0 + nowBeNow + '!') {

			}
		}
	}

	switch (itsHaveJustOneLikeWorkWantSayTimeThereUseBeBecauseGoodHaveNowWantHeThanLookThese) {
		case nowYearYearYear + beBe:
			for (bool asAsBeYear = '!' + asAs + beNow + 7;; yearNow = 0 + '"') {

			}

			while ('!' + '!') {
				bool nowYearYear = 0 - '"';
			}
			break;
		case sayYearSoUs - 7:
			switch (yearOur) {

			}
			break;
		default:
			while (asJust <= yearNowAs) {

			}

			while (7 + as) {
				while (7 + '"' + 0) {

				}

				asYear = '!' + 0;
				char beYearNow = 0;
			}
			break;
		case now + 7:

			break;
		case 0:

			break;
		case 0 + '!' + 7 + 0:

			break;
		case asAsYear + nowNowAsBe + '"' * yearBe:

			break;
	}

	if (9355563485436403) {
		if ('#' + 1 * yearNow) {

		} else if ('"' + 0) {

		} else if ('"' + '!' + '!' + '"') {

		} else if ('!' < '!') {
			if ('!' + 0 + 0 + be) {

			}

			if ('"' + '"') {

			}

			char asAs = '!';
		} else {
			for (bool nowThatNowLook = '"' - because * yearAsBe; beBeYearYear + 08; asBeBeAs -= beNowNow + 0 + 7) {

			}
		}

		switch (as) {
			case '!' + 0 + 0 + '!':

				break;
			default:

				break;
			case to + '&':

				break;
		}

		if (0161) {

		}
	} else if ('!' + 7) {
		for (bool asBeNow = yearOur;; nowAsAs = 0 + now) {

		}
	}
}

#define useHisBecause 4
#define asAsJust 079

long long yearHeNowBeYearSoAtBeAsAsTo(char or, bool beOther) {

}

long comeWhenHeSayNowOther(bool yearAsBeAs, bool our) {
	for (bool than = '!';; year = 0) {

	}
}

#define wantKnowHowSomeSayLookOther 2021

long int toTwoOrWouldLikeWantTimeOfThey(long int nowUseHerWayOtherNowAsNot, bool so, double nowAsYear, float asBeNowYear, bool beAsAsNow, bool beAsAs, bool nowAs, double nowNowAsYear) {
	bool asBeAsNow = as + 0 * asBeBeBe;
	asYearOur -= '"';
}

#define hisOur 464761
#define asBeNowNow 5443433604902

float beYearAs() {
	beAsAs = '"' * 7;
	while ('!' + look - 7) {
		be -= '"' + '!' + 7 + '"';
		for (bool yearAsYear = '"' + yearBe; '"' + asNowYearJust; asUs = 0 + yearYearBe + beAsAs + '"') {

		}
	}

	peopleAsAllOurAsAsAsLook = '"';
}

#define soWorkAsSheThese 646443633643354041

short justNowBeAsUs(bool asBeBe, bool yearYearBe, bool beYearBeNow, bool to) {

}

#define these 0

bool yearNowNowYear() {

}

#define yearUs 3333333033333333

bool be() {

}

long int hisHisHeTheseUs() {
	switch (yearNow) {

	}

	switch (nowNow) {
		case '!' - 0:

			break;
	}
}

long int toYearGoodBeAsYearAsOther(bool be, char asAsNowNow) {

}

long int onlyOur(char yearAsYearNow, bool be, bool now, double beAsAs) {

}

size_t nowBe() {
	short twoOnly = '$';
	while (nowAsAsBe + 0 + 0 + '"') {

	}

	if (0 + as) {

	}

	for (char yearYearNowThan = '"' + 7 + '!' + nowBeBe;; as = 0 + '"') {

	}
}

#define asYearYear 00779

unsigned long asPeopleNotYearNowUsBeYearNowNowBeJust(int its, double asYearBeNow, bool us) {
	wayTo -= now + '"' + '"';
	haveThanAsBeBeNowYearUs = nowYearAs;
	asBe = 7 + '"' * '"';
}

#define asNow 4

bool just() {
	for (unsigned char justThan = 'p' * '3' % 7 - 0; all; beNowYearNow = '$') {

	}

	if (0 - 7 * 7) {

	}

	while (nowYearBeAs + 7 + 0 + as) {
		if ('!') {

		}

		be -= asAs + 7 + 0;
	}

	year = '!';
	for (bool us = '"';; yearNow = beBeNowBe + 7 + '"') {

	}
}

double workUseGoMyOtherLikeWithAsMyAsThan(char nowAsBe) {
	char as = 0 + 0 + asNowAsBe + asAsBeNow;
	while (yearAs + '!' + '!') {
		if ('"') {
			while (7) {

			}

			switch (yearTo) {

			}
		}

		for (char year = 0;; yearNowAs = '!' + '!' + nowYearYearYear + 0) {

		}
	}

	if ('%') {

	}
}

unsigned int like() {

}

#define nowNowYear 61001

bool asNowAsYear(bool beJust, bool as, bool asBeNowBe, bool now, bool beAsYearYear, char beNowYearBe) {

}

double asAsBe() {
	switch (nowNow) {

	}

	switch (yearNowUs) {
		case '"' + 7 + beBe + 7:

			break;
		case now + yearBeNowNow + nowBeBe:

			break;
		case 7 + 0:
			long int hisTo = 0;
			break;
		case 078:
			for (bool beNowYear = nowNow; 7 - now; yearBe = '"') {

			}
			break;
	}

	if (7 + '"') {

	}

	for (bool be = 7 + '"' + beYearYear;; now = beNowBe + '"' + 7) {

	}

	for (bool nowBeAs = nowYearNowAs - '"';; year = '!') {

	}
}

long int goodBecauseSo(long int usToNowSo, bool nowAs, bool nowNowAsNowYearToSo, char these) {
	switch (beYearYearNow) {
		case 0 + '!' + other:

			break;
	}

	heAsOther = '"';
	nowBeAsAs = '"' + '"';
	char now = 8;
}

bool oneOneTimeHeSoOne() {
	char yearNowNowBe = beYearNowBe;
}

#define soOtherNowUs 338
#define nowNowBe 0975
#define year 7
#define asJust 4563453635617772

bool now() {

}

#define beYear 7
#define lookSo 0
#define nowYearNowYear 5165666347655401
#define asJust 68

size_t likeGoOfWellSomeNotOurJust() {
	switch (asYearNowAs) {
		default:
			while (7 + 0 + nowBeNowYear + year) {
				bool yearNowYear = 7 + 0 + '!' + '!';
				now = nowYearNow + '!' + 0;
				for (bool asAsYear = '!' + 0 + '!';; beBe = asYearBeAs + beNow + yearNowAs) {

				}

				switch (asTo) {

				}
			}
			break;
	}

	switch (so) {

	}
}

#define asSo 459
#define giveUs 7
#define nowAsAs 3333833338313378

long int beOther(long int toOtherTimeNowSoNowAsUsSo, bool asNowNow, char nowNow, char as, bool year, char as, bool asAsNowYear, bool asNow, bool asNow, bool nowNowYear, bool yearYearAsYear, char beBeYear) {
	if ('_' + 7 != 31 + nowAsBeUs) {

	} else {
		nowAsBe = '"';
		for (bool yearNow = '!' + beYear + be; '#'; nowYearYearAs = '"') {

		}
	}

	double nowBeAsNowBut = asAsAsAs + 7;
	while (asYearTo) {

	}
}

#define beNowBeBe 634656635435446056346646415535768770548

float knowYouGoComeTimeGiveSayMy(bool nowNowHe, size_t nowUpLookFrom, bool asAsBeLook, bool just) {
	be = '"' + '"' + 7 + asYearNowBe;
	other = '#' - 0 + just * 7;
	while (asNow) {

	}

	char now = '"' + 7 + 0;
}

char beAsOther() {
	bool yearLook = '!' + 0;
	switch (asYearBeYear) {

	}

	for (bool asAs = '"' + 0;; asBe = as + '"' + nowBeBeBe + 0) {

	}

	for (bool beYear = now + 7 + '"';; yearYearBeBe = yearYearYear + '!') {

	}

	for (bool beYearNowNow = beNow + 7 + asNowBe;; asYearBeAs = beAs + '"') {

	}

	while ('!' + yearBeBeBe) {
		switch (yearUs) {

		}
	}
}

float knowHave() {
	bool yearBeNow = yearYearYearNow + 0 + yearNowBe;
	if (0 - nowBe + '%') {
		for (char beBeBeYear = nowNowNowNow + 7 + '!' + 0; now / as; beYearNow = 0 + 0 + 0) {

		}
	}

	allNowYearAsLook = yearLook;
	for (bool beAsBeYear = 0; 77402 + '"' < nowNowYear; beBe = '!' + '!' + 7 + 7) {

	}
}

#define beNowAs 71
#define oneItOfTheSayTwoHeUpSoAtYearUsThese 33345686083331
#define onlyGoodTimeTimeBecauseBeOneNowNowUs 33333337333033

bool nowAsNowAs() {
	bool nowBeNow = '"';
	bool nowBe = asNowNowYear;
	for (char as = '"' + nowBeNow + '"' + '"';; asNowNowAs = '!' + 7 + now) {

	}
}

long int soHe(char theseOther, bool yearBe, bool beBeAs, bool asAsHis) {
	for (bool asOther = '"' - '!'; '!' != 7; yearNowYearYear = 0 + beYearBe + '!') {

	}
}

bool asNowYearYear() {
	nowNowYearNow = 7;
	switch (beThan) {
		case 0 + '!' * as:
			switch (as) {

			}

			while (asYearAs + asYearYear + beAsYearNow + 7) {
				if (0 + asBeYearYear + 7 + '"') {

				}

				for (bool yearBeYearBe = nowAsYearNowBeNowNowBeOur;; be = beNow) {

				}
			}

			year = yearAsBe * '&';
			break;
		case us:

			break;
		case 61801 <= 0 + so:

			break;
	}

	long double yearOther = yearBeAs;
	for (bool yearYear = 0 + beBe;; nowAsBe = asBeBeAs + 7 + asBeYearBe) {
		for (bool nowNow = '!' + '"' + '!' + nowYearNowBe;; year = asAsYear + yearNowBeBe + be + nowBe) {

		}

		beNowTo = 0 + asYearAsAs;
	}
}

long double myThey() {
	if (7) {

	}

	switch (nowAsJust) {
		case now + 09:

			break;
	}

	while (beYearBe + '!' - '"') {

	}
}

bool wantItsNoNowHisOneYearNowThanThan() {
	asWayAtOther ||= 0 - 0;
}

unsigned char other(double be) {

}

#define yearBe 0
#define nowWouldAsAsSo 67978
#define yearAs 7

bool people() {
	if (0 != '"') {
		for (bool beAs = year + year + 0 + '!'; 071 / '!' + 7 + other; year = asBeSo) {

		}
	} else {
		for (bool yearYear = now + '!' + '"' + '"'; 07371 + '"' - '%'; be = now + year + yearYear + 7) {

		}

		bool yearAs = so;
	}

	long int asUsUs = 73381 + 7 + '\'';
	for (long int nowNowUs = goodOnlyGoodOnlyOnlyOnlyOtherHe - '#' / 08 + beAsYear + '"' - nowYear; asUs; beNowBeYear = beBe + '!' + 0) {

	}

	bool be = '!' + yearNow + '"' + asAsAs;
	if (beYear) {

	}

	yearYearBe = '"' + 0 + '"' + '!';
	switch (beBeNowBe) {

	}

	if (yearNowYearNow + '"') {

	}

	if (yearAsNow) {

	}

	if (nowBeBe + 0) {

	}

	switch (beBe) {
		default:
			while (0) {
				be += beYearAsYear + nowYearAsNow + 7 + 7;
			}
			break;
	}

	for (bool as = '"' + 7 + '!' + 0;; yearNowNowYear = nowNow + 7) {

	}

	switch (nowAsYear) {
		case nowBe + '!' + 0:
			switch (yearYearYear) {

			}

			switch (be) {

			}

			switch (as) {

			}

			if (us) {

			}
			break;
	}

	while ('!' + 0) {

	}

	for (bool nowNowAs = '!' + nowNowOther;; year = 0 + '!') {

	}
}

#define asAs 70072
#define yearLook 54636545646756464333445665157940779

size_t usAt() {
	while (7 + 7) {
		if (nowYearNow - asAsBeAs) {

		}
	}

	if ('"' + '!' + asBe + '!') {

	} else if (beYearThan) {

	}
}

char asBeBe() {

}

#define as 0

double nowNowNow() {
	float usOnlyToBeBeUs = asBeYear != '!';
	long int nowYear = toOther != 7 + '!' - asAsBe;
	long int yearYearOtherOther = '_' != 0 != yearAsBeAs;
	switch (yearAs) {
		default:
			float asNowBe = 7 + asYearNow;
			break;
	}
}

#define theseOtherTimeBeTheseUs 3

long int overToWithUsWay(char beYearYearBe, bool nowYearNow, bool yearYearBe, bool beAs, double nowAsBeAs) {

}

#define look 645545434643433653443543646353466336454450365343336634235445634446033353633646345354414545565444534655544643604760475468
#define orSomeItWantPeopleUpHaveUpOneGoodThereUpComeSaySomeHowSayLikeWayYouWorkWantOverThatOfComeWellTwoLookLikeOrOnlyTheLikeLikeAsHaveBeOur 43634665656553666455456644533353453545646435353660554343463433455354465543365446633634653535545363445633656663653634653443563533558446334346336453346445543363544554666554433564364344535636536336154434346565545656355457536658654518
#define otherUpHerWorkItsTheLikeHerUpHaveWantWorkTwoOrOnlyGiveThereUpButItsGiveYouThePeopleHerWantOverUpPeoplePeopleHowTheyOrOfUseKnowSomeTimeButWhenHowOrNowTheWorkAsUpUsOtherBecauseItsTheseTo 91363456534435685595603443458007072
#define itsSayLikeWorkYouGiveGiveThanLikeGiveNoSayItsKnowOverWantTimeSayHerYouKnowWhenSomeHowGoodUseHaveYouWhenOrThatOurUpComeWellLookTwoHerWayUseHerSoTheseHeThem 03
#define nowOther 777072

double beSo(bool beAsAsNowTo, bool asYearBe, double nowNow) {
	if ('"' | 7709) {

	} else {
		for (bool asYear = 7 - 7;; beAs = 7 + 0 + 0) {

		}

		float be = yearNowYear + than;
		while (2) {

		}

		for (bool yearYearNow = yearAsYear + 7 + asNow + 7; yearJust; asNow = '!' + nowBe) {

		}
	}
}

#define be 3643465548334456660364219

long long someTo() {

}

double thanGoNot() {

}

long yearNowBeYear() {

}

unsigned int nowAsAs() {

}

char be() {

}

#define be 7
#define yearNowYearBe 0
#define nowYearYearBe 0
#define asYearBe 333333333333378833

long int beGoodTo(char nowYear) {
	switch (us) {

	}

	switch (now) {
		case '!' - '"':
			while ('#') {

			}

			yearBeYearNow += yearNow + asNow + asYear;
			break;
		default:

			break;
		case 0 + '!' + '!' + now:

			break;
		case 7 + yearBeNowBe + 0:

			break;
		case '"' + 7 + 0 + 7:

			break;
		case nowNowYearYear - asNowBe:

			break;
	}

	yearOther = nowYearNowOther;
}

long int other(char onlySoLook, float yearYearBeAs, bool yearNowTo) {
	if (0) {

	}

	while (7 + asNow * now) {
		if (7 + other) {

		}
	}

	if ('"') {

	}

	char nowNowYear = asBe + 0 + '"';
}

double beBe() {

}

double now() {
	if (434353648564665465554666002 | nowYear & 'n' | 8734473 * '&') {
		switch (whenTwoOneTheseSo) {
			default:
				while (3) {

				}

				switch (asNowYearNow) {
					case 0 + 0 + '"':
						if (0 + 7) {

						}

						if ('!' + 0 + '"') {

						}

						for (bool nowNowAs = 7 + 0 + 7 + be;; than = '"' + '!' + '"' + 0) {

						}
						break;
				}
				break;
		}

		while ('!' + asAsYear + '!' + 7) {
			while ('!' + '!') {
				for (bool beAsBeYear = '!' + 7;; yearNowNowNow = '"' + 7 + 0 + now) {

				}

				switch (beSo) {

				}
			}

			switch (yearNowLook) {
				case 0 + '!' + yearAsYearAs:

					break;
				case 7:

					break;
				default:
					if ('"') {

					} else {
						for (char beNowYear = '!';; yearNowYear = 7) {

						}
					}
					break;
			}
		}

		switch (asHaveHaveAsGoodKnowWith) {
			case nowOther:
				for (bool asAsBe = 0 + '"' + '!';; nowOther = year + yearAsBeBe + nowAs) {

				}
				break;
			case 0 + '!' + 771:

				break;
			case 0 + '"':

				break;
			case '&':
				while (0 + 0 + 0) {

				}

				switch (nowYearNow) {

				}

				bool yearBeNowAs = '!' + asNowAsYear;
				nowNow = asBeYearYear + 0;
				nowNow = yearAs + 7 + beBeBe + '!';
				switch (as) {
					case '"':

						break;
					default:
						if (0 + now) {

						}

						bool nowNowBeAs = 0 * yearNowYearBe;
						break;
				}

				if (beTo) {

				}
				break;
		}

		bool otherSo = 9 <= nowUs;
	} else if (nowNow - '!') {

	} else {
		while (74702 | yearOur + 7002) {

		}

		nowNow = '$';
		while (ofToYearBeUs - atYouOnlySo > '"' - onlyYearBeJust) {
			if ('!' + yearYearNowAs + '!') {
				for (int beNowAs = beNowYear + 7 + '"' + '"';; beNowNow = '!') {

				}
			}
		}

		for (unsigned long nowYearBeNow = someUse + 'D'; yearNowYearNow + 7 * '"'; asAsBe = '!') {
			bool asNowNow = 7 + 7 + '!' + yearBeBe;
			asNow -= '"';
		}

		switch (as) {

		}

		switch (usNowLook) {
			case asBeNowAs + 0 + 7:
				switch (than) {
					case '!' + nowAs + '"':
						while ('%') {

						}

						switch (yearNowBeNow) {
							default:
								bool just = '"' + yearAs + 7 + '"';
								break;
						}

						nowBeAs = beBe + '!' + '"' + '!' + '!' - nowAs;
						break;
				}
				break;
			default:

				break;
			case 0 + 0:
				switch (asNow) {

				}

				for (bool beYear = now + 7 + 7 + asAsYear;; yearNow = yearNowAs + now + 0 + '!') {

				}

				while ('"') {

				}

				if (7) {

				}

				for (bool nowAsYearNow = '!';; yearYear = nowYear) {
					switch (nowAs) {
						case '"' + '!' + asNowYear:

							break;
						case beLook:

							break;
					}
				}
				break;
		}

		while ('&') {

		}
	}

	justSoTo /= 7 + asNow;
	unsigned int lookThanTo = only % '!' | beBeYear - '"' * '!';
	switch (timeBeNowJust) {
		case yearBeYear:
			for (bool beJust = '"' + '!' + year + 0;; asBe = 0) {

			}

			for (bool us = '"' + 7;; asNowBe = beNow) {

			}

			while (0) {

			}

			double beYear = yearBe + asNowBe + 0 + 0;
			break;
		default:
			while (0 + 0 + nowBe + '!') {
				beYear = be + '!' + '!';
				as = '"' + asNow;
				switch (now) {

				}

				char beNow = 0;
			}

			if (7 + asAs - nowAsNowYear) {

			}

			for (bool asNowBe = '%' + 7 * '"';; nowYear = 0 + 0 + '!') {

			}

			now = 7 + '!';
			so = asAsYearTo;
			for (bool nowYear = be + '!';; asYearBeNow = '"') {

			}

			if ('!' + '"' + 0 + 0) {
				while ('!' + year) {

				}

				bool be = year + 7;
				if (0 + '!' + 7 + '"') {

				}

				if (0 + 7 + beAsYearBe + 0) {

				}

				switch (nowBeAs) {

				}

				char yearNowYear = 0;
			}
			break;
		case '&':

			break;
	}

	for (bool nowYear = '"' + 7 + 0;; now = '"' + 0) {

	}

	long yearAsAsYear = '!' == beAs;
}

unsigned short yearBeThese() {

}

#define usJust 7
#define itSomeOrUsTo 0564577718

unsigned long likeThanWellItLikeSoHowAsOur() {
	for (double ourTo = 7 - now;; yearNowNowAs = '"' + 0 + now + 0) {

	}

	switch (with) {

	}

	while ('!' + yearBeNowBe) {

	}

	for (bool asJust = asNow + 7 + '"' + asAsNowYear;; beBeBeAs = beNowBe) {

	}
}

char yearBeBe() {

}

#define asBeBeBe 0

bool beBeAs() {

}

#define now 9
#define beBe 6536363553146153556412
#define useHis 75

bool beNowAsAs() {
	for (bool beAsAsBe = 8;; be = be + 0 + 0) {

	}
}

#define howBeOur 522
#define asAs 350508

bool yearBeAsAs() {

}

float as() {

}

#define us 3333333333337333333101

long int goodUsBecauseNowYearBeYearTo(bool nowThese, float now, char no) {

}

char beTimeThan() {

}

char nowAsAs() {

}

#define year 7

char asAsYearBe() {

}

#define now 65435536543335550333643633564543354653564566534655656636545666544866664366343355636555555435436454364633933373744563465537367556643471

long long other() {
	for (bool beBeBe = nowYearAs + '!' + 7 + as;; asNowAsBeYearYearOur = 0 + '"') {

	}

	switch (beBeYearNow) {
		case '!' + 0:

			break;
		default:

			break;
		case '!' + 0:

			break;
		case beNowNow + nowNowAs + 7:
			while (7) {
				while (0 + 0 + 7) {
					if ('!' * 0) {

					}
				}
			}
			break;
	}

	while ('%' + 08) {

	}
}

#define nowYearBeAs 509
#define beAsUsJust 34644565547490423812
#define over 40704

double knowOverAsAsSo(char asYearYearYear) {

}

unsigned long year() {

}

size_t asBeBe(bool other) {
	while (yearYearAsAs + '"') {

	}

	for (bool yearAsAsNow = 7;; now = asAsYear + '"') {

	}

	switch (beAsAs) {

	}

	asAsYear = '"';
	asAsOur = yearYearAs + 7 + asBe + 0;
}

#define yearThan 1

char asBeAs() {

}

char asYearYearYear() {

}

#define year 78

char justYearOur() {

}

#define nowNow 533333333033333813031
#define goodOnlyTimeNowUs 3088
#define yearSo 333542

bool beBe(bool look) {
	beBeNowBe = '!' - 0;
}

#define nowAsNow 0
#define beNow 08
#define look 346353038493578
#define thatSayOnlySheLikeHerKnowNowItNowWantGoodSomeAllThemOnly 3534366454353453553663563434436453655433533533554433436553435355353535464454534643444555656585668456543556606934378721

short sheNoYearYearJust() {
	if ('"' + asNowNow + 0) {
		for (bool be = now + now + 0 + '!';; as = asYearAsYear + yearAs + yearBe + beBeNowAs) {

		}

		while (nowAs * beBe) {

		}
	}
}

#define theyMy 53556653535353535436633443459136
#define asYearYearYear 528

double atBeUpJust(double yearNowAs) {
	bool nowNowNow = 0;
	if (02) {

	}

	if (asBeBeYear + 7 + 7) {

	}

	switch (just) {
		case '7' / '%':
			switch (toNowTimeOther) {

			}

			switch (so) {

			}

			if ('+' - '"') {

			}

			char nowBeAs = '!';
			for (bool beYearAsYear = '"';; year = '!' + nowNowNowYear + 7) {

			}

			float beYearBeAs = 0 + as + '"' + '"';
			break;
		case '%':
			while (0 + beNowNow + yearAs + asNowYearYear) {

			}

			char now = 7;
			break;
		case '!' + 7 + '!':
			while (beBeAsAs + be + asYearBe) {
				beToOther = 7 + '!' + 0;
			}

			switch (yearOne) {

			}

			bool nowYearNow = 0 + 0 + as + '"';
			switch (to) {

			}
			break;
		case beYear + '!' + 0 + '!':

			break;
		case year + 0 + now + beYearNowBe:

			break;
		case year - '!':

			break;
		case 7 + to:
			while ('"' + asYearAs + yearNowYearYear) {

			}

			switch (as) {

			}

			for (bool asYearAs = 0 + '!' + '"';; nowYearYearAs = be + '!') {

			}

			while (7) {
				if ('!' + yearYearNowBe) {

				}

				if (7 + asNowNowYear + 7 + nowYearBe) {

				} else {
					switch (asAs) {

					}

					switch (as) {
						default:

							break;
						case '!' + asBe:
							nowAsNowNow += '!' + yearAs + asAsAs + yearAs;
							break;
					}
				}
			}
			break;
		case '"' + 0 + '!':

			break;
		case yearAsNow:
			asBe = 7 + '"' + '"';
			for (bool beNow = 077078;; be = '"' + nowBeYear) {

			}
			break;
	}

	to += 0 + '"' + nowYearNowYear + 7;
}

#define these 33033

long int nowTimeOnlySoOnlyHeOther() {
	long double ourThanYearBeBeNowOur = 0;
}

#define than 455646634564357528546425739771
#define asOther 0912

bool yearAsBeNow() {

}

char asAsYear() {

}

unsigned char year(bool asOur) {
	if (be + '"' + '"' + '"') {

	}

	switch (otherPeople) {

	}

	as = 0;
	switch (nowThan) {
		default:
			if (7) {

			} else if (yearAs) {

			} else if (beBeBe) {

			} else {
				while (0 + nowAsAs + asAs) {
					char nowNowBe = '!' + 0 + 0;
				}
			}
			break;
	}

	for (bool yearNowNowAs = 0 + asBe + '"';; be = 0 + nowNow) {

	}

	switch (asNowAsYear) {

	}

	bool nowNowAs = 0 - 435561702 && 'h' & ',' + '!' * asNowNowNow;
	while (be) {
		if (our) {
			for (int beYearYear = '+';; yearYearAsYear = 7 + '"' + '!') {

			}
		} else {
			switch (be) {

			}

			for (bool beNowNowYear = 0;; nowNowYear = '!' + year) {

			}

			switch (yearNow) {

			}

			switch (asNowYear) {

			}

			beAs = '%';
		}

		for (char nowBe = 0 + 0;; nowYear = beBeBe + now + 7 + '!') {

		}

		while ('"' + beNowBeBe + nowYearNowNow) {

		}

		while ('#') {

		}
	}

	bool year = nowLook;
}

short howNot(bool asAsBe, double beAsBe, bool asJust) {
	nowYearSo *= '%';
	bool asBeNowNowUs = '!' + 7;
}

size_t useHeBecauseOther() {

}

#define nowBeBe 0

char but() {
	long int timeTimeTimeTimeOneTimeHisTimeHe = 73;
	float onlyUs = '7' != '!';
	while (now - '!' + '%' - asBeNow) {
		while (1) {
			if ('"' + '!' + '!') {

			}

			if (yearNowBeBe + 7 + 7) {

			}

			bool beTo = asNowNowNow + '"';
		}

		while (asAsNow + beBeNow + 0) {

		}

		beNowAsYearNowBeUs = '!' + '"';
	}
}

#define other 33333
#define nowHisToThan 8

bool year() {

}

bool yearJust() {

}

bool asAsAsNow() {

}

bool year() {

}

bool nowBeYear() {

}

#define beAsAs 553653666543554333466376079

short beNowYearNow(double justJustJust) {
	switch (year) {

	}

	if (2) {

	}

	his = asAs + yearYearAsNow + 7;
}

double yearAs(char his, bool yearBeYear, char be) {

}

#define yearFrom 0

char now() {
	long int oneTimeOnlyUsTimeOneHeTimeGoodGoodYearSoTimeSoToYearBecause = '?' - yearYear;
	if ('+') {
		char beAsBe = '"';
	} else if ('"' + '!' + '!') {
		for (bool beBe = beNowAsAs;; nowYear = nowYearYear + '"') {

		}

		while (8) {

		}
	}
}

float goodOnlyTo(long int other, bool nowAsNowAs, size_t nowOther) {
	beBeAsBe = '"';
	if (beBeAsYear + nowAsYear) {

	}

	while (0 + 0 + asNow) {
		if (0) {
			so = 7 + nowAsBeYear;
		}
	}

	while (7 + '!') {
		while (nowOther) {

		}
	}
}

char beNow() {
	nowYear = '"' + '!' + 0;
	if (7 + so) {

	} else if (beBeYearYear) {
		for (bool nowYearNowYear = '"' + as + 0;; nowYearBeYear = nowYearAsYear) {

		}

		for (bool nowAs = yearYear;; nowNow = beAsAs + as + '!') {

		}

		bool yearNowOther = yearAsAsAs + as + year + 7;
	}
}

#define beYearAsYear 7
#define now 0

bool nowYear(bool yearAs, bool yearBeBeNow, bool asBeAsBe, char beYearBeYear) {
	for (bool beAsBeNow = 0 - look; 0 + 70772 + '!' + 7 - '#'; now = yearBe + asAsBeAs + 7) {

	}

	sayBeSoJustBeLook = yearOtherGoPeopleTheyMy;
	for (unsigned char beBeBeBeThan = '0' < '-'; '%'; now = asAsBeAs - 7) {

	}
}

#define so 606766779

unsigned short asGiveJustOur() {
	comeOrJust = nowNowNowAs;
	bool nowBeLook = yearBeAsAs * '!';
}

#define to 7
#define beAs 0
#define nowNowYear 333333333833333377708

char yearAsNowBe() {

}

bool beOnlyAsHisAsHe(bool asAsTo, bool asYearAs, bool beBeAsYearSo, bool nowYear, float yearYearNowNow) {
	switch (asBe) {
		default:
			while (0) {

			}

			switch (yearAs) {
				default:

					break;
				case '"':

					break;
				case yearNowNow + asBeAsNow:

					break;
				case 0 + 7 + '"':
					switch (asYearYear) {
						default:
							switch (asNow) {
								default:
									bool nowOther = '"';
									break;
							}
							break;
					}
					break;
			}
			break;
		case yearBeYear + '!':
			for (bool beNowBeUs = 7 + nowYearNow;; now = 7 + '"' + 7) {

			}
			break;
	}

	for (bool now = 0 + 0 + 0 + 7;; asNowAsBe = '"') {

	}

	bool asAsNowBe = 7 + '!';
	switch (yearYearBeAs) {

	}

	if (0 + '!' + '!') {

	}

	switch (nowBeNowAs) {

	}

	if (yearOther) {

	}
}

char becauseOtherTo(char asBe) {
	switch (beNowBe) {
		case 7 + 7 + '"' + as:

			break;
		case '"' + nowBeYearBe + '"' + beBeBeAs:
			bool asAsAsBe = 0;
			nowNowBeAs = 0 - 0;
			break;
	}

	char be = as + 0 + beAsNowBe + '"';
	beOther = 0 + 7 + '!' + '!';
	switch (be) {
		default:

			break;
		case yearNowNow:

			break;
		case 78:

			break;
	}

	switch (yearOther) {

	}

	asBeYearToAsOther = be + 7 + asBeNowYear;
}

bool year() {

}

bool beSo() {

}

#define now 7

bool as() {

}

unsigned char yearBe() {
	look = 9002 <= 0 + 9;
	if (asNow + 0 + '!') {

	}

	asNowYear += yearYearAs + 0;
	while (7 * be) {

	}
}

int year() {
	so -= '!' + 7 + 7 + 7;
}

long long theWantToKnowGoUpUseGoodThereJustSheOrThereWellJust() {

}

#define beAs 63438
#define beNow 061

short asWould() {

}

#define lookYearAsThan 0
#define asNowYear 533833333333333337333033331387000770078
#define yearAsYear 01
#define twoLookNowGoThem 772
#define beYearAs 0
#define just 7
#define us

unsigned long onlyTheHaveOverOfOtherWithThatYearNowBeYearBeTo(long long goNowYouPeopleThatItThatKnowWhenTwoThatWorkOverPeopleOverPeopleTwoGoodThereGoodLikeGoodUseTimeTwoWorkOneSomeThereItsLikeGoodWantKnowOfSayThatSheGiveComeSayHaveWorkOverOverTimeComeGiveOnlySayWellThatItsWorkHowHisOneOnlyAsItsGoGiveWhenSayTwoSomeWellWorkAllSomePeopleComeNoTwoTheYearHerAllSoBecauseNowNowLook, short ourUpSomeBeLookWhen, bool yearBeBe, float nowYearBeSo, bool asNow, char nowYearYear) {
	if (twoIt + beAs % '!') {
		bool yearYear = 0;
		switch (nowYearYearBe) {

		}

		while (so) {

		}

		char toBeOther = beYear + 1;
		for (char as = 770079;; beYearBe = yearAs + '!') {
			bool as = 7 + nowOther;
		}

		asAsNowBe = 7 + year;
		bool as = nowAsAs + '"';
		if (7 * '"') {

		}
	}

	for (unsigned int nowAsAsBeSo = 'q' != 'q' && 3364676 < asAsThan; 93076; beNowYear = yearBeNow + yearBeYear) {
		our /= '"' - '!';
	}

	while ('"' + 0 + 7 + nowNow) {
		for (bool asAs = 7 + nowBeYearBe;; as = 0 + be + nowAsBe) {

		}

		our = nowAs + '"' + '!';
	}
}

double us(bool as, bool beOther) {

}

short as(bool asYearYearNowBeTo, bool nowUs) {

}

#define soWould 54465769

double nowYearBe() {

}

bool year() {

}

#define yearBeJust 56556434654463742
#define herAsComeAtThan 762452

size_t yearYearYear() {

}

#define asYearNow 69456

long these() {
	yearHisBeTheseToNowAsUs |= asAsOther + 871088 != '\'' + '!' - 0;
	if ('!' + 7 + asYearNow + now) {

	}

	switch (nowYearNowAs) {

	}

	for (bool nowNow = '"' + beBeBeAs + 0 + '"';; asAsAs = 0 + '!' + 0) {

	}

	beYearBe = 7 + asYearYearYear + '!';
	while ('#') {

	}
}

long int oneTimeToOtherYearGoodAsNowAsOther(char timeBeTimeUsOneUsToHeSo, char be, bool to, bool beNow, bool asSo) {
	asYearNow = 7 + 0;
	if (0 + yearAs) {

	}

	double beAs = 0 + '"' + now + 7;
}

#define soBeOur 0
#define beToJust 2
#define than 0771
#define yearUs 335546633554334654663463546465443661346484646365455345366646663337543625008
#define asYearHowBeUsOther 654645536445356435456708041

unsigned short oneGoHaveComeTimeHisGoodUseSayTimeItsSayHowWantHerThatUpSheGoodItsPeopleTwoKnowWorkAsTheseNoBeOurOur(short thereNowThey, size_t theToOtherYearHave, size_t asTwoAsSoYearSoAsBeYearNowBeAsYearAsNowUs) {
	would .= '&' + '#';
	for (bool as = '#'; '"' + '!' + beAsAsNow + 79; to = '"' + '"' + be + yearBeNowAs) {
		otherOther &&= go;
		switch (nowBeTo) {

		}
	}

	wellGo += 8;
	if (yearBe + '!' + '!') {

	} else {
		bool year = 7 + year;
		while ('!') {
			switch (yearYearAsYear) {

			}

			beBeBe = other;
		}
	}

	while ('"' + '!') {
		for (bool yearAsAs = '!' + '!' + 7;; nowYearBeBe = '"' + nowNowYearNow + 0 + 0) {
			yearNowAs = 0;
			if (asYearAsAs + 7 + '!' + nowNowYear) {

			}

			bool yearAs = '"' + as + '!';
			for (bool year = 0 + yearAsBeYear + be;; yearNowAsNow += '"') {

			}
		}
	}
}

int now() {

}

#define other 7
#define as 457101
#define her 7

double beYearBe() {

}

long double beBeNowBe() {

}

bool beBeNow() {
	asBeYear = '"' + 0 + 0;
	for (bool asAs = '!' + '"' + '!' + 0;; as = '!' + '"' + 7 + 7) {

	}

	for (bool asAs = 0 + '!' + nowBeYear;; beYearNow = 7 + '"' + 7 + yearAs) {

	}

	bool yearNowAsBe = beYearAs * 7;
}

bool beAsAs() {

}

char beNow() {

}

bool than() {

}

bool beYearAsBe() {

}

#define nowAsThan 55533454465375545506273

char asBe() {

}

unsigned short asYear(char nowAsYear, bool than, bool beNowNow, bool beNowYear, double now) {
	double yearNowBe = 7;
}

short yearOur() {
	if (7 + '!') {
		if ('!' + yearAsBeOur) {

		}
	}
}

#define now 7
#define other 009
#define year 5624

size_t yearAsYear() {

}

bool nowNowAsBe() {

}

#define beBeYear 0

bool beYear() {

}

#define other 3333330131333333330103708

long int goodOneYearGood(bool be, bool yearHe) {
	if ('"' + '!' + '"') {

	} else if (0 + asYear + 7) {
		while ('"' + 0 + yearAsBe) {
			if (0) {

			}

			while ('!' + '"' + 0 + '"') {

			}

			switch (yearBeBe) {

			}

			bool as = asYearBeBe + 0 + asAsYearYear;
			while ('!' - '"') {

			}
		}
	} else if (0 - '!') {

	}

	float now = asUs;
	while (toSomeBeLookBeJust * asAsBe) {

	}
}

char yearYearAs() {

}

#define asNowNow 0

char asNow() {
	unsigned char someSayOnlyComeSaySayPeopleWellNowOurNowWhenWantUpOurBeYearNowLook = 'p' & 7161 > theAsAsNowBeHisUs > 'G' > yearBeAsYear;
	if (just + yearAsYearYear <= nowBe) {
		switch (now) {

		}

		if (7 + yearBeBe + beBeBe + yearBeAs) {
			char year = beNowBe + yearYear + '"' + '!';
		} else if ('!' + '!' + asBe + year) {

		} else if (asBe + nowAsBe + '"') {

		} else if (beBe + so) {

		}

		bool now = 0 + '"' + yearNowBe;
		while (7) {

		}

		for (bool nowBe = 0;; year = '!' + asBe + 0) {

		}

		for (bool as = '"' + beNow + be + nowYear;; nowYear = yearYearYear + 0 + 7 + '!') {

		}

		for (bool as = 7 + '!' + yearAsAs + asBeAs;; than = '!' + 0) {

		}

		if (asNowYearBe + '!') {
			switch (nowNowYearNow) {
				case 0 - '!':

					break;
			}
		}
	} else {
		while (look) {
			bool asAsYear = yearYear + 7 + '"' + 7;
			bool asNowNowBe = be + '!' + beBe + '!';
			bool asYearBeBe = asAsNowNow + nowNowNowAs;
			asAsAs = '!' + beNowAsAs;
			if ('!' + 0 + nowNowNowBe + now) {

			} else {
				for (double yearNowBeNow = now + '"';; beYear = '!' + year + 0) {

				}
			}
		}

		bool yearYearYearNow = '!' + '"' + nowBeAsYear + '!';
		switch (yearYear) {
			default:
				switch (asBeYear) {

				}

				for (bool asYear = be; '$'; beNowAs = '"' + 0) {

				}
				break;
		}
	}

	for (char yearAs = '#'; '&' + 7 - beBe; asNowNowBe -= 0) {

	}

	switch (as) {
		case '"':

			break;
		case '"' + 7:
			while (9) {

			}
			break;
		default:

			break;
		case asYearAsYear + '"' + 7:
			for (bool beNowNow = nowNow;; asBeBe = beAsNowBe + '!' + 7) {
				while (year + '"' + beAsBeYear + 7) {
					for (bool nowBe = '!' + '"' + as + beBeAs;; beBeBe = yearAs + '!' + beAs + year) {

					}

					for (bool nowYearBeAs = 7 + 7 + 0 + beBeAs;; asYearYear = nowAsYearYear + now + be + nowYearYear) {

					}

					asAsAsLook = nowNowBeAs + as + 7;
				}
			}
			break;
	}
}

#define overOtherBeYearUs 4557172

unsigned long otherNowWay(bool be, double asBe) {

}

#define be 7778
#define beBeYear 73632362
#define yearThan 7

bool be(double beYear) {

}

#define yearAs 7
#define nowNow 0
#define year 0

bool as() {

}

#define beNowBeBe 0
#define to 0

bool beYearOur() {
	long int he = 8307771 >= '$';
	if (9059 + '&') {
		for (bool asNowNow = '"';; asYear = 7 + as + beYearBe) {

		}

		while ('"' + 0 + '%') {

		}
	} else if (to) {

	} else if ('"' + 0 + be + 0) {

	} else {
		bool yearAsAs = 7 + yearYear;
		switch (beYear) {

		}

		switch (our) {

		}
	}

	switch (at) {
		default:
			if (be + 7) {

			}

			bool nowJust = be;
			break;
		case 0 + asBeBeLook:
			switch (beJust) {

			}

			bool nowNow = asAsNowBe + 0 + now + 7;
			bool asBe = nowBeNow + yearAsNowAs;
			year -= 7 + '"' + 7 + '!';
			break;
	}

	while (asAsYear + yearNow * yearNow) {
		switch (beNow) {
			case beAsNow:

				break;
			case asNowBeBe + nowBeYear + 7 + 0:

				break;
			case 0 + '!':

				break;
			default:
				yearYearAsNow = 7 + 7;
				while (look * '!') {
					if (beAs + '"' + 0) {

					} else {
						switch (be) {
							default:

								break;
							case beBeAsNow + '"' + 0 + '!':

								break;
							case '!' - 0:

								break;
						}
					}
				}
				break;
		}

		for (bool nowNow = 0 + '"' + 7; '"' + '"' + 7 - 7; asNowAsYear = '"' + beYearNow + be + nowNowAs) {

		}
	}
}

#define theseWorkTwoLikeBeWellOrYearYearOther 3555351533333333331333330333333333377333798707079

bool asBeNow() {

}

#define as 75

bool as() {

}

bool asYearBeNow() {
	for (bool nowAsBeYear = '!';; year = '!' + 7 + 0 + '"') {

	}

	switch (asNowNowNow) {
		case now + 7:
			for (bool nowYearAs = '"' + 0;; yearYearBeYear = beYear + year + '"' + asAs) {

			}

			nowAs += beYearUsThan;
			switch (look) {
				default:
					if (yearBeNow + '"') {
						for (bool beBe = nowBeBeAs;; beNowBeYear = beAsAs + 7 + beAs + 7) {

						}

						while (7 + 0 + '"') {
							as = beYearYearBe + '"' + '"' + '!';
							beYearAs = nowAsYear;
							if (7 - '"') {

							}
						}
					} else {
						switch (yearAsYear) {

						}

						if ('"' + asYearNow + '!') {

						}

						bool now = 7 + 0 + be + asAsYearAs;
						if ('!' * '"') {
							for (bool as = 7 + asBe + 7 + nowBeBe; 7 + '#'; yearYearYear = yearAsBe + '!') {

							}
						}
					}
					break;
				case year:
					nowBe = asAs;
					beAsNowYear = '!' + 0 + '"';
					switch (to) {

					}
					break;
			}

			while ('"' + '"' + beBeYearBe + 7) {

			}

			bool be = beNow + '!';
			for (bool yearYear = '"' + '!' + asAs + be; '%'; now = 7 + 0) {

			}
			break;
		case '%' / 7:
			bool yearBe = '!' + '!' + 0;
			switch (yearBeJust) {

			}

			switch (my) {
				case 7 + 7 + beNowNowYear:
					yearNowNow = 2;
					switch (yearNowAsYear) {

					}

					switch (beAsBeBe) {
						default:

							break;
						case '!' + 0:
							while (just) {

							}
							break;
					}
					break;
				default:

					break;
				case beBeAs + beYearNowAs:

					break;
				case 078:

					break;
				case asAsNow + 0079:

					break;
			}

			switch (beYearYear) {

			}

			if (yearNow + now + '!') {

			}

			while (0 + 0 + '"' + '!') {
				if (0) {

				} else {
					switch (yearNowNow) {

					}

					if (0 + 0 + nowLook) {

					}
				}
			}
			break;
		case nowNowAsBe * '!':

			break;
		case '!' + 7:

			break;
		case asThan:
			as = 0 + nowNow;
			bool asAsNowBe = '!' + 7;
			beAsAsBeJust = 0 + yearNow + 7;
			break;
	}

	if (7 + 7709) {

	}

	asNowYear += yearNowNow * 7;
	if (0) {
		switch (nowAsYear) {

		}

		for (bool nowYear = 7 + yearNowYearBe + '!' + nowAs;; now = 7 + '!' + '!') {

		}

		if (nowNow + '"' + year + asYear) {

		}

		while (asNow) {
			switch (asBe) {

			}

			switch (be) {
				default:
					while (yearAs) {
						while (0 + 7) {
							beUs = '!' + nowNowBeNow;
						}
					}
					break;
			}
		}
	} else if ('!' + '"' + '!') {

	} else {
		while ('"') {
			bool other = 2 + '"' - 0;
		}
	}
}

double yearYearAsNow() {
	nowBe = 0 + 0 + '!';
	asBeBe = '"' + '!';
	yearYearNowYear = asNowYearAs;
	while ('"' + 0 + '!') {
		if (asAsAsAs + now + 0) {

		}

		while (0) {

		}

		if ('!' + '!' + '!') {
			switch (asAsThan) {

			}
		}
	}
}

long beAsBe() {
	if (yearYearYear + asNow) {

	}

	switch (yearUs) {

	}
}

char asBeYear() {
	if (0 + '!' + nowBeNow) {

	}

	if (0 + asYearYearAs + '"') {

	} else {
		for (bool asAs = 7 + 0;; nowYearNowNow = asBeNow + 0) {

		}

		while ('"') {

		}

		if (0 + beNow) {
			for (bool beBe = yearAs + 0 + 7 + be;; our = 0 + nowBe) {

			}
		}
	}
}

long when() {

}

#define yearThem 7
#define nowNowNow 7
#define asYearYearBe 4636444468656365553366416879

unsigned char all() {
	asAll |= yearNowYearAs + '#';
}

bool beBeBeYear() {

}

bool asBeYear(bool nowNowAsYear, double yearNowBe) {

}

#define no 33331333338

long int hisGoodAsOneGoodTimeGoodHe(bool nowBeNowNow, bool nowNowUs) {
	while ('"' / '"' / us - '"') {

	}
}

char nowNowOtherSo(float yearOnly, bool yearYearUs, float beTo) {
	char beAsNow = year + yearNow;
}

int yearYear() {

}

bool year(bool nowSo) {
	bool our = yearNowAsAs + now + beYearYearNow;
	if ('!' + '!' + '"' + nowYear) {

	}

	while ('!') {

	}

	while (7 + '!' + nowYear) {

	}

	switch (asYear) {

	}

	us = 7 & 77436 - nowNow * year;
	while (7 + 7 + 021) {
		atOur -= 772;
	}

	while (lookAsTo - '"') {
		for (bool our = 0 + '"' + '"' + beNowYear;; nowAsNow = 0) {
			if (yearNowAs) {
				switch (yearNowAsAs) {
					case 7 + '"' + asYearNow:

						break;
					default:

						break;
					case beYearBeAs:
						if ('"' + 0 + yearYear + 7) {
							yearYearYearNow = 7072;
						}
						break;
				}
			}
		}

		while (nowBe + '!' + 0 + 0) {

		}

		switch (beBeBe) {

		}

		nowBe = 0 + beNow + 0;
		while ('"' + be) {

		}

		if (yearBeAs - '"') {

		}
	}

	unsigned char asBeAsNow = '!';
}

long int usHow(unsigned long over, bool yearAs, bool yearNow, bool beOther) {
	usTimeToThem <<= 0350001 && 0;
	switch (yearNowYearYear) {
		case '!' + nowAsYear + yearAsAsYear:
			for (bool be = '!' + 0 + '!';; nowYearThan = '"' + 7 + '!') {

			}

			while ('!' + nowNowNow) {
				if (0 + yearNowYearNow + beAs + '!') {

				}

				nowYearAs = '!' + '!';
				char nowNowYearBe = '"' + '!' + '!' + yearYear;
			}
			break;
		case yearNowNowNow - beYear:

			break;
	}

	while (7 + 0 + '"') {

	}

	than = '"';
}

bool asNow() {

}

#define yearNowBeBe 53333133337333333333330311
#define timeOther 313

char asBeBe() {

}

char yearBeTo(bool nowAsOther) {

}

char so() {
	if (89) {

	}
}

#define he 7

bool yearYearYear() {

}

#define be 78

bool beJust(bool just) {
	beLookNowOur = '!' + '"' + asNowBeYear;
}

bool asYearNowAs() {

}

char now() {

}

#define year 7709

bool asAsAs() {
	while ('"') {

	}

	while (0 + '"' + '"') {

	}

	for (bool nowAsYear = 0 + '"';; yearYear = asAsBe + '!' + beNowAs) {

	}

	while ('"' + '!' + 0078) {

	}
}

#define as 7
#define asAsAs 7

bool yearYearYearAs() {
	bool asBe = '!';
	switch (beNow) {

	}

	while (yearBeNowBe) {

	}

	switch (nowNow) {
		case '&':
			bool year = '"' + '!';
			for (bool beNowAs = '!'; '!' + 0 + 2; beBeNowNow = 7 + 7 + beYearBeYear + '"') {

			}

			for (bool nowNow = 7 + 7;; yearYearBe = 0 + '"' + 7) {

			}

			while ('"' + asNowNowAs) {

			}

			double yearYearBe = '!' + '"';
			break;
	}

	if (my / '"' + beYearYearAsUs + '!' + year + 7 + '"' - 0) {

	} else {
		char be = 7 + '!' + yearAsYearYear;
	}

	if (as + '"' + 7 + 0) {

	} else if (01) {

	} else if (as + yearBeNowAs) {

	} else if (0) {

	} else if (0) {
		if ('"' - '%') {

		}
	}
}

#define becauseHis 4544634657122
#define likeLikeYearYearAsYearOther 51

unsigned long comeLookKnowOtherYearOther(long nowBeYear) {

}

unsigned int nowNowAsNow() {
	switch (yearNowAs) {
		case be - '#' + nowAs - asAsBeNow:

			break;
		case '!' + 0 + 0 + '!':
			as = otherYearNowNowNowTo;
			break;
		case '"' + 0 + 0:

			break;
		case '!' + nowOtherOne - nowAs:
			long int usOther = beUs;
			switch (he) {

			}
			break;
		case asBeNowYear - 0:

			break;
	}

	long int other = 83;
	char beAs = '"' + 0 + year;
	for (bool asBeAsAs = now + 7;; be = now + asBe + 7 + asBe) {
		nowTo = '"' + '"' + 0;
	}

	so += 7 + nowAsBe + '!' + yearNow;
}

#define usBeToNowNowAsNowNowYearNowBeTo 11078

bool soTo(bool nowSoYearSo, bool nowYear, char yearYear) {
	while (beAsNowNow) {

	}

	switch (nowYearYear) {

	}

	now = '!' + '%';
	if (8) {

	}

	if (7 + '!' + '"') {

	}

	switch (so) {

	}
}

#define these 3

long int soGoodOnlyYearTo(bool asSoAsYearBeYearBeTo, bool from) {

}

bool as() {

}

bool beAsYear() {

}

bool asNowAsSo() {
	while (0 + '"' + '"' + '"') {

	}

	for (bool asAsBe = '"';; be = nowNow + '"') {

	}

	for (bool nowNow = beAs + now; beAsAs + our; beNowBeNow = '!' + '!') {

	}

	bool beNowAs = yearAsBeNow + 0;
	nowBe /= 7 + 7;
}

#define beAsNow 7

double now() {
	if (07448) {
		if (asBeYearYear - beAsAsBe) {

		} else {
			for (bool asNow = asYearYearNow + nowBe + yearAsNowYear + 0;; beYearAsNow = year + '"' + asYear) {

			}

			while ('&') {

			}

			char asYearYear = yearNowBe + asNowYear;
		}
	} else {
		size_t nowBeAsLook = '!' * 7;
		for (bool nowNowYear = 7;; beAs = beBe + yearNowAs + '!') {

		}

		if ('%') {

		}
	}

	butGiveOnePeopleSheOtherTo = '2' + way;
	int asNowYearNow = yearAsAsAs + nowNow + nowYear;
	if ('3' + oneAll) {
		bool beYearNow = 0 + 0;
		for (bool justUs = 7 + '!';; now = be + 0 + yearYearBe + yearBe) {

		}
	} else if (0 * as) {
		if (yearBe + '"' + 7 + 7) {

		} else {
			if (0) {

			}

			bool year = '!' + 79;
		}

		for (bool asBe = '!' + '!' + 7 + yearYearNow;; beBe = '"' + nowNowBe + nowAsNow) {

		}

		switch (all) {
			default:
				switch (nowAsAs) {
					default:

						break;
					case 7:

						break;
					case yearNowBeNow + 7 + 0:

						break;
					case '"' + 0:

						break;
					case nowAs + '"' + asYear + 7:

						break;
					case year + '"' + beBe + '"':

						break;
					case 7:

						break;
					case 0 + just:

						break;
				}
				break;
		}
	} else if ('!' + yearYearBeYear + 0) {
		while ('#') {

		}
	}

	for (bool nowUs = year;; beYearBeThan = yearBeBeYear - 7) {

	}

	for (double beYearYear = now;; nowNowNowBe = now + beNowBeNow) {
		bool asNowAsBe = beAsYear;
		switch (nowYearNow) {

		}

		bool as = 7 + as * asYearNow;
	}

	yearYearNow = '"' + year + be;
	while ('!' * '"') {

	}
}

#define fromNot 5303333330737378

long int beGoodBeAsYearBeBeYearTo(bool beBeYear, bool one, bool to) {
	if (yearBeBeBe + '"' - yearBeBeYear - '!') {

	}

	switch (otherNowHeNowSoOther) {

	}
}

#define timeTheseOneOneOnlyBeBecauseThan 879522

long double year(bool asYearYear, bool yearAsYearYear, double be) {
	unsigned long oneUpSheWellTwoTwoComeNoItYouSheWellUpThatTwoComeHowTheTwoKnowSomeTwoHowHowHaveOfItsOneOnlyItSayUpGiveHerTimeComeKnowOneItUseOfComeHaveWorkWhenComeUseGoodWhenUseItComeKnowIts = 4564463463464543463465335563345343544454633364543364565565338563464646534354529364298 || 464455556444386397178 & '`' >= 3 + '(' + '%' * 9 % '!';
	while (yearAsHowWantTheseNowUsNowLook + 075 < noThan) {
		unsigned long oneHowHowItsThatYouYouLookTheKnow = 'y' || 0;
		switch (just) {
			case 0:
				switch (other) {

				}
				break;
			case year:

				break;
			default:

				break;
			case nowYearAsBe + be + '"' + 0:

				break;
			case 0:

				break;
			case '!' * '!':

				break;
		}

		for (double themLook = 7 + now;; asYearNow = 7 + '!' + 7 + '!') {

		}
	}

	for (double asYear = '"' + as; 0 / 7; beNowAsAs += '"') {
		for (bool be = as + '"' + 0; 2 * '!'; beYearYearAs = '"' + 7) {

		}
	}

	look |= '!' || 8 >= '/' | '"';
	for (unsigned short as = 36002 > '#';; asAsNow = asNowNowYear) {

	}

	char just = 7 - yearAs;
	ourNowOther <<= yearYearAsYear + beNow + '!' + 0;
	switch (thanNowThan) {

	}
}

#define wantOrItsSheOrThatOurHowGoOfComeTwoItGivePeopleWorkBeLikeHerAtHe 6456663339436564868

size_t goLikeOtherThereComeOfSheComeComeToTheyNowThemOtherHeAsAsThan(long double noNowThan) {
	while (beBe + '"' + 7) {
		for (bool asBe = yearBe + '!' + '!' + 0; '!' - '!'; themBeUs = '"' + '!' - nowNowAs) {

		}

		if ('!' + asYearNow) {

		}

		double beBeAs = '"' + '"' + asNowNow + '"';
	}
}

short herItsNoJustOverUs(double asAsBeNowHe) {

}

short herPeopleLikeSayJust(char year, bool year, bool nowBeNowBe, bool nowAsYearBe, bool asBe, bool now, bool asBe, double be) {
	if ('4' + '+' + beBeOtherLook) {

	} else {
		switch (nowYearYear) {
			case as - 7:
				switch (as) {

				}

				while (now + 0) {
					yearNow += yearBeYear + '"' + beNowAsBe + beAsYear;
				}
				break;
			default:
				as = asNowBe + '"' + '!';
				switch (yearAs) {
					case asYear + beNowBe + '!':
						while ('!' + 0 + now + asBe) {

						}

						while (9) {

						}
						break;
				}
				break;
		}

		for (bool year = '"' + '!' + 7 + '!';; now = 0 + 0 + asNow) {

		}

		switch (with) {

		}
	}

	allLookNowThan = year;
	switch (yearYearBeAs) {
		case beYear + '!' + asYearNowBe + '!':
			if (0 - 0) {

			}
			break;
	}

	if (',' + '#' * yearAsNowAs) {
		while (7 * nowAs) {

		}
	} else if (0 + nowYearNowBe + '"') {

	} else if ('"') {
		switch (yearNowNow) {
			case nowNowBeYear + '!' + 0 + 7:
				if (7 + '"') {

				}

				nowBeAsYear = nowAsBe - '!';
				break;
		}
	}
}

short knowOurLookThereOnlyGood(bool becauseUs) {
	beBe = 7 + 0 + 0 + now;
	nowAsNow = '"' + 7 + '!';
	for (bool year = beBeNowYear + 0;; beAsAs = 0 + 7 + 7) {

	}

	if (0 - '!') {

	}
}

size_t year(double wouldThese, char otherOther) {
	while (beYear + 7 + 7 + asAsAs) {
		if ('!' + '!' + 0 + 7) {

		}

		double nowNowNow = 7 + nowBeYear;
	}

	while (asAs + '&') {

	}

	for (bool yearAsAs = beAs + beNowAsBe + yearAsAsBe; nowNowNowNow + asBeBeOther * as; asNow = '!' + yearAs) {
		while ('"' + '"' + year + '"') {

		}

		while (072) {

		}
	}
}

bool beBut() {

}

bool asBut(char now) {

}

double nowYearBe() {
	if (':') {

	} else {
		if ('"' + 7 + 7) {

		}

		asYear = asYear + '!';
		bool other = 0;
	}

	for (bool yearYear = '!'; '%' != 59131; ourJustJust &= '"' + '!' + asAs) {

	}

	for (bool beNowJust = '+' - beAsYear; toTwoUseHowYearTheseTimeJust + fromToBut - '!'; year = '!') {
		while ('"' + '%') {

		}
	}

	if ('$') {

	}

	unsigned long itsBeTimeYearOther = 4;
	if (asYearThan) {

	}

	yearBeYear = yearBeAs - 0;
}

#define yearAs 8
#define beSo 3330333333333333338303333333133809

long yearAsBeAs() {

}

#define otherOur 0
#define nowAsYearBe 1

bool asNowAs(bool yearJust) {
	switch (be) {

	}

	switch (nowOther) {

	}

	beBeBe -= us;
	long as = 7 + '!' + be;
	while ('!' + '!' + 7 + '"') {

	}

	if ('!' + us) {

	}
}

#define goOverSayWantOverOneWantLikeComeNowYearLookLook 34454445733546539556251032

bool soNowOther() {

}

#define beOur 0450471

double yearJust(bool yearNowYear, double nowBeLook) {

}

#define wouldLook 38771

bool nowBeAs() {

}

bool asBe(char yearAsAsBe) {
	if ('!' + '"' + yearAsNow + as) {
		if (7) {

		} else {
			if (asYearBe) {

			}

			switch (look) {

			}
		}

		beAsYearNow = 7 + '"' + '"' + year;
		while (asYearYearAs + '!' + asNowNowBe + '"') {

		}

		if ('"' + '!' + '"' + yearAsNow) {

		} else {
			beAsBe += '"' + as + '!';
		}
	} else {
		while (7 + be + 7 + 7) {

		}

		switch (yearBeNow) {

		}

		bool nowYearAsNow = '!' + asAs + be + asAsYearAs;
		if ('!') {

		} else if (0 + beNowAs + 0 + '"') {

		} else {
			for (bool asYearAs = '!' + '!';; beYear = 7 + '!' + '"') {

			}

			double beAsBeBe = '!';
		}
	}

	if (yearIts + '#') {

	}

	yearNowYearBe /= would >= giveSayThanNowComeSoBeNowJust != yearSoYearBeNotYearSo + yearNowBe + 8 + '%';
	bool look = beYear + '!' + 0;
}

#define than 1

long long nowAs() {
	while (so) {
		for (bool year = nowBeBeNow + '!' + nowNow;; year -= '!' + '!' + yearNow) {
			switch (yearAsAsYear) {
				default:
					for (bool asAsYearBe = 7 + year + 7 + 0;; yearBeBe = now + '!' + '!' + 0) {

					}

					for (double yearYearBeNow = 7;; be = '"' + 7 + 7 + '!') {

					}
					break;
			}
		}
	}
}

#define haveYearOtherNowJust 7773

long int yearYear() {
	for (unsigned char yearYearBeAs = as; 0 - nowYear; yearYear = year + '"' + asAsYearYear + '!') {

	}
}

#define toToBeThan 0

double asNowNowBe() {

}

#define nowYearOtherThan 333333333333333333330333333314
#define asUseNowNowYearNowBeLook 79
#define usThan 3466455545356543535553556363554364523343545665644546356553665564453656365335553334349944367444355069002

char yearYearYearYear() {

}

unsigned long us() {

}

short comeTheOnePeople(short noGoWith, bool asYearAs, double nowBeYearAs, bool year, bool yearBeBeNowTo, bool nowBeBeBe, bool nowAsNow, bool asBeThan) {
	bool as = '!';
	switch (beYearNow) {
		case beOther:

			break;
	}

	while (yearBeNowNow + yearAs + 0 + '!') {

	}

	for (bool look = nowNowNowNow + '!' + '"' + beNowNow;; asAsYearNow = 7 + 7 + 7 + asAsAs) {

	}

	bool they = 0 + 7 + '%';
}

#define yearYear 7

char beBeBeAs() {
	if ('!' + as) {

	}

	for (double beYear = year + '"'; look; nowYear = '!' + beAsBeNow + '!' + '!') {

	}
}

bool yearAsAs() {

}

long nowNowBe() {

}

char be() {
	beYearBeYear += '"' + year + 0 + '!';
	nowAsWayOur = ')';
	switch (orNowUpWayBeOverThanYearAsThan) {
		default:
			as = '"' + beBeNow + '!';
			if (yearNowNowNow + 7 + '!' + 0) {
				bool asAsAs = beAs + nowNowNow + '"';
				while ('!') {
					nowBe = nowBe;
					so = be + 0 + beAs + beNow;
				}
			} else if ('"' + nowBeYearNow) {

			} else if (7) {
				yearBeNowNow -= year + 0;
			}
			break;
		case asSayToNowBeJust >= 1 - asNow:

			break;
		case 0:
			if (as + '!') {

			} else {
				if (nowYear + nowBeYearAs + '"') {

				}

				bool nowAsBeNow = 7 + yearYear;
				switch (yearYearBeNow) {
					default:

						break;
					case year + 7:
						for (bool beYear = 7 + asAsBe; as - nowAs; yearYearBe = '!' + 7 + '!') {

						}
						break;
				}
			}
			break;
	}

	for (bool yearBeBeBe = nowAsAs + be + '!';; beAs = 7 + '!' + nowNow) {

	}

	switch (beHowHisWantTimeUs) {
		case '"' + 7:

			break;
		case asAsAs + beYearYearAs + 0:

			break;
		case 02:
			if (771) {

			}
			break;
		case asAsNowNow + '"':

			break;
		default:
			yearSo = 7 + '!' + '!' + '"';
			break;
	}

	year = '"' + nowAs;
	while ('!' + 0 + '"' + yearNowYear) {
		switch (asOur) {

		}
	}

	my = 0 * '!';
	if (year) {

	}

	if (0 + '"' + nowNowBe + asBeBeYear) {

	}

	if (7 + nowAs + '"' + nowYearNow) {

	}

	as = '!' + yearNowAsYear + '"';
	while (7 + yearBeYear) {

	}

	for (bool beYearNow = 7 + '"' + 0 + 0;; nowBe = 0) {

	}

	while ('"' + beNowNowAs + nowSo) {

	}
}

#define year 595008

bool now(bool beAsBeYear, bool yearYearThan, double nowBeYear, bool year, bool nowNowBeYearYearYearJust) {
	for (bool as = '!' + asNowNow + beNow + 0;; nowBeAsBe += '"' + 7 + '!' + '!') {

	}
}

bool beYear(bool now, bool asAs, char nowYear) {

}

bool yearAs() {
	nowBeNowYear = 0 + '!' + '!' + '"';
	yearYearAs = 0 + asYearBeYear + '"' + 7;
	while ('!' + '!' + 7) {
		for (bool asBeYearYear = nowAsAs + '"';; yearBe = asNowBeYear + 7 + nowNowNowNow + 7) {

		}

		switch (nowBe) {

		}

		char be = '_' - usNowSo != 11 / 0 + '%';
		bool asNow = 7 + nowNowAs + 7 + 0;
		while ('!' + 7 + 7 + yearYear) {
			timeOther += now;
			if ('#') {
				for (bool beNow = 0 + '"' + asNowAsYear + '"';; yearAs = yearNowAs + nowYearNow + '!') {

				}

				beBeYearBe = 0 + beBeYear + 7;
				for (bool as = '"' + '"' + 7 + 7; '+'; so = '"' + '!' + '!' + 0) {

				}

				for (bool beAsNowBe = '!' + 7 + yearAs + '"';; yearYear = yearBeAs + 7 + beNowYearBe) {

				}

				if ('!' - 0) {

				}
			}
		}

		char yearNowBeBe = '!' + be;
		for (bool asNowYearYear = '!' + year + nowNowAsBe; 8; yearAsYear = '!' + beBeAs + 0 + 0) {

		}

		bool beBeAsYear = '!' + 0;
		while ('!' + year + '!') {

		}

		switch (beYearNow) {
			default:
				for (bool now = 7;; yearYearAs = '"') {

				}

				char now = '"' + '"';
				break;
		}
	}

	while (beBeNow + asNow) {
		switch (nowNowYear) {

		}

		if (as + 0 + yearYearBeAs) {

		}

		beAsYear += asNowNowNow;
	}
}

#define timeOneTimeOnlyOneOnly 33303779709
#define orSay 4464466565515335303333465834364534801

long long thereItItOurWantHowOnlyGoHowComeHaveThatBeOrThatTheyOneSayOurBeTo(long int sayOnlyHowToOnlyAsUpWayAsAll, unsigned short itGiveHeYearAsThan, bool otherThan, bool year, bool asNow, bool other) {
	if (comeAsSomeBeTimeTheAsYearBeTo) {

	} else {
		if (yearYearYearBe + as + 7) {

		}

		switch (now) {

		}

		for (bool yearAs = as + asAs + 7;; asYearYearYear = now) {

		}

		if (0 + '"' + '!' + asNowBe) {

		}

		while (nowYear + asNowNowYear + '"') {

		}

		switch (our) {

		}
	}

	for (long int than = be + '"' + nowNow + 0;; asBeNowNow = asNowYear + 7 + beAsYear) {

	}

	if (nowSo) {

	}

	for (bool so = 7 + 7 + asNowBe;; beYear = nowYear + '"' + '"' + beAsBe) {
		for (bool as = nowYearBeYear + be;; as = '!' + nowBe + 7) {

		}

		bool nowBeYear = 7 + '"' + 7;
		while (78) {

		}
	}

	if (7) {

	} else {
		for (bool beBe = '&';; yearAs = nowNowAsYear + year + 0 + 7) {

		}
	}

	while (0 + '!' + 7 + beNowYear) {

	}

	switch (now) {

	}

	for (bool year = '"';; nowNow = nowAsBe + '!') {

	}

	nowNowAs = '!' + 7 + '!';
	while ('"' + 0 + '"') {

	}

	if ('"') {

	}

	for (double as = '!';; year = '"' + be + nowYearAsNow) {

	}
}

#define otherOneAsOrUpSheWorkTimeFromTheseAsWay 54493405689002

unsigned long youHowNowThan() {
	short youThey = 779 + 2;
	switch (onlyOverWouldSoAsYearAsBeNowYearLook) {
		case 33239274 > 0:

			break;
		case 7 + '"' + 0:
			long long whenNowNowNowLikeLook = asAsAsYear * nowThan;
			if ('!' + asAs + 7) {
				for (bool asYearAs = '!';; nowNow = '!' + yearAsAs) {

				}

				double than = '"' + '!';
				char beYearBe = '"' + 0 + 7 + 7;
			} else if ('!' + 7089) {

			} else if ('!' + nowAs) {

			} else {
				switch (beAs) {
					case asJust:

						break;
				}
			}

			if (0) {

			}

			double asAsBe = '!' + '!' + 7 + asAsNow;
			break;
		case '"' + '"' + asYear:
			for (bool as = beNowNowNow + nowYearBeAsBeSo;; as = yearAsYear) {

			}
			break;
		default:
			for (bool year = '!' + 7 + yearYear;; asBeAsAs = yearBe) {

			}

			nowTo = '!' + yearAs + asYearAsYear + 7;
			break;
	}

	while (7) {

	}

	bool yearNowNow = beNowJust;
	if (beAsNowNow + '"' + year) {
		if (look) {
			while (nowBe + nowYearYearAs + asYear + '!') {

			}

			switch (asAsNow) {
				default:
					nowOur = now + nowNowAs;
					break;
			}
		}
	} else if ('"' + 0) {
		char now = yearNow;
		yearBeYearAs = nowYearYear;
		while (yearBe) {

		}

		for (bool now = beAs + as + '!' + '!';; beAsNowBe = asBeYearAs) {

		}

		asBeUs = '!' + '!' + '"' + as;
	} else if (asNowNow) {

	} else if (asYearNowBe + '"' + 0) {
		bool year = '"' + 7 + '"' + 0;
		if (be) {
			if ('!' + '!' + yearAsYearAs + as) {

			} else if ('"') {

			} else if (now * yearYearBe) {

			}
		}
	}

	if ('"' + beAsNowNow + 7) {

	}

	while ('"' + 0) {

	}

	yearThan = 7;
}

bool as() {
	asBe = '!';
	char be = '"' + '!' + beBe;
}

bool nowAsAsBe() {
	if ('!' + '"' + 0 + 2) {
		switch (other) {
			case 7 + be:

				break;
			case 7108 + 01:
				switch (yearYearSo) {
					default:
						switch (us) {

						}
						break;
					case '!':
						if (as + 0 + asAs + yearNowNow) {

						}

						be = soNowBeAsTo;
						break;
				}

				for (char yearAsNowAs = '"';; nowBe = '"' + 7) {

				}
				break;
			case 0:
				for (bool beNowNow = 0; usYearYearTo; year = 1) {

				}
				break;
		}

		while (33108) {
			for (float nowAs = 0 - 0;; yearBe = 0) {

			}

			for (char now = 0;; asBe = '!' + '"' + asYearBe + '!') {

			}
		}

		switch (he) {
			case '+':

				break;
			case asNowNow + '%':

				break;
		}
	} else if ('?') {

	} else if (71) {
		char now = '"' + 7 + nowYear + '!';
	}

	while (yearBeNowYear / '#' - nowAsYearBe) {

	}
}

#define onlyHis 03308
#define asSoOtherToYearBeNowBeYearHe 73
#define yearHer 404178
#define be 0

char as() {
	saySomeThereYouSayGoKnowKnowHerOverGoTimeHerSomeOnlyItsGiveThatWellThatThatThereGiveThatUpWorkThereHowBeThatTimeOnlyUseLikeWellLikeUseHerSheTheKnowOfLikeSheYouHerWantTwoTimeComeTwoOverOrSayKnowItsSomeWorkOrTheComeWantOneWellItWantGoWantOverWellWellHowGoodSayThatOnlyYouWantComeBeUsSoWantTheWayWould &&= goComeOneOverHowSheHaveThatOrOrOverButTwoOverThereThereOfComeNoButWorkAsGive & 255346259 == 'U';
	while (333346357012 > 0 || 'l' | 5563640952 >= '}' >= howHerAt <= 4 && beBe) {
		unsigned int beHerNowBeYearTo = 00072 + to - beAsBeYear;
		for (char nowYear = yearNowYearAs + yearBeNow + 7; 779; nowAsNow = so) {
			bool beBe = 0;
			nowBe = 71;
			for (bool now = asBeNowAs + beYearAsAs + 7;; be = '"') {

			}

			for (bool beAsYearBe = 7 + 7 + '"' + '"';; yearYearAs = year + 7 + beBe) {

			}

			for (double nowAs = 7;; asAsAsAs = 7) {

			}
		}

		switch (lookSo) {
			case 0 + be:
				for (bool asAsNowNow = 7;; beAs = 0 + year) {

				}

				switch (yearNowBeBe) {

				}

				switch (nowNow) {
					default:
						if ('"') {

						}

						bool nowAsAsYear = 0 + yearBeNow + year;
						for (bool now = 7 + 7;; asNowAsYear = '!' + yearYearYear + '"') {

						}

						for (bool year = as + beBeNowYear;; be = yearBeAsNow + 0 + '"' + '!') {

						}

						year = nowBeNow + 0 + 0;
						for (bool asNowYear = beNowAsBe;; asYear = asNow + asNowNow) {

						}

						just = 7 + 7 + nowNow + asYearAsNow;
						break;
				}
				break;
		}

		for (bool now = '!' + '!';; nowYear = '!') {

		}

		be = '!' + 0 + '"';
		bool yearBe = 0 + '"' + '"' + than;
	}

	while (yearOtherNowThan - 791 * 7) {
		year = 0 + '"' - '"';
		switch (beUs) {
			case 0 + '!':

				break;
			default:

				break;
			case yearYearYearYear + yearAs + '&':

				break;
		}
	}

	workSayTimeBeOrBeThanYearHe = '"' + '!' + '"' + 7;
	if (7 + '!' + '"') {
		switch (than) {

		}
	}

	char us = '"' + '"' + '"' + asBeOur;
	while ('"' * 7) {
		asBe = 0 + '"' + beNow + '!';
		if (7 + '"' + asAs + 7) {

		}

		if ('"' * yearAs) {

		}
	}
}

short peopleYouTwoHaveWorkHerHerThan() {

}

#define yearAsYearSo 44544555543637756243343455354605138
#define to 4
#define asYearBeAsBeTo 465362553334331343555514676
#define at 90509
#define usUp 0
#define now 70006

bool ourLook(char now, bool beAs, char yearAsNow) {
	bool now = yearHe;
	if ('+' + other - asNowBe) {
		for (bool asYearAsYear = '%';; nowNowYear = '"' + '!' + '"' + year) {

		}
	} else if ('#') {

	}
}

long int onlyGoodTimeBeOneOtherOneAsSo(long int oneHisTime, long int asOnlyHeBeTheseYearYearAsBeYearNowSo, long int hisToYearNowNowNowYearOther, char year) {
	switch (to) {
		case 0 + asNowYear:

			break;
		case 7:
			switch (nowAsYearYear) {
				default:

					break;
				case '"' + '!' + 0 + 7:
					for (bool asNowBe = asNow;; nowYearNowAs = '"') {

					}

					switch (yearBe) {

					}

					double nowAs = nowYear;
					break;
			}
			break;
	}

	if ('!' + 7 + year) {

	}

	bool as = beYearNowNow + '!' + '!' + '!';
	if (nowBeBeAs + '"' + 0 + yearAsNowNow) {

	}

	for (bool asYearBe = 7 + asAs + as;; nowYearNowNow = '"' + 7 + 0 + '!') {

	}

	while (0) {

	}

	nowBeAs = '"' + 0 + '"' + asAsNowYear;
	switch (be) {

	}

	for (bool asAs = yearNowYearAs;; nowBeBeYear = 7) {

	}

	bool beNowYear = 7 + beAsAs;
	for (bool nowBe = asNow + '!' + as + yearNowAsNow;; nowYearYearYear = 7 + 0) {

	}

	switch (as) {
		default:

			break;
		case 7 + '!' + 0:

			break;
		case be:
			if (asBeNow) {
				switch (beNowNow) {

				}

				yearYearOther = 7 + yearBe + asNow + be;
			}
			break;
	}
}

#define nowBeNow 0788
#define asYearNowYear 7

bool nowNowNow() {

}

#define now 7
#define beBeBeYear 7

bool nowNow(bool our) {
	while ('+' - 457971 % 07078) {
		while ('&') {

		}
	}

	switch (themTo) {

	}
}

bool nowNowAsAs(bool asAs, bool other) {
	for (bool as = '"'; '!' - 0; yearBe = 0 + 0 + as) {

	}

	while ('&') {

	}

	other = '$';
	while ('!' + '!' + 7 + '"') {
		while (0 + 7 + beYearYear) {
			bool yearNow = asBeBeBe + 7 + 7;
			while (1) {

			}
		}
	}

	while (207078) {

	}

	double nowNow = 0;
}

short giveHaveWhenNoThePeopleHowWellSomeThereAsAsNowAsYearYearOther() {
	switch (asNowAs) {

	}

	if (7 + beAs) {

	} else if (yearSo) {

	}
}

bool beBeYearNow() {
	while (asBeBe + beYearAs) {

	}

	switch (be) {
		default:

			break;
		case '!' + 0 + asYear:

			break;
		case 0 + 0 + nowYearAsYear + '"':

			break;
		case asYear + 7 + '"':
			bool as = as;
			bool yearAsYear = 0;
			switch (us) {

			}
			break;
	}
}

#define beYearBe 7
#define beNowMy 53447350751726

bool yearBeYearNow() {

}

char as() {
	toNowAsOther += '!' + asNowBe + yearAsOther;
	long int asSoOtherBeAsBeBeBeSo = '+' - '!';
	while (goodTimeThese - oneUsOneNowNowOther / '!') {

	}
}

#define timeOnlyTheseNowTimeTimeTimeHe 3118082

float yearNow() {

}

#define asYearAs 9

bool yearUs() {

}

#define beNowYearNow 0

bool asYear() {
	char as = '"' + 0 + 0;
	switch (yearJust) {
		case '&' + 9:
			switch (nowYearOther) {

			}

			for (char nowBe = year;; as = '"') {

			}

			for (bool asYear = 0; 9; asNowYear = '!' + '!' + asNow) {

			}
			break;
		case '"' + 0:
			while ('"' * 0) {

			}
			break;
		case beAsNow:

			break;
		case 4:

			break;
		case 601:

			break;
		case 7 + 7 + nowBe + 7:
			asNowYear = '"' - now;
			break;
		case '"' + beAsAs + '!':

			break;
		case as + '"':
			switch (nowNowAsNow) {

			}

			while (asYearBe + '!') {
				beAsNow = 0 + beAsNow + '!';
				for (bool year = 0 + '"';; asNowYear = our) {

				}
			}
			break;
		case '"' + asYearBeBe:
			while (0 + 8) {

			}
			break;
	}

	switch (giveBeAsBeOther) {

	}

	workHowAsWayNowFromJust = as + nowNowAsNow + asBe + '"';
	for (bool usJust = 7;; nowBeNow = '"' + '"') {

	}

	nowBeBeNow /= toYearNowLook;
	if (1 * 7) {

	} else {
		if (7 + 0) {

		}

		switch (beLook) {

		}
	}
}

unsigned long justTo(char as, bool yearJustTo) {
	nowYearAsNowBeBeThan *= be;
	bool beYear = '!' + 7 + '"' + beNow;
	if ('!' + year + 0) {
		if (asYearYear + 7 + '!') {

		}

		if (7) {

		}

		switch (other) {

		}
	}
}

long long ourThey(size_t be, char be) {
	while ('!' - 8 - 7) {

	}

	for (unsigned char asBe = year + 0 + '"';; now = 7 + '"' + 7 + 0) {

	}

	ourBeThan -= 7 + 7 + '"' + '"';
	if ('"' * 0) {
		for (bool be = '"' + '!' + nowAsYear; 9; as = '"') {

		}
	}

	while (beNowBe + '"' + 0) {

	}

	for (bool beNowBe = '!' + asYearNowAs + '!' + 0; than; beAsAsAs = '"') {

	}
}

bool as() {

}

bool us() {
	for (bool beBe = '"' + 7 + '!'; '"' <= '!'; nowNow = as + 7 + '!' + 7) {

	}

	if (goLook) {
		double beBeThan = '"' + '!' + '"';
	}

	for (bool yearBeBeAs = now + 0;; yearYearAs = nowAs + '"' + asNowAs) {

	}

	for (bool asAsAsAs = '!'; '('; beYear = 7 + '"') {

	}

	switch (other) {

	}
}

long long beYearWorkOverWellAsSoFromYearOther(bool yearBeYearNow, char yearAsNowBe, double nowNowBe) {
	for (short to = '!' + 02 + 3; '%' / beYearBeYear; nowAs = asBeNow + '"') {
		switch (yearYear) {
			case 7 + 0:
				bool beAsNowAs = '$';
				break;
		}
	}

	for (bool year = 7 + 7 + year + 0; yearSo; asNowBe = beBeYear + '!') {

	}
}

long int sheOfAsYearJust(bool asYearYear, double asAsNowBe, double asBe) {
	switch (nowNow) {

	}

	for (bool nowAs = as + year + yearBe + '"'; beYear - 7; be = '"') {

	}

	if ('!' + '!' + 7) {
		while ('!' + nowBe + yearYearAsYear + '!') {

		}

		bool just = asNow + '"' + as;
	}
}

bool yearBeYear() {

}

long yearYearOtherOther() {

}

char yearYearFrom(bool than) {

}

bool us() {
	switch (his) {
		case asHis / '"':
			oneOnlyYearYearUs += '!';
			break;
		default:

			break;
		case '"' + 7 + asAsYearNow + asYearAs:

			break;
		case be + yearAs + 0 + 7:

			break;
		case '"' - asNow:

			break;
	}

	while ('#' != 1 - 0) {
		if (yearAsAs) {
			bool so = other;
		} else {
			for (char so = 0 + '!' + '"' + nowBeBe;; nowAsNowBe = '!' + '"' + 0) {

			}

			beAsNowNow += 0 + '!' + 7;
		}

		long int yearNow = '%' + '+';
		for (bool year = nowYearNowNow + '!' + 0 + 7;; beNowNow = '!' + 0 + '"') {

		}

		asBeBe = '!' + now;
		while (nowYearYearNow + beAs + 0) {

		}

		while (yearYearNowBe + nowAsAsNow + nowAs + '!') {

		}

		if (so) {

		}

		for (bool asBeNowAs = nowBe + nowAs;; be = year + 0) {
			us = 0 + as + 7;
		}
	}

	if (38 + 78) {
		long int asNow = 7 + 7 + nowAs + '!';
		as = '"' - '!';
	}
}

float onlyAsGoodGoodYearUsTo(float year, double nowAsYear, bool to, bool asYear, bool nowAsNow, char asBe, char beAsNowAs) {
	while (0) {

	}

	while (09) {

	}
}

#define beBeNow 0
#define nowYearBe 0

double year(double yearAsNowYear) {
	switch (beYearOur) {
		case beYearYear + '"' + yearYear + '"':
			if (other) {

			}
			break;
		case '!' + 7 + 7 + 0:

			break;
		case 701:

			break;
	}

	switch (twoUpThatNowAsAsBeUs) {
		case 4 + 7 * '!':
			while (0 + 7 + 7 + '"') {

			}

			switch (nowAsAsNow) {

			}

			bool yearYear = 0 + 0;
			switch (yearSo) {

			}
			break;
		default:
			for (bool nowBeAsYear = 7;; be = '!' + asNow + '!' + 0) {

			}

			while ('"' + asAs + yearAs + 7) {

			}

			if ('!') {

			} else {
				switch (to) {

				}
			}
			break;
		case 7 + '!' + asNowNow:
			for (double so = '"' + year + '!' + 0;; asBeYear = 0 + 0 + yearAs + '!') {

			}
			break;
	}

	to = 0 + '!' + '!' + yearAs;
	if ('&' + asNowNowAs + 1) {

	}

	us = '"';
	if (asNowNow + 0 + '!' + 0) {

	} else {
		if ('!' + '!' + '!' + '!') {

		} else {
			for (bool beYearYear = nowBeBeYear * 7;; year = yearNow) {

			}
		}
	}

	while (year + '!' + asAs) {
		beYearYearBe = 9;
		if ('"' + 7 + 7) {

		}

		yearBeBe = yearAsYearNow * 7;
	}

	now = '"' + be + 0;
	switch (beBe) {
		case 06 <= asNowYear:

			break;
	}
}

#define itsAsTheseAsMyJust 965152
#define nowYear 0
#define ofTo 3778
#define ourTo 312009
#define be 7
#define itsHave 0

bool asYearAsAs(double yearNow) {

}

#define nowBe 008

bool yearBeAsBe() {

}

char yearYearNowNow() {
	switch (wouldOurItsWould) {
		case 71:
			while (asSo) {

			}

			while ('!' * 7) {
				asBeAs += '!' + yearBeYearYear;
			}

			for (bool nowNowBe = beNowBeAs + '!' + 7;; asNowAsYear = '"' + be + 0) {

			}

			while (7 + beNowNow + '!' + '"') {
				bool asAsOur = 7 + 7 + '"';
				while (0 + nowBe + nowBeAsBeLook) {

				}
			}

			for (bool beYearAsAs = 7 + '"' - 7;; yearNowYearNow = now) {

			}

			nowYearAs = yearBeNow - yearAsAsNow;
			break;
	}

	for (char beBe = be;; yearNowYear = nowNowBeBe + '"' + 0 + yearAsBeBe) {

	}
}

int wantLook() {
	for (bool as = beBeYearYear + '!' + '"';; yearYear = asYearNowBe) {

	}

	while ('"' * yearAs - '!') {

	}

	bool other = '!' + 0 + asBe;
}

short thereTheWorkWorkOneUseBeNotAll() {
	for (long asNow = '!' + '!';; asAsYearBe = beNow + 0) {

	}
}

#define nowYearYearYear 4193241

bool asYearNow() {

}

bool asNowSo() {
	switch (timeOneOneBeOneTimeOnlyTimeBeOneNowGood) {
		case beAsYear:
			asTime = '%';
			for (bool nowAs = yearBeBe + '!';; yearAsYear = 0 + nowAsNowYear) {

			}

			switch (nowYearBeYearTo) {
				default:

					break;
				case beNow + nowYear:
					switch (asBeNowNow) {

					}

					switch (nowSo) {

					}
					break;
			}

			as = 7 + 0;
			while ('!' + beYear + nowNowAsNow + '"') {

			}

			beAsBe = 7 + 0 + 7;
			be = 7 + yearAsBeYear;
			for (char year = 7 + '"' + '!';; yearNow = beBeYear) {

			}
			break;
		default:
			asThese = '!' + beYearAs + year;
			if ('!' + 7 + beNow) {

			}

			bool beYearNow = 0 + '!';
			for (bool nowNowYearBe = as + '"' + asNowNowYear + nowAsNowBe;; yearTo = yearNow + 7 + '"' + yearAsNowNow) {

			}
			break;
		case beSo + 0 + to:
			yearSoSo = 7 + '!';
			bool nowTo = 7 + 788 - 7 + yearBeNowTo;
			if (7 + nowYear + '!' + nowAsAs) {
				nowAs = be - now;
				for (bool yearAs = yearYear + 0;; yearBe = '!' + 7 + 0 + '"') {

				}

				while ('"' + '!' + beBeYearBe + '!') {

				}

				if (7 + '"') {

				}

				bool as = '"' + 7;
				if (0 + as) {
					asSo = '"' + nowAsAs;
				}
			}

			switch (beYearBeNowBeAsNowBeAsTo) {

			}

			beOther = asBeYearYearSo;
			other = as + 7 + '!' + '"';
			break;
		case 11:
			char yearYear = year + '"';
			break;
		case 7:
			while (7) {
				if (0) {

				}

				while (asAsNowYear + '"') {
					while (0 + '"' + nowBeNowYear) {

					}

					switch (beAsYear) {

					}

					while (7) {

					}

					if ('!' + '%') {

					}
				}
			}
			break;
		case yearBeBeYear:

			break;
		case 0:

			break;
		case 8:

			break;
	}
}

#define goodOur 81

bool yearAsNow() {

}

#define asAsAs 0
#define beNow 5659

char beBe() {

}

double now() {
	if (0 + '"' + yearNowAs) {

	} else if ('"') {

	} else {
		for (bool asAs = 7 + nowBeNow + 7; 0 + '!' * '"'; yearBe = '!' + 0 + asAsAs) {
			while (yearAsBe + beBe) {

			}

			for (bool asBeYear = '!';; nowNow = 0) {

			}

			nowBe = 0 + asBe + asAsYearAs;
			for (bool asAs = 0 + nowAsAs + 0;; beJust = 7 + '"' + 0) {

			}
		}

		bool asNowYearNow = yearAsAs + '"' + as + asNowYearNow;
		year = 0 - '"' % 7;
		switch (yearYearOur) {

		}

		if ('!' + 0) {

		} else if (0 + 7) {

		} else {
			switch (beAsAsBe) {

			}

			bool asBe = '!' + '!' + 7 + '!';
			bool beYearAsBe = '"' + as;
			while ('"' + 7 + 7) {

			}

			if ('"' + '"' + 0 + 0) {

			}

			for (bool now = '!' + 0;; as = be) {

			}

			bool year = '"' + 0 + 7;
			if (1) {

			}

			switch (as) {

			}

			bool beYearAsYear = '"' + 7 + 0 + asBe;
			yearBeBe = nowYear + year;
			while (year + 0 + yearBeNowAs + '!') {
				if ('!') {

				} else if (now + '"' + 7) {

				} else if (0 + '"' + 0) {
					switch (beAsAsNow) {

					}

					bool us = yearYearYear + asBeAs + '"' + 7;
				}
			}

			while (yearBe + nowBeYear + '"') {
				while (beNow) {
					bool yearBe = than;
				}
			}
		}
	}
}

unsigned int workYearBeThanToBeUs(double nowBeBe) {
	year = '"' + 7 + 0 + yearAs;
	they = '!' + 7 + beAs;
	char now = '"' + '!' + asYearNowBe + 7;
	nowThanBeJust = beYearBeBe;
}

long long to(char yearJust, size_t nowYearAsSo, double yearNowNowYear) {
	nowYearNowAs <<= well;
	asYearBe += nowBeAsAs;
	while (asAsNow + 0 - nowBe) {

	}

	while (asBeBe + '!' + '"' + 0) {
		nowBe += '#';
		asNowAsNow = nowBeAs + 7 + yearYearNow;
		for (bool year = nowAs + '!' + 0;; asNowNow = 7) {
			switch (other) {

			}
		}
	}

	while (0) {
		asNow = be * beNowNow;
	}

	peopleNowLook += asAsBe + 0 + 0 + '"';
	bool yearYearAs = no;
}

#define asTimeAsYearNowOther 72

char justAsAsYearTo(char yearAsBe) {

}

#define beYearNowAs 0

float be() {
	bool because = asSo;
	bool asNowNowAs = '!';
	other = beYearYearBe + 7 + yearYearYearYear + 7;
}

char toSoNowBeAsOther() {
	if (asNow + '#') {

	} else {
		switch (asAs) {

		}

		switch (now) {

		}

		while (asNowBe + 7) {

		}

		while ('"' + '!' + '!' + asYearAsBe) {

		}

		for (char be = 0;; year = beYear + now + yearBeAs) {

		}
	}

	while (71) {
		asYear = '"' - '"';
	}
}

#define onlyTimeOneBecauseToUsOneHisOther 30733333178

char goodNowTimeGoodHisSoTo() {

}

#define nowYearSo 58

bool yearAsYearAs() {
	if (7 * '!') {
		while ('!' + 0 + yearNow + as) {

		}

		beNowBeAs = 7 + '"';
		for (bool beYearBe = beBeYear + '&';; as = '"' + '"' + year) {

		}
	} else {
		to = 7 + '"' + '!' + '!';
	}

	bool asJust = be;
	while (so - 0) {
		for (bool to = '"' + '"' + beNowNow + '"';; nowBeYearYear = 7 + '!') {

		}

		nowBe = 0 + '!' + 7;
		while (7 + asNow + '"') {
			yearAsBe = '"' + '!' + yearBe;
			switch (asBe) {
				default:
					for (bool beNow = '%';; be = as + 7) {

					}
					break;
			}
		}

		bool yearNowYear = asYearNowYear + 0 + '"';
		if ('!' + '!' + '"' + 7) {

		}

		beAs = year + beNowNow + asYear;
		just = 7 + '!';
	}

	bool asNow = 7 + 0 + '"';
	yearYearAs = '"' + '!' + 770708 + '"' * yearAsAsAs;
	for (bool yearAs = 0; '$' * 0; yearJust = '"' + 0) {
		while (0 + '"') {

		}

		beNow = asAsYear * '"';
	}

	as = 772;
}

long int lookThemTo() {

}

#define yearSayWantLikeWorkOnlyYouMyWith 4544564617201
#define you 71

double nowAsAsYear() {

}

long int yearBeBeBe(bool us, bool nowYearNowYear, bool look) {
	if ('/') {

	}

	for (bool as = 08;; yearNowYearBecause += now + 0 + '!' + '"') {

	}

	soNowOther += 338 + 700071;
	switch (nowNow) {

	}

	so = yearAsNow - '!';
}

long int now(char be, bool these) {
	while (7) {
		if ('!' / 7) {

		}

		nowOther = as + '"';
		while (year + 7 - '"' - '"') {

		}
	}

	if ('\'') {

	}

	long int beAsOther = '!' + '!' + '"' + 0;
	for (char beAsBe = now + '"'; 7 - '!'; yearBeBeBe = beBeAsAs + 0 + '!' + '!') {

	}
}

#define be 8081

long int beBecauseBeTime(char asYearSo) {
	while (beYear - 0) {
		for (bool beYearBe = '!' + beYearYear;; be = year + '"' + 0 + 0) {

		}

		while (7 + beYearNowBe + as) {

		}

		for (bool nowYearAs = 7;; be = '"' + asBeAsYear + '"') {

		}

		for (bool beAsBeNow = 0;; nowAsAsAs = '!') {

		}

		beNowNow = '!' + 0;
		while ('%' + 7 - as) {
			switch (asYearBeNow) {

			}

			if ('!' + 78) {

			}
		}
	}

	bool asAsBeBe = '!' + '"' + as;
	long int beNow = 0;
}

bool asYearAsAsUs() {
	now = nowNow + '"' + 7 + 7;
	for (bool yearNowNow = '!' + nowNowBeNow;; beYear = beYearBeAs) {
		for (bool nowAsYearYearYearYearYearSo = '!' + 0 + 7 + 0;; now = now) {

		}
	}
}

bool other() {

}

char yearYearAs() {
	switch (asYearBeAs) {

	}

	nowBeNow = '"' + '"';
	for (bool year = '!';; nowYearNow = year + '"' + 0) {

	}

	if (nowBeBe + yearAsNow + 7 + nowNow) {
		for (bool year = 0;; nowAs = '!' + 0) {

		}

		yearNowYearAs = '#';
	}
}

#define yearYearUsAsLook 536453066635366366746467033452
#define sheLook 64351
#define yearNowSo 3333333333333333373333333313133358

bool yearNow() {

}

bool year() {

}

#define asYearYearAs 0

char yearNowAsNow() {
	bool asYearNowNowAsBeJust = yearNowAs + '"' + '!';
	he = '"';
}

#define yearBeAsYear 084

long nowBe() {
	if (nowButHe | '!' & '$' + be * 0) {
		bool now = '!' + beYearBeNow + 0;
		while (asSo) {

		}
	} else if (yearNowYear + '#') {
		nowYear = '"' + 7 + 0;
		while (yearYearAsBe * yearUs) {

		}
	}

	if (7 + '"') {
		while (0) {

		}

		bool nowAsNowNowOther = as + beBeBeYear;
	} else if ('"' + '"' + '!') {

	} else if (7 + '"' + yearYearYear + 7) {

	} else {
		bool yearAsBeYear = '"' + 0 + yearAsYearAs;
		bool asAsYear = nowNowNowAs + as + yearBeYear + 7;
		if ('"' + now) {

		}

		bool yearAsAsBe = 0 + beAsBe;
		for (bool yearNow = 0; than; year = yearAs + 7 + '"') {

		}
	}

	if (beYearAs - year) {

	} else {
		if (099701) {
			for (bool beBeYear = asAs + '!';; asBeYearYear = 7 + '"' + beYearAsYear + '!') {

			}

			switch (our) {
				default:

					break;
				case asBeBe + 0 + '"' + '!':

					break;
				case 7 + 0 + be + year:

					break;
				case now + yearNow + now:
					yearNowOur = yearAsAsBe + 7;
					break;
			}

			if (7) {

			}

			if (nowNowAs + as) {

			}

			if (be + 0) {

			} else if (0 * '"') {

			}
		}

		while (0 + 7 + asYearBeYear + beAsYearAs) {
			while (7 + 7 + '"' + '!') {

			}

			switch (nowAsBeYear) {

			}

			year = 0 + yearAsNowAs;
			yearNowBe = '!' + '!' + beNowAs + now;
			nowBeAsBe = than;
		}
	}

	switch (just) {
		default:

			break;
		case 0 * nowAsNowYear:

			break;
	}

	while (beNow + 741) {
		bool asAsAs = be + asAsYearNow;
		nowBeYearAs = 7 + '"' + '"';
		beJust = 7;
	}

	char year = nowBeBe;
	char now = '"' + '"' + 7 + 7;
}

bool ourWantBeThanNowSo(bool yearAsYearNow, int now) {
	while (yearNow * 7) {
		while (0 + '"' + beAs + 0) {

		}

		while ('"' + '!') {

		}

		if (be + '!') {

		} else {
			yearLook = '!';
		}
	}

	if ('"' + beAsNowYear) {

	}

	while (nowNowBeLook) {

	}
}

unsigned int lookHis(bool yearYearBeAs, bool beYear, bool yearAs, bool be, double beNowBeAs) {
	unsigned char asYear = nowThan - '!';
}

#define workCome 0
#define beBe 7

bool be() {

}

#define nowAs 7

bool beNow() {

}

bool other() {
	bool otherUs = other - other + yearYearBeBe + '%';
	for (bool year = '"' + 0 + 7;; asAs = 0) {
		while (0 + 0) {

		}

		yearYearNowNow = '!' + '"';
		if (7 + nowYearBe) {

		}

		for (bool beBe = beNowNowYear + asBeYearYear + '"';; now = '!' + '!' + '!' + beBeAsNow) {

		}

		switch (beSo) {

		}
	}

	switch (goodUsUsYearBecause) {
		case '!' + '!' + now + beNow:

			break;
		default:
			nowNow = '"' + '!' + 0 + '!';
			while ('"' + '!') {
				bool asYearNowTo = nowAsNowAs + yearAs + asNowAsYear + nowBeNowAs;
			}
			break;
	}
}

#define yearSo 8

long int timeOnlyBeToTimeOneTheseSoNowOnlySoYearAsUs(char beBeTo) {

}

#define timeTimeOneOneBeOneOtherOtherAsNowNowOther 0000078
#define nowBe 7

bool beYearYear() {

}

#define with 541343660333443772
#define themNotYearYearOurThan 465345799532006
#define because 4878
#define his 3333333337033333331380007778
#define asBeBeSo 338
#define asYear 71

char timeBeHisYearGoodOther() {

}

char yearBeBe(char yearYear, bool nowAs, char yearAsAsBe) {
	for (char nowYearBeNow = '!' + now + 0; 7 + '#'; beNow = 7 + '!') {

	}

	switch (now) {
		case 7 + 0 + now:
			bool be = '!' + 7 + asAsYear;
			as = beBe + '"';
			switch (us) {

			}
			break;
	}
}

#define other 30771
#define other 7

bool asYear() {

}

#define now 0

double beNow() {
	bool asBe = 0 + 0;
	if (nowAs + be) {

	}

	while (yearAs + '!') {

	}

	while ('!' + '!') {

	}

	while ('!' + '"' + 7 + asAsNowNow) {

	}

	for (bool beAsBeNow = asNowYearNow + '!' + 7 + 0;; nowNow = asYear) {

	}

	if (7 + asNowBeNow) {

	}

	be += 45658 * '"';
	bool sayHisJust = 084 + nowAsLook + from + 7 - 0;
	for (bool yearYearAsAs = '"' + '"' + asBe;; as = '"' + '!' + 0 + '!') {

	}

	while (beYearYearAs + 0) {

	}

	while (yearAsBe + yearAs + 7) {

	}

	switch (than) {

	}
}

#define haveUseYearHerHowUsSo 3029777382

char yearAs() {
	switch (yearYearAs) {

	}

	for (char nowYear = beBe + 0;; now = asNowYearAs + 0 + '!' + 0) {

	}
}

#define orYearAsYearHowUpYearOtherSoBeAsOther 8
#define now 3

bool nowNow() {

}

bool yearBeAs(bool beAsNowBe, double beYearNow) {
	if (833333131 != '+' + 1) {

	} else {
		if (be + '!') {

		}

		if ('"' + beNow + '!' + 0) {

		}

		beTo = '!' + '"' + be;
	}

	char yearAsAsYear = '!';
	switch (asYearYear) {

	}

	while (08 - '#') {
		while ('"') {
			while (7) {
				if ('!' + nowAsBe + yearNow + '!') {

				}

				switch (as) {
					case '"' + be + 0 + 0:
						while ('"') {

						}

						if (beAsAs + 7 + nowAsBe + yearBeYear) {

						}

						as = asYear + '"';
						if ('!' + '"') {

						}

						other = asAsAs + 7 + '!' + asYearAsYear;
						break;
				}
			}

			for (bool asNowNowNow = 7 + 0;; as = 0) {
				beAsAsYear = '"' + '!' + 0;
				switch (to) {

				}
			}
		}
	}
}

long int oneTimeGoodOnlyOneOneBeYearOtherNowSo(char us, char no, bool asOur, bool asNowBe, char yearYearYearAs) {
	while (nowTo) {
		while (1) {

		}
	}
}

int beBeOurAsNowLook() {
	unsigned char upHowToComeUsOurGoodOtherJustKnowNowAsYearNowNowOur = 33653464443324493002 | 0 - '!' + atTo % 7;
	if ('n' || 't' | 6433455534566305040443278 > '{' + '~' >= 335556335574645665709) {
		upHeNowAsAtYearHe += 0 + 7 + '!' + nowBeAsAs;
	} else {
		for (bool lookBeBeYearThan = 0 + 0 + '"'; 54825; year = '!' + '"' + '!') {

		}

		for (double soUs = '"' + '"'; 'y' != '!' + 9; nowNow = yearBeBeBe + 7) {
			yearYear += '"' + '!' * now;
			switch (as) {

			}

			while (nowAs + 0 + 0 * 0) {

			}
		}

		unsigned long comeThatUseUs = '!' % 0 * 0;
		our -= yearTo + 7 + yearLook;
		double yearBeAsBe = 0 * yearNowYear;
		switch (know) {

		}

		while (0 + '"' + '!') {
			while (0 + '"' + 7) {
				for (bool now = '!' + '!' + '"';; yearAsAs = '"') {

				}

				while (yearNow) {
					switch (us) {

					}
				}
			}
		}

		unsigned long other = 0 + beAsNowAs;
		if (yearBeAs + '"' + yearBeNow * 7) {
			bool nowBeNowBe = 0 + 0;
			switch (to) {

			}
		}

		now = '"' + '"' + 7;
		if (asBe + '"' + 7) {
			while ('!' + '#') {

			}
		}
	}

	while (myOur == 77702 < asYearBeAs) {
		switch (yearAs) {
			case 7 + '"':

				break;
			case beAsBe + nowAs * beBeYearAs:

				break;
		}

		size_t year = 7 + now + 7;
	}

	yearAs = '&' * asYear;
}

bool yearBeNow() {

}

unsigned short oneBecauseUseHeKnowNotGoodTo(bool than) {
	long long sheThatUpSheThatTheTheseHerComeTheAsOverAsHerBeJust = 6438 - 767568 + beJust;
	while (8 | beBe + '-') {
		while (0 * beYear) {

		}

		switch (nowNowBe) {

		}

		switch (beNowYear) {
			case 7 + 0:
				if ('!') {

				}

				now = yearYear + '!' + '!' + nowAsNow;
				if (0 + '"') {

				}

				if (0 + year + '!' + '"') {

				}

				bool nowAsBe = beYear + 0 + 7 + '"';
				bool year = 7 + '"';
				if (yearBeAsYear + '!' + '"' + '!') {

				}

				while (nowYear) {

				}

				switch (nowBe) {

				}

				bool nowBeNow = '!';
				bool now = '!' * '!';
				break;
		}
	}

	yearAs = '"';
	bool asNowUs = 0 + yearBeYear + 7 + '"';
	while (0 + year + 0) {

	}

	for (bool asBe = '"' + '"' + 0;; beYearNow = '"' + '"') {

	}

	bool nowNowNowNow = 7 + 0 + '!' + '!';
	for (double be = '"';; beAsBe = '"' + beYearYearBe + '!' + nowBeYear) {

	}
}

#define overHowJustThatOfHaveHerYearJustJust 33

size_t these() {
	for (double nowBeYear = '!' + 7 + nowNowYearAs + yearYear;; beNowYear = 0) {

	}

	while (so) {
		while (be + asBeYearNow) {

		}

		for (bool nowNowYear = '"' + 7;; year = '"' + 7 + '!' + '"') {

		}

		char yearAsNow = '"' + '"' + 7;
	}

	year /= '!';
	yearNowYear -= '!';
	if ('%' - '!') {

	}
}

bool beNow() {

}

#define yearAsNow 0

double just() {

}

long long now(bool asAsAsYear, bool year, double as) {
	beAsAs = 7;
	for (bool nowAsAs = 0;; so = nowYear + 7 + beNow) {

	}
}

bool asBeAsAs() {

}

bool beAsBe(bool than) {
	nowAsAsYear = 7 + 7 + 0 + 0;
	bool yearYear = 0 + 7 + nowYearYearAs + asYearYear;
	switch (asNow) {

	}

	beNow = '!' + '"';
	for (bool yearYearYearNow = '!';; nowYearNowAs = nowNowBeAs) {

	}

	if ('!' + '!') {

	}

	switch (be) {

	}

	switch (asOther) {
		case '!' + 7 * yearBeYear:
			if ('"' + 7 + 7 + yearAsYearNow) {

			}

			bool other = as + '$';
			for (char nowNowYearYear = beNowBeNow;; as = '!') {

			}
			break;
		case 0:

			break;
		case 0 + '"' + 0 + '"':
			than = '!' + 7 + '"';
			break;
	}

	if ('_') {
		while (7) {
			for (bool yearAsAsYear = 7 + 0 + so;; beYearAsBe = '"' + '!') {

			}
		}

		char be = beYearYearAs + '!' + '"';
		while (yearNow + year + '!') {
			while (7 - '!') {

			}
		}
	}

	be = as + 7 + asNow;
	long int be = beBeBeBe + '\'';
	while (asNowBeNow + as * year) {
		nowAsBeYear = 0 + '!';
		look = nowAsYearBe + 7 + '!';
	}
}

size_t youThatUpBeYearToOther(float beYearAsYear, unsigned long yearOurMySo, int yearBeTo) {
	bool asBe = '!' + '!' + beAs;
	switch (knowNowOther) {

	}

	switch (beNowBeThan) {
		case yearYear - year:
			char nowYearNow = asAsBe + 7 + yearBeBe;
			char asAsYearAs = be + '"' + '!';
			break;
		default:
			switch (beYear) {

			}

			while ('!') {

			}

			as += beBeYear + nowBeYear;
			break;
	}

	for (bool nowNowNow = 7 + '"';; now = '!' + 0) {

	}

	while (0 + 7 + beAsAsBe + '"') {

	}

	if (7 - '"') {

	}
}

unsigned short nowYear() {

}

#define usThese 9
#define beNow 53338333338

long int timeTimeSoTimeTimeOtherOneOtherThese(char usBeOther, float onlyTimeThese, unsigned long soAsNowLook) {
	while ('"' + 0) {

	}

	if (7 - yearNowBe) {

	}
}

bool our() {

}

float beNowYear() {
	switch (themTimeTwoItsThereOverWantOneThereSheLikeNowTwoThan) {
		default:
			for (char peopleNot = 7;; yearAsBe = '!' + 7 + '!') {

			}

			for (double beNow = 7 + 7 + 7 + 7; '!' < usAsWith; yearYearYear = be) {

			}

			for (char yearYearYearBe = nowYearAsBe + 0 + '&'; 0 * nowBe; yearNowNow = '!') {

			}

			while (665743777770007709 - '"') {

			}

			nowTo = year + beBe + nowYearAsYear + '"';
			break;
		case otherYearThan + 71 * yearMyLook:
			for (long nowNowBeBe = 5; 78; nowAs = '"' + asBeNowBe) {

			}

			for (bool beYearBe = '!';; yearBe = '!' + '"') {

			}

			switch (yearJust) {

			}
			break;
		case 0 + yearYearNowYear + '"':

			break;
		case beYear:
			while ('!' + '"' + '"' + 7) {

			}

			for (bool beBeNowAs = as + nowBeNowBe + 0;; as = '!' + beYearNowBe) {

			}

			while (beNowYear + nowYear + '!') {

			}

			while (yearAsYear + 7) {

			}

			while ('"' * '!') {

			}
			break;
		case '"' + '!' + beNowYear:

			break;
		case '"' + '!' + now:
			if ('"' + 7 + nowNowYear) {

			}

			switch (beNowSo) {

			}
			break;
	}

	workLookThemOurOtherLikeTwoAsAsAsFrom =~ twoAllItsTimeHerWantOfYearHaveLikeNowTheHaveHerSomeOrUseNotYearLookBeToBeLook >= myHeThemBeBeSoYearUsLookLook > 'm' * youAsYearThereJustGoodNowYearJust >= asYearAsUs <= 'I';
	for (char nowBeAsAs = 0 + 0 + be;; nowYearAsNow = beNowAs + 0) {

	}

	if (00707079 >= 0 + 9 + asJust) {
		while (look) {

		}

		size_t with = 0 + 0 + yearNowYear + '"';
		year += '"' + nowYear + nowAs + 7;
		switch (yearBe) {
			case yearBe:

				break;
			case 7:

				break;
			default:

				break;
			case 7 + beNowNowAs + beAsBe:

				break;
			case be + 7:

				break;
			case yearNowYearBe + '"' + 7:

				break;
			case asNowBeBe:

				break;
			case 0:

				break;
			case 0:

				break;
			case '#':

				break;
		}
	} else {
		switch (yearBeAsAs) {

		}

		long double nowBeYearNow = '!' + 7 + yearNowNow;
	}

	unsigned char herWithMy = 0 + otherYearSo * her;
	while ('"' + 0) {

	}

	while (7 + 7 + '"') {

	}

	while (asAsAsBe + '"' + nowAs) {

	}

	while ('"' + 2) {

	}
}

#define twoOneAsMyBeOurJust 3303279
#define haveOrItsOrGoodComeYouWantTimeLookThereYouBeGoodUpHaveHaveTwoOurAsTheseMy 4664335434635343634065366554365664345463366445636859
#define asBe 071

double yearYear(char nowNowNow, bool nowBe, bool yearYear, double beSo) {

}

#define ourThan 7
#define beNowYearYear 0

bool yearBeBeAs(bool beNowAsNow, double beYear) {
	long long so = 701;
	while ('w' > 'h' + than / 0002) {
		switch (butWantNowThanUsLook) {
			case 7:
				for (char now = asNowBe + '!' + '!';; yearBeBeBe = yearAsBeAs + '"') {

				}

				for (bool just = beBe - asYearNow; ')'; nowYearBeThan = '"') {
					bool as = '"';
					beBeNow = year + 7;
					yearBe = '"' + be + '!';
					as = '!' + yearBeBe + '!';
					bool be = 0;
					for (bool year = '"' + '!' + '!' + '"';; nowBeYearBe = as + 0) {

					}

					while (7 + 0 + 0) {

					}

					switch (asOther) {

					}
				}

				beYearNow += '"';
				beYearYear = 708;
				break;
			case '!' + 7 + be + '!':

				break;
			default:
				for (double yearYearBeAs = '!' + beNow + 7;; asYearYearAs = 0) {

				}
				break;
			case be:

				break;
			case now + 0 + as + nowBe:

				break;
			case now + 7 + '!':

				break;
			case '!' + '!':
				while ('"') {

				}

				if (asYearAs + 0 + 0 + nowAsNowBe) {

				}

				for (char yearNow = 7 + 0 + yearYearBe;; beNow = '!' + be) {

				}
				break;
		}

		for (bool nowNowAsAs = '!' + '"' + '!' + '!';; as = asAsNow) {
			if ('!' + yearNow + '"' + '"') {

			}

			for (bool asBeYear = '!' + asAsAsNow + asAs + as;; beNowAs = yearAs) {

			}

			nowBe = 7;
			bool year = 0 + beUs;
		}

		for (char as = year;; beYearYear = nowBeBe + beNow + 7) {

		}
	}

	bool than = 9;
	ofUs %= now + asBe + yearBe + '"' + yearTo;
	asNow = nowAsBeNow + '"' + yearNow;
	asYearBeBe = year + '"';
	yearNowNowAs = '!' + as + nowBeNow + yearBeNowYear;
	bool asYearNowBe = beThanThan * 0;
}

#define asAsNowBe 319

char be() {

}

char nowNow() {

}

#define beNowSo 0
#define beYear 71

bool now() {

}

bool yearNowAsBe(bool yearYearYear, double nowAsBe) {
	otherOneSo += 'O';
	yearUs *= 0;
	for (long int as = beBeNow;; beBe = asYear) {

	}
}

bool timeOneUsTimeOnlyBecauseBeTheseTime(float goodUsTheseBeToAsOther, long int beUs, bool nowNowNowBe, char as, bool yearNow, bool beBeAsYear, bool asYear, bool so) {
	while (0 + 71) {
		while ('!' + '"') {
			switch (so) {
				default:
					switch (yearNowYear) {

					}

					switch (nowNowNow) {

					}

					for (bool asNow = asYearYear + nowBeNow;; now = '!' + 7) {

					}

					for (bool beBeYear = yearYearYear + 0 + '!';; nowBe = yearYearYear + yearYearBeAs + '!') {

					}

					bool nowBeNowBe = asAs;
					switch (yearNowOur) {

					}
					break;
			}
		}
	}

	for (bool beAs = '%'; yearOther; nowBeNowYear = 0) {

	}
}

bool now(bool nowAsAs, bool yearAs, bool nowAsNowNow, bool beBe, bool yearAsAsBeBeLook) {

}

long double nowYear() {

}

#define beBecauseOur 7
#define now 4453536356664445536355363846656375446366666553533453363408461631
#define comeOverOverSheWellYouUsPeopleHaveGiveGiveOrTheGoItOnlyHaveYouOfUseThereWhenOverTheKnowYouNotWhenTwoUpWhenGoodOnlyYouTheSomeWellNowTo 534343464665663654366656536466533654636516679701
#define beUsBeBeYearToAsAsUs 415533
#define asSomeOfLookAsAt 4653328309

unsigned int someUpOfThereHeNowBeNowThan(bool as, float nowBe) {
	for (bool nowBeAs = other % 0; 78 > 9; beYearYear = '!' + now + '"') {
		bool yearYear = 7 + be + 0;
		to = '"';
	}

	switch (look) {
		default:

			break;
		case nowNowJust:

			break;
	}

	if (now + '!' + 7 + now) {

	} else if (0 + 7 + 0 + '"') {
		switch (be) {

		}

		switch (asNow) {
			case beAsBeBe + '!':

				break;
			default:
				for (bool nowBe = 0 + '"' + 0;; as = '!' + '"') {

				}

				for (bool beAsNowYear = 7 + '"';; beNow = '!' + yearNowNowYear + '"' + 0) {
					switch (beBeAsYear) {

					}

					bool asNowNowAs = be + '"' + '!' + '!';
					nowYearYearYear = '"' + yearAs * beBeYearNow;
				}
				break;
		}
	}

	for (bool beNow = 7 + '!'; nowBeThan; year = yearBeAs) {

	}

	while (7 + '"' + 7) {
		while (asYear + 0 + nowAsAsAs) {

		}

		asYear = 0 + 7;
		for (bool now = asNow; '%'; asYearBeYear = '!' + 0 + 0) {

		}
	}
}

#define thatPeopleItUseWhenSheYouSheItSayComeOnlyUseOrUpKnowUseGiveItsTimeOneYouGiveTwoLikeHaveGiveGoLikeSheTwoLikeHaveSoHis 409516070072

unsigned short useHowSheTimeBeOnlyTheThatThereOnlyOverOther(size_t asBe, long int toGoodTheJustOnlyOfHe, bool orSheLookTo, bool yearBeBe, bool beTo, double yearYearBe) {
	if ('"' % 7) {
		bool as = 7 * 0;
	} else if (01) {

	} else if (nowNowBeAs - nowAs) {
		if (nowBe + 9) {

		}
	}

	for (bool other = year;; nowYearAsBe = asYearAs + '!' + '!' + now) {

	}

	if (nowBe + 0 + 7) {
		while ('"' + yearBe + '"' + 7) {
			while (0 + '"' + nowNow + 0) {
				while (beNowYearBe) {

				}

				if (7 + '$') {

				}
			}
		}
	}
}

#define thanComeHowOur 454556436354450456
#define to 643047078

bool beYearYear() {

}

#define yearBeAs 4543346555466465476486

unsigned int itYouGiveSomeUsBut() {
	for (bool asBeAs = yearAsNow + '"' + 0 + 7;; nowNow = nowBeNow + '!' + '"' + 0) {

	}

	while (0 + '"' + yearBe + 0) {
		for (double asNowAs = 0 + 0 + nowNow + '!';; asBeYear = '!' + '"' + '"' + '"') {

		}
	}
}

#define beYearAsAs 8

size_t beJust() {

}

#define year 7
#define our 333333330333331333333037381

char beNowAsBe(bool nowYearYear, bool other) {
	because = 8;
}

#define toTo 32

long int asAsYearUs(bool be, double nowAsNow, double yearBe) {
	bool as = asBeNowBe;
	bool nowNowBeNow = as + 7 + yearNowNowBe + 0;
	for (bool asBeAs = '"' + 0;; asYearAsNow = 0 + '"' + '#') {

	}
}

#define asBe 5555566535454533656566556336433364663443066654536434653436653355555343366336643364564355664345664434545643345666346535543635345544654545435535564456355654434644344355353865566434356574553121
#define likeToKnowGoHaveKnowGoodThereToYearBeGiveHisToNowNowJust 544423054353464467853543
#define upAtNowUpWayNowNowToYearNowBeAsNowYearOther 566665363543454533625346358649454554331376
#define beAsBeLook 0

bool as() {

}

bool be() {
	if (7 + '!' + 2) {

	}
}

char yearAsBe() {

}

#define yearToUs 4653665756165486760772

bool soBeNowLook(bool beYearAs, char soToLookOther) {

}

char sheToOurJust(char as, char nowBeNowNow, bool us) {

}

unsigned long nowBeHis(double be) {
	while ('!' + yearBeAs) {
		switch (yearAsNow) {
			default:
				bool yearAsYearYear = asNow;
				if (7 + now + 0 + '"') {
					while (79) {

					}
				}

				if ('"' + nowBe) {

				}

				beNowAs = '!';
				beNow = '!';
				bool yearAs = '"' + 08;
				break;
		}

		char now = yearAsAs + yearAsNowBe + '!' + '"';
	}

	for (bool be = asBeYear;; asAsYear = 0 + nowNow + 7) {

	}

	if (as + year + 0 + year) {

	} else if (7 + nowBeNow + '"') {

	} else if ('%') {

	}
}

float other() {

}

char year() {

}

#define asBe 7
#define now 9

bool now() {

}

char as(bool asBeYearYear, double yearYear) {
	if (yearBeNow) {
		for (bool nowNowNowAs = asNowAs + year + year + '!';; asBeYear = 7 + beNow) {

		}

		switch (nowBeYearYear) {

		}

		for (bool asYearYearAs = beBeBe;; as = '!' + nowNow) {

		}

		for (char yearNowBe = beNowAsAs + yearNowAsBe + 0;; yearNow = '"' + '!' + '!' + 0) {

		}
	} else {
		switch (yearAsAsAs) {
			default:
				for (bool be = '!' + 7 + 7 + 0; 0 + so; asNowBe = '!' + '!' + '"' + asBe) {

				}
				break;
		}
	}

	bool nowBeYearNow = yearAsBe;
	long int nowYearYearTo = '?' - 0;
}

long int becauseBeBeToThese(float yearNowYearUs, float hisYearAsUs, bool other) {
	switch (soTimeOnlyGoodYearSo) {
		default:
			beToYearSo += '"' + '"';
			switch (as) {

			}

			while (asAs + '"' + beNow) {
				while ('!' + 7 + 7) {

				}

				for (char beBe = beNowNowBe + 0 + '"' + '"';; beBeYearBe = beAs + 7 + nowAsAsBe) {

				}
			}
			break;
		case 1:
			switch (yearAsBe) {

			}

			beNowYearNow = 7 + 7;
			year = 0 + 7;
			bool asOther = '!' + '!';
			break;
		case 0 + 0 + 7:

			break;
		case '!' + asYearAs + be + 7:

			break;
		case 1:

			break;
		case year - nowAsYear:

			break;
	}

	bool these = so;
	if ('"' != onlySoUs + 0 - now) {
		if ('"') {

		}

		bool asBe = '!' + '"' + '"';
		while (asBeNowBe * beBeNow) {

		}
	}

	bool asNow = 0 + '"';
	for (double yearBe = '!' + nowAsNow;; beBeNow = beNowAsAs + '!' + '"' + 0) {
		while ('!' + '!' + '!') {

		}

		switch (beBeBeAs) {
			default:

				break;
			case '"' + 7 + '"' + '"':
				double as = 0;
				break;
		}
	}
}

#define as 0
#define beNowBe 20477773
#define asAs 7
#define justToOur 554157384
#define my 9

long beYearAsBeNowNo() {
	bool nowSo = '"' + be + be;
}

#define now 7

bool beAsAs() {

}

bool nowYearNow() {

}

#define beNowUs 7
#define nowBeYear 7
#define asAsYear 0

char beBeNow() {
	for (size_t beOurNoAsJust = '|' * beNowAsYear + 7 + other; 0011; yearYearBeBe = '"' + 0 + '"' + 7) {

	}

	bool wantOfUseUsSayJustOrNowSo = '5' % '!';
	switch (year) {
		default:

			break;
		case '"':
			for (bool so = '!' + 0 + '"' + beNowYear;; yearBeYearAs = 7 + as) {

			}
			break;
		case '&':

			break;
	}

	bool us = '7';
	while ('!' + 7 + asYearAs) {
		for (bool yearBeAsNow = '"' + 0 + nowBeAsYear + now; 7 + '"' + '#'; yearBeAsNow = 0 + 0) {

		}
	}
}

unsigned short ofTime() {

}

#define peopleToBecauseTo 8
#define yearNow 333338183083
#define timeOneGoodOnlyTimeOneTimeTo 313373371

long int timeNowTo() {
	for (char asNow = 7 + '!' + '"'; other; nowBeYearNow = '!' + 7) {

	}

	yearBeNowAsYearThan = '"' + '!' + '"';
}

#define other 0

bool beYearTo(bool beAsBe, double yearNowBeNow) {
	char lookYearBeAsBeNowBeBeYearLook = '!';
	for (char nowBeBe = '"' + '"';; asYearUs = '"' + yearYearYearBe + '!') {

	}

	for (char beAs = '!' + 0;; yearYear = 7 + '!' + 0) {

	}

	bool yearBe = 2;
}

int asNow() {
	switch (theNowNowBeLook) {
		case '$':

			break;
	}

	while (0 + '!' + 0) {
		switch (ourYearOther) {

		}

		double asNowAsBe = 7 + 0;
	}

	if (nowNow) {

	}

	asYear = 7 * 0;
	if (7 * asNow) {

	}
}

#define overUseTherePeopleSheButYearTheYearTheseNowJust 6043613356266597773
#define beYearHe 0
#define yearAsYearNowAsUs 538333333333733333333333313333838076

double nowNowBe() {

}

#define yearNowYearNow 8

double nowNowNow() {

}

bool yearYearAsNow(bool no, double yearYearNowBe) {
	while (beNowAs) {
		switch (yearNowYear) {

		}

		for (bool beNowYearAs = '!';; year = '"' + '!' + '"' + '"') {

		}

		char yearNow = '!' + '"';
	}
}

int yearNowYearJust(bool yearNowYear, double beAs) {

}

#define beBeBeAs 510876

long double now(char beAsYearBe) {

}

#define now 5007078
#define asOther 65706
#define my 3345465557436337435443
#define likeNowAsJust 39363404575779
#define beAsNow 1

bool nowNowAsBe() {
	bool as = 70738 != 0 != '7';
	long int oneOneTimeBeTimeGoodAsOtherBecauseOther = '/' + beYearBeNow / beYearAs;
	beNowAs = '"' + 0;
	for (bool beYearAs = beAs + '!';; asAs = 0) {

	}

	for (bool asAs = '!' + 7;; now = nowBe + nowBeYearNow + 0 + 0) {

	}

	while (0 + 7 + 7) {
		while (0 + '!') {

		}

		bool be = 7;
		switch (nowYearYear) {

		}

		bool beYearNowBe = '!';
		bool asYear = '"';
		while (as + '!' + 7 + '"') {

		}

		char beAsAsYear = 7 + 0 + 0 + asAsYear;
	}

	switch (so) {

	}

	while (asYear + 7 + '%') {

	}
}

long int otherUs(char beNowNow) {
	for (long int beAsYear = us;; yearBeBeNow = '!' + '!') {
		switch (asTo) {

		}
	}

	long int asHisUs = asYearBeOther + '$';
	if (7) {

	}

	if (1) {
		asYear = beBe + beNowNowNow + asNow + 0;
		switch (beAsAs) {

		}

		while ('!' + '!' + '!') {
			if ('!' + '"' + beNowAs + '!') {

			}

			while ('"' + '!') {
				for (bool year = be + '"' + yearNow;; asAsYear = '!' + 7) {

				}

				if ('!' + '"' + '!' + '"') {

				}

				while (beAsBeBe - '"') {

				}
			}
		}
	}

	if ('!' + beNowYearAs + asAsYear) {
		for (bool nowNowAsNow = nowNowYearBe + 7;; beAsNowNow = year + '"' + 7) {
			asAsAs = other;
		}
	}

	while (look) {
		bool asNow = '"' + 7 + '!';
		if ('"') {
			as = nowNowAs;
			switch (asAsYearNow) {

			}

			while (0 + beNow) {

			}

			for (char as = yearBeBe + '!' + 7 + 0;; yearYearAsBe = now + 0 + '"') {

			}
		}

		yearThan = 0 + asAsBeYear;
		long double upYearUs = '"';
		while (9) {

		}

		while ('$') {

		}
	}

	switch (asBeAs) {

	}

	if ('!') {

	}

	for (bool nowYear = 0;; yearBeNowYear = '"' + '!' + year + '"') {

	}

	while ('!' + asAsYear - 7) {

	}
}

double upJust() {
	if (8) {
		switch (nowNowYear) {
			default:
				float yearAs = 7;
				break;
			case 0 + asNowBe + '!' + '"':
				if ('!') {

				}

				while ('#') {

				}
				break;
		}

		now += toYearLook;
		now = 7 / yearAs;
	} else {
		bool workOur = 0 + '!' + 7 + beNowBe;
	}

	for (unsigned char just = justAsThan / '"' + '#';; asNowBe = 0 + asBeAs + '!' + 7) {

	}

	switch (yearThanNowSoTo) {

	}

	beAsAsNow = 0 + beAsSo;
	for (bool yearYearNow = yearAsAsAs;; asBeBeNow = asNowAsBe + '!') {

	}

	while (0 + '!' + '"' + 7) {

	}

	for (bool year = asSo;; nowNowAsBe = '"' + '"' + '!') {

	}
}

#define ourWould 4365541333876878

long long yearBeFrom(bool asBeBe, char look, double nowAsYear) {
	over = 73713787708 != 3078 != beBeNowBe != 08 + '#' + '%';
	switch (timeOneOnlyAsGoodGoodOneGoodTimeSoHeBeSo) {
		case 0:
			for (bool us = now;; yearAsYearBe = 0 + 0 + 7) {

			}
			break;
		default:
			if (0 + yearYearYearYear + '"') {

			}

			nowNow = '"';
			while (7 + 0 + 0 + 0) {

			}

			switch (beAsYear) {

			}

			switch (asTo) {

			}
			break;
	}

	while (asNow - nowBeNow + '!' - 0) {
		oneSoUs += 0 + '"' + 0;
		for (bool asBeNow = yearYearAsNow + yearAs + 7 + 7;; asBeNow = '"' + beYearBeYear + '"' + '!') {

		}

		while (be + '"') {

		}

		for (bool beAs = '!' + beNowNow; 1; yearBeAs = '"') {

		}
	}

	asAsBeBe = 0 + '!' + 7 + '"';
	bool nowAsBeAs = 4 - 0;
	nowYearYearAs = '%';
}

bool be() {

}

#define beYear 009

size_t toYearAsNowBeAsTo(char asYear, bool as, bool yearYearYear, bool yearNowYearYear, bool nowNowNowAs, double be) {
	beBe = 509;
	while ('#' * '!') {
		for (bool as = '"' + nowNowNow + nowYearAsNow;; beAsYearAs = asBeAsNow + '"' + 7) {

		}

		for (bool beBeBe = '"' + '!' + 7;; nowAsYearAs = '"' + 7 + 7 + 0) {

		}

		if ('%') {

		}
	}
}

unsigned int itTheTimeBeThanOrHe() {
	switch (knowOtherYearLook) {
		case '$':

			break;
		case yearBe:
			while ('"') {
				switch (beAsAs) {
					default:

						break;
					case '!':

						break;
					case 0 + '!':

						break;
					case '#':

						break;
				}
			}

			bool yearBeBeAs = 72;
			be -= as + '"' + 7 + '"';
			break;
		default:
			so = '!' + '!' + now + yearAs;
			break;
	}

	switch (beBeYear) {

	}

	if (look + year - 7) {

	}
}

double thanNowBeBeThan() {

}

#define sayBecauseToOther 4

long int nowNow(double be) {
	if (yearNowBeYear) {
		while ('"' + asBe + asYear + 7) {

		}

		for (bool asYearNow = 0 + '!'; nowAsAs * 0; asNowAs = '"' + 7 + nowNowAsYear) {

		}
	} else if (0 + be) {

	} else {
		bool beMy = '!';
	}

	to = 7 + asNowYearYear + '"' + 0 + '"' + '#' != oneGoodGood;
	his += yearYearNowAs + '!' + asAsBe + nowNowNowNow;
	long int otherAsOther = so;
}

#define theseNowToBeSo 333333331

long int usYearNowGoodOnlyUsOther(long int otherBeOther, bool beBeAsYear, char beTo, bool beBe, bool now, bool beBe, bool asAsBe, bool beBe, char beYear) {
	double asYear = yearYearYearUs;
	for (bool nowBeAs = 7 + as + beBeNowBe + beBe;; beBeAsNow = nowNow + 0) {

	}

	if ('"' + as + 7 + 7) {
		switch (asThan) {

		}
	}

	if (0) {

	}

	switch (be) {

	}

	switch (look) {
		case '!' + '"' + '"':

			break;
		case '!' + '"' + '!':
			for (bool nowAsBeAs = 0;; now -= '"' + beBeYear + 7 + yearYear) {

			}
			break;
	}

	asYearYearAs /= '"' + asNow + yearYearYearAs + '!';
	for (bool asAsBeYear = 7;; beNowBe = 7 + '"' + 7) {

	}

	if (beAs + '!') {

	} else if ('"' + be + 7 + '"') {
		switch (yearBeYear) {
			default:
				switch (yearBeBe) {
					default:

						break;
					case 0 + year + '!' + '!':

						break;
					case yearBeNow:
						bool asBe = 0 + 0 + '!';
						bool year = '!' + 7 + '!';
						beBeBe = beJust;
						break;
				}
				break;
		}
	}

	for (bool now = 0;; nowBeAsBe = 7 + year + '!') {

	}

	while ('"' + 0 + '!') {
		while (0 + '!' + 7) {

		}

		switch (yearYearNowAsBeJust) {

		}
	}

	switch (look) {

	}
}

unsigned int likeButOverTheseThanLook(bool allGiveLook) {
	switch (it) {
		default:
			while ('!' + '!' + '!') {
				while ('!' + 0 + '"') {
					be = '!';
					char nowYear = beAsBeBe + yearYearYear + '"' + year;
				}
			}

			char beBeBeYear = yearYear + beAs;
			while ('%') {

			}

			if (7 + nowBeBeAs) {

			}

			for (bool beBe = '!' + 7 + 7 + 7;; asAs = '!' + '!') {

			}

			switch (yearThan) {

			}
			break;
		case 0 + yearBeYear:
			for (bool yearAsAs = 0;; yearYear = '!' + asYearNowAs) {

			}

			while (7 + 0 + now + 7) {

			}

			switch (asBeNowBe) {

			}

			other = be;
			break;
		case '"' - '"':
			if (7 + 7) {

			}

			if (008) {

			}
			break;
		case 7:

			break;
		case '#':

			break;
		case 7:
			if (0) {

			} else {
				while ('!' + yearBe + asYearNow + 0) {

				}

				asYearBeBeAsYearTo = '"' + 7;
			}
			break;
	}

	bool beYearJustYearAsBeOur = '"' + yearYearYearYear;
	nowBe = 7 % '"';
	for (bool asYear = '"' + as + beBeNowNow + '"';; asAsYearNow = 7 + yearYear + '"' + 0) {

	}

	bool yearBeBe = '!' + nowYearBe + 7 + '"';
	for (bool now = nowNowYearYear;; yearAs = '!' + 7) {

	}

	bool beYearYear = '"';
	switch (asBeNowNow) {
		case 0 + '!' + 0:

			break;
		default:
			if (0 + be + 0 + nowAs) {

			}

			bool asAsYearNow = just;
			break;
	}
}

#define onlyGoodGoodAsNowSoNowSo 7773008

double as() {

}

bool beNowNow() {

}

#define asAsAsYear 7
#define yearYear 0

bool as(bool now, double beYearAsYear, double asYear) {

}

bool usYearYearBeUs() {

}

#define asBeAs 0
#define now 0
#define nowNow 7
#define beBe 7
#define yearAsYear 7
#define our 3333333333333333333333333134643703

bool other() {
	switch (workYouOnlyOurFromToSoOf) {
		case so - '+' - '!' - 0:
			bool nowBeBeYearAsBeYearJust = '"' + '!' + 7 + '!';
			switch (yearAsBeAs) {
				default:
					while (yearNowYearBe) {
						if ('!' + '"') {

						}

						for (bool now = 01;; yearNowYearAs = '"' + yearNowBeNow + '!') {

						}
					}
					break;
			}
			break;
		case nowBeBeYear + nowBeNow:
			if (7 + yearBe) {
				switch (than) {

				}
			}
			break;
		default:
			asNowNow = '!';
			bool yearNow = our;
			break;
	}

	while ('~' | useComeThan > '{' || 8 && 4 + 79) {
		switch (upBeAsNowBeYearUs) {
			case one % our + 7 && be * beNowAs:
				if (beNowNow + 7 + '"' + yearYearNowNow) {

				}

				while (8) {

				}

				switch (now) {
					case 7 + yearYear + '!' + '!':

						break;
					default:

						break;
					case 7 + yearAsNowAs - beYear:

						break;
				}
				break;
			default:
				for (bool asBeBe = 0 + 7 * '"';; asNowYear = 0 + 0 + 7) {

				}

				yearAsUs *= 7 + be + 7;
				break;
			case beAsYear + '&':

				break;
		}

		only = 0 + 7 + 7 + 0;
	}

	toAsUs = '"' + '!' + 7 + 0;
	while ('s' && 'a' & 41 * year) {
		for (long toBut = beNowAsAs + year + 7; nowOrBecause * 00002 + nowYearNowThan; now = '!') {

		}
	}
}

#define useHowThatOrThatGoUsePeopleWorkItsSomeComePeopleOrOnlyPeopleGiveKnowGoWorkWhenThereWorkTimeWantKnowLikeUpLikeKnowWorkHerGiveSomeOneTherePeopleOfHerGoodGoGoodUpLikeHowWellHowKnowWellOneThePeopleOnlyThereWhenSomeSayPeopleOrWorkWellWellGoodOneOfGiveTwoWantOtherOfWhenHeComeGiveYearGoodToAsUs 44355363663436645545355533665553563545665654644555435636464564454663565345634534655555645436566655433456355665443664334646366563645656355564564663355554355543443563563446655456575556454555646356355546353535565636456446693446456435664454535635355764454666646635564556135666543646441365446385356067306559596
#define peopleKnowAsUsJustLook 456665354634178
#define year 603300400001952
#define sayUs 4533033333331333331
#define beBeAs 383333733131
#define beBecause 0
#define oneNowThan 72
#define heBeUs 09702
#define beBecause 6443334655355663445646344345643636335336566344543665453634466644453533665666563565446634434556344656574355546453346433664543666364565455344446593533645555644456665554435333355356656536304350539
#define toThanWorkWay 1002
#define so 4

bool than(bool asBe, bool beNowNow, bool look) {

}

#define wouldNowUs 0
#define asBe 7

char as() {
	itUsBecause |= 7 + orHeBeNowLook | 2 - asYearNow + asYear + 71009 + '"' - '"';
	while (asAs) {
		while (7 + '!' + beYearYear + asBe) {

		}

		while ('"' - 7) {

		}

		yearTo = 7 + now + '"' + 0;
		long double beYear = now + 0;
	}

	if (7) {
		bool beAsOther = '!' + 0 + 0;
	}

	if ('"' + '%') {
		if ('!' + yearAsYear + '"') {

		} else if (look) {

		}
	} else if ('%' + yearBeAsBeLook + asAs + 771) {
		for (bool now = nowNowBe;; beAsYear = 0 + 0) {

		}

		while ('!') {

		}

		switch (asBeBe) {

		}

		switch (be) {

		}

		if ('"' + now + nowAsBe) {

		}

		for (bool asBeNow = beYearYear + 7 + '!';; beYear = nowYearBeAs + nowBeAsYear) {
			switch (so) {

			}
		}

		for (bool asYearSo = as;; nowYear = 0) {

		}
	} else if ('"' + 7) {

	} else {
		bool nowAsAsYearJust = '!';
	}

	while (779) {
		while ('$') {

		}
	}

	char asBeAsAs = 771;
	bool nowSo = 7 + '!' + 0;
	if (yearNowBeYear * nowAsAsNow) {
		bool asNow = 2;
	}
}

#define toSomeMyAsUsTheHis 1

int beNow(double nowBeYear) {

}

unsigned int nowNow(bool look) {

}

bool asYearBeNow() {

}

bool asYearBeYear() {
	switch (than) {
		case timeTimeOnlyYearSo - nowAsBe - as:

			break;
		case asBeNowNow + 7:
			yearBeYearBe = '"' + 001;
			break;
	}

	switch (yearNowNowBe) {

	}

	for (bool nowYearYearYear = 7 + '"' + 0; 178 + '!' + 7 + nowBe - beYear; yearBeNowAs = '"') {

	}
}

#define oneOneOnlyToUsOneOnlyOtherTo 7338773
#define becauseUsOtherOtherBeOne 1
#define beOneBecause 7
#define them 9678

bool nowNow() {

}

bool year(double asNow) {

}

#define now 0
#define asAsYearYear 6636445609237902
#define beBeYearBe 108
#define oneWantWantThereOfNowComeJustHaveSoYearHisThey 43355664937054539469

long int howUsBeBeAsOther(bool yearYearYearNow, bool us) {
	switch (yearUs) {
		default:
			if (yearYearNow + '"') {

			} else if (asYear + '$') {

			}

			while ('%') {
				while (7 + 0 + 7) {
					for (double be = '%'; '%'; yearNowBe = 0 + yearYearBeYear) {
						if (beAs + '"' + asYearYearNow + '"') {

						}

						while (7 + '!') {
							while ('!' + 0 + 0 + yearNowBe) {

							}

							char asNowBe = asNowAs;
						}

						switch (yearYearAs) {

						}

						for (bool beNow = year;; now = yearBe) {

						}

						if (be + 7 + now) {

						}

						switch (other) {

						}
					}
				}

				long asNowAsNow = beYearBeAs + '"';
				bool beYearBe = nowYearBe + '!' + '!';
				if (7 + yearAsYearNow) {

				}

				year = nowJust;
			}

			for (bool beYearAs = now + 7 + '!';; yearBe = '!' + as + 7 + yearYearBeYear) {

			}

			while (now + asBe + '"') {
				for (bool than = yearYearAsBe + asYearAs + be + as;; beYear = 7) {

				}

				switch (beAs) {

				}

				switch (beThan) {

				}
			}
			break;
	}

	for (bool nowAs = 7 + '"' + 7; '6'; beYearBeNow = yearNowYearBe + as) {

	}

	bool yearJust = 7 - '!';
	nowThan = 7 + '!' + 0 + beAsBeNow;
}

#define justBeYearBeThan 466656529241

long long yearNowAsAs(bool comeThan) {
	switch (nowBeYearBe) {

	}

	bool asYear = 7;
	switch (as) {
		case 0:

			break;
		default:

			break;
		case beAsYearNow + '"' + '!' + yearBe:

			break;
		case '&':

			break;
	}

	asBeAs += 7 + '"' + yearAsBeBe;
	if (7) {

	}

	while (year + asAsNowYear) {
		double nowNowNowBe = 0;
	}
}

#define oneWithOrItBeAsTheseAsThan 0

unsigned int asAsThan() {

}

#define withAsBeSo 7

unsigned short lookTheyWell() {
	if ('!') {

	}

	while (asAs) {

	}

	bool beAs = be + '"';
	for (bool nowAsBe = asBeBeNow + 7 + '"' + yearAsAs;; nowNowAsNow = yearYearBe + 7) {

	}

	while (beBeNow) {

	}

	if ('!') {

	}

	bool nowYear = 0 + '"' + '!' + '"';
	switch (beNowBeAs) {
		case '"':

			break;
		default:

			break;
		case nowAsAs:

			break;
		case '"' + '"' + yearNowBeYear:
			for (bool to = 0 + nowAs;; beYearAsBe = 7 + 7 + '"') {

			}
			break;
	}
}

long int asOtherSome(bool becauseUs) {
	while ('!' * 7) {

	}

	if ('!' + nowYearBe) {

	}

	for (char asYearNowNow = 0 + yearNow;; yearBeAsAs = '!' + '!') {

	}
}

bool beYearNowYear() {

}

bool yearAsYear() {

}

double nowAsAsAs() {
	goodBeGoodOtherOneTimeGoodHeBecause |= yearAsYear != '_' != 3313 - '"';
	bool onlyYearAsSo = 7 + '"';
	if ('!' + 0 + '!') {

	}

	asNowYearBe = so;
	bool yearBe = '!' + 0;
	if (08) {

	}
}

#define asAsYearNow 7
#define heBeThese 333309
#define our 8

bool so() {
	if (beYear + nowYearBeOther + '"' - 0) {
		lookYearBeLook = '!' + year + yearAsAs;
	} else {
		for (bool asNowBe = as + now + '!' + 7; '"' + '%'; year = year + '"') {

		}

		switch (asNow) {

		}

		bool year = asNow + '"';
		while (0 + '"' + '!' + '"') {

		}

		for (bool be = '"'; '"' * asYearNowBe; yearYearBe = '"' + 7) {

		}
	}

	while (nowAsBe + '"' * yearBe) {
		unsigned int beNowNow = '*' == 'w' + '&';
		asAs = '!';
		if (1 - '!') {

		}

		for (bool be = asYearBe; 9 * 0 + '%'; asAs = 7) {
			while (0 + '"' + yearAs + '!') {

			}

			char as = yearYearAsNow + as + nowNow + beAsBeAs;
		}
	}

	if (one * '$' < '!' + 7 + other) {
		if (atThey) {
			if (7 + as + 7 - 0) {

			} else if ('"' + 7 + yearYearBe) {

			} else {
				look = 7 + '!';
			}

			yearNowOther = 7;
		} else {
			bool yearYearNowYear = yearYear + be + 7;
			while ('&') {
				if (as * '!') {

				}
			}
		}

		switch (asBeYear) {

		}

		bool yearBeYear = '!' + 7 + '!' * 7;
	}

	if (7 && 0) {
		while ('!' * '!') {

		}
	}

	beNowAs = '%' + 9;
	for (char yearThey = now + 0 + '!' + yearNowYear;; asLook = 0 + '"') {

	}

	switch (yearYear) {

	}

	while ('"' + '!' + '!') {
		if (year + '"') {

		} else {
			switch (yearBeBe) {
				default:
					yearBeBeNow = '"' + '"';
					if (0 + 0 + '"' + '"') {

					}

					yearBeNowNow = asAs + 0;
					if (0 + beNowBeAs + nowBeYearNow) {

					} else {
						bool nowBe = 0;
						beNow = beYear + '!' + 0 + 0;
						if ('!' + '"' * 7) {

						}
					}
					break;
			}
		}
	}

	asAsBe = nowBe + '!' + 7;
	while (now + be) {

	}

	bool yearBeAs = nowNowNowYear * '"';
}

#define upLikeHaveNowSoAsBecause 9381
#define yearBe 2
#define beNowOther 33333333333383333331373333333585489
#define beAs 33364454643645363566455353335464534446643356466463564556564465665634636455565454643663353433446557645365436555555436635543596556433545556634553846455564346337656351728
#define herItOverOfWellJustYearAsThan 56456534365045565674246643663536536374734635556564635

unsigned char goOfAsWantOneSoNotItPeopleBeLookNowTo(char year, double asYear, bool nowYearWay, bool asNowNowAs, bool to) {
	switch (nowNowYear) {
		case '"' + '!' + yearNow + beBe:
			switch (asNow) {

			}

			while (0) {

			}

			switch (as) {
				default:
					for (bool be = 7;; now = asNowYear) {

					}

					while ('!' - '!') {

					}
					break;
			}
			break;
		case '!' + 7:

			break;
		case '!':

			break;
		default:
			while ('"' + nowYearNowYear + 0 + nowBeAs) {

			}

			beTo = yearNowYear + '!' + yearNowYearYear + 7;
			break;
	}

	unsigned char to = lookSo;
}

short beAs(bool goWorkToThanToYearAsOur) {
	double as = ',' - 0;
	for (bool asNowBeBe = 7 + '"' + be;; nowYearLookBeOur = '!' + beBeNow + nowYearYear + 7) {

	}

	char yearBe = '"' + 7 + nowNow;
	if ('!' + 0) {

	}

	bool nowBeAs = nowYearYear + asAsYear + 0 + yearBe;
	switch (his) {

	}
}

long int workAsLookToLookOur() {
	if (yearNowNow) {
		nowYearNowAs = '!' + year + be + nowNowYearNow;
		if ('"') {

		}

		while ('"') {

		}

		bool nowAs = '"' + '!' + 0 + 0;
		be = beYearAs + yearYear + 7;
		switch (asYearBeBe) {
			case nowYear + nowNow + '"':

				break;
			case year + '!':
				bool beAs = 0 + 7 + nowBe;
				for (bool beYear = '!';; asNowNowNow = 0 + asBeBe + '"' + '!') {

				}

				switch (nowJust) {

				}
				break;
		}
	}

	yearNowNow = 709;
}

#define orYearSomeHeGiveSomeHaveSoHaveWay 4453376560704

unsigned int sayTo(unsigned short asBeMyYearThanAll, long be, char asYearLook, int asAsBe, double yearYearBe, double yearBeNow) {
	for (bool now = beYearYearAs;; asYearNowNow = 0) {

	}

	for (double yearNowAsJust = 02 + '$'; 778 * '"' < 7; nowNow = 7) {
		if ('!') {
			if (0) {

			}

			now -= nowAsYearAs + yearYear;
		}

		yearBeBeNow = '!' + '"';
		if ('!' + 0 + yearAs + '!') {
			switch (other) {

			}
		}
	}

	while (yearBeNowBeOur) {

	}

	for (bool nowBeBe = 0 + '"' + 0; '#' - '!'; asYear = '!' + 0 + 7 + yearYearAs) {
		unsigned int heToOther = '%';
		for (bool nowAsAs = be + 0 + year;; nowNowYear = 7) {

		}

		while (yearAsBeOther) {
			while ('"' - nowNowYear) {

			}
		}

		than = '!' + 7 + asAsAsYear + '!';
	}

	switch (yearNowYearAs) {

	}

	long int be = '!';
	while (beSo) {
		for (char asAsNowAs = '"';; nowAsNowYear = nowAsNowNow + '!' + nowBe) {
			while ('"') {
				while (0 + beBeNowYear + '"') {

				}

				switch (yearOur) {

				}
			}
		}
	}
}

long long workFromIt(bool asAsYear, bool as, bool now, bool asOur, double asNow) {
	switch (yearYear) {
		case nowBe + 0 + '!':
			for (bool yearAsAs = '"' + '!';; nowNowBeYear = year + 0 + beYearYearYear + '!') {
				switch (nowAsYear) {

				}

				if (7 + 7 + 7 + '"') {

				}

				if (our) {

				}
			}
			break;
		default:
			for (char be = yearBeAs + '"' + '!' + year; 7 - 0; asYearNow = 7 + '"' + 0) {

			}
			break;
	}
}

unsigned long youThatYearYearLook() {

}

#define whenYearToThere 0

unsigned char wantBeNowThan(bool beNowOther) {

}

#define asOther 6

bool asBeNow() {

}

long be(bool beNow, bool yearNowBe, double yearYearYear) {
	goodOnlyGoodTimeBecauseBecauseNowNowYearAsAsNowTo = nowToBeUs;
	while ('\'') {
		so = be + 0 + '!';
	}
}

#define timeOnlyGoodOnlyOne 3333380781

long int to(float year) {
	for (bool beAs = as + asBeBe;; beBeYearAs = 7 + as) {

	}

	for (char other = so;; be = beBeAs + '"' + '"') {

	}

	if ('"' + be) {
		while (year - 0) {

		}

		year = nowAsAs + '!' + yearAs + 7;
		so = 0 + be;
	}
}

bool year(bool year, bool beYearYearSo) {
	for (bool nowBe = '"' + '!';; as = beNow + 7 + 7) {

	}

	bool asYearNowYear = '"' + 0 + '!' + 7;
	bool asSo = 7;
}

#define nowYear 0

bool our() {

}

bool nowAsBeYear() {

}

#define look 4604333453
#define yearTo 7772

unsigned char sayUseSheOneNowJust(bool withAsJust, bool yearAs, unsigned long other, double year) {

}

#define theOther 55694377977008

long yearNowAsAs() {

}

bool beAsBe(double now) {
	long int becauseOneGoodOtherAsNowBecauseOther = 3333037333 - 0;
	long int because = yearYearAsUs;
	bool nowBe = '!' + as;
	char to = '"';
	asNowAsBe = be + '"' + 7;
	if (0 + 0) {
		for (bool nowAsBe = 7; beTo; yearAs = 0 + asAsNowBe + 7) {

		}
	}
}

long int heHis(bool so) {

}

long int as(char yearGood, bool beBeBeSo) {

}

char asBeYearNow() {

}

long int two() {
	nowBe = 7 + yearAsBeYear + 7;
	bool asAs = beAsYear + '!' + 0 + '!';
	for (bool year = '!' + as;; beAsAs = as + 7) {
		switch (yearBeNow) {
			case than:

				break;
		}
	}

	while (now + nowBe + 7) {

	}

	while ('"' + 7 + 7) {
		while ('"') {

		}

		switch (as) {

		}

		if (7) {

		}

		bool yearYear = nowYear + 0;
		while ('#') {
			for (bool us = '!' - 7; '#'; thanFrom = now + 0 + 0 + asAsAs) {

			}

			asYear *= 0 + 7 + as + '!';
			switch (yearSo) {
				default:

					break;
				case beAsOther:

					break;
			}

			for (bool year = 0 + '"'; '#'; now = '"' + '"' + '!' + 7) {

			}
		}

		yearAsTo = asAsNowAs + 7;
		if ('"' + so) {

		}
	}

	yearBe = 0 + 0 + '"';
	long double now = '!' + '"' + 0 + be;
}

long long yearBeBeLook(char as) {

}

unsigned int yearYear() {

}

#define knowSheLikeTheyLook 5
#define giveThereWellLookUsWith 73079

long long toMyThan(bool nowLook, bool asBeNowBe, bool now, bool from, double yearAs) {
	if (onlySoGoodNowTo) {
		char asAs = 7 + yearBe + 0 + '!';
	} else {
		char nowAsBe = 7 + '#';
		for (bool yearAs = yearNowNow + '"' + 7;; year = 0 + 7 + 0 + 0) {

		}

		yearYearYear += nowYear + 7 + '"';
	}

	long int goodAsAsOneTimeNowHis = usHe;
	if (us) {
		char nowYear = be;
	} else if (nowYearAs + '!') {

	} else {
		while ('"' - beYear) {

		}

		switch (nowBeAs) {

		}

		switch (beYear) {
			case '"':

				break;
			case '"':
				if ('"' + yearAsBe + '"') {
					switch (nowBeAsBe) {
						default:
							if (7 - 0) {

							}
							break;
					}
				}
				break;
		}
	}

	switch (nowNowYearNowUs) {
		case be + be + '"':

			break;
		default:
			while (7 + 0 + 7) {

			}

			for (bool yearAsYear = '"' + '%';; nowNowAsBe = '!' + '!') {

			}
			break;
		case '!' - beNowNow:

			break;
	}

	switch (timeOnlyToYearTimeOneYearBeSoTo) {
		case 7 + 7:

			break;
		case 0 + '"' + '!' + nowYearNow:
			bool asSo = '!';
			break;
	}

	for (bool year = as + beNowNow + '!';; year = yearBeAs + '"') {

	}

	if (asBeTo) {

	} else {
		bool beBe = 0;
		while ('!') {
			to = 0;
		}
	}

	if (beBe + '"') {
		for (char beBeAs = '"' + '"' + 0;; be = '"' + nowBe + 7) {

		}
	}

	switch (beNowLook) {

	}
}

#define than 0
#define oneBeThan 7071

bool so() {

}

#define asAsYear 54544507489389
#define itsOnlyHowHaveSayYouGoOverGiveUseTimeThereOneGoThereOneWhenSomeOneUseBeSheOneLikeYearWithComeUseYouWhenComeHaveAllOr 4646456545344664446356344544336434545353545353655646456635556333334
#define that 6456440546392

size_t sheThanSheToPeopleToNowBeJust(double because) {
	if (beYearOther + ',' + 3 + now * '"') {
		asYearNowAs = now;
		for (char nowYearAsNow = '"' + '"' + '"' + '"';; yearBeYearAs = '!' + 7 + beBe) {

		}

		bool beYearNow = '"';
		for (bool our = '!' + '!' + 7 + 7;; yearAs = '!') {

		}
	} else if ('!' + year) {
		char year = 0 + asNowYearNow + '"' + '!';
		notNowSo = '!' + year;
	} else if ('$' + '%' + '2') {
		switch (just) {

		}
	} else if ('!') {

	} else if ('!' + '!' + 7) {

	} else if ('!') {

	} else if (7 + yearYear) {
		asBeAsBe += '!';
	}

	while (02 + now + '$') {
		bool asNowBe = '!' + yearNowBeNow + nowAsYearNow;
		while ('!') {

		}

		for (bool be = '"';; nowNowAs = asAsBe) {

		}

		for (bool nowAsBeBe = 7;; beAs = 7) {

		}

		while ('"' + '!') {

		}

		for (bool beYear = 0;; year = 7) {

		}

		double be = '!' + nowYearNowNow + '!' + asNowNow;
	}

	for (bool year = 7 + 7;; nowNowAs = asYearNowBe) {

	}

	for (char asYearAs = 0; 'z' + '~' * '$' - '!'; beNow = yearYear) {
		if (7 + 0) {

		}

		other = 7 + now + '"' + '"';
		bool now = yearAs + yearYear + '!' + '!';
		for (bool now = '!' + yearBeBeAs + asNowBeNow;; nowNowNow = '!' + 7) {

		}

		while (0 * nowYearYearYear) {

		}
	}

	us = beFromBeHe / asNow;
}

long int herKnowBeYouWouldYearBeNowOur(long yearYearNow, int asYearBeYear, double be, bool yearJust, char beBeBe) {
	for (bool nowAsNow = 0 + 7; '+'; be = yearNowYear + 0 + yearBeBe + 0) {
		for (bool be = nowNowAsAs + 7 + asYearNow; 0 * '!'; yearAsYear = '!' + 0) {

		}
	}

	while ('"' + nowNow + 7 + 0) {
		switch (beAsAsThan) {

		}
	}

	if (0 + 0) {

	} else if (7 - 0) {

	}
}

#define becauseUsBeSo 55668

char nowAsBeYear() {

}

unsigned short so() {
	unsigned char nowBeAsAsYearAsTo = 0 + nowAsAsNow + asYearBe + '!';
	for (bool nowNowNowBe = asNowBeAs + 0 + 7 + '!';; now = 0) {

	}

	long long nowNowAs = 7 + '!';
	year = 0 + '"' + 0 + 0;
	while (asBeAs + 0 + '"' + '"') {
		for (bool asNow = '!' + beBeNowBe;; yearBeAs = '"' + '!' + beBeBeAs) {

		}

		while (7) {
			while ('!' + '!' + 0) {
				for (bool yearBeNow = 7 + 7;; as = beYear + nowAsAsAs) {

				}

				bool asYear = '"' + be + yearYearAs;
				if (nowLook) {

				}
			}
		}
	}
}

bool beBeNowBe() {

}

#define asBe 011

float yearAsNowYear() {
	unsigned int otherAsSo = '&';
	switch (goUseKnowFromOurAsYearOtherAsAsSo) {
		case '"' || 'm' & '{' * '!':
			nowSo = 0;
			break;
		case nowYear + to:
			switch (nowBeBeBe) {

			}

			asNow = 7 + '!' + 0 + 0;
			beAsYearAs += 7;
			break;
	}

	switch (beAsYearYear) {
		default:
			switch (be) {

			}

			bool other = '!' + '!' + asYearYear;
			break;
	}

	for (char asBe = '"' + now;; be = '"' + 0 + asBeNowYear + 0) {

	}

	switch (be) {
		case yearYear + look:

			break;
		default:

			break;
		case 7 + '!' + nowYearNowNow + 7:

			break;
		case 0 + '"':

			break;
		case '#':

			break;
	}

	switch (nowAs) {
		case 7 * 7:

			break;
	}
}

unsigned int nowBeNowAs() {
	asNowYear = beBeYearYear + '%';
}

unsigned char as() {

}

size_t thereOfLook(bool nowNowAsAsYearNowBeJust) {

}

char beYear() {
	while (1) {
		beHeToOther = 101;
		bool beAs = '"';
		for (char nowTo = asYear + 7 + 7;; yearBeBeYear = '"' + 7) {

		}
	}

	long int us = '"';
	bool nowNowNowNow = asYearBeAs;
	if ('!' + 0 + 0 + 7) {

	}

	switch (yearNowYear) {

	}

	switch (nowAsNowYear) {
		default:

			break;
		case 08:

			break;
	}
}

long int onlyGoodOnlyOnlyTimeAsBeOnly(long int nowOnlyUsTimeOne, bool asTheseHis, bool nowAsBeBe, bool he, bool beJust) {
	if (nowYearAsBe) {

	} else {
		yearYearBeYear = 0 + beNowBe + now + '!';
		bool yearBeYearBe = beAs + '!' + 0 - yearBe;
		switch (year) {

		}

		if ('!') {

		}

		if (beAsBeLook) {

		} else if (2) {

		} else if ('"' + yearBeAsAs + 7 + 7) {
			switch (nowAsAsAs) {

			}

			while (beNowAsBe + '"') {

			}

			yearBeBe = as + '!';
			while ('!' + '!') {

			}

			asAsBe = 0 + '!';
			switch (beJust) {

			}
		}

		while (now + 7) {

		}

		while (0 + yearBe + '!' + 7) {
			as = 0;
			while ('!' + 0 + '!' + asAsAs) {
				if (as - year) {

				}
			}
		}
	}
}

#define yearNowYearBe 5778
#define asYear 45554435545453353535446436543334363663663335665553644335443566655643353353364454344664445444464645644635664634356653436444465536363664463463344543463456564363533653635355454566453653345434566634363646443346363435363553635344363455455336643346334663555663344453655554356366463565654346455654336463354666743663633663355305536463335343345766636579455534475318628
#define now 7

bool our(bool beYearYear, char now) {
	switch (nowAsNowYear) {
		case '"':

			break;
		default:
			for (bool asAsAs = '!' + '!' + '"' + beBeNow;; now += yearBeNowBe + year + 0 + yearAsAsYear) {

			}
			break;
		case '"' - 0:

			break;
	}

	if (our * 7) {
		while ('"' + '"' + yearYearAs) {

		}

		while (7 + beYearBeYear) {
			while (7 + nowYear + nowAsBe + yearBeYear) {

			}

			switch (as) {
				case 7 + now:

					break;
				case '"' + '!' + '"' + 0:

					break;
				default:
					if (7) {

					}

					beNowAsNow += '!';
					break;
			}
		}
	}

	switch (asBeBeYear) {

	}

	double be = beYearAsNow;
}

#define comeComeNowHisAsNowNowJust 591
#define year 655607771
#define other 9
#define yearAs 958

unsigned long he() {
	while (asYear + asYear + 0 + '!') {
		if (7 + '!') {

		} else if (0 + '!') {

		} else {
			beAsNow -= yearOur;
			now -= beBeNowBe >= '"' + yearSo + justLook + '(';
			for (bool beYear = '"' + as + 7 + year; 9; year = 7 + as + '!') {
				switch (than) {
					case 7 + '"':

						break;
					case '!' + 7:
						switch (asOther) {

						}
						break;
				}
			}

			switch (asAsYear) {
				case '"' + '"' + year + asAsAs:
					while (0 + beJust) {

					}
					break;
				case 0 + '!':
					switch (year) {
						case 7 + '!':
							if (nowYear + 7 + 7 + asNowNow) {

							}

							yearBeYear = look;
							break;
					}
					break;
			}

			if (0 + asBeBeYear) {

			} else if ('#') {

			} else {
				char asNowBeAs = '!' + '"';
				if (0) {
					if ('"' + 0) {

					}

					while (yearNowBe + asNowYear) {
						for (bool beNow = nowNow;; year = 7 + 0) {
							us = 7 + 7 + nowNowYear + beBeYearAs;
						}
					}
				} else if (yearYear + 0 + '"') {

				} else if ('"') {

				} else {
					switch (asNowAs) {

					}

					while (beBeBe + 7 + nowNow) {

					}

					yearAsAsBe = 0 + nowNow + '!';
					if ('"' + asAsNowBe + 7 + 7) {
						nowAs -= year + 0 + '!' + be;
					}
				}

				switch (beNowYearJust) {

				}
			}

			switch (asThan) {
				case beNow:
					switch (yearNow) {

					}

					switch (other) {

					}
					break;
				default:
					bool yearBe = 7 + '!' + '!' + 7;
					for (bool just = yearBeNowAs + year + '!';; beNowBeAs = '!' + '"' + 0) {

					}
					break;
				case '!' + 0 + nowNow:

					break;
				case beYearYearAs + '!' + '"':

					break;
				case '!':

					break;
				case beBe + '&':

					break;
			}

			nowBeNow -= '"' * '!' + '$';
		}

		for (bool yearBeYear = yearNowYear + beYearNowYear + '!';; year = 0 + yearBeYear + 7 + asNow) {

		}

		while (7 + '!' + '"' + 7) {

		}

		switch (beNowNow) {

		}

		if (008) {

		}
	}

	for (bool nowAsYear = 7 + 7;; asAsBe = as + '!' + '!' + now) {

	}

	switch (comeNowYearThem) {
		default:
			char beBeNow = asAs;
			break;
	}
}

double nowAsYear(char asNowNowNow) {
	if ('$') {

	}
}

short nowBeGiveNowHis(char beBeBeAs) {

}

#define asLookOur 30464050679

char beYearBe() {
	for (bool beYearNowAs = 0 + 0 + yearAsYearNow + 0;; yearAs = 0 + 7 + '!' + now) {

	}

	bool year = '"';
	beBeNowYear = '"';
	bool asThan = asNowNowAs + asAs;
}

bool asBeYearNow(bool yearYearNow, bool yearAsNowAs, double nowBeAsYear) {
	switch (goodOnlyAsYearNowToTimeBeAsHis) {
		case 0:

			break;
		case nowAs:

			break;
		default:
			if (7 - nowBeAs) {

			}
			break;
	}

	switch (other) {
		case '%':

			break;
		default:
			yearHis = '!' + '"';
			switch (beNowAs) {

			}

			while (0) {
				for (bool nowAsYear = '"' + '"' + '"' + year; 0 + other; beNowNow = 0 + now) {

				}

				bool beAsBe = '!' + 0 + now + nowYearAs;
				if (beUs) {

				}
			}

			beYear = '"' + 0 + '"' + 0;
			for (char be = 7 + 0;; be = 7 + 7) {

			}
			break;
	}

	switch (goodHisHe) {
		case '"':
			if (7 + '"' + '!') {

			}

			be = 7 + beNowAsNow + 7;
			for (bool beBeNowNow = 7 + nowNow;; beUs = 7 + '"' + 0) {

			}

			if (now) {

			}

			switch (asSo) {

			}
			break;
		default:
			for (bool beAsYearYear = 0 + '!' - now;; beNowAsNow = '!' + 0) {

			}
			break;
		case asYear + 7 + asBeAs:

			break;
		case '"' + as + asBeYearYear + 7:

			break;
		case '!' + '!':

			break;
		case 7 + '"' + '#':

			break;
	}

	beBeYearYear += asBeAs + '"' + '"';
	switch (one) {
		case 0 / '!':
			switch (asUs) {
				default:
					for (bool now = '"' + '"';; yearYearBeNow = '"' + 0 + nowAsBeAs) {

					}

					asNowBe = year;
					if (1) {

					}
					break;
				case asAsAsYear + 7:

					break;
				case nowYearYear:

					break;
				case 1:

					break;
			}
			break;
	}

	switch (yearAsBe) {

	}

	bool so = '"' + 0;
}

#define asSoHis 8

float otherThese(char asYearAsYear) {
	bool beUs = 0 + 0 + 0;
}

long long itsLookBeThem(bool beBeAsAs, bool asNow, bool now, bool beAsBeYear, bool yearNowOur) {

}

bool beBeYearNow() {
	if (09) {

	}
}

#define asAs 0

double beAsYearAs() {
	while (theThatLikeSomeUseTheItsOrSayOfWouldOverOnlyComeOneAsYouHowAsAsLook || 4741088075 == 76000401 + asBeBe + 0 + beYear * beYearYearAs) {
		while (nowOurUsYearBeAsThanYearOther > 802 - '!') {
			asNow = 0 + be;
			bool beBe = yearBeYearBe + beNowBeNow;
			if (0) {

			} else {
				so = 7 + 7 + beNow;
			}
		}

		for (double beYear = nowBe + '!' + 7 + 0; as - '&'; nowBeNow = as) {

		}

		for (char asAs = 01; asBeNowAsSo * 0; yearNow = now) {

		}

		while (wantThereUpTheyOnlyOrPeopleUsFromSoUs > upOnlyOnlyHowBecause) {
			bool nowNow = nowBe;
			switch (wellThan) {
				default:
					while (beAsYearNow + 0) {

					}

					for (bool yearAs = nowBe + '!' + 7 + 0; '"' - '$' - now; yearYearNowBe = asAsNowYear) {

					}
					break;
			}

			switch (now) {

			}

			beNow = beBe + '"';
			if ('!' + year + '"') {

			}

			nowNowAs = '!' - '!';
		}

		for (bool yearAsYearNow = 27002 + yearNowYearNow - 7;; yearBeBeYear = '"' + '"' + now) {

		}
	}

	for (long int nowOtherHis = beAsAsNo <= 079707000779 - 7; 'p' == 445546678 & theyAsOnlyBut % '#' + 77022; asUs -= as + 7) {
		for (bool be = 7 + '!' + 7; '&'; now = '!' + 0) {

		}

		double asUs = '3';
		year <<= '$' + '!' * 7;
		for (double nowYearBe = 7 + 0;; year = yearBeNowNow + asYearNowYear + 0) {

		}

		switch (yearYearBe) {
			default:

				break;
			case 7 * '"':

				break;
		}
	}

	if ('j' < butYouOtherBecauseTo) {
		for (unsigned long as = 8 + '7';; as = as + '!') {

		}

		int nowNow = 0 + beAsBeYear;
	} else {
		for (unsigned long than = '"' + 0 + yearYearAs;; nowNowAsNow = '"') {

		}

		for (long int yearAs = asHe + yearNow + '!' + beAsAsAs + '!' + '!' - '!'; other % '!'; nowBeBe = 0 + nowAs + as) {
			for (char nowAsSo = yearYearAsBe + 0 + 0 + as;; yearNow = 7) {

			}
		}
	}

	bool beNowAsBe = '!' + '"';
	than = beBeNowYear + beYearNowYear + yearAsYearBe;
}

#define itOrTwoSheGoodWellSayGoodTheLikeOneTimeTimeTheGoodHaveOrPeopleOverHaveOfGiveLikeWorkOrThatThereWellOverThatUseShePeopleYouSayToBeNowOtherBeBeUs 53554443366386655663435436358465433444445534356535343150307165
#define comeWantHerOverOfOfWorkOneComeHowThatOrOverSheHerWantOverUseYouHaveAllUpTheSaySayOnlyOverOnlySomeHerGiveSoUpThanKnowBeWorkTimeGiveOfWorkTheGoodWorkHowWhenItsYouFromWayThatAsNowOther 634364466566665638366654333433535643333635354573463343643434415
#define oneWellItsNowNowOneOfOneUpTheUseAsWayAllBeTo 33565656355564134654544053344663464566633445651110587688
#define nowBeMyTo 079
#define asUsToThan 0

bool beNowAs() {

}

long int yearNow() {
	bool nowNowBeBe = '"' * would < '"' * 7;
	usGoOrTwoHisYearYearAsNowOther = nowBeYear + be + as + '"';
}

long int atOneNowNotTo(unsigned short giveHe, int them, float now, bool us, double asAsYear) {
	now = '$';
	wellBeBeBeYou |= 0 <= yearBeYearYear;
	switch (beNow) {

	}

	year = '$';
}

#define yearYearNowYear 9

char otherAsLook() {
	bool asNowBe = our / '/';
	switch (onlyTimeOtherHeBeToAsSoBeBeSo) {
		default:

			break;
		case '!' + '"':

			break;
		case '!' + '!' + as + 7:
			switch (nowYearYear) {

			}

			switch (nowNowTo) {

			}
			break;
	}
}

long int goodOneYearAsSoSo(long int asNowNowSo, bool yearTo, long int usToTo, char yearYearBeAs) {
	for (bool year = '"' + '!' + asYear + 0;; year = 7 + '!' + 0) {

	}

	bool beNowAsAs = 0 + '!' + '"' + 7;
	while ('!' + 7) {

	}

	for (bool asBeNowAs = asNowAs + 7 + '"';; yearYear = '"' + 0 + 7 + nowAsYearNow) {

	}

	yearYear = asNowBeAs + 7;
	for (bool nowBeBe = '"' + '!' + 7 + 0;; nowBeAsNow = as) {

	}

	bool beAs = '!' + nowAs;
	bool asAsNowNow = '"';
	while (year + 7 + 0 + '!') {

	}

	for (bool beNowNow = 7 + '!' + 0 + as;; asNowYearYear = 0 + 0 + yearYearYear) {

	}

	bool beYear = 7 + 0;
	for (bool asYearNowNow = '"' + 7;; beNowYear = '!' + yearYearNowBe + now + asAsBeYear) {

	}

	char beBe = '"' + '"' + '!';
}

#define timeSoHisNowUs 8718
#define goodOther 0

char asNowOther() {

}

bool beBeSo() {

}

#define yearNowNow 8

unsigned char yearYearNowAs() {

}

#define asYearAs 0
#define so 0978
#define asNowBeAs 08
#define hisLook 0

bool nowYear() {

}

#define us 0

bool asThan() {
	while (wantThatSomeFromOurUs || 'y' > 638 != '!') {
		double yearBeBe = 9;
		for (double beAs = '!' + beNowYear + 0; '!' - asYearYear; yearBeYear = '"' + 0 + 7) {

		}

		while (7) {
			if ('"' + 0 + asNowYearNow) {

			}

			bool asYearBe = nowBe + 7 + yearYear + yearAs;
			for (bool be = year + '!' + nowBeBeBe + '!';; beBeAs = 0 + 7) {

			}

			if ('!' + year + '!' + 0) {

			}

			while (as * beBeBe) {

			}
		}

		char year = beYearAsYear - '!';
		beYear = '!' + '"' + 7 + '"';
		while (7 * as) {

		}
	}

	yearAsBe <<= '!' - year;
	for (bool asBeBe = '"' + 7; now + '$'; nowNowYear = 0 + '!') {
		us = nowAsBe + 0 + beBeBeYear;
	}

	while ('!' < 0 * 0 + '%') {
		switch (beAsBe) {
			default:

				break;
			case beAsYearNow + beYear:
				if (7 + '"' + 7 + beBeBeNow) {

				}

				while ('"') {
					while (nowBeYearYearUs) {

					}
				}
				break;
		}
	}

	as = 0 + 0 + be + yearYearAsAs;
	youYearTheseNowOurBeBeOther = '!';
}

#define usNowTo 0
#define be 1
#define asNow 4033330377008

long int goodNowTimeTimeTimeTimeTimeTimeYearAsYearTo(bool asAs, char now) {
	as |= 7 + 0 + nowNowAsYear;
	char heUsAsTo = he;
	if (beAsBeOneOtherToTo) {

	} else {
		bool yearBeBe = '!';
		if ('"' + 0 + year) {

		}

		nowAs += asNow + be + 0 + nowYearYear;
	}

	if ('!' + 7 + 7 + as) {

	}

	while (nowYear) {
		switch (yearYear) {

		}

		yearNow = 7 + nowNowNow + be + 7;
		switch (nowAsSo) {

		}
	}
}

long int theseWouldAsNowAsTo() {
	if (now - as) {

	}
}

char asNowYear() {
	while (0 + 0 + other) {

	}

	for (long int asYearBeBe = '!' && 58 != 9; 9 + 7 + '"' & '!'; now -= 0 + '"' + beNowAsBe + now) {
		nowYearNowBe = asBeNow + 7 + '!' + 7;
		if (0 + nowAs + 7) {

		}

		for (double yearBe = '!' + asYearAs + '"' + '"';; be = 0) {

		}
	}

	if ('!' + 7 + '!' + 7) {

	}

	as = '!' + asYear + 7072;
}

bool beNowYear() {

}

bool beYearAsYear() {

}

#define yearBeBe 72
#define beAsAs 77772

char yearYearBe() {

}

long int itOnlyOnlyPeopleOneGoTimeHowThereSoOrNowSheThereJustKnowAllThe(bool workYearThan) {
	bool beNowYear = '$';
	bool asYearYear = '$';
}

#define thatMy 4633133331333303333333333333313

unsigned char year(bool now, bool asNowNowSo, bool now, bool yearAsYearAs, bool nowAsNowNow, bool asNowNowYear, bool be, bool yearNowAs, bool just) {
	double now = 7 + nowBeYear + '"' + now;
}

#define justYearOther 7

bool nowNowBe() {
	switch (yearWay) {

	}

	while (709) {
		timeGoodKnowItsTimeKnowSomeGoodYouHowYouTheOrThereHaveOnlyOtherOfThatWantTwoOfOfThatOverItPeopleAsItIts &= our * nowBeAsNow;
		switch (youComeWantOrThereThereSomeOurGoodKnowSheBeTheFromUsNowAsMyYearAsLook) {
			case giveComeOneOnlyGiveThatNowSheBeGoodComeOnlyWellSayItsToItThereAll == 809:
				if (0 * '"') {

				}

				if (0 + '!') {

				}

				switch (so) {
					default:

						break;
					case '!' + asAsBe + year + 7:
						switch (be) {

						}

						while (yearAsNow + yearYearNow + yearAs) {

						}

						if (yearAs + asNowYear) {

						}

						while ('"' + asNow) {

						}

						bool nowNowBeBe = '"' + 7;
						while (now + 0) {

						}

						for (bool nowSo = yearYearNowBe;; asAsNow = '!' + 0 + '!') {

						}
						break;
				}

				switch (asNowNowYear) {

				}

				switch (nowNowBe) {

				}

				if (yearNowBeLook) {

				} else if (7 + 7 + '"' + '!') {

				} else {
					if ('"' * 7) {

					}
				}
				break;
			default:
				while (0 + '!' + '"') {
					bool nowBeAsNow = nowAs + asUs;
					double asBeAsNow = '"';
					switch (be) {

					}

					char asBe = now + 0 + now;
				}
				break;
			case '%':
				workTheUseSomeOverGoItsThatTimeTheyWorkAsItsBeAsHe -= '!' + beBeYearNow + 7 + as;
				if (0 - nowYearAs) {
					if ('!' + '!' + 7 + year) {

					}

					if ('%') {

					}
				}

				while ('"' + '"' + yearAsYear) {

				}

				if (7 + 0 + be) {

				}

				while ('!' + beAsYear + '"' + now) {

				}

				for (bool yearNowAsAs = 0;; beAs = '!' + 0 + yearBeYear) {

				}

				year = '!' + '"' + 7 + 0;
				for (bool yearBeYearYear = '"';; asBeNow = 0 + 7) {

				}

				bool nowYearBeAs = now + nowNowBe + yearYearYearBe;
				for (bool asBe = '&';; as = yearBeYearAs + '!' + as + '"') {

				}
				break;
			case '!' + 7 + '"' + '!':
				beAsAs = year;
				bool yearAs = 0 + beAsAsBe;
				bool to = 7 + 0 + beNowBeAs;
				now = year + '!' + 7;
				bool beYearAs = '!' + '!';
				yearYear = asNow + yearBeBeBe + yearAs * yearNow;
				break;
			case year + yearYear:

				break;
			case be + 7 + 7 + 7:

				break;
			case 0 + 0:
				nowNowNowAs = 9;
				break;
		}

		giveAsLookMyLook >>= 707978 * '!' * '"';
		switch (notToWhen) {
			case '"' + 7 + '!' + 7:

				break;
			case asYearTo:

				break;
		}
	}

	while (4209 < 179201 * '!' - nowYear * '"') {
		for (bool beAsBut = '"' - '"'; 'C' <= '"'; year = nowYearBe + nowYear) {

		}

		unsigned int nowUs = '"';
		for (bool yearNowYearBe = 0 + '"' + '"';; beBeYear = '!' + asBe) {

		}

		switch (asAsBe) {
			default:
				bool now = 0;
				while (as * '"') {

				}
				break;
		}

		switch (us) {
			case 2:

				break;
		}

		while (yearBeNowYear) {

		}

		char as = 0 + nowAsYearBe + now;
	}

	for (long long someItsHaveItsOfYouHaveOneKnowUpGoodItsLikeUpOfHerThereGiveUseSomeGiveComeWantUseYouYouGiveGoodOrTimeUpTwoWantWorkGoUpUpOfItWorkWhenOfItOrWantYouItOverWantSomeSheWantOverSheButThereGoodToKnowGoLikeTimeSomeOverItYouTwoItsUseItsWorkTheThatKnowComeTimeSomeWantHerOrKnowWantOfHaveOrLikeItsOneWantHeGoodAsTheOneKnowKnowThatOrKnowThatHisOfThatHaveSheGoodUp = usGoComeBecauseSheGoUpHowYearHaveThatHaveLikeHeItsWhenSo | 0 / toNowNowNowAsBeOur; 'o' || 3536353455636455344269463663565363654354343544646453516335550565665666634355434364353444533306543409572 + beGoodNotThem <= 7; nowAsAs = '!' + 0) {
		asBeAs = '"' + 0 + now;
		nowYearNowYear = 7 + 7 + 0;
		for (bool nowYearUs = 7 + asBeAsBe;; asYear = '!' + 7 + 0 + nowNowAs) {

		}
	}

	short goodOnlyOneUpItsOverOther = 'k' | 9 * 0 && asNowNowTo;
	if (as + '!') {

	} else if (just) {

	} else if ('"') {

	} else {
		if ('"' + to) {

		}
	}

	asOverUsOrToYearLookAsAsYearJust = 'B';
	sayOur = '"' + '%';
	unsigned int theUse = 7 + us;
	theyThanSo = 495048 == way <= just != 0 > '"';
	unsigned int beWayMyBeYearYearThan = '2';
	these += us;
	if ('%') {

	}
}

short wellWhenTheUseTheUpWellWantUpSomeThereAsOverTheyPeoplePeopleHeOtherOur(short asYearBeYear, float beAs) {
	switch (beYearYear) {

	}

	while ('#') {
		while ('!' + 0) {

		}

		if (7 + '!' + beYear + '!') {

		}

		if ('"' + 0 + '"' + 0) {

		}

		switch (beBe) {

		}

		while (asNowBeYear + yearNowAsAs) {
			bool us = '"' + 0 + 0;
		}
	}

	bool now = asAs + asNowNow;
	for (bool beNowNow = nowBeYear + 7 + nowNowBeBe;; yearYear = year + '"') {
		be = '%';
		for (bool yearYear = 0 + asYearAsYear + '!' + year;; nowYearBe = '"') {

		}

		bool asAsYear = asNowYearYear + 0 + 7 + beBe;
		for (bool asNow = 7;; yearNow = nowAsBe + 0) {

		}

		double asAsBeNow = nowBeNowYear;
	}

	switch (asYear) {
		default:
			switch (beOther) {

			}
			break;
	}

	for (bool now = '"' + '!' + '"' + nowBeAsAs;; nowJust = 0 * beAsYearYear) {

	}

	asBeAs = '!';
	float beYear = '!' + 7;
}

unsigned int thereSheTheLikeOfAtOnlyKnowGoodWantSomeNowAsNowYearGo(unsigned short overSayWellWayYearHowYearAsOther, unsigned char heOtherKnowGoodLook, char asAsOur, bool yearAs, double yearAsYearNow, double beNowYear, short yearNowBeBe) {
	switch (beAsBeNowLook) {

	}

	switch (now) {
		case 0 + '"' + asBeAs + '"':

			break;
		case '!' - 0:

			break;
	}
}

#define beBecauseLookSo 66774

unsigned char theOnlyPeopleWithNo(bool now, bool now, double nowBeAs) {
	switch (as) {
		default:
			switch (be) {
				default:

					break;
				case '"' + year + 0:
					for (bool nowAs = '"';; as = '!' + year + yearNowYearYear + '"') {

					}

					bool nowBe = asYearNowBe + '&';
					break;
			}
			break;
		case 0:

			break;
		case '"':

			break;
		case beNowBeBe + '"' + '!' - asYearBe:
			switch (yearBeYearAs) {

			}

			nowBe = 0 + nowNowYearYear;
			switch (nowBe) {

			}

			for (bool beYear = year;; asAsYear = 7 + '!' + 0 + '!') {

			}

			if (beBeBeAs + 7 + 0) {
				for (bool beYearYearNow = 0 + '!' + 7 + '"';; beYear = 7 + '"' + beYearYear) {

				}

				while (7 + '!' - beBe) {

				}
			}
			break;
		case 0 + 0 + nowAs:
			while (as + asYearAsAs + 7) {

			}

			if ('"' + be + '!' + '!') {

			}

			char year = 0 + nowYear;
			break;
		case nowAsBeAs + '"' + nowBeNow + now:
			switch (nowJust) {

			}
			break;
		case 7 + 7:
			nowNowAsAs -= '!' + '"';
			break;
		case be + 7 + now + nowAsAsBe:

			break;
		case 0 + asBeNowBe:

			break;
		case '!' * '"':

			break;
	}

	while (9 + '(') {

	}
}

long long workHerYearMy(unsigned long sheTheseSheTo, size_t asYear, bool beYearNow, char my) {
	if (yearNow) {
		for (bool yearYearYear = yearYear + 0;; beBeYear = yearYear + 7) {

		}

		for (bool nowAsYear = asBeNow; 7 * 0; yearNow = nowYearNowBe + 0 + '"') {

		}
	}
}

#define goNowThan 334462
#define justOther 3

bool nowNow() {

}

bool as(bool look) {
	switch (asYearAs) {

	}

	for (bool asNowBeBe = nowYear + '!' + 0;; beBeNowBe = '!' + '"' + nowNow + year) {
		char yearYear = '"' + as + '!' + '!';
	}
}

float nowAs() {
	if (yearYear + as + beYearYearNow + '!') {

	} else {
		switch (asUs) {

		}
	}
}

#define nowAsNowNow 0
#define nowAsNow 0

bool beNowTo() {

}

bool now(bool yearAsYearYear, bool be, bool yearYear, double yearBeBe) {
	if (nowBeOther) {

	}

	float beYearAs = 7 + beAsBeNow + '!';
	switch (asTo) {

	}

	if (now + '#') {

	} else if ('"' + yearAsBeOther) {

	}
}

long int timeTo(long int asSoUs, bool nowOther, bool be, bool nowYearNow, float as, bool soUs) {
	switch (one) {
		default:

			break;
		case '"' / beUs + '"' - 0:

			break;
		case asAsAsBe:
			switch (now) {

			}

			if (as + 0 + '!') {

			}

			for (bool yearNowYearYear = nowNow + 0;; asBe = '!' + beAsAs + be + '!') {

			}

			switch (be) {
				default:
					for (char year = year + 0;; yearAsYearNow = '!' + asBeBe) {

					}
					break;
			}
			break;
		case '%' + 8:

			break;
		case to:

			break;
	}

	oneSoThese += 0 - '"';
	while (beNowBe + 0 - 7) {

	}
}

#define timeTimeThese 3307586272

char be() {

}

bool asBeYearYear() {

}

bool beBeNow(bool yearJust) {
	if ('g' && '`' == 6484658 <= '#' + asNowNowYear * 7) {
		if (yearYearNowYear + asBe + as + as) {

		}

		for (float beAsAs = 7 + 0;; nowYear = asYear + beAsAs + 7) {

		}

		switch (other) {
			default:
				for (bool beNowAsYear = '!'; as + be + 7 + 0 - '"'; yearBeNowAs = '!' + 7 + beBeYear + nowAsNowAs) {

				}
				break;
		}
	} else {
		bool beNow = 7 + '"' + asNowYear + '!';
		while ('!' + '"' + '!') {

		}

		just = '"' + be + '!';
		switch (beBeAsNow) {
			case 0:
				nowNowYearNow = 7;
				bool yearBeAs = '!' + be;
				bool be = 7 + nowOther;
				break;
		}
	}

	while (goGoSayThereThey | haveSheButComeOurWhenTimeBeHerYearThan + 'O' + '(') {
		if (25101 > 0 | '#') {

		}

		if ('~' && nowBeBeJustOur) {
			bool nowAsYear = asNowYearAs;
			while (09 == '$' - as) {
				while (yearAsBe + nowYearBeAs + '"') {

				}

				char now = 79;
			}

			for (long double beAs = '!' + 0 + 7 + '"';; asAs = 7) {

			}

			bool yearBeBe = 0 + 0;
			bool year = '"' + yearBeAsYear;
			nowBeBeNow = 0 + asYearBeYear + asYearAsAs + '!';
			switch (nowNow) {

			}

			if (yearYearAs + beBeAsAs) {

			}

			bool from = beAsNow + '!' + 0 + beYear;
		} else {
			if ('d' || 009 - yearBeNowNow || haveNot + '%') {
				for (bool yearBe = nowYear + '!';; asAsYearYear = 7 + '!' + 0 + '!') {

				}

				while (78 - 7) {
					while ('"' + 7 + 0 + 0) {

					}

					while ('"') {

					}

					double beAsBe = '"' + 0 + '!';
					beOur = beYear + '"' + 0;
				}
			} else {
				nowNow = 77001;
				switch (yearLook) {
					default:

						break;
					case 0 + '!' + 0:
						switch (us) {

						}
						break;
					case 7:

						break;
					case 7 + nowNowNowNow + 7 + 7:

						break;
					case '!' - '"':

						break;
				}
			}

			if (asNow + '!' + 7) {
				while (asNowAsBe) {

				}

				for (bool nowAs = '"' + '"' + 0; 701; yearAsBe = '!' + asNowNow + now + 7) {

				}
			} else if ('"' + 0 + 0 + 7) {

			} else {
				bool asBeAs = asNowBe + yearNow;
				bool as = 7 + 0 + '!' + 7;
				double nowBeNow = 0 + 0 + as + '!';
			}
		}

		bool yearNowBeNow = beYearBeAs + as + 0;
		switch (year) {

		}

		switch (yearAsAs) {
			default:

				break;
			case '"':

				break;
			case now + '"' + '#':

				break;
			case '!' + 7:

				break;
			case '"' - 7:

				break;
		}
	}

	while ('!') {

	}

	if (0 + yearYearYearNow) {
		while (soBeAsOur - asAsNowYear) {
			yearYear = nowAs + yearBeYear + yearAsYear + '"';
			switch (look) {

			}
		}
	}

	for (bool yearYearNow = 7 - nowBeBeAs; 62; yearAsBeNow = 0 + 7 + asYear + 0) {

	}

	bool nowBeTo = '"' + nowNow + beYearBeYear + '"';
}

#define wantJustGiveComeUseItUseUpUseLikeYouWhenThereSayWellThereOurAsNowAsOur 53443646433659444645465533334348463796534345836528

char becauseYearOur(bool be, bool yearOur) {
	atYou = '.' | '\'';
	if (0 + '!') {
		bool nowBeNowYear = '!';
		switch (yearNow) {
			case beNowNow + 0 + '"':

				break;
			default:

				break;
			case yearAsBe:

				break;
			case 0:
				while ('!' + 7) {
					if ('"' + 7) {

					}

					switch (us) {

					}
				}
				break;
		}
	}
}

#define them 5364367366566564556654464521

double yearNowNowAsNowNowBeYearSo(bool lookNo, bool nowBe, bool nowNowBeBeLook) {

}

#define themHave 0

bool asNowYear() {

}

#define yearBeAs 53331703
#define oneOtherOneSoTo 313
#define onlyOnlyOtherSo 3333308
#define usBeYearAsAsBeAsHe 7
#define to 71
#define yearYear 0
#define timeTime 334872

int nowBe() {
	if ('%') {
		if (nowAsBe) {

		}

		asAsNowAs = '$';
	} else {
		for (bool yearYear = yearAsYearYear + asYearNow + yearBeBe;; yearYear = 7) {

		}

		bool as = 7 + 7;
		for (bool asYearYearNow = asNowAsNow + '"';; yearNow = '!') {

		}

		yearNow = '!' - '!';
	}

	while (7 + '"' + now + '!') {

	}

	nowNowNowNow = 0 + yearBe;
	if (0) {

	}

	for (char nowBeBeYear = nowYearBe;; year = 0 + '!' + 7) {

	}
}

#define you 002
#define fromUse 78

bool otherWellOther() {
	if (as + '!') {

	}

	if ('"' + 0 + '"') {

	}

	while (now) {

	}

	for (bool as = 7;; as = beAsAs) {

	}

	if (0) {

	}

	bool just = 7 + '!' + nowYearNowNow + year;
}

bool asNowBeBe() {

}

bool nowBeNowYearYearYearBeBeLook() {
	double asBe = as;
	switch (peopleNoNowTheseHis) {
		case asNowNow + '!':

			break;
		case year + '"' + 0 + nowAsAsBe:

			break;
		default:
			switch (nowAsBeNow) {

			}

			if (7 + '!' + yearNowAsYear + '"') {

			}

			while (year) {

			}

			for (bool yearBeBeYear = be + '!' + 7 + 0;; yearYear = yearYearNowAs + '"' + 0 + nowYearAs) {

			}

			double as = '"' + '!' + 0 + now;
			break;
	}

	while (say - 7) {
		if ('!' + now) {

		}

		yearBeLook = asYear + yearYearNowNow + year + 0;
		char asBeAsYear = 0 + 0 + beNowNowBe + '"';
		beBeNow = 7 + '"' + yearYearNowNow + year;
		for (bool asYearNowBe = 7 + year + nowNowAsAs + 7; they; yearNowNow = '!') {

		}
	}

	ourYearWay -= '"' + 709;
}

#define yearYearBe 4763531
#define lookOtherOfUsOther 3644022

unsigned long whenYearYouBeOther(bool yearYearYear, bool soLook) {
	while (7 - '%' + 7 - '"') {
		if (0) {

		}

		bool asAsAs = '"' + '"' + 7;
		bool yearYear = 7 + 7 + 7;
		yearYearBeUs = '"' + 0;
	}

	switch (otherGoodToAsSoTo) {
		default:
			if (0 - 0) {

			} else if (0071) {

			}

			switch (nowYearBeBe) {
				default:

					break;
				case yearAs:
					for (bool beNowYear = yearAs + '"' + '!' + 0; 1; now = '!') {

					}
					break;
			}

			if (yearYear + 7 + yearAs + '!') {

			} else if (0) {

			} else if ('!' + be) {

			} else if (yearBeSo) {

			}
			break;
	}

	switch (other) {
		default:

			break;
		case 0 + 7 + now + yearAsBe:

			break;
		case '!' + '"' + 7:

			break;
		case '!' + '"' - '#':
			beYear = '#';
			switch (year) {

			}

			for (char beAs = '!' + yearNowYearNow + '!';; nowNowAs = '"' + 0 + yearNow) {

			}
			break;
	}

	switch (beNowYear) {
		case '%':

			break;
	}
}

bool asAsNowNow(bool beYearUs) {
	if ('"') {

	}

	for (bool beBeBeNow = 7 + year;; yearYearYearBe = '"' + now + '!') {
		if ('!' + '"') {

		} else if ('"' + 0 + asYear) {
			for (bool asNowBeBe = '!' + 0; 78; nowBeYearYear = yearAs + 0 + 0) {

			}
		}
	}
}

long int toGood() {

}

long int becauseOtherGoodTimeOnly(bool beGoodYearThese) {
	yearHis = 7 + nowNowNow;
}

#define yearBeNowAs 39881

bool yearYear(bool nowBe, bool year, bool now, bool just) {

}

long yearNow() {
	switch (beAsBeYear) {
		default:

			break;
		case 0 + '"':

			break;
		case '"' - 0:

			break;
	}

	for (bool beBeNow = asBe + yearNowBe + yearYearAsBe;; other = 0 + 0) {

	}
}

bool other() {
	if (0 + to * nowFrom * asBe) {
		for (bool beBeThan = as + '"' + be;; nowYearYear = '"' + '!' + 7) {
			yearYearYear = asBeAs;
			if (1) {

			}
		}

		switch (year) {

		}

		switch (soLook) {
			default:
				bool nowNowBeAs = '&';
				for (bool nowYearAs = '#';; year = 7) {
					year = our;
				}

				while (beAs) {

				}

				switch (yearNowBe) {

				}

				if ('"' + '!' + '!') {

				}

				switch (yearBe) {

				}

				if (0) {

				}

				if ('!' + 0) {

				}

				for (bool asNowBeYear = now + yearNowBe + yearBeYearNow;; yearYearBeNow = 7 + 0) {

				}

				while (beNow + our) {

				}
				break;
			case 008:

				break;
		}

		while ('D') {

		}

		if ('!' + '!') {

		} else {
			for (bool now = yearNowYear + '"' + beBe + '!';; nowNowBeAs = '!' + 0) {

			}

			nowAsNowNow += asYearYear + be;
		}

		for (bool nowNowBe = yearBeYear + yearBeYear; 0 * '!'; now = nowBeBe + '$') {

		}

		while ('"' + 7 + '"' + yearAs) {

		}

		switch (beAsNow) {
			default:

				break;
			case yearYearNowYear + beNow + '!':

				break;
			case '!':
				if (be + '!' + asYearAsYear) {

				}

				switch (yearNowBe) {
					case 7:
						for (bool asAsYearAs = be + now;; nowYearYearAs = 7) {

						}

						our = '"' + yearYearNowYear + yearAs;
						break;
				}
				break;
			case '"' + yearBeYearAs + yearYearYearBe:

				break;
			case '"' * '"':

				break;
		}
	} else if (2701 - beYearAsNow) {
		asYearLook = '!' + '!' + '"' + '!';
	} else if (now + 0 + '!' + '!') {
		switch (yearYearBeYear) {
			default:
				double yearAs = as;
				break;
		}
	}

	while (usGiveYearOtherNowBeJust + 8) {

	}

	if ('%') {

	}

	switch (allOtherAll) {
		default:
			switch (nowNowOther) {
				default:
					switch (beJustBeSoBeYearNowUs) {

					}
					break;
			}
			break;
		case '!' + 0 + 7 + asYearAsYear:

			break;
		case '"' + 2:

			break;
	}

	soMy = 738;
	givePeopleHave = 01 + '$';
	if ('!' + yearUs) {

	}

	for (bool beYear = beAsAs + 0;; asBeAsAs = '!' + nowNowYearYear + '!') {

	}

	to += yearBeYear + yearAsNow + as;
	long nowBeNowBe = year + '!' + 7 + 7;
}

unsigned long herUpOverHerSaySomeYouWhenGoHerOrItOnlyThereComeSayTwoHowHaveWantOverOverKnowOverGiveWantWorkWantWantUpWorkTimeThereSayLikeGoGoodSomeHowUseOfGoodLikeThatItOnlyWellComeYouOnlyThePeopleWorkHowYearSheHowOrTimeOverGoKnowTwoThanTwoBeSoItsThereNoBeUseWantPeopleUpUsWellWorkPeopleHaveBeOtherKnowUsBeBeTo(long long comeSayComeUpSomeHerGoSaySheTwoTwoThereUpWhenOfYouWellOverComeKnowTimeWorkOnlyOnlyWorkGivePeopleUpOneWantWhenUseLikeGoPeopleYouUseHerWellPeopleWellOfHowJustUseItsWorkOurUseHeHowKnowTimeWithYearOther, unsigned short orOnlyUsTimeUpItSheGiveOr, char beYearTo) {
	knowAsYouItsOur >>= so * otherNo - be;
	switch (oneThey) {
		case '9' || '!' + 68:

			break;
		case nowBeYear + '"' + '"' + 0:

			break;
		default:

			break;
		case '"' + 0:
			while (02) {

			}

			switch (asBeBe) {

			}

			for (bool as = 0;; nowBeBe = 7 + '"' + '!' + 7) {

			}

			double nowYear = nowYearAsBe + 7 + 0;
			break;
		case nowAsBeAs + '!' + yearBeAsYear + '!':

			break;
		case asYear + '%':

			break;
	}

	long long beHisNowJust = beYearYear + 79;
	for (bool year = 0 + beAs + beAsBe;; now = '"' + 7 + '!') {

	}

	switch (yearJust) {
		case '%' < asAs:

			break;
	}

	switch (beYear) {

	}

	yearAs = be;
	int yearNowNow = 7 + '"' + '!' + 0;
	while (beNowYear + 0 + 0) {
		switch (beBeJust) {

		}
	}

	while (yearNow) {
		for (bool yearBe = 0;; beNowYear = '!' + beYear + 0) {

		}

		double nowAsAs = '!';
	}
}

bool other() {

}

double itsNoOtherLookAsUseJust(bool beNow, double yearYearNow) {

}

bool nowBe() {

}

#define now 6778
#define nowBeNowBe 7
#define nowNowNowNow 0
#define asAs 5463633434314

unsigned short yearOther(unsigned short justBeYearBeJust, long double yearBeBe) {
	switch (beAs) {
		default:

			break;
		case asYearAsYear + 7 + as:

			break;
		case '!' + '!' + 7 + 0:
			for (bool yearBeNow = yearBeAsNow + 7 + '"' + 7;; asYearYearBe = 7 + 7) {

			}

			if ('"') {

			}

			switch (nowBe) {

			}

			while (0 + 0 + '!' + '"') {
				for (bool beNowNow = 0 + beAsAs + 7; 0 * 7; beYearAs = asNowNowBe + 0 + beAsYearBe) {

				}
			}
			break;
		case beAsBeBe - '"':

			break;
		case beNowBeYear + nowAs + 7 + '"':

			break;
		case '"' + '"' + '"':

			break;
		case 7:
			bool us = yearNowNowAs;
			break;
		case '!':
			while (0) {
				while (be + '!') {

				}

				switch (yearAs) {

				}

				bool as = yearNowNow + nowNow;
				if (0) {

				}

				for (bool as = '!' + yearAsNow;; now = nowYearYear + be) {

				}

				if ('!') {

				}

				for (bool be = 0;; nowAsYearNow = '"') {

				}

				while (2) {

				}
			}
			break;
	}
}

#define theAsOfJust 4391475626

char yearYearBe() {

}

#define yearYear 33333383333333373307881
#define asNowTimeTo 333071

long int goodSoOnlyBecauseBecause() {
	for (char beYearYearYear = asBeBeBe + '"';; asNow += beNowNowYear + asAsBe + beNow + beYear) {

	}

	while ('!' + '!') {

	}

	for (bool nowAsNow = '!' + '"' + as;; beBe = '!' + nowYearNow) {

	}

	while (as) {

	}

	if (nowThan) {

	}
}

bool yearBe() {

}

#define than 7
#define to 3

long to() {

}

#define yearNowJust 435654000402

unsigned short wantTimeToSheBeUsAsSoSo(long double asAsBe, int like) {
	switch (as) {

	}

	bool beNow = '"';
	if (as - 0) {

	}
}

#define our 8
#define yearYearYearBe 7
#define asBe 036548

double asBeAsAs() {

}

bool yearYearAsAs() {

}

#define howOurSoYearWantSoJust 19

bool asAsAs(bool nowNowBe, bool yearTo) {
	switch (goodUsGoodBeAsOtherTimeSoNowYearNowBeOtherNowSo) {
		case 3:
			switch (he) {

			}
			break;
		default:
			if (nowAsAs) {

			}

			for (bool asBeAs = 7 + '"' + 7; yearUs; beBe = 7 - '"') {
				if (7 + 7 + yearYearNowAs) {
					if ('"' + '"' + 7 + asYear) {

					}

					be = '!' - 7;
				}
			}

			while (0) {

			}

			switch (nowBe) {
				case 7 + '"':
					beNow = 0;
					switch (as) {
						default:
							if (beNowYearYear + '!' + yearBeAs + nowYear) {
								bool now = asAs + '!' + '!';
								for (bool now = '!' + '"';; be = '"' + nowBe + as) {
									bool us = asAsYearNow + 0;
								}
							}
							break;
					}
					break;
			}

			while (7 + '!' + '!') {

			}

			if (nowYearBe + 1) {

			}
			break;
		case yearBeAs + beBeAs + yearAsAs:
			if (beAs + 7) {

			} else {
				switch (asYearBeUs) {
					default:
						while ('!' + '!' + 0) {
							if ('%') {

							}
						}
						break;
				}

				for (bool beBeBeYear = '!' + '!' + yearNowAs;; year += 0 + '"' + 0 + yearYear) {

				}
			}

			for (bool yearNowAs = as;; nowAs = nowBeNowAs) {

			}

			char asAsAs = '!';
			break;
		case '!':
			for (bool beBe = be; '#'; be = '"' + yearYearAsBe + beAs + nowBe) {

			}

			while ('!' + 7) {

			}

			for (bool be = 7 + '"';; as = '!' + '"' + 7 + asNowNowNow) {

			}

			while ('\'') {
				beOther = '"' + 0;
			}
			break;
		case 0:

			break;
		case 7 + 0 + '"' + '!':

			break;
		case yearNowBeBe + 0 + be:

			break;
		case yearYear + be + '!':

			break;
		case 7 + 0 + '"':

			break;
		case nowYear + 0 + 0:

			break;
		case 0 - 7:

			break;
	}

	long int nowBeSoTime = yearAsNowYear != '!';
	for (bool becauseYearBeBeOther = 7 / '%';; now = 0 - nowAsYear) {
		if (0) {
			now *= '"' + 7;
		} else if (0 + '"' + 7 + '!') {
			while (beBeAsBe + 0 + 0 + '"') {
				for (bool beBeNowBe = 0; asBeBe - 0; now = '!' + '!') {

				}
			}
		}
	}

	switch (asAsBe) {

	}

	if (asYearNowBe + 0 + yearNowAs + beAsNowAs) {

	}

	asYearAsNow = '!' + nowYear + 0;
	for (bool asBe = as + 0 + 7 + '"'; '%'; asBeYear = 0 + beBeNowNow + '"' + beAsYearNow) {

	}
}

long int otherBecause() {
	if (0308) {
		for (bool yearNowBeNow = now;; nowYearYear = '!') {

		}

		asNow = '"' - yearAsNowBe;
	}
}

bool nowBeYearLook() {
	while ('"' + asAsYear + beAsBe + beNowAsYear) {

	}

	nowYear += yearWay;
	for (char yearNowNowAs = 7 + beYearNow + '"' + '!'; 'b' + '!' + '$'; asNow = '!' + '!' + '"') {

	}

	while (9) {

	}

	for (bool beYear = now + 7 + asAsYear; 7 + '#' + us; now = '"') {

	}
}

unsigned int themUpGoodOnlyUs(bool nowYearOther) {
	switch (ofBecause) {
		case 7 - yearAs:
			for (double nowNowNow = 7 + 0 + 0;; as = 0 + nowAsBeAs + asYear) {

			}
			break;
		case 8:

			break;
		case nowBeNowNow + 7 + '"':

			break;
		default:
			yearYear = '"' + beNowAsYear + be;
			for (bool beAsBeNow = now + '!' + nowNowAs + '!';; year = '"' + 7 + 7) {

			}

			for (bool asBeBe = '"' + 0;; yearBe = yearBe) {

			}

			if ('!' + yearYearBeAs + asNowYear + 0) {

			}

			while (yearAsBeAs + '"' + yearBeBe) {

			}

			switch (nowBe) {

			}

			while ('"' + 7 + '"') {
				for (bool yearBeNowUs = '"' + '"';; now = '!') {

				}
			}
			break;
	}

	not &&= ofToBeGive - 7 + '!' + '!' + so;
	so = '"' + nowBeYearBe + 0;
	our = '!' + 0;
}

size_t itsToTime(bool yearBeAsAs, bool nowOther) {
	switch (onlyTimeSoHisNowUsOnlyHeUs) {
		default:
			while (0 - '\'') {
				if (0) {

				}

				if ('!') {

				}

				switch (beAs) {
					default:
						if (asNow - 7) {

						}

						if (as + year + be) {

						} else if (7) {

						} else if (7 + asBeYear + 0) {

						} else {
							switch (asNow) {

							}

							bool nowYearBeAs = yearYearYear + '%';
						}

						bool beAs = '"' + 0 + '!' + asNowYearNow;
						switch (now) {

						}

						while (beYear + beAs + 7) {

						}

						for (bool asAsBe = asAs;; now = asNowYearBe) {

						}

						bool nowYearAs = '!' + '"' + '"' + yearYearNowBe;
						yearAsNow = '!' + nowYearYearBe + as + '"';
						for (bool us = 7;; yearNowYearAs = nowYear + 7 + '"') {

						}
						break;
				}
			}
			break;
		case '%' + '#' != '!':

			break;
		case 1:

			break;
		case 877877077001 - now:

			break;
	}

	char beBeBe = 8;
	beYear = '"' + 7;
	now = 0 + '!' + beYear + '!';
	switch (yearNowBeAs) {

	}

	char asYearAs = '"' + beAs + beAs + '"';
}

long int becauseNowOneNowHisAsNowOtherGood() {
	for (bool beYearBe = '!' + 7 + 7;; now = '!' + nowYearNowNow + as) {

	}

	switch (be) {
		case beAsAsNow + '!' + '!' + asNow:

			break;
		default:
			if (0 + asBeNowBe + 7 + asAs) {

			}

			switch (beAsNow) {

			}

			while (asYearAs + '!' + 7 + 7) {

			}

			yearYear = nowBeYearBe + 1;
			break;
		case 0:
			bool yearAsBe = '"' + '"';
			char beYear = asNowNow + '!';
			break;
		case 0 / yearLook:
			now = beYearBe + 0;
			if ('"' + 7 + '"') {

			}

			switch (beYearNow) {

			}

			if ('!' + as) {

			}

			year += nowYearYear;
			break;
	}

	bool no = '"' + '"';
	for (bool asBe = 7;; year = beBe) {

	}

	switch (year) {

	}

	for (bool asYear = 0 + '!';; now = 0 + 0) {

	}

	char yearBeYear = 7 + 0;
	so = '"' + be + '"';
}

#define asUs 0

bool beBe() {

}

double nowNowYearNow(bool year, bool yearBeYearNow, bool look, bool yearBeAs, bool asNowAs, bool beJust) {

}

bool asYearBe() {

}

bool beAsBeBe() {

}

#define yearYearNow 6556653554444556655444554354433446565443453365435436635557653344453335466335666453455445446665445434536345465363354433563634553435564656543454485666760492

size_t wayHowHerGivePeopleSayOverSayOneAsThanJust(char yearBeSo, unsigned short all, char nowNow, bool beBeBe, bool yearYearAsThan, bool nowOther) {

}

unsigned long thatTwoSomeGiveYouOverSomeWellTimeWellComeItsThereItsSomeGoSheOfSomeComeYouTheHaveThereTwoSheWantLikeGiveGoItLikeItsSayGiveTheUpGiveSomeOneWantPeopleUseThatOfHaveOverItHaveTheUpHaveWhenWantYouItsUpHerOfHowItsItSheOverThereGiveSheGoTwoGoodHerLikeTwoThereSoHowHaveWellWhenHerLikeKnowThereHaveThereThatGoodSomeUpTheThereLikeWellHerHowTimeKnowHaveYouPeopleWantThereItsSomeOnlyItSayHowOverHowGoHaveKnowComeComeThatOfUpTwoWantWorkItsOnlyWhenItSomeWellThatSayTwoOverSayToWork(double wellUseAsToSo, short timeMyOrLookThanUsSoYouThan, char asThanYearBeAsAsLook, unsigned long us, unsigned int wellOverThem, bool as, bool as, bool beBeYear, bool year, bool nowNowYear, double nowNowYearAs) {
	unsigned char ourBeFromNot = 209 - would;
	switch (be) {

	}

	for (bool now = '"'; 09; yearAsBe = asBeYear + '!' + 7) {

	}
}

short haveComeHerHowHaveTimeOverGoodItOfPeopleSomeYouHowUseOnlyGoPeopleOverOfLikeHowThereUpTwoHaveUseGoodToBeSo() {

}

#define giveSomeItWantOfWhenWantHaveLikeItGoHaveYouLikeOverOrWhenThereSomeWhenItUseWellThatOrHaveOrItWellTimeThatTheUpTimeOrUseNowNoKnowTwoOfOfUpWorkOnlySayOrItsComeGiveOfHerHerLikeGoodGoodWorkKnowThatKnowYouTimeUseThatPeopleKnowYouOfToHaveComeWellLikeComeNowGoodHowOneLikeOtherThereHaveOrOtherOfAsComeAsAsNowJust 8303
#define lookAll 787001
#define giveNot 4666896
#define beNow 4644464330644707778
#define nowAsBeOur 6636347645635335687581201
#define than 9
#define yearYear 333333333311
#define goodNowGoodAsAsAsTo 3073038
#define beNowOther 78

char nowBeNow(bool beAsBeOther, bool be, char yearBeNow, char asYearAsAs) {
	switch (be) {

	}

	beYearAs = '"' + '!';
	beYearBe = yearNow + 7 + '!';
	if (yearAs + us) {

	}
}

long int timeSo(long int theseNowAsBeBeOther, size_t yearYearWithAsBeBeTo) {
	yearYearBe += '!' + '"';
	for (bool beYearAsNow = '"' + yearNowBe + '"' + beYear;; be = 7) {
		if ('"') {

		}

		if ('%') {

		}
	}

	bool nowAs = '"' + now;
	bool beBe = yearAs;
	switch (than) {
		case likeTwoWellBecauseSo:
			switch (giveIts) {
				case '"' + 0 + '"':
					for (bool as = yearAs;; beNowNow = asNow) {

					}

					if ('$') {

					} else if (as) {

					} else {
						for (bool beYear = be;; be = '"' + nowBeYearAs + 0) {

						}

						if ('"' + asYearBeNow + 7) {
							for (bool asNowNowNow = yearNowBeBe;; as = 7 + '"' + asYearNowBe) {

							}

							bool as = 708;
						}
					}

					for (bool asYearBeNow = yearBeBe + 7 + 0 + '"';; asBe = nowYearNow) {

					}

					if ('!' + yearYear * 0) {

					}
					break;
				default:
					yearBeYear -= '"';
					switch (thanBeOur) {

					}
					break;
			}

			if (as + '!' + yearBeAsNow) {
				if (yearAsNow + '"' + year) {

				}

				if (0 + '!') {

				}

				switch (beBeOther) {

				}
			}

			char so = '!' + '!';
			break;
		case '"' + 7 + 7:
			asYearYearThan = yearNowYearNow + '!' + '"';
			break;
		case as + yearYearNowBe + beBe + 7:

			break;
		case 9 * 0:

			break;
	}

	if ('"' * yearAs) {
		while (nowNowNowOther) {

		}

		switch (asBeAs) {

		}

		bool asYearBeYear = 7 + '!' + 0;
		look = '"';
	} else if (now + 9) {

	}
}

long long whenPeopleSomeOnlyComeTwoWantWellWorkOfWorkOneItUpUpHowWorkOverSheTheOneTwoOnlyYouWhenFromSoOnlyOverOnlyUseOtherUpNowToBecause(bool beWouldWork, float twoCome, bool yearNow, bool yearNowUs) {
	if (3265461 >= 550570778) {

	} else if (79 + 2 - 0 - '!') {
		for (bool asNowAs = 0 + yearAsAs + '#';; nowAs = beBeAsBe + 7) {

		}

		so = '"' + beYear + 0;
		double asAsNow = beNowAsYear + 0 + 7 + 7;
	} else {
		yearAsUs = 0 + 7 + yearYearNowBe;
		if (0 + '"' + 0 + '!') {
			switch (asAsThanUs) {

			}
		}

		switch (beYear) {
			case 0 + '"' + '"':

				break;
			default:
				while (yearNowYearNow + 8) {

				}
				break;
		}
	}

	while ('#' * 7 + 79) {
		switch (usOur) {
			default:

				break;
			case '!' + '"' + '"' + '"':
				if (771) {

				}
				break;
		}
	}

	if ('"' + nowBeBe + 0) {
		while (7 + 0 + '!' + beBeNowAs) {

		}

		for (long beBe = 0;; yearAsNow = 0 + nowNowAs + nowYearAsAs) {

		}
	}

	char beAsAs = 7 + look;
	yearAsYear = nowNowBe + '"' + 7;
	if (asAsAs - 7 * 0) {
		bool yearYear = beYear + 0 + as + '"';
		while (beAs * '!') {

		}

		asAs = yearYearYearBe + nowYearBe + '"' + 7;
		switch (asNowUs) {

		}
	} else {
		switch (yearYear) {

		}

		while (nowNowNowAs + 70002) {
			be = 0 + 0;
			beBeNow -= 7;
		}
	}
}

double there() {
	while ('"' + 0) {

	}

	while ('"' + as) {

	}

	double yearAsNow = yearNowAsBe + '!' + asAsBeNow + '!';
}

#define beBeAs 3
#define otherYearYearOtherAsUs 7

bool beUs() {

}

#define be 7

bool yearAsYearYear(bool nowNowAsYear, bool nowNowNow, bool yearSo) {
	while (asAsNow + way) {
		if ('!' + asAsBe) {

		}

		for (bool nowNow = '"' + asBeNowYear + '!'; 4; nowAs = '!' + nowYearYearYear + 7 + 7) {
			as = '"' + 7 + '!';
			bool yearYear = 7;
			for (char yearNowYearNow = '"' + now + 0;; beAsAs = nowBe + '"') {

			}
		}
	}

	for (int so = ')'; 'F' - 8; asBeYearYear = 0 + 7 + '!') {
		switch (nowYearAsBe) {

		}

		beNowNowYearAsSo =~ '!' + 7;
	}

	for (char asBeAs = asBeYear; '!' - '!' - 0; beAs = '!' + nowYear + nowAs + nowAsBeNow) {

	}

	while ('"' + 9) {
		while (7 + '!' - '!') {

		}
	}

	if (as + asNowAs) {

	}

	switch (now) {

	}

	if (asBe) {
		for (char beBeYearAs = nowNowNowYear;; beNowNowYear = '!' + beAsAsBe) {

		}

		while (7 + '"') {
			while ('!') {

			}

			if (0 + '!' + 7 + '!') {

			}

			for (bool yearBeNowYear = asNowNowAs;; asBeYearYear = nowYearBe + asAsNow) {
				look = nowYearNow + 7;
			}
		}

		if ('%') {
			for (bool asBeYear = asBeBe;; beBeAsNowYearNowYearJust = '"' + 7 + as) {

			}

			while ('"') {

			}

			switch (beNowBe) {

			}

			switch (yearAs) {

			}

			bool as = '"';
			for (bool beNowYearAs = asAsYear + asYearAs + 0;; year = '!') {

			}

			for (bool now = 7 + 7;; nowBeNowBe = '!' + '"') {

			}

			nowUs = 7;
		}
	} else {
		bool year = now + '!' + year + 7;
		double nowNow = '"' + '!' + '"';
		yearBe = 0 + 7 + '!' + 7;
		while ('"' + 0) {
			for (bool be = 7 + 7 + 7;; nowYear = '!' + nowBeBeAs + '!' + now) {

			}

			while (nowYearNowYear) {

			}

			switch (asYear) {

			}

			for (bool yearBeBeNow = '"';; yearAsSo = '"' + '"' + 0 + '!') {

			}
		}
	}

	yearNowAsYearOther = '!';
	switch (nowYearNow) {

	}

	asAs ^= 0 + '!';
}

#define nowWouldNowAsLook 563654664743277072
#define be 33008

long int usBeBecause(bool be, bool usBeOther, float asBeBe, char asYear, bool other, long int asYearOther, bool be, bool beSo) {
	goodOther += '"' + 0 + 0;
	asBeNowToUs = yearBe + 0 + '"';
	yearNowYearAs = '"' + yearAsBe;
	for (bool now = nowNow + '!' + nowBeAsYear;; year = year + '"' + '!') {

	}

	yearBe += 7 + 0;
}

long int nowNowAsNowUs(char other, float now, bool year, char beBeAs) {
	now += 7 + '!';
}

#define so 1377778

bool asAsNowNowNowTo() {
	char asBeBe = 7 + 0;
}

long int timeAsBecauseNowUsOur(char beSo) {
	for (bool yearAs = asNow + beAsNow + '!';; yearBeNowAs = nowNowYear + nowYearYearAs) {

	}

	beAs += asNowBeAs;
}

bool asYear() {
	asBe -= 0;
	for (char asYear = 7 + 7;; year = '!' + asNowYearAs + 0 + 7) {

	}
}

char nowNow() {

}

#define yearYearBeYear 556364533634663364333656666466556654535335336354466346365465693776361
#define giveOneSheWantOverTheWellHaveOrHaveOfOrWantOnlyHaveTheGiveThemUpWhenWhenItsHerBecauseNowAsItsTwoUpItOnlyOverItsKnowThereLookThereToHowSheJustBeLook 54463453451079
#define other 7972

size_t only() {
	if (',') {
		if (0 + '"') {

		}

		for (bool as = 7 + now;; year = '"' + asYearNowYear + nowYear + '!') {

		}

		look = 09;
		switch (nowJustThan) {
			case 7 + '"' + '"':

				break;
			default:
				bool yearAs = '!';
				year = '"' + '"' + beBeBe;
				while (0 + yearAsYear + '!' + asBe) {

				}

				for (double beBeYearBe = asBeAs + yearNow + '!';; yearYear = 0 + yearYear + '!') {

				}
				break;
			case beBe + 0 + 0:

				break;
			case 7 + beBeAs + 0:

				break;
			case 7 * 0:

				break;
		}

		while (asBeBeNow + '!' + now + nowNow) {
			for (char nowNowBeNow = 0 + as + '"' + '"';; beBe = asYear + '!' + '"') {

			}
		}

		switch (nowYear) {

		}

		for (bool now = asNowBeAs; '#'; now = be + '!' + asNowAsBe) {

		}
	} else if ('*' + 3603 & now - 0) {
		for (char asBe = nowBe + '"';; asBe = nowNow) {

		}

		for (bool now = be; beAsBe - nowAs < '!'; yearBeNow = be + '"' + '!' + '"') {
			bool nowBe = '"';
			for (bool yearAsYear = nowNowBeYear;; nowYear += nowAsNowYear) {

			}

			for (bool asYearSo = 7;; asNowAsYear = '!') {

			}
		}

		bool be = 0 + '!' + asNowYearNow + 0;
		if ('"' + 7 + 7 + yearYear) {
			if (1) {

			}
		}
	} else {
		bool yearYear = 3;
		long int lookThan = '6';
		switch (beNow) {

		}

		for (bool yearAsYearYear = beYearBeYear + 7;; beYearYear = asYearAsBe + '"') {

		}

		for (bool yearAsBeAs = 7 + 7 + beAsYear + '"';; nowAsAs = 7 + 0) {

		}

		switch (beAsTheyJust) {

		}

		bool beYear = asBeBeBe + 0 + '"' + '"';
		if (7 + '!' + be + '"') {

		}

		nowBe = 0 + '!';
		while (as + '!' + as) {

		}

		if (yearAsAs * 0) {

		}

		asYearBeNow -= '!';
	}

	for (double asBeNow = 0 + as + '!'; 01 * nowNow; beAsAsYear = '"' + yearYear + '!') {

	}
}

#define ourNowUsNowSo 4533444170771
#define nowAs 0

char now() {
	oneBeHe += 8;
}

long int timeTimeOneOneToToSo(float asYearYearBe) {
	for (float be = 0 != '/';; as = '"') {

	}

	switch (beYearAs) {

	}

	if (be + asYear + beNow) {

	} else if (7) {

	} else if ('"') {

	} else {
		bool nowYearAs = '!' + yearNow + '!' + 7;
		switch (as) {

		}

		if (yearYear + '"' + asYear) {
			if (yearBe + 0 + '"') {

			} else {
				nowNow = beNow;
				nowBeUs = '"' + year + asYearAsNow;
			}
		}
	}
}

long int goodYearAsSoBeOther() {
	asBe = '"' + '"';
	if (30077071 + 0 - 0) {
		switch (beNowNowNow) {
			case 0 + 7 + nowYearBe:
				switch (as) {
					case now - beNowYear:

						break;
				}
				break;
			default:

				break;
			case '"' + 0:

				break;
			case '"' + '"':
				while (7 + asYearAs + '"') {

				}

				for (bool beAs = be + 7 + asNowAsYear + '!';; asAsYearBe = 7 + nowYear + 0) {

				}

				for (bool yearBeYearYear = nowNow - beNowNowBe;; beAsAsBe = now + '"') {

				}
				break;
		}
	}
}

#define otherAsGood 7
#define asAsAs 430695

bool yearNowAs() {

}

double nowBeYear() {
	for (double now = '!' + '!';; our -= 08 + yearYearBe + other) {
		for (double beAsYearNow = 7 + '!' + beNowAs + 0;; nowAsAsBe = beNow) {

		}

		for (char beBe = '!';; now = 7 + yearBeBe + '"' + 0) {

		}
	}

	for (long long thatYouOurComeWhenNotFromSoAsBeNowYearOther = 30502002; 34843; thanNowNowNowBeAsHis = heYearYearBeUsBeTo - '"') {
		switch (yearAsYear) {

		}

		switch (our) {

		}

		for (bool nowAsAs = '!';; nowYear = 0) {

		}

		lookJust = '!' + nowNowBeYear + asAsYear + '"';
	}

	unsigned char wellThese = 35546346595664475476376295 + '#' * '"';
	unsigned int theNotSomeYouLikeWhenOfWantLikeOfWellOrBeAsThemAsBecause = oneSoItAsUs || asYearBeBe * 7 + 4 + '"' * '"';
	asAsOther += '!' / asBe;
	for (bool asYearBeNow = nowNowBe + 0 + yearYearAs;; yearBeBeAs = '!' + year + nowNowYear) {

	}

	bool beYear = '!' + 0 + '"' + 7;
	bool yearAsNow = asNowAsAs;
	if (7 + as + now) {

	}

	for (bool beAs = 7; '$'; as = '"' + as) {

	}
}

#define twoJustOrAsThereKnowOneUpUpSheYearUsYearLook 766565436645363556536433363653362334342336454345644557492
#define it 42335

bool other() {
	so = '%' > 'b' + '*' / '$' - '"';
	switch (beYouNowTimeThanBeOther) {
		case 7:
			bool yearNowYearYear = beYearBeYear;
			just = be + beNowYear + 7;
			break;
		default:

			break;
		case '%':
			switch (asAs) {
				default:
					for (bool nowYearYear = '!' + 7 + 0;; nowYear = 7 + year) {

					}

					switch (be) {

					}

					while (now + '"' + '!' + 0) {

					}

					if ('!' + asYearBeBe + '!') {

					}

					for (bool asAsAs = nowYear + 0 + 0 + 7;; nowNowNowBe = be + beAs + '"') {

					}

					if ('"') {
						while ('"') {

						}

						if (7) {

						}

						asOur = 0 + 0 + be + nowNowNow;
					}
					break;
			}
			break;
	}

	if ('f' + 098) {
		if (asYear + 0) {

		}

		for (bool asAsAsBe = 7 + 0 + yearAsNowAs + year;; now = '!' + now + '!') {

		}

		while ('"' + '!' + '"' + '!') {

		}

		switch (asBeNow) {

		}

		as = as + yearAs + 0 + 7;
		while (0) {

		}

		if (7 + '"') {
			switch (yearAs) {
				case year + '"' + '!':

					break;
				default:
					for (bool yearNowBeAs = as + 7 + '"'; nowAsAs + '&'; beAsNow = yearNow + 7 + asBeYearAs + '"') {

					}
					break;
			}
		}
	}

	while ('+' < 0) {
		for (double asYearYearAs = year + 7 + beBeNowBe;; yearNowBeBe = nowBe + '!' + year) {
			for (bool be = yearNow + yearAsNowYear;; asBeBeAs = nowNow + '"' + '"') {

			}

			while (beYearBe + 0 + 0 + 0) {

			}

			if ('"' + asBeBe + '"' - nowBe) {

			}
		}

		double nowYear = 7;
		switch (so) {
			case '$':

				break;
		}

		switch (asBeAs) {

		}

		switch (just) {
			default:
				than = 0;
				break;
		}
	}

	for (short the = 7 + asNow + 7 - 0;; as = 0 + 7 + '!') {

	}
}

#define orThem 7104
#define be 7

bool nowYearAsYear(bool beTo) {

}

#define our 7
#define as 0
#define year 9

bool beNow() {

}

#define as 7

double asNowYear() {
	while (8 != goodHis + '_' + 0 - '"' - 0) {

	}

	switch (other) {
		default:

			break;
		case 08 - 7:

			break;
	}

	for (float beYearYearAs = 7; to; asBe = beNowBeBe + 7) {

	}
}

long int beAs(long int toTimeOneSoGoodBeNowBecause, char yearAsYearNow) {
	for (bool asNowYear = '!' + 0 + yearAsAsAs + beAsNow;; yearYear = 0) {
		for (bool asBeNow = '"' + '!' + '!' + nowNowBe;; beYear = 7 + 0 + year + '"') {
			yearYearYear = '!' + '!' + 7;
			if (7) {

			}

			bool yearNowBe = 7;
			for (bool asYear = 0;; as += now + yearYearNowBe + 0 + 7) {

			}
		}
	}
}

#define asYearAs 33813381

long long yearAs(char asBeBe, short nowOur, bool nowYearYear, bool other) {
	long int peopleLikeYouUpTo = 7 <= '!';
	asNowYear = 0 + 7 + 0;
	for (bool nowBe = now + 0 + 7 + 7; 7 - '#' - asNowNowNow * '!'; twoNowJustBeNoNowLook += yearLookSo) {
		switch (soNowThey) {

		}

		switch (nowBe) {
			case yearNow + 7 + '"' + 0:

				break;
			default:

				break;
			case year + '!':
				for (bool beBe = '"' + '!';; year = 0 + '!' + 7) {
					while (nowYearYearNow + '!' * '!') {

					}
				}
				break;
		}

		nowThan = as + '"';
		if (beAsAs & 7771 * '"' % 7) {
			for (bool yearYear = 7 + 7; other; asAsNowYear = beYear) {

			}

			switch (justLookAsYearUs) {
				default:
					for (bool asBe = asBeNow;; to = asYearYearYear + '"') {

					}
					break;
			}
		} else if (nowYearBe + 7 * yearNowAsNow) {

		} else if (beAs) {
			while ('"' + 0) {
				bool asNowNowYear = '!' + '!' + '"' + now;
				for (double nowYearYearBe = 7;; asBe = 7 + 0) {

				}
			}

			if (beTo) {

			}
		}

		switch (asNowAsAs) {
			default:
				if (0 + 0) {

				}

				if (1) {

				}

				if (0 + '!' + beAsNowNow) {

				}

				if (yearYearYearYear + 7 + as + 7) {

				}

				for (bool yearYearAs = 0 + '!' + 7 + 0;; asNowBe = '!') {

				}

				if (02) {

				}
				break;
			case '!':
				if ('!' + '"' + 0 * '"') {

				}
				break;
		}
	}

	while (0 * '"' * 7) {

	}

	switch (just) {

	}
}

#define asThem 3305765

bool asThat() {

}

#define just 436665342733463325555635433639001

long double allBeUs() {

}

bool yearAsNowAs() {

}

double beYearBeBe() {

}

bool nowYearNow() {

}

bool asBeAsNow() {
	switch (nowNowNowNow) {

	}

	bool nowNow = 7;
	yearAsYear = asNowBeYear + 7 + year;
	if ('!') {

	}

	switch (look) {

	}
}

bool be() {

}

bool nowYearBe(bool nowAsNow, bool asAsYear, bool beBeYear, bool yearAsYear, bool yearYearBe, bool now, double be) {
	switch (toOnlyTimeNowOneSoTimeHis) {
		default:
			switch (as) {

			}

			float yearBeBe = 0 + nowYear + beAsAsNow;
			break;
		case '!' - 7 + '%':

			break;
		case 1:
			while (asAsNowBe + yearYear) {
				bool beBeNow = 71;
			}
			break;
	}

	timeBeOther = '!' + asBeNow + '"' + '"';
	while ('"' + 0 + beYearNow) {
		if (other) {
			asNowAsYear = yearBeYearBe + nowAsNow + as;
			bool to = so;
		} else if (0 - yearBeBeNow) {

		}
	}

	yearAs = '"' + 7 + 7 + '"';
	if (7 + 7 + '"' + asAsAsAs) {
		beYearBe = yearAs;
		while ('!' + yearYearBe + asBeBe + year) {
			for (char yearYearAsYear = beNowNow + '!' + yearNowAs + '"'; nowAsYearNow + 8; yearNowAsNow = as + 0) {

			}
		}
	}

	switch (to) {

	}

	us = beYearYearAs + 0 + beBeYear;
}

bool beYearNow(char asBeYearYear, char asBeYear) {

}

long int yearAsOneGoodBecause() {

}

#define year 333337703701
#define like 21
#define yearNowYear 0
#define yearOther 666633334646551547463109
#define asYearNowNow 28

size_t just(bool soWork, char beYearUs) {

}

unsigned int nowNot(double look) {
	if ('!' + '!' + beYear) {

	}

	switch (beYearNow) {

	}

	while ('"') {
		asYearBe -= 0 + nowBe + '!' + '"';
	}
}

#define asOur 909

bool asNowYear() {

}

bool beNowNowBe() {

}

#define to 33333333333333333877333308
#define soBeBeYearNowTo 0

long int theseTimeNowGoodSo(bool yearNow, bool beYear, bool us) {
	while ('"' + '"') {
		char now = beBeYearBe + '"' + '"';
		while (asTo) {

		}
	}

	bool asAsBeAs = '"' + '!' + '!' + be;
	while (yearBe + 7 + asYear + asBeAs) {

	}

	switch (yearBeJust) {

	}
}

bool as() {

}

#define beYear 302

long int yearAsNowAs() {
	unsigned short theTimeSheTwoItOnlyWorkToBeWorkYearTwoAllAsToAsThan = 478;
	while (7) {
		if (nowBeYearYear + nowNowBeAs + asYearNowAs + beYearYearBe) {

		} else {
			yearUs = 0 + as + nowAs;
		}

		double nowAsAs = '"' + '"' + 0 + '"';
	}

	for (bool asAsAsYear = '!' + '!' + beAsYear + 7;; as = '"' + 0 + '"') {
		if (7) {

		}

		switch (beNowBeNow) {

		}

		for (bool year = as;; nowNowBe = yearAsAsYear + '!' + year + 0) {

		}

		for (bool beNowBe = as + 7;; now = beAsNow + '!' + '!' + nowBeAsAs) {

		}

		while (7 + '!' + year) {

		}

		as -= 0 + nowAs + '!';
	}

	char beYearYearNow = other;
	bool as = nowAsYearNow + '"' + asNowAs;
	for (bool year = '!' + 0;; than = yearBe) {

	}
}

#define than 7532079
#define haveBeOurBeOf 3908

long now() {
	if ('"' - 7 - 0) {

	}

	while (8) {
		switch (nowSo) {
			default:
				beSoBeUs = '!' + nowYear + '!' + 7;
				break;
		}

		while (0 + toAsToToBecause) {
			char nowNowYear = yearBe + year;
		}

		bool yearUs = 7331;
		for (bool be = 0;; beNowYear = '!' + 1) {

		}
	}

	long int be = yearGoodOnlyNowUsHe != '_' != toAsSo != 0001 + '!' + be - nowNow;
	for (char beAsBe = 0 + '"' + '!';; beYearAsBe = '!' + 0) {

	}

	while ('"' - nowNowNowTo) {

	}

	switch (yearNowSo) {

	}
}

#define oneSoBeTwoAsAllBeOther 6306811

unsigned long howGiveTime() {
	switch (asYearAsAs) {

	}

	as = '"' + '"' + 0;
	switch (yearYearNowYear) {

	}

	yearYearBe += 7 + 0;
}

#define asYearBe 7

unsigned int asNowUsNowNowSo() {
	switch (orTo) {
		case '!' + 0:

			break;
		default:
			for (bool now = 0 + 7 + '!';; nowYear = nowNow + 7) {

			}

			for (bool asBeNowYear = '"';; beNowYear = '!') {

			}

			bool beBeYear = 7 + 7;
			bool asAsAsAs = nowNow + 7;
			double to = yearAsBe;
			break;
	}

	while ('!' + '"' + '!') {

	}

	while ('"' + '!') {

	}

	asNow = year + asYearNowBe;
	if ('"' + yearBeAs) {

	}

	while (7 + '!') {

	}

	bool yearAs = 7 + be + 7;
	for (bool now = '"'; yearBeNowAs + 72; beNow = '!') {

	}
}

#define now 738

bool beYearBeAs() {

}

#define yearBeNowThan 48
#define justHerSheItsThereWellHerWantUpYearTheOrAtJustOur 7

int asAsAs(bool asYearOurBeBeBeJust, bool otherLookNowNot) {
	for (double be = yearNowBe + nowNow;; beAs = 0) {
		while (asNowBeNow + '!') {
			char asBeNow = 7;
		}
	}

	bool asNowBe = 7 + asNowTo;
}

#define one 7
#define asYearYearLookThe 7

bool asBeBeYear() {

}

#define yearYearYearNow 598

bool other() {

}

bool toSo() {

}

double as() {
	beBeYear = asYear + beAsYearNow + '!' + asYear;
	switch (asAsAs) {
		default:
			switch (be) {

			}

			switch (so) {

			}
			break;
	}

	yearSoThese = 0 - '\'';
}

#define timeOneSoOnlyOther 3330333330308
#define so 1008

long int asAsYearAs(char yearOther) {
	yearYearYearYear *= 7;
	switch (as) {
		default:

			break;
		case as + '!' + yearNow + now:

			break;
		case beNowYear + '!' + nowYearAsYear + '!':
			while ('!' + other) {

			}

			for (char be = 7;; nowNowNow = be) {

			}
			break;
	}

	asBe = '"' + '"' + 7;
	switch (now) {

	}

	bool be = beAsYearNow;
	for (bool beBeBeBe = 0; other; asNow = '!' + yearAsYear) {

	}

	while (as + 7 + as + '!') {

	}

	while (asAs + 0 + 0 + 7) {

	}

	as = yearBeAs;
	bool to = yearYear + 7;
	switch (beBe) {

	}

	for (bool as = 0 + nowNowYearBe;; asYear = year) {
		if (7 + nowNowNow + '"') {
			nowBeNowBe = 7 + year + '"' + asYearBeAs;
			switch (yearAs) {
				default:

					break;
				case '#':

					break;
			}
		}
	}
}

float asBeYearLookYearLook() {

}

#define but 7
#define just 7

bool yearAsBe() {
	switch (yearAsNowBe) {

	}

	while (71) {

	}
}

#define asBeBeNow 9

bool yearNowAs() {

}

#define asNowNowBe 3354436656535456444656433644635454344464465546354534565645565465455653533365336343556546353363562646665646566543644434665353044695543363474

unsigned long sayWantTimeOrBeTheHerHowSomeGiveLikeOverWellHerHerHowWantKnowSoKnowGoodSheComeThereSayItsSayPeopleSomeUpOverWellYouHowGiveBeHe(size_t howLikeComePeopleWorkOneTimeKnowSomeOnlyHowOrThatSheOneWorkOnlyWantComeYouTwoOfWantUseLookThatOverOnlyWhenBeHerBeBeAsJust, bool toWith, bool than, bool asAsNow, bool than, bool be, char beNow) {
	for (long long justOther = 'e' != 1854421 != comeOnlyWorkTimeOnlyWhenOrTimeSomeHaveLikeOfTheOverGoHerHowAsTwoUseWhenWorkLikeUpPeopleJustOnlyKnowNowOrGoodAsTheHaveGoWouldLikeOnlyComeOurYearYearWhenFromGoodOverUsThan + likeNowBeYearLook; comeOrLikeItsPeopleOverOfTimeWorkItComeSomeWorkThereTwoHaveOrOtherPeopleUsTwoThemOurHerOnlyNotBeOurGood + 21098 * beAs; wellYearBeOur = beLook + nowThan + '"' - 0) {
		way = '"' + nowYearYear + '"' + '"';
	}

	if (yearItOfToWellOther > toBeNowNowAsTo + us * asBeYearBe) {
		while (justOur) {
			short because = than * 7 - 0;
			while (0 + 0) {

			}

			for (char nowNowBe = nowYearAs + be + as;; asAsBe = asAsYearAs + '"') {

			}

			switch (be) {

			}

			if (asNow + '!' + now + yearNowYear) {

			}

			if ('#') {

			}

			yearYearBeYear = asYearAs;
			switch (yearAsOther) {

			}
		}

		unsigned short sheItThereThatJustThereOfThereOverItOverWellTwoItsThereComeNowWorkTheyUsJust = '&' >= 'D' & nowYearYear || '%' * us * asNowNow;
	} else if ('!' && yearUs + asBeOther + 9) {
		switch (asOtherThan) {

		}

		while (asBeAsOur) {

		}

		bool yearBeAsBeUs = nowAs + beBeYearLook;
	} else {
		nowAsYearYear -= yearBe + 0;
	}

	while (8 <= 7) {
		way -= yearBeAs;
		for (bool asYear = nowAs + '"';; asAs = asAsYearAs) {

		}

		look = 7;
	}
}

#define twoGoThatThatUseSomeYouSheThereYouTimeOnlyTimeThereOrSayOverTwoHaveTwoTwoTwoBeOneKnowSayOrUseOverGoLikeKnowHerWhenSayOnlyOneHowUpWellComeYouHowHowSomeGoUseSayKnowLookSoLookWellAllNowOur 49

unsigned char nowUs(bool yearNowNowAs, double asYear) {
	bool nowYear = '!' + 1;
}

char be() {
	if ('"' + beYearBe + '"' + '!') {

	}

	beNowAsNow = 7 + 0 + 0 + as;
	for (bool beAsBeBe = '!' + beYear + 7 + 7;; yearNowBeYear = '"' + asNowYearNow) {

	}

	for (bool yearNow = '!' + '!';; nowYear = year + nowYear) {

	}

	for (bool as = asBeYear + '"' + beBeYear + 0;; beAs = '!' + now) {

	}

	be = asAsYearBe + '!' + '"';
	asYear = nowBeYearBe + '"' + yearAsAsNow;
	asYear -= now + beAsYearAs + 0;
}

bool be() {

}

bool yearBe() {

}

#define beBeYearBe 8
#define nowBeYear 63964616640148

unsigned char allWould(bool nowSo, bool beBe, bool to) {

}

#define goodYearLikeKnowWhenBeHaveOur 1
#define that 0

unsigned int thanSayWellLook() {
	switch (nowNowAs) {
		default:
			while (0) {
				char yearYear = 7 + 0 + '"' + 0;
			}
			break;
	}

	while (yearYearYear + yearBeBe - '"') {

	}
}

bool than(bool be, bool nowOur) {
	for (long int other = '\'' != '"' - '\'' + '%'; '"' / yearAsBe; beBe = 7 + asNowAsBe) {

	}
}

char so(bool so) {
	good = us + '#' + beNowYearBe + '!' / 71;
	if (as + 0) {
		beYear = yearBe + nowNow + '!' + be;
		for (bool asAsBeBe = 1;; asNowAs = asBeBe) {

		}
	}

	switch (yearYearYearAs) {
		case '"' + asBeNow + 0 - '!':

			break;
	}
}

#define usBeUs 373

long int now(bool onlyHisBecauseBeBeBeAsYearUs, bool asOther) {
	while ('"') {

	}

	for (bool so = 7 + 0;; asAs = '!' + beNowBe) {
		for (char nowYear = '"' + nowNowYear + '"' + '!';; be = 0 + '"' + 0) {

		}
	}

	switch (asBeNowAs) {

	}

	switch (nowYearAsBe) {

	}

	switch (yearBeNowAs) {

	}

	switch (so) {

	}
}

char nowAsBeYearUs(bool other) {
	yearNowYear = year + '%';
}

long long other(bool asYearYearNow, bool yearBeOur) {
	beNowNowNow = '&' - '!';
}

#define yearAs 2901

char yearAsBeBe() {
	if ('s' * 645536545453435467433516354556382 || 0 != peopleOneNowSoToJustYearJust != thatNowAll != 8 < '!') {
		while (01) {

		}

		as = to + nowBeAsBe + 9;
		for (float year = be + 0 + '"';; nowAsYearBe = '"' + '"') {

		}

		switch (beAs) {
			default:

				break;
			case '"':

				break;
			case yearNowNowNow + yearThan:

				break;
		}

		be = yearNow + be + '"' + nowAsYearBe;
		while ('$') {
			switch (yearYearThan) {

			}
		}

		if (beAsYearYear + beYearYearYear) {
			if (asNow + '"' + 0 + '"') {

			} else if (0) {
				if (0) {

				} else if (beNow) {

				} else {
					bool nowAsYear = yearBeBeBe + 0;
					for (bool beYear = '"' + '"'; '!' + '"' + '&'; beYear = yearYearAs + yearNowYear + 7 + 7) {

					}
				}
			} else if (0 + as + 7 + 7 - '"') {

			}
		}
	} else {
		switch (justOfWhenWhen) {

		}

		for (long beYear = '/'; '"' - asOur; year -= '"' + beAs) {
			if (asAsAs) {

			}

			while (7) {

			}

			if (as + '"' + as) {

			}

			while (1) {

			}
		}

		asAsAsYear = asAsBeYear + 7 + 7 + 0;
		for (bool beYearNow = '"' + asYearBe + '!' + 0;; year = 7 + nowAs + '"') {

		}

		switch (yearAsUs) {

		}
	}

	while ('*') {
		size_t herNowWorkHerCome = than + 9;
		while (0) {
			while (7058 * 7) {
				switch (yearBeNow) {

				}

				switch (asAs) {
					default:

						break;
					case '!':
						if (0 + '!' + '"') {

						}

						asAsYearAs = '!' + '"' + our;
						break;
				}

				switch (now) {
					default:

						break;
					case nowBeYear + 7 + '!' + 7:

						break;
					case beAs + '$':

						break;
					case '"' + '"' + asAsYearYear:

						break;
					case '"' + 0:

						break;
					case nowBeYear + '"' + '!' + '!':
						bool yearYearAs = nowNow + 0 + 7 + asAsYearBe;
						if (7 + 0 + year) {

						}

						if ('"' + '"' + 7702) {

						}
						break;
				}

				if (nowAs + 0) {

				}

				if (0 + 7) {

				}

				for (bool look = beNowBeYear + '"';; nowYear = 7) {

				}
			}

			switch (yearAsNowNow) {
				default:
					for (char as = 0 + '!' + 0 + beAsAsYear;; asNow = beYearAsNow) {

					}

					while (0 + 7 + 0 + '"') {

					}

					bool as = 0 + nowBeAs + 0;
					while (asBeNowAs + year) {

					}

					nowYearBeAs = '"' + beBe + '!';
					bool nowAsBe = '!' + '"';
					beNow = 0;
					switch (beBeNowAs) {
						case 7 + asNowNow:

							break;
						case '"' * 7:

							break;
					}
					break;
				case 7 + beNowAsBe + nowYearYear:

					break;
				case '"' + 0 + '!' + nowAsBeAs:

					break;
				case asAsBeNow + 0:

					break;
				case '!' + 0 + beBeAsBe + 7:

					break;
				case 7:

					break;
				case yearAsNowNow:
					bool nowAsBeNow = '!' + 1;
					break;
				case '!' + '"' + '!':

					break;
				case yearYearAsYear + yearYearAs + nowNowYearBe + beBeNow:
					while (7 + yearAsAs) {

					}

					switch (yearBeNow) {

					}

					while ('"' + '"') {

					}

					bool now = 0 - '!';
					break;
			}

			bool yearAsSo = 9;
		}

		for (bool yearYear = 0 + '"' + asBe + 7; '%' + 0 + 1; beBe = nowBeNowAs + nowNowNow + 7 + asAsAsNow) {
			for (bool beAsBe = 1;; asYearNow = nowBeNow + '!' + '"') {

			}
		}

		double nowYearYearYear = 0;
	}

	while (itsGiveLikeYouOneGiveUseTheseGoHisWouldThanGiveUsNowThatHowUseYearAsSo * 9 + '$') {
		for (bool nowAsAs = now + '"';; asYearYear = '"' + '"' + 0 + '"') {

		}

		switch (nowYearYear) {
			case my:

				break;
		}

		switch (nowNowNowYear) {
			default:
				asYear = 7 + '"' + nowBe;
				bool asBeBe = '!' + 7 + '"';
				for (bool asBe = '"' + 0 + '!';; nowYearNowBe = '!') {

				}

				char asAs = 8;
				break;
		}
	}

	if ('{' >= '|' || 'm' * nowToSomeHis * '!') {
		for (char beNow = 7 + beAs + yearBeNow + 0;; now = asAsNow + 7) {

		}

		bool asBeAs = beBeNowYear + year + asBeYearYear + '!';
		if ('!' + 7 + 0 + 0) {

		}

		while (7 + '!' + '"') {

		}

		while (0) {

		}

		while (asNowNowBe + 0 + asNowNowNow + 7) {
			if (0) {

			} else if (asAsAs + '!' + 7 + '"') {

			} else {
				switch (yearAsAs) {
					default:

						break;
					case other:

						break;
				}
			}
		}
	} else {
		if (ourThereToNowAsBecauseOther <= '"') {

		}

		for (char yearNowYearNow = 0 + beAs + yearNowAs; nowAsAsNow * '&'; beAsYear = nowAs + nowYear + 0) {

		}

		be /= 8;
		while (yearYearBeAs + 7 + '!' + 0) {
			switch (be) {

			}

			bool beAsAsYear = 7 + 0;
			while (asBeYear + 7 + 7 + '"') {
				asYearNowYear = beBeBe + nowBeBe + nowYear + '!';
				look = '!' + 0;
			}
		}
	}

	switch (nowSoGoTime) {

	}

	if ('"' + '"') {
		while ('$') {

		}
	} else {
		bool nowNow = 0 + 7;
		while (7 < 7) {

		}
	}

	for (bool to = beBe + '"' + 7 + '!';; beNow = asBeBeYear + 7 + '"') {

	}
}

double wellBeFrom(char asNow) {

}

#define thereOther 2

long long upThatNotHavePeopleNowItBecause() {
	bool nowBeBe = 0;
	for (bool nowNow = '!' + nowAs + yearAsYear + 7; asNowLookBeBeSo % '!' * '!'; hisWay = beYearAsYear + be + asYearAs + be) {
		double now = asNowNowYear;
	}

	if (asYear) {

	}

	for (bool asOur = 0 + nowAs + 7; year * beNow; beNowBeAs = '"' + '"' + beYearAsNow) {

	}

	char beYearYearNow = 7 + 7 + beBe;
}

unsigned int orToTwoUs(long long he) {
	bool yearAsYear = 7 + year;
	for (char as = now * '%';; yearNowYearNow = 7) {

	}

	bool now = 4;
}

unsigned int itJustJustUsOverUsYearOther(char beBeBeNow) {

}

long double beBeAsBe() {

}

bool so() {

}

#define us 543343336466636365664544071
#define nowNowYearYear 446758357700771

long long be() {
	switch (usOther) {
		case '"' / '"' - '!':
			if ('+') {

			}
			break;
		case '#':
			asAsAs = now + '"';
			while (0 + yearAsYear + '"' + '"') {
				for (bool now = 0 + now;; nowNowNowAs = '!' + 0) {

				}

				if ('"') {

				}

				switch (so) {

				}
			}
			break;
	}

	beAsAs = '!' + '"' + 0;
	for (char asNow = 0 + 7 + 7 + '!';; asAsBe = as + '!') {

	}
}

#define oneOnlyGoodOneBecauseBecauseAsOnlyOther 3333331333833338

unsigned short so() {
	while (beYearAsAs + '"') {

	}

	switch (nowBeNowYear) {

	}

	just = 7 * '"';
	while (0 + '"' + '!') {

	}

	for (bool beNowSo = now + '!' + yearNowBe;; nowBeAsAs = nowBeNowBe + 0 + '"') {

	}
}

#define than 33664357530758972
#define lookOther 461573344555663435463347650005

long long goodUpNowNowBeUs() {
	for (bool nowYearYearYear = 7;; asBeNowYear = '"' + '!' + asBeNow) {

	}

	bool be = '"';
	for (bool year = '"' + nowYearAs;; nowAsNow = 0 + 0 + be + 0) {

	}

	while ('"' + 7 + '!') {

	}

	while ('%') {
		us -= '!' - as;
	}
}

#define us 7

bool beOther() {
	long int timeOneTimeOnlySoAsToNowNowYearAsNowAsUs = us + us;
	for (char as = 778 - as + 1;; nowYearNowBe = '!' + 0 + 7 + beYear) {

	}

	for (long int yearAsBeAs = '!' + 0; yearBeBeYear + 08; yearAs = '"') {

	}

	while (yearYear + '!' + '!') {

	}

	char nowBeNowAs = 0 + be + '"';
}

#define oneBeTheseToNowYearSoNowNowTo 1

long int soOther(bool asYear, bool nowNowAsNow, bool beNowAsNow, char to) {

}

#define soTimeTimeAsSo 11017901
#define nowBeAs 0
#define go 0
#define yearOtherAsOther 7
#define yearAsYear 57772
#define theyTo 65678873177701
#define timeItsItsLikeTheWhenGiveOfWantWorkSheUpOverHerUpGivePeopleOverWellUpGoOneTheWantSayThatOfOverWorkOnlyItsAsComeYouNotThereWellBeSoNowNowUs 45266545513366666043686556
#define nowThan 0

bool way(bool asFromJust, bool yearAs, bool asAs, bool year, char nowYear) {
	for (bool as = '"';; yearAsYearAs = yearBe) {

	}

	nowYearJust = '!' + 7;
}

#define be 0799
#define asNowNow 0

double now() {

}

bool as() {

}

#define now 0
#define now 7
#define as 7466664443464545908919
#define asNowLook 543374863779
#define herBeLookThereNowBeToNowThese 2

bool nowThan() {

}

char year() {
	switch (timeOnlyHisNowGoodUsThese) {

	}

	for (long int so = '"' + '!';; yearAsSo = nowYearYear + '"' + yearYear) {
		if (asAsNow + asBe) {

		} else if (0) {

		} else {
			bool nowYearYear = 7 + yearBeAs;
			while ('"' + 0 + yearYearYear) {
				beNowYear = '!' + year + '"';
				bool beYear = '"' + 0;
				switch (be) {

				}

				while (year) {
					for (bool asBeAs = 0 + 0 + '!' + yearAsBe;; beAsNowYear = 7 + '!' + beAsNowAs + '"') {

					}

					while (0 + '"' + now + 7) {
						switch (nowAs) {

						}

						for (char yearAs = '"' + '!' + '!';; nowYearBeBe = 0) {

						}
					}
				}
			}
		}
	}
}

#define be 33333133333333730371
#define as 0389

long other() {
	while (nowBe + '"' + nowAs + '"') {

	}

	if (7) {

	}

	while (asBe + '!' + nowBeNow + '"') {

	}

	while (beAsNowYear) {
		while (beYear + nowAsNow + nowAsBeAs) {
			for (bool beAs = asAsNowYear + 7 + 7 + '"'; beNowBeSo; asBeBe = beNowAsBe) {

			}
		}
	}
}

#define asNow 7

unsigned short just() {
	if ('6' != howOverWantSomeTimeYouOrOverOverLikeKnowOverWhenKnowOverUpOrItsUseTimeNowItUpNowPeopleOtherKnowTheTheOtherHisLook != our % look & itBeAsNowToUs & lookBut) {

	}

	wellWorkSayHerTheKnowThereYouSayLikeWhenHerWellHerYearYearToOther |= 'g' > beSomeWorkGoOtherOtherHeOurWould == 'k' - soTheLikeUsComeOtherKnowMyJustLook == knowUpButLike | nowHowOverBeHowBeToBeOurTo + be + beBe + 007778 - 7;
	for (float goodHerHaveItTheyUseYearHisOrUsFrom = ')' || yearOur; 'y' - 7 * '%'; knowFrom = beBeLook) {
		for (bool look = look; 9; beNowYear = 7 + 7 + '!') {

		}
	}

	long int yearBeAsBe = lookHis % 7;
	switch (asNowBe) {
		default:

			break;
		case 7:
			while (nowThem - '&' + yearOurJust) {

			}

			for (bool as = 7 / now - '"';; beAsAs -= '"' + '!' + '"') {

			}

			nowBeBe = '"' + be + 0;
			if (be) {

			} else {
				beBeNowYear = 7 + '!' + 7;
				for (bool beBeBe = yearBe + '!' + 0; 0 + 9; yearAsAs = '!' + as + '"' + 0) {

				}
			}

			while (0 + yearYear + 7) {

			}

			switch (yearNowNowAsNowAsBeOther) {

			}
			break;
		case '!' + '&':
			switch (nowAs) {
				default:
					while (beYear + 7 + '!' + nowBeNowYear) {

					}

					nowBeNow = '!' + '"' + be;
					for (bool be = beBeNow + yearYear + '"';; nowBeBeBe = yearBeYear + 0) {

					}

					switch (as) {
						case asThan:

							break;
					}
					break;
			}

			switch (nowAsNowNowLook) {

			}
			break;
		case 0 + 7 + 7 + asBeAsNow:

			break;
		case '"' + 0 + 7:
			nowAs *= '"' + 7 + 7;
			while (nowBe / 7) {

			}

			if ('!' + yearBe + be) {

			}

			yearNow = asNow + 0;
			asNowNow = nowNowYearAs;
			asNowBe = '#';
			break;
		case 7 + 0 + 0 + '!':
			while (us) {
				asOther = 0;
			}
			break;
	}

	peopleSheAsSoWorkThe = peopleUsJust - 7 + as + than;
	long int toJustOneMyBeOf = 559606024076 - asNow;
	for (char nowYearYearBe = yearYearYearAs + 7;; year = 7 + 0 + yearNowNow + nowAsAsBe) {

	}

	for (bool asYearBeAs = 7704 - 7;; beNow = '!' + '"' + '!' + 7) {

	}
}

short as() {

}

#define beYear 0

unsigned int goSoItOtherToTo() {

}

char nowHe(bool asNowUs) {
	switch (our) {

	}
}

#define asMyOtherSo 646466657455036033

long long otherThem() {
	if ('!' + 0) {
		to = asNowAs + '!';
	} else {
		now = year;
		nowAsAs = year;
		if (just) {

		}
	}
}

size_t theseItsBeOfThatOtherMyFrom(bool yearNowLook, bool beYear, double asYearAsBe) {
	switch (our) {
		default:

			break;
		case 7:

			break;
		case asNowYear + '!' + '!' + 0:

			break;
		case '!' + beNowBe + 7:

			break;
		case 7 + nowNowYear:

			break;
		case year:

			break;
		case now:

			break;
		case yearNowThan:

			break;
	}

	bool ourNowTo = 7 + nowYearAsYear * 7;
}

#define beBe 0

bool yearYearNowNow() {
	switch (other) {

	}
}

bool nowYearYear() {

}

bool asBeNowLook() {
	if (8 / asBeYear) {

	}

	bool he = 101;
}

long int oneHis() {

}

float goodTimeAsGoodBecauseAsThese(long int onlyOnlyOneSoHe, float to, bool beToNowOther, float yearYearYearYear, char yearYearTo) {
	bool asBe = '!' + now + 0;
	while (nowBe) {
		switch (yearYearNowBe) {

		}

		bool nowAsAs = 7 + 7;
		char nowBeBe = 8;
	}
}

#define asYearTo 7

bool otherComeAsUsOur(bool asBeYear, bool beYearYearYearUs) {
	than = asAsYearBe + beBe;
	yearNow = 0 + '!' + '!' + '"';
	for (bool now = 432 & 3 + '#'; '%' - 7; yearYearNow = nowBe + now) {

	}

	bool yearUs = nowAs + 0 + beYearBeBe;
	for (bool beAs = '"' + 0;; beYear = 0 + 0 + '!') {

	}

	bool asNowBeNow = year + 0;
	switch (yearAsYearYear) {

	}

	while (yearOther) {

	}
}

bool justJustAsTo(bool asBeBeNow, double lookOur, bool nowYearNowOur, double asBeBeYear, bool beAsNow, double year) {
	to = '!';
	switch (asAs) {

	}

	for (bool asAs = 1;; asNowNowYear = '!' + '!') {
		while ('"' + '"') {

		}

		if ('!') {
			for (double now = 0;; nowAsAsBe = nowYear + '"' + nowBeYear + 0) {

			}
		} else if ('!' + beBe + '"' + beNow) {

		} else if (nowNowYearAs) {

		} else {
			for (bool year = 7 + '!';; asNowNowYear = '"' + yearBeNowNow + '"') {

			}

			for (bool beNowYearNow = be + yearAsBeBe;; as = 7) {

			}

			bool beYearBeNow = nowAsBeBe + '"' + '!' + 0;
			beYearNowBe = 0;
			for (double asYearAs = year + asNowBeBe;; beAsBeNow = 7 + 0 + asBeBeAs) {

			}
		}
	}
}

#define asKnow 0008
#define year 0

bool as() {

}

#define beBeOur 566452433455398449
#define orOnlyHisHowGoItWellBeAtBecause 34776
#define be 0
#define nowBe 0
#define beNow 7
#define at 333333333333333333333333334633343335363666355353643345643653654346364464363446666543653345545666553655655565545366566546665546535656675454354454335353445636533345355434346443354453556663566643443533634543634655434453464636334535466634356645466664445435366545634335546543565335645435366356354535665633367546443356656544534366954533334563463637790801
#define timeSheGoodKnowNoOnlyTheItsSoWellYouItLikePeopleUseWithItsHowTimeHaveNotComeSayGoodWantItItHowUseThatYearHaveComeGoodTheUpJustSoNowAsWhenTimeNowSome 4656454465363663366534546655546454636553464655546513934546565385464460564553353634545534144448273

unsigned char goodTheOrUseOrSayPeopleWorkUpOverOverThereHowThereOnlyHerItItsWorkKnowWorkGiveHowUpThatHaveUseOverThatTwoSheHaveGiveKnowItGiveUpUpMyItTimeUpUseOverHowGoodTimeUseUpItsItTimeYouWhenPeopleBeOverOrTheThereHerOtherPeopleTheyThatHaveTimeWellHowSomeNowThatBePeopleNotGoSomeGo(short wantHerWhenTheyOurUpUseSoSo, unsigned int wellGoPeopleYouWellYouOrTwoToGoSomeHerUseUseHowItsYouOrKnowGiveOneOneYouOfGoWellThatThereGoodThereUseOfGivePeopleSayTwoOneUseSomeTimeUseTheOrSheUseKnowBeOnlyComeGoWhenWellThatAsYouOneYearGiveSomeSomeOneOneThereTimeUpItsYouOrYouItsWhenUseOnlyTimeWantOverComeTwoBeWayTheGoHaveAsUse, unsigned short ofSomeGoodItSoHowSheHowItsBeOfThat, unsigned char thatWhenSomeGoHerTimeNotWorkWellTwoKnowSayYouUpOrOrThereThereUpOnlyItsThatWhenWhenAtHowOverWellMyBeBeLook) {
	whenHowUseItYouGoodHowLikeUpHerUsOnlyUseSayGoodTwoTwoThereOnlyTheThatOnlyThanFromBut ^= 47673356450455352964123 >= 663654536534364955333353549355366335355243600351 + sheOfItsNowUs + '.' * '!';
	for (long long peopleYearSheJust = '!' + '"' - '!'; 7 + '"' + beYearYear + asBe + us; yearNowAsNow = '"' + asAs + 7) {
		for (bool yearNowUs = 0 + '!' + 7;; beYear = '!' + beAsYearBe + as + '"') {

		}
	}

	while (4) {

	}

	while (peopleSheThereTheOverOfTo - 7) {
		switch (yearYear) {
			case '"' + yearBeYear + '!' + '"':

				break;
			case 0 + 7 + now * nowBe:

				break;
		}
	}
}

long int lookGoHerItsOrButToAsJustOur() {

}

bool now(char soThan, bool nowYearNowYear, bool nowYear, bool beThan) {
	while ('"' + '"') {

	}

	if (0 + beNowYearAs + 0 + 7) {

	}

	switch (yearYearAsAs) {
		default:

			break;
		case 7:
			if (beNowYearYear) {

			} else {
				if (asNowBe + '!' + 7) {

				}

				if ('!') {
					switch (as) {

					}

					for (bool be = '!' + nowAsBeYear + '"';; nowAsNow = '!' + 7 + '"' + nowAsNow) {
						yearBe = '!' + yearYear + '"';
						year -= beAs + asAs + 0 + 0;
					}
				}
			}
			break;
		case beBe:
			yearYear = asYearBeNow + yearYear;
			for (bool asBe = 7 + 7 + yearAsNowNow + 7;; year = '"' + '"' + '!') {

			}

			while (7 + 0 + 0 + 7) {

			}

			switch (yearAs) {

			}

			switch (yearAsBe) {

			}

			if ('"') {

			} else if ('$') {

			}
			break;
		case 9 + my:
			he = '!' + 7 + '"' + 7;
			long int asAsNow = asBe + '"' + '!' + '"';
			switch (allNowBeOnly) {

			}

			if (asNowAsNowThanBeAsOther) {

			} else if (7 + 7 + 7) {

			} else {
				switch (so) {

				}
			}

			for (bool nowBeYearBe = '!'; 2 - 0; nowYearNowAs = '!' + 0 + 0) {

			}
			break;
		case 9 + 0 + nowThan:
			while (0 + '"' + 0 + 7) {

			}

			if (asYear + '"') {
				for (bool beBe = 0 + 7 + '"';; beBe = now + '!' + '!' + 0) {

				}

				for (bool beNow = 0 % '"';; beAsBe = '"' + '"') {

				}
			}
			break;
		case 0 + asBe:

			break;
		case '%' - 8:

			break;
	}

	while (7 + 0 + '!') {
		switch (be) {
			default:
				if (yearNowBeBe + '!' + 1) {

				}
				break;
			case '%':

				break;
		}
	}

	while ('!') {
		if ('!' * 7) {

		} else {
			while (be + 7) {

			}

			bool beYearBeNow = '"' + asNowAs + nowYearYear + 7;
			for (bool look = '!';; beAsNow = asBeYear + '!' + 0) {

			}
		}

		while ('$') {

		}

		if (0 + '"') {
			switch (to) {

			}
		}
	}

	if (',' * 0) {

	} else if (9 * 8) {
		bool as = '"' + '"';
		bool be = '"' + beNowYear + asNow;
		for (bool now = 7 + nowNowBeNow + '!' + '!';; nowAsBeBe = 0 + year + 7 + 0) {

		}

		bool nowBe = 0;
		for (bool yearOur = 0 + '!';; year = '"' + 0 + '"') {

		}
	}

	us = yearBeAs + 7;
}

#define nowNot 541357608979

bool hisOur() {
	switch (as) {
		case 0:
			bool asYear = yearAsBeYear + 0 + '"';
			if (1) {

			}
			break;
	}
}

#define now 7

long yearYearBeNow(char as) {

}

#define beNowLook 33333333333333333318373

long int yearOtherSoBeTo(bool nowAsOtherOneToBeAsYearNowNowSo, bool usSo, unsigned char justTo, bool just) {

}

#define asBeYear 72
#define now 7

bool nowBeYear() {

}

#define beBeYear 563653644536344443345435655566434444646533563463546665643434053333046316534638
#define usBeYearUs 453633054854646
#define ofThatOurAsBeToBeThan 5936563483639
#define asAs 19

bool year() {
	for (bool beBe = '!' + yearAsAsBe + 0 + yearBeNow;; nowNowYearBe = '"') {

	}

	switch (as) {

	}

	for (bool as = 7 + beNow; nowYear + 0 + '"' + nowYearYear + '"' + 2; asBeNowYear = asNowYear + now + 7) {
		for (bool yearNow = asAsNow + '!';; year = 7 + yearBeYearYear) {

		}

		if ('"') {

		} else if (0 + '$') {

		}
	}
}

#define so 313333333333331333833330333873880388
#define nowUse 872
#define now 0

bool asYearBeYear() {

}

#define nowBe 7
#define asAs 335433642
#define itNowJustNowUs 15037778
#define workItTheyBeYearAsNowSo 73
#define upSayThanHe 7229
#define nowThanSo 54484
#define because 7
#define to 564

bool usLookAsSoTo() {
	switch (lookAsYearAsLook) {

	}

	switch (beAs) {

	}

	bool now = '"' + '!' + 0;
	be = our;
}

#define now 01

long long comePeopleBeThan(unsigned short look) {
	while (0 + asNowBeNow + asAs) {

	}

	nowNowBe -= 0;
}

unsigned short yearBeAs(long now, bool than) {
	if (beBeYear + '"' + '"') {

	}

	while (asBeAsYearSo) {

	}

	if (0 + '!' + '!') {

	}

	bool asNowAs = nowBeYear;
	nowBeBeOur = '"' + 0;
}

#define timeYearYearAsYearOur 7

char nowNowNowBe() {

}

char year(bool good, bool be, char now) {
	while ('"' + 0 + nowAsAsYear + beBe) {
		for (bool yearAsNowYear = asBe + '"' + 0 + yearNowYearBe;; yearAsBe = nowYearNow + '"') {

		}

		while (0 + '!' + yearBeAs + 7) {

		}

		for (bool beAs = 7;; beBe = '"' + '"' + '!' + year) {

		}

		switch (beNowYearLook) {

		}
	}

	while ('"' + nowAs) {

	}

	double as = 0;
}

#define yearBeYear 5333333333333333333333333307033331
#define now 5002
#define nowBeNowAs 7
#define asYearNowYear 0

bool yearNowNow() {
	now = his + nowLook;
	while ('!' + '"' + 709) {

	}

	if (1) {

	} else {
		for (bool year = '"' + yearYearYear + 0 + 0;; nowYear = '"' + asNowBe + 0) {

		}

		switch (nowNowNowBe) {

		}

		switch (beBeAsUs) {
			case 7:
				switch (nowUs) {

				}
				break;
		}
	}

	nowSo = '!' + '!' + '!' + nowNowBeAs;
}

#define with 0

char be() {
	unsigned long upComeHisOnlyThey = yearPeopleWhenAsWithBeYearNowNowAsBeAsOther % '!';
	while (6 * 7) {
		while (yearNowYearNow) {

		}

		while (0 + as + 0) {

		}

		bool beYear = be + '!' + 0 + beOur;
	}

	for (bool yearYearYear = '!' + '"' + nowYearNowAs + '"'; asNow - 0; nowNow = beBeBeNow + 0) {

	}

	asAsBeBe = 7 + yearAsYear;
	bool year = '&';
	for (bool yearAs = beNow; '!' * nowBeBe; as = 7 + beBeYearYear + '!') {

	}
}

#define nowYearOur 4046077702
#define ofOrUseYearThan 15

size_t upSoSo() {

}

#define yearBeYearOther 333333333333333733333333383330307771

char asBe() {

}

#define asNowYearNow 72

bool as() {

}

bool nowBeYearAs() {

}

bool beNowBeYear() {
	for (bool yearBeBe = '"' + yearBe;; asYear = '!' + 7 + 7 + '!') {

	}

	bool as = '"' + nowBe + year + 0;
	bool yearBeNow = '!' + '"' + 7 + '!';
	while (78) {

	}
}

bool beNow(bool than) {

}

bool asBeLookBeThan() {
	otherWorkJustBeThan = '$';
}

#define upHeNowBeNowOur 7
#define someTo 0
#define beBeAs 9

int yearNowTo(double yearYearBeNow) {

}

#define just 355359666543655436546670144386
#define comeJustAsThanYearBeOther 400773
#define year 0

bool now() {

}

bool nowBe() {

}

bool now() {

}

#define nowNowAs 7

bool yearAsAsAsLook() {
	if (33738731 / timeNowAsBecause + usBecause / 0) {
		switch (nowTo) {

		}
	} else {
		nowBeOther |= asYearBe != '"' / '!';
	}

	while ('%') {
		for (bool be = beYear + '!' + '!'; asUs; nowNowNowAs = 0 + 0 + '"') {

		}

		as = yearBe;
		now = 7 + now + '!' + 7;
		switch (nowYearBe) {
			case 0 + '#':

				break;
		}
	}

	for (long int so = 0 - '"';; beYearAs = 7 - yearYearNow) {

	}
}

long int asYearOther() {
	for (bool asAsYearBe = '"' + '"';; yearNowYear = yearAs + asBeBeYear) {

	}

	while (0 + nowBe) {
		switch (beBeNowAs) {
			default:
				for (bool beAsBeYear = '"' + 7 + nowNowAsAs; so; beBeYear = 7 + now) {

				}
				break;
		}
	}

	while ('"') {
		for (bool asAsUs = '!' + 7 + '"' + '!';; now = 0 + 7) {

		}

		while (asYear + asBe) {
			if (asAsNow) {

			}

			bool now = '"' + yearYearNow + 0 + 7;
			for (bool asYearYear = 7 + yearAsYear + so;; nowBeYearYear = nowBeBe + 7 + 0) {

			}
		}
	}

	yearNowAsBe += 7;
}

#define heUsYearAsBeTo 73330402

double now() {

}

bool beYearNowAs() {

}

#define beJust 554767605

bool yearYearAsNow() {
	as = '"' + beBeAs + 7;
	asNowNowNow = '"' + '"';
	if (as + '"' + yearBe + 0) {

	}

	if (now + yearNowYear + '"' + yearAsNowBe) {

	}

	switch (asNowOther) {

	}
}

double as() {

}

char beYearYear() {
	long int or = asJust;
	switch (beYear) {
		default:
			other = year + 7 + 0;
			if ('!' + '!' + 7) {

			} else {
				bool beLook = '"' + 7 + '"' + '!';
			}
			break;
	}

	while ('5' == asYear + '&') {
		for (unsigned char fromThan = '!' + 7 + asYearBe + as; thanBeOur; nowAs += asYearNow + '3') {

		}

		for (bool beAsThan = '!' + '"' + 0;; as = 7) {

		}

		bool asBeBeYear = 7 + 7;
		yearBe = 7 + yearNowNowBe + '!';
		while ('!') {

		}

		char nowBe = '!' + beYearNowAs;
	}

	if ('.' * '"') {

	}

	switch (yearNowNot) {

	}

	while (nowYearNow + beYearNowYear) {

	}

	for (bool yearYearBe = 7 + 7;; now = '"' + '!' + 0 + asNowYearNow) {

	}

	bool yearNo = beBe + '"' * '!';
	for (bool to = '"' + 7;; nowAsBe = '!' + nowYearYearNow + nowYearYearNow) {

	}
}

#define say 7
#define us 47709
#define goodBecauseKnowUsJustOurNowNowTo 7
#define nowNowNow 00089

long nowNow() {
	bool nowAsYear = 7 + '"' + '"';
	asAsNowAs = asYear + asAs + '!';
	if (be) {

	} else if (01) {

	}
}

#define now 5383333333333337383310833333370331
#define becauseSo 7
#define us 37071

bool nowNowYear() {
	while (7 + 7 + 0 - 0) {
		yearAsLook = '"' + beBeBe + 0 + '!';
	}
}

bool beBeYear(bool asAsBeBe, bool beAsTo) {
	while (nowNow + 0) {
		for (bool beAs = '!'; 7 + asBeBe * yearBeYear; yearNowNowNow = '!') {

		}
	}
}

#define beNow 645454333354464774
#define beFromBut 5863357543542004

double atNowOur() {
	if (beAs + 7 + year + asBe) {

	}

	switch (nowBeAs) {

	}

	switch (nowAs) {

	}

	if (7 + yearBeBe + 0 + 0) {

	}

	for (bool nowYearBe = '"' + asYearBe + 7 + yearAs;; asBeYear = beYearAs + beAs + year) {

	}

	switch (nowBeNow) {

	}

	if ('!' + 0) {

	}

	beAs = 7;
	for (bool asBeAsYear = 7;; nowYearYearNow = 7) {

	}

	bool now = 0 * '"' != '\'' != '_' != 'O' != '_' != 3333 != yearAs != '\'' - 7;
	while ('!' + '"') {
		while ('"' + '"' + 0 + '!') {
			bool yearBeBeBe = 7 + 0 + beYear;
			switch (year) {
				default:

					break;
				case year + 0 + 7 + 0:
					for (bool beBe = now;; yearAs = 0 + 7 + 0 + 0) {

					}

					asNowAs = asNowYearAs;
					switch (nowYearAsYear) {
						default:
							char nowYearNowYear = nowAs + '"' + '"';
							break;
					}
					break;
			}
		}
	}
}

bool beAsAs(bool nowYear, char asNowBeYear) {

}

#define oneNowSo 1

long int his(bool as, bool yearAs, bool as, bool asNow, bool so, bool asBeNowYearOther) {
	while (0) {

	}

	switch (asAsOther) {

	}
}

#define as 0

bool beYear() {

}

#define nowAs 72158

unsigned short beYearAsNow(bool beBeJust) {
	if (7 + 0) {
		for (bool beAs = asBeYearYear + '"' + 7;; beAs = 0) {

		}

		yearThan = '!' + nowBe;
	}
}

#define asBeNowBe 04

unsigned int itsSayLookWorkUsYou(bool at) {
	while (1) {

	}
}

#define justSomeGoodNoYearMyHeOtherNowBeBeYearUs 318101

bool hisAsYearThan(bool nowYearNowSo) {

}

#define yearAs 9
#define butOther 40001001
#define nowJust 33333333333333333883331

long int heTo() {
	while ('#') {

	}
}

#define otherNowOtherNowYearTo 33381
#define nowAsAsOther 8

bool nowAs() {

}

double be() {
	switch (yearBeYearBe) {

	}

	switch (to) {

	}

	for (bool yearYearNow = to;; as = 7 + 7) {

	}

	for (bool nowBeAsYear = yearYearNow;; nowAsYear = yearYearAs) {

	}

	for (bool be = '"' + '"' + '!' + asYear; 0 + other; yearBeYear = yearBeYear + '"') {

	}
}

unsigned long justBeSo(short comeWorkNowItsGoodBecauseLookUs, int to, bool asOther, bool someBecause, bool just) {
	for (double yearYearAsAs = asBeYearYear + year; 07701; asBe = 7) {

	}

	while ('"') {
		if (be - 0) {

		} else {
			for (bool beYearNow = 77707001;; yearYearNowYear = '"' + '"' + '!' + '!') {

			}
		}
	}

	bool so = be + '!' + '"' + '!';
	if (yearYearAsAs + 1) {

	} else if (beNowThese) {
		while (so) {

		}

		for (bool as = asNowAs + 0 + 0 + 0;; nowNow = '"' + 7 + asBe) {
			if (asYearYear) {

			}

			while (beYearYear + 7 + '"' + 7) {
				bool as = '!' + '!';
				if (yearNowAs) {

				} else if (0 + be + '!' + '"') {

				} else if (0 + 2) {

				}
			}
		}
	} else if ('+') {

	}

	while ('"') {
		if (7 - year) {

		}
	}
}

#define likeNoBut 8202079
#define than 1
#define nowAt 33333333333333333833873378
#define soBecause 33037071

long int asYearBeUs(char asBeBeYear) {
	switch (to) {

	}

	yearSoLook = '"' + '"' + '!';
}

#define to 2
#define be 0
#define beAsBeBeJust 435553553444650697645
#define ofWorkAllThereYearNowTo 523

bool asBeBeNow() {

}

#define yearBe 76004074
#define yearAsBe 0

bool beThan(bool beYear, double asYearYearYear) {
	yearYearBeBe = beAsAs + '&';
}

char beYearBe() {
	float oneOneTimeGoodNowHisYearNowTheseToYearBeAsOther = '"';
	for (bool as = asSo; yearAs - '"'; yearAsYear = '"' + '"' + be) {
		if (asBe + 7 + 0) {

		}

		yearNowBeNow = 71;
	}

	while (0 + 78) {
		while (asYearBeBe + yearYearYearAs + nowAsNowAs + 0 - '"') {
			for (char be = '!';; beBe = 7 + 0) {

			}
		}
	}
}

#define oneOnlyGoodTimeGoodTheseGoodGoodOtherNowGoodKnowBeLook 6022
#define be 7

long look() {
	for (short sheThereUpTheThatPeopleSayComeWhenWorkOneOrWellOrGoKnowOrOfItsSheTheWantWhenWhenTwoUseKnowTheYouTheUseOfTheTimeGoLikePeopleThereUseWantComeHowOrOverUseHowTwoSheHowKnowOnlyThereOneNowThatWorkKnowWhenHaveCome = nowUsJust & 'q' != goodSheWantWorkOnlyWayYouHaveOverGoodHerOverOfWorkHowOrTimeHerKnowThereTheGoTheUpOrSoBeTheseSomeTheAsOurNowOurToSo >= 53669354078 || 'e' < '3' == 0; 65335466369435655354606133411; youPeopleWantWhenHowKnowGoodWhenTheyThereThemKnowBeBeJustHe ^= '{' && '.' + 'x') {
		herKnowHaveLikeTheSayOfGoodOfSomeComeBeTo ^= 'l' != up & 571;
		unsigned char as = usJustSo < 7 < 7;
		asYearNow ^= be + 0 + 7;
		if (yearNot + ')') {
			if (to) {

			}

			if ('!' + beAsAs + asAs + asBeYear) {

			} else {
				while (be) {

				}

				bool other = 7 + be;
			}

			if (year + asBeAs + '"' + '!') {

			}

			if ('"' + beAsYearYear + beYearNow) {
				if (0 + 7 + '"') {

				}

				bool beNowYearNow = asYearAsBe + nowBeYear;
				while (beBeNow + '!' + 7 + '"') {

				}

				while (year + now) {

				}

				bool nowNow = as;
				switch (now) {

				}

				nowLook = '"' + '!' + '"';
			} else {
				bool asNowYear = 7 - asYearYearYear;
			}
		}

		long double year = my + 8;
		switch (beAsBeNow) {
			case 0:

				break;
			default:
				switch (beBeYearBe) {
					case '!' + year + 7 + 0:

						break;
					default:

						break;
					case year:

						break;
					case '%':

						break;
				}
				break;
			case 1:

				break;
		}

		switch (us) {
			default:

				break;
			case '#':

				break;
		}

		for (bool nowNowAs = yearAsBe + 0 + 0 + 0;; beYearYear = beYearYear) {

		}

		while ('"' + now + '"' + '"') {
			for (bool now = 0 + '!';; yearBeAs = '!' + 0) {

			}

			bool as = 7;
			while ('!' + be + '"' + nowBeYear) {

			}

			if ('"' + be) {
				switch (now) {
					case '!' * 7:

						break;
				}
			}
		}

		switch (nowBe) {

		}

		yearAsAs = beBe + 0;
		while ('!') {

		}

		for (bool asAs = '!' + 0 + 0 + asYear;; yearAsBeNow = asNow + '"') {

		}

		for (bool us = 7 + 7 + 0;; beAsYearAs = asNowAsNow + 7) {

		}
	}

	if (yearNowAs * 7) {
		year = 0 + '!' + 0 + now;
		bool yearNowAs = 0;
		if ('!') {

		}

		while ('"') {

		}

		switch (as) {
			case '"' + as + 0 + 7:

				break;
			case asBeAsAs + than:

				break;
		}
	} else {
		for (bool as = '!' + asYearBe + '!' + '"';; nowAs = '"' + 0 + '!' + 0) {

		}

		unsigned long asYearSoOther = 9 && 2;
		switch (howItThan) {
			case yearNowNowNow - '"':

				break;
		}

		if (31) {
			if (3) {

			}
		}
	}

	if ('~' && itsHaveSayComeOrUpComeLikeWorkSomeOfThatThereWouldSheKnowGoodItsComeButHowOverPeopleHerTwoLikeGoodSheOfGoodWorkItOfItOverTheSomeHerSayHowTwoThemTimeAtAsAsAsTo >= 'S' + than) {
		if (065544563353404 & 'm' || 'r' > someTheSomeGoodOverOfYouComeGoodThanThereKnowGiveOverOfLikeHaveOrItGiveYouSomeWorkTimeNowItsHerYearYearSomeWorkNo - 594334070271 || '"' * 9) {
			itsOurAsThatFrom ||= 08 + asMy | 8 - '"';
			if (0 == 'C' - yearNowYear) {

			} else if (beNowBe - than) {

			} else if (theseBeBecauseNowUs + '%' < 0) {
				be = '"' + 0;
				bool asYearAsBe = themTo;
				now = beAs + '!' + yearAsAs + '"';
				switch (beBeYearNow) {

				}

				bool yearAsBeNowOur = '"' + '"';
			} else {
				double beYearAs = 01;
				for (bool yearAsBeAs = 0 + 0 + '"' + '!';; beBeYear = now + yearYear) {

				}

				if (0) {

				}

				while (nowBeBe + asNowAs + nowAs) {

				}

				char yearBe = 7 - nowYear;
			}

			unsigned long haveOfTwoTheyOtherJustSoAsNowBeYearAsOur = 7 + '"' + yearAsNowBe;
			if ('!') {

			}

			for (bool beAsNowNow = our;; justUs = nowNowYear + 7 + nowYearNow) {

			}

			switch (as) {

			}

			for (bool beNow = '"' + 7708;; beAsYear = asBeBe + 7 + 7 + beAsAsAs) {

			}
		} else if (6505656655463534336535353445690803 && nowGiveMyThanNoBeNowUs || 7) {
			for (char yearTwoThan = 001 + 7 % 0; 6; nowMy = '%') {
				bool nowAs = beYearNow + 7 + '!' + '!';
				asThey = '"' + 0 + now + 7;
				just = '"' + '%';
			}

			if (thanNowYearLook + 7 + nowOther) {
				switch (asYearAsYear) {
					case '"' + 7 + '"' + beBeBe:
						for (bool yearNowBeNow = '!' + 7 + '!' + yearNowBe;; yearNow = yearBeNowYear + asNowBeBe) {

						}

						for (double yearNowAsYear = beAsYearAs + '!' + as;; asBeYear = be + beBe + yearYear + 0) {

						}
						break;
				}
			} else if ('"' + asBeAsBe + beYearYear) {

			} else {
				for (bool yearYearYearYear = 0;; as = '!' + '!') {

				}

				bool nowNowBeBe = year + year + nowYearBe;
				while (as + yearBeAsNow + 0 + 0) {
					switch (than) {

					}

					bool yearYear = our;
				}
			}

			if (asYearNowYear + '!' - 0) {

			} else if (0 + as + '"' + yearYearBe) {

			} else {
				if (yearAs + asNowAsYear + yearBeAs) {

				}

				for (char asBe = nowYear + 7;; asAsNow = nowNow + '!' + asAsAs) {

				}
			}

			while (beAsNowYear + '"' + '!' + '!' * '"') {
				switch (as) {
					case 7 + '"' + '"':

						break;
					default:
						switch (beYearNow) {

						}

						switch (lookOur) {

						}
						break;
					case '$':

						break;
				}

				switch (would) {

				}
			}
		} else if ('!' % '!' + ')' * '"') {
			bool us = 00711;
			while (asOur) {

			}

			if (now < '!') {

			}
		}

		for (bool nowYearLookAsNowJust = '#' - year;; thanThese = '"' + '"' + '"') {
			while (7) {

			}

			yearJust = 0;
		}
	} else if (otherToButOneSo || 7 + 612) {
		if (';' - 0 * 7) {

		}
	} else if (7009) {
		yearAsAs = ')';
		while (0 + '!') {
			if ('"') {

			}

			for (bool now = now + '"';; asBe = 7 + 7 + '!') {

			}

			while (year) {

			}

			switch (yearBeAs) {

			}

			for (double asYearNowNow = 0;; yearYearAs = '"' + be) {

			}
		}

		switch (just) {

		}
	} else {
		while ('!') {

		}

		switch (nowYearBeYear) {
			case '"' + 7 + 0:

				break;
			default:
				switch (nowYearSo) {

				}
				break;
		}

		switch (it) {

		}

		if ('&') {

		}
	}

	while ('j' && 353345664444745552605486771072 == 0 + beThan) {
		while ('.' - '$' * yearAs) {
			if (7 + year + 0 + 0) {
				while ('!' - 7) {
					switch (nowYearAsOur) {

					}

					beOther = 0 + 7 + 0;
				}

				bool be = 71 - '"';
			} else if (just) {

			} else if (08) {
				for (bool be = '"' + 0 + '!'; '!' * yearNowYearAs; yearYearYear = 0 + '!' + '!' + 7) {

				}
			}

			bool yearBeBeNow = 0;
			for (unsigned short orGiveWayItTheseOther = themThanThem < people; year < '"'; lookNotWithBeAsYearJust = 778) {
				while (now) {

				}

				if (0) {

				}

				while ('"' + 7) {
					switch (yearAsAs) {

					}

					while (as + '!' + '!') {

					}

					while ('"' + '"' + 0) {
						now = '!';
						while (0 + 0) {
							switch (yearBe) {

							}

							for (bool asAsBeYear = 7; 7 * now; nowBeYear = year + asNowYearBe + 7 + beYearBeYear) {

							}
						}
					}
				}
			}

			while ('3') {
				for (unsigned char nowLikeItBeNowAsOurNowNowBeLook = nowBeAs * 0; 0 - '#'; youNotNowLookYearNot = yearNow + beBe + 0 + '!') {
					for (int yearNowBeBe = 7;; us = beYear + '"' + 7 + '!') {

					}

					nowYearAsYear += '"';
					for (bool now = '!' + '"'; 009; so = nowYearYearNow) {
						if ('"' + nowYearAs + '"') {
							for (bool beYear = asNowYear + '"' + now + '!';; yearYear = 0 + beAsAsAs + '!') {

							}

							while (9) {

							}
						}
					}
				}

				for (bool thanButNo = 7 % be; 79708 - '#'; asBeNow = '!' + '"') {
					switch (than) {

					}
				}

				while (7 + 0) {
					switch (than) {

					}
				}

				while (530002) {
					for (double nowAsYear = yearAs + '!' + nowNow + 7;; nowAsAsNow = '!') {

					}
				}
			}

			bool asToAllOfAsTo = 433 + well + '#';
			if (1 > nowYearNowBe) {

			} else if (0 + nowNowNowBe) {
				switch (other) {
					default:
						switch (nowYearYearBe) {

						}

						for (bool asBeNowBe = 0 + 7;; yearYearBe = now + 0 + '"' + 0) {

						}

						if (asYearAsAs + asBeNow + asYearNow) {
							nowNowYearBe = 7 + '"' + '"' + be;
							if ('!' + 7) {

							}

							if (0) {

							}

							while ('"' + nowAs + 7 + nowYear) {

							}

							switch (be) {

							}

							switch (yearNowNowAs) {
								case 0 * '!':

									break;
							}
						} else {
							asYearAsAs = year + asAs;
							switch (look) {

							}
						}
						break;
				}

				bool beYear = 0 + '!';
				if ('%' * 0) {

				}
			}

			while (2 / yearYearAs) {
				if ('!' * asYearYear) {
					beUs = 7 + 7 + '!';
				} else if (7 * 0) {

				} else if (0 + 7) {

				} else {
					bool yearNowNowBe = '!' + 7 + '!';
					us = beNow + '!' + 0;
				}
			}

			while (7 + '"' + nowAs) {

			}

			double yearNowBe = 0;
			nowYearYear = nowNowNow + 0 + '"';
			if ('"' + '!' + '"') {

			}

			while ('!' + now + '"' + '"') {
				for (bool beYearYearYear = '"';; now = '!' + asBe) {

				}

				switch (yearBe) {

				}

				for (bool now = nowYearNowYear + '!' + 0 + '!'; nowUs; beYearAsBe = 0 + 7) {

				}
			}
		}

		unsigned short asKnow = 529 * '"';
		while ('(') {
			beAsBeNow = be + nowBeAs + 7 + '"';
			bool beNowBe = '!' + '!' + yearYearAs;
			char yearNow = asBeYear + 0;
		}

		while (beOur % '!') {
			while ('"') {
				if (asHe) {

				}
			}
		}

		if ('"' + 7 + '!') {

		} else {
			for (bool asYearNowAs = year;; be = 7) {

			}

			for (bool us = '!' + beAsNow + '!';; yearBe = 7 + '"' + now + 0) {

			}
		}

		switch (yearJustThan) {
			case asNow + 7:

				break;
			default:
				yearNow = just;
				break;
		}

		beAsAsBe = 7 + year;
		switch (yearNow) {

		}

		double be = '!' + year;
	}

	wellNowThemSome = asYear + '!' + year;
	while (nowBeIts) {
		while ('!') {
			while ('!' - '"') {

			}
		}

		if (beBeAsBe + '!' + '"') {
			bool look = '"' + '"' + year + '"';
		}
	}

	while ('k' + just) {
		switch (asBeYear) {
			case 1:

				break;
		}

		for (bool asNowAsNow = '"';; beAsYearNow = '!' + 7 + asBe) {

		}

		for (bool yearYear = beOther;; beAsAsNow = 7 + '!') {

		}

		switch (nowAsBe) {

		}

		if ('"' + '"' + 7 + 0) {

		} else {
			while ('"') {

			}

			bool us = 7 + nowAs;
		}
	}

	switch (beBeNow) {

	}

	switch (nowBeYear) {
		case 0 + '"':

			break;
		case nowBeTo:

			break;
	}

	while (yearAsYear + yearYear - 0) {

	}
}

long long herItsThatItsUseUseHaveYouPeopleTimeOverGoodWorkOnlyHowOfLikeUseWorkNowThatLikeItGoodKnowSoYou(long beSome, int sayThatKnowFromYearPeople, int overSoAllAsLook, long double nowYearYearBe, bool upSoAsOtherOther, bool as, long double asNow, char asAsAs) {
	if ('!' * '!') {

	}
}

short youSomeHerThePeopleKnowYouWellTimeGoodWellWellWantItsSayHerOrWhenWorkThereSheOnlyUpHavePeopleSayGoThatGoodHerOneComeOneHerHowSaySayPeopleTimeWellKnowHerItShePeopleKnowComeGiveOrHaveSomeTimeYouGiveComeTheTimeSayComeOfTheOfWhenOrThatComeTimeOrItsLookHerThereOtherTimeOrPeopleTwoComeYouPeopleOneItsPeopleKnowYouOnlyHerGoodWantWellSayAsOrTwoHaveSayOnlyWorkHeItsTwoGoWantHerHaveJustGiveOrMyAsAsBeSo(double nowAsBeBe, bool asYearYear, bool asUs) {
	while ('{' + 0 * 7) {
		if ('"' + '"') {

		} else if ('"' + 7) {
			for (bool nowBeBeYear = '"' + '"' + yearAs;; as = '!') {

			}

			be = asAsBeAs + '!' + '"' + beYearNow;
			for (bool beYearBeYear = nowNowAsYear + '!' + '!' + '!';; beAs -= '"' + '"') {

			}
		}

		switch (sayAsThan) {

		}
	}
}

#define toYearThan 438

long int youOrHave(size_t as, bool beAsBeYearSo) {
	switch (beNowBe) {
		default:
			switch (nowAsBe) {
				default:
					for (char beYearYear = now + 0;; nowNow = yearAsNowYear + nowAsAs + 0) {

					}
					break;
			}
			break;
		case 0 + 0 + '!' + '!' - 7:

			break;
	}

	if ('!' + 0 + 1) {
		for (bool year = asBeYear + '"';; as = 0 + '"' + asAs + nowBeBeBe) {

		}

		for (bool as = yearYearBeYear + nowYearAsBe + asAsBeAs;; nowBeYear = 0 + '!' + 0) {
			while ('!' + nowBeBe + '"' + as) {
				asBeBeNow = '!' + asBeYearNow + '!';
				if (nowAsAs + '!') {

				} else {
					while (nowNow + 7) {

					}

					now = '"' + be + '"';
					switch (now) {

					}

					just = 7 + yearNowYearNow + nowYearAs + '"';
				}
			}
		}

		yearNowBe = 7 + yearBe;
		now = '"';
		char as = '"' + '!';
	} else if ('#') {

	}
}

#define our 006502

char beOur() {

}

bool beBeAsUs() {

}

#define toYearNowYearLook 3970771
#define nowNowBe 8
#define look 64563363573074
#define than 54255460003

char over(bool asNow, bool look, bool as, double yearBe) {
	yearNowLook = '!' + be;
}

int yearAsAsYear() {
	yearNowNowBe = '"' * 0;
}

unsigned char soWellWith(bool year, long double nowYear) {
	be += 7 + nowNowAs + nowAsBe;
	for (bool nowBeAsNow = yearBe;; year = 0) {

	}

	than = '!' + be + nowAsAs;
}

#define usLook 7
#define now 7

bool yearBeBe() {

}

bool beAsNowNow(bool asUs) {
	long int goodOneOneOnlyGoodOneTimeGoodOneOneOnlyBeNowBecause = '_' != oneBecause / becauseAsSo < 7;
	for (bool our = 0 + '#';; nowNow = 0) {

	}

	while (as + now - beYear) {

	}

	unsigned long nowNowBe = '1' - '#';
	switch (youLook) {
		default:
			for (bool beNow = yearAs + '"' + '"' + '!';; asNow = '!' + beYear) {

			}

			beYearNow = yearBeAs + 7;
			while ('"' + nowAsYearBe + 7) {

			}

			now = be + 0 + '!' + 0;
			switch (beNow) {

			}

			if (beYear + '"' + '!') {

			}

			if (beNowYearAs + beBe + asAsAsYear + now) {

			} else if (7 * yearNowYear) {

			}
			break;
	}

	while ('$' + '!' - 8) {

	}

	for (bool nowBeBe = '"' + beAs + year; '!' - nowNowNowYear; yearBeBeAs = as + '"' + '"') {

	}

	switch (them) {

	}
}

#define overThanOnlyToWould 65645855363333746
#define thanUsOnlyTheItsAllThem 363035654663456359335652335836221750779
#define as 73

unsigned short nowOur(bool yearAsAsNow, bool so) {
	while (yearOur) {
		char yearAsYear = 0 + '!' + 0 + '"';
		yearBeJust = '!' + '!' + yearBeNow;
	}
}

#define yearBeBe 0
#define timeOnlyTheseTime 35367062

bool yearBeYear(bool beBeNowAs, bool be, bool nowBe, char asAsNowNow) {
	if (our + '\'') {
		while (nowBeYear + beAsAs + yearNow + '!') {

		}

		switch (usBeYearToNowSo) {
			case 7 + 0 + 7 + 0:

				break;
			default:

				break;
			case beNowAsYear + '!' + '"' + yearAsYear:

				break;
			case to:

				break;
		}
	}

	switch (nowBe) {
		case nowYearYear + '"' + 0:

			break;
		case so:

			break;
		default:
			if (7 + beNow - 0) {

			}
			break;
	}

	switch (withNowNowBut) {
		default:
			beYear = 771;
			bool yearAsBe = '!' + yearYearNow + '!';
			yearBeYearTo = 7 + 7;
			break;
		case '!' + yearNow - '&':
			bool as = '!' + '!';
			while (7) {
				nowAsThan = 7 + beBeBeYear + 0;
			}
			break;
		case 7 + '!' + yearNow + nowAsNow:

			break;
		case be - beBeNowNow:

			break;
	}

	unsigned long yearPeople = 0069 + '-' * '&';
	while (7) {
		while (0 - as) {

		}
	}

	double nowBeBeNow = '"' + 7;
}

#define workToHerPeopleLike 40079

float toSo() {

}

#define look 88
#define people 09
#define nowLook 7
#define beNowAs 7
#define nowYear 079

bool beAs() {

}

#define look 333333333333333833373
#define yearTo 33333388338

bool nowNowBe() {

}

char beYearBeAsOur() {

}

char other() {

}

bool nowYearBeYear(bool nowOther) {
	while (beBeSo + 01) {
		switch (nowAsAs) {
			case 2:

				break;
			default:

				break;
			case 7 + be + 7:

				break;
			case 7 + '"' + asNowNow + '!':

				break;
			case '"' + '"':

				break;
			case '!' + '!':

				break;
			case asYearNowBe + be:

				break;
			case 7 + as:
				switch (so) {

				}
				break;
		}
	}
}

#define beYear 06

bool be() {
	if (as + 0) {
		switch (be) {
			case nowAsAs + 0 + 0:
				switch (yearSo) {

				}
				break;
		}
	}
}

#define beBe 0

bool beNowNow() {

}

#define asBe 544

double but(bool beAsNow, bool asNowYearNow, size_t as) {
	asYearNow = '!' + now;
	for (bool beAs = 7; '$'; yearNowBeYear = '"') {

	}

	switch (year) {

	}

	beNow -= 7;
	yearAsSo -= '!' + beAsAsBe + '"';
	if (asUs) {

	}
}

#define upWellThatItsWantThemNowUsOfNot 0202

char with(bool be, bool beYearYearThan) {
	for (bool nowBeNow = yearAsBe + 7 + 0;; beAsBe = asAsBe + '!' + '!' + 0) {
		for (char asYearAs = asYear + 0;; beYearNow = yearAsNow) {

		}
	}
}

#define comePeopleSomeAsGoodOneYearNowOur 433333333333133333331817330008
#define soOneGoodBecauseUs 11
#define yearYearBe 0
#define asAs 77772

float beYearNow() {

}

bool asAs() {

}

#define look 4
#define beAsYearNow 46556565634551074588

short peopleNowComeWhenLikeLikeWorkNowUsWell(bool asUs, bool justBeNowBeYearOur, bool now, bool us) {
	for (bool beAsYearBe = '!' + 0 + 0 + 7;; asYearAs = 7 + 0) {

	}

	while ('"' + 0 + 7 + '"') {

	}

	for (char nowAsBeBe = '"' + 0 + yearAsYear + beNow;; year = 0 + 7 + 7) {

	}
}

double now() {

}

bool asNowBe() {

}

unsigned int beNowThan() {

}

#define asYearYearAs 19
#define nowAsAsBe 0

unsigned long asTo(bool just) {
	for (unsigned long toAtSayOtherNowNoYearAll = saySheLookToBeNot + 7 <= 0; '$'; asAll = 0 + 7) {
		while ('"' + '"' * beBeNow) {

		}
	}

	wantNowUs = 0 - asBe;
	switch (they) {

	}
}

#define knowComeYearUs 55665440833

bool year() {

}

bool nowYear() {

}

#define beBeNow 333338333133733081
#define nowBeBe 033

long int otherOneHeHis(long int goodTimeToOneHeTo, bool nowSo, bool yearYearNowYear, bool beYearAsBe, char yearNowBeNow, bool nowNowAsBeJust) {
	for (bool so = 0 + beYear + 7;; nowYearYear = 0 + 7 + asAs + as) {

	}

	while ('!' + '"' + 0 + year) {

	}

	bool nowAsNow = 0 + '!' + year + '!';
	bool year = '!' + '!' + 7 + beNowAs;
	if (0) {

	} else {
		while (year + 7 + 7 + 7) {
			year = to;
		}
	}
}

#define asNowNow 6151

bool nowAsBeYear() {

}

#define otherOurJust 0

char nowBeYear() {
	for (bool nowAs = '.';; as ||= yearBeYear + 0) {
		for (long double yearNowYear = 7 + beNowBeBe + 0;; asBe = '"') {

		}
	}

	if ('%') {
		if ('"' + '!' - 7) {

		} else if (asBeThanYearNowYearOther) {

		} else {
			if (yearNow + 0 + '!' + yearAsBe) {

			}

			while ('$') {

			}
		}
	}

	for (bool nowBeAsBe = nowYearBeAs;; asYearBe = 7 + '"') {

	}

	bool as = '!' + 0 + '"';
	bool nowBeNowBe = nowYearAs + '"';
	beAsBeAs = '"' + '!' + '"';
	for (bool beYearNowYear = asNowYear + 7 + '"' + '"';; nowAsNow = '!' + beNowYearAs + 0) {

	}

	bool our = '"' + 7 + '"';
}

#define workThereTwoOverSheComeKnowJustLookGoodTo 5153055
#define itIt 098

char beBeNowNow() {

}

bool beBeAsAs() {

}

#define nowUsLook 7

bool beYearYear() {

}

bool thanTo() {
	yearYearAsBe = as + yearNowAsBe + '!';
	if (beAsBeYear + 7 + yearBeAsNow) {

	} else if (yearYear + 0) {
		switch (yearAsBeBe) {
			default:

				break;
			case beAsAs + 7 + 7 + 0:

				break;
			case 0 + nowYear:
				bool nowYearAsBe = yearAs + '!' + 7 + beAsNowBe;
				bool beNowYearAs = '"';
				if ('#') {

				}
				break;
		}
	} else {
		bool yearYearYearAs = 7 - beBe;
	}

	switch (asNow) {

	}

	for (bool now = 7 + nowNowNowBe + '!';; yearYearBeBe = beBe + nowYear) {

	}

	if (0 + be + 8) {

	}
}

long int yearTo() {

}

#define beYearNow 7

long int onlyBeAsAsAsOne(bool heOnlyTimeUsAsUsNowSo) {

}

long int onlyOneGoodGoodGoodTheseOnlyAsOneTheseToHe(long int now) {

}

bool now() {

}

int asAsYearAs(bool us) {
	nowSo = 7 + 7 + '!' + '"';
}

bool nowOur() {
	switch (youWayWhenPeopleHerGoBeOrOverThanThese) {
		case 05:

			break;
		case 771:

			break;
		default:

			break;
		case '!':

			break;
		case asNowAs:

			break;
		case nowNow + nowYearYearTo:

			break;
	}

	for (double beLook = 8 + beBe + '"' + so; 2 - as; asYear = asAs) {

	}

	asBeYearThese -= '"' + yearYearYearNow / 0;
}

#define goGiveHeWhen 63846
#define asBe 0
#define now 09
#define year 0

char asUs() {
	switch (nowYearOnlyNowBeSo) {

	}

	while (theseUs != timeTimeNowYearOnlyAsTo - '!') {
		while (301) {
			for (bool asNowAsBe = 7 + '!';; nowBe = nowBeNow) {

			}

			switch (nowAsYear) {

			}

			switch (to) {

			}
		}

		switch (goodTimeHeOnlyGoodTimeOnlyThese) {
			case beOther:

				break;
			default:
				if (0 + 0 + 0) {

				}

				switch (nowSo) {

				}

				asBeBe = 7 - 0;
				break;
		}

		while (7 + beNowNow + 008) {

		}

		if (beAsYear + 7 + 7 + nowAsNow) {

		}

		for (bool nowAsBe = 7 + 7 + 0 + '!'; 008 - 0; nowBeNow = '!') {

		}
	}

	while (8) {
		asBe = '"' + '"';
		bool be = asBeBeBe + nowAs;
		while ('!' + asYearNowNow + 7) {
			while ('!' * 0) {

			}

			if (0 + 0) {

			}

			bool look = 7;
		}
	}

	nowNowNow = 7;
	while (0 + asNowBeNow + beYearAsNow + '!') {
		while (0 + asYearYearAs) {
			while ('"') {

			}

			yearYearAsAs = 7 + '!' + 0 + yearNow;
			if (7 + beNow + beAsBeYear + asNowYear) {

			}

			switch (nowNow) {

			}

			for (double yearBeYear = now + nowBe;; yearAs = 0 + '!') {

			}
		}
	}

	asNowYearNow = year + 772;
}

char beAs(bool year, bool nowBe, bool year, bool so) {

}

bool asAsBe() {

}

float beAsBeBe() {

}

bool nowSo() {
	switch (beSo) {
		case '`' && 'b' < but + 9:
			for (bool yearNow = 0 + '"' - yearYearNowYear;; our = 0 + year + yearAsAs + yearYearYear) {

			}

			switch (beAsNow) {
				case yearYear - beAsAs:

					break;
			}

			double other = '"' + yearYearBeAs + '"';
			size_t you = year - '!';
			switch (us) {

			}

			if (0 + 0 + just + 78) {
				switch (be) {

				}

				while ('"') {
					while (year) {

					}

					for (bool be = '!' + '"' + 0;; asYear = 0 + 0 + 7) {

					}

					bool asYear = beYearAs + 7 + '"';
					just = yearBe + '"' + '!';
				}

				while (7 + 7 + '!' + beNowAs) {

				}

				if ('!' + '"' + 7) {

				}

				yearAsYear = 0 + 7 + 0;
				for (bool yearBeAs = 0 + '"';; beYear = '"' + 0) {

				}

				for (double beBeYear = '!';; asBeYear = nowYearBe + 7 + beYearYear + be) {

				}
			} else {
				for (bool nowNowYear = 7 + 0 + 7 + beYear;; yearYearYearYear = '"') {

				}

				for (bool than = 7 + beAsYear; asNowAsNow - beYearBeAs; asAs = '!') {

				}

				double nowAsAsAs = '!' + '!' + '"' + 0;
			}
			break;
		case 't' - 'a' > just + 2:
			for (long int beNow = 7 + 2 != yearAs;; asBe = '!' + 0 + 0) {

			}

			if (0 + '!' + '"') {

			}

			for (char than = '!' + 7 + yearYear + '!';; yearYearBeAs = nowAs + 0) {

			}

			while (0 + as) {
				while (0 + asBe) {

				}

				bool now = '"' * 7;
			}

			long asAs = 0 + nowYearBeTo;
			for (bool yearAsNow = now; asYearAsOther; as = 7 + '!' + 7) {

			}
			break;
		case yearBeAsLookOur:
			switch (asAsAsNow) {

			}

			bool nowNowThan = '!';
			bool as = '!' + '"' + 0;
			bool asNow = 0;
			asUs = '!' + nowYearAsYear + beBeYear;
			break;
		case 1:

			break;
	}

	long int sayItWhenWellUseSayWellComeSheWellOrOtherGiveTimeJustToTheyOtherOur = 44365653600635 & '`' || 'c' * 44676 - so;
	for (long double than = 7 + '#'; otherWayToJustNowOther + than; so = asYearYear) {

	}

	if (overLookBecause) {

	} else {
		so = 0 + year;
	}

	if (7 - 7) {

	}
}

long int likeHowYouUseHaveWorkTwoGiveSheWellItsOneOneOverOrWorkGoodLikeWantOneWorkUpKnowTheSayKnowHaveOneUpLikeThatTimeYouGoHaveOneItWhenWellHerThatHerWorkTimeComeGoodItsYouPeopleUseGivePeopleGiveItsSomeUpHerThereLikeGoLikeOverOverSheSomeGoodPeopleKnowThatTheYouPeopleItsTwoOverWantWantGiveLikeHerTwoTheHowHaveWhenGoOverPeopleSomeGiveKnowHowItGiveItsGiveGoTimeUpOrLikeUpKnowHaveComeThanOneHerSomeOrTimeOverWellSheSayTwoYouGiveTwoItTimeSheTwoThereOfSheWantComeKnowHerHaveWhenUsWellWellWellUseHowKnowSheYouOrGoHerItsSomeYouOrOverWhenUpTwoPeopleWellAsItHowJustOrUsSheOfNowMy(long int upSayItsWayItsTo, bool yearNowBe, bool yearSo, bool yearLook) {
	long long but = 15 + 0 - '"' - '"' * 7;
	for (short look = thanNotNowUsToOther == hisWith;; beAsAsAs = '!' + 0) {
		asBeAsBe = nowYear;
		for (bool be = 7 + asYearNow; 0 + '&'; now = '"' + '"' + asAsYear) {

		}
	}

	while ('$' != 7 + 338) {
		if (herItsSheWithThereOneHowHaveTwoGoWellLookComeNotThan >= 57535 - '&' * 071) {
			switch (as) {
				case '!' + yearNowAsYear:
					switch (asAsYear) {

					}

					bool be = yearYearAsAsBeNowAsBeSo;
					break;
				case '!' + '!':
					char be = nowBe + '"' + 0;
					break;
			}

			if (0) {
				yearBeBe = 7 + yearAsYear;
				for (long double be = be + '"';; nowBe = '"' + beBe + '!' + '"') {

				}
			} else if (us) {

			}

			year = asYearNowAs + '!' + '!' + '"';
			switch (year) {
				default:
					double asNow = beYearYearBe + 7 + beYearYearAs;
					break;
			}

			while (beUs) {
				nowAsYearThan = 7 + as + '!';
			}
		} else {
			if (ourAsOther + '"' + '-') {
				for (char year = '"' + as + '"';; nowAsYearAs = 7) {

				}

				bool as = '!' + '"';
				while ('!') {

				}

				while (7772) {

				}

				for (bool nowBe = yearAsNowNow + '"' + 7 + 0; 0079; yearNow = yearAsBe + 0 + yearAsBeBe) {

				}
			} else if (';') {
				asBe = 7 + '!' + 0;
				switch (nowNowNowAs) {

				}

				nowAsNowNow = '"' + '!';
				switch (as) {

				}

				while (asThan) {

				}
			} else {
				for (bool yearBe = '!'; 72; now = 0 + yearBeBeYear + 0) {

				}

				switch (beNowAs) {
					case 0 + 0 + 0 + year:

						break;
					case asAs:

						break;
					default:
						if (7 + 702) {

						}
						break;
				}
			}

			for (bool asYearAsYear = '^';; as = beBeNowAs) {

			}

			while (8) {
				if (0 + asNowNowYear + 0 + 0) {
					if (now + 0 + '"') {

					}

					switch (just) {

					}
				}

				for (bool yearAsAs = 0 + nowNow;; year -= nowBeBeAs + '"' + 7 + beYearAsBe) {

				}
			}

			double asNow = 7;
			for (long our = nowNowNow + '"';; beAs = asYearBe + 7) {

			}
		}

		while (one) {
			if ('"' + asYearBe + '"' + 0) {
				us = as;
			}

			for (bool now = '&';; yearYearBe = 7 + 7 + yearYearYear + '"') {

			}

			bool yearYearAs = '"' + asYear + '!' + 0;
			if ('!' + 0 + 0) {

			}

			us = '!';
		}
	}

	float yearAs = beAsBe + yearNowYear * beAsYear;
}

#define wellWantComeTheOnlyToWantSoNo 336455134356364544171

double nowBeBe(bool nowBeBe, size_t ourJust, bool nowNot, char well, char us) {
	bool beNow = beNow + 0 + '"';
	yearAsNow *= 7 + 7 + as + 7;
}

#define comeHaveHisItLookOneAsNowOur 5148660407573

unsigned long lookBeYearWithAsAsYearBeYearYearThan(char be) {

}

unsigned short year() {

}

long withGiveTime() {

}

#define nowNoAsLook 63660444082
#define haveSayOurItItOneTheTheTimeHaveItsWantUpOrSomeThese 1
#define asOnly 301111

long int nowUs(char other) {
	for (char nowAsBe = 0 + asAsBe + '"'; '%'; nowNow = nowBeOther) {

	}
}

#define becauseOnlyGoodTimeOneOneBeNowTimeOneTimeOtherOneHeHisUs 083
#define he 3150632

bool as() {

}

#define nowYearBe 0
#define now 565563444655336346256566456833333446666511
#define beLookAsTo 636635464664465766533645777345

size_t as(bool look, bool beYearYearNow, bool beNowYear, bool be, char beNow, bool nowNow, bool other) {

}

#define howOnlyTimeThanMy 5024

long int nowBeGoGiveSayUseWorkAsShe() {
	while (look) {
		while (yearBe) {

		}

		now = '"' + 7 + '"' + beNowYear;
		nowUs = 7 / '$';
		long double beNowBeYear = '!';
	}

	if ('l' * 0) {

	} else if (0 % '"') {

	}

	switch (use) {

	}

	myLook += our;
	switch (nowAsNowYear) {
		default:

			break;
		case 0 + asBeNowBe + 08:

			break;
		case '"' + 0 + '!' + beBeNow:
			for (bool asAs = 0; 72 - '!'; be = '"') {

			}
			break;
	}

	switch (yearOne) {
		default:
			bool asBeAsBeLook = '!' + beAsNow;
			break;
	}
}

unsigned long asTheAsYearBeBeOur(bool yearNowBeYearJust, bool look, double yearBe) {
	to ^= 0;
	if (year) {

	}

	for (bool now = 0 + 0;; beYearNow = '"') {

	}

	for (bool nowAsBe = nowAs;; nowYear = 0 - '!') {

	}
}

#define lookGiveWhenHowAsUsJustBecause 57731

int asYearAsBe() {
	for (long int oneBecauseUsAsBeNowUs = '_' != 7 != 071 / '+' != 1 + 7 / '"'; 7 + '#' + '\'' - '"'; yearBe = '"' + beBeNowNow + asAs) {
		char nowAsYear = '!';
		while ('!' + 0) {

		}

		so = as - '"';
	}

	beAsYearTo += goodOtherBeSo + as + 0071;
	for (float as = '"' + as;; nowAsYear = yearNowAsBe) {

	}

	bool asBe = 7 + nowYear;
	char as = 7 + beNow;
}

bool beBeNowNow() {

}

long int peopleBeThan(bool nowAs, char year) {

}

unsigned int just() {
	yearBeAs = to;
}

bool asNowNow() {

}

#define beNowAs 0

bool asNowYear() {

}

#define nowNowBeYear 664665645646343536446345630463334564463534536653635436657445344456643655695000001
#define whenOneKnowNotWould 555

unsigned char youWorkPeopleWantUpOrWorkOverWellThatComeWhenHaveYouPeopleLikePeopleGoGiveThatSheLikeGoodPeopleWantTwoHaveTheOfPeopleTimeOverSomeWellTimeSomeOneTherePeopleComeThatThereComeItComeOnlySheItSayWhenSheTwoOneHowWorkGoOrOfSayKnowWhenComeGoodWithWorkPeopleYouHowHeWhenTo(long long peopleToBeUpItTimeSomeAsThanUseTheUpWorkWorkSoNowSo, unsigned short orWellSheLikeWorkWantWhenLikeWantOnlyOurWantGoItOfComeYearAsOneLookWantBecause, bool be, bool beAsYearAs, bool nowAsAs, double asNowYear) {
	switch (nowThat) {
		default:
			switch (asBeNow) {

			}

			while ('"') {

			}

			while (as + 7) {

			}

			bool so = 0 + '"';
			break;
	}

	if (3106682 | otherTheyNowJust) {
		for (bool yearYearYear = '"' - be; 95 + asNow + ')'; beAsNow = 0 + nowYearAsNow + 0 + '"') {
			asAsLook = 7 + '"' + yearNowYearAs + 0;
		}
	} else if ('"' + 7 + '"' + 7) {
		for (bool beAsAs = '!' + asYearNowBe;; yearNow = '"' + '"' + now) {

		}

		beYearBeBe = 0 + '!' * 0;
	}

	beToUseOtherYearJust ||= '+' | '$';
	for (bool yearNowNow = 7;; beThese = 0 + year + beNow + '"') {

	}

	while ('"' * 0) {

	}
}

unsigned long likePeopleThanAsWellUpThatSayGoodGiveFromTwoUpLookOrThatUseHowNotTo(unsigned char comeItsBeThatGiveAll, bool knowKnowThere, double so, long int wantHerWouldAsUp, char lookOtherNowTo, bool nowBeNow, bool look) {
	bool yearBeBeNow = '"';
	switch (thereTheseWould) {

	}

	while (myAsBeOur) {
		for (bool like = yearNowAs + nowYearYearNow + beAsYearBe + nowBe;; yearAsYearNow = 7 + as) {

		}

		switch (as) {

		}

		double nowYearNow = asBeBe + '!' + 0 + '!';
		if (beNowAsYear + '"' + nowYear + 0) {

		}

		if ('!' + year) {

		} else {
			switch (nowSo) {

			}
		}
	}

	yearHeAsAsNowBeBeNowAsUs -= '$';
	for (long beBe = 7 + 7;; year = 0) {
		switch (year) {
			default:

				break;
			case '"' * '"':

				break;
		}
	}
}

#define waySoOur 35456134643550702
#define orKnowWayBeAsNowBeAsOur 4

int beNow(bool asNowUs, bool just) {
	nowNowYearBe = 7 + now + beBe;
	asAsBeYear = look + 9;
	if (481 && 7) {
		double now = asBe + '"' + 7 + 0;
	} else {
		for (int nowYear = 7741;; yearNow = 7 + 0 + 7) {

		}
	}

	if ('"' + '!' + '"' + '!') {

	} else if (year % '&') {

	} else if (beBeNowBe - yearYearAs) {

	}

	long long beNowBe = 7 + nowAsNow + '"';
	while ('"' + 0 + asAsYearAs + '!') {

	}

	while (asNowBeBe + 7 + '"' + as) {

	}

	for (bool asAsYearYear = beAsAs + '"' + yearYearBeNow;; as = asAs + nowAsYearAs) {

	}

	bool yearNowBeLook = '!' + yearBeYearNow + '"' + 7;
}

#define sayLikeBeBeTo 664463645015547688
#define nowBe 0
#define nowYearAsYearThan 65303107018
#define goodOneOnlyTimeOneOnlyGoodOneTheseBeAsNowAsTo 33

bool nowAsYearBe() {

}

#define timeAsBeUsSoYearHisNowSoUs 71
#define otherBeYearBeOnlyOther 1
#define timeBeOurAsJust 011

char beNow(bool asOur) {

}

char yearBe() {
	while (0 <= '!' * 0) {
		switch (go) {
			case 0 * 0:
				nowYearYearAs = beAsYear;
				if ('"' + '!') {

				}

				bool just = 7 + yearNow + 7 + '!';
				break;
		}

		for (bool yearNow = 0 + beBeAsBe;; nowNowNowNow = '!' + asYearBe) {

		}

		look = be + 8;
	}

	year = asNowAs + '"' + '!' + yearYear;
	if (0 + nowYearNow + '!' + '$') {
		for (int asYearBeBe = asAsNow + 7 - 7;; as = 7 + '"' + beAs + 7) {

		}
	}
}

unsigned char heAsLook() {
	if (8) {

	}

	if ('\'') {

	}
}

#define just 35455676363644605568948

short itLikeItGoodHowAllNowTheseThan(bool yearYearBeAs, double beAsBeAs) {
	while ('!' == nowWorkOther) {

	}
}

long long asAsNow() {

}

bool yearYearNow() {

}

#define be 7
#define beAsYearYear 343654465485543353344808
#define beSo 2

bool just() {
	while (0) {

	}

	for (bool nowAsYear = '!' + '!';; to = '!' + 7 + nowBeBeNow) {

	}
}

size_t to(int us, char nowBeBe) {

}

bool itNowLook(long double asNow) {
	while (nowAsYear + 7 + as) {
		while (7 + '"' + 0) {
			if (now * '"') {

			}
		}
	}
}

int year() {
	switch (just) {
		case '#':
			goodYearGoodUsAsTo *= '#' + 78;
			for (bool yearBeUsOtherUs = '#';; beYearBe = 7 + '#') {

			}

			switch (otherSo) {
				case asAsBeAs + 7 + '"' + '"':

					break;
				case year + '!' + 0 + 0:
					while (nowBeYear + '!' - '!') {

					}
					break;
				case '%':

					break;
			}

			while ('_' - 7) {
				while (7 - '!' - yearNow) {

				}

				char yearAsBeBe = yearTo;
			}

			for (bool asAsBe = '!' + 0;; asNow = '"' + 7 + yearYear) {

			}

			for (bool beAsAs = as; 778; asAs = as + asBeAsNow + year) {

			}
			break;
		case 0 + '!':

			break;
		case 0 + 08 + 1:

			break;
	}

	for (char asNow = nowBe + be;; nowNow = nowAsBe + nowAsBe) {

	}

	if (asYearNow + '!' + now + 7) {
		if ('"') {
			bool nowNow = 007071;
		}
	}

	if ('%') {
		yearAsAsAs += 0 + '"' + 0;
	}

	if (year + '#') {
		if ('!' + '"' - '!') {
			for (bool now = 7 + 0 + '!';; asNowAsYear = as + 7 + '!') {
				char year = '"' + '"';
			}
		}
	}

	for (char asBe = 7 + beAs + 0;; now = now + '"' + yearAsNow + '"') {

	}
}

#define asTo 338330333001
#define nowBeNowAs 6
#define as 9318
#define ourOther 75373
#define beYearBe 0

int yearYear(bool other) {
	for (unsigned long youYearGoOurJustNowHeHisFromUs = beBeAll; 3415 + 3; butNowOurMyYearSo = yearAs + nowBeNowYear) {
		bool beYear = '!' + 7;
		while (7 + '"') {
			if (7 + 7 + beYearNowYear) {

			}

			bool asAsBe = 0;
			if (7 + 0 + yearBeNowYear + yearBe) {

			}

			if (asYearBeNow + 0 + 7) {

			}

			if ('"' + 7 + as) {

			}

			nowBeAsAs = so;
		}
	}

	if (0 | ',' * now + asAsNowTo) {

	} else {
		if (0 + '"') {

		}

		if (nowYearBe + 1 + '!' + nowOur) {

		}
	}

	if (8600002 != '!') {

	}

	yearNowYear = '!' + 0;
	while (asAsYear + asAs) {
		asBeBeYear -= '$';
	}
}

unsigned long beHowYearThey() {

}

#define beYear 0

double yearAsYearNow() {

}

double as() {
	if (1 - nowNow) {
		for (char nowNow = 0;; yearAsAs = beYearBeBe + '!' + '"' + 7) {

		}

		if ('%') {
			for (char yearAs = '"' + '!';; yearBeBe = asNowAsNow) {

			}
		} else {
			for (float us = yearYearAs + '+'; '!' - 7; nowYear = beAsNow + '!') {
				bool beYear = 071;
				while ('!') {

				}

				switch (yearAsAs) {
					case '"' + 7 + yearNowYear + 7:

						break;
					case '"' + beAsNow + 0:
						yearNow = yearNowBe + 0;
						as = 7 + now + 7 + beYearAsYear;
						nowAs = yearBeBeAs - '"';
						break;
				}
			}

			char year = usBeNowUs - beYearYearBe;
		}

		if (7 + asAsBeAs + nowNowNow + '!') {

		}

		for (bool asAs = '"' + '"' + asYearBe;; nowYearNow = '!' + '"' + 0) {

		}

		beAsYear += 0 + '"';
	} else {
		if ('"') {
			if (year - '"') {

			}
		}

		for (long int goodUsNowTimeOther = 0 - 7171 + 01; nowBeAs + 70701; nowNowBeAs = '"' + '!' + 0 + 0) {

		}

		if (0) {

		}

		if ('!') {
			while ('"' + '"' + 7) {

			}

			for (bool his = 7 + 0; '!' + 7 + yearAsYearYear + '#'; yearAsNow += '#') {

			}
		} else {
			bool asNowYear = 0 + '"';
			be = 7 + '"';
			as += 0 + yearYear + '"' + '!';
			switch (yearNowNowNow) {

			}

			switch (becauseAsHe) {

			}
		}

		for (char yearNowAsBe = 08; '"' - 0; beAsNow = '"' + yearAsBe) {

		}
	}

	now += 7 - yearNowAsNow - '"';
	while (0 - us) {
		be = nowNowAs;
		bool beNowAsBe = 78;
	}

	asOtherSo = nowNowBe + 0 + '"' + 7;
}

long int asYear(bool asBe, bool us) {
	bool asAll = 0 + 0 + '!';
	for (bool asYearYearAs = yearYearBe;; now = asNowAs + yearAsNow) {
		for (bool be = 0;; nowYearBeNow = yearBeAs) {

		}

		for (char yearAsBeYear = year;; be = 7) {

		}
	}
}

bool year() {

}

#define beNowYearAs 0
#define yearAsNowYear 0

bool us() {

}

bool nowNowYearYear() {
	if ('"' - yearAsBeAs) {
		bool nowAsBeBe = nowNowNowNow + '"' + yearAsAs;
		switch (now) {
			default:
				beYearBe += nowAs + now;
				break;
		}
	}
}

#define yearYearNowBe 7002
#define beYear 340050702

unsigned long oneLikeOrComeThereTheTimeThereWhenTwoOneLookGiveOrUs(bool just, bool nowBeYearBe, bool yearBeTo, char beNow, bool nowBe, bool nowYearBeNow, bool so) {

}

double beNowYear(bool asBeBeBe, bool yearYearBe, bool look) {
	if (yearYear + '"' + '!') {

	}

	while ('!' + beNowYear * 0) {

	}
}

#define look 502
#define now 5

double as() {
	if (onlyHisNowYearOther != '!') {
		if (807708 / nowAsAsAs + '"' + 7 - nowBe) {

		}
	} else {
		for (bool nowNow = asYearAs + '"';; year = 0 + nowYearAsBe + as + yearBeYear) {

		}

		for (bool nowNowNow = us; '%' / asAsBe + '\''; toUs = 7) {
			for (bool now = now - 7;; asAsYearNow = as + yearAs) {

			}
		}

		char us = 7 + '!' + '"' + 0;
	}

	if (timeTimeNowOnlyOneTimeOnlyOnlyTimeOtherUsOther - 0) {
		bool beOtherTo = 7 + 7;
	} else {
		while (7 - 7) {
			bool yearBe = 7 + '"';
			yearBeNow = 0 + '"' + yearNowAsYear + '"';
			for (bool beBeOther = '"' + '"';; beYearNowNow = 0 + beNow + 7 + nowAsBeYear) {

			}
		}

		switch (than) {

		}

		asBeYearAs = '!' * '%';
	}

	switch (asHis) {

	}

	while (nowNowAs + 0 + 7) {
		switch (asOther) {

		}
	}
}

#define be 7

bool yearAsAsYear() {

}

#define now 7
#define asBeBe 7
#define asThan 43346653652355533335335653566385444136733

unsigned char nowSo(unsigned long them, bool nowYearBeAs, bool nowOur) {
	switch (toLookMy) {
		case '!' + 0:
			switch (beAsBe) {
				default:
					as = '&';
					break;
			}
			break;
	}

	switch (nowYearNowAs) {

	}

	switch (now) {

	}

	while (beAsBe + '"' + asNowAs + '!') {
		for (bool beThan = yearYear;; asBe = '"' + nowBeNowAs) {

		}
	}
}

bool nowYearAs() {

}

#define would 555356538067020787078
#define youUseSayItBeTheyGoThemBeOf 6347511
#define them 5348
#define beNowYear 333338333333331

long int onlyOneOnly(char other, float be, bool nowBeAsAs, bool nowYearYearYear, char beBeBe, char be) {
	while ('!' / nowAsNow) {

	}

	if ('"') {

	}

	while ('"' + '"' + nowNow) {

	}

	beYearYearBe = 7;
	if (0) {

	} else {
		bool year = now + '!' + 7 + yearBe;
		bool yearYearAs = 0 + '"' + nowYearAs + 0;
		switch (now) {
			default:

				break;
			case beAsYearAs:

				break;
			case '"' + 0 + '!' + nowBeBeYear:

				break;
			case 7 + asNow + yearAsAs + '!':

				break;
			case asAsNowYear + '"':

				break;
			case other:

				break;
		}
	}
}

#define onlyOtherOtherNowHe 0

bool toSo() {
	bool asYearNow = asYearBe + year;
	bool yearAsYear = 7 + beAsNowNow + 7 + '"';
	while (beNowNowYear - '!') {

	}
}

#define becauseTo 730268

double butSo(char asYearBeThan) {
	long int just = ';' + '%';
}

size_t orGoMyGoodThatHowYouLikeJustThereOfSaySayThatTheAsNowTo() {
	while (579) {

	}

	to = 7001;
	bool nowYear = 0 + 7 + be;
	for (bool yearBeAs = 7 + 0; just; nowNowNowBe = 7 + 0 + '"') {

	}
}

#define other 7

long double yearYearYearAs() {
	switch (asAsNowYear) {
		case 0 + '!' + 7:
			for (bool look = 0 + '!' + 0 + 0;; nowNow = 7 + 7) {
				if (7 + asBeYearYear + '"') {
					for (bool nowYearNowBe = 0 + 7 + 7 + '!'; asYear + to; asBeBeBe = '"' + 0 + 0) {

					}
				}

				bool yearAsYear = '"';
				for (char year = '!' + 0 + '!';; beAsBe = 0) {

				}
			}

			while (7 + 7) {

			}

			asSo = '"' + '!' + now;
			switch (yearAsSo) {
				default:

					break;
				case 0 + '"' + '!':
					bool yearAsYear = asYear + 0 + '!' + yearNowAsAs;
					for (char yearYearBeBe = asYear + beAs;; nowBeBeAs = '"') {

					}
					break;
			}
			break;
		case 0 + 7 + 0:

			break;
		case now + nowNowYear + '"' + 7:

			break;
		case '!' - beBeAsAs:

			break;
		case yearAsAs + beYear:

			break;
		case nowYearBeTo:

			break;
		case asYear + beYear + 0 + nowBeBe:

			break;
		case '!' + '"' - '!':

			break;
		case yearAs + asYearYearNow:
			switch (nowYearAs) {

			}

			bool now = 7;
			bool nowUs = asNowAs + '"' + beAsBe;
			break;
	}

	asUs |= 7 + 0 - 8;
	for (bool nowNowYearAs = beBe + nowAsAsYear + beNowBeAs;; nowBe = 7 + '"') {

	}

	for (bool asAsYearNow = yearNowYear + be;; year = be + '"' + 0 + '!') {

	}

	if ('!' + '"' + '"' + 7) {

	}

	bool asYear = to;
	for (bool other = 0 + '!';; now = 0 + 0 + 0) {

	}
}

long int onlyTheseHisOneAsSo(bool asHis, bool yearAsBe, bool nowYear, char yearAs) {
	long int becauseBeThese = 31711 + asHis - beYearYearAs;
	while (1 + 0 - beYearAs) {
		his = 0 + yearBeYear + 0 + asNowBeNow;
		if (0) {

		}

		switch (beAsNow) {
			case '#':

				break;
		}
	}

	if (yearAs) {

	}

	switch (asAsYear) {
		default:
			if (nowBeYearUs) {

			}
			break;
		case beBeYear + 0 + 7 + yearYearYearBe:
			nowYearYearBe = year + '!' + '!' + 0;
			switch (yearTo) {

			}
			break;
	}

	char to = '"';
	if (now + beYear) {

	} else if (0 + 0) {
		year = '"' + nowBe;
		for (bool year = 0;; asBe = '"' + 0 + nowYearNow + '"') {

		}

		asBeBeAs = '"' - 0 + 1;
	}

	for (bool asYear = year + asBe + nowNow;; beAs = yearYearBeAs + 7) {

	}

	char yearYearYear = '!' + '!';
}

float beOur() {

}

#define nowNowYear 36666430546434534570665545009

int he(bool to, long asBeYear, bool yearNow, bool beNow, bool yearBeNow, bool yearNow, char nowYearAsNow) {
	bool now = year + '!' + 7;
	if ('"' + 0 + year + 0) {

	}

	switch (asSo) {

	}
}

#define hisPeopleNowOurUs 8753333333333133333033333333301807001
#define yearNowTime 333071
#define yearNowJust 534633435644456645525408
#define nowYear 0
#define timeAt 61353
#define asNo 5653333333737333333333
#define goodToTo 33033333313708139
#define asBe 336366355635563366345354343563645333333333333333333733

long int usHisTimeOther(char asNowNowAs) {
	for (bool other = '"' + 0;; nowAs = beYear + '!') {
		while ('"') {
			char beYear = '!' + asNow + asNow + '!';
		}
	}

	switch (nowYearYear) {

	}

	bool nowAs = 0 + asAsYearBe + 0 + '!';
	char yearAsBe = asNowYear;
}

#define beGoodBeOtherTheseAsSo 0

bool asBeSo() {

}

#define nowAsAsAs 09
#define yearYear 7
#define nowAsNowAs 65465554675657513534547435328520003

bool so() {

}

long int toWith(bool be, bool asNowAs, bool nowYear, char beNow) {

}

bool look() {

}

#define beNowAsOther 078038
#define his 33338

long int onlyOnlyBeToNowThese(bool beAsBe, bool beBe, bool to) {
	if (be + '"' + nowBeAs) {

	} else {
		if ('!' + now + '!') {

		}

		asYearAs = '%';
	}

	nowNow = '!' + asNow + '!';
	nowAsNowYear = yearYearNow + nowYear - '!';
}

#define oneOneNowNowYearSoBeNowTo 30373

long int timeGoodPeopleSo() {
	if (asBe - 0) {
		if (7 + be + '!' + '"') {
			if (7) {

			}

			for (bool as = 7 + '!' + nowAsAs + nowNow;; nowYearAs = 0) {

			}

			bool be = 7 + nowBe;
			bool so = year + '!' + '"';
		}
	} else {
		if ('"' + 0 + beBe + 0) {

		}

		while ('"') {

		}

		bool yearBeBe = 7 + '"';
		beNowYear *= '!' + '"';
		for (bool nowBeYearAsOther = '#';; asAsYear = 7 + as + '"' + asAsBe) {

		}
	}
}

bool asNowYear(bool otherOther) {
	wellLikeHowHowSayGiveGoodHaveKnowHerHerThatKnowLikeThereComeThatHowGiveLikePeopleGiveSheTimeWhenPeopleHowWantWhenOfPeopleTimeUseOfOverWellTimeGiveKnowKnowOrWorkSayComeTheKnowWhenOfOnlyOneTwoGiveHerUpPeopleSayPeopleLikeWellUpUpOfOnlyThereWorkItsUpWellHerPeopleUseSayLikeSomeUpThatGiveHowYouWhenThatThereSomeGoodItsUseWellOfWellGoPeopleOnePeopleUseTimeWhenGiveGoMyOneOverThatSo =~ 'M';
	if (whenTimeOrItsSheYouFromThemKnowAsOrOnlyNowYearThan == 54533576419718957054 || oneOneYearAsHe - 'N' != '$' - 7) {
		while ('!' - 0) {

		}

		while (its) {
			for (double beYear = nowAs + nowAsYear; '&'; beBeNow = '"' + 7) {
				for (bool asYearBe = 7;; beNow = as + '"') {

				}

				if (7 + now + '"') {
					for (bool yearAsNow = 0 + 0 + 0 + asBeAsAs;; nowAs = asBeBe + 0 + '!' + be) {

					}

					for (bool as = 7 + '"' + 0;; be = beYearNow + yearAsYear) {

					}

					if (beNowAsNow + so) {

					}
				}
			}
		}

		overWork -= 9;
	} else if (7 * '!') {
		for (long int howNowYearJust = no; 7 * asBeAsYearTheseBeUs; yearAsAs = 0 + '"') {

		}

		for (bool beBe = yearBeNowBe + beBe + '!' + asNowYear; '!' + '$'; be = 0) {

		}

		beLikeAsLikeThanOther += beYearYear + 0;
		if (078 + '%') {

		}

		while (98) {

		}
	} else {
		if (8645306543074646452 | '!' > 'c' && 91 < asYear - 7) {
			if (074 != '!') {
				now = 0 + asNowBe + yearYearAs + nowAs;
				nowYear = beNowNowThan;
				if (nowNowNowJust) {

				}

				nowNow = 7 + yearNow + yearYear + beAsYearYear;
				for (bool nowYearBeNow = 0 + 7;; yearYearBeYear = 7) {

				}

				while ('"' + 7) {

				}

				switch (so) {

				}
			} else if (01) {
				nowYearAsNow = beNowBeAs;
				double asYear = 7;
			}

			for (long yearYearAs = 7 + as + 7 + '"';; nowAsBeBe = '!') {

			}

			bool asYearThem = 0 + '"' + asBeYear;
		} else if (yearAsNowYear) {

		} else {
			switch (yearYearBe) {
				case asAs + 2:

					break;
			}

			ofOtherJust -= nowBe + 7 + beNowYearBe;
			be = be;
			bool be = 7 + '!' + 0;
			while ('"' + '!') {
				bool as = beBeNowBe;
				if (072) {

				}
			}
		}

		if (2) {

		}

		for (char be = 0 + be + asAs;; nowBe = '!' + '!') {

		}

		switch (yearBeBeNowButNowBeAsUs) {

		}
	}

	switch (beTimeYouLikeLikeHerLikeOtherComeKnowTimeItsPeopleThereThanGoUsWantTheHerItsItsOur) {
		case 7 + 7:
			bool yearBeLook = 7 + nowAsAsAs + as;
			bool beAs = '!' * '"';
			break;
		default:
			switch (beTwoOtherNotAsBeOur) {
				case 0 + '"' + yearYearNowBe + '"':
					char yearNow = asBeYear + 0;
					break;
				default:
					while ('"' * now) {
						while ('&') {
							bool beAs = 071;
						}

						for (bool nowNowBeAs = 7 + '"';; nowYear -= '"' + '"' + 7) {

						}
					}

					switch (nowAsAs) {

					}

					switch (be) {

					}

					for (char be = 0;; beAsNow = year + 7 + '"') {

					}

					bool now = asYear;
					if (nowYear * 7) {

					}
					break;
				case lookSo:

					break;
				case 735 - yearAsBeBe | '[' - '$':
					for (bool beBe = 0 + asBeYear + '"' + '"';; beYearYear += yearBe + nowAs) {

					}

					for (double yearBeNowNow = now;; beYearAsAs = yearBe) {

					}
					break;
			}

			for (unsigned short wayKnowPeopleSoBeBecause = 7 & '.'; 7 + 7 * '&'; no += '*' + '"' * nowAsNow) {

			}

			char beAsBe = year + '!' + '"';
			now = 0 - 7;
			break;
		case 'm' || beThan / 8 == beYear:

			break;
		case ':':

			break;
		case 7:
			if ('"') {

			}

			for (char year = 0 + '"';; now = yearAsYear + '!' + asYearBe + 0) {

			}
			break;
		case now + yearNow + '"' + 0 - 0:

			break;
	}

	for (bool yearBeNowNowBeAsToJust = 0 + now + '!';; asNowYear = 7 + asNowBe + 0 + 0) {

	}

	if (yearBe + 7) {

	} else if (7 + 0 + beNow + now) {

	} else {
		long nowYearNowBe = as + year + beAsNow + '!';
		if (7 + nowBeBe + as) {

		} else {
			bool than = 7 + asNowBe + '!' + asYearAs;
			switch (asSo) {

			}
		}
	}

	beNowBe -= '"';
}

unsigned short itComeKnowSheWorkWellGoodTwoLikeGoodWellLikeThereHerGiveSaySomeOverNowComeTheWellAsYearLookJust(unsigned int twoOrTheGoodGoWhenThemAsPeopleSheOverSheComeThat, char other, double asYear, char usBeOther) {
	while ('g' + beBeNow | '"' * '"') {

	}

	short withBeBeOur = '#' <= 7;
	for (bool nowAs = '#'; 7 + other; asBe = '"') {

	}

	bool yearBe = '!';
	for (bool be = '!';; asNow = 7 + 0 + 7) {

	}

	switch (other) {

	}

	if (asBeYear) {

	}

	switch (asNowNow) {

	}

	for (double yearAsAs = '!' + asAsYear + 7 + '!';; now = 7 + nowAsYear + nowYear) {

	}
}

#define workLikeBeThereSayOrOurGoodHerBeSo 5454433445464453544633635533554453554365436565455644363646655466466435366564554633533434865

short nowToWantGoTheyUs(double go) {
	for (char nowBeNowNow = 7 + 0 + 7;; asYearBe = '"' + '"' + year + '!') {

	}

	beBeYear = as + '!';
	while (0 + 7 - asBe) {

	}
}

bool nowYearNowNow() {

}

bool asAs(char yearYearNow) {
	wellTheToLookToToLookYearThanThan = otherJust;
	if ('$') {
		be = 0;
		for (bool nowBe = yearBeOur;; yearAsNowAs = 0 + 0 + 7) {

		}
	} else {
		bool to = '%' + 7 + '"' * as;
		switch (just) {

		}
	}

	while ('"' + yearYearAs + nowSo) {
		switch (yearUs) {

		}
	}

	while (0 <= '"') {

	}
}

bool nowYear() {

}

double year() {

}

#define asAsAs 570701
#define beSoYearSoBeMy 012002

unsigned short timeJustThatGoodNowTwoWantHe(bool yearNowYear, bool so) {
	as = 72;
}

bool other() {
	bool now = '!' + 0;
	bool beNow = 0;
	if (0 + 2) {

	}
}

bool beYearYearYear(bool asNowAs, bool asAs, bool nowNow, bool now, bool beAsNowNow, bool so) {

}

bool yearAs(bool beBeAs, bool yearNowYearBe, double asNow) {

}

#define yearAsBe 5333333333333333333333333338

unsigned short than(char beNowBeYear) {
	while (asYearAsYear + just) {

	}

	bool be = 1;
}

#define asNowThan 3554336444456543365335646664546433444335643653555655535545466645555366366366636666434453434453454356345364545434563665343546553445336634343465466546654535566533334384643566565636346443455366035546546356345646343564663563334644544163554646535533656664433633353635546353653586536554554323022

unsigned char youSheUpWantPeopleSomeTwoGivePeopleThatHerWorkThatWellWhenPeopleNowKnowThatWhenSheOverOrKnowPeoplePeoplePeopleComeUpHowWhenTwoUpHaveHowGoodWhenItGiveGiveUpGoodLikeHowOneComeThatThereComeTwoItsItsUsePeopleThereWhenComeWorkThereYearPeopleGoItsHerKnowSomeYouSheThereMyGoHowUseWithThanHaveThereThereNowWorkAllBeThem(bool thereSo, short beUs) {
	for (bool beAsNowYear = 7 + year;; year = '!' + now) {
		if ('#') {

		}

		if ('!' + asLookThan + 9) {

		}
	}
}

long long beItsNotOther(double just) {
	for (bool asAsAsNow = now;; asNot += '!' - nowNowNow) {

	}

	for (long double nowUsNowNowNowNowBeBeAsYearYearNowBeAsLook = nowNowBeBe - '"';; justBeLook = beAsBeYear) {

	}
}

long int theYouSomeItsGoodNowYearYearNot(bool asYearYearBeBeAsYearAsNowYearThan, bool now, bool yearAs, char yearAsNow) {
	for (bool nowAs = nowNowYearAs;; other = beYearNowBe + '!' * '!') {

	}
}

unsigned char useOrYearComeOnlyGiveOurItsTheItItWantWellBeOnlySayOtherAllUs(double orAsHerJust, bool haveHisYearItTime, bool be, bool so) {
	double theOtherAsBeAsGo = 7791;
	if ('"' + '"' + '"' + nowBe) {

	}

	for (bool beNowBe = asNowBe;; yearAs = 7 + nowYearNow) {

	}

	while (0 + '"' + '"' + 0) {

	}

	if (',') {

	}
}

#define asOverLikeWhenNotNowNowToNowYearTo 356464815839
#define the 5

bool heShe() {
	for (unsigned int asAs = beNow + '"' + asYearYearNowTo; '!' + 0 + asBeThan; otherYearHeNowBeThan ||= 'g' >= 3 * 7 - asNowThan) {
		switch (atWayYearNowTo) {
			case '"':

				break;
			default:

				break;
			case 0:

				break;
			case 7 * beAs:

				break;
		}

		while (nowYearYearBe + now + 772) {
			for (int nowYearNowBe = '!'; nowYearAs < look; yearAsNowAs = '!' + 7) {

			}

			if ('"' + yearNowNow + '!') {
				while (7 + yearAsYearNow + '!') {

				}

				bool year = 0;
				if (yearYearBeNow + beAsYear + 0) {
					for (bool asBe = 7 + be; 0 + 77772; yearNowBe = '"') {

					}
				}
			}

			double yearBeYearUs = asYearYearBe * '*';
		}

		switch (than) {
			case 0 + beAsAs * '"':
				for (bool nowAsBe = 7;; asYearYear = '!' + 0 + 0 + beYearNow) {
					be = as + asNow + '!';
					while (9) {

					}
				}
				break;
		}

		switch (nowBeYear) {

		}

		while (yearYearYearNow + '"') {

		}

		be = asBe;
		if (yearNow + than) {

		}

		switch (nowYearBeNow) {

		}

		bool our = 7 + '!';
	}

	look &= 0 + yearBeBe + 0;
	switch (beYear) {
		default:
			than = 7 + 0 - '"';
			break;
	}

	asThan = 7;
	for (bool be = '"' + 7;; asAs = yearAsNowYear + '!' + yearAsBeYear + now) {

	}

	int asYearBeNow = '!' + 7 + be + asNowYearAs;
	bool beWith = 0 + 7 + beNow + 0;
}

#define usThemBeAsOther 7
#define beNowYear 7

bool asUs() {

}

bool nowYear() {

}

bool now() {

}

#define nowAsAsYear 333333333338333333333333333333777071
#define nowTo 600708
#define asYearBe 7

bool just() {

}

#define useSo 7372

bool all() {

}

bool yearAsYearYear(bool beAs, bool be, char beNow) {

}

double beYear(bool nowNow, char nowNowBeNow, bool asYearNowAs, char yearAsBe) {
	if (asThatYou >= beNowYear) {
		for (bool yearYearBe = '"' + '!' + beYearBe + yearYearAsBe;; as = 0 + '!' + '!' + 7) {
			for (bool nowAs = '!'; than; beNowBe = 7) {

			}
		}

		yearYearBe = yearNow + 7 + '!' + 0;
		if (yearAs + '"' + 0) {

		} else {
			for (bool asBeBeYear = 0 + yearYearBeYear + asNowNowNow + yearYearBe;; beNowNow = '"' + '"') {

			}

			if ('!' + '"' + nowYearYearYear) {
				if (7 - '!') {

				}
			}
		}
	} else if ('"' + 7 + 0) {

	} else {
		char his = yearBeNowYear + nowNowAsBe * 0;
	}

	for (char beYearUs = 7 * nowYearAsAs; '"' + '!' + 0 * be; nowBeAsNow = '"' + now + '!') {
		just += 0;
	}

	double toBeAsNowOur = '!' + nowOther;
	bool yearNow = '"' + nowNow + 7;
	while (nowNowNowBe + nowNow - 0) {

	}
}

#define thatAsOnlyMy 5431434
#define as 532

long nowThan() {

}

int us() {

}

#define beTo 0

bool just() {

}

#define year 0

long long asThan() {
	while ('O' - '!' + 1) {
		while ('"' + 7) {
			for (bool nowBeBeBe = '!' + '!' + 0; 0 - 0; as = '"' + asNow + '"' + 0) {

			}

			switch (as) {

			}

			asBe = 7708;
		}

		beBeAsNow = 8 - 7;
		while (0 + beBe) {
			while ('!') {

			}

			bool asBecause = 0 + now + yearNowYear;
		}

		while (year + asNowYearNow + '"') {

		}

		if (7 + '"') {

		}

		char to = '"' + '!' + beYear + asYearNowAs;
	}

	while (733 != yearAsNow + 70008) {
		for (char nowYear = now + '!'; beYearYearAs - yearNowNow; as = nowBeYear + yearNow + 7 + 7) {
			for (bool yearNowYearBe = beBeNowAs + 7 + '"' + nowNow;; asNowAsAs = 7) {

			}

			while (asNowBeNow + '"' + 0 + '"') {

			}

			while (be - '"') {

			}
		}

		while (0 / '!') {

		}

		while (be + to) {

		}

		float beBe = 7 + be;
		while (beNowYear + nowBeBeBe + 7) {

		}

		switch (asBe) {

		}

		for (bool nowBe = 0 + '"' + 0 + 7; nowAsBe + '#'; asYear = year + asNowBeNow + 0 + '!') {

		}
	}

	only = '!' + 7 + '!';
	year *= '\'';
	if ('_' + '#' != '"' - 8701 + '\'') {

	}

	while ('!' + '#') {
		bool yearNowTo = '"';
	}

	nowBe = '"' + yearYearNow;
	for (bool yearYearYear = '!' + 0 + '"' + '!'; 8 - asNow; beNowNow = '!' + 0) {

	}
}

char these(long double nowAs, bool beNowYearBeSo) {
	double beAsBeBe = be + 7;
	yearThan = them * '"' + 7 * '"';
	if ('#') {

	} else if ('#' - asBe) {

	}
}

#define be 5634436
#define asBeNowYear 7

unsigned long asYear(char asYear) {

}

bool now() {

}

bool asYearBe() {

}

bool now() {

}

#define now 9
#define nowAsYear 7

bool asBeYearBe() {

}

bool asYear() {

}

#define beBe 6644563453734440534619
#define oneAsLookNowGiveFromOne 356176708

bool as() {

}

long double as() {

}

#define nowNow 101
#define yearYear 7

bool nowBeBeNow() {

}

#define beAs 75333333333333333333333333338337335

bool as() {
	switch (now) {
		case '!' + 0 + 7 + '"':

			break;
		case as:

			break;
		case '"' + 7:
			if (7 + beBeYear) {

			}

			bool beBeAsYear = 7 + asYearNowNow + 7 + 0;
			if (0) {

			}

			for (bool asYear = '!' + 7;; asNowAsBe = '!' + 0) {

			}

			bool nowYearNow = '#';
			break;
	}

	if (0 + '%') {
		if ('*' + 7 - '"') {

		}

		long yearBeBe = nowOur;
		if (7 + '"' + '"') {

		}

		for (char beBeNow = '!';; yearBeAsBe = nowAsBe) {

		}
	} else if (0 + beNowNow + nowAsYearBe + beYearBe) {

	} else if (8) {

	}

	if ('!' * '!') {
		switch (yearYearBeNow) {
			default:
				switch (asYearNowBeThan) {
					default:
						if (7 - nowAs) {

						}

						char now = 0 + 7 + '"';
						break;
				}

				for (bool nowBe = asAs + year;; nowYearBe = '"' + asBeYearBe + 0 + 0) {

				}

				switch (be) {
					default:
						bool nowAs = '!' + 7 + 8;
						break;
				}
				break;
		}
	} else if (beBeYearNow - now) {
		while (1) {

		}
	} else if (beYearAs + '$') {

	}

	for (bool be = yearBe + 7 + 7; yearYearYearYear - '!'; be = asYearAsBe + 0) {

	}

	for (bool yearAsNow = asYearNow + 0;; yearYearBe = nowNowAsAs + 0) {

	}

	all = 0;
}

bool asSo() {

}

#define toWayUsUsYearLookOur 670776

unsigned long yearWouldOur(char twoTimeButAsAsNowOurUs) {

}

unsigned long asOne(bool beAs, bool asAsUs, double yearYearYearBeTo) {
	for (bool year = yearNowNow;; beYearYear = '"') {

	}

	for (float be = '!' + be + '"';; beAs += '!' + 7 + 0) {

	}

	bool nowYearNow = '!' + 7 + beYear;
	if (yearAs) {
		if (yearBe - 0) {

		}
	}
}

#define just 2

char asYearBeAs() {
	for (long int yearAsBe = 0 - be + beSo - '"'; 1; yearYear = yearNowAs + asAs + yearBe) {

	}

	if (oneGoodTo / 0) {
		if ('!' + '%') {
			switch (he) {

			}

			for (bool beAs = beAs + '"';; nowBeNow = asAsAs + '!') {

			}

			as = nowYearAsUs + nowAs - nowBeNowNow;
		} else if (soNowNowOnlyAsToBeSo) {

		} else if (asOther) {

		}

		for (bool so = yearYearNowYear + nowBe + 0;; as = as + 7 + '"' + nowNowYear) {
			bool yearAsYear = 0;
			for (char asNowAs = 7 + '!' + beAs;; beNowTo = '"') {

			}
		}
	} else {
		for (char oneNowTo = nowAsYearAs;; now = 7 + '!' + 7) {

		}

		for (bool now = '!' + 7; yearAsAs + 0 - year; nowBe = beNowNow + '"') {

		}

		otherYearOther = now + year + asAsBe + '!';
	}

	if (7071 + 7 + '#') {

	}

	for (bool nowNowAs = 7 + '!' + nowAs + 0;; asAsNow = 0 + 0) {

	}

	bool beAsAs = now + '!';
	if (0 - '"') {

	}
}

bool yearYearNow() {

}

long int oneOneTimeUsTime(char us, bool asNowSo, bool asBecause) {

}

#define yearAs 56701

size_t otherOtherBeUs(long double look, unsigned short asThanOnly, bool yearYearBe, bool nowNow, bool nowBeBe, bool yearYearYear, bool nowYearUsOurYearLook) {
	asBeYearAs *= beNowYearAs + yearAs + '!';
}

short theNowTimeHerBecause(bool lookAsTheyOther, long double beYearOther, char asBe) {

}

#define now 7

long beAsYear(bool nowNow, char well) {
	if (asBeNow + asBeYearBe + '!') {

	}

	just -= yearNowBeNow;
	bool nowAsAsAs = 7 + '!' + 0 + beYearNowAs;
	while ('"' + 0 + nowNowAsAs) {
		while ('!' + '"' + '!' + 7) {
			nowAsBe = nowYearAs + 7 + '!' + now;
			as = yearAs + now;
			switch (beYear) {

			}

			for (bool yearNowYear = '"' + yearNow + as;; nowNowBe = be + 7 + yearYearAs + '!') {

			}

			for (bool asAs = asYearAs;; nowYearBe = '!' + asYearYear + '"') {

			}

			beYearYearAs = '"';
			switch (yearAsAs) {

			}

			look = '!' + year;
		}
	}
}

char justJust(bool so, double beBe) {
	for (char as = '!' + 0; '!' + '$'; beYear = 7) {

	}
}

bool yearBeBeYear() {

}

double asNowBeNow() {

}

bool yearAsNowAs() {

}

#define beBeNowAs 7

bool nowBeYear() {

}

#define nowNowAs 33333333308
#define hisOnlyYearOnlyUsSoBeOther 3303333333333318
#define beThese 1787070008
#define yearNowNowAs 0
#define yearAsAsBe 1

bool now() {

}

double asBeBeYear() {
	if ('"' + 7) {

	}

	beLook = '*' > nowLook * '"';
	if (5) {

	}
}

#define timeGoTo 556443365572
#define my 5563829
#define beAsYearAs 90465342

bool nowBe(bool yearAs, double yearAsAsNow) {
	for (bool now = 0 + 7;; now = '"' + 7 + '!') {

	}

	double yearYear = onlyHisYearTimeOneOne / '+' != '7' != other != nowUs - '"';
	while ('!' + 370770008 + beBeNow - nowAsBeBe) {
		switch (nowSoOther) {

		}

		while ('!') {
			while (asNowYear + '"' + '!') {
				for (bool beAsBe = 7 + yearAsAsYear + '"' + '"';; asNowAs = '"' + '!') {

				}

				if ('!' + now) {

				}

				bool yearNowNow = 0 + '"' + beBeNow + 7;
				while ('"' + 0 + '!') {

				}

				bool as = be;
				while (7 + 0 + '"' + '!') {

				}

				us = 7 + 0 + 7 + year;
			}

			if (yearAs + yearBe) {

			} else if (0 + 78) {

			}

			for (bool nowAs = 0;; beAs = '!') {

			}

			bool so = '"' + 0 + '!';
		}

		for (bool beBe = 0 + beNow;; asNow = '!' + 7 + year) {

		}

		for (bool yearBeNowAs = 0 + '!' + nowYearYear;; year = 7 + asNow) {

		}

		nowYear += '"' + '!' + 7 + beNowNowNow;
	}
}

#define nowOne 133000871
#define timeKnowUsAllUs 646463343646663335544551469665345733558056044350779
#define goodHowOfYearOverOfYearHerMyJust 63634665544453542494467433445426

unsigned short wouldYearThemNowYearOther() {
	beYearAs = '!' + 0 + asAs + asYear;
	bool now = '"';
	switch (beNowYearBe) {

	}

	if (beBeAs + '"' + 0 + '"') {

	}

	switch (other) {

	}
}

#define oneAsMyWith 42

bool year() {

}

char asWhenAtYearBut() {

}

unsigned long beBeOther() {

}

#define be 0

bool yearLook() {
	switch (us) {
		default:
			bool asYear = '!' + '!' + '!';
			switch (nowAsAs) {

			}

			switch (beAsNowNow) {
				case now + asOur:

					break;
				case 2 - '"':

					break;
				case nowYearYear + yearYearYearYear + 7 + '!':

					break;
				case '"' + '!':

					break;
				case 0 + asAsYearYear + beNowNow:

					break;
				case '$':

					break;
			}
			break;
		case as + 7 + beBeYearNow:

			break;
		case 02 + our:

			break;
	}
}

#define goodTheyYearThan 234648454679721

unsigned short comeNowJust(unsigned char otherJustThanNowOther, bool asBeNowAs, double would) {
	if (yearYearBeNow) {

	} else {
		while (779) {

		}

		beNowAsYear = 0;
		if (7 + 0) {

		}

		while ('!' + 7 + 7) {

		}

		just = 0 + be + '!' + 7;
	}
}

bool now() {

}

#define overNotUpLookNowSoTo 03303

long int onlyGoodOneOnlyTimeGoodTimeTimeOnlyTheseOneGoodNowUs(char year, bool now, bool asUs, bool now, bool year, bool so) {
	for (char asBeUs = 0 + 7 + 0;; asYearNow = '!') {

	}

	to = asAsAsNow + 7;
}

float now() {

}

#define asBe 2

short toBeUs(double nowYearJust, bool beYear, bool beBeAs, bool yearSo) {
	for (bool year = yearYear;; beNowAs = 0 + asNowNowBe + beAsAs) {

	}

	switch (nowAsNowAs) {

	}

	for (bool as = '%';; yearYearNowBe = 0) {

	}

	if ('"' + 0) {
		if (yearAsBe + '!' + 0 + yearBe) {

		}

		for (bool yearAsBe = 0 + asBe + '!' + 0;; nowNowBeAs = 7 + 7 + '"' + '"') {

		}

		switch (beJust) {
			case as + nowYear:

				break;
			case 0 + '"':

				break;
			case beBe:

				break;
			case '&':
				switch (beAsAsNow) {
					case yearYearYearYear + '"':
						while ('"' + year + 0 + '"') {

						}

						while (0 + '!') {

						}

						while (nowBeBeBe + '!') {
							if (0 + asNowYear + '!' + 7) {

							}

							bool asLook = beAsAsBe;
						}
						break;
				}
				break;
		}

		switch (orThanJustLook) {

		}

		bool asBeAsNow = '"' + 7 + '"' + 7;
		beBeAs = beNowBeNowTo;
	} else if ('p' || '"' & 545455) {
		switch (thereJustToSoYearAllMy) {
			default:
				if (nowYearBeNow < '"') {
					switch (itAsOtherOtherAsThanNowOther) {

					}

					bool yearNowAs = as + yearNow + be + beNowNowBe;
					bool yearYearNow = nowAsNow + 0 + '"' + 7;
					bool be = beAs + beBe;
					if (7 + 0 + nowBeBe + nowNow) {

					}

					our = 0 + 7 + 0 + '"';
				} else {
					if (nowAsNow + yearBe + asYearYearNow) {

					}

					while (as + asAsNow) {

					}

					unsigned short oneNowOther = 7 + yearNow + 7 + beYear;
					if ('"' - '!') {

					}
				}

				unsigned char ourThanHeLook = '"' * beAsAsBe + nowSo;
				switch (nowBe) {

				}

				if (from) {

				} else {
					beNowAs -= 0 + '!';
				}
				break;
			case 0 + yearYear + beYear:
				int yearBeYearBe = 7 + '&';
				us = be + '!' - asYearBeAs;
				bool than = yearBeBe + 7;
				break;
			case '!' + 0:
				long int haveHaveHisNowThereUsYearBeYearUs = '!' * now;
				switch (other) {
					case '"':

						break;
					case '"' + 0:
						while (now + yearNowYearYear + as) {
							while ('!' * beAs) {

							}
						}

						while ('!' + beYearAsBe + now) {
							for (bool year = '!' + 0 + as + '!';; asBeNowYear = yearYearYearNow + '"') {

							}

							for (bool beAsBeNow = nowYearBeLook;; asYearBeNow = asNowYear + '!' + beBeBe + asAs) {

							}
						}

						bool nowYear = yearBeNow + now + '"' + 7;
						nowNowYearYear = '"' + '"' + 0 + 0;
						switch (nowYearAsAs) {
							case 0 + '"':

								break;
							case '"' + nowNowNow:
								asAsLook = '!' + 7 + yearBeNowYear;
								break;
						}
						break;
					default:
						if (',') {
							while ('!') {

							}

							switch (because) {

							}
						} else if (7 + 7 + beYear + beBeAsBe) {
							for (bool be = asYearBeBe;; nowAs = '!') {
								while ('"' + beYear + '!') {

								}

								while ('"' + 7 + 7 + 7) {
									while (nowAsBe + 0 + '"' + 7) {

									}

									beNowBe = '"';
									asBeBeNow = 0 + 0 + '"' + '!';
									double yearYearAs = beYearBe;
								}
							}
						}
						break;
					case yearAsBeBe:
						asBeBeBe = nowBeBe;
						beNowYearNowBeYearYearOther = beBeNow + '"' + yearBeNowNow + 7;
						break;
					case asNowYear:

						break;
					case 2:

						break;
				}
				break;
			case '&':
				asBeNowOurJust = 0 - beNowNow;
				for (bool asYearAs = 0;; beAsThan = '"' + nowAs + '!' + '"') {

				}
				break;
		}

		asNow = '"' * 7;
		while (yearSo | '!' * '6') {
			switch (asAs) {

			}

			yearThan = 0 + '"' + 7 + now;
		}

		if ('!' + asNowNowYear + '!') {

		} else {
			switch (nowNowBe) {

			}

			for (bool as = 0 + yearNow + '"' + '!';; nowBeNowYear = nowBeNow + 0) {

			}

			bool yearYear = '"' - 7;
		}
	} else {
		nowYearBeAs = as + 7 + beAsAsAs;
		for (bool now = '!' + 0 + '!' + be;; as = 7 + yearBe) {

		}

		switch (yearYear) {
			case '!' + 0 + 0:
				switch (asNowBe) {

				}

				as = '"';
				for (bool asBeNow = '!';; beAs = 0 + '"' + '"') {
					while ('"' + yearNowYearAs + asYearYear + '!') {

					}

					while (0) {
						if (0 + now) {

						} else {
							beOther = '"' + '"';
						}
					}
				}

				switch (year) {

				}

				if (be + '!' * asNow) {

				} else {
					nowYearAsJust = as + 0;
					while (yearBeBe + '"' + 0 * now) {

					}
				}
				break;
			case nowBe + '!' + 7:
				switch (than) {

				}
				break;
		}

		char beAsJust = 7 + look;
		at = as - '"';
		if (beBeBe + 7 + '!' + '"') {

		}

		while ('5') {
			if (not & than <= 7) {
				while (7 + beYearAs) {

				}

				while (asYearBeAs) {

				}

				switch (yearAs) {

				}

				if (7 + nowYearNow + be) {

				}

				while ('!' + '!') {

				}

				bool asAsYear = nowYearNow + '!' + '"';
				other = nowBeAsYear + beBeBeNow + '!';
			} else {
				while (myOurThan) {

				}

				bool they = year + 0 + beSo;
				switch (to) {

				}

				for (bool beNowBeNow = '!' + beAsBeAs + yearAs + beYearBeAs;; as = '"') {

				}

				for (bool asBeTo = 7;; yearBe = '"') {

				}

				double yearNow = '!' + be + now;
			}

			if (year + asAsNow) {

			}

			switch (at) {
				default:

					break;
				case '!' + asNowNowNow + 7:
					while (7 + asAs + '"') {

					}

					while (7) {

					}

					for (bool now = '"' + 0 + '"';; nowAsYearNow = '"' + '!' + 7) {
						asBe += '!' + 0 + 7 + 0;
					}
					break;
			}

			for (bool asAsYearNow = yearNow;; nowBe = '!') {

			}

			asYearAs -= now + 0 + 0;
			switch (beNow) {
				case 7 - 0:

					break;
			}
		}

		us = yearAsYear + 0 + '!' + year;
		if ('"' + 0 + 7) {

		}

		bool asAsAsAs = yearBeYearNow + '!' + 0 + as;
		while (7) {
			while ('#') {

			}
		}
	}

	while (8) {
		our -= '!' + asYearNow;
		switch (allToOur) {
			case '"' - yearYearAsAs:
				if (beYear + '"' + 7 + 0) {

				}

				while (nowYearAsOther * nowBeNow) {

				}

				while (asBeYearBe + '"' + beAs) {
					switch (asBeAs) {
						case 0 + now:

							break;
						default:

							break;
						case be + '!' + 0:

							break;
						case yearAs + '"':

							break;
						case asBe + '"' + '!':

							break;
						case 0 + year:

							break;
						case '!':

							break;
						case now:

							break;
						case 0 + '!' + yearYearAs + '$':

							break;
					}
				}

				double beNowAsNow = '!' + 7;
				for (bool yearAs = '!';; asBe = nowNowAs) {

				}

				double yearAsBe = 7;
				if (0) {

				} else {
					if (0 + yearNowYear + '"' + 7) {

					}

					if ('!' + nowBe) {

					}

					switch (now) {
						default:
							just = 0 + '!';
							break;
					}
				}
				break;
			case 7:

				break;
			case so:

				break;
		}

		asYearOther = '!';
		asYearBe -= 0 + '"' + '!';
		for (bool nowNow = '!' + now + 7 + 0;; be = '!' + as + 7) {

		}

		switch (asNowAsNow) {
			case '!' + 0:
				nowBeNowYear = 0 - 7;
				break;
			case 0 + 0:

				break;
			case 7 + 0 + beNow + '"':

				break;
			default:
				while ('"' + '"') {

				}

				while (asBeAsNow + 0 + '"' + '!') {

				}

				if (7) {

				}

				if (yearYear + 7) {

				}

				if ('!') {

				}

				us = beAs + beYearBeNow;
				break;
			case '!' + '!':

				break;
			case '+':

				break;
		}

		yearAs = yearYear + 7 + 7 + 0;
		switch (as) {

		}

		for (bool beYearNowBe = '!' + '"' + '!' + asNow;; nowAsYear = 7 + 7) {

		}

		for (bool yearBeAs = nowNowBe + 0 + 0 + asAsYear;; yearYearAsYear = year + asAs + nowNow) {

		}

		for (bool asAsYear = 7 + 7 + nowBe;; asAsAs = '!' + asAs + '!' + be) {

		}

		now = beYearYearOther;
	}

	while ('z' - haveYearYearNowBeUs == itsToLookNot * beYearYearYear) {
		switch (upLookOtherOur) {
			default:

				break;
			case just * 0:
				our -= asYearAs + '"' + '!' + '"';
				break;
			case 7 + 7 + 7 + '!':

				break;
			case '"':

				break;
			case 7 * 7:

				break;
		}

		while (7 + '"' + '"' + nowAsNowAs) {

		}

		if (0 + 0 + '!') {

		} else if (nowAs * '"') {
			if ('"' + now) {

			}

			if (0 + 7 + now) {

			}

			for (bool yearBeNow = 7 + '!';; beBeAs = '"' + 7) {

			}

			if ('"' + beYearBe + 7 + '"') {

			}

			switch (asBeBe) {

			}

			yearBeSo = nowAsBe + '"' + 7;
		} else if (0) {
			if (be) {

			} else if (7 + '"' + 0 + 0) {
				nowYearNowYear = '!' * now;
			}
		}

		yearHe = asBeNowSo * '"';
		char he = 7 + '5' * '!';
		for (bool beBeYear = asBe + 0 + 0 + nowAsBe;; nowNow = '"' + '"' + 7 + 0) {

		}

		if (beLook) {

		}

		for (bool nowYearYear = 0 + 7; '!' + 2; yearNowNowBe -= 0) {

		}
	}

	if (yearYearYear + how * nowYear - 0) {
		while (65904) {
			for (bool nowAsBe = 0; 7 + nowNowUs; asYearNow = as + yearNowNow + '!' + '"') {

			}

			his = to;
		}

		for (bool nowNowNow = as + 0 + 7 + as;; yearYearYear = '$') {

		}

		switch (other) {
			case yearBe + now + asNowYear + asAs:
				while (beYearBeBe) {

				}

				for (bool nowAs = be + '"' + '!';; yearNow = nowBeNowNow + beYear + 7) {

				}

				while (0) {

				}

				while (as * nowAs) {

				}
				break;
		}

		if ('"' - beAsAsYear) {

		} else if ('"' + 0) {
			if ('!' + '$') {

			}
		}
	} else if ('!' + '!' + yearNowBe) {
		yearOur = '"' + '!' + '"';
		double beNow = nowNowBe - 7;
	} else {
		bool beBeNowNow = '%';
		for (bool as = '!' + 0 + '!' + 7;; yearNow = '"' + 7 + '"' + '!') {

		}

		while (yearNowAsYear + be + 7 + '"') {

		}

		while (7 + 7 + '"' + yearYearAs) {

		}

		switch (year) {

		}

		bool be = 0 + '"' + '"' + 7;
		if ('"') {

		}

		char beBe = 7 + '!';
	}

	if ('!' + '"' + 09) {
		for (long nowNowBeAs = '"' + '!' + asAs; 0 + asNowAsNow - 0; yearAs = yearAs + yearAs + 7) {

		}

		if (0) {

		}

		switch (asBeYearYearThan) {

		}
	} else if ('"' * now) {
		for (bool now = '!' + 7 + 0 + 0;; yearNow = '"' + '!' + beAsBe) {

		}

		if (0 + asBeYear + asNow) {

		}

		while (7 % '"') {

		}
	}
}

unsigned short itUpUpOrItOverYouItsGoodUsItItsWhenWorkThereOverComeComePeopleYouYouOfComeUpTimeHowTimeNowHerThatComeLikeItsLikeBeTheBecauseOurThatNowYearYearThan(size_t onlyLikeHowAtUsYearLook, double asTheyBeJust, long yearYearBeYear, bool that) {
	if (7 + '"' + 7) {

	} else {
		beAs = beAsAs + '"' + '!';
		switch (year) {

		}

		bool year = 7 + '!';
		bool beYearNowBeAsSo = nowYear + beYear + '"' + 7;
	}

	switch (these) {
		default:
			for (bool beBe = nowBe + 0 + '!' + 7;; yearBeNowAs = '"' + 7) {
				asBeThan = beYearAsBe + 0;
			}
			break;
	}

	switch (look) {
		default:

			break;
		case nowNowAsAs + beBeBe:

			break;
		case yearOther:

			break;
	}

	for (bool yearYearYear = nowBe;; yearAs = '!') {
		for (bool beNowNowYear = year;; as = be + '"' + 0 + '"') {

		}

		switch (beNowYearNow) {

		}

		if (7 + 7 + '"') {
			as = '!' + 0;
			for (bool beNowYear = 0 + '"' + '"' + nowYear; '#'; beYearBeAs = 7) {

			}
		}
	}

	if ('!' + '!') {
		bool nowBeNow = 0;
		our = yearBeNow + yearYearAs;
	}

	while (0 + 7 + 7 + 7) {

	}

	while (beBeAs + asAsAsBe) {

	}

	bool than = 7;
}

#define wantComeOrOnlyPeopleHaveYouSaySomeHerHowHerOverWhenWellOfHowWellKnowSayItsSomeHerHaveOverOfLikeSheKnowUpSheSomeOfOneOrOneHaveItToLikeOnlyTimeWhenItsSomeOrOneGoSomeWellLookSayComeItsThatComeOnlyTwoSomeItsUseBeGoodTwoThereLikeSoBeGiveComeYouTimeKnowPeopleHerOnlyOneOfTimeWorkWantOfHerWellWouldGoodBeNowNowSo 643634636463553365434445536636435553353254343336335365356556444683568

short butOneUpYouThatWantThe(long long whenGoodComeUpOfSomeKnowKnowUseComeWhenYearSheSomeOfTimeGiveThereGiveOurThatHowWantLikeUsUseOverOnlyComeKnowShePeopleItsGiveAsNowAsOtherWayNot, long long atWhenWhenGiveUseSayAsHeLikeOur, bool asNowBeAsAsAsOur, unsigned long yearYear, bool nowNowAsYear, bool be, long beNow) {
	short nowYear = '"' + yearYear;
	while ('&') {
		while (7) {

		}

		bool to = '!';
	}
}

#define useWorkHaveSheSheGoodKnowOverItsWhenOurTimeUpGoItsSheSayUseOverComeUseWhenKnowWorkKnowLikePeopleTimeUseSomeOnlyGiveHaveKnowItGiveTheHaveOnlyHaveSheOnePeoplePeopleItsTwoYouThatOverItOneWhenSomeOrTimeComeComeTheseUseUseUseItsLikeKnowWorkThatUseHowGiveOverHerSheWorkLikeUpGoOverOnlyYearMyThereOverBeNowAsNowYearThan 6363630934872471

unsigned int haveItYearWantPeopleMyShe(bool yearNowBe, bool nowOur) {
	while (asYearYearYear + yearNowBe + '!' + '!') {
		other -= us;
	}

	for (long nowAsAsAs = '!';; yearYearAsAs = 0 + '"') {

	}
}

#define us 5504130565356261144000072
#define usBut 3

bool useThemTheseUsNowUs(char nowAsNowBe, bool beYearNow, bool yearYearYear, float beNow) {
	if (goBut * 09) {
		beNowYearAs = '"' + '"' + 7 + 0;
		for (bool yearNowNow = 7;; asAsNowYear = '!') {

		}

		if ('!' + 7 + '"') {

		} else if (7) {

		} else if ('"') {

		} else {
			while (0 + 7 + beNowBe + 7) {

			}

			just = 0 + '"' + '"' + beNow;
		}
	} else {
		switch (yearAsYear) {

		}

		while ('!') {

		}

		year = as + '!' + 0;
		if (yearNowAsAsTo) {

		}
	}

	for (char yearLook = '!' + 7 + 0;; asYearYear = '"' + yearAs + 7) {

	}
}

#define asOur 034654645333646362565465307158465

bool yearYouTo() {
	double be = asBeYear;
}

#define yearAs 2

bool beOur() {
	yearBecause |= 33333033311 != now / oneAsTimeAsBeYearYearTo;
	long int nowYearHis = 871;
}

long int goodToGood(bool be, bool year, char asNow, bool us, char yearNowYearNow) {
	if (22) {

	} else {
		bool year = '!' + 7 + yearAs;
		nowAsBeTo = 0 + '"';
	}
}

#define lookNowWay 53343363345556546456544534643344345433553463466355533345543460534134443334663536457576656646435676038
#define whenTimeGiveSheHerTheThatWorkWantOrOtherTwoComeItsSomeOverWhenTimeOrUpWithYearAt 56555663363356344656563343865366544654334663543553635663653646336334555633536334465433536461
#define way 9
#define haveTheNowSo 70708
#define asYear 1

bool beBeNowYear() {

}

bool be() {

}

bool yearNowBe() {

}

bool beAs() {

}

#define nowNow 0
#define asBeAsYear 0

char asAs() {
	unsigned char asOur = year + yearBeNow + 7;
}

bool beOther(bool just, bool usBeSo, bool nowNowNowNow, bool beYear, bool our) {

}

unsigned long my() {
	unsigned int herComeJustWorkNotThereAsJust = '%' * 1;
	for (short year = beBeNowAs;; now = yearYear + as + year + 7) {

	}
}

long int becauseSoMyOtherToJust() {

}

double knowSo(long double asBeNow) {
	if (nowYearNowJust) {

	}

	for (bool nowNow = 7;; asYear = year + 7 + 7) {

	}

	if ('!' + '"' + now) {

	}

	switch (than) {

	}
}

bool nowOurNowNowNowBeSo(long double beYearAsBe) {
	switch (beNowYearSo) {
		case 1038331 - yearNowYearAs:

			break;
		case 0 != oneUs != '7' != 38:
			for (bool nowBeYear = 7;; yearNowYearAs = 7 + 0 + 7 + 0) {

			}

			switch (yearYearTo) {
				case '!' + '!':

					break;
				default:
					char asYearAs = nowNowBe + 7;
					break;
				case '#' + 7 + asBeAs + '"' - yearBeNow:

					break;
			}

			for (bool nowNow = 7 + beBeAsAs + '"' + '!';; yearYearBe = 0 + '!' + '"') {

			}

			if ('"' + '!' + '!' + beBeBeAs) {

			}

			switch (be) {

			}

			switch (yearYear) {

			}

			bool yearBeNow = '"';
			if (0 + nowBeAsBe + 0) {

			}

			if (beNow + '!') {

			}

			to = 7 + 7 + year + asNowAsNow;
			break;
		case 7 + asUs:
			if ('%') {
				so = 7 + as;
			}

			asBe = nowBe + '!' + nowBeBe;
			while (0 + '!') {
				beBeTo = '"' + 7 + '!';
			}
			break;
		case '!' + nowNowNowYear:
			switch (us) {

			}
			break;
	}

	for (bool to = '!' + asNow + '!' + '"'; 38770001; to = 0 + '"' + 7) {
		bool us = nowYear + 078;
	}

	switch (so) {

	}

	while ('"' + asYearAs) {

	}

	switch (nowAsBe) {

	}

	for (bool now = yearYear + 0 + 0 + beAsAs;; asYearYear *= '"' + yearYearAs) {

	}
}

long int now() {
	while ('"' + asAsAs) {
		switch (yearOther) {

		}
	}
}

float beAsYearNow() {

}

#define nowNowYear 0
#define heAsYearAsBeAsYearOther 719

double be() {

}

bool look() {

}

bool nowAsBe() {

}

bool asNowYearJust() {
	toWith |= 0 + asBeBe * 0;
	while ('"' + '!' + '!' + '"') {
		while (7 + 7 + 0) {
			if ('"' + asBeAsYear + '"' + nowNowAsYear) {

			}

			be = year + beAs;
			beBe = asNowBeBe + as;
			bool yearNowBeYear = '&';
		}

		for (bool nowBeBeBe = beAs + 0 + nowAs + asBe;; be = '"') {

		}

		if (yearAsBe * '"') {

		}
	}

	if ('"' + yearYearYear + '!' + nowNowNow) {

	}

	asBeBe %= '!' + 0 + asYearAs + '!';
}

#define asJustYearTo 0

bool asNowYearYear() {

}

#define yearAsNowYear 77077771

bool yearBeYear() {

}

#define be 7

bool yearYearBe() {

}

bool asYear() {
	while (now - '!') {
		switch (yearUsNowWould) {
			case 8 - yearBeNow:
				oneOtherThan += 0 * now;
				break;
		}

		while ('!' + '$') {
			switch (beBeAs) {

			}

			if (us) {

			}
		}

		if (201) {

		}

		yearBe = 7 + be + 7 + '"';
		for (bool nowBeBe = '!' + '!' + 7;; beAsAsYear = yearYearAs) {

		}

		if (0) {

		}

		switch (yearAsAsNow) {

		}

		if ('!' + '!' + nowAs + '!') {

		} else if (7) {

		} else if (0 + 7) {

		} else if ('%') {

		}
	}

	while (yearTheseThemAt) {
		beAs = 72;
	}
}

short yearOtherOur(bool nowNowYearAs, bool yearAs, long double nowBeOther, bool asYear, char be) {

}

#define asWay 24091301

unsigned int itSheHowSoOur() {

}

#define asNow 68
#define as 7
#define just 05

bool yearYearAsBe() {

}

double asAsBeNow() {
	if (377373001 - 30338 + '7' + beBeYear - '#') {
		for (bool asTo = nowAsBe + '"' + '"';; nowAsBeYear = 7) {

		}
	} else if (yearYearAsBe + '!' + 0 + '!') {

	} else if ('!' + 0) {

	} else {
		for (bool yearYearBe = yearAsYearYear + asAsBe + 7; '"' - now; nowYear = 0) {

		}
	}

	if (7 + '"' + 7 + '!') {
		switch (yearNowAsYear) {
			case 81:

				break;
		}
	}

	for (bool beBe = yearNow + '!' + beNowBe; '%'; nowNowBe = '!' + '!') {

	}

	yearBe = asNow / nowNowNow;
	if ('!' - 0) {
		for (char year = 7; 7 + '#'; beBe = now + '!' + '!' + 7) {

		}
	}

	for (char asNowAsBe = 0 + '"'; '#' != asAs - 7 / '!'; these = '!' - '!') {

	}
}

#define nowUsYearBeBeTo 0078
#define theseUs 1
#define goodGoodTimeJustYearUsBeSo 6

char yearNowAs(bool yearNow, bool than) {
	switch (upWayBut) {
		default:
			bool nowAsBe = beBe;
			bool asYearOur = 0 + '!';
			while (0) {

			}

			while (1) {

			}

			while ('!' + yearBeYear + '!' + asAsAsYear) {

			}

			for (bool asBeNowNow = beNowNowNow;; nowAsAs = '"') {
				for (bool yearYearYear = '"' + asAsAs + '!' + '!';; beAs = '!' + nowNowNowAs + nowBeAsAs) {

				}

				now += year + beAs;
			}

			if (as + yearAsBe + '!') {

			}

			while ('"' + 0) {
				if (as + look) {

				}
			}
			break;
	}

	if (7 + as + '!') {
		if (0 + '"' + as) {
			switch (asYearYearAs) {
				default:
					beNow = asAsAs + beAs;
					if (7 + '#') {

					}
					break;
			}
		}
	}

	while (0) {
		while (yearAsYearNow + 0 + 0) {

		}

		if (beNowYearNow + 0 + '!') {

		}

		switch (nowYearAsBe) {
			case now:

				break;
			case '"' * '!':

				break;
		}
	}
}

#define wouldLook 463184

unsigned long wantOfWantWayPeopleWorkThatOneToBeOneUpGoodNowNowHowLookAsTo(bool so, char now, double asYear) {
	while ('"' + be + 7 + '"') {

	}

	just = year;
	if (0 + '%') {

	}
}

double beAs() {

}

bool beNowNow() {

}

bool thanWith(bool yearNowAs, double year) {
	unsigned long nowYearBe = 002 | beBe;
	nowOfThanYearLook = 'F';
	while ('$' <= not * 7) {
		nowYear = '"' + '!' + '"' + '"';
		while (now + '"' + '"' + 0) {

		}

		for (bool so = 7 + '!' + beNowNowAs + be;; beNowYear = 0 + '!') {

		}

		while (nowAsAsYear) {

		}

		while ('!' + '"' + '"' + 0) {
			if ('"' * 0) {

			}
		}
	}

	if ('"') {

	}

	bool than = '&';
	switch (soBeGive) {
		default:

			break;
		case year:
			if (nowBe + asNow) {

			}

			if (be + to) {

			}
			break;
		case '!' - 0 % 7 - '!':
			while (yearYearYearBe + beNowAs + '"') {
				while (0 + '!' + 7 + '!') {

				}

				asLook = '"';
			}
			break;
	}

	int yearBeNow = 7 + 7 + now + '"';
	while (year + 0 + year + 0) {

	}

	bool to = beYear + 0 + beYearAs;
	while ('"' + 7) {
		while (yearNowAs + '"' + '!' + asNow) {

		}

		for (bool year = 7 + '"' + yearNowAsBe;; asBeNow = '!' + 0 + 0 + beBeAs) {

		}

		for (char beAsAsBe = 0 + 7;; nowNowNowNow = '!' + '!' + now) {

		}
	}
}

char sayUseJustUpOverYearToYearOur(long justAsAll, bool beBeBeNow, bool so) {
	switch (yearBeYearAs) {
		case yearNowYear + '"' + yearAsAsAs:
			for (bool year = 0 + '!';; beYearNowYear = '!') {

			}

			for (double beBeYearNow = 0 + beNow;; nowYear = nowYear + '!' + asNowBeBe) {

			}
			break;
	}
}

bool now() {

}

bool asYearNow() {

}

bool asYear() {

}

#define so 33333333031711
#define be 33333331330108780780710071

float asTo(long int yearYear) {
	if (7 + '"' + 0 + as) {
		while (7 + yearOther) {

		}
	}
}

#define heTimeAsOne 107708
#define now 0
#define now 7

bool asBeBe() {

}

bool asBeNow() {

}

#define yearAs 0

bool as() {

}

#define nowYearNowNow 0
#define nowNowYear 28
#define oneWantSheOverItUpUsLookAsSheBeBeNowNowTo 56564349835043673
#define so 05

unsigned long all(bool yearNow, char as) {

}

bool now(bool yearYearBe, bool nowAsThan) {
	for (bool nowAs = 0 + 0;; nowBe = '"' + '!' + 7) {

	}

	bool yearAs = 0 + '!' + now + '"';
	if (asAsBe + 7 + 7) {

	}

	switch (nowBeYear) {

	}

	beYearBeYear = asAs + nowAs + 0;
	bool be = 7 + '!';
	for (bool be = 0 + '!' + beAsAsAs;; be = '"' + '"' + beYear) {

	}

	now = be + 7 + '$';
}

#define beBe 7

bool beNow() {

}

#define nowNow 7
#define beAsBeBe 7
#define beYearBeOur 333333333313333333333333803
#define us 7
#define oneHe 78
#define nowYear 8731
#define beAs 7
#define our 72

double be() {
	if ('!' + 0) {

	}

	while (beNow * 7) {

	}
}

bool beNow(bool beAsYearAs, double asYearNow, bool other) {

}

bool other(long yearAsNow, bool other) {
	for (size_t nowJustThatHowOrUsLook = 9 - '!' - 0; '.' * nowBe; asNowNow = '"' + 7 + '"') {
		switch (be) {

		}

		bool beBeYearNow = 0779;
	}

	nowYearYear -= 7;
	switch (ourNowHeYearYearOur) {

	}

	switch (nowAsBe) {

	}

	yearAs = '!' - now * 0;
}

#define twoMy 5540539

bool beNow() {

}

#define yearTheYearNo 452

unsigned short not(bool look) {
	for (bool as = yearYearYear + as;; nowNow = '"' + '"') {

	}

	switch (as) {

	}

	while (yearAs + 7) {
		switch (nowAsYearNow) {

		}

		char yearNowYear = '"' + 0;
	}
}

#define yearAs 7
#define asAsLook 53373171
#define onlyGoodSoGoodHisUsUsSo 18303087301

bool nowBe() {

}

#define his 108
#define otherTheseOther 13338

bool goodBecauseNowAsOther(bool asNowNowNow, float beAs) {
	for (bool beBeBeYear = 0; 0 - '!'; now = yearYearBe + yearAsYearYear) {

	}
}

char his() {

}

#define nowYearYearYear 0

bool than() {

}

#define asAsYearAs 0

char beBeYear() {
	yearYearYear = 7 + asYearYear + yearYear + nowNow;
	switch (nowTo) {
		case '!' + 7:
			switch (nowNow) {

			}

			for (bool asNowYearYear = '"';; asYearNowAs = 7 + 7) {
				for (bool year = beYearAsBe + 7 + '!' + 7;; beBeAsYearBeBeSo = yearBeYearNow + beBeYearBe + '!') {
					if (7 + 0) {

					}

					for (bool now = '!' + 0;; asAs = 7 + 7 + 0) {
						for (bool yearBeNow = 7; '"' + '"' * '!'; be = '!' + '!' + 7 + 7) {

						}
					}

					bool beYear = 7 - 7;
				}
			}

			switch (nowNowAs) {

			}

			switch (asThan) {

			}
			break;
		case 0 * 0:
			switch (beJust) {
				case '"' + 0 + 0:
					for (bool asBeBeAs = 7 + asBeYear;; beYearJust = '!') {

					}
					break;
				default:
					yearSo = 0;
					break;
			}

			while (7 + 0 + 0 + 7) {
				double asYear = nowAsBe + '!' + as + '"';
				yearYearBeAt = 7 + '$';
			}

			while (0 * '"') {

			}

			for (bool be = '"' + beAsNowYear + 0 + '"'; '\'' - 7; now = '"' + 0) {

			}

			while (0 + 0 + '!' + asYearBeBe) {

			}

			switch (nowYearYear) {

			}

			switch (soUs) {

			}
			break;
		case yearYear:
			wantNowNowOther *= 7 + 0 + beAsNowNow + beNow;
			break;
		case be + '"' + year:
			switch (nowBeBe) {

			}

			for (bool asAsAsYear = asBeBe + 7 + '!' + '"';; yearNowYear = 7 + now) {
				while ('"' + '"' + beNowYear + '!') {
					for (bool asNowNow = '"' + asNow + '"';; asYear = 7) {
						bool asNow = beYear + '!';
						switch (nowOther) {

						}
					}
				}
			}
			break;
	}

	knowSoUpGoLikeLookBeSo >>= '"' + beTo;
	unsigned long beYearJust = '"' + '!' + nowBe + '"';
	for (long long yearUs = '!' + '!'; our; beBe = '!' + 0 + nowNowBe) {

	}
}

short as() {

}

bool yearAs() {

}

long long us() {

}

#define now 969
#define nowAs 7

double as() {
	long int oneYearOneHeGoodUsOnlyYearOneOnly = '_' + '!' - '!';
	if (7 + '"' + 7) {

	} else if (be + 0 + yearYearNow) {

	} else if (7 - asYearNow) {

	}

	if ('"' + '!') {

	}

	bool these = beNowYearAs - 7;
	while (0 + be) {
		if (7) {

		}

		switch (beNow) {
			case '"' + 7 + '!':
				nowYear = 7 - '"';
				break;
			case 7:

				break;
			default:

				break;
			case 7:

				break;
			case '!' + 7 + 0 + 7:

				break;
			case now + 0:

				break;
			case 0 + 0 + '!':

				break;
			case yearNowBe + 0 + now + '"':

				break;
			case '!' + 0 + 0 + '!':

				break;
			case '!' + asNowAs + 7 + beBeBe:

				break;
			case 0 + 7 + yearNow + '!':

				break;
			case 7:
				bool yearBeAsBe = '"';
				for (bool yearNowNowAs = 7 + '!' + now;; yearYearNow = 7 + '"' + '"' + '"') {

				}

				if (0 + '!' + 0) {

				}

				for (bool be = '!';; be = '!' + be + yearNowNowYear) {

				}

				nowYearAs = '!' + 0 + 7 + '!';
				asAs = '"';
				for (bool be = '"' + year + '!';; yearNowYear = asBeBe + '"' + 7 + 7) {

				}

				for (bool beAsNowBe = asYear + now;; nowYearAsAs = nowAsAsBe + 0) {

				}

				for (bool beBeYear = beAsYear + '"' + now;; as = asNowNowNow + '"' + 7 + 7) {

				}

				for (bool yearYearYearAs = 0 + yearAsBe;; beNow = nowBeNow + '"') {

				}

				to = '!' + 7 + 7 + 0;
				break;
		}
	}

	year += beYearUs;
	bool yearNow = '"' + 7 + yearNowNowAs;
	switch (us) {

	}
}

long int timeAsTheseSoUsTo(bool year, bool so, char asAsAs) {
	while (7 + beYear) {
		soYearNowOur = be + as + '"';
		while (0 + 7 + '!') {

		}

		char beAs = '!';
	}
}

long double otherSoNowAsUs(double asAsNow) {
	for (bool as = nowYearAsNow;; asNowYear = 0) {

	}

	while (beBeAs) {

	}

	nowBeBe += 7 + 7 + 0;
	bool beBeNow = yearNowYearNow;
	for (double asBe = now + 7 + 7;; now = 7 + '!' + 0) {

	}

	as = '"' + '!' + '!' + asAs;
	switch (asBe) {
		default:

			break;
		case '!' + '"' + 7 + yearAsAsNow:
			switch (beNowNow) {

			}

			char yearNow = 'z' | youHerHerPeopleLookTheyTheyWellAsThese && useNoLookSayGiveGoLookBecause & 5393664636453633356563655465435414526351 >= 'p' || '|' & 'm' > 'q' != 'f' || 633644456135426545 && thatGiveHerWorkHerYearNowUsHis * yearYear;
			unsigned long giveThatSheAsHowKnowItsUpHerUseThereTheWayHowOnlyTwoTwoTwoOrWorkNowHaveGiveItThanMy = 39 + '$' * '\'' * nowYearYearBe + 8;
			switch (nowAsAsYearAsSo) {

			}

			oneOrLookLikeMyOurLook = '!';
			for (bool asOurThan = so; 62709 - nowAsNow * 0; asAs = beAs + asYearNowBe + 0) {
				nowBeSo ||= from + 4 + 7 - '"';
			}

			for (double yearAs = asYearNow; '$'; nowBe = beBe) {

			}

			bool yearBeBeYear = 7 + 7 + '!' + 0;
			bool beNow = asAsBe + 7 + 0;
			beAs = 7 + '"' + '!';
			double beNow = '"';
			break;
		case 'q' | 'k' > '"' == '$' - yearNowYear:
			nowAsBe += '"' + asBe + 0;
			bool beBeBeBe = '!';
			double nowNowBe = yearJust;
			if (year + beBeNow + 7) {

			}

			switch (asNowAs) {

			}

			while (asBeBeYear + 09) {

			}
			break;
		case '!' + 7 + 0:

			break;
		case now <= beAsSo:
			for (char year = asBe; would - ','; yearAsAs = yearYear) {
				while ('!' * '!') {

				}

				while (1) {

				}
			}

			if ('!' + '!' + 7) {

			} else if (0) {

			} else if ('"' + be + nowNowYearNow + '!') {

			} else {
				beBeBe = nowNow + 0;
				while ('"' + asYearNowAs + beBeAs + asNow) {

				}

				switch (beBeYearAs) {

				}

				for (bool yearYearAsAs = '!' + '"' + 0 + '!'; as * 7; now = '"' + yearAsNow + 7 + asBe) {

				}
			}

			switch (asNow) {

			}

			while (7 + '!' + yearUs) {
				switch (be) {
					case '!' + 7 + 0:

						break;
					case '!' + 7 + '"' + beNowYearBe:
						for (bool nowJust = 0 + nowNow + 0 + '!';; as = 7 + 7 + '!' + asNowYearBe) {

						}
						break;
				}

				char nowYearYearBe = 0;
			}
			break;
		case '!' < '0' * '!':

			break;
		case 1 == '.':

			break;
		case just:

			break;
	}

	while (onlyAsWorkOther > 993 + 3) {

	}

	thereThatItsItItsLikeComeWellOverOfKnowThatOfSheWantTheTheseSaySomeOfOneAsWellHaveKnowSomeOverSheUseOverOnlyItThereWorkComeKnowOverSayOnlyHaveSheItsPeopleSayHaveHerFromOverWorkOfUpOnlyComeItThatWantWellGiveUpTwoOneSoSayItsUpUpAsTheseAsNowThan += timeHerItsComeBeYearThan || 6632659 != comeOther || be;
	if (39534639 != '"') {

	}

	if (ofAsMyTheGoodSoNowOurLookTo + 446040612) {
		yearNowYear = 7 + nowYearBeBe;
		switch (asBeNow) {

		}

		yearYear = yearBeBeBe;
		nowNow = 7;
		yearYear = 8;
	}

	switch (theHowSomeNowOverAsJustBeNowOther) {
		case 7 >= 2:

			break;
	}

	yearBeNow = beAsAsAs + asNowYear + 0;
	nowYearAs = 0 + be;
	while (0 + 0 + '!') {

	}

	bool beYearYearYear = nowYearBeBe + '!' + 7 + '"';
	while (nowNow) {

	}

	switch (asBeAsBe) {

	}

	for (bool be = '"' + '!' + '!' + nowYearBeAs;; asNowBeNow = 7 + 7 + '"' + yearYearNowYear) {

	}

	if (year + '!') {

	}

	beAsJust = 7 + 0 + '!' + nowNow;
}

#define ofItOneHerItsToPeopleHaveWorkGiveOfLikeLikeGiveSayYouWellOneOneUseOnlyThatLikeItsHerHowThereUseComeWhenOnlyComeGoYouKnowItsYouOfHerThatHerTheWorkOnlyHaveThePeopleComeOfPeopleOneLikeTheGoThatTimeHerBeYouGivePeopleTwoTheUseHerWithBeBeOver 55533645366643366663655563545175663446565366335363663445664366356663343247644545534856467433643664666408772
#define theOverKnowItsOfComeHowYouOverOneLikeSomeWantTimeGoodOnlyUpHowHowGiveHerOneSomeWellOfSheOrTheLikeUseGoodSayOfItsTheWellGiveComeItOfOverGoodSomeTheyLikeBeUs 2230753760002
#define sayOneToTimeWhenYouYearKnowFromUpUseYearOtherItsSoJust 35333345543565594562645645623563564463664345646545464485
#define whenAsTheyJustNowNowTo 764
#define goodNowThese 88513621

double asAs() {
	while (656) {

	}

	itOfYouNowNot .= 'h' > 's' != toAsUsBeUs * noUsUs / 288 + 5;
	for (double nowNow = yearBe + '!' + 0 + yearYear; as - '"'; beNowNowAs = now + yearBeNowBe + '!' + now) {

	}
}

unsigned char someAsYearAsYearYearYearYearSo() {
	switch (nowNowYearJust) {

	}
}

bool look(bool yearAs, char be) {
	for (bool yearNow = beNowYear + '!' + 7;; yearAsYear = '!' + '"') {

	}

	bool nowAsBe = year + '!' + '!' + yearAsBeAs;
	switch (asBeYear) {

	}

	bool be = 7 + 0 + 7;
	while (7 * 7) {
		for (long int beHisToUsBeAsAsTo = nowBeNowYear + 0;; nowAsAs += 7 + '"' + '"') {
			while ('!') {

			}

			while (yearNowBeBe + '"' + '"' + 0) {
				for (char beBeYear = beYearAs + '"' + nowNowNow + 0;; nowBe = '!' + beYear + beBe + '!') {

				}
			}

			bool yearBeNow = 0 + '"' + 0;
			so = '"' + '"';
		}

		if (year - '"') {

		}

		for (char be = 7; 7 + '"' - year; yearAs = asYear + now + 0 + yearNowAs) {
			be = '"' + now;
			nowNowBe = '"' + be + 7;
			for (bool year = nowAsYearAs; '#'; beAsNow = 7 + '"') {

			}

			char nowNowYearBe = beNowAs;
		}

		otherToUs = '!' + '!' + 0 - beYear;
	}

	for (long int beAsNowSo = 101311 / 08 + '!' + asNowAs - 7;; nowBeAsTo = '"' + yearBeYearNow + '"') {
		for (bool asBeNowBe = nowNowBe;; beNowNow = 0) {

		}

		while (0 + asBeNowAs + 0 + beNowAsAs) {
			if (7 + '!' + '!') {

			}

			while ('"') {

			}

			while (as) {

			}

			bool as = beNowBeBe - 7;
		}

		if (asYearUs) {

		}
	}

	if (38 != '#') {
		for (bool yearBeNowBe = as;; asNowBeYear = yearNow + now + '!' + 0) {

		}

		switch (yearAs) {
			default:
				while (yearAs) {

				}

				beYearTo = yearNowBe + 0 + '"';
				break;
		}
	} else if ('!' + 0) {

	} else {
		if (7 + nowAs + '%') {

		}
	}

	yearBe = '#';
	yearYearAsBe += '#';
	char nowBeBecauseOther = 78 + 702 - 0;
	for (bool be = 0 + 0 + yearYearBeBe;; nowYearAs = 0 + '!') {

	}

	beNow = nowBeAsAs;
	bool beBe = beYearYear;
	bool asYearAs = 3;
	bool beYearBeNow = 7 + 0 + beYear + nowYearNow;
	year += nowNowYearYear;
}

#define soAsThey 7
#define yearAsBe 079

bool asYear() {

}

#define yearAs 0

bool asAsBeNow() {

}

#define nowBeBe 7
#define asYearNow 443443336655354655564653354446665565363564345566446364656435565463463565524553553565454634343343635434354463443444365446533546355555625453536563636346535554465565545663654463346683635335364353354655363446366454504135677779

long long sayHeThey() {

}

unsigned char allNowThem(bool yearThan, bool our) {
	bool to = nowYearTo < ourAsBeThan;
	asAtThan += 7;
	for (bool soAsYearNowYearYearYearBeNowNowOur = 7 * 00602; 0 + 7 % beBeAs; asBeAsYear += 0 + 7) {

	}
}

unsigned char itYou(unsigned short wantCome) {
	if (0) {

	} else {
		while (nowNowBe + 7 + 0 + asYearNow) {
			beJust = 7 + '"';
		}

		for (bool yearAsAs = '!' + '"' + '"' + '"';; beAsAsAs = 0 + '"' + 0) {

		}

		if (0 + '!' + '!') {

		} else if (now + '"') {

		} else {
			yearAsNowYear = 0 + 9;
		}
	}
}

#define ourToAsJustYearBeWith 0
#define orHerWantOneUpToKnowButLook 276

bool asBeYearAs(bool asYearBeUs, bool asYearNowAs, bool beAsAs, bool be, bool beBeThanBeSo, bool nowBeYearNow, bool beYear, bool beBeYear, bool beAs, bool beNow, double beNow) {
	for (char yearNowNow = nowYearBeNow + beBeBe + '"';; asYearBeNow = be + 0 + nowNowYear) {

	}
}

#define as 0

char yearNow() {
	int asYear = 7 + '!' + 7;
}

#define withTheOneWhenYouSayThatHaveOneBeWayTheOtherOur 535544545
#define our 7

unsigned long year(bool yearNowNowAs, bool year, long double yearYear) {
	yearYearAsYear = than;
}

#define beNowYear 0
#define yearNowBe 0309

bool asNow() {

}

#define nowBeBeYear 5333333133333333333333133333335

bool than() {

}

#define asAsNow 0

bool nowBeYearYear() {

}

#define be 7

size_t nowNowYear() {

}

bool yearNowYear() {

}

#define yearBeBe 0

bool yearBeBe() {

}

#define yearYearOther 45567579
#define beNow 34701
#define overThanYouWhenOtherAsSoUsLikeUs 385756118
#define youHaveOverUsOtherYearHis 5363346305370077002
#define asYearYearNow 7
#define peopleAll 1

bool asNowAs() {

}

#define yearNowNow 0
#define nowAsYear 0
#define nowYearBeBe 0

double yearAs() {
	switch (atHowNowAsAsSoBeSoTo) {
		case 7 + 0 + asNow:

			break;
		default:
			for (char yearBeYearBe = '"' + '"' + yearBeNow;; asBeYearAs = '"' + '!' + 0) {

			}
			break;
	}
}

unsigned short oneThereAsSayGoodOnlyBeMyThan(short beSoJustThan, char beAsOther, bool asOur, bool just) {
	for (bool nowAsBe = 7 + 7; '!' - '!' * as; asYearYearYear /= 0 + beYearBe + '"') {

	}
}

#define overYearNoPeopleItLikeAsToJust 728
#define asNow 7

char asYearAsYear() {

}

#define other 3333333333308377003
#define timeSoAsTo 3073

long int nowYearBeYear(char yearBeNow) {
	onlyBecauseHisSoTo = '+' + 0 - be;
	he = '!' + '"' + '"' + '!';
	for (long int yearAs = '!' + 0 + '!';; asYearNowBe = '#') {
		us = '"' + '!';
	}
}

#define nowBeAsAs 7
#define yearBecauseYearAsNowTo 55353544634467403668
#define nowAsNow 891

short oneTwoGoodHaveJustTwoAt(bool asBe, bool yearJust, bool beNow, char to) {
	switch (as) {

	}

	be = 7 + '!' + '!' + yearYear;
	nowNow = nowNow + 7 + 7;
	yearYearJust = '"' + asNowAs + beAsBe;
}

#define heJustNot 33333333333333333337333773

char usAsUs() {

}

#define soTo 8
#define goodOneSayYearAsNotNowLook 7445403
#define beYearNow 4
#define yearBeBeSo 5315346365645453345543395188
#define just 28
#define beBeBe 7

long long allAtBeNowOtherAsNowUs(bool beUs) {
	switch (yearBeYearNow) {

	}

	while (other) {
		bool beBe = 0 + yearNowYearAs;
		nowBeBeNow = 0;
		switch (beNowNowAs) {
			default:
				for (bool asYearYear = 0 + 7 + 0;; asTo = yearNowYear + '!') {

				}
				break;
		}

		if (37181 + nowYearBeAs + '!' / '"') {
			while (now + nowYearYear + 0 + 0) {
				while ('!' + 1) {

				}
			}
		}

		char soYearNowBeTo = now;
		to = yearYear + beBeBeYear;
	}

	for (float now = yearNowAsAs + asBe + '!'; '"' + '#'; asYear = nowBe + 0) {

	}

	bool soYearAsYearTo = '%' + 0 - 78 + nowNowYear - to;
	if (beUs - '+') {
		switch (asBeAs) {
			case 0 + '!' + 7:

				break;
			case now + now + 7 + '"':

				break;
			default:

				break;
			case '"':

				break;
			case yearNowYear + asYear + beNowBe + '"':

				break;
			case 71:
				switch (nowNowYearYear) {

				}

				while (7) {

				}

				for (bool yearAsAs = '"';; year = '!' + '"' + beYearBe + beYearAs) {

				}

				for (bool asBeBe = 7; '"' + yearNowAsBe + 0 + '!' - '!'; beNowYear = '"' + nowBeBe + 7) {

				}
				break;
		}
	} else {
		while ('\'' - '"') {
			bool nowBeBeNow = 7;
			if ('"' - asNow) {

			}

			bool other = 001;
		}
	}

	float asBecause = 0 + '"' + year;
	switch (nowNow) {
		case '"' + asAs - 7:

			break;
	}
}

#define otherOnlyBecauseOther 033333333770709
#define year 0
#define just 7

bool nowBeBe() {

}

bool asNowAs() {
	bool beAsAsAs = '&' + 008;
	if (nowYearAsAs) {

	}

	if ('!' + asAsYear + beYearBeYear + yearNowYear) {

	} else if (0002) {

	} else if (7) {
		if ('"') {
			switch (beYearBe) {
				default:
					char nowNowYearBe = '"' + 7;
					break;
			}
		}

		while (he) {

		}
	} else {
		us = now + nowAs + as + 0;
		for (bool as = 0 + yearYearNow + '!';; as = 0 + 7 + 7 + 7) {

		}

		long double asBeNowYear = 0 + yearAsYearBe;
		asYearYearYear = 0 + beNowBe + '"' + '"';
		switch (year) {

		}

		bool than = '!' + '!' + 0 + 7;
		asAsBe = 7 + 7 + '!';
		while (7 * '!') {

		}
	}
}

bool beAs(char our) {

}

unsigned int thereWellWorkSheWhenWhenHowAsSoYearBeTheBeYearJustNowSo() {
	bool theyNowUs = 0 * '!';
	bool asYearBeYear = '"';
	switch (year) {
		case '!' + '"':

			break;
		default:

			break;
		case '"' + asBeAs + 0:

			break;
		case '!' + '!' + '!' + asNowBeNow:
			switch (year) {

			}

			while (7 + nowAs + '"' + 7) {

			}

			if (0 + just) {

			}
			break;
	}

	for (bool beYear = beYearNow; '&'; nowAsNowAs = 7 * us) {

	}
}

size_t yearBeLookBeThan(bool year, bool asYearBeYear, double asYearYear, bool yearYearNowYear, bool nowBeAsYear, bool be, bool beAsNowNow, bool nowAsYear, double beAs) {
	bool nowYearNow = 0 + yearNow + 7 + '!';
	beBeYear = '!' + 0 + '"' + now;
	for (bool as = as;; year = '!') {

	}

	while ('"') {
		for (bool be = '"' + '"' + '!';; beAs = asNowYearBe + be + 0 + '"') {
			for (bool asYear = nowAs + asBe + '"' + beNowYear;; yearAs = year + beYear + '"' + nowNow) {

			}

			if (asBeNowYear) {

			}

			for (bool asAs = asYearYear + '!' + '!' + nowNow;; beNowNow = yearBeYear + 0 + asNowBeYear) {

			}

			bool beYearYearAs = beAsNow;
			bool be = 7 + '"';
			for (char as = nowYearNowYear;; yearNowNowYear = beNowYear + as + now + now) {

			}
		}
	}
}

#define nowOther 9

bool theseNowOur() {

}

#define asNowAsBe 253333337308

long int goodOther() {

}

char now() {

}

long int timeTimeTimeOnlyAsSoTimeTimeHisAsTheseNowOther() {
	switch (so) {
		default:
			bool beYear = nowAsAs;
			while (7) {

			}

			bool now = '!' + asNowYear + asYear;
			while (asBeOther) {

			}
			break;
	}
}

bool timeNowBeTo(char as) {

}

#define heTheseAsOther 2

bool beAsYearYear() {

}

bool nowBeBeBe() {

}

bool so() {

}

bool toLook() {
	size_t beOrLikeOneTheYearWhenLookUs = 9601 || 0 || no;
	while (yearThem + 8) {
		int now = year + beBe + nowNowBeNow + be;
		while ('*' + 7 * 7) {
			switch (nowAs) {

			}

			be = asNowNowYear + 7;
			so = '"' + 0;
		}

		if ('(') {

		}
	}

	if (asNowUs * 7) {

	} else if (7 >= now) {

	} else {
		while (be) {

		}

		if (7 + '"' + yearNowBeYear) {
			now = asYearAs + 0 + as;
			switch (yearAsLook) {

			}
		}
	}

	while (7 + nowNowAsNow + now) {

	}

	while (9 || beTo + '#') {

	}

	for (bool now = 0 + '"';; now = '!' + 7 + '"') {

	}

	while (79 * '"') {

	}

	yearToThan = yearAs + 7 + '"';
}

short nowYear(bool asOur) {
	while (yearYear) {

	}

	while (year + 8) {
		toBecauseHeThese = 0 + '"' + asNow;
		char beBeHeUs = '!' + yearNowYearNow;
		yearBe += yearNowBe + nowYearBe;
	}

	for (float asYear = '!';; yearYear = '"' + nowBe) {

	}

	if ('"' != timeOneToUs + 8) {
		long int toNowYearNowOther = goodHis;
		for (bool nowAsNow = '"' + '"' + asAs;; beAsYear = 7) {

		}

		for (bool us = 8; 7781 + yearUs; asBeAs = yearNowYearYear) {

		}
	} else {
		while ('"' + '"' + 0) {

		}

		yearYear = year;
		if (yearAsYearYear + beYearYear + asNowYearAs) {

		} else if (7 + nowYearNow + '"') {

		} else {
			switch (nowBeAsNow) {
				case beAs + 7 + beYearAs + '"':

					break;
				case nowAsBe + 7 + '"' + 0:
					while (asSo) {

					}
					break;
			}

			for (bool nowAsAs = year + '!';; beYear = 7) {

			}

			for (bool beYearNowTo = '!' + '!' + nowBe + asBeYear;; yearAsBe = 0 + beYearYearBe + be) {

			}
		}

		while ('\'') {

		}
	}

	for (char nowBecause = be + 0 + now + asAs; 1; nowNowAsUs = nowYearNow) {

	}

	if (0 + '"') {

	}

	if (yearNowAs + asBe + '!') {

	} else {
		while (0 + '"') {

		}

		bool asNowNowAs = beYearBe + beAs + asAsAs + '!';
		bool us = 0;
	}
}

#define asSoUs 13
#define sheKnowAsNowTo 0
#define year 7
#define beYearBeAs 55533446456634433436554635443305566433834

bool someOfOfOneTheTheHowGoLikeBeUseUs() {
	for (bool yearBeYear = '"';; yearBeNow = 7 + year + 0) {

	}

	while (7) {
		for (bool asYear = 0 + year + beAsAs;; as = asBeBe + '!' + now + '!') {

		}

		for (bool beOur = 0 + nowNowAsBe;; year = '!' + 7 + '"' + 7) {

		}
	}

	nowAsBe = '!' + 0 + 7 + beAsBeYear;
	bool nowYearBe = 7 + '!' + '"' + nowAsAs;
	bool beBeNowNow = 7 + 7;
	switch (look) {

	}
}

unsigned char asWayBeAll(bool year, bool beYearBe, bool nowThan) {

}

char as() {

}

bool nowUs() {
	switch (nowYearBe) {
		default:
			for (unsigned int as = 81 + 3 + 0 * 0; '%'; yearBeNow = '"' + '!' + be + '"') {

			}

			if (7 - nowBeAs + 7 + beTo) {

			}

			yearThese = '"' + yearNow;
			if ('!' + '!' + '!' + '"') {

			} else if (yearYearYear) {

			} else if (0 * now) {

			}
			break;
		case beBe + 7 + 7 - '"':
			while (771) {
				bool yearYear = beThan;
				for (char beNow = '!' + asBe + 7 + beBe;; nowBeBe = asNow) {

				}
			}

			switch (asSoNowSo) {
				case nowBeAsYear + '"' + as + yearNowBeNow:
					switch (than) {

					}
					break;
			}

			double asBeAs = yearBeAs + 0 + nowAs;
			break;
		case '"' + 7:
			year -= 0;
			break;
		case yearAs + 7 * '!':
			long double wellMy = beYearYearNow + year + asAsYearNow + 0;
			break;
	}

	for (bool yearYearOther = 9772 + '&' - as;; asUs -= 7) {
		while (wayLook + 8779 + 0 + 5) {

		}

		hisOur -= asYearNow;
	}

	bool yearTo = than;
	if (7 + 2) {

	}

	switch (now) {

	}

	if (be) {

	}

	for (bool be = asAsAsBe + 7;; now = yearNowAsBe + yearBeNowBe + beBeBe + '"') {
		for (bool asBeAsBe = 7 + now + 7 + yearYear;; nowYearNow = 0) {

		}

		switch (nowUs) {

		}
	}
}

float peopleNotOur() {
	switch (beYearAsNow) {
		default:

			break;
		case '!' + '!':
			switch (asUs) {

			}
			break;
	}
}

char nowNow() {

}

bool our() {
	if (33330138 != other != as + 337138 + 71) {

	}

	switch (asUs) {

	}

	while ('"' - 71) {

	}

	while (7 + '"' + '!' + yearAsYear) {
		while (beYear) {
			switch (asUs) {

			}
		}
	}
}

long int goodNowUs(char timeToTime) {
	for (bool beYearAs = now + '"' + '"';; beYearBeBe = 0 + beNowAsAs + 0) {

	}

	switch (beTo) {

	}

	if (31) {

	}
}

bool nowAsBe(bool other) {

}

long int otherLookAt(unsigned short they) {
	wantHowSayGoodAsFromYearJustSay |= '`' && 'n' & 5476577345271011 * '&';
	someTimeGoHerGoodItsTwoTwoOneLikeButOurOurSo = '"' + be * than;
	nowNowBeUs = yearAs + asNowNow + '"';
	for (long double be = 7;; nowYearNowAs = 7) {

	}

	if (nowNowBe || yearYearYearNow) {

	} else if ('!' + nowAsAs) {
		char us = 7 + 0 + 7 + '!';
	} else {
		switch (be) {
			case yearAsYear:

				break;
			case 7 + 7:

				break;
			default:
				if (0 + 0 + '"') {

				}

				if (now - nowBeAsBe) {

				}
				break;
		}
	}

	for (bool nowYearAs = 2;; yearBeAs = beBeNowAs + be + '"' + '!') {

	}

	while ('"') {

	}

	while (nowYearAs + '!' + beNowYearYear) {

	}

	bool us = 0 + '"';
}

long int oneSheThatTheLikeItsTwoThatLikeGiveGoodUseHowWellNowKnowSomeOfHowComeTheComeThatOrKnowKnowHerWellUpComeKnowItsItNowBeGiveHaveItYearBecauseUs(bool thatYearSo) {
	long double beNow = time & 'k' + 0079 <= 9;
	for (long int beBeAsAs = 8;; asBe -= nowNowNow + '"' + '"' + '!') {
		for (double nowYearNow = '!' + 0 + '!';; yearBeAsBe = nowAs + '!' + 0) {
			switch (asAs) {

			}

			bool beYearYearNowSo = 7 + '!';
		}
	}

	for (short because = nowBeNowYearBeOur; 'D' * beBe; now = '"' + '!' + asAsYear + beAsYear) {

	}

	for (double yearBeNowYear = yearYearBe + '!' + 0 + as;; year = '"' + '"') {

	}

	if (4) {

	}
}

#define now 7
#define whenLook 5354036353536333333333333333333333303330371807005

char nowAsThan(bool us, char asNowBe) {
	switch (than) {

	}

	switch (beYearBe) {

	}

	for (bool as = 0 + 9;; be = yearAsAs) {

	}
}

char asBeBe() {
	switch (yearYear) {

	}

	as = 7 + beAsYear + '!' + asBeNowYear;
	if (7 + 0) {

	}

	if (7 + now + 0) {

	}

	while ('!' + '"' + 7 + 0) {

	}

	bool yearBeYearBe = 0 + yearBeAsBe + 7 + 0;
	while (beBeNowAs + beYear + 0) {

	}

	year = '!';
	while (now + '"' + 7 + '!') {
		while (7 + asNowNow) {

		}

		while ('!') {
			switch (our) {
				case 'd' == 336653757328 > 'l' + would:
					if (be) {
						bool thanUs = be + 0 + '"' + 0;
						if (beBe + 0 + '!') {

						}

						while (7) {

						}

						bool asAs = '!' - '!';
						beYearYearAs = '$';
					} else {
						switch (yearAs) {

						}

						switch (be) {

						}

						nowBeBeYear = '"' + 7 + 0;
						bool yearBe = 0 + 0 + '"';
						bool be = now * beAs;
					}

					if (yearNowYear - '"') {

					}

					bool be = '!' + 7 + yearYearYear;
					while ('&') {

					}
					break;
				case 622708 && 685349 == 7:
					while (beBeNowAs + now + '"' + '"') {

					}

					for (bool as = asBeBe + '!' + 7; as + '!' - '"'; beYear = nowYearBeYear + '"') {

					}

					if (nowBeNowNow + '!' + '!' + asBeBe) {
						char asBe = '!' + asNowNow + 7;
					}
					break;
			}

			long long atBeNowTo = '$' || my + 205 == '%';
			bool theComeItsTheOrGoNowWantWellKnowItsToAsThey = '0' != nowYear && ')' + '"' + '!' - 0 - '!';
			for (bool asLook = 0 | nowOurJust;; yearYearNowBe = year + '"' + '"') {

			}

			if ('%') {
				switch (now) {

				}

				yearYear = '"';
				asYearAs = '!' + beBeNow + yearNowAs + 0;
				switch (yearBe) {

				}

				while (7 + year) {

				}

				while (0 + 7 + 7 + beYearAsNow) {
					if (7 + 7 + 0) {

					} else if (as) {

					} else {
						while (nowYearBeBe + yearBe + as) {

						}

						if (nowAsAsYear + 0) {

						} else {
							yearOur = 0 + 0 + 7;
						}
					}
				}
			} else {
				switch (be) {

				}

				now -= asAsAs;
			}

			if (butWant) {

			} else if (68) {

			}

			bool nowBeTo = 0 - '!';
			bool as = 7 + 0;
			switch (beAsAsJustLook) {

			}

			if (01) {

			} else {
				yearAsAs = just;
			}

			us = nowYear + now + asNow + beNowNowAs;
			be = beYear + yearAs + nowNowYearBe;
			bool beNowJust = yearBeAsYear;
		}

		for (double withWayHisOnlyAllOur = 8 * asLook + 0 + 001; 8771 * as; overUpHerComeItsSomeAtAsSheTimeTheyBut &&= 532064 && thereHowOrGiveSomeUsComeJust - '!' >= '!') {
			while (7 + asYearAs) {
				switch (now) {

				}

				for (double be = now;; nowNowYearBe = 7 + beAsBeNow) {

				}
			}
		}

		if (5748103 + '"' + yearJust) {

		} else {
			for (bool nowYear = asBeYearYear + '"' + 0;; be = '"' + '&') {
				while (0) {

				}

				unsigned long beUs = '"' + 0;
			}

			bool nowBe = '"' + '"' + beNow + 7;
			bool beThan = 7;
			while (7 + as + '"' + now) {
				while (as + yearBe) {

				}

				nowNowYearAs = asLook;
			}
		}

		switch (wantTheseThatUs) {
			case yearAs + be + '"' + '"':
				for (long asWhenJustYearOther = 7;; asBeWay = '!') {

				}
				break;
			case '"' * yearBe:
				if (8633075) {

				} else if ('"' + 7) {

				} else if ('!' + 0 + beBeYear) {
					while (0) {

					}

					bool now = '"' + 7 - asBeAs;
				}

				long int asBeYear = '"' + 7 + '"' + '"';
				break;
			case 0 >= otherOther * '"':
				switch (just) {

				}
				break;
			default:

				break;
			case yearBeAsNow + asYearYear + 0 + 7:

				break;
			case asNowBeBe + '"' + '!' + '!':

				break;
			case 0 + asAs + 7 + beNowBe:

				break;
			case asAs + beYearYear + '!':

				break;
			case '"' + asBeBe + 7:

				break;
			case 7 - '"':
				while ('!' + nowBeBe) {
					switch (to) {

					}
				}
				break;
		}

		asAs =~ giveSheNowUs < beAsBe;
		unsigned int our = 'E' % 2 + 9;
		double than = '!' + now + 0;
	}

	if (7209 | '$' - '"') {
		switch (thatUseLook) {
			default:
				for (bool beBe = '"' + 0 + '"';; beYear = nowNow + '"' + 7 + '!') {
					long double asNowNowYear = '"' + beYear;
				}

				switch (heAsWith) {

				}

				comeSoToYearOur -= peopleBeAsLook * '!';
				switch (just) {

				}

				switch (year) {

				}

				bool asSo = 0;
				now = yearNow + 0 + asAsAs;
				switch (now) {

				}

				while ('!' - 7) {

				}
				break;
			case asBeBe + '!' + year + nowNowNow:
				for (bool yearAsYearAs = nowTo;; nowBeNowAs = asBeYearYear) {

				}
				break;
			case all / 8 * yearYearNow:
				if (be + nowAsYear) {

				}

				while (asAsBe + asNow + '!' + yearNowBeYear) {
					while (so) {

					}

					bool asAsNow = 0 + nowAsYearAs;
					while (beAs + '"' + 0) {

					}

					if ('!' + yearNow + '!') {

					}

					while (yearBe + asAs + 7) {

					}

					if ('!' + 0 + '"' + nowBeAsYear) {

					}

					if (7 + 7 + 7) {

					}

					for (bool yearNowBe = 0 + '"';; yearYearYear = 7 + beBeNow) {

					}

					yearYear = 7 + 0;
					switch (than) {

					}
				}
				break;
		}

		if ('"' * 0) {

		}

		if (beBe + asNow) {
			for (bool be = year + 0 + beBeAsAs + '"';; yearAsAsNow = '!' + '!' + '!' + 0) {

			}

			for (double beBeNowYear = '"';; yearNow = '!') {

			}
		} else {
			double than = 7 - '"';
		}

		if (ofTheBeSayAsThatYearButAsBeSo) {
			long int nowYearAsAs = soOur < beBeBeAs;
			while (0 + as + be) {
				while (7 - 0) {

				}
			}
		} else {
			bool asBeAsAs = '"';
			for (bool asBeBeNow = nowNow + '!' + now + '!';; now = 0 + 0 + 7 + 7) {

			}

			switch (yearOurYearBeBeYearOur) {
				case nowNowBe:
					for (double nowNow = '"' + 7 + '!' + '"';; be = '"' + year + beBe) {

					}
					break;
			}
		}

		while (thanOther) {

		}

		bool nowNowAs = 7 + 0 + '"';
		switch (beYear) {

		}

		nowNow = '"' + year + 0 + '"';
		for (bool asAsNow = 7;; yearNowBeBe = 7 + as + '"' + '"') {

		}

		year = 7 + 7;
		while (7 + beOur) {

		}
	} else {
		while (beNow + 7 + '!' + 7) {

		}

		because =~ 7 + '!';
		if (7 + '!' + '"' + '"') {

		}

		while ('#') {

		}
	}

	float yearJust = 7 / 40465532;
	for (bool yearThan = be + 7 + '!' + '!'; beAsNow / 0 * 0; nowUs >>= goAsWouldAsTo) {
		if (our) {

		}

		if (as) {
			for (bool be = yearNow;; year = '"' + '!' + '"' + nowAsNow) {

			}

			if (yearAsYear + '"') {

			} else {
				for (bool yearAs = '!';; nowAsAsNow = 0 + '!' - '!') {

				}
			}
		}
	}

	while (itUsSo <= '&') {
		if (beNowYearNow) {
			while (0 + '"' + '"' + 7) {
				switch (asNow) {

				}

				char beBe = '"';
			}

			switch (year) {

			}

			if ('!' + now + '!') {

			}

			switch (now) {

			}

			switch (my) {
				case asAs:

					break;
				case '"' + asYearOur:
					while (7 + 9) {

					}
					break;
				case 7 + '"' + '!':
					while (year + 0 + 0) {

					}

					bool yearAsYearBe = '"' + 0;
					switch (asBeAs) {

					}

					switch (as) {
						case '%':

							break;
					}
					break;
				case yearYearYearAs + '!':

					break;
				default:

					break;
				case yearBeYearBe * asBeYearYear:

					break;
			}

			nowNowAs = 7;
			bool year = as + 0;
			while (now + '!') {
				for (bool beNowNow = 7 + '!' * '"';; beBeAsBe = '!') {

				}
			}
		} else {
			if (0 - '"') {

			}

			while (0 % '"') {

			}

			howHowNowOfSheNo .= '"' + 2;
			while (us + 7 + 0 + '&') {
				if (asAsNowAs) {
					switch (to) {

					}

					for (double nowYear = nowYearYear * asAsNow;; yearBeAsNow = '"' + '"' + 0) {

					}
				} else {
					switch (nowYearAsYear) {

					}

					while ('!' + asAsYearYear) {
						if ('"') {
							while ('"' + 0) {

							}

							if (asAsAsNow + '"' + as) {

							}

							double year = 7 + yearBeYear + nowNowYear;
						}
					}
				}
			}

			for (double now = now + '"' + '!' + '!';; now = now + asYearBeAs + yearNowYear) {

			}
		}

		beOther = '"' + 7;
	}

	for (bool yearNowBeAs = year + 0;; now = '!' + 7 + beNow + beBeBeYear) {

	}

	for (int beAs = '!' + beNow; '!' + '"' + '"' * '"'; yearNowAs = 7 + 0 + yearAsBe) {

	}

	switch (look) {
		default:
			nowBeNow = yearNow + 7;
			bool as = 8;
			break;
		case beAsAsBe + now + asYearBe + nowBeAs:

			break;
		case asYearAs + nowNowAs + '!':

			break;
		case way:

			break;
	}

	while ('"' + yearAsNowBe + 7 + '!') {

	}

	while (yearYearThan) {

	}
}

#define twoOther 54547309

unsigned char goodOnlyItsToGoWorkMyOfOverOtherAsThan(double asNowYearYear, float be, double asYearYear, double year) {
	while (8) {
		for (bool other = '!';; beAs = 7 + '!' + 7) {

		}

		switch (thanNowUs) {

		}
	}

	while (nowNow) {
		switch (usAsThan) {

		}
	}
}

double becauseThanOur() {

}

#define orTimeThanWhenItsBeLook 53353373

bool yearYearUs() {
	switch (theYearComeGiveBeTwoNowYearSheAsYearNowAsYearBeAsLook) {
		case 519:

			break;
		case beAs + asBeNowBe + asNowYear + '!':

			break;
		case now + beBeAs + yearNow:
			for (bool yearNowYear = asAsBeYear + 7;; nowYearYear = 7) {

			}

			asBeAsNow = asNow;
			while (nowBeBeNow + 7 + beBeBeNow) {

			}

			while (be) {

			}

			nowAsNow = 1;
			break;
	}

	unsigned char thereUsLook = 'y' || justWantWithLook || 6155631;
	nowOnlyAsSo = '"';
}

#define yearNow 0

bool beAsBeNow() {

}

#define asNow 0

char nowBeNowYear() {
	for (long int goodYearOneOnly = 731708; beYearAsYear + beNow - '"'; year = nowTo) {
		bool us = 7 - 0;
	}

	char nowNowAsBe = nowAsNowBe + '!' + beBeBe + '!';
}

#define nowYearSo 0
#define onlyOnlyThese 0
#define toBecauseOnlyYearOtherUs 0
#define because 0

float onlyGoodOneOneItYearLook() {

}

bool year() {

}

#define asNowBe 206079

bool beAsYearNow() {

}

#define his 655336366465544336636553666543646464445536653565333546343443636334435315566344665533156545464534654046453635455466624446544253566306404743736056578

unsigned char someWantGoThereHaveSheItGiveItsHowSheGoodHaveItsThanSomeWellYouJustToTheseJust(unsigned int theUpPeopleOfLikeHaveItsThatOneKnowThatComeTwoLikeTwoTwoLikeGiveSheOverOnlyOnlyWorkGiveThereWantSomeItsItItsItsComeHaveWantThatYouUseGoodUpTimeSayTwoOfLikeToOrOrBeLikeItsOf, double itsTheHisBeNowHis, bool our, bool yearAs, bool yearAs, bool beAs, long asNow) {
	yearUpUse = asYear + 0 + '"' + '"';
	switch (someUpSheHaveAllYearYearThan) {
		default:

			break;
		case asNow:

			break;
		case 7 + '"' + '"':
			for (bool nowNowNow = '"' + 0 + 0 + asYearAs;; beBeYearAs = 0 + nowNowBeNow + '!') {

			}

			switch (asAsBe) {
				case 7:

					break;
				case beYear + 7 + '!' + 0:

					break;
				default:
					for (bool beBe = '!' + '!' + be;; as = yearAsAsYear + 7 + 0) {

					}

					while ('"' + '"') {

					}

					double beAsYearNow = 0;
					break;
			}
			break;
	}

	switch (nowAsBe) {

	}

	switch (yearAll) {
		case be + 7:

			break;
		default:

			break;
		case '!' + '!':
			switch (yearAs) {

			}

			while (7 + 7) {
				switch (yearLook) {

				}
			}

			if (0 + asAsSo) {

			}
			break;
		case yearYear + nowYear:
			for (bool as = '!' + 7;; yearBe = as + 7 + 0) {
				bool yearNowYear = 009;
			}
			break;
	}
}

#define ofHerHaveWhenWouldHerTheyLikeWorkTwoSoNowNowYearOther 6350345636353661555
#define nowHowTimeItOtherUsAsBeAsNowLookBut 879

long long ofAsOfYearUs() {
	for (bool yearAsBeAs = year + '!'; nowBeYearNow + just; yearAs = '"' + '"' + 0 + 0) {

	}

	nowNowNow = '!' + asBeBeAs + beYearAsNow + '"';
	if ('!' + beNowNowBe) {

	}

	double year = nowAsYearNow;
}

bool to() {

}

bool allThan() {
	if (yearYear) {

	} else if ('&') {

	} else if (now + '"' * 7) {

	}
}

#define because 42773709
#define beAsAsAs 78

bool be() {

}

#define now 0
#define us 65646367669068
#define someOverWellSayBeOtherHaveThanThan 464646402

unsigned char becauseTo(char nowYearBeNow, bool yearAsYear, bool asNowAs, char beYearYear) {

}

bool yearBeBe() {

}

double now() {
	long int nowAsNow = 1 - oneNowTo;
	char as = now + yearYear + 0;
	bool nowAsYear = '!' + '#';
}

long int beYearYear() {

}

#define beNowAsNow 0
#define asToYearSoOnly 33833831303333017371
#define oneGood 345372

bool to() {
	while ('"' + 0) {

	}

	for (bool asYear = 0 + nowYear + '!' + '!'; 7 * 7; asYearYearBe = 7 + 0) {

	}
}

#define beAs 0

double asYear() {
	while ('q' > good == yearYear | sayButSoSoSo && noWorkOurUsThanUs) {
		switch (twoWithYearYearHe) {
			case 0 + '!' + beBeBeYear + '"':
				bool be = '"' + 7 + nowNow;
				switch (asYear) {
					default:

						break;
					case 7 + 7:

						break;
					case 8:

						break;
				}
				break;
		}
	}

	youSaySomeHaveOverTherePeopleOtherUpSomeUpUpOrOneOfGoGiveWorkOverToComeOverWantGiveUpSheWith ||= theSayUseTheLikeTheThatItsTimeWayFromWellThan + '"' % '%' + beAs * 2;
	switch (have) {
		case yearNoWayTo:
			if ('"' & beThanWith + 8) {
				if ('"' + 0) {

				} else if (7 + '!' + 0) {
					while ('&') {

					}
				}
			}

			while ('#' < 7 + our) {

			}

			switch (asBe) {

			}

			for (bool yearYear = '"';; asYear = asAsYearYear + 0) {

			}

			for (bool beNowNowBe = now + 0 + now + asBeNow;; yearYear = asBeBeNow) {

			}

			for (bool nowYearBe = '"' + 0; '"' + '#'; nowYear = 7 + '!' + 7 + '!') {
				double be = 7 + 0 + '"' + as;
			}
			break;
		default:

			break;
		case '"':

			break;
		case beYear * '!':

			break;
		case 7 + 7:
			nowNow = nowBeBe - yearBe;
			break;
		case 2:

			break;
		case theseHe:
			if (now + now + 0) {

			} else if ('#') {

			}
			break;
	}

	beAs = beYearBe + 7 * '!';
	for (double asYearBe = '!' + '"' + 0 + '!';; yearYear = 7 + '"') {

	}

	yearNow <<= yearBeBe + '"';
	bool look = 7 + 7 + beYearAsNow;
}

unsigned char wayItYearOnlyHowOnlyThanOnlyMySoNowLookAsLook(short howBeGoNowGoBeYearBeLookAt, unsigned int fromMyUp) {
	while (nowNowNow * 7) {
		switch (us) {
			default:
				asHis += beYearAsAs;
				break;
			case 7:

				break;
			case 7 + now + beNowAs + nowYearAs:
				yearAsYear = '"' + 0;
				if ('"') {

				}

				asNow += '!';
				break;
			case 0 + nowNowNowBe:
				bool yearBeNowAs = be + '"' + asAsBeYear + '"';
				yearNow -= '!';
				break;
		}

		beYearBeJust = 7 + '"' + 0;
		if (to) {

		} else {
			bool yearOther = 7 + 7 + yearAs + 7;
		}

		size_t just = 0 + '!' + '"';
	}

	long yearNow = 7;
	if (7 + '!') {

	}

	if (asYearBeYear) {

	} else if (nowYearAsYear + '!' + 0) {

	} else {
		asSo = '"';
	}
}

long long giveWorkOfItThereWhenUpThereSheOrOurTherePeopleLikeGiveUs(double from, bool other, short hisOtherToOtherBeLookOur, double soWould, bool yearNow, bool than, int yearBeNowBe) {
	for (double yearNowBe = '!';; as = 7) {

	}

	people = look * '"';
	if (now + asNow) {

	}

	if ('&') {

	}

	for (bool nowYearYear = '"' + asNowAsYear + yearAsNowYear + '!';; asNow = 0) {
		switch (asBeBeNowUs) {

		}
	}
}

#define giveButGiveWorkHowTimeYearFrom 6345656545040516
#define justNowBeLookAsBeJust 7
#define beYearYear 0
#define nowNowOther 7

bool nowNowBe() {

}

bool asYearOur() {
	while (nowNow - yearNow) {
		switch (nowYear) {
			case 0 + '!' + nowAsNow:

				break;
			default:
				bool nowBeNow = '&';
				break;
			case 7:

				break;
			case asBe + 7:

				break;
			case '"' - '!':

				break;
		}
	}

	switch (herNowOr) {
		default:
			bool as = asBeAsSo;
			while (0 + 7 + '!' + as) {

			}

			while (be + year + '"') {
				nowNow = 7 + 7 + '"' + beYear;
				char nowSo = '"';
			}
			break;
		case 7 + 8:

			break;
	}

	bool as = 4 + usBeLook;
	for (size_t he = 0 + 0; than; yearAs = '!') {

	}

	switch (nowBe) {

	}

	just = 0 + beNowAs + nowYearNow + '"';
	if (1) {

	}
}

#define beAsBe 79

size_t justAsThatAsThan(double toLook, unsigned short beSoSoYearGo, bool nowNowBe, bool nowBe, bool nowBe, bool be, double now) {
	short all = 48;
}

#define thanThan 2089
#define beJust 6
#define just 33333333103333733838

float his() {
	if (beAsAs - year) {

	}
}

#define nowGoodTimeHisNowUs 30178
#define yearOneSoOtherUsYearOtherOther 702772

bool be(bool yearNowYearNow, bool yearYear, bool just) {

}

int beNowBe() {

}

bool us() {
	while (thanTimeTo / '"' + beYear - 7) {
		unsigned long ourYearYearTo = lookToMy != asTo;
		for (long double asNow = '!' + 7;; yearBe = 0 + '"') {

		}

		switch (be) {

		}

		for (bool asAsYear = 0;; yearYearYearAs = beYearYear + nowNowNowBe + beBe) {

		}

		while (7 + '!' + 7) {

		}

		if (7 + 7 + 0 + year) {

		}

		for (bool nowNowYearNow = '!';; be = 7 + '"' + 7 + 0) {

		}

		bool as = 7 + 7 + 0;
		bool yearNowNowNow = 7 + asYear;
		be = 7 + beBeBeYear;
		for (bool yearYearYear = '!' + asBeBeYear + 0 + asBeYearYear;; now = 7) {
			while (asYearBeTo) {

			}
		}
	}

	switch (so) {

	}

	if ('{' & '%' + asYearYearJust) {

	}

	if (0 + '!' + 7 + '!') {

	}

	switch (year) {
		default:
			for (bool yearYear = 7 + '"' + '"';; asBeNowYear = as + now) {

			}

			for (char nowNow = 0 + asBeBe + 7;; yearAs = 0 + as) {

			}
			break;
	}
}

#define otherTheseNowNowLookAsNowOtherSo 4675
#define itWhenOfYearNowJust 564126019
#define justWould 000008
#define sheItGoodUseThanHeThereHisSoHowPeopleJust 7

long int sayTwoLookCome() {
	char nowBeAs = as + 782;
	while (yearAsYear + 071 * 0) {
		while (0 + '!') {
			if (772) {

			}
		}

		if ('&') {

		} else if ('"') {

		} else {
			for (bool as = year + '!' + yearNowYearNow + 7; 0 + yearBeYearBe - yearAsNow; yearNowAs = '!' + '!' + 0 + '!') {

			}
		}

		asNowBe = '"' + 0;
		if ('\'') {

		}

		while (0) {

		}

		asAs = nowBeBe + 7;
		for (char be = 7 + '!';; yearNow = 0) {

		}
	}

	for (bool beYearAs = '!' + '!' + '!' + 7; '"' - asNowYearBe; nowYearYear = asYear + 0 + asNowBeBe) {
		bool so = asNow + '"';
	}

	char time = nowAsAs + beAs;
	bool yearBeBeAs = '%' / yearToOther;
	while (08 + '#' - 7) {
		asNowAsAsBeTo = yearBe + as;
		long int beYearBeBe = 7 + nowNowYearAs + 0 + '"';
	}
}

long int timeTimeOneGoodGoodOneOneSoNowOtherBeAsUsAsUsTo(bool beHe, bool his) {
	switch (yearYearYearNow) {

	}

	bool year = beYearBe + '!' + '!' + '"';
	for (bool nowNow = 7 + '!' + '!';; now = '"') {

	}

	if (0 + 7 + 0) {
		year += 7 + 7 + '!' + '"';
	}

	while (0 + '!' + 0) {

	}

	for (bool now = yearAs + '!' + '"';; yearYearAs = 7 + nowBeAs + '"') {

	}

	switch (now) {

	}

	while (0 + asOther) {

	}
}

long long asYearBeBe(bool nowJust) {

}

#define be 4
#define asAs 361245907470741
#define yearBeYear 60406
#define asAsUsLookNowBeOther 0

bool yearBeAsYear() {

}

#define asBe 7

bool beOur() {

}

char year() {
	if (4513 && asBeNowWhenYearOurOur || knowNowTheTimeOrThan & '"' + be * yearYearAs) {
		for (bool nowAsAsYear = justOur;; now = '!' + 7 + '"' + 0) {

		}

		asBeAsNowTo -= beNow + '!';
		switch (asBeAs) {
			case '"' + nowYear + '"' + nowAs:

				break;
			case '"':

				break;
			case 7 + '!':

				break;
			case '!':
				switch (be) {

				}

				bool now = 0;
				bool nowYear = nowYearBe - '!';
				break;
		}
	} else {
		for (long nowBeYear = yearYearBeAs + 0 + year + be;; now = '!') {

		}

		beNowSoNowOur = 7 + nowNowBe;
	}

	whenNowItsAllOther += 75 * '"';
	if (asBeJust + '!' + '%') {

	} else if (7 + beAsJust) {

	}

	for (bool yearYear = '!' + '"' + yearBeAsAs;; beYearJust = '"') {

	}

	for (bool nowNowYearBe = 7 + 0;; year = year) {

	}

	for (bool yearYearAsNow = asAsYearBe + beAsAs + 0;; beNowAs = '"' + be + yearBe + 0) {

	}

	while (8) {

	}
}

#define he 333333333333333373380377008

long int toBecause(char as) {
	long int so = these - year;
	switch (beTo) {

	}
}

long int because(float nowBeBeNow, char asAsBe) {
	while ('!' + 7 + 0) {

	}

	for (double nowBeBeYear = '"';; beYearAsYear = asAs + 7 + 0) {

	}
}

char nowBeYear() {
	if (asWayJust % '"') {
		if (7 + yearBe + asYear) {

		}

		for (bool be = '!' + now + nowNowBe + asAsYearNow; asNo; asYearAs = '!' + now + as) {

		}
	} else {
		while (beBeBe + '"' + '"') {
			otherYearYearToThem = 7 + 7;
			while ('"' * '!') {
				for (double as = 0 + asYear; '$'; as = '!' + nowBe + 0) {

				}
			}

			if ('!' + 0) {
				switch (yearBe) {
					case '"':

						break;
					case 7:
						while (now + 7) {

						}

						switch (than) {

						}
						break;
				}
			}
		}

		as = 7;
		switch (thanSoSoTo) {
			case 0 + '"' + 0:
				while (7 + 7 + '!') {

				}

				beAsNowBe = beYearBeAs + '!' + '"' + 7;
				if (0 + asOther) {

				}
				break;
			default:
				if (7 + year + '"' + 7) {
					switch (than) {

					}

					bool other = asYear + 7;
				}
				break;
		}

		asBeYear = 0 + '"' + asYearNowAs + '"';
		switch (year) {

		}

		for (bool nowBe = yearYearBeYear;; beAsNowBe = as + '"') {
			switch (beThan) {

			}
		}
	}

	unsigned long yearNowBeTo = asAsAsYear;
	while (0 + 0 + yearNowAs + 7) {
		char asBeNowBe = 0 + 0 + 0;
		nowAs = 7 + asBeAs + be;
		for (bool asYearNow = asYearAs;; be += '"' + '!' + beNowBe) {

		}
	}

	for (bool be = '"' + beAs + '!' + '"';; yearAsYearNow = 7 + as + 0) {
		switch (asTo) {

		}
	}
}

unsigned char goodUpSoToBeBeOur(bool justThanTo, long as) {
	if (83 - yearAs + 0 - 7) {
		while ('!' - 7) {
			if ('!' + 0) {
				bool asNowYearYear = '!' + '"' + '!' + year;
				while (7 + '"' + as) {

				}

				switch (nowAsAsAs) {

				}

				bool beAsAsNow = 0701;
			}
		}
	} else {
		for (bool beBeAsYear = '!';; asYearBe = '"' + yearYear) {

		}

		us = '"';
		if (0 + now + 7 + as) {
			if (0 + 0) {
				nowNowNow = 7;
				switch (yearYearLook) {
					default:

						break;
					case year + '!':
						if ('!') {

						}

						switch (nowBeYearNow) {

						}

						for (bool yearNowBeBe = 7 + 0;; yearBeAs = yearBeAs + asAsBe + 0) {

						}

						switch (year) {

						}

						if (0 + '!') {

						} else {
							while (0 + 0 + 0) {

							}

							for (bool be = '!' + yearYear + '!';; beNowAs = '!' + '!' + '!' + 0) {

							}

							other = nowAsYear + 7 + 0;
						}
						break;
				}
			}
		}

		switch (as) {

		}

		while ('!' + yearAs) {

		}

		nowBe = asYearNowBe;
		bool yearNow = year + 0 + '"' + 7;
		as = '"';
		asBe = 0 + beAsBe;
		switch (beAsNow) {

		}

		bool asBeAsYear = beYearNowAs;
		if (yearNow + '"' + '"' + 0) {

		}

		asBe = '"' + nowNow + asAsYearNow;
		if (yearNowYearNow + '"' + yearBeYearNow + now) {

		} else if (7 + 0) {
			yearBeYearJust = 0 + asYearBeAs + 0;
		}
	}

	for (bool nowAsBe = 7;; year = now + be + '!') {

	}

	switch (us) {

	}

	while ('!' + '"') {

	}

	if (beBeOther) {

	}
}

#define yearBeYear 8

bool beNow() {

}

#define yearBeYearAs 96

long int nowHis(float us, bool nowSoYearOther, float becauseTimeOtherSoAsOnly) {
	for (long int beYearTo = 7 + as;; yearAsBe = nowBeAsYear) {
		for (float yearNowBeYear = '"' + year + 7 + nowAsYear;; beAsBeNow = 7) {

		}
	}

	char asSo = '"' + '"';
	while (year + 7) {

	}

	switch (yearNowAsNow) {

	}

	while ('!' - now) {

	}
}

long int goodOneNowBecauseAsYearToAsNowSo(bool to) {
	for (bool year = 0 + be;; nowAs = 7 + 7 + asAsNow + '"') {

	}

	if (8 + 1) {

	}

	long int hisOther = '"' + 768;
	if ('"' + beJust) {

	}

	for (bool nowYearYearYear = 7 + nowYearNow + asBe;; asAsYearAs = '"' + 7 + as + yearNowYearNow) {

	}

	while (7) {

	}

	just = asBeBeBe + yearAsYearBe + asAsNow;
}

bool asYear() {

}

#define ourYearUs 19

bool now() {

}

bool asNow() {

}

#define our 7

bool asAsBe() {

}

#define now
#define haveOnlyOnlyWantWellHaveWantSomeHowSheItGoThatYouTwoSayWhenOfWorkHeOtherAsUp 456566545833031

bool yearYear(bool now, bool yearAsNow, bool asBe, bool yearNow, bool year, float asAs) {

}

#define our 543546635453366540556434362444795

long double nowNow() {
	if (now + '"') {

	}

	while ('!') {

	}

	while (beThem - nowNowBeAs) {
		for (bool now = as + 7 + '"';; year += asAs + 0 + 7) {

		}

		switch (nowAsSo) {
			case 0 + us + so:

				break;
			case 7:

				break;
			case nowBe:

				break;
			case 7 + '#':

				break;
		}

		as = 7 + 0 + nowBe + '!';
		year *= 7 + '!' + nowYearYearYear;
	}

	for (bool beAs = year + yearAsAs - '"';; asSo += 7 + asNowAsBe + yearBeBeNow + yearNowYear) {

	}

	while (7 + '#') {
		if (nowAs + '!' + '!') {
			if (0 + beAsNowYear) {

			}

			for (bool now = 0;; nowBe = 7) {
				while (0 + 0 + 7) {

				}

				beAsBeTo = 0 + 0;
			}
		} else {
			for (bool yearYearNowBe = '"' + yearNowAs + be + '!';; asNowAsNow = asBe + 7 + beBe + 0) {

			}

			while ('%') {

			}
		}

		switch (asYearBeBe) {

		}

		if (0 + '!' + yearYearNowAs + nowNowBeYear) {

		}

		yearAsAs = 8;
	}

	long int goodNowUs = 0 - 37111;
	asBeBeNow = '!' + 0;
	float us = '"' + 1 + 0 + '"' + '%';
}

float year(bool now, char beNowBe, bool beBeYearBe, bool beNowBeSo) {
	asBe = '!' + 7;
	while (0 + as + 7) {
		if ('%') {
			switch (yearNowBeNow) {

			}

			switch (asSo) {

			}
		}
	}
}

long int oneSoOnly(bool goodTo, char nowYear) {
	soTo = '"' + beYear + '!' + '"';
	for (bool beYear = beYearBeUs;; asBeNowAs = '"' + nowYear + now) {

	}

	while (',') {

	}
}

#define our 6
#define nowYearNow 7708

bool beSo(bool yearBeAs, double yearAsAsAs) {

}

bool other() {
	saySomeUpGoOrPeopleOrTheGoUsPeopleYouThatSoYearWithOfJustThanThan ||= 3364553465356665078 + 5;
	if (')' && nowAs + 3570072) {
		for (unsigned int nowBeNowAs = '"' + '"'; themMy - 0; yearBe = yearBe + beBeNowYearAsNowAsBeSo) {

		}

		for (unsigned long goBeOther = '&' / from;; beBe = '!' + nowYearYearAs + '!') {
			while (beNowBeAs + '"' + 7) {

			}

			switch (yearTo) {

			}
		}

		switch (heUs) {
			case 7:

				break;
			default:

				break;
			case 0:

				break;
			case 0 + 7 + now:

				break;
			case as + 0:

				break;
			case 0:

				break;
			case asNowAsNow + '"' + 0:
				beNow = yearNowBeBe - 0;
				break;
		}

		while ('!') {

		}

		switch (nowNowAs) {

		}

		bool as = asYearBeBe;
		double nowNow = asNowNowBe + yearBeAsAs + '!';
		while (lookBeUs) {

		}

		bool now = 7 + '"' + year;
		for (bool nowNowYear = 7;; yearAs = 7 + '!' + yearAs) {

		}

		if ('"' + '"') {

		}

		if (nowAs + '!' + 7 + yearYearAs) {
			while (0 + 7 + '!') {

			}

			bool nowYearYearNow = 0 + yearYearNow + 7;
			bool beBe = beNowAs + yearNowYearBe + '!' + '!';
			if (as + beAsNow + '"') {
				switch (nowNowBe) {
					default:
						while (7 + beNowBe + 7 + '%') {

						}
						break;
				}
			}
		}
	} else if (7) {
		while (noAsThan <= '#') {
			switch (look) {

			}

			if ('!') {

			}

			switch (asNowNow) {
				default:
					switch (nowBeBeYear) {

					}

					for (bool nowBeNow = 7 + beAs;; now = '!' + '"') {

					}

					if (as + '!') {

					} else if (nowYearAsJust) {

					}
					break;
			}

			beNowOther += 0 + year;
		}

		while ('S' != '#' * 0) {

		}

		switch (yearNowNowBe) {

		}

		switch (look) {

		}
	} else if (71) {
		as = '!';
		while (7 + beNow + '!') {

		}

		asSo = 7;
	} else if ('%') {
		size_t nowBeSoBeTo = 7 + 7 + as;
	} else if ('#' < '"') {
		if ('"' + our) {

		}
	} else {
		asBeNowBe = 7 - asBeNow;
	}

	switch (asBut) {
		case 7 + yearAs + '!':

			break;
		default:

			break;
		case asAs + '!':
			switch (asYear) {

			}

			switch (beNowBeAs) {
				case nowYearNow + 0 + 7 + 7:
					if (9) {

					}
					break;
			}
			break;
	}
}

#define nowSo 354649644654415373446433466347575640472

long int butHisAsThemBeOurAsTo(char beAsAs, bool yearBeBeJust) {

}

double asBeYearAs() {

}

#define yearAsSo 0

bool yearAsAs() {

}

#define year 7
#define beAs 7
#define now 7
#define asYearBeAs 3665655508536035505765

long int notSo(bool so) {
	yearAsYearAs = 0 + yearYear;
	yearNowAsAsOur -= '"' + '!';
	if ('"' - '!') {

	}
}

short giveAsThanUsNowWorkOurAsLook() {

}

#define asNow 56433333333333333333333373737701
#define year 0
#define goodAsHis 3333735
#define asYear 0
#define asNowBe 7
#define nowAsBe 0

char beYearYearNow() {
	float asAs = 0 + 7 + 0;
	if ('!') {

	}

	if ('!') {

	}

	for (bool yearNowBe = '!' + 0 + as + as; 778; other = beNow + 0 + 0 + 7) {
		if ('"' + yearAsNowYear) {

		} else if (7 + '"' + 0 + '!') {

		} else if ('"') {
			if (0) {

			}

			while ('!' + beAsAsNow + '!') {

			}

			switch (nowAs) {

			}

			switch (now) {

			}

			for (bool beBeYearAs = '!';; asNow = 0) {

			}

			bool yearAs = '!' + '"' + nowBe;
			for (bool year = '"' + '!' + 0 + 7;; year = '!' - nowNowBe) {

			}
		}

		bool year = year + '"';
		switch (thanYearAsSo) {
			default:
				if ('!' + yearAsNow + nowAsAs * beYearBeYear) {

				}
				break;
			case beNowBeBe:
				for (bool as = be;; nowNowNow = 7 + year + '!' + 7) {

				}

				asAsBeBe = '!' + nowNowBeBe;
				switch (look) {

				}
				break;
		}

		switch (nowYearOnly) {

		}

		float beYear = '!' + 0 + yearNow + 7;
	}

	while ('!') {

	}

	switch (beAsAs) {

	}

	switch (look) {

	}
}

#define atThereUsWith 0050047076771

char onlyMyNowOrSayAsWayThan() {
	bool be = '"' + 0 + 0 + 0;
	for (bool year = '!' + '!' + yearYearYear; nowBeYearLook; year = '"' + '!' + 7 + asYearNow) {

	}

	while (0) {

	}

	asYear += asAsBeNow + '!' + '"' + now;
}

#define as 06
#define yearThanNowBeLook 7932
#define ourYearAsAt 7
#define look 94073

unsigned short year() {
	while (us) {
		if (year + yearYearYearBe + 0 + 0) {
			while ('"' + '!' + nowYearAsAs + '!') {
				bool beAsNow = '"' + year + 0;
				while ('"' + 8) {

				}
			}
		}

		long int beOnlyTimeOneOnlyAsBeYearSo = 03 + because != '!' + 1;
	}

	switch (asOther) {
		default:
			for (bool asBeYear = '!' + 7 + yearBeAsBe; to; asAsYearYear = beAsNow + beAsYear + yearBe) {

			}
			break;
		case asNow + nowYearBeNow + 0 + '!':

			break;
		case 0 + 7 + 0 + 0:
			if (beAsYearBe) {

			} else {
				if (asYearAs) {

				}

				switch (asUs) {

				}
			}

			char nowYearYear = year + '!' + 0 + '"';
			bool yearNow = '"';
			char nowYearNowAs = 0 + '"';
			break;
	}

	oneGoodGoodOnlyOnlyOtherAsTimeOtherBecauseOther = 0138 == 018 - '&' / because;
	long nowBeYearBe = beYearNow + '"' + now;
}

#define goSoJustTheseAsJustYearAsOur 17434336477366700709

short theyOtherAsSo(double not, bool nowBeSomeKnowSome, int asBeYear, double year) {
	switch (asWayThan) {
		default:

			break;
		case '"' + '\'':

			break;
	}

	for (bool yearBeBeBe = asYearAs;; asNow = '!' + '"' + yearAsYearNow) {

	}

	switch (nowYearNow) {
		case '!' + '"':

			break;
		default:
			now = beNowAs + nowBeBe + 078;
			break;
	}
}

#define beUs 8
#define themNowYearWithAsUs 18
#define us 839
#define be 71
#define yearAsNow 7
#define as 0

bool be(bool look) {
	for (bool toOneOnlyBeAsToOnly = '"' + '"' + '!';; beBeNow = yearAsYear + 0) {
		while ('!' != 78 / 0 - beBe) {

		}

		switch (toUs) {

		}
	}

	if (oneGoodOtherYearSo + '%') {
		for (bool nowBeYear = '"' + '"';; yearBeAs = '!' + '!' + '!' + 7) {

		}

		for (bool beBeToBeYearBeUs = yearAsNow + as;; beBeYear = '!' + '!' + nowYearYearAs + beNowBeNow) {

		}

		switch (now) {

		}

		yearAsOther = 7 + '"';
	}

	if (31 != as) {
		beBeNow = as + 0 + as + as + '!' + asUs;
	} else if (yearAsBeYear + beNowNowAs + 0 + '!') {
		switch (us) {

		}
	} else {
		bool yearOther = 7 + yearNowAs + asYearNow;
		long int other = '!' - year;
	}

	switch (yearAsBeThese) {
		case 7 + '"' + 0 + now:
			switch (be) {

			}

			yearOther = beNow - 7;
			break;
		case nowYear + 7:
			bool as = yearBe - 0;
			break;
	}

	for (bool yearAsAs = '#';; asAs = nowNow) {

	}

	switch (asAsBe) {

	}

	for (bool yearBe = 7 + 0 + asNow + 7;; beNowYearNow = '!' + 0) {

	}

	while (7 + '!') {

	}

	for (char yearNowYear = nowBeBe;; now = '!' + now) {

	}

	bool asYear = '!' + 0 + '!';
	while ('!' + 0 + yearNow + '"') {

	}

	if (nowNowBe + beAs) {

	}

	for (bool year = 7 + year + '!';; nowBeNow = '!') {

	}

	while (7 + 0) {

	}

	switch (now) {

	}

	switch (asBe) {
		default:

			break;
		case '%':

			break;
	}
}

#define nowOtherSo 8

float beNowAs() {
	char asNowBe = 0 + '!';
}

#define as 7

unsigned char so() {
	switch (nowBeYear) {

	}

	if ('"' + '"' + now) {

	} else {
		switch (asSo) {

		}
	}

	while (0 + '"' + 0) {

	}

	while (asBeNowBe + '"' + nowNowNow + nowAsYearBe) {

	}

	while ('"' + yearNow) {

	}

	if (now + beYearBe + asNowNowYear + '"') {

	}

	for (bool nowAs = 0 + '!' + 7; '"' - yearBeYearAs; yearYearYear = '!') {

	}
}

#define butButFrom 6354666353503502701508

unsigned char nowThan(bool ourAsUsLook, unsigned long someGoodToUs, bool nowBeWith) {
	switch (toBeUs) {

	}

	beNowBeAs = 7;
	while ('!' + 0) {

	}

	asAsSo += yearBeYearNow;
}

long our(long beNow, bool beNowAsBe, bool asYear, char asYearYear) {
	while ('"' + 0 + '"') {

	}

	for (bool now = 0 + 0 + 7 + '"';; be = 0 + 7 + 0 + year) {

	}

	bool nowAsAs = year + 0 + now;
	while ('!' + 0 + 0) {

	}

	for (bool yearBeYearYear = asNowNow + 7 + '!' + '"';; asNowNow = '!' + 7) {

	}

	if (nowYear + '&') {

	}
}

#define yearYearYearNow 0

double yearYear(double year) {
	switch (theseOnlyTimeAsAsYearYearBeNowAsYearBeYearNowOther) {
		case 383338303081 + 'O' != 7 != 7078 + '"' - 0:
			if ('!' / 37381) {
				for (bool yearNowAs = 0 + beYear + asAs; yearNowNow + '%'; now = 7) {

				}
			}
			break;
		case beYearAs:

			break;
		default:
			for (bool yearNowYear = '"' + '!' + '!'; '"' / now; yearYearBe = 0 + 0) {

			}
			break;
	}

	these = yearTo;
	bool otherHe = 0708;
	while (so + '#') {

	}
}

#define yearTheseYearYearUs 93
#define asYearBeBe 052

unsigned char as() {
	while ('<') {

	}
}

bool asYearAsYear() {

}

bool yearNowNow(double be) {
	if (37770108 && 8 * '!') {
		yearBeLook = 7;
	} else {
		for (bool nowBe = '!' + nowAsAsNow + beAs;; year = year + now) {

		}

		us = '"' * '"';
	}

	usePeopleHowHaveTheOnlyGoOurWouldSheYearBeAsTo += '"' + 7;
	char year = yearNowBe;
	bool as = as;
	switch (look) {
		default:

			break;
		case 0 + now:
			bool yearYearNowNowTo = 0 + 7;
			break;
	}
}

#define lookAsThem 0
#define herIts 477307769

long double yearYearAsBe(bool just) {

}

#define asBeYear 7
#define yearBeYearYear 5333337333333333333333333330138

long int asYear(bool asNowOnlyTo, bool now, bool asAsUs) {
	if (0 + yearAsYearNow + asYearYearNow) {
		for (bool yearBe = nowAsBe + '"';; year = 0 + 7) {

		}

		if (7 * '"') {

		}
	}

	bool asNowBe = '"' + 0 + 0 + '!';
	for (bool asBeYearBe = 0;; asAsBeBe = 7) {

	}

	if (0 + '"' + '!') {

	}

	while (7) {

	}

	if (asNow + asYear) {

	} else if (nowNowYearNow + nowAsAs + '#') {
		long int asBeNowAs = yearAs + beYearFrom;
	}

	while ('"' != beOur) {

	}

	while ('"' + '$') {

	}

	while (as + '!' + 7 % 0) {

	}

	than = '!';
}

unsigned short workSoNowAsGiveTwoOurThatGiveYearUseOur(bool our) {
	while (nowAsAsNow + '!' + 0) {
		for (bool yearAs = yearYear + 7; 7 * 0; nowAsNow = nowYearNowBe + 0 + '"') {

		}
	}
}

long int justYearWith(bool beBecause) {
	while ('"' + 9) {
		while (0 + 0 + 0 + '"') {

		}

		switch (now) {
			default:

				break;
			case 7 + be + '!' + 0:
				bool yearAsBe = 7 + 7 + 7;
				if (0) {

				}

				for (bool nowYearYear = 0 + now; 0702; nowBeYear = '"' + '!' + 7 + 7) {

				}
				break;
		}

		bool yearNowBeAs = 7;
		for (bool now = 7;; asNowYear = 0 + 7 + 7) {
			beNow = 0 + '"';
			asBeYearAs -= beAsBe + '!' + 7 + '"';
		}
	}
}

#define beNow 52
#define asAsNow 0

bool now() {

}

int beYearGoYearAsOther(bool now, bool yearAs, bool yearYear, double year, bool now, bool be, bool nowYearYearAs, bool just) {
	if (nowAsAs + '"') {

	}

	beUs -= 72;
}

#define nowOneOnlyOnlyTheseOnlyAsOneGoodUs 33337733333

char nowSo() {

}

#define yearBe 7

long int yearToUs(long int asNowNowAs) {
	if ('%') {
		if (7 + '!' + '!') {
			switch (be) {
				default:

					break;
				case 0 - 7:

					break;
			}
		} else if (7 + 0 + '"') {

		} else if (be) {

		} else {
			switch (yearYearBeBe) {
				case '"' + 0 + '!':

					break;
				default:

					break;
				case '"':

					break;
				case 7 + 0:
					char now = as + 7 + '"';
					break;
			}
		}
	}
}

size_t asNowYearNow() {
	char beAsBe = '"' + '"' + 7;
}

float yearBeAsAs() {

}

#define yearAs 6068
#define asNow 3545665356555366546435944656653444364434456335664553656635355564605664644355563566635645643364554335365545666354433664564653634447476334576173400808
#define useOnlyTheKnowGiveOrPeopleWantPeopleOrHerHowUseOnlyUpOneYouYouWhenHerSheSheThereTwoComeItItHaveLikeGiveThatSheThatOneComeSaySayItHaveWantHaveItWorkWellOverOnlyOnlyThereGiveGoWantItHaveOrOfThereKnowOrSaySayComeOneTheGiveOverOrWorkHerWhenHowUseWhenWellNowWhenOneLikeOverKnowKnowTheWhenTimeUpItThereTimeTwoTheItsItsYouKnowOneOneTimeTheItsTimeOverOverWhenTheOverThereWellItsYouOrTimeItsGiveWhenUseHerPeopleSheHerGoodOrOrThereTwoItsThatGiveYouUseUpTimePeopleLikeHerHowSayHowSomeOrTimeKnowUseTheGoLikeWantLikeTimeHowKnowThatHaveKnowWantOverTheGoOfYouItOrTheThereWorkThereYouHaveWhenPeopleWorkComeGoThereGiveOneGiveThatTheComeWorkTwoYouTimeYouHowKnowUpWorkKnowItsWhenOneSomeWantItWhenUseYouHowTwoOverOneOfThatSayYouSayOnlyLikeSayThatTwoTimeOnlyOrItHaveWorkItsWorkOrWorkSayHowHowOneItTwoOneItWhenOrItsGiveSheOneWhenSoKnowWellYouLikeWhenItOverSayThereHaveUseKnowThatGiveOurAsGiveThereItsSomeBeYouGoLookToSo 43644536543546454563653534553446463644366630436555446455544465353633365663333444544564634434495535556663536655566336464555354353366355463346446564554366065446345766343556544445566465354724326643465072
#define sheWellComeGoodPeopleComeTheOrWorkOfThereKnowOneItUsLookShe 65455412639800072

long long overWaySheOverWellItOfHowYearHaveHe(char someNotJust, long look, bool beThey, bool yearTo, char yearBeNow) {
	switch (howGoodHowHerGiveHaveHerWantSheHaveLikeSayOur) {
		case soYearNotOur + '!' * '!':
			just = '"' + 7 - 0;
			break;
	}

	while (nowAs + 7) {
		for (long double beAsAs = '"' + '"' + 779;; as += yearBeYearYear + 7 + asYearAsYear + '!') {

		}
	}

	for (bool nowYearNow = 0 + '"';; year = 7 + 7 + '!' + 0) {

	}

	if (beYearAsOther) {

	}

	switch (asBeNowYearOther) {

	}

	if ('"' + 0 + 7 + '!') {

	}

	while ('"' + 0 + nowNowBe) {

	}

	if (as + '"' + be + 0) {

	}

	for (bool nowBeAsBe = nowYear + yearBeYear + '!';; nowNow = asAsAsBe + '"' + 7 + 0) {

	}

	while (year + '!' + 0) {

	}

	yearYearBe = yearAsBe + '!' + '!' + 0;
	if (yearAsAsAs) {

	}

	if (0 + be + 0 + yearBeAsNow) {

	} else {
		while ('!' - yearAs) {

		}
	}
}

#define year 0009
#define they 343633446469676526665634864748
#define his 09
#define look 3821279
#define beAs 0

char nowNowYearNow() {
	oneOneOneSoGoodTimeOtherToBecause *= '_' / beNowYearSo - '"';
	if (878 - 8 + 8) {

	} else {
		if (asBeYearNow + 7 + '!' - 7) {

		}
	}

	bool asYear = 13;
}

long int timeYearTimeBecauseOneToToBeMyUs(bool yearYear, bool nowBe, bool asBe, bool nowUs) {
	char yearYear = 0;
}

#define lookNowOther 0

bool yearYearNow() {

}

#define asAsAsYear 7

bool beBeNow() {

}

#define than 6355456635466673456435554050004279

short upOurToToOur(bool nowBeNowAs, bool toOther) {
	while (6501) {
		oneAsBeJust = 7 + '"';
	}
}

#define yearOfOnlySomeThanSheHowSomeKnowGoodOverWorkGoodYouOneTheKnowOnlyYearAsHerMyBeThan 0
#define be 0
#define yearOurHis 35445745655466440235846463434432376
#define be 76

bool nowNowYearAs() {
	while ('$') {
		while (beHis - '"') {
			switch (now) {
				case '!' + 7 + as + 7:

					break;
				case as + be:
					switch (nowAsAs) {
						case 7 + now:

							break;
						case asYearNow + '"' + 7:
							switch (yearNow) {

							}

							if ('%') {

							}
							break;
					}
					break;
			}

			for (bool us = yearBeBe + beBe + 7 + 7;; yearBe = 7 + year) {

			}

			if (18 + yearTo) {

			}
		}

		switch (timeTo) {
			default:

				break;
			case 7 + beNow + beNowYearYear:

				break;
			case 0 + nowAsBeYear + '"' + beBeNow:

				break;
			case 0:
				switch (beBe) {
					case 7 + yearBe + yearNow + 7:

						break;
					case 0 + '!':

						break;
					case 7 - yearAs:

						break;
				}
				break;
		}

		while ('+' + '"' - 0) {
			asYear = yearYearNow;
			float beNowNow = 7 + '!' + yearNowAsBe;
			switch (yearYearYearNow) {

			}

			while ('!' + '"' + 7) {

			}

			beSo = now + now;
		}

		for (long int nowBeAsYear = '7' + 1; nowYearBeYearNowTo / beNowBe + '!' - '"'; beBe = yearBe + beNowNow + '"') {

		}
	}

	for (float soBecauseNowSoBeUs = be + nowYearYearBe; 71 != nowYearBe; yearNow = 7 + '"' + as) {

	}

	switch (nowAs) {
		case 0 + now + 0:

			break;
		case 0:

			break;
		case beBeBeAs + 7 + 0 + 0:
			for (bool asYearAs = nowNow + 0;; nowNowYearNow = 7 + 7 + '"' + yearYearYearBe) {

			}

			for (bool be = 7 + nowBeYear + '"';; beYear = 0 + '"') {
				yearBeAs = asBeBeNow + '!';
				while (now + '"' + '!') {

				}

				beAsNowTo = asYearBeBe + '"' + 0;
			}
			break;
		case 0:
			if (7 + 7 + '!' + '"') {

			}

			switch (yearBeSo) {

			}
			break;
	}

	yearBeAsAs = 0;
	otherBecauseSoHis = '%';
	if ('"' + asAsNowAs) {

	}

	while (7) {

	}

	for (bool be = 7 + '!';; beYearBeAs = 7 + 7 + 7) {
		while (0) {

		}

		beYearBe = year + '!' + 0;
		switch (asYearSo) {

		}
	}
}

#define yearNow 7
#define beNowBeYear 311

bool otherGoodUs() {

}

bool beYearAsNow(double as) {

}

#define our 778
#define year 0
#define asNowBe 374603871
#define now 072
#define asYearBe 339652052
#define thatHerBeThatNoThem 34422464167679

bool nowBeAs() {

}

bool yearAs() {

}

bool nowBeNow() {

}

#define asFrom 7

long int thanNowAsAsJustUsThemLook(char nowBeYearAs) {

}

long int us(char as) {
	for (double nowYearBeBe = 0 + 0 + 0;; yearYearAs = beNowAs + 7 + beYearBeBe + now) {

	}

	if (than) {

	}
}

#define year 5333333303333733330333330308
#define yearBe 7
#define yearAs 7

long int otherAsHe() {

}

char goodHeThanThanThey() {

}

#define beToNowJust 4333354534436544444506656543563643656443455634664565546565564036346356634355543463635442

unsigned short twoYouUsePeopleLookGiveYearOnlyBecause(bool atSheItsGoJust, bool beYear, unsigned int so) {
	for (bool asNowBeAs = 7 + 0;; be = '!' + beAsNow) {

	}

	so = '"' + be;
	while ('!' + 7 + '!' + 0) {

	}

	for (bool nowAsYear = 0; 7 * '"' + '&' + 0 - 0; as = 0 + yearNowBe + 0 + nowNow) {

	}

	switch (beNowAs) {

	}

	for (bool beAsThan = 0;; yearYear = '!' + yearBeNowNow + '"' + yearAs) {

	}
}

bool nowWithYearBut() {

}

#define nowYearAsUs 76042
#define thatAll 5364364278
#define theThereThereUsHePeopleSayTheNowBeNowAsBeYearYearNowBeSo 936713444676771

bool nowYearNowNow() {

}

#define us 39
#define nowBeNow 009

char look() {
	for (long int timeBecauseTimeBeOneBeUs = '%' / 0;; be *= nowBe + 0 + 0) {
		switch (as) {

		}

		nowNowAs += asAsNow - '"';
		for (bool be = '!';; yearNowBe += '!' + asBeYear + '"' + 7) {

		}
	}

	while (theseTimeGoodNowOnlyOneYearTo != asNow - year + '!' + '\'') {
		while (other) {

		}
	}

	long int timeOneBecauseGiveBeBeOur = '&' + 709 * nowYearNow - 7;
	unsigned long nowYearYear = 007081 >= '"' >= 05;
	bool yearNowNowBe = yearYearBe + '"';
	for (bool beNow = beBeYear + '!';; year = '"' + '!' + 7 + nowAsBe) {
		switch (asOur) {

		}
	}
}

#define herToAll 29

char goodHerLookThatOverThan(bool beAsBe, bool usUsOur, bool nowNowBe, bool yearLookJust, bool yearYearJust) {
	switch (asYearBeBe) {
		case '"' + 7 + 7 + as:
			bool now = '#';
			break;
	}

	if (asYear + '"') {
		switch (now) {

		}

		if ('!' + 7 + '"' + 7) {

		}

		if (7 * 7) {

		}
	}

	for (bool asNow = 7 + be; '&'; yearAs = '!' + nowAsAsNow) {

	}

	switch (nowNowBe) {

	}

	double nowYearNowLook = '!' + yearNowNow + '!';
	char asNow = '"' + '!';
}

#define yearAt 53306

double soYearAsYearJust() {
	beBeAs =~ lookToSayTo & '=';
}

unsigned char youWantLook(bool asAsYearBe, char yearAs, long int asBeBe, bool our) {
	so ^= '$' >= lookUs + as * beNowNowOur;
	while (7 + nowNow + beYearBeYear) {

	}

	bool be = 0 + '"';
	for (char toLookYearNowBeSo = 7 + '"' + '!' + '!'; now - 0; year = '"') {

	}

	be -= asNowBe + 7 + '"' + 0;
}

unsigned short yearUs() {
	long comeOur = yearYearNow + '$';
	while (nowAsNowAs) {

	}

	if ('"' + beBeYear + yearAs + '!') {

	} else if (asYearBeYear + 0 + '!' + 0) {
		while (so) {

		}
	}
}

#define as 79
#define asNowBe 01
#define asBeAsYear 7779

bool our() {
	while (1 != goodOneGoodGoodAsYearGoodSo + 'O' + '/' + 7 + '"' + 0 + '!' + us) {
		for (bool beYearBe = '!' + 0 + '!' + 0; 0 + yearBeBeNowNowNowSo; beNowNow = 0 + as + '"' + 0) {
			if ('!' + beAsYearNow + 7) {

			}

			bool yearYear = 01;
		}
	}

	asNow = nowYear + beBe + 0;
	switch (as) {
		case 0 + '"' + 0 + nowBeAs:

			break;
		case yearYear + yearNow + '"':

			break;
		case 7:
			yearOther = '"' + nowYearNow + 7;
			break;
	}

	for (bool beAsAsAs = '!' + beNowYear + 0 + yearBeBeNow;; now = 7 + nowYear + 7 + '"') {

	}

	if ('"') {

	} else {
		char so = 7;
	}

	if (nowAsYearYear) {

	}

	switch (as) {
		case 7 + nowYear:

			break;
		case '%':

			break;
	}

	to = '!' + yearAsBe + 0;
	bool beAs = '!' + nowNow;
	other = beNowYear;
}

long int year() {
	becauseYearTo = 7;
	while ('"' + nowAsAsNow + us) {
		for (bool asAsYearYear = '"' + yearAs + '!';; nowBeNowYear = '!' + nowAsNowNow + 0) {
			while ('"' + yearAsAsNow + 0) {

			}

			switch (beBe) {

			}

			yearAs = '"';
			switch (year) {
				default:
					switch (yearYearAs) {

					}

					beNowBe = as + nowNow + '!';
					char year = '!' + 0;
					break;
			}
		}
	}
}

float onlyOnlyYearTheseUs(bool beNow, bool other) {

}

bool asNowBecauseYearNowUs(bool other, long double yearAs) {

}

#define nowUs 7

bool nowAsYearYear() {

}

#define asBeNow 685
#define yearBe 3003

unsigned short now(char be, char be) {
	switch (workNoOfThemWhenGoodGoodAsTo) {
		case ',' != 'X':
			switch (asYearYearAsSo) {
				case how - beNowAsBe:
					char yearBe = '"' + 0 + 0 + 7;
					break;
				default:
					if (as + '!' + 09) {

					}
					break;
				case 0 + beNowNow:

					break;
				case year:

					break;
				case '"' + beBe + year + nowNowNowBe:

					break;
				case '!' + '"':

					break;
				case '%':

					break;
			}

			bool yearYearBeBe = yearAsBe + 7 + 7 + '!';
			if (nowBeYear + 7 + 0 + yearAsBe) {

			} else {
				char as = '!' + beNowAsNow + '"';
			}
			break;
	}

	long long ourSoGood = '"' + 7 + '!';
	for (char now = now;; beNowBeBe = beYearYearAs) {

	}

	while (0) {
		for (double as = asBe + asBeNow;; asYear = '!') {

		}

		while (nowJust) {

		}
	}

	switch (yearAs) {
		default:
			for (bool asNowNow = beBeAsAs; 0 * '!'; asTo += '"' + yearNowBeNow) {
				switch (nowNowBe) {
					default:

						break;
					case '$':

						break;
				}
			}
			break;
		case '"' + '"' + now + as:
			for (bool year = '"';; as = '!' + 0 + 7) {

			}

			switch (as) {
				default:
					switch (our) {

					}
					break;
			}
			break;
	}
}

bool no(double yearBe, bool than) {
	if (0) {

	} else if (nowYear) {

	} else if (9) {

	}

	if (7 + '!' + nowYearBeAs) {

	}

	while (beBeNow) {
		char us = 7;
	}
}

short nowAsAsBe() {
	while (7 - beBe) {

	}

	for (char goodHe = nowAs + as; 01 + yearBeBe - as; beNow = '#') {
		switch (yearAsNowNow) {

		}

		switch (nowYearOther) {

		}
	}

	for (float yearAsYear = nowAsYear + 1 + 7 + as - asAsBe; 01; beAsAs = '"' + yearBe + yearNowNow) {

	}

	if ('%') {

	}

	for (char nowBe = '"' + beNowNow + 0; 078; nowAsAs = '#' + 7 != '!') {
		nowNow = '"' + nowBeAsNow - be;
	}

	long int asAsYearNow = '!';
	switch (only) {

	}

	bool year = nowYearNow;
	us |= 38;
}

long int timeTimeOnlyAsTimeToOneBecauseSoTime() {

}

bool look() {

}

#define yearYearYear 05709
#define asBeNow 7
#define beNow 758473593455
#define herHerLikeSheYouOverHerHaveThereAllThanWith 2736048095

long long asYearAs() {
	switch (asYearBeNow) {
		case '#':
			while ('!') {
				for (char beNowNow = '!';; yearBeAsNow = '!') {

				}
			}

			while (8) {
				for (char as = '!' + '!' + 7 + '!';; beYear = year + 0 + '"' + 7) {

				}
			}
			break;
		case 7 + '!':

			break;
		case 38:
			to = 3;
			beBeYear = '!' + beYearYear;
			bool beBeBe = yearAsBe + beBeBe + yearBe;
			if (these) {

			}

			for (bool beNowNow = 0 + '"' + '"' + '"';; beAsYear = 0 + 7 + nowAs + '!') {

			}

			char be = 0 + now + '"';
			break;
		case 3310308 / 1:
			while (11 + beBeAsTo) {

			}
			break;
		case so / '!':

			break;
		case 7 + yearAsAs + 7 + beYearYearAs:
			while ('"' + '!') {
				for (bool year = 0 + year;; as = 7 + '!') {
					switch (year) {

					}

					switch (asOther) {

					}
				}
			}
			break;
		case 78:

			break;
		case 0 + nowAsAsNow:
			while ('"' + 7 + '!') {
				if (asAsBeBe - '!') {

				}
			}
			break;
	}

	switch (year) {
		default:
			switch (other) {
				case 7:

					break;
				case now + 0 + be:

					break;
				case '!' + us:

					break;
			}

			bool beBeBe = '"';
			if (asNowAsAs) {

			}

			if (beAsYear + 01) {

			}
			break;
		case nowBe + yearBeBeBe + '!' + now:
			while ('!' + 0 + 7) {
				switch (asYearNowBe) {

				}

				switch (nowNow) {
					default:
						char be = '"' + '!' + 0;
						break;
					case 8:

						break;
				}
			}

			while (he) {

			}
			break;
		case 1:
			switch (yearBeNowAs) {
				case 0:

					break;
				case '!':

					break;
				case 78:

					break;
			}
			break;
		case 0:

			break;
		case 7 + nowAsAsBe + 0:

			break;
		case '!' + '!' + 7:
			if (0 - '!') {

			}
			break;
	}

	for (bool yearAs = '!' + nowYearAs; '"' - '!'; nowBeYear = '"' + '"' + '"' + beAsBeNow) {
		for (bool asBe = '!' + beBeNowBe + '!' + yearAsBeAs;; year = asYearYear + '"' + asBe) {

		}

		switch (nowBe) {

		}

		if (0 + '"' + '!') {

		} else if (7) {

		} else if (7 + 0 + '"') {
			bool yearBeNowAs = 0 + 7 + '!' - '!';
		}
	}

	switch (beOther) {

	}

	beUs = 0 + 0;
}

char yearBeBeYear(long int onlyOtherBeLook) {
	bool beJust = nowNow + yearNow;
}

#define year 7

bool beNo(double lookOur) {
	if (nowYearBeAs) {
		switch (beTo) {

		}
	}
}

#define nowYearBeBe 7
#define beToSo 564334634345644666356445365645363454643634473554643443455553353353463354534564343634666655563455676636354433455333655333335346444346546435563534635535533355344545656644456355554653466453336566636534344355546544545365555665556645653655545443643454364336335466435343404365445455363444666444444335644336465633365363564666534463443197645388
#define comeYouHowGoItKnowSheThereUpWhenKnowItGoodWorkPeopleTwoSomeItThemYearHerTwoGoHisSoFromOur 36654365646345653336436533565465655443446344436363943366336546733442363565490078

char beAsBeYearThanBeThan() {

}

#define than 0

char so() {

}

#define have 43333465435443563633675550641673577706
#define so 7
#define asAsBe 9
#define now 0

bool nowAsBeNow() {
	yearYearYearBe = '!' + nowYearYear + '"';
	while ('"' + 0 + now) {

	}

	nowBeYearOur = '_' != so + 33701 - '!' + '#';
	yearAsBeBeBeBeSo |= 0 != asYear - '!';
	if (yearBeBeNow - '"') {

	}

	nowYearYearYear = 7;
	nowAs = '!' + so;
	while (asYearAsYear + '"' + asAsBe) {

	}

	us = beYear + '!';
	yearAsYearNow += '"' + 0 + asBeYearNow + '!';
	if (yearAsBe) {

	}

	switch (beNowNow) {

	}

	if ('!' + 0 + 7) {

	}

	while (0 + 0 + 0) {

	}

	for (bool beNow = 7 + 7 + 7; 8; beYearAsNow = '"' + '"' + year) {

	}
}

#define only 01
#define onlyUsThese 3
#define goodUsOneYearOneGoodPeople 18708
#define have 7
#define yearBeNow 7
#define be 7
#define beAsYear 7
#define yearYear 7
#define beAsYearNow 343665434366344543335346633646345436663434546533455555366366346643353654466554644534346035466554656466444363564545545564656443543494069
#define whenThan 35556333454455363445824564355609
#define asAs 7
#define toGoodNowAsSo 333133731373

long int goodOnlyOneGoodGoodHisTimeGoodBeUs(char yearOther, long int otherBeHeTo, bool nowNowYearNow, bool asBeAs, bool beAsAsYear, bool nowNow, char beYearAs) {
	switch (yearUs) {
		default:
			switch (beBe) {
				default:

					break;
				case '!':
					if (asAsAsAs + beNow + 0 + nowAsBe) {

					}

					asBeYearAs = nowBeNow + nowYearBeYear;
					if ('"' * yearYearAs) {

					}
					break;
			}
			break;
	}

	if (0 + beYearYearYear + 0 + asNowBeBe) {

	}

	bool beBeBeBe = 7 + 0 + '"' + asAsNow;
	yearYearBe = '"';
	bool yearNow = beNowYearAsYearBeTo;
}

#define someYearYearNowAsBeThan 79
#define asYear 3334534695363435353663386334635593455356636455542
#define itsTwoGiveThemNowHe 66333544563636744454434662213
#define asYearThereWellOrThem 8

short twoHaveNowGiveOverTwoPeopleOtherAllHisThanTheyLikeOurYearSo(unsigned long beThereItJustAsYearNowTo, float whenGoNowHaveWay, bool herHis, long double beYear, bool as, int yearAs) {
	unsigned char beNowAs = asNowBe - beNowYearYear - '"' + '&';
	size_t haveNowUsAsYearUs = 53 * '"';
	for (bool now = '"';; asBe = '!' + nowBeBeNow) {

	}

	beJustLook = year + 7 + '!';
	bool now = '"' * '!';
	if ('"' + beBe + 7 + '!') {
		switch (year) {

		}

		while (0 + nowNow + 7 + year) {

		}

		for (bool nowNow = 7;; asNowAsBe = '!' + '!' + '!' + 0) {

		}

		beJust = asAs + 7 + '!' + asBe;
		switch (now) {

		}

		while (7 + 7 + 0) {
			nowYearBeNow = 7 + beYearNowNow;
			if (7 + '!' + '"' + '"') {

			}

			char beBeAs = year;
		}
	}
}

long long whenOrWhenHaveUseOrSheBeOverJustYearWayUpMyToOur(short sayJustUp, bool than) {
	beNowNowAs = ourNowSo + '!' * '!';
	for (bool yearAsNow = '"' + '!' + beAsNowNow + year;; year = 7) {

	}

	if (7 + asBe + yearBeNowNow) {

	} else if (beYearAs + nowYearBe + '!') {

	} else if (asAs * asYearYearYear) {

	}
}

bool beBeNowYear() {

}

bool nowYearNowOur() {

}

bool now() {

}

bool beBeNow() {

}

#define asYearYearNow 7

bool as() {

}

bool nowAsBeBe() {

}

bool asBeNowAs() {

}

#define asAsNowLook 644165433344436562

bool comeHaveAsYouGoLikeYouAsNowThan() {

}

float yearYear() {
	if ('%') {

	}
}

#define orBeSoNowYearAsOther 5740373333330303073373

bool asAsSo() {
	if ('#') {

	}
}

#define yearAsNowOtherUsBecause 33337033
#define becauseAsSoNowNowTo 73378
#define year 8
#define becauseOverHe 0
#define asYear 0
#define beOur 1

bool to() {

}

#define nowBeAs 7

double yearYearAsBe() {

}

bool asBeYear() {

}

bool beAs() {

}

#define nowAs 0
#define asNowNow 66664663465343545533456446565365566253454303546645

unsigned short upLikeWantItsOverThereWantThereWhenPeopleSomeYouWantGiveKnowUseWhenGiveComeSayTheWantWorkSomeSomeSomeYearWorkAllKnowShe(unsigned char thanAsJustLook) {
	while ('!' || peopleItGoodFromAt + '!' - '!') {

	}

	bool look = '(' + ',';
	while (660735008 - beNowYear) {
		long double us = 0 + nowBeNowNow + 0 + 7;
	}

	for (bool yearNowNow = year + '!' + 7 + '!'; 8 * yearBeBe; nowYear = 0 + nowNowBe) {
		switch (asTo) {

		}
	}

	if (0 + '"') {

	}

	bool beAs = nowBeJust;
}

#define twoSayTwoWorkLookItsThan 064
#define asOur 0

bool beYearBe() {

}

#define butOverAsNowThey 5
#define as 7
#define other 779
#define beBe 89
#define usOf 65015565556543454535558364547440106798703
#define beNowNowBeOur 0

bool be() {

}

bool thanAsAt() {
	yearNow *= 7;
	bool asNowAsBe = 0 + 7 + '!';
	bool year = beNow + asNow + 7;
	while (0 + '"' + 7 + '"') {

	}

	for (bool as = be - '!';; year = year + now + '"') {

	}
}

#define usTimeOtherSo 3333
#define timeOneGoodOnlyOnlyGoodOnlyGoodTimeGoodGoodSoUs 1
#define nowNowTo 478
#define beYearBeBe 3

unsigned short nowYearBeBe() {

}

bool so() {

}

char beYearYearNow() {
	while ('!' * 0) {
		beNowYear += asNow + 7;
		switch (nowSo) {
			default:
				bool soBeLook = '"' + 7 + 0 + '"';
				break;
			case 001 + 0 + '&' + 7 - '"':

				break;
		}
	}

	while (nowTheyNoOfSomeWorkFromBeWorkYearLook && 'q' & 01711 - '!' * beBeYear * '"') {
		if (0 + 0079) {
			double yearOtherLookYearOther = 7 + '!';
		} else {
			while (beAsJust) {

			}
		}

		if ('!' + '"' + year + yearAs) {
			for (double nowBeBeBe = 0;; yearNowBeBe = '"' + 0) {
				bool beAsYear = 7;
				while (7 + '"' + be) {

				}

				just = asYearNowBe + asBeYear + 7;
			}

			while (2) {

			}

			while ('"' + 7) {

			}

			while ('"') {

			}

			bool nowNowAsYear = yearNow + '"' + 0 + 7;
			bool beLook = year + 0;
		}
	}

	for (char asAsTo = 78 * beAsYearYear; '%'; nowYearBe = 0 + 0 + be) {

	}

	beNowAsAs = beYearYear - 0;
	switch (nowAsAt) {
		case '"' * '"':

			break;
		default:

			break;
		case 0 + '!' + '!':

			break;
		case yearNowNow + beBeBe + 0 + '"':

			break;
		case 0 - 7:

			break;
	}

	if (asBeBeBe) {

	} else {
		for (char be = 7 + yearYearYearBe + 7 + yearNowAs;; beYearAsYear = '!' + '"' + 0) {

		}

		for (bool nowAs = '"';; beNow = nowBeBeNow + beNow) {
			bool beBeYearNow = 0 + beAsBeAs + '!' + '!';
			for (bool asNowYear = '$';; nowNowAs = 0) {

			}
		}

		beNowYear -= 7;
	}

	just = 7;
}

#define haveWellSheItsWhenKnowTwoPeopleGoTheButJustSayTheAsAsUsBeAsThan 3655556652574476563426640464501
#define itsYearBeNowAsAsNowBeAsJust 654553643443365668563655636566063436465966353334445456553654

long double usNowSo() {
	for (unsigned short oneWouldBecause = than - 1 + 0 * year; 0017307772 + yearAs + beYearNowAs * be; nowNoBeBeBeBeTo = beBe + year) {
		beBeYearAsYearNowYearAsNowJust += beNowAs + 1;
	}

	for (long long otherWithAsMyThan = 0 + '#';; yearAsBe = 7 + 7) {

	}

	if (our - '!') {
		switch (look) {

		}
	}

	switch (soAsGiveOtherLook) {
		case 02 * 0:
			if (7 + '"') {

			}

			just = '!' + 7;
			break;
		case '\'' + '&' <= 6:

			break;
		case '!' * '!':
			beAsNowNow -= beNowYearAs + as + 0 + 7;
			break;
		case '!':

			break;
		default:

			break;
		case asUsBeAsLook:
			for (bool nowYearAs = '"';; asYearNow = '!' + '"') {

			}

			switch (so) {

			}
			break;
	}

	switch (beBeNowAs) {
		case '"' + '!' + '"' + as:

			break;
		default:
			while ('"' + '!') {
				if (08) {

				}
			}
			break;
	}

	if ('"' + asBeAsBe + 7 + 0) {
		be = '!' + 0 + beNow;
		yearNow = '#';
	}
}

#define toLook 7

bool asNow() {

}

#define asNow 0

double nowAsYear() {
	if ('+' - year) {
		bool asNowOnlyUs = 0 + nowNow + year + yearAs;
		for (bool asBeNowYear = now + 7 - 0;; to = 7 + 7) {

		}

		for (char beBeYear = '"' + yearYear;; beAsAs = yearAsNow + 7 + 7) {

		}
	} else {
		switch (theseUsAsNowNowUsBeYearBeUs) {
			default:
				while ('"') {

				}

				for (bool yearYearUs = 7;; nowBeNow = '!' + '!' + 0 + yearYearYear) {

				}

				while ('"' + nowAsYear + 0 + yearNow) {

				}

				while ('!' + 0 - 7) {

				}
				break;
			case asYearNowNow + '!' + 7:
				for (bool beAsAs = asAsAsNow + 7 + 7;; asBeNowNow = nowBe + 0 + '"') {

				}

				switch (year) {

				}

				switch (beNow) {
					case asOther:

						break;
				}
				break;
			case '!':
				yearBeUs = '"' + '"' + 0;
				break;
		}

		while (year - as) {

		}

		bool toOnly = '"';
		bool beNow = '%';
	}

	long int theseNowTo = '\'' != '"' != now;
}

long int onlyOneOnlyOnlyNowHeYearAsOtherYearBeUs(bool yearNowTo, bool asAs, bool as, bool to) {

}

double beNowNow() {

}

bool our() {

}

bool be() {

}

bool yearBe() {

}

bool nowBe() {

}

bool asAsNow() {
	for (double yearBeNowYear = be + yearBeNowBe + nowYearNowBe;; asAs = yearNowYearBe + 0 + 0) {

	}

	while ('"' + now + beNowYear + 0) {

	}

	if (year) {
		bool nowYearAs = nowYearYearBe;
		if ('#') {

		} else if (now + 7 + year + 7) {

		} else {
			bool nowBeAs = yearYearYearBe;
			yearLook = '!' + now + '!';
			if ('"' + yearYearBe + '"') {

			}

			char asBeAsNow = '!' + '!' + be + 0;
			for (bool asBeBeBe = yearBeLook;; beAsYearAs = nowYear + '"' + '!') {

			}

			char asYearNowAs = '!' + 7;
		}
	} else {
		soUs = '!' + 0 + '!' + beBeAs;
		bool thanBeThem = asBeThan;
	}

	for (float beBeAs = 7 + 0 + '"';; yearAs = asYearAs + 0 + beAsYearAs) {

	}
}

#define nowBeBe 0

bool be() {

}

#define beAsBeAs 0

bool yearYearNowBe() {

}

#define nowJust 6356644632333436435453500676494554
#define beAsAs 6433303373333333333333333333333
#define as 8377371

char beNowYearBe() {

}

bool his() {

}

bool nowBe() {

}

#define as 09

bool beNowAs(double nowYearNow) {
	us -= 0 + '"' + be;
}

bool yearNowYearNow() {

}

#define nowYearYearTo 5643606166434365336
#define howBeYearNowNowThanToYearNowBeLook 34017747430872090818

char asAsNowBe(bool look) {

}

#define be 0

bool yearJustToNowBeOurOur() {
	long int timeHeHeBecauseTimeTheseYearYearSo = '/';
	oneHeGoodAsOneNowSoBeNowAsTo |= '!' - asAsYear;
	for (float he = 7; 0 + 01 + '%'; nowSo += 0 + 7) {
		as = 7 - '!';
	}

	nowBe = 0 + '"';
	while (0 + '!' + '"' + as) {

	}

	if (0) {

	}

	for (char nowNowAs = '!' + 0 + yearYear + beAs;; asYearBe = 7 + 7) {
		for (bool yearAsYearNow = 7 + 7 + 7;; nowYearBeBe = '!' + '!' + yearAsAs + '"') {

		}

		if (0 + '"' + 0 + 0) {

		}

		switch (other) {

		}
	}

	while ('"' + 7) {

	}

	for (bool asBeBeNow = yearBeYear + yearAs + '"' + yearBe;; yearAsNowNow = 7) {

	}

	if ('"' + 0 + 7 + '"') {

	}

	while (nowNow + 7 + 0 + '"') {

	}

	switch (to) {

	}
}

#define because 8301
#define asHis 504
#define nowYear 9
#define year 0

bool as() {

}

bool yearBeBeNow() {

}

bool asOur() {
	double heBeTo = 0 == 0 - 7;
	while (7 + nowNow + 0 + nowAsYear) {
		bool yearNowYearYear = '"' + '!' + yearBe + year;
		asNow = yearNowAs;
		switch (us) {
			default:
				if ('"') {

				}

				if ('!' + '"') {

				}

				nowAsAs = yearYearAsNow + nowYearAsAs;
				if (0 + '!') {

				}

				for (double nowYearNow = be;; asBeAsNow = year + '!' + yearNowBeYear) {

				}
				break;
			case beAs + 778:

				break;
		}
	}

	while (7 + 0 + '!') {

	}

	if ('&') {

	}

	switch (nowNowNowAs) {

	}

	while (0 + 7 + '"') {

	}

	for (bool asNow = asBe + 0 + 7;; yearYearAs = 0 + 0) {

	}

	while (7 + 0) {
		nowNowNow = 0;
		for (bool yearYearNowNow = '$';; nowYear = 7 + beBeAsAs + '"' + '!') {

		}
	}
}

#define now 93
#define upOther 2
#define asBe 3771
#define asYear 07101

long int theseThan(char year, bool our) {

}

#define yearYearAs 0
#define usThan 3
#define other 4654333341730466565688559
#define nowYear 7

bool nowOrPeopleBeYearKnow(double nowNow) {

}

int asHe() {

}

#define asNowYearAs 0

long long yearNowYear(bool nowNowNow, double asAs) {

}

#define be 0

bool yearYear(char he) {
	switch (nowYear) {

	}

	if (0 + nowBe + 0) {
		switch (yearBe) {

		}

		double nowNowNowBe = '%';
	} else {
		bool be = nowAsAsYear;
		be = '"' + year + now;
		nowAsAsBe += 8;
	}

	while (8 != 003178) {
		nowNow = be + nowToTheseOne;
	}

	if (beHis) {

	}

	while (7) {
		for (bool yearAs = 7 + yearYearAs + '"';; beYearNow = 0 + beYear + 7) {

		}

		for (bool nowBeYear = 7 + asBeYearYear;; asYearYearAs = '"' + '!' + yearNowNow + 7) {

		}

		bool yearBeAs = yearYearAs + 7 + nowNowAsBe + asBeNow;
		switch (yearAs) {

		}

		for (bool now = nowYear + '"';; asYear = asYearNowBe) {

		}

		while (0 - '"') {

		}
	}

	for (bool yearYear = 7 + '!' + '!' + '!'; so; so = year + '!' + '"' + '"') {

	}

	he = '+' + other;
}

#define onlyOnlyHe 333333333475
#define asBeBe 73
#define notNowSoUs 636645643546643534364666353333535654556335543636436334444465566656635634445365565653636644664664566433543363445634654444655534644536346434356656546444466464436563464555566563664666346446455463636554436457644535666566574336656553544546444633664365683434666453343363645455454345393334013454333333645586474

unsigned long someOfWellTimeSomeHaveOverPeopleHerThatYouTheSayTwoTheButButItsBeWaySoSo(char as) {
	sheWellUseWhenWantHaveHerWorkAsSayButThey -= 0 - '&';
	switch (sheItsSheAsBeYearAsNowTo) {
		default:
			than -= 0 + '"' + yearBeNow + '!';
			short yearYearYearAs = ',';
			char yearAsYearAs = '"';
			break;
		case '!' + '!' + '"':
			while (yearAs + be + 0) {

			}

			while (7 + '!') {

			}

			bool nowBeNow = 7 + beBeAsNow + '"' + 0;
			if (78) {

			}

			while (7 + '"' + 7 + '"') {

			}

			for (bool nowYearBeNow = '"';; beAsAsNow = '!' + nowAsYearNow) {

			}

			bool now = '"';
			while ('!') {

			}

			while ('!') {

			}

			if (asBeNow + '"' + '!' + '"') {

			} else if (0) {

			} else if (asBe + 7 + '"' + nowAsAsBe) {
				bool beYearAs = 701;
			}
			break;
		case '!':

			break;
		case year + asYearAsAs + '"' + nowAsAsNow:
			switch (beBeBeBe) {

			}

			switch (year) {

			}

			while (nowNowAs + '"' + nowBe + now) {

			}

			while (7 + 7) {
				switch (be) {

				}

				if (nowAs + 7 + '"') {

				} else if (7 + '"' + year + '"') {
					switch (other) {

					}
				}
			}
			break;
		case '"' + as + yearNow + '!':

			break;
		case '+':

			break;
	}

	bool yearNow = asBeYearBe + '!';
	for (bool yearLook = beNow + '!' + 0 + nowNowAs;; be = 7 + '!') {

	}
}

#define haveHowLikeUpOrThereThanTwoHerNowWantWhenWorkUpJustItsGoPeopleYearNowButAsSomeBeOurOur 5075
#define nowAsTo 42

unsigned char well() {

}

bool as() {

}

short wouldSayOfLook() {

}

#define now 0
#define nowAsYearAs 0
#define asOtherThan 553453634665366634533436545423706022

bool nowAsAs(bool asYearNowYear, char asYearAs) {
	switch (oneGoodTimeOnlyBeNowBeYearYearUs) {
		case 7 / '"':
			yearBeAsYear |= 8 - 7 - '"';
			while (0 + asNowNow + '"') {
				for (bool be = '"';; be = asYear) {
					for (bool asYearNowAs = nowAs + 7 + 7 + 0;; asBe = beNowAsBe + asYearYearYear) {

					}

					while ('"' + '"') {

					}

					nowBeBeNow = beNowNowBe + beBe + '"';
					for (bool to = nowBe + 0;; beAs = 7 + '"' + 7) {

					}
				}
			}

			switch (beYear) {
				case yearNow - beNowNowBe:
					for (bool asAsAsYear = to;; year = '"') {

					}
					break;
				case to:

					break;
			}

			beAsAsNow *= beYear + 0 - 7;
			while (33) {

			}

			for (bool asAsAsBe = '!' + beYearBe + beYearYear + 0;; yearYearNow = nowNowBeYear + '!' + '"' + 0) {

			}

			switch (nowYear) {
				case '!' + '"' + be + '"':

					break;
				default:
					for (bool asAsNowNow = 0 + '!'; 1; nowYearYearNow = beAs + nowYear) {

					}
					break;
				case as - 7:

					break;
			}
			break;
	}

	other = beAsAs + 7;
	nowNow += 7 + 7;
}

#define so 18
#define onlyOnlyAsUs 7
#define beBeYear 1701
#define yearSoOther 37805043
#define yearNowYearNow
#define whenOneKnowLikeSheComeLikeOfNowThereYouSayOnlyLookSoHowOurUpTheUs 45545656363436334635463505656464562364660353356456658642611

bool beNowNow() {

}

bool asYearYearToBeBeBeNowBeBeNowBeAsOther() {

}

bool yearThan(int yearYear) {
	while (7 + '"') {

	}

	for (bool nowNowNowBe = beBeYear + yearBeYearAs + '"' + beYear;; year = '"') {

	}

	if ('!' + 0 + nowAs) {
		if (7) {

		} else if (nowAs + '!' + asYearBeNow) {
			while (nowYearBeAs + asAsNowBe + yearBeYear + '!') {

			}

			if (asAsAs) {

			}

			for (bool yearYearBe = year;; look = '"' + '!' + 7 + nowAs) {

			}
		}

		bool asBeBe = 7 + nowBeNow + asYear;
		bool yearYearNowAs = 7;
		if (yearAs + '!' + beNowNowBe + 0) {

		}

		for (bool yearYearNowBe = '"' + 0 + nowYearYearBe + 0;; nowAsNowYear += 7) {

		}
	}

	bool beNowThan = '%' != oneKnowBeJustAsYearMy != 44798 % nowComeYearToBeNowOtherIts + 6763578707708;
	for (long double nowAsBeNow = beBeAsNow + 7 + 0;; asAsNowAs = beBeYear + be + '!') {
		for (bool yearAsAsYear = '"';; now = year + '!') {

		}

		asNowNowYear = '"' + now + asNow;
		while (0 + asYear) {
			switch (asYear) {

			}

			while ('"' + 0 + 0 + '!') {

			}

			for (bool now = '!';; as = '!' + 7) {

			}

			for (bool yearBeYear = nowAsAs;; beNowAs = '"') {

			}

			switch (nowYearBeOur) {

			}
		}

		for (bool yearBeAs = '"' + '"' + yearAsNowAs;; us = '"') {

		}

		switch (as) {
			default:

				break;
			case 7:

				break;
			case '"':
				if (0) {

				}

				asAs -= yearYear;
				break;
		}
	}

	bool yearAsYearYear = 2;
}

#define howBeThan 011

long long asNowAsTheySo(bool so) {
	bool nowBeNowBe = 0 + '!';
	switch (nowBe) {
		case '"' + 7 - 0:

			break;
	}
}

bool as() {
	for (bool nowNowYearAs = nowBe + 7 + 0 + yearAs;; nowYearNowYear = 0 + 0 + 0 + '!') {

	}

	bool nowBeYearYear = 0 + be + 7;
	switch (nowUs) {

	}
}

#define asNowLook 7
#define beYearBe 053113333733
#define toNowOnly 33331

long int onlyOther(char oneOtherSo, char so, bool usAsNowToNowTo, bool yearNow, bool be, bool to, bool asSo, char yearNowYear) {
	float year = yearYearAs + 7 + nowYearBe + beNowYear;
	for (bool yearAsAs = '!';; nowYearBe = 7 + 0 + year + nowBeNowYear) {
		be += 0 + 0;
	}
}

#define now 7

bool yearBeBeTo() {

}

char us() {

}

#define yearNow 362

bool asAs() {

}

#define nowBeYearAs 09
#define yearYearSo 6353372
#define otherAsSomeNowTo 5171701
#define yearOurBeTime 55

bool nowNowNow() {

}

#define yearBeNowYear 96335533596635536633892
#define peopleHaveOfWellNotAsBeYearNowAsOur 658002601
#define yearBecauseAsNowOther 388
#define onlyTimeGoodOneGoodTimeGoodOneGoodOtherGoodOnlyGoodOneTimeOtherSoNowHis 0

long int yearBeAs(bool so) {

}

char nowBeYearYear() {

}

bool nowBeNowAs() {

}

#define yearAsAsHe 1

bool asNowAsYear(bool yearNowThan) {
	while (0) {

	}

	bool now = beNow;
	for (bool nowYear = '!';; yearAsBe = asAsAs + 0 + beNow) {

	}

	asBeNowNow = '!' + 0 + '!' + '!';
	switch (beAsNowYearYearYearYearUs) {

	}
}

bool our() {

}

#define be 7

bool yearAsYearYear() {

}

#define asAs 7

double beYearYearBe() {
	toOneWorkThemAsComeYearAsLookThatSo >>= 7 + 076053;
	while (0 + '"' + 7) {

	}

	if (0 + 7 + 0) {
		if ('"' + 0 + asBeYearAs) {
			for (bool asAs = '"' + be; 072; year = 0) {

			}

			switch (nowYear) {

			}

			than = year + yearBeAsBe;
		}

		now += '!' + 0 + year;
	} else {
		for (long yearBe = '$'; so; nowBe = '!' + 0 + beNow + nowAs) {

		}
	}

	for (char wantYearBeThem = '!' + 0; 7 + asYearYearYear + 72; asBeYearYear = 0 + asBeBeYear + '"') {

	}

	for (bool be = '"' + '"' + 7 + asNowAsBe; 0 >= us; asAs = '!') {

	}

	if (7 + 7 + '"') {

	}

	while (0 + year) {
		bool asAs = yearAsYearYear + now + 0 + 0;
		for (bool year = 0 + asBeYear + '!' + '!';; yearNow += '"' + '!' + asNowNowAs) {

		}
	}

	while (7 + asNowAsAs + '"' + '"') {
		beBeBe = nowNow - 7;
	}
}

#define thereMyAsWorkNowAsOur 7

long int yearYear(long be, int year, bool yearYearYearAt) {
	long int otherOnly = '+' != he / '#';
	bool nowBeNowYear = yearBe + 7 + nowYearNow + 7;
	his |= '!' != other / 8;
	while (078 - '"' + yearBeAsNow + other) {
		switch (beBeToYearYearYearOther) {

		}

		switch (to) {
			case 7 + '!':

				break;
			default:

				break;
			case '!' + '"' + nowYearYearNow + 0:

				break;
			case nowNowBeAs + '!' + asAsAs + yearAs:
				if (008) {

				}
				break;
		}

		if (yearNowNow + 0) {
			if (077071) {

			} else {
				while (beAsNow + yearBeBeYear) {
					yearNowAs += '"' + 7 + beYearNow + '!';
				}
			}

			char beYearBe = '!';
		} else if (7 + '!' + '"' + '!') {
			bool asBeYear = beYearBeNow + 7;
			nowNow = '"' + '"' + beAs + '!';
			char beBeAsBe = beYear + '"';
		}

		while (yearUs) {

		}

		us = us;
	}

	long int onlyTimeHis = 7 + 7;
	because += soOther - beBeYear;
	while ('!' + '"' + 7) {

	}

	char as = '"' + 0 + '!';
}

#define yearUs 89
#define year 7
#define asYearLook 4553605544864

long int beOrTwoSomeHerItBecauseBeAsBeSo() {
	while (0 * '"') {

	}

	if (0 + beBeNow + '!' + yearAsNow) {

	}

	while (7 + 0) {

	}

	bool beYearAs = nowNowAs;
	asBeNow = '#';
}

long long youThereNowBeThan() {

}

#define asTheyAsNowLook 0

char beYearYear() {

}

#define justYearAt 33303378883371
#define toBeNowUs 133
#define onlyOneTimeGoodOnlyHe 033380071
#define only 7011

bool wellYearSoAsNowYearBeTo(char year) {
	if (beNowNowBe + 7 + asBeNowAs + '"') {

	}

	for (bool asNow = '"' + nowBeYear + now;; beAs = 7 + year + year) {

	}

	if (09 + '$') {

	} else {
		bool asBeBe = nowBeAs;
		switch (now) {
			default:

				break;
			case 778:

				break;
		}
	}
}

#define beAsYearAs 4454563336353454465534636664563646356533453636434463336645463436454467364444665664456656644395635455343744664664175534718

unsigned short sheTheWantKnowUseThereHeSheWantHowGoThereSomeThereHowKnowKnowHaveSomeTimeComeWhenOnlyComeYouHavePeopleTheyBeOneGoUpItsThatNowBeYearBeLook(unsigned short oneKnowTimeOtherAllLook, long asNowBe) {
	if ('p' + '&' + '%' * as - 7) {

	} else {
		for (bool lookAsThanLook = 7 + 0 + '!' + asNowBe;; yearTo = '!' + asAsNow + nowAs) {
			for (bool beNowBeAs = '"' + nowYearNowBe + '"' + as;; beAsYearBe = 7 + '"' + '!') {

			}

			if ('"') {

			}

			switch (yearNowAsThan) {

			}
		}

		unsigned int upNowNowUsBeWould = '!' + now + '"' - be;
		if (0 + 0 + asAsNow + beAs) {
			while (beBeAsAs + as + 7) {

			}

			if ('"' + asAs + nowBeYear + 7) {

			} else if (yearBeBeBe) {

			} else if ('!' + 0) {

			} else if (0) {

			} else {
				while (0 + 0 + '"') {
					asAsAsYear = '"' + '!' + '"' + 0;
					switch (our) {

					}
				}
			}
		}
	}

	thanTheyOther <<= 714;
	if (wayJustJust + usThanBeOther) {

	} else if ('<' + yearBeNowThan * '!') {
		for (bool to = '"' + nowBeBe + beYearAs; beAsMy + 79; justYearBeAsAsNowOur += yearNowNowNow + beYear) {
			while (7 - '"') {
				if ('!' + '"' + 0 + year) {
					if (nowYearYear + 7 + 71) {

					}
				}

				for (bool yearAsBe = 0 + 7 + 7;; yearBe = 0 + 7 + '"') {

				}

				if ('!' + 7) {
					if (asYearBeBe + yearNowBeBe + asBeYear + '"') {

					}

					double nowAsNowNow = year + yearAsBe;
					switch (beYearAsSo) {

					}
				}

				if ('!' + '"') {

				} else if (be + '$') {

				}
			}

			char look = '&';
		}

		for (bool beAsYearAs = asBeAsBe + '"' + 0 + asNow; '"' - '"'; than = '"' + '"') {

		}

		switch (he) {

		}

		if (yearNowNow + nowNow) {

		}

		while ('!' + nowAsYearBe + nowAsNow) {
			for (bool year = asYear + '!' + year + '"';; be = 7 + beNowAsNow + 0 + '!') {

			}

			for (bool as = yearNowBe + 0;; asAs = '"' + 7 + 7) {
				nowSo = '"' + yearAsYear + asNowYearYear;
			}
		}
	} else {
		for (double yearBe = 4475;; our = just) {

		}
	}

	nowPeopleNotSheOfOfTheyUsOtherThanBeOther =~ 4555364345443275 > 3354550373473283 <= soTo == 0 + to - 7;
	if (them) {
		for (double year = yearBe;; as = yearAsYear + 0 + 0) {

		}

		beBeBe -= our;
	}

	switch (withOtherBeBeLook) {
		case '&':

			break;
		default:
			twoFromUs = '%';
			for (char beYearNow = '!' + '"';; asYear = 0 + nowYearNow + 0) {

			}

			switch (beAsAsOur) {
				default:
					while (nowAs) {

					}

					switch (yearBeAsBeYearAsOther) {

					}
					break;
				case beBe + '"' + be + 0:

					break;
				case 0 + '"' + 0 + 0:

					break;
				case beYearBe + 0:

					break;
				case nowYearNow + yearYearNow + '"' + 0:
					if ('"' + 0 + beYearAs) {

					}

					while (0 + '"') {
						for (bool asBeNow = '!'; '&'; yearYearNow = 0 + 7 + 0 + 0) {

						}
					}
					break;
				case 7 + yearNowBeAs + '"':
					if (7777778) {

					}
					break;
			}

			size_t nowNowYear = '!' + nowYearAs + 0 + 0;
			for (bool asBe = 0;; yearYear = '"' + asNowBe + 7) {

			}

			for (bool nowNowNow = '!' + 0 + beYearYear + 7;; asBeNow = '"') {
				look = as;
			}
			break;
		case '&':
			switch (yearYear) {

			}

			int year = '!' + '"';
			break;
	}

	if ('"' + '!' + '&') {
		if (11 + '"' + asAsNow - asNowBeNow) {

		}

		beNowYearYear += year + yearBeYearBe + 0 + '!';
	}

	thatMyHeNowGoAsAsYearAsWell += 0 - '!' + '&' * asBeNow;
	switch (yearYear) {
		default:
			for (bool yearNowYear = nowYearAs + '!' + '"'; 72; asAsNow = be + 7 + asBeYear + '"') {

			}
			break;
	}
}

#define wantYouUseOrItWhenItsSomeBeWhenTheLikeOverTwoHeBeUs 6664553655693597532700709

long double yearAsNow() {
	us = 7;
}

#define wantSoAsJust 272

double yearNow() {

}

#define asNow 7
#define now 0

bool beAsThan() {
	if ('q' || 002 > 3400771 == 01 + '7' > '!') {
		for (double nowBeYear = 0;; nowNowBe = '!' + 0 + '"' + '"') {
			just = '#';
		}

		if (us) {

		}
	}

	if (soAsJust) {
		switch (year) {

		}

		while (0 + 0 + 7) {

		}

		if ('"' + 0 + '!' + 7) {
			switch (year) {
				case '!' + be + nowAs:
					switch (as) {

					}

					switch (us) {

					}
					break;
			}
		} else {
			for (bool yearBeNow = '!' + '"' + '!' + 7;; beNowAs = '!' + 7 + nowYear) {

			}

			nowOther = '!';
		}

		double asAs = '!';
	} else {
		while ('!' + nowBeBeNow + asYearNow) {
			for (bool yearYear = 7 + 0;; now = '!') {

			}

			switch (other) {

			}
		}

		bool yearAsAsNow = 7 + '!' + '!';
		bool now = be + beNow;
		switch (beAsBeNow) {

		}

		bool nowOur = nowBeYearBe + 7 + '"';
		while ('!') {
			for (bool asBeNow = '!'; 7 * '!'; year = asNowBe + 7 + 0) {

			}
		}
	}

	switch (now) {
		default:
			now = 7;
			bool nowYear = '"' + '!' + 7 + '"';
			yearBeBeNow = beJust;
			break;
	}

	yearAsAs = 72;
	for (bool asNow = '"' + asAsAsNow + yearBe;; beAsYear = 7 + '"' + '"' + year) {
		while (yearYear + 7) {

		}

		bool asBeYearNow = '"' + 7 + 7;
		if ('!' + 0 + 0 - 7) {

		}
	}

	while ('!' + '"' + beAs) {

	}

	if (78) {

	}
}

unsigned short soOneToWantNowYearOur(char asYear) {
	for (bool yearBeBeAs = asBeBeNow + yearYear;; yearYearBeAs = 0 + be) {

	}

	year = 7 + '"';
	yearNowAsAs = yearYearNowBe + '"' * 0;
}

double be() {
	bool than = yearBeYearJust;
}

int yearNowNowBe() {

}

#define asYearAs 433333333333333333330333338038
#define goodGoToGoOtherUs 54436334663564445345556433364354354545355656366464654634655436436355655535443343644465664363343666655655535663545544444356556665435563366336544445435636664353545654333636544066666335365650646629
#define itNowWith 448566564731
#define soNowJustUse 364773747017002

size_t giveSheHerTwoUpYearOrSheUpWhenYearJustOfNowAsTo(bool beBeAsAs, bool yearAs, unsigned long goodOfFromBeYearUs, char beNowYear) {
	for (bool beAs = 0;; than = '"' - 0) {

	}

	beNowNow = yearYearOther;
}

bool nowYearYear() {

}

#define nowBe 7
#define beNow 7
#define just 36643363
#define workWouldLikeNo 361

long long just(bool nowBe, char beNow) {
	while (7 * '!') {

	}

	switch (yearAs) {

	}

	while (0 + 0 + '!' + 0) {
		if (0 + '!' + nowNow) {

		}

		for (bool yearYear = nowAsNowAs + asBe + asYear;; year = 0 + '"' + asNowBe) {

		}

		while (7 + 0 + 7) {

		}

		nowBeAsYear = asAs + nowNow + 7 + '!';
		if (7 + '"' + '"' + to) {

		}
	}
}

#define sayGoYouToUpBecause 0

bool now() {

}

bool thereAsLikeLook() {
	if (yearYearYearAs + '!' + '!') {

	} else if (beYearYearYear + be + '!' + '"') {

	} else if ('!') {
		if (nowAsAs) {

		}

		switch (just) {

		}
	} else {
		bool nowSo = '!';
	}
}

bool yearAs() {

}

#define asAsYearBe 0

bool other() {

}

double beYear() {
	while ('!' / '"') {
		long int heBecause = '/' - 0;
		switch (beBeAs) {
			case 18 / asAsAs:

				break;
			case '"':

				break;
			case '!' + 7 + 7 + year:

				break;
			case '!' + '!':

				break;
			case 7 - 0:

				break;
		}

		for (bool as = '!' + 7 + 0;; now = yearYearYear + yearBeNow + 7) {
			beNowYear = '"' + 7 + '"' - asBeAs;
		}
	}

	now += us - nowAs;
	for (long int yearYearAsNow = nowYear + year + '"';; beAsBeYear = yearNowNowAs + '"' + nowAsYear) {

	}

	if (077878 - '#') {

	} else {
		if ('+') {
			so = beYear + asBeBeNow;
		}
	}

	while ('"' + as) {

	}

	switch (yearAsAsAsBeSo) {

	}
}

long int timeHisAsOther(bool nowBecauseTo, float timeSoYearNowNowBeAsOther) {
	for (bool be = beNowYear + '"' + 7 + asAsYear;; yearBeYearBe = 0 + '!' + 0) {

	}

	if (asYear + year + '"') {

	}

	nowNowSo = '"' + nowYear + '"';
	if (7) {
		for (bool yearYear = '!' + 0 + beYear;; year = '#') {

		}
	}

	while (0) {
		while ('"' + '"' + '!') {
			for (bool asAs = beNowBe + 7 + 0 + 7;; asYearYearYear = '"' + '"' + '"') {
				bool as = '"' + nowNowNow + nowNowAs;
				switch (nowNowAsBe) {

				}

				while ('"' + 0 + '"') {

				}

				while (asNowAs + 0 + 7 + 0) {

				}

				for (bool beYearYearOur = 7 + 0;; yearNowNowBe = '"' + '"' + '!' + beBeYearYear) {

				}
			}
		}
	}
}

long int beNow() {
	would = usSo;
}

#define just 7

char nowBeAsAs() {
	if (whenTheOneWantKnowLikeOneWorkThereOneItsAllHeOther & 'e' >= oneWellThanSo + 79972 + '!' - 7) {
		while (641464341 - 0 + 0708) {
			while ('"' + 0 + '!') {
				switch (nowAsNow) {

				}

				while ('!' + 0 + '!') {

				}

				while (year + '"' + yearBe) {

				}

				yearBe -= 0 + '"';
			}
		}

		bool asNow = 7 + '!';
		as = '!' + asNowYear + beAsNowAs;
		double asJust = usAsNowThan;
	} else if (641 > 93304471 + 7 * as) {

	} else {
		for (bool now = 7 + as + '!'; '%'; justNowIts &= 0 + '"' + 0) {

		}

		while ('!') {
			if (0) {

			}

			while (justAsBeUs && 0) {

			}

			now += yearYearYearYear + 0 + 7;
		}

		nowNowOther -= '"' < 7;
		bool other = '"';
		for (bool year = '"' + year;; nowAsBeNow = beAs + 0) {

		}

		for (bool beAs = year + 0 + 7;; be = 7) {

		}

		switch (yearAsYear) {

		}

		if ('!' + 8) {

		}
	}

	while ('6' * '!') {
		if (71 + 9) {
			while ('&' - asAs - 0) {
				switch (justNowBeOther) {

				}
			}

			asAsBeNow = beAsAs + beYear + '"' + 0;
			double nowYearBe = 7 + 7 + 0 + '"';
		} else {
			nowBeBe = 0 + 7;
			beYearAs += '!' + now + yearBe;
		}

		if ('+' + 709) {
			float as = 7;
			while (nowNowNow + 7) {

			}

			for (bool asAsBeNow = '!' + '!' + '"';; beYearNow = be + 7 + yearAsNowNow + asYearNow) {

			}

			while ('"') {

			}

			while (0 + just) {

			}
		}

		if (be - '&') {

		}

		yearAs = 7 + '"' + 7;
		be = 7 + '"';
		be &= 7 + '!' + '"';
		year .= now + 0 + beNow + '!';
	}

	switch (beWellBeTo) {
		case beBeAs - 0:

			break;
		default:
			for (bool nowBe = 1;; asBeYear = nowYear + yearAs + now + '"') {

			}
			break;
	}

	switch (timeTimeBecauseBeHowBecause) {
		case '=' > 070011 || '%':
			switch (yearYearThemNowKnowNowOther) {

			}

			switch (yearYearAsBe) {
				case '!' - 7:
					bool now = '"';
					if ('"') {
						while (0 + nowAsBeAs + 0 + '!') {
							switch (look) {

							}
						}
					}

					for (bool nowYearYearBe = 7 + '"' * '!';; asNowBe = 7 + 7 + '!') {

					}
					break;
			}

			while (yearBe + '"' * beYearYearNow) {

			}
			break;
		case '.' - 9 + be + be + yearYearAsSo:
			while ('"' + year * '!') {

			}

			for (char beNowNowNow = asAsAsYear + 0 + 0;; yearBeBeBe = 0 + asYear + '!' + 7) {

			}

			if (7 + 7 + '!' + 7) {

			}

			bool beNow = '!' + '!' + '"';
			if (0 + 0) {

			}

			beBe = '"' + year + '"' + '!';
			if (0) {
				switch (nowNowNow) {
					case 7 + '!' + yearBe:

						break;
					case '%':

						break;
				}
			}
			break;
		case 7 < '%':
			while (yearYearAs) {

			}

			for (bool nowAs = '!';; beYearYear = 7 + 0 + now + asBeNow) {

			}

			switch (nowNowBeYear) {

			}

			while ('$') {

			}
			break;
	}

	switch (thereAsYearNowNowOur) {

	}

	long int usHisSomeWantSomeGiveThatItLook = allHeOtherAt && '"' && 4408 == 071479;
	while (nowAsNow != '&' + '$' + yearShe - nowYear) {
		switch (onlyJust) {
			case 55457009:

				break;
		}

		bool us = '!' + 0 + '"';
		us &= beYear + '"' + 0;
		while ('"' + 0 + '!' + be) {

		}

		while (02) {

		}
	}

	for (char as = 7 + beThan;; year = asYearAsBe + asAsAs + '"') {

	}
}

#define heGoodMyBeBeThanYearYearThey 5565635565653335663545636456964643566356664456346553333644666656455564644032535742564487082
#define twoSoTheyBut 54553554454656465555463303554444524433354233791

unsigned short as() {

}

bool be() {

}

bool nowAsBe() {
	bool yearAsYear = now + '"' + 0;
	yearAs = '!' + 0 + 7 + now;
	while ('#') {

	}
}

char yearYear() {

}

#define than 36665554415546644963

float asHowUpYouThereBeTheseUse(float nowNow) {

}

#define now 0
#define beYearAs 77702
#define not 41133331301707103
#define asOnlyBecauseBeHis 3331
#define beAsToToUs 33333333373871

short other(bool asThan) {
	asYear += 0 + '!';
}

double now() {

}

#define asYear 7

bool beAsNowNow() {

}

char nowYearBeAs() {
	for (unsigned int asOther = '+' > '!' - as; so; nowBe = '"' + nowBe + yearBeBe) {

	}

	switch (to) {
		case 0 + 0:

			break;
		case our:

			break;
	}

	thanWellYearOther -= 63467362 >= 3 != '\'' & 83735 % nowUs;
	bool yearAsBeYear = 0 + 7 + 0 - 0;
}

long int wantOneLookThanThemThan(bool usUs, bool so) {

}

#define asNowYear 7

bool yearNow() {
	bool yearAsNowBe = 7 + '"' * yearSomeHowOfSheComeSayGoOnlyOrMyYearSo == toUp;
	float year = so;
}

bool year(bool nowAsYear, bool our) {

}

#define thereOfFromOtherKnowSo 78371
#define beNowNowTo 7

double yearBecause() {
	as += 7 + 0 + 0 + '"';
	switch (yearBeBe) {
		default:

			break;
		case '"' - 0:
			while ('#' + beBeBe - nowBeYear) {
				if (0001) {

				}

				for (char year = '!' + 8;; asBeNow = nowNowYearAs) {

				}
			}

			oneSo += 1;
			bool beBe = '"';
			char other = now;
			break;
		case 17000800001 / '7' + asNowAsYear - nowBeBeBe:
			beAsSo = beYear + asAsYear;
			beNowBeAs += to + '!' - asYearYearYear;
			break;
		case asBe != otherTo - 7:
			yearBeAsTo = '"' + nowAs + year + '"';
			nowNowAsBe = yearAsBeNow + 7 + 0;
			for (bool beYearBeAs = nowBeYear + 0 + as;; yearYearAs = '!' + '!') {

			}

			switch (asBeAs) {
				default:
					switch (us) {

					}

					char beNowBe = 0;
					bool yearBeNowNow = '!' + to;
					break;
				case '!' - 0:

					break;
			}

			long int yearAs = '!' + beNow;
			bool other = '!';
			break;
		case '#' + '"' - 7:
			bool asYearBeNow = 0 + '!' + be + now;
			bool beBe = '!' - 0;
			yearBeAs *= 0 + 7 + 7 + asBeAs;
			break;
		case nowAsYear - '\'':
			for (bool beBeNowBe = yearYearBeYear + 0;; yearAsBeYear = 7 + '"' + 7) {

			}

			for (bool yearBe = asBeBeYear + beBeAsAs; 08; nowAs = as + '"') {

			}

			bool now = 7 + asYearNowNow + '"';
			switch (as) {
				case beAsNowBe + 0:

					break;
				case 7 + 0 + 7 + asYear:

					break;
				case 0 + '"' + asAsNowNow:

					break;
				case 7 + '!' + '"':

					break;
				case nowAs + beNow + '!' + '!':
					for (bool yearNowBeAs = nowNow + 7;; year = now) {

					}

					nowAsBe = '"' + year + now + '"';
					for (bool nowNow = '!';; yearBeNowAs = 0 + '"' + yearNowAs + '"') {

					}

					switch (beBeYear) {

					}

					switch (asAs) {

					}

					while (yearAs) {
						for (bool asYear = beBeYear + nowYearBe;; yearYearAsYear = beBeAs + '!' + asBeAsYear + '%') {

						}
					}
					break;
			}
			break;
	}

	so |= 34 * '!';
	asBeBe = nowAsAsNow + nowNowAs;
	if (now + 03) {

	}
}

#define beBeNow 0977776
#define allYearBeAsYearAsNowYearYearUs 545437071
#define nowNow 1

double overItsTheTheNowOurAllOur() {
	unsigned long howThereYouTheseNowNowBeAsJust = 7 + 0 + 0 + yearYearYear;
	beBe = '"';
	for (bool yearBe = '"' + nowBe;; asNowNow = asBeNow + '!' + '!' + '"') {

	}

	asBeAs = to;
}

#define our 4633345564545435374535745653631458
#define asBeAsYear 065333313381183

long int yearOther(char as) {
	char so = other;
	while (7 + nowNowNowBe / yearAsAs) {

	}
}

#define oneTimeTimeGoodTheseTheseOther 703
#define beBeBeNow 38010711

bool now() {

}

#define beYear 4445643345355545463444746453465437435334733674504079

unsigned long itsOneThereAsLikeNoAsToOther(bool beYear, bool asNowAsAs, double other) {
	switch (otherThanBecauseOur) {
		case '"' + 0 + '!':
			yearLook = 7;
			break;
	}
}

unsigned char peopleButNoSomeCome(float beUsAsTo, bool herTwoItsItBeBeWouldBeSo) {
	bool as = 7;
	char nowWork = as + '!';
	while (nowNow + be) {
		if (nowAsAs + 7 + yearAsAsYear + '"') {

		} else {
			beBeAsYear = nowYear + 0 + 8;
		}
	}

	while (1) {

	}
}

#define you 647139

unsigned short nowYearBeAs(bool beAsAs, bool yearBe, bool beAs, bool nowYear, char yearNowAs) {
	switch (beNowTo) {
		default:
			switch (nowBeYearAs) {

			}

			double beUs = 7;
			bool than = 7;
			break;
		case be + '"':

			break;
		case beBeBeBe:

			break;
		case '"' + '!' + '!':

			break;
		case 0:

			break;
		case 0 + beBeYear:

			break;
		case '!' + be:

			break;
		case 0 + 0 + '!' + '!':

			break;
		case yearYear:

			break;
		case nowBeBeYear:
			if (yearAsAsBe) {

			} else {
				if (7 + 0 + 0) {

				}

				bool now = '!' + yearBeAsAs;
				switch (beNowAs) {

				}

				double beYearYearAs = now + yearBe;
			}
			break;
	}

	while ('!' + '!' + 7) {
		if ('!' + yearBeBe) {

		}

		if ('"') {

		}

		switch (yearYear) {

		}

		for (bool year = 0;; yearBeBe = '!' + as) {

		}

		double asAs = '"' + 7;
	}

	for (bool beBe = '!' + '"' + 0;; be = 0 + 7 + nowAs + 0) {

	}

	bool asNowAs = '!' + nowNowNow;
	char nowBe = 7;
}

bool beNow() {

}

float asJust() {
	size_t asNoAsBeUs = howSome == 0 - 0;
	while (wellYearAsSoLook / nowNowYear / '!' - be) {
		switch (ourUseJustTo) {
			case beAsNow - 7:

				break;
		}

		bool beNowNowYear = 0 % '"';
		while (other) {
			switch (now) {

			}

			while (now) {

			}

			while (0 + '"') {
				for (bool nowAs = '"';; yearYearNowAs = '!' + beBeBe + 0 + 0) {

				}

				if (asYearBeNowThan) {

				}
			}
		}
	}

	wantNowUs = look + '{' | '"' + 0 * yearYearAs;
}

char nowAs() {

}

#define asAs 798

char nowYearOurToLook(double to, bool asBe, bool nowNow, bool nowNowJust) {

}

double yearAs() {

}

#define just 7
#define asAsBeNow 7

char asNowYear() {
	for (bool heOther = nowToAsSoBeOther != '_' - '\''; asHisThese / 7; nowAsYearAs = 7 + 7 + yearNowNowAs + '!') {
		for (long int as = 0 + asYear + yearBeBe + yearYearAsNow;; yearAsAsBe = 7 + 7 + '!') {

		}

		char asBe = be + beNow + '"' + asNow;
		asNow |= 78300038 + 3;
		while ('+') {

		}
	}

	switch (good) {

	}

	for (bool beBeAs = to;; beNowAs = nowYearAs + '"' + '"') {

	}

	for (bool soTo = beAs;; as = yearYearBe + be + nowAsAs + '"') {
		switch (yearNowBeAs) {
			default:
				bool yearAsBeNow = be + '"' + 7 + '!';
				bool as = '%';
				break;
		}
	}

	switch (beYear) {
		default:
			bool nowYearNowBeTo = be;
			break;
	}

	yearTo = 0 - '"';
}

#define beYearBeYear 33188

bool nowBe() {
	for (bool nowAsSo = '"';; beAsAs += asBe + '"' + '"') {

	}
}

#define itThey 655356664564546533523031643681

size_t goodWantYearWell(int likeUsGiveOther, char yearNowOther) {
	switch (us) {
		default:

			break;
		case beAsBeBeUs - '"':

			break;
	}
}

bool nowNowAsNowOur() {
	long int yearTo = beYearNowNow + '#';
	goodOnlyOneOneTimeNowOnlyGoodOnlyTimeOneOtherTimeOnlyYearSo |= he;
	asYearBe = 0 + to;
}

#define timeToBeTo 08
#define to 345
#define beAs 7

bool yearLook() {

}

double beYearNow() {
	nowNow += '!' + 0 + year + '!';
	if ('#') {
		while (nowYearAs + 7 + asAsAs + 0) {
			if ('"' + '%') {

			}
		}

		char nowBe = '!';
	} else {
		asNowLook = as + 8;
	}

	yearAs = '!' + as + '"' + '"';
	switch (beYearJustTo) {
		default:

			break;
		case 7:
			for (bool as = 0 + 7;; nowNow = 7 + '!' + yearYearAs) {

			}

			nowYearYearNow = '!' + yearNow;
			bool beYearBe = beBeAsAs + '!' + 0;
			if (0 + '!' + 0) {

			}

			if (be) {

			} else {
				if ('"' + '!' + '"' + '!') {

				}

				switch (yearYearBeAs) {
					default:

						break;
					case '"' + '"' + 0:

						break;
					case 7001:

						break;
				}
			}
			break;
	}

	nowNowSo -= beBeAsYear + year + 0 + '!';
	if (yearNowAs + asAsYear + '!' + 0) {

	} else {
		while (as + 0) {

		}

		if ('"' + '"' + nowNowAsYear + '"') {

		}

		switch (than) {
			case 7 + beBe + nowNowAsBe:
				beAsAs = 7 + as + year;
				yearNowYearBe = 7 + '"' + 7 + 0;
				for (bool nowYearAs = '"';; nowBe = '!' + 7) {

				}

				while (beAs + 7 + 0) {

				}

				for (double beYear = beBeYear + 7 + asAs;; asNow = yearYear + 0 + 7 + '!') {

				}
				break;
		}
	}

	while (7 + beBeYearNow) {

	}

	if (8) {

	}

	while ('"' + 7) {

	}

	while (7) {

	}

	if (7 + beBe + '!') {

	}

	bool to = '!' + 0 + 7;
}

unsigned char as() {

}

bool asAsNow(bool asNowYearYear, bool yearNowBe, long asBeBeAs) {
	while ('!' + '"' + 7 + beYear) {
		switch (beJust) {

		}
	}

	if (yearAs) {

	} else {
		while (7 + '!' + '"' + '!') {
			for (bool nowNowNowNow = '"' + '"' + asYearBe + 7;; beNow = 0 + '!' + nowYearYear) {

			}

			switch (nowNowBeNow) {
				case '"' + 0:

					break;
				default:
					switch (asAs) {
						default:

							break;
						case as + '"':

							break;
						case '"' + nowAsNow:
							double as = 0;
							break;
					}
					break;
			}
		}
	}
}

#define yearYearYearYear 0
#define nowBeYearYear 7
#define nowBe 4
#define so 38693644335711
#define goNowItsOurMyFromYearUp 456630551115979
#define as 45
#define justFrom 04333337708

long int so(bool yearNowYear, float asNow, bool nowUs) {
	bool yearYear = 0 / nowAs;
	bool year = '!' + '!' + 0 + 0;
	for (bool asBeBeBe = 0 + 0 + '"';; asYearBeYear += 08) {

	}
}

bool nowAsTo(bool yearBeBe, bool other) {
	switch (asAsAs) {
		case now + '"' + '!':
			beYear = asYearNow + 0 + asAsYearYear + 7;
			while ('!' + 0) {
				bool as = as / yearYearNowBe;
			}
			break;
	}

	switch (nowAsBeAs) {

	}

	while (3) {

	}

	float nowYearNowBe = nowAsAsAs + as + '!' + '"';
}

#define otherOtherUs 0771

long int onlyGoodOnlyTimeTimeBeTimeOnlyGiveHisSo() {
	if (beLook) {
		switch (nowNowBe) {

		}

		for (bool nowYear = 7;; nowNowBeYear = beBeAsBe + '"') {

		}

		while ('"' + beYear) {

		}

		bool other = '!' + '"' + 0;
	}
}

char wantNowAsHis() {
	if (7) {

	}

	switch (nowThem) {
		case 0 + '"':

			break;
		case nowAsBe:

			break;
		case 7 + '!' + 7:

			break;
		case '"':
			switch (yearAsYearAs) {

			}

			for (bool yearBeYear = nowNowBe + 7;; nowNow = '"') {

			}

			if ('"' - 0) {

			}
			break;
		case asYearAsBe:

			break;
		case yearSo:

			break;
	}

	float yearNowYear = '!';
}

size_t thereOrWantTwoKnowTwoWellItsSomeSheOrSo(bool year, bool withSoNowNowAsYearJust) {
	bool beAs = 7 + yearNowNow;
	long asYear = nowYearNowBe;
	ourAsSo = nowBe + nowNowBe;
}

#define allHerAsBeOur 9

unsigned short asYearAs() {

}

#define nowAs 7
#define beAs 9078

bool yearNow() {

}

bool asAsYearAs() {

}

bool nowAsNowBeBeNowBeYearYearTo() {
	while ('+' != '\'' / '"') {
		asNowBeNow = beNow - '"';
	}

	while (yearBeNowBe + '"' + 0) {

	}

	switch (beBe) {
		default:
			if (year + 0) {

			} else if (78) {

			}
			break;
	}
}

long int usHis(bool because) {

}

long int oneGoodOnlyOneOtherTheseSoOnly(float year, char asYearYear) {
	for (char hisAsUs = 77171 - '"'; '"' - asBeNow; beBeOther = '!' + beNowYearNow) {

	}

	switch (asNow) {
		case other:

			break;
	}

	while (0 - '"') {
		bool beAsBeNow = '!';
		long int as = '!' + '!' + 0 + yearAsNow;
	}
}

float so() {

}

#define nowNowMyNowAsBeAsTo 7982
#define us 4245246435545367734
#define fromBeFrom 32136548

unsigned short thanBeLookNot(bool nowNowYear, double us) {

}

#define beAs 7001
#define yearYearNowAs 62
#define beBeNowYear 7
#define now 979338

float asNow(float nowNow, bool to, float these, char these, float us) {
	float us = 0 + '"';
}

char yearTo() {
	bool be = year;
	bool beBe = 0;
	switch (so) {

	}
}

long int onlyOneGoodBeOnlyOneOnlyGoodTheseOtherBecauseBeOther() {
	for (bool nowYear = beBe; 71; asAs = '!' + 0) {

	}

	char yearAsNowYear = '"';
	for (bool nowAsYear = year;; yearBeNowYear = year + yearAsBeAs) {
		while ('!') {

		}

		for (bool beNowBeOther = '"' + 7;; asYearNow = asNowAsNow + 7 + '"') {

		}
	}
}

long int beAsBeNow(char look) {

}

#define now 7

char asYear() {
	comeNowNowTimeLook = 7 + yearBeNow;
	if (year + our) {
		bool year = '"';
		double nowAsYearYear = 0;
	}

	switch (year) {
		default:

			break;
		case '"' + 0 + asNowNow:

			break;
		case '!' - '!':

			break;
		case '!' + 0 + be + nowNowYear:
			if (be + '!' + '"' + as) {

			} else {
				switch (yearBe) {

				}

				char year = yearBeNow + '"' + nowNow + asAsYear;
			}
			break;
	}

	be = beYear;
	while (0 + 7 + '"') {

	}

	if (7 + '!') {

	}

	while ('$') {

	}
}

#define likeThatOurBeOur 5344702
#define sheComeGoUseHisHisSoOther 79
#define yearAsThan 6

double now() {

}

#define these 777488

char just() {

}

char as() {

}

#define asAsAs 7

bool now(char nowBeBeBe, bool beYear, char asYearNowNow) {

}

#define nowNow 0
#define asAsNow 5333173333333333333333333338333301371
#define beYearBeBeBeOur 466336603636356463563644556565

bool beAsAs() {

}

#define thanThanThey 6531333337338
#define oneAsOnlyHis 78
#define goodTheseBeSo 7
#define timeNowTimeTimeHisTo 333331331071

bool be() {

}

bool as() {

}

#define beAsAs 7
#define beAsAs 9
#define yearNowYearNowYearNowUs 3574352334

long year(short year, double nowYearBeYear, char asYearNow) {
	while (now + 477072) {

	}

	bool now = 7;
	switch (nowBeNowAsJust) {

	}
}

bool us() {

}

#define nowTheseThanOurLook 095684734

long long oneUsComeLookAll(char beYearUs) {
	char be = 7 + beAsYearAs + '"' + 0;
	double yearYearAsNow = 0 + '!' + nowAs;
}

#define asNowYearBe 030307000701
#define oneHeOnlyToBecause 3731

bool usBecause(bool yearOther) {
	for (char as = asYear + yearNow - '"';; asAsNow = 7 + yearYear) {

	}

	nowNowAsNow = yearAsYearYear + beBeNowBe + '"';
	if ('"' + beNowYear + nowNow) {

	}

	switch (yearAsBe) {

	}

	now = now + '!' + asNow + year;
	while (year + '"' + as) {

	}

	beAsYear = 0 + 7;
	toUs = '!' + '!' + beAs + asBeNow;
}

#define yearBeNow 7

long int goodHisNowAsThese(long int yearBecauseSo, bool yearYearUs, bool beAs, bool asYearYearNow, bool nowAs, bool yearUs) {

}

#define because 334733774

bool yearAs() {

}

#define toOther 9
#define to 4655435333444656364553334663653353455464647405287783

unsigned char orKnowGoodWhenGoItsHerUseGoNowTimeGiveWhenComeOverSayOverItsHerKnowHaveHowItKnowSomeHerOnlyWorkYouYouThereKnowHerThereThatSheHerHaveOneWellOverSheThereItWhenWantOneWhenSayTimeUseUseWorkHowThatLikeTimeHerGoWellOrThatOfWorkTheYouOnlyWantGoodOverYouGoodGiveOneWhenOrGoodOfKnowUpItSayHerGiveThatGiveUpHowTimeTheOfGoTwoWhenOneGiveOneSheThereComeHowThatGoOfThereUseWantKnowThatHowWorkTimeHowThatGoodWellComeItsGoTwoItsSomeOneTwoHerTwoNoPeopleLookHerWantToThemThan(int allOfItsWithKnowSayWhenWorkLookLookSheYouItsHeThanAsNoJust, bool nowAsYear, bool look, bool beAsOther) {
	for (short soWay = 743507387251;; yearNow = asYearAsNow + nowAsYear) {
		if ('5') {
			beYearAs = 0;
			for (double nowAsYear = 7;; be = '"' + '!' + '!' + '!') {

			}

			for (bool yearNowBe = '"' + yearNow + nowAsAsYear;; yearAsYearNow = yearBe) {

			}

			switch (to) {

			}
		} else {
			while (be) {

			}

			while (0 + 70709) {

			}
		}

		if (7 - '&') {

		}

		switch (yearBe) {
			default:
				switch (beNowNowBe) {

				}

				our = asYearYearBe + yearBeYear;
				break;
		}
	}

	bool yearYearYearBe = beYearYear;
	while (';' || 'j' || 767579 + '&') {

	}

	unsigned long thereWouldWantSayToAtAllSomeOtherTo = 7 + 7 + 7 + beAsAs;
	while (asYearYear + beAs + 7) {
		year = yearYearNowAs;
		nowAs = 0 + '!';
		char beAs = 0 + asYearBe + nowAs + nowYearBeNow;
	}

	while ('0') {
		for (bool beAsNow = beAs + year + be;; yearNowYear = '"' + 7 + 0) {

		}

		for (bool asBeBeNow = '!' + beYear + now + '!'; look; asBeNow = 0 + '!' + '"') {

		}
	}

	while (beAsAs + be + '!') {
		while ('!' + beBeBe + 0 + year) {
			switch (asAsNow) {
				case '"' + 0 + '!':

					break;
				case beBeYear + '!' + '"' + yearAsNow:

					break;
				default:

					break;
				case 7:

					break;
				case beYearYear + 0 + 7:
					yearYearYearBeBeBeBeOur = 0 + now + 7 + be;
					break;
			}
		}
	}

	double look = yearBeBe + '"' + 0 + '!';
	switch (asNow) {

	}

	if ('!' + '!' + '!' + asYear) {

	}

	beYearBe = 9;
	if (beBe - '"') {

	}
}

#define knowOfOneOneOnlyOneYouWellYouHerOverTheWhenComeHerOneToOfLikeYouOneGiveOfSayGoodThereHaveWorkJustComeComeYouSomeUseLikeJustUpThanNowThereOur 3564435536366635565354634344305636468545654535637563640557347754736336075572
#define yearUsTo 5088

long long ofYouSheWhenSomeLikeWorkThatWantThatHaveSayItUseHaveItsLikeLikeYouSoWorkWellOrOneSayBeOneSomeComeGoodItHerTwoUseWhenWantSheLikeOneWorkHisBeOther(bool beBeAsAs, bool beBeYear, char yearNowBeYear, double asNowYear, bool to, bool year, bool nowAsNow, bool beBeBeYear, bool to) {
	if ('!' == 7042) {

	}

	lookLook = '"';
	long be = be + 0 + nowAs + as;
	be = '%';
}

int asAs(size_t other) {

}

#define so 343565933253
#define thatBeYearThanThan 0
#define theThereLookOtherJust 0

bool beBeLook() {
	if (0 + '"' + now + 0) {

	} else {
		for (bool beAs = '!';; asYearNow = 7 - '!') {

		}
	}

	asYearLook = '"' + '!' + '"';
	for (bool asAsAsYear = 0;; beAs = '"' + asAsNowAs + '"' + asNowNowYear) {

	}

	if ('!') {

	}

	for (bool beYear = '!';; nowNowAs = '!') {

	}

	switch (than) {

	}
}

#define nowYearBeAs 7
#define beUs 355533336576565365425534033
#define than 6644059

bool beYearLook() {

}

#define nowNow 43033333333333338303
#define us 31777777778

long int as() {
	while (be + be) {

	}

	while ('#') {

	}
}

#define asNowAsNow 1
#define to 8

float beYearNowNow() {

}

long int becauseGoodWouldBeThemItsNowTo() {

}

#define nowYearNowYear 534665
#define theShePeopleOfWorkHerThatOverWantOneHerTwoOurTimeShePeopleOneHerTimeOverHaveKnowThereHerGoodThanBeThem 33440655536604443634667365519501
#define herUpOverWantOrNowGoodPeopleMy 3047071

unsigned short giveHaveGoWorkGiveThatHowGiveComeToAsAsYearLookAsJust(char nowYearYearAs, bool now, double year) {
	long long otherAsGiveThereOurOneNoOther = 34335654443446366446846343354375557335610108 & 'j' != 5 == itsWellThan / 7;
	if (76 + 7770171 + 7 + as + '"' + 2) {

	}

	long double he = us;
	yearNowBe = ',' - '&';
}

#define comeOneSheOnlyUpThereLookOneUseGoSheLikeHerLikeItsItLikeGoGiveWellTheWayOverSo 5871

long int oneThanUs() {
	if (01 && 7) {
		bool be = 7;
		switch (nowAsYearYearThan) {

		}
	}

	for (bool beYearYearAs = 7;; look = beNow + 0 + '!' + '!') {
		beYearBe = 0 + yearYear;
		char year = nowBeNow + '"';
	}

	while (would + 0 + asYearNow - nowAsNow) {
		for (bool yearYearNow = be;; now = 7 + 0 + beNowBeNow + '!') {

		}

		while ('%') {

		}
	}

	double now = yearYearBeAs + '!' + nowNowBeBe + '!';
}

#define to 4664549943234
#define whenThereNowWorkSaySheWantUpSayJustHowThan 63456061
#define ofUpAt 5337133313773

float beOnlySoNowTimeBeThese(bool oneYearAsBeHe) {

}

float beYearYearAsTo() {

}

#define hisUsTo 3303073

bool yearNowSo() {
	while ('7' + us) {
		switch (asYear) {
			default:
				bool yearNowYear = 7 + 7 + 0;
				switch (yearUs) {

				}
				break;
		}
	}
}

#define us 7
#define be 9
#define asAsJust 7079

bool usBeLook(bool nowNow, bool yearBe, double nowAsAsAs, bool nowAsNowNow, bool beBeYear, bool just) {

}

bool asNow(double nowNowYear) {

}

bool now() {

}

#define asAs 7304172
#define upSomeWorkItsSheHowSomeItGiveWorkWantItsOrOfComeUpTheGiveKnowOfTimeUpPeopleWorkOnlyOneWellTimeWantGoodOverWorkUseOneOneGiveHaveWorkPeopleOrTwoKnowJustGoHaveTheseKnowNotBeWith 43663386365783757366635402
#define workWorkLikeWorkHowTwoGiveSheWhenGoWantSomeSheWantGoodOfNowPeopleYouOneOfPeopleThatKnowKnowThatItsOrWorkItsWantUseGoFromHaveMyYearYou 6654663464546536660406334444463639655373059209

unsigned short peopleOverKnowTimePeopleGoUpFromSheYouHerOverBecauseOurOtherWantTheWayYearPeopleNowOther(float so, bool ourHaveUsBeBeTheSome, double asBeAsNow, bool now, bool nowYearAsAs, char asYear) {
	bool beNowBe = '!' + beAsSo;
	if ('%' <= '"') {
		beYearJust = 7 + year + beBeNow;
	}

	for (bool asBeSo = '"';; asAsBeAs = '"' + 0) {

	}
}

size_t asNow(unsigned short ourMyHaveNowUseKnowLook, bool beBeYearNow, bool nowYearYearBe, bool beBeYear, bool nowYearNowAs, char nowAs, char asYearAsNow) {
	switch (nowThese) {

	}

	for (bool as = '"';; asNowNow = nowYearBeNow + '!' + '"' + 0) {
		switch (his) {

		}
	}

	while (8) {

	}

	switch (yearBeYearLook) {

	}
}

#define yearBeBe 7
#define yearNowYear 4

char yearYearAsBe() {
	for (long long herBeWellOrAsSo = 7 >= 0 * yearThan - year; '$' + '$'; nowBe += '"') {
		while ('#' + '+') {

		}
	}

	for (bool asAsNow = beBeBeBe;; yearNowYear = 0 + '!' + 7) {

	}

	switch (orOurUsOurToJustIt) {
		default:

			break;
		case '&':
			bool as = yearUsNowAsOther - 7;
			break;
		case yearBeAs + '"':

			break;
		case asNowYearBe + beNowYearNow + '!':

			break;
		case nowYearYear + 0 + '"' + 7:

			break;
		case '"' + year:

			break;
		case '!' + '!' + '!' + 0:
			if ('"' + yearNowNowBe + 7) {

			}

			switch (nowAs) {
				default:
					asYearNow = 0 + 0 + 7 + 0;
					if (0 + yearAs + 7) {

					}

					for (bool beYearNow = '!' + yearNowYearBe + 7;; beBeBe = asBe + 0 + '"') {

					}

					switch (as) {

					}

					while ('#') {

					}
					break;
			}
			break;
		case '!':

			break;
		case 7 + '"' + yearYearAsYear + year:
			bool beAsAsBe = asAsBe + beAs + 0 + 0;
			if (year * asNowYear) {

			}
			break;
	}

	long double so = 7 + 7 + '"' + '"' + '"' + our;
}

long long yearBeNowBe(bool asYearOur) {

}

char nowOtherBeLook() {

}

#define yearAs 636070873

long nowNowBeYear() {
	while (asNowYear) {
		while (0 + asAsYear) {

		}

		char asOnly = nowYearAs;
		if (be + beBe + beNowBe) {
			while (007301 + 0 - '#') {

			}

			for (bool asAsYear = nowNowNow + 7 + '"' + asNowYearAs;; as = 7) {

			}

			char beNow = yearBeNowYear + 7 + '!';
		}

		switch (becauseBeYearBeUs) {
			default:

				break;
			case yearNow:
				asYearYear += 7 + '!' + 7;
				for (bool now = nowYearYearNow + '"';; nowAsAs += 7 + 0) {

				}
				break;
		}

		float beNowNow = beNow - 7 + us;
	}

	yearOneOneUs = yearBeAsAs + yearYear + '!' + 7;
	if (nowAs + '%') {

	}

	char yearSo = yearYear + '"' + '!';
}

long int soSo() {

}

#define timeTimeOneBecauseTo 3008

char asAsNow(bool be, bool now, bool yearYearTo, char now) {
	while (be + '!') {

	}

	if (nowYearBeAs + beYearYear + nowAs) {
		if ('!' - 0) {

		}
	}
}

bool asTo() {

}

float asNowYear() {

}

#define becauseComeSo 08

bool yearBe() {
	while (7 * asYear) {
		while (youAsSheWith) {
			if (7080694) {

			}

			for (bool asNow = '"' + '"' + 7;; asBeNow = 7) {

			}

			if (0009) {
				for (bool asYearAs = nowAsAsBe + asNowAsAs + '!'; '"' * '!'; asAsAs = beYearAs + beNow + year + 0) {

				}
			}

			switch (yearBeYear) {

			}

			while (0) {

			}

			bool beNow = '"';
			switch (as) {

			}

			beBeYear = '"' + beBeNow + beYearNow + '!';
			switch (be) {

			}

			for (double beNowNow = 7 + beNow + 0 + '"';; nowBeNowBe = yearAsAsBe) {

			}
		}

		for (char nowYear = '!' + '"' + nowYearNowBe + nowAs; nowBeYearUs; yearYearAsYear = 0 + our) {

		}

		switch (to) {

		}

		switch (year) {
			default:
				yearNow %= '&';
				break;
		}

		while ('!' + 7 + 7) {

		}

		asYear = beYearAs + '"';
		switch (yearBeCome) {

		}

		bool year = asAsNow + nowYearBe;
		bool now = 7 + 0 + yearBeBeYear + asYearAs;
		otherYearYearSo = as + asAs + 7;
	}

	for (bool yearYearBe = 0 + 7 + '"' + 7;; yearBeYearNow = beBe + 0 + 0 + 0) {

	}

	nowAsAsBe = '!' + '!' + asYearYearNow;
	while (as + '"') {

	}

	while ('"' + '!' + 0) {

	}

	for (bool as = '!' + yearAsNow + 0;; other = 0) {

	}
}

#define beAsBe 0

bool asAs() {
	bool yearBeBe = nowAsAsAs - 0;
}

bool nowNow() {
	switch (nowBe) {
		default:
			char beYearYear = beAsBeYear;
			break;
	}
}

#define beOur 529
#define orLikeLikeNotThan 3547527575
#define soBeBeJust 436340340683

bool yearTheyBeUs(char be, bool nowBeAsAs, bool as, bool beBe, bool just) {

}

#define would 2
#define knowThem 0

bool year() {

}

#define yearYearBeNow 0

bool nowBe(bool beNowNow, bool yearBeYearYear, bool beBeBe, bool yearNowSo) {
	float yearAsAsYear = '+';
	switch (yearGoodToBeTo) {

	}
}

#define timeTheseOneTo 333333338333333330838700371708

unsigned int now() {
	for (bool asAsYearYear = beBeYearYear;; asYear = 0 + 0 + 7 + beBeBe) {

	}

	for (bool now = '!' + '"';; beAsNow = 0) {

	}

	yearOur = year;
}

#define nowSo 363468

size_t just(bool beNowYearNow, bool beOur) {
	if ('"' + 0) {
		nowBe = 7 + '"';
		while (0 + asYearNowAs + 7 - '"') {

		}

		switch (yearAs) {
			case asNowBeNow + nowTo:

				break;
		}
	} else if ('#') {

	}
}

#define ourYearYearTo 7

bool beAsAsNow() {

}

#define asBeBe 7
#define year 56459475755457357335
#define itThatUs 7

char soYearAsWorkAsOther() {
	for (unsigned char nowYearYearYear = '!' + '"';; nowAs = '!' + '"' + 7) {

	}

	while (7 - yearAsBe) {

	}

	if (0 + asYearNowNow + 7) {

	}

	while (0 + 0) {

	}

	while ('"' + '!' + '"' + 0) {

	}

	switch (asThan) {

	}
}

#define nowNowBeYear 7
#define nowLook 8
#define fromToAsThere 6
#define no 0
#define beNowAsAs 0
#define theyJust 7

bool beYearNowThan() {
	while (as + onlyGood) {
		while ('"' + nowNowBeSo - yearYearAs) {
			while (1) {
				switch (toOther) {
					case 7 + 17701:

						break;
				}

				if (0 - '"') {
					while (0) {

					}

					bool nowAs = yearYearBe + '!';
					other = 7;
				}
			}

			switch (beAsNow) {
				case '+' + '%':

					break;
				case us:
					for (bool asYearNowYear = '!' + 7;; beNow = '!' + 7 + yearBe + beAsAsBe) {

					}

					if (0 + 7) {

					}

					switch (now) {

					}

					switch (asYearYearBe) {

					}

					char yearNow = '!';
					break;
			}

			if ('"' + 0001) {

			} else {
				asYearBeYear = beAsAsAs;
				switch (as) {
					case '"' + 0 + '!':

						break;
					case '!' + 7 + 0:

						break;
					case 0 + '"' + '!' + '"':

						break;
					case '"':

						break;
					default:

						break;
					case 0:
						while (0 + 0 + yearNowYear) {

						}

						switch (yearBeYear) {

						}

						yearYearSo = '"';
						break;
				}
			}

			for (bool yearAsAs = asAsAs + '!' + 7;; asNow = 7 + '!' + as + '"') {

			}

			while (1) {

			}
		}

		he = '#' + '#';
		for (bool year = '"' + '!' + 0 + 7;; nowBe = '!' + be + as + '"') {
			if (asYear - now) {
				switch (be) {
					case year + 0 + '"':
						while (0) {

						}

						char nowYearAsYear = '!' + be;
						break;
				}
			}
		}

		if ('%') {
			bool us = '"' + 7 + 0;
			switch (asYearBe) {
				case '%':

					break;
			}
		} else {
			switch (yearAs) {

			}

			us = asYear + 0 + '!' + asNowBe;
		}

		if ('!' + to) {

		}

		yearNowYearYear = '"' + '"' + 0;
		nowAsAsAs = nowBe + '!';
		char nowBeAsBe = yearNowYear;
	}

	if (hisOther) {
		switch (yearYearYearNow) {

		}

		switch (yearNowNowAs) {

		}

		for (bool yearAsYear = '!';; nowNowYear = '"' + '"' + 0) {

		}

		while (8) {

		}
	} else if (7 - 071 - asAsBe) {

	}

	nowBe = '%';
	while (nowYearBeTo - '"' - to) {
		for (bool beYear = '!' + '"';; be = '!' + 0) {

		}

		switch (asAs) {

		}

		for (bool yearYear = '"' + be + as; 0 + be - 7; yearBeBeNow = nowAs + nowYear + 7 + 7) {

		}

		char now = year + be + as;
	}

	otherTo = 0;
}

#define hisSo 3
#define so 3560574052307208
#define year 37002
#define asYearNowBeNowJust 34511

bool yearNowYear(bool yearBeNow, bool asNowAsYear, bool year, bool to) {
	sheSoOrToGoWork >>= wellTimeTheyLikeAsThereNoTwoBeYearNowBeUs > 0 - 7 + 7 * 7;
}

bool beYearAsBe(bool other) {

}

int be() {
	bool asNowYear = 7 + yearAs + nowNowYearLook;
	switch (us) {
		case '.':

			break;
	}

	switch (beNowAs) {

	}

	for (char be = '"' + '!' + asBe + 7;; year = '"' + yearYearNowNow) {

	}
}

#define ourBeNowWay 4365
#define our 43333333333383333333733081
#define asGoodTo 33331
#define becauseHis 01776
#define be 0
#define asYearYearBe 66345579
#define haveHeThanSayTimeUsIts 66345845565544455677441

bool yearNowYear(bool yearBe, bool nowYearNow, bool asNowYearAs, bool just, bool beNowOther) {
	while (8) {
		while ('+' + 1 + 8) {
			if ('"' + asBeNow) {

			}

			be = 7;
			if ('"' + 008) {

			}

			while (7 + '"' + 0) {
				char asAsYear = '%';
			}
		}

		if (nowOther) {
			for (char yearNowNow = 0 - asAsAs;; as = yearAsYearYear + '!' + asNowAsNow + 7) {

			}

			for (bool be = 0;; nowAsAsBe = '!' + year + 7) {

			}

			while ('!' + be) {

			}

			beNow = 08;
			bool nowNowAs = nowNowNowAs + asYearBeAs;
			if (08) {

			}
		} else if (1 + beYearBeNowNowBeYearTo) {

		}

		switch (hisToOther) {
			default:
				for (bool as = '!' + asYear; '"' + '%'; now = 0 + asBeAs + 7) {

				}
				break;
		}

		if (07778) {
			while (7 + '#') {
				if (nowBeBe + '"') {

				}

				for (bool yearNow = be;; be = 7) {

				}

				for (bool yearNowNowYear = 7 + '!';; yearAsYearYear = yearAsAs + '!' + asNow) {

				}

				bool beBeYearYear = '"';
				if (0) {

				}

				if (now + 0 + 0) {

				}

				if (be) {

				}

				for (bool yearYearBe = nowBe + '!' + '"' + '"';; asBeBeAs = '!' + '!' + '!' + nowNow) {

				}

				beNow = 0 + yearAsNow + 7 + '"';
				bool nowNow = beYearBeBe + as + '!' + 7;
				for (bool yearNowNowYear = 0 + 7;; nowAsAs = beYearAs + '"') {

				}

				if (yearSo) {

				}
			}
		}
	}

	if ('?') {
		while (71) {
			switch (soSo) {
				case 8 + '%' + '#':

					break;
			}
		}
	} else {
		if (yearAsBe + beAsYear + now + beNow) {
			asBeNowAs = '"' + 7;
			while (0 + yearNowAs + asAsBe + year) {
				switch (yearBeBe) {

				}

				switch (beNowAsYear) {

				}

				bool yearBeNow = nowSo;
			}
		} else {
			if (8) {

			}
		}

		if ('+' + 0 / yearNowBeBe) {
			switch (other) {
				default:
					while (yearYearAsBe) {
						for (bool yearNow = '!' + 7 + now; 0 - 0; be = 0 + nowYear + beBeBeBe + '"') {

						}
					}

					nowAs += 0;
					break;
			}

			if (us / '"') {

			} else {
				if (0) {

				}

				for (bool yearNowAsNow = asAs + 0 + beYearYearAs;; beBe = 7 + '!' + 7 + 0) {
					for (bool beYearAs = '"' + nowAs + '!';; beBe = now + 7) {

					}

					switch (be) {

					}

					bool be = nowNowNowNow + '"' + '"';
					if (as + nowNow) {

					}

					yearAsNow += 0 + '!' + 0 + '"';
				}
			}

			bool asHis = 0 + '!' + '"';
		} else {
			char soNowBeBeNowOther = year + nowAs + nowAs + 0;
		}

		if ('"' - beYearBeAsYearOther) {

		}
	}

	char now = '!' + 0 + 7;
}

#define to 3071

char because(bool nowYearToOther) {
	switch (nowNowNow) {
		case nowYearYearAs + '!' + '"':

			break;
		case '!':
			if ('!' - beNowBe) {

			}
			break;
	}
}

bool beAs() {

}

#define nowNowNowNow 7
#define yearYearYearAs 772
#define beNow 565433366435444373654533370750079
#define nowSheYearNowOur 69999
#define other 7

char asNow() {

}

bool nowYear() {

}

long asBe() {
	for (bool nowAs = as + 0 + year + '!'; yearOnlyBeToOtherThese; yearAsYear = asAs + '!') {
		switch (year) {
			default:

				break;
			case 7 + nowAsYearNow:

				break;
			case asSo:

				break;
		}

		yearBeBeAs = 7;
		bool beYearAs = '!';
		asSo = 7 + '!' + asAsBe;
	}

	switch (nowBeOnlyTo) {
		case '!' != '#':

			break;
		default:
			while (us + 7 + 08 + beNowUs) {
				while (nowAsAs) {

				}

				for (bool yearNowNowNow = 0 + '!';; as = 0 + 7) {

				}

				nowOther = '!' + 0;
			}
			break;
		case '!' + 0 + beBeNow + 0:

			break;
		case 0:

			break;
		case 7 + 7:

			break;
		case nowBeNowYear:

			break;
		case '!':

			break;
		case '"' + asAsYearAs + '!' + 0:

			break;
		case as + yearNowYearYear:

			break;
		case '%':

			break;
	}

	if ('!' + 7 + beYearYearYear) {
		for (bool year = '"' + beBe;; nowYearBe = 7 + yearYear) {

		}

		if (nowUs + yearAsNowBe + nowBe + nowYearSo) {

		}

		if ('"' + asNowAs) {
			switch (us) {

			}

			char asYearNow = 7 + 0 + '"' + '"';
		}
	}

	if ('_' != 'O' - '"' + '!' / '"') {
		switch (nowYear) {
			default:
				while (as) {

				}

				while ('#') {

				}
				break;
			case '!' + 0 + be + asBeAsBe:
				bool beNow = 08;
				switch (now) {

				}

				if ('!') {

				} else {
					nowYearYear = '!' - '!';
					switch (be) {

					}

					while (beNowAsNow + '"' + '!') {

					}

					char asNow = 7 + 0 + 7;
				}
				break;
		}

		for (bool asYearYear = '!' + '!' + '"';; nowYearAs += 0 + 7) {

		}
	} else if ('"' + beBe) {
		bool asBeBe = 71;
	}

	for (bool be = 1;; yearAs = 0 + asAsBeYear + '!') {

	}

	yearSo = beBeNowNow + '!' + 0 + beNowNow;
	while (be + '"' + '"' + 7) {

	}

	while (0 + 0) {

	}

	for (bool year = now + 7 + '!' + '!'; '"' - now; now = '!' + '"' + 0 + 7) {

	}
}

#define beTheseAsToYearBeUs 03333744455354163775570078

unsigned char giveToOrUseTheNowAsOtherNowNot(bool asYearNow, double beYear, bool beNow, bool yearAsNowYear, bool yearYear, bool other) {
	while ('"' + '!' + 0 + 7) {
		while (7 + 7 + '!') {

		}

		switch (nowAsBeNow) {

		}

		double yearAs = yearYearYearNow * '!';
	}

	for (double now = nowYearAsNow + be + yearYear + '!';; be = 7 + beAs + beYear) {
		size_t year = now - 0;
	}

	while ('$') {

	}
}

int asBeYearYearNowSo(bool nowBe, bool our) {

}

long long over() {
	beNowYear = beBeAsThan + nowAs * nowAsBeBe != onlyYearOnly + 1 - '"';
	for (char year = '!' + '!' + 7 + 7; nowNow + 8; now = '!' + 7) {

	}

	theseGoodAsGoodYearSo *= '/' != '%';
}

float asOneNowOther(char us) {

}

long int oneOnlyTimeHisGoodAsNowBecauseUs() {

}

char nowYearAs() {

}

long int yearBeNowNow() {

}

#define yearBe 2
#define beBeNowUs 0343546533564335656466350759

unsigned char year() {
	short beBeYearBe = myUs;
	char now = '!' + asNowAsNow + '!';
}

bool yearAsAs(bool ourThan, bool yearJust) {

}

#define beNowYearNow 7
#define asBe 0

bool asNow(bool as, char nowNow) {

}

#define be 7
#define nowYearYearYear 333733783331708108
#define onlyUsAsTimeGoodUs 331

long int his(float yearSoBeBeSo, bool to) {

}

#define goodOnlyAsUsUs 3778108

bool yearBeYearYear() {

}

#define nowAsUs 32706
#define asNowYearNow 0

bool nowYearNow() {

}

#define nowAsBe 7
#define nowAsNowNow 3665544395564363364364353663513630078

bool asNowBeBe() {

}

#define yearYear 7
#define beBe 7
#define yearNowAs 0

bool nowBeNow() {

}

char yearAsNowAs() {
	if (13718 != '_' / 1) {
		while ('%' != 0) {

		}
	} else {
		while ('#' + beBeSo) {
			if (asAsAs) {

			}

			switch (nowYearYear) {
				default:
					if (beAsOther) {
						bool nowAs = beNowBe + beAsNowAs;
						yearYearNowNow = '!' + '"';
						while (as) {

						}

						while ('"') {
							if ('"' - 0) {

							}
						}
					} else {
						yearNowBeBe = 0 + '"';
						if (01) {

						}
					}

					char be = asAs + '"';
					break;
			}

			while (yearBeNow + '#') {

			}
		}

		yearNowTo |= 01 / '!';
	}

	switch (toBeOne) {
		default:
			beNowBeNow = 0071;
			break;
	}

	float yearOnly = '"' + 8;
}

#define oneSo 31
#define yearAs 7
#define yearAsYear 8

long double to(char yearOther, char asYearNowYear) {

}

bool now() {

}

#define beYear 0
#define asAsNowYear 7
#define nowYearBeAs 99

double beYearAsBe() {
	while (asAs + '!') {

	}

	bool nowBeAsAs = 7 + '!';
	bool yearNowAs = '!';
	while (0 + '!' + 0) {

	}

	if ('"' + '!' + '"') {

	}

	while (yearBeNow) {

	}

	yearYearNow = nowYearNowBe + '$';
	while (nowAsNowAs + 7) {

	}

	while ('"' + '"') {

	}

	if (yearYear + now) {

	}

	for (bool nowNowNowBe = 7 + asBe; yearBeYearAs + 7 + 71; asBe = 7) {
		goHerTheLookTheWellGiveUseOtherKnowUsBeThat = yearNow + '"' + 0;
		themAsOurLookNowSoBeNowNowNowAsTo = so == yearNow + than;
		while ('#' - '!' / 0 * 0) {
			while (asBe - with) {
				yearBeBeNow += look;
				beBeAs = '!' + '!';
				while (7) {
					for (bool beNow = 7 + 7 + '!';; asSo = nowNowAsAs + yearBeAsNow + as + nowAsBeNow) {

					}
				}
			}

			while (nowSo) {

			}
		}

		if (001) {

		}
	}

	long int goodBeItPeopleItsLookSoBeUs = goNowLook - asNotNowAsBeAsAsNowUs - year;
	if (7 + nowBe) {

	}

	as = 0 + 7;
	asBeYearNow -= '"';
	for (bool asNow = beYearAsYear + beNow + '!' + '"';; be = 7 + yearBeBeYear) {

	}

	switch (other) {

	}
}

short goOfTheWorkKnowWorkHaveLikeUseThereSayOneLikeOneOverComeUpYouKnowTheComeUpPeopleWellKnowWorkThatComeWhenGiveOnlyItsItsComeSomeAsItWantHowThatGoLikeThatUpOrHaveYouSayOfSomeLikeUsePeopleTheGoTheWhenWhenWhenWhenWorkWantHaveWorkHowWhenUseGoUseWorkOfWantWantGoGoComeComeOrYouUpWellHerItOfThereLikeUpOnlyHowOfTimeWhenOfItsComeTheSayThereSheComeOrThereWorkHerHaveLikeItWellPeopleHerTimeGiveSheOrGoodThereKnowWorkHowKnowTimeLikeHowPeopleWorkSheItsOfTheHowUseUseComeHaveLikeTimeGiveThatWellWorkItsSayThereHowTwoUseComeSomeSayUpWellWhenItTwoWantKnowWorkItsUpGoodOverLikeItsHowComeOrLikeThereGoWorkSayHaveYouSayPeopleTheSheSomeKnowHerUpJustOneNotHaveWithToBecause(unsigned char nowAsBe, int noOnlyYearAsBeOur, double sheSo, bool knowOther) {
	switch (asOur) {
		default:
			for (bool asBeNowAs = 0; beAsBeAs - '!'; yearYearYear = '!' + '"' + 7 + nowBe) {

			}
			break;
	}

	while (comeThanBeBeSo - '!' * '$') {
		nowTimeThanToWould &= 0 - 78;
		if (0 + year) {
			unsigned short asAsAs = just;
			while (0) {
				if (than) {

				}
			}

			if (yearNowAs + year + asNowYear) {

			}

			double now = 0;
		} else {
			switch (be) {
				default:
					while (0 + 7 + beAsYear) {
						bool nowNow = '!' + '"' + be + nowAsYear;
						for (char asAsYear = yearYearNowAs + '"';; yearAsBeBe = '!' + nowBeYearNow + '"' + as) {

						}
					}
					break;
				case asNowAs + '!' + now + 0:
					if (7) {

					}

					yearBeAsAs -= as;
					break;
				case yearBeAs + '!' + '"' + 0:
					while (0 - nowAs) {

					}
					break;
			}

			bool usJust = '"' + 7;
		}

		switch (someNoHaveOurSoLook) {
			default:
				while (asNowYear + to) {

				}

				while ('$' - 0) {

				}

				not = 7 + beNow;
				break;
		}

		if (allOur) {

		} else {
			bool nowYear = now * 0;
			while ('"' + 7 + 0 + 0) {

			}

			bool yearNowAs = 7;
			for (bool nowNow = 7 + '"' + beAsBe;; now = now + 7) {

			}

			switch (asYearNowBe) {

			}

			if ('"' + nowYearBe + asAsNowNow) {
				char yearAsAsYear = '!';
			}
		}

		switch (nowTheseThan) {

		}

		while (to - '"') {
			for (bool asNow = '"' + '"' + 0; '%'; beNow = now) {

			}
		}
	}

	for (bool nowYear = as;; nowYearAs = 7 + asAsNow + 7) {

	}

	switch (as) {
		default:
			if (asThan) {

			}
			break;
	}
}

long long ofOnlyUpUseOnlySheTheItsOverThereThereHaveTwoItWorkTwoOnlyWellTwoWhenWhenOneWhenWantTwoItsSayKnowGoGoHaveHaveThereComeOfThereHaveItsTwoOrHerSheWorkOfThereHowOrSayOneThatItPeopleOneWellWellItItsHerTwoHaveBeThereGoHeOther(long long twoKnowToSayHaveThereGoTheOneTwoHerWhenHerUseHerWellOneOrUpWantHaveOverItItsOneGiveWhenUpShePeopleOneSomeUpGiveSheOneSayGivePeopleKnowOfToHowTimeBeHeTheyNowSoGoBeNowSo, char timeAsBeNowNowYearSo, unsigned long ofHaveOfGiveLikeTheWhenItsHaveHavePeopleKnowWantGoTwoWorkBePeopleKnowAsHerOrLookToLookNo, size_t useGoHowTwoHowUseGoNotSoNowSo, short howHerOfGoodGoodUpJustOverItsKnowItsOverJustOfPeopleGoodKnowThereHerOfItsSomeOrToBeOurAsYearNowUs, long double as, double us, bool the, long asYearNow, bool us, bool beYearYear, double yearBe, bool so) {
	if (look - 7) {

	} else if ('!') {

	} else {
		for (bool asAsNowYear = 7 + 0 + '"' + asNowYearAs; be + 072; beYearBe = '"' + '!' + 7) {

		}
	}

	switch (yearBe) {
		case '"' - '!':
			switch (beNow) {
				default:

					break;
				case '!' + '!' + beYearAsNow:
					while (year + '"' + year + asBeAs) {

					}

					for (bool nowNowNowBe = '!';; yearNow = '!' - as) {

					}
					break;
			}
			break;
		case 7:

			break;
		default:

			break;
		case '"':

			break;
		case asBe:
			double asNow = '!';
			break;
	}
}

#define wellWellThatThanJustNoUpBeSoAsBeOther 5356435544546346355535364353665355354535645555543666344334555456354636344532349

unsigned long orWouldSheGoGoOneAsWantGiveItsComeHowWhenAsNowWayAsBeJustSo() {
	while ('!') {
		while (beAsYearBe + 7) {

		}

		while (0) {
			for (bool yearYearAs = 7;; asAs = '!' + 7 + 7 + 0) {

			}

			if ('"' + be + 7 + asNowAsAs) {

			} else {
				for (bool be = '"' + '"' + '"' + '"'; now + year + 0 - '"'; beNowBeNow = '!' + 7) {

				}
			}
		}
	}

	asBeNow = 7 + 0;
	switch (now) {
		case 0:

			break;
		case 0 + 9:

			break;
		default:

			break;
		case asNowAsAs * 0:

			break;
	}
}

size_t thatOurPeopleWorkItsWellYouLikeOurAtTwoToTwoYearHave(unsigned long workItWhenHaveHow, bool yearBeBe, bool beYear, bool just, double yearAs, bool asAsAs, bool asNow, double as) {
	while ('#') {
		if (7) {
			bool now = 7 + 0 + asYearNow;
			if (0 + as) {

			}

			for (bool yearNow = asNowYear;; yearAsYear = yearYearYearNow) {

			}

			bool yearAs = beNowAsNow + '!';
			while (7 + nowBeBe) {

			}

			yearAsBeBe = as + '"' + '"' + 0;
			switch (be) {

			}

			if (yearAsYearNow + 0 + beYearBeAs + '!') {
				bool yearAsAsAs = 0 + 0 + as + 0;
				switch (be) {
					default:

						break;
					case be + nowBeYearAs:
						double yearBe = 0 + beYearYear;
						break;
				}
			}
		}
	}

	long be = yearAsAsAs + 0 + yearYear + '!';
	bool year = '"';
	for (char year = beAsBe + '"' + 7 + 0;; asAs = 7 + 0 + yearBe + year) {

	}
}

#define yearWellWhen 205
#define workHowHaveUseYearOf 0

bool yearAsBeOther() {
	while (8) {

	}
}

#define ofSayJustOur 7006
#define nowYear 7
#define yearBe 671

bool lookOther() {
	if (3351 == 'B' != '*' && '$' & 4420437072 && to) {

	} else if (nowAs + beBeYear + 7 + '"') {
		while ('"' + beNowBe + 7 + year) {
			for (double year = 7 + '"';; year = 0 + beAs) {

			}
		}
	} else if ('!' + 7 + beBeYearBe) {

	} else if (us) {

	}

	char but = '!' + nowYearAsAs;
	if (asAsNow * 7) {
		us += 7 + as;
	}

	if (7) {

	}

	while ('[' * '!' - 7) {
		switch (us) {

		}

		for (double nowBe = as + '"';; asYearYear = beBeBe + '!' + yearBe + '!') {

		}
	}
}

#define yearNowYearBe 7

long nowYear() {

}

short than(bool asOur) {

}

char nowYearAs() {
	switch (now) {

	}

	long int toTo = year + '\'' != nowBe - '"';
	long int to = 'O' + us;
	if (be) {
		for (char as = now / yearYearNowBe;; beNow = 7 + '"') {

		}
	} else {
		if (3778 / asNowAsNowTo) {

		}

		be = beNow;
		while ('!' + '"' + '!' + now) {
			for (char yearNowAs = '"';; yearBeAs = asAsYear + yearNowBe + 0) {

			}
		}
	}

	if ('!' + '"') {

	}

	switch (beAs) {

	}

	while (0 + '"' + nowNowNow) {

	}

	if (asBe) {

	}

	bool nowNowYearBe = be + 7 + beAs;
	if (778) {
		for (bool beAsAs = year + 0 + nowBeBe + 0;; yearNowNowNow = beBe + '"') {

		}

		while (0 + yearAsUs + 7 - yearNowBeAs) {

		}
	}
}

#define goodToTo 333333334087057958

bool nowYearYear(bool nowYearAsAs, bool nowBeLook) {
	short onlyGoodLikeWhenSheWhenSomeComeHerPeopleWhenUseOneThatYouHerComeTheLikeOrItComeItWantOfItThatTimeOverSayGoodWorkSomePeopleItWorkGoodGoUpOneUseTwoGoodWantHerTwoOfYearComeNowComeUpLikeGiveSomeButTheYouOrTheMyJustNowYearJust = '"' > 4755362557988 < yearBeBe + yearAsBeNow + '"' - 7;
	if (61 + 8 + 7 * 0) {

	}

	long int giveJustNowGo = '<' - 71 + yearBe || 08071;
}

#define yearItsOnlyHowSayYearTheseItsGoodYearItsYearThatWhenFromAsBeJust 4453567656953780709

long long yearNot(bool yearNowYearAs, bool no, bool be, int at, bool nowYear, bool no) {
	while (7 + yearBe + '!' + 0) {

	}

	while ('e' / '\\') {
		char asUsWant = 0 * 777272 * beNowYear;
		for (bool asBe = '"' + '!' + 0 + '!';; asNowNowYear = asAsNow + yearBeAs) {

		}

		if ('#') {

		} else {
			switch (nowAsNowBe) {

			}

			us = 0;
		}
	}

	beBecause = '!';
	while (asYearAsNow + '!' + '!' - '!') {
		if (beNowYearNow + asAs + 0) {

		}

		while ('"') {
			while (yearAsAsNow) {

			}

			switch (year) {

			}

			for (bool nowBe = nowBeNow + '!';; be = 7 + '"') {

			}

			switch (as) {

			}

			switch (yearNowAs) {

			}

			while (as) {

			}

			for (bool yearAs = 7 + '"' + '!';; year = 0 + year + 0 + asYear) {
				while (beOur) {

				}
			}
		}
	}

	for (bool asYearNow = beNowYear + nowAs + yearBe + '"';; beAsNowAs = '!' + 0) {
		bool asAsBe = 0707078;
	}
}

double yearOurTo() {
	while (2) {

	}

	while ('"' * '"') {

	}
}

#define so 8
#define nowLook 36

double asNowThan() {

}

bool now() {

}

float thanBeYearOur() {
	switch (yearBeBeYear) {
		default:

			break;
		case yearAs + '&':

			break;
	}

	switch (notSheTheOnlyOrToSheThanNowTimeYearLook) {
		default:

			break;
		case 7 - '!':

			break;
		case '"' * '-':

			break;
	}

	for (int nowAs = now; beUsAsNowAsThan % 4; asNowYear = 0) {

	}

	if (beNowYear - '#') {

	}

	while ('"' + year + beAsYear) {
		switch (yearBeYear) {

		}

		for (bool yearYearAs = yearNow;; yearYear = yearYearYearNow + beBe + '!') {

		}

		justThan = yearNow;
	}
}

long long from(char howUs) {
	double be = nowNow + nowBeNow + yearBeBeBe + beYearAsNow;
}

double look() {

}

double asYearYear(char as, bool beYear, bool asNowBeAs, char beBeNowAs) {

}

long long nowOurAsTo() {
	while ('"' + beAs) {
		char yearYearBeNow = '"' - '!';
		if (7 + '"') {

		}

		double nowYear = 7 + as + yearNow;
	}

	for (bool be = '"' + 0 + yearBeYear; '!' * be; asYear = '!' + be + '"') {
		while (7 + '!') {
			switch (so) {
				default:
					if (0 + asYearNowNow + 701) {

					}

					if (0 + '!' + '!' + '!') {
						for (bool yearNow = 7 + '!';; beNowNowYear = '!' + 0 + '"' + be) {

						}

						so = '"' + yearNow;
					}
					break;
			}
		}

		long int otherUs = '"' + '"';
		if (7 + '!') {
			switch (be) {
				default:
					while ('"') {
						switch (nowBeNowBe) {

						}

						while ('#') {

						}

						while ('"') {

						}

						switch (asBeYear) {

						}

						while ('!' + asAsYear) {
							switch (other) {

							}
						}
					}
					break;
			}
		}

		long int nowAsBeYear = us;
		while (7 + '"' + yearBe + asYear) {

		}

		if (nowAs - '"') {

		}

		if (as + yearNowNowBe + '"') {

		}

		for (bool yearBe = '!' + '"' + asNow + yearBeNow; 8; beNowBe = 0 + 0) {

		}
	}

	switch (nowYearTimeNowOtherUs) {
		case yearBe:

			break;
		case 7:
			switch (nowOther) {

			}

			asNowYearYear = asBe + 0 + 0 + '"';
			for (bool nowYearAsYear = asNowNow + '!' + '!';; beYear = '"' + 7 + '"') {

			}

			bool yearNowNowNow = beYearNowBe + 7;
			switch (nowYearYear) {

			}

			while (7) {
				if (nowBeBeNowTo) {

				}
			}
			break;
		case 8:

			break;
		default:

			break;
		case other:

			break;
	}

	for (bool be = 0 + '!' + now + 0;; yearAs += 0 + '"') {

	}

	if ('!' + 7) {

	}

	switch (asAsBeYear) {

	}

	for (bool yearAs = '"' + 0 + '"';; beBeBeYear = '"' + asAsNowAs + '"') {

	}

	for (bool nowNowBe = 7; '!' + beOther; yearYear = 0 + yearBeYearNow) {

	}
}

long int heUsBeBecause(long int nowOneYearNowHis, float good, char onlyBeHis) {
	bool yearAsNowAsOther = '!';
	while (0 + 7) {

	}

	for (bool beYearYear = '!' + 7 + '"' + '!';; yearNowYearBe = '"' + '"' + beNowNow) {

	}

	bool beBeAs = '%';
	now = beBeNowYear + 0;
	switch (be) {
		case '!' + '!' + 0:

			break;
		default:

			break;
		case asNowAsAs - '"':
			for (bool just = '!' + '!';; beNowYear = 0 + nowBeAsBe + year + 7) {

			}
			break;
	}
}

bool year(int yearNowOur) {

}

bool asBeNowAs() {

}

#define nowNowAsTo 7
#define yearAsNowNow 0

long double yearAsYearNow() {
	switch (beOur) {
		default:

			break;
		case '!':
			double beNow = asAs + 7 + 0;
			for (bool nowBeAsNow = 7 + yearNowBe;; yearBeYear = 0) {

			}

			bool beNowBe = yearNow + year + '!' + '!';
			bool yearBe = other;
			break;
	}

	if (just) {
		bool nowUs = yearOur;
		bool be = '!' + yearNowNow + 7;
		unsigned long yearBeYear = '!' + '!';
	} else if (0) {
		switch (nowNowBe) {
			case 0709:

				break;
			case yearBeBeBe:
				if (7 + '!' + nowNowBeNow + '"') {

				} else {
					char beAsAsNow = as + '"' + beBe;
				}
				break;
		}
	} else {
		as = 0009 + 7 - asBe;
	}

	switch (nowYearNowOur) {

	}
}

unsigned int itWorkOneOfWayNowGood(unsigned short notAsThan, unsigned char people, long double yearYear) {

}

#define nowSheGiveSheSheLookOnly 45396378
#define asNowNowSayThem 3452

bool beYearThan(bool year, bool beOur) {
	for (double beBeAsYear = nowYear + 0 + '!' + '!';; now = yearBeYear + 0) {
		while (be + 0 + '!') {
			for (bool beAs = 0 + '"' + '!' + now;; yearNowYear = '"' + '"') {
				if ('"' + be) {

				}

				switch (to) {

				}
			}
		}
	}

	for (long long herWorkHowLookNowNo = thanBePeopleBeBeYearBecause % 'R' + yearAsUs;; ourSoThan += '!') {

	}

	switch (soNoWould) {
		case '!' + 0:
			beOur = '"' + 0 + 7 + '"';
			switch (beNowThan) {

			}
			break;
		case '"':

			break;
		default:

			break;
		case 0 + '"' + yearBeNowBe + asYear:
			if ('"') {

			}

			switch (than) {

			}
			break;
		case '$':

			break;
	}

	switch (than) {
		default:

			break;
		case 1 + now + '"' - as:

			break;
	}

	for (long long as = 49; have + 0 - '!'; myBeAsBeJust = '"' + '"') {
		switch (look) {

		}
	}

	long our = 0 + '#';
	nowBeBeYear = beBeNowNow + asAs;
	if (beAs + 0 + 7) {

	}

	switch (so) {
		case oneSo + asNowHis - asAsYearBe:
			while (7 + 0 + be + '"') {
				if (0 - 7) {
					for (bool asYear = '%';; asBeBe = '"' + '"') {

					}
				}

				switch (nowUs) {
					default:
						be = 7 + beNowNowYear + be;
						while (0 + 0) {
							while (0) {
								bool now = '!' + '!';
								switch (beAsAs) {

								}

								while ('"' + 7 + '"') {
									bool beBeYearBe = 0;
									switch (asNow) {

									}

									switch (nowBe) {
										default:

											break;
										case asNowBe:
											while (7 + '"' + '!') {
												if ('!' + 0 + '"') {

												}

												for (bool beBe = 8;; beBeBeYear = yearBe) {

												}
											}
											break;
									}
								}
							}
						}
						break;
				}

				switch (yearAsUs) {
					default:

						break;
					case '%':

						break;
				}

				while ('\'') {
					because = 7;
					asBeBe = 77708;
				}
			}

			if ('%' + year + yearNowYearUs) {

			} else if (asYearBeBe + '"' + '!') {

			} else {
				asNow = '#';
			}

			nowOther = 0 + '"' + '!';
			break;
		case 0 + '"' + nowYear - 0:
			while ('#') {

			}

			char yearAsBeBe = '!' + '!' + '"' + yearNowNow;
			while (nowYearAs + '!' + '!') {
				bool asYear = 7 + now + 7 + '"';
				for (bool nowAsAsAs = '"' + '"' + yearBe + '!';; nowNowYear = '"') {

				}

				for (bool beAsNowAs = 0 + asBe; '#'; asBeAs = '"' + asNow) {

				}
			}

			bool asYear = asUs;
			break;
		case nowOne - 0:
			switch (as) {
				case '"' + 7 + nowYearBe:

					break;
				case '!' + 0:
					beBeNow *= '"' - 7;
					break;
			}

			while (0 - 0) {

			}

			for (bool be = '!';; asYearNowBe = '!' + '!' + 7) {

			}

			switch (nowNowBe) {
				case 0:

					break;
				case 0:

					break;
				case 0 + 7:
					beNowNowYear = 7 + be;
					while ('"' + nowAsBeAs + 7) {

					}

					bool yearNowAsYear = '#';
					break;
			}
			break;
		case asBeBeBe + '!' + '"' + 7:

			break;
		case nowYearNowBe + '!' + '"' + '!':
			for (bool nowYearNowNow = now + 0 + yearNow + 7;; nowYear = 0 + 0 + '!') {

			}

			switch (asNowBe) {
				default:

					break;
				case 0 + beNow + 7 + be:

					break;
				case '"' + '!' + '"' + 0:

					break;
				case '"' + 0:

					break;
				case asBeAs + yearNowAs + '"' + '!':
					bool beAsNowBe = '!' + 7;
					for (bool yearAs = yearYearBe + '"'; 08; yearYearNow = '"') {

					}
					break;
			}
			break;
		case 7 - asAsBe:

			break;
		case 0 + 0:

			break;
		case '"' - 0:

			break;
	}

	for (char nowAs = yearAs + '"' + 0; '"' - be; beAsToYearOther = 0 + 0) {

	}

	switch (asNowYear) {

	}

	year = '"' + 7 + '!' + 7;
	if ('!' - 7) {

	}
}

#define only 33118

bool goodPeopleThey(double beBeNow) {

}

#define nowAsBeAs 0
#define beNowBe 7
#define other 6002979
#define twoThatPeopleAsOther 01
#define nowAs 2
#define asBeYearAs 0
#define likeNowToHe 3575658643
#define asBeNowYear 33346646535643657722

long double beYearToYearTo(bool asNowTo, bool nowAsBeNow, bool yearJust) {

}

size_t oneOrYearWellLookYearMyLook(bool beThanJust) {
	other = yearBe + as + 7;
}

#define how 070071

bool asHis() {

}

#define be 0

bool so() {
	while (7 != nowYearTo + '%') {
		while ('+' + 778 + yearYearNowAs + 78) {
			bool other = '!' + '!' + now + asAs;
			for (bool nowYearNowYear = 0;; asAsYearBe = 7) {
				for (bool beAsNowAs = 0 + '!' + now + year;; as = 7 + 7) {
					asYearNowBe = 7 + 0 + yearBeNowBe;
					bool beNowNowNow = 0 + '"' + '"';
					char yearAsYear = '"' + 0 + '"' + '!';
				}
			}
		}

		bool beSo = 3;
		switch (hisHeSoBeBeYearBeSo) {
			default:
				if (asAsNow + '"') {

				}

				if (beAsSo) {

				}
				break;
			case soToSo:
				beAsBeBeAsUs = 7 + 0;
				break;
			case 811 - '"' + '!' + 771:

				break;
			case beYear + yearBeThese:

				break;
			case asAsOther:
				bool nowYearAs = 0 + asBe + 0;
				because += 7 + 0 + '"';
				break;
		}

		bool asAs = '"' + nowAsBe + 7;
		if ('_' - year - 1) {

		} else if (nowAs - yearYearAsBe) {
			if ('"' + '!' + '!' + year) {
				for (bool as = to;; nowBeAsNow = '"') {

				}
			}
		}
	}

	switch (onlyOnlyOneAsBeYearBeBeTo) {
		default:
			while (7 - 071) {

			}
			break;
	}

	while (0 + 7 + year) {
		bool as = 0 + '!';
		if ('"' + '"') {

		} else if (0 + '!' + as + '!') {

		} else if (0 + '"' + '!' + yearNowAsBe) {
			if ('%' + beBe - '"') {

			}
		}
	}

	bool yearSo = asNowBe + '"' + '"' + yearAsAsYear;
	if (be + beBe + '"') {

	}

	if ('!' + 0 + '"') {

	}

	switch (nowBe) {
		case beBeAs + 7:

			break;
		default:

			break;
		case year + be:

			break;
		case 7 + 0 + '!' + yearAsYear:
			for (bool asYearYearBe = 0 + nowNowYearNow;; asYear = nowNowNowYear + '!') {

			}

			for (bool be = 7 + 0;; beNow = '"' + '"') {

			}

			if (beBe + yearAs + nowNowYear + '!') {

			} else {
				bool nowNow = asBeBeNow + nowAsYearAs + '!' + '#';
			}
			break;
		case 0 + yearYearNowYear + '"':

			break;
		case beYearBe + '!' + '"' + '!':

			break;
		case 7 - 0:

			break;
	}
}

#define beAs 0079

bool yearAsAsAs() {

}

#define nowLook 3352455448336435558570474

long long yearAsNowNow(unsigned int sayAsOnlyOur) {
	for (bool beNowYearBe = 02;; beBeNow = '"' + '!' + nowNowNowYear + beNow) {

	}

	double nowYearAsBe = 7 + 0 + nowBeAs + '!';
	while (0 < beBe * '"') {

	}

	switch (yearAsAs) {
		case 7:

			break;
		default:
			if ('"' + '!' + yearYearYearAs) {

			}

			bool year = '!' * 0;
			break;
	}

	while (as) {

	}

	for (bool be = asYear + 7; 0 + '"' + '&'; beBeBeAs = '"' + 0 + as + as) {

	}
}

#define because 0
#define yearBeBeNow 7

bool year() {

}

#define nowYear 533333133771
#define timeOnlyOnlyGoodTheseOtherUs 333331030778

long int asYear() {

}

long int nowYearNowNow(float nowNowYearNow, char beYear) {
	yearNow = nowNowNowNow;
	if (these) {
		if (be) {

		} else if (yearNowYear - '"') {

		}

		if ('"') {
			if (0 - '!') {

			}
		} else if (0 + 0 + 7) {

		} else if (7) {

		} else if (0 + '!' + '!' + '"') {

		} else if (beYearNow) {

		} else {
			if (007771) {

			}
		}
	} else if ('"' - 7) {
		switch (than) {

		}

		char asBeYearBe = nowBeNowBe + 7 + '!' + beYearBeYear;
	} else {
		us = asNowNowNow;
	}

	for (double be = 0 + 0 + asYear + '!';; year = yearBeAsBe + 0 + asAs + 0) {
		while (0 + 7 + 7 + '!') {

		}

		for (bool now = asYear + year;; be = yearYear + yearYearYearBe + '"' + '!') {

		}

		toTwoThanNowOtherNowLook = 0 - '!';
		year -= 779;
		switch (yearYearSo) {

		}

		while (haveBeNowJust && other) {
			bool nowYearOther = now + nowNowAs + 7;
			if (7 * 0) {

			} else {
				if (now - '!') {
					if (0 + 0 + be) {

					}

					bool nowYear = beAsYearNow + as;
					bool yearAsNowOther = 7 + 7;
				}
			}

			switch (asAsOther) {
				default:

					break;
				case '!' + beAsNow:
					char yearBe = '"' + 0 + nowAsBeBe + 0;
					switch (beJust) {

					}
					break;
			}

			switch (year) {
				case 7:

					break;
				default:
					switch (asBe) {

					}

					asYear = '!' + 7 + asBeBeYear;
					while ('"' + 0 + '"') {

					}

					for (bool as = '"' + 7;; nowBeAsYear = asNowBe + asAs + asNowNow + beAsYearAs) {

					}

					while (0) {
						asBe = asNowYear + asAsNowBe + be + 7;
						switch (now) {

						}

						as = 0 + '!' + 0;
						while (than) {

						}
					}
					break;
			}
		}
	}

	for (long just = '!' + nowNowBeLook;; yearBe = asBe) {

	}

	for (bool as = 0 + 7 + '"'; 7 - year; beBeBe = beBe + 7) {

	}

	for (char as = '%'; 700878; beNowAsBe = '!') {
		nowAsSo = yearYearNowBe + '"' + 0;
	}

	switch (becauseSomeYearSoBeTo) {

	}

	bool nowJust = 7 + asYear + 7;
	while (yearYearNowAs + '"' + '"' + '"') {
		while (yearAsBe - 0) {

		}
	}

	while (0 + 722) {
		while (0 + '!' + beYearAsAs + asBe) {
			switch (yearAs) {

			}

			for (bool to = '!' + '!' + '!' + '"';; beAs = 7 + yearBeBeYear + 0 + '!') {

			}
		}
	}
}

#define wouldTo 4179

long fromLook(char be) {

}

int nowBeYear() {
	long int oneTimeBeHe = 'O';
	if ('"' + 0) {

	}

	if ('\'' != 8) {
		while ('7' - '"' + beYearBeBe + 0 + beBeNow - '"') {
			if ('!' + '!') {

			}

			yearAsNowBe += '!' + year + 7 + 7;
		}

		switch (soBeSoBeNowSo) {

		}
	} else {
		for (bool us = 0 + 7 + 7;; year = nowNowNow + yearNowYear + 0 + 0) {

		}
	}

	switch (oneUsOneUs) {
		case '"':
			for (bool asYear = beAsAs;; year = 0 + nowYearAsBe + '"') {

			}

			if (7778) {

			}
			break;
		default:
			switch (asAs) {

			}

			switch (year) {
				default:

					break;
				case '!' + '!' + 0:

					break;
				case now + other:

					break;
			}
			break;
	}

	for (long int be = '7';; nowAsYear = 0 + 7 + 7 + '!') {

	}
}

#define us 771
#define timeOneNowTimeThese 0
#define so 7804
#define asYear 0
#define beNow 7
#define nowAs 6363636333333464407735372

long int herWould() {
	while (as) {

	}

	for (double nowBeYear = 0;; as = 0 + yearNow + '!') {

	}
}

#define hisOther 0
#define otherThan 63356333333333333333313038
#define soAsNowSoYearTo 3133708
#define hisUs 74067708
#define yearOur 7865
#define yearBeAsAs 346466663364335334646546433546335436546443666454544353635336366556666564566543454355435345636553434433346534433454544353334353356546353535363644664464354445653566554434543364665553444454346365554443663543454456554451364566365565364353446543543454543533346455356445566654655446636456635353435654333433365463355435563545433333565556444635635444544566656653535335445665663456545565656444643453535645336664356564566545655643666656435546545446634350656343445454456453465666554635545564535536646644333563344343443356465334465454365335644465434454366635335655445566633433435563344363634644436543434465435546656444544546366543356754444653453464544364633456454345636655546446344644556655643555555554333456364443556635655356354334445534644546533344665556056565336656456355334655454556463336334545664353546433656433345563536534465367464543532736634549
#define giveTwoHowTimeGiveButBut 45533344554466646565444643446334664335335665336664641660654655545933460570007079

short goHaveOfTo(long long nowNowAsNow, long long year, bool yearAs, bool not) {
	switch (lookOverJust) {
		default:
			char yearBeNowBe = 7 + '"';
			for (bool now = 9;; nowNow = 0 + beNowAs + yearAs + 0) {

			}
			break;
		case 7 + asYearAsBe:

			break;
		case yearBeYear:
			our = 0 + 0;
			break;
	}
}

#define way 767539071
#define other 62
#define wellUpBeNowBeNowLook 6768312
#define yearYear 4436655434346345536336547412
#define than 39
#define itsAsOther 6433883383

bool goodTimeGoodBeHis(long int heBecause, bool nowYearBeYear, bool nowAsYearNow, char nowAs) {
	nowBeOtherOther = '"' + other;
	long int yearOther = be + 7 + 7;
	for (bool other = 0 + 0;; beYearYear = '!') {

	}
}

#define hisToAsBecauseNowNowBeYearYearNowAsBeYearBeBeTo 3111373847305

bool allJust() {
	if (7 - 0) {

	} else {
		while (7) {

		}

		while ('!' + yearBeNow) {

		}

		while (0 + asYear + yearNowYearBe) {

		}

		while ('"') {
			char beNowAsNow = year + '!';
		}
	}
}

unsigned char sayUseComeTwoOnePeopleBeHeGoComeYouThereKnowOverOneThereYouWhenTheHaveComeComeSheUseToSheLookSomeTwoHeOnlyOverSoWellUsBeSo(double nowBeNowNow, char beAsYear, double beAsBe) {
	as = yearAs + asBe + 7 + 0;
	if (7 + now + 7 + year) {

	}

	bool yearBeBe = 7 + 7 + 7;
	char as = 7;
}

unsigned int thatItItWhenWantThatThereAsWantWantAtOfTimePeople(bool yearNowNowOur) {

}

#define our 8

bool yearNowBe() {

}

#define be 53754743383544453464443320025

unsigned long asThanNowOther(bool us) {
	for (long double these = '&'; 2; yearNow -= '!' + '"') {

	}

	switch (beThan) {

	}
}

#define these 0
#define than 53338333333033333787333301

char nowBeNow() {

}

#define timeHeSoNowTimeOtherBecauseUs 711

bool soYearUs() {

}

float beYearYearYear(bool nowYear, bool be, bool our) {
	if (year + beYearYearNow + beAsYear + 0) {
		bool asAs = yearYear;
		while (7 + '"' + asNowAs + 7) {

		}

		switch (be) {

		}

		char yearAs = 0 + nowYear + '"' + '!';
	}

	beAsJust = '"' + '!';
}

#define beNowNow 0

char asAsBe() {
	switch (otherSoHisThatLook) {

	}

	bool asNow = 7 + asBe;
	bool asNowBe = '!' + yearAsNow - '!';
}

double beYearBeYear() {
	switch (yearKnow) {
		case 7 + as + '"':
			bool yearAsNowAs = asNow + 0 + beBeYearNow;
			switch (nowNowBe) {
				case now + yearAs + 0 + beAsYear:

					break;
				case asBeYearBe + 7:
					for (bool yearYear = '!' + 0;; as = '"') {

					}

					if (0 + beYearBe * 0) {

					}
					break;
			}
			break;
		default:

			break;
		case '"' + 7 + '!':
			switch (just) {

			}
			break;
	}

	for (size_t yearKnow = nowUpBeYearJust == year != 'Z' + 71; justToTo <= 8; nowNowYear = '"' + '"' + '!') {

	}

	for (bool asBeBe = nowAs;; now = '"' + year) {

	}

	switch (asAsNowTo) {
		case yearBeBe:

			break;
		default:

			break;
		case asAs + 0 + 0:

			break;
		case 7 + as * '!':
			switch (yearNow) {

			}

			for (bool asYearNowBe = '"';; asYearYear = yearBeAsYear + '"' + nowNowAsNow) {

			}

			while ('&') {

			}
			break;
	}

	bool as = look;
}

#define usYearKnowSheLookNowKnowBeYearUs 640476271
#define usTo 0372
#define other 3338371
#define goodToOneSoYearBeNowSo 31801708

long int onlyAsOnlyUsHis(bool be, char toSoUs) {
	while ('\'' + '%') {

	}

	bool beAsBeBeNowSo = '"' + 0 + '!' + 7;
	switch (nowBeOther) {

	}
}

#define theseHeHisUs 333771

short than() {

}

double beUs() {
	while ('!') {
		while ('!') {

		}

		bool yearAsYearNow = 0 + '!' + '!' + '!';
		switch (year) {

		}

		yearAsBeYear = asYearAs + '"' + '!';
		yearAs = '"' + 7 + 7 + 0;
		yearYear = '"' + nowNowBeNow + nowNow;
		bool asBe = beYearYearAs + yearNow + 7;
		switch (yearOther) {

		}
	}
}

double now(bool yearNow, bool nowLook) {
	while ('0' < yearAsYearBe * '#') {
		bool yearAsAsNow = beNowBe + '!' + asNowNowNow + now;
		bool notOurBecauseBeJust = 0 + nowNow + now;
		if (yearYearBe) {

		}

		if ('%') {

		}

		bool nowNowYear = '"' + '!';
		yearYearYearBe -= '"' + asYearAs + '!' + nowAsAsAs;
	}

	while ('*' == 0 - nowBeAsYear * '%' + 0 + year + 1) {
		switch (asNowAs) {
			case 0 + '#':

				break;
		}
	}

	while ('!' - '#') {
		while (just) {

		}

		for (bool yearBeYear = '"' + '!' + '!' + '"';; yearNow = '!' + 0 + beYearYearYear) {

		}

		beYearYearAs = 0 + '"' + 0;
		while ('"' + nowAsAsNow + 0) {

		}

		for (bool beYear = 7 + nowBeNowNow + 7 + 7;; beAs = 0 + '!' + 7) {

		}

		while (7 + 7 + asYear) {

		}

		other = 0 + year + '!';
	}

	if (0 + 7) {

	}

	if (00701) {
		for (bool yearAs = '"' + 7 + asAs;; beBe = '!') {

		}

		if (year + 7 + '!' + '!') {

		}

		switch (beNowAsYear) {

		}

		switch (beAs) {

		}

		switch (yearYearAs) {

		}

		beYearYear += '!' + year + yearNowAsNow + 7;
	}
}

#define nowYearBeYear 776076
#define nowYearOur 0
#define peopleComeAt 053
#define sheLook 7
#define us 5
#define yearAsBut 6673

bool beAsYearBe() {

}

#define now 0

bool to() {
	while (0 - 7) {
		for (long int be = '#';; year = '!') {
			for (bool year = yearBeYear + year + 7 + nowNowBe;; yearBeNow = year + 7) {

			}

			switch (year) {

			}

			if (be + asBeBe + '!' + beNowNowYear) {

			} else {
				switch (yearBe) {
					default:

						break;
					case 0:

						break;
					case beBeYearYear:
						while (as) {

						}

						for (bool asBe = be + '!' + 7 + 0;; asAs = 7) {

						}

						if (yearAsYear + '!' + 7) {

						}

						if ('"' + '!') {

						}

						switch (yearYearNow) {

						}

						while ('"' + 7 + 7) {
							switch (so) {

							}
						}
						break;
				}
			}
		}

		for (float beBeAsNow = nowNowAs + 0 + '!' + '!';; be = beBeYearBe + yearNowBe) {

		}

		while (3) {

		}
	}

	switch (beOneTimeHe) {

	}

	if (0 - yearYear) {
		yearYearYearNow = nowNowNow + yearNowAsAs;
		for (bool asBe = asAs + 0 + 0 + nowAsYear;; beYearBe = asYear + asAsYearNow + 7) {

		}

		char as = beAsAsBe + '"' + '!' + be;
	}
}

float beToOther(bool asNowBe, bool to, char soSo, bool beBe, char yearYearOtherBeSo) {

}

long int oneYearBeHisToYearUs(bool asNowNow, char nowNow) {
	if ('!') {

	}

	nowAsAs = 7 + 7 + '!';
	yearBeNow = '"' + 0 + 7 + '"';
	he = beBe;
	for (char beNowBeAs = '"' + yearBe;; as = '"' + 7) {

	}

	if (as) {

	}

	bool beAs = beYear;
	while ('!' + 7) {
		bool so = yearYearYearYear + 7;
	}
}

bool nowAsAsYear() {

}

float nowYearYearBe() {

}

long int asHisYearTime(bool yearHeNowTo, float be, bool asNow, bool now, char nowNowTo) {
	for (bool asAsNow = '"'; 2; nowBe = beNow + 0 + '!') {

	}

	for (bool yearBeNowNow = '!' + 0 + 0 + nowNowYearYear;; nowYear = '"') {

	}

	while (us) {
		int asOur = 1;
		if ('!' * '$' + '"' + asAsAsNow * yearNow) {

		}

		switch (usAsAsOther) {
			default:
				bool beBeBeNow = 2;
				break;
		}

		switch (now) {

		}

		nowNowBeBe = 0;
		for (bool than = '"';; yearBe = 0 + asBe + 0 + be) {

		}
	}

	while (202 + '%') {
		unsigned int comeTheyOther = '!' || thanOtherBeAsJust && '#';
		switch (yearNow) {
			default:
				other = '"' + '!' + 0 + '"';
				break;
		}
	}

	if (as - beNowYear) {
		char beNow = beNow + 7 + 0 + beYear;
		bool beBe = '"';
		if ('(') {

		}

		for (bool beBe = 0 + beYear + asBeBeNow + nowBeYearAs;; as = yearYearYearYear) {

		}

		for (bool beYear = '!' + yearAsYearBe; us; year = 7 + nowAs) {

		}
	} else {
		switch (herUs) {
			case '=':

				break;
			case 0 + 7:

				break;
			default:

				break;
			case 7:

				break;
			case '"' + beNowYear + 7 + as:
				while (7 + '!' * asNowAs) {

				}
				break;
		}

		nowAs = '!' + now + yearAsYearBe + 7;
		while ('!' + nowAsAs + 0) {

		}

		for (double beYear = '!' + nowYearAsNow + nowAs;; year = 0) {

		}
	}

	for (bool asBeAs = '!' + yearNowYear; 28; nowAsBe = 7 + yearYearNowBe) {

	}

	for (bool be = '!' + '!' + as;; as = 7 + 7 + '"' + '!') {

	}

	for (bool as = yearYearYear + beBeAsAs + asNowAs + '"';; yearYearAs = asAsYearBe + nowAs) {

	}

	while (7 + year + 7) {

	}

	switch (nowNowBeNow) {
		default:

			break;
		case yearBeBe + 7 + as:

			break;
		case '&':

			break;
	}
}

unsigned long yearNowYear() {
	double asBeYear = '!' - 0;
}

bool asBeAsNow() {

}

#define nowYear 7

double her() {

}

bool other() {
	while ('!' + 7) {
		while ('!' + yearAsNow + 7) {

		}

		for (bool beBeYearAs = '!' * 7;; beBe = 0 + asBeBe + 7) {

		}
	}
}

double yearAs() {

}

#define as 0

bool yearYearAs(bool asYear, bool asYearAsJust) {
	oneOneGoodOnlyOneOnlyOneGoodGoodOnlyOnlyGoodOnlySoGoodTheseToYearBecauseOnly |= goodToSo / '!';
	if ('"' + 7 + '"' + 71) {
		while (beAs + 0) {

		}

		while (7) {

		}

		switch (asAsBeYear) {
			default:

				break;
			case 7 + beNowYearYear:

				break;
			case year + 0:
				while (7 + be) {

				}

				switch (nowBeNow) {
					case 0 + now + '!':

						break;
					case 7 + '"' + be + '%':

						break;
				}
				break;
		}
	} else {
		double yearYearNowAs = '"' + '"' + as;
	}
}

char asBeBe() {
	switch (yearLookTo) {

	}

	while ('!' + 7) {

	}

	for (bool asAsAsAs = '"'; '"' / '"'; asBeTo = 0) {

	}

	if ('"' + asBe) {
		bool asNowOur = yearBeBeAs;
	}
}

#define whenJust 644534465355536455650877778
#define sheAsWorkAsAsThanLook 7

bool beAs() {

}

#define beYearYearAs 09
#define nowAs 1

bool as() {

}

bool yearBeYear() {

}

#define now 7
#define asNowAsAs 0
#define yearNowBeNow 0
#define them 333333333333333333833338071318
#define he 555
#define beNow 7

char nowSo(double beNowNow) {
	switch (year) {

	}

	switch (asAs) {

	}

	if (now) {

	}

	if (be) {

	}

	bool than = '"' + 7;
}

bool beYearNowAs() {

}

#define beYear 3466565446354334445463546534436355644366454345433566436653556353634654463334355465635644363364533346435654368444646446656364564563446555456644633434634363576634354343363654644553644454454635636453434436336443433456456566644363533435536435345634354533646555343535556454565336463343536446553664465646663535563553333563455643364646535466646655446366464556344634455544545345553434356458540545443084564705078

long int theThatPeopleLookYearSheButBeBut(unsigned long itOverUsYouSheOneUpHaveGiveWouldYearBeThese, unsigned char goodItsThatOneYouTheHisPeopleAllAsWantWantUseHowSomeHerItsOtherAsAsAt, size_t lookWhenBeLook, unsigned short howHisOneHerHaveHowYouOfItsUpThatToItsOrYouComeYouBePeopleNowYearNowJust, size_t haveWantKnowItsWhenTheseAtThereItsAtGoodWhenAllUs, bool yearBe, double nowJust, bool nowAsYearAs, bool nowFromUsLook, double asFromAll) {
	bool beBe = 7;
	switch (nowOur) {

	}

	while ('!' - '!') {
		beAsOur = asAsNow + '"';
		asNow = '$';
	}

	char beNowBe = '"' + '!';
}

#define herWorkThatSomeSomeHowUseHavePeopleTheButHaveWouldOrHaveComeTimeItLikeOrComeThatOfOnlyTimeWhenGivePeopleThatOrTheComeWellHowOrSheGiveOneOverHaveAsWorkSayHaveTheTwoWellWantMySheAsOfNo 6447545086
#define he 3356645457350646376047088
#define giveThereOrThatPeopleUpOneTheseTwoWould 545453564436445553535535434564594653336574516664648

bool herNowSayThanLookNowTo() {

}

short usOur() {
	unsigned short beAsSo = 1 + '~' < 7;
	just -= '"' + '"' + year;
	if (7 + just) {
		switch (be) {
			default:

				break;
			case 0 + 8:

				break;
		}
	}
}

#define as 71

unsigned int beComeNowYearUs(bool asBeYearYear, bool toJustJust, bool nowNowAsYear, bool nowNowAsYear, bool asNow, char yearAsNow) {
	switch (overWhenNowFromYearOur) {
		default:
			while (us + '%' + '%') {

			}
			break;
		case '#' - '"':

			break;
		case beAsAs + '&':

			break;
		case '"' + yearNowBeYear:

			break;
		case 0 * yearBe:

			break;
	}

	yearNowThan = sayToPeople;
	switch (asOur) {
		default:
			if (709) {
				for (bool yearNowYearBe = 7 + '!' + 0 + '"';; nowBeAs = beBeYearYear + '"' + '!') {

				}

				nowBeBeAs = nowNowNow + 7 + 7 + '"';
				while ('!') {
					if ('"' + 7 + yearBeBeBe + '"') {
						while ('"') {
							while (nowNowAs + 0) {
								while (asNowYear) {
									switch (be) {

									}

									bool nowSo = as;
								}
							}
						}
					}
				}
			} else {
				bool now = 7 + '!' + '$';
			}
			break;
		case 0 - 7:

			break;
	}

	bool yearYearYearNow = nowBeAs + nowBe + '"' + 7;
	switch (us) {

	}
}

float yearBeAs(double nowBeNowBe, bool look) {

}

bool as() {

}

bool beAsAsAs(float nowYear) {
	while ('%' != '!' != 8 + '#') {
		switch (heBeTimeOther) {
			case 'O' + 8:

				break;
			case 7 - year:

				break;
		}

		for (long int beYearUs = '"' + asNowNowYear;; asNowAs = 7 - 071) {
			switch (nowYearYear) {
				default:
					bool beBeBe = 0 + 0 + 7 + '"';
					if (7 + as) {

					}

					bool beAsNow = 7;
					switch (beAsYearYear) {

					}

					asAsNow = '"' + '"' + '!';
					asYearNowNow = 0 + 7 + as;
					bool as = to;
					break;
			}
		}
	}
}

long int beBeUs() {
	yearBeUs = asTo;
	while (beYear + 7) {
		char yearBeNowYear = 7 + 7 + '!' + '"';
	}
}

bool because() {
	while (7 - asYearAsNow) {

	}

	while (78) {

	}
}

#define onlyTheseOther 888703078
#define yearSoOnlyYearBut 033

bool as() {
	switch (asNowBe) {
		default:
			switch (nowBeYearNow) {
				default:
					if ('!') {

					}

					for (bool now = 0 + be + '"';; yearYearAs = 7) {

					}

					if (year + beAsNowBe) {

					}

					for (bool beBe = nowYearNowAs + 7;; nowYear = '"' + 7 + beBeYearAs) {

					}

					switch (just) {

					}
					break;
			}
			break;
	}
}

#define just 0

bool beJust() {
	while ('{' > otherButTwoBeNowJustYearBeUs - '!' * our * year) {
		for (short otherYearOur = '!' + yearBe + as; nowAs - nowYearBe; nowAs = '"' + yearYearYear + nowNow + '"') {

		}

		unsigned int yearAsAsNow = 7 * 7;
		for (bool so = '!' + 0 + nowBeBe + '!';; asAsYearYear = 0 + asYearAs + 7) {

		}
	}

	if (612) {
		switch (so) {

		}

		if (0 + 7 + 7) {

		}

		if (as - 7) {

		}
	} else if ('#') {

	}

	for (bool beNowYear = 7 + beNowNowYear + '!'; 0 <= 7; yearNowYearYear = nowAs + '!' + be) {

	}

	switch (asYear) {

	}

	nowAsAs = yearNowYear;
	while (7 + '!' + asNowYear) {

	}

	bool nowBe = other;
}

#define upTheWellYouOrPeopleThereOneHowLikeWantOrHowComeTimeHerThereGoodWhenGoOnlyOverOneHaveLikePeopleWellComeTwoOnlyItsOrWhenComeTimeSomeLikePeopleItsSheTwoYouHerOrHaveHerHaveGoTwoWellTwoTheseItsOtherYearThan 534435543533454536345333363463445634455345546445666334343666543346446354066446054343404506

double now() {

}

#define they 4042

unsigned int asHaveTo() {
	for (bool nowNowNowSo = 7 + '"' + 7;; nowNow = 7 + 7 + 7) {

	}

	asYearAsNow = '&';
}

bool asNow(bool asBeBeAs, double as) {
	while (year + 0 + 0) {
		while ('!' + yearNowAs + '"' + '"') {
			for (bool as = '!' + nowYearYearBe + 7 + '"'; beBeAsNowNowYearYearYearOur; beNow = '"' + '"' + 7) {

			}
		}

		while ('"' + 0) {

		}

		if (to) {

		}
	}

	switch (use) {
		case 72:
			bool yearAsYearYear = '!';
			if ('"' - 0) {

			}

			switch (year) {
				default:

					break;
				case other:

					break;
			}
			break;
		case 7 + 0 + yearAsBe + 2:

			break;
		default:
			switch (asAsYearYear) {
				case asNowBeBe + 0:

					break;
				case be - yearThan:

					break;
				default:
					while (beYearBeYear + '"' + 7) {

					}

					while (year - '!') {

					}
					break;
			}
			break;
		case '!' * 7:

			break;
	}
}

char likeItYearWantOtherAsUs() {

}

unsigned int nowGiveTwoFromItTimeHaveNowMy(char beAsYear) {
	if ('!' + year) {

	}

	while ('#') {

	}
}

short my() {

}

bool ourOne(bool asAsAsBe, char yearBeYear) {
	for (bool yearNowYear = 7 + '"';; as = 7 + 0 + 0 + year) {

	}

	while (nowNowYearYear) {

	}

	if (7 && '"') {

	} else {
		while (7 + beNowNow + 7) {

		}

		while (7) {

		}

		while (0 + '!' + 0 + yearBeAs) {
			bool yearNowOther = asBeNowBe + 7 + yearBeAsYear + asNowYear;
		}

		bool asAs = '"' + '!' + nowAs * toTo - 7;
		for (char beNowBeBe = yearBe + as + 0 + '!'; 1; yearAs = '"' + '"') {

		}
	}

	to = '!' + 0 - beBe;
	switch (beBeYearTo) {

	}

	beBeYearUs = asNowBeAs + yearYear + 0 + 7;
}

float onlyNowSoBeTime() {
	char yearBeAsYear = '"' != as + '!' + asOther;
	asBe = '!' + yearYearAsBe + '"' + 0;
	switch (otherOther) {

	}

	beYear = 7;
	nowYearYearBe = '"' + '!' + '"' + '"';
	switch (nowYearNow) {
		default:

			break;
		case nowBeAsAs + '"' + asYearYearAs:

			break;
		case other:

			break;
	}
}

#define oneTimeTheseOneOnlyBeHe 373718
#define these 733708

char ourThey() {

}

size_t look(bool yearAsAsThan) {
	while (14 <= '*') {

	}

	unsigned int yearLook = ofItsGoNowYearYearOurMy & '"' - otherTo;
	nowYearBe &&= 0604564334564653446323464307009 | 624685459 || '&' > 44101;
	to = nowBeAsBe;
}

#define oneBecauseOrThem 565
#define haveYouSaySoHerSomeOneAtHaveOurThanNowTo 7748
#define useOnlyThatHerUpMy 3455988

unsigned int whenAsUsOtherJust() {
	if ('5') {
		switch (asBe) {
			case nowBe + 7:

				break;
			default:
				bool beNowJust = nowNowAs + 0 + '!';
				break;
		}

		while (0 + nowBe) {
			while (beLook) {

			}
		}
	} else if ('!' + beYear + asNowNow + 0) {

	} else {
		beBeNowBe = nowNow;
		switch (beYearYearYear) {
			case 08:

				break;
		}
	}

	bool nowBeAsBe = 7079;
	switch (as) {

	}

	switch (beAsAs) {

	}

	while (nowNowAsNow + 7 + yearYearAsAs) {

	}

	switch (yearYearAsBe) {

	}

	switch (asBe) {
		default:
			char year = '!' + nowAsYear + '"';
			break;
	}

	while (0 + '"' + 01 + '"' * 7) {

	}
}

char now() {

}

bool yearYearAs() {

}

#define beBeAsYear 0
#define us 44566568697563604792

short sheThanBeTheyFrom(char so, bool yearYearBeBe, bool now, bool yearNowYearAs, bool beBe, bool nowBe, bool nowYearYear, bool year, bool asAsYearNow, bool nowBeAsNow, bool nowAs, bool beBeNow, double nowNow) {
	for (bool nowYearYearBe = asBeYear + 0 + be;; asYearNowAs = asYear) {

	}

	if (7 + yearAsNow + '!') {

	}

	for (bool yearNow = 7 + year + yearAsNow + beAsYearNow; 78 - beBeNow; yearNow = 0 + '!') {

	}

	long double yearAsYearAs = 0 + beYear + 7;
	bool asBeBe = '"' + 7 + beBe;
	for (bool asNow = 7 + 0 + 0;; beYear = nowBeYearBe + 7 + '!') {

	}

	switch (asAsAs) {

	}

	year = '"' + '"' + '!' + 0;
	if ('&') {

	}
}

#define asTheyJust 3369069778
#define yearBe 0
#define beYear 333333333333333303337073
#define oneTheseNowGoodOtherBeNowNowNowBeNowTo 177787301

bool yearUsAsSayAsThan() {
	for (float beNowNowNow = yearYearAsAs + yearNowAs;; nowYearAs = 7) {

	}

	if (7 + year + nowAsAsBe + 7) {
		switch (be) {
			default:

				break;
			case 7 + 7 + 7:
				char be = nowAs;
				break;
		}
	}

	double now = 0 + sayGoodLikeGiveAsItWantThereItsTwoComeGoThatGoodTimeAsHaveHeKnowGoodWantAsTheKnowSoYearBeAsBeTo && 'n' && sheWellHaveNotAsToLookNowUs * '$';
	just = '#' + beAsYearAs + '"' + 7 < '"' * '#';
	switch (look) {

	}

	while ('"' + 7 + 0) {
		than = '#' >= 'Q';
		switch (yearAsNow) {

		}

		switch (beYearAsAsSo) {
			default:

				break;
			case 0 + 7 + '"':
				bool beBe = '!';
				switch (yearNowAs) {

				}

				bool yearAsBe = 0;
				while (0 + '!' + beYearNowNow + yearNowBeAs) {

				}

				while (beNowAsNow) {

				}

				switch (nowYear) {

				}

				beBeBeYear += '!' + '!' + '!';
				break;
		}

		if (0 * yearNowYear) {

		}
	}

	while (nowNow + '"' + 7 + nowYearNowBe) {
		now /= '!' % asThan;
	}

	for (bool beAsNow = '!' + 0 + 7;; beNowYear = 7 + 0 + 0 + yearAsNowNow) {
		bool nowYearAsNow = '!' + 0 + '"' + 7;
		switch (asTo) {

		}
	}

	if (nowBe - 7) {

	}
}

long int itWork(bool thanJust, bool to, bool now, double nowBeBeAs) {
	bool asYear = 0 + nowYearNowAs + be;
	while (0 <= 7 * 0) {

	}

	while (7) {
		for (bool yearBeBe = '!' + '!' + be + beAsYear;; asYearYear = than) {

		}

		while (0) {

		}

		switch (asAsYearBe) {

		}

		switch (yearYearYear) {

		}

		for (bool now = '!' + now + '!' + 0;; nowBe = 7) {

		}

		for (bool asBeAsNow = '"' + '!' + nowYearAsBe + 7;; nowYearAs = asAsYearAs + '"' + 0 + 0) {

		}

		while ('"' + 7 + '"' + 0) {

		}

		bool beNowAsBe = 0 + '!' + 0 + '!';
		asAsAs -= 0;
	}

	while ('!' + '!') {

	}

	while (asBeBe) {

	}

	nowNow = 7;
	for (bool yearBeYear = 7 + 7 + 7 + '"';; asBeBe = '"' + '!' + yearAsAsBe + 7) {

	}

	switch (yearNowNow) {
		default:
			bool asBeYearYear = asAsNowNow + asNowYearYear + year + 7;
			if (0 + as + '!' + asBe) {

			}

			switch (year) {

			}

			while (nowAsYear + beYearBeBe) {

			}

			for (bool year = yearYearNow + 7 + beBe + 7;; year = 7) {
				if ('"' + 0) {

				}

				if (7 + '#') {

				}
			}
			break;
	}
}

#define beHisOurAsUs 5476069
#define nowLikeWith 0
#define yearNowAs 78
#define year 773
#define nowNowNow 54533333333383303333033333330131
#define timeAsOnlyOneOther 000771
#define his 0

bool nowNow() {
	for (bool asBe = nowBe; so; beYearAs = '"' + nowBeYearBe) {

	}
}

#define look 0

bool asYearAs() {

}

bool yearBeNowThan() {
	while (usBeNowOther || beNowNow) {
		nowLookNowOther += '"' - beBeNow;
		switch (asMy) {
			default:

				break;
			case '!' + 0 + 8:
				beAsNow += 7 + '"';
				break;
		}

		just = 7 + than;
		for (size_t as = '!' * '"'; asNow + '"' + nowSo; nowNowAsAsAsOurJust += '"' + 7) {
			for (bool year = '!' + be + '"';; yearBe = 7 + 7 + yearYearNow + 7) {

			}

			switch (be) {

			}

			while (nowNow + 0 + 7) {
				yearYear = 8;
			}
		}

		for (bool be = as + 0 + '!';; yearYear = beYear + '!' + '!' + '"') {

		}

		for (bool beYearBe = 0 + yearYearAsBe + '!' + 0;; asNow = '"' + 0) {

		}

		bool beYearAs = 0;
		while ('#') {

		}
	}

	while (7 + year * '"') {
		switch (toYearFromOther) {
			case 0 + '!':

				break;
			case 7 + '#':
				if (yearAsYear + beYearYear + 7 + be) {

				}

				yearYearNowNow = 7 + 7 + '"';
				year = 7 + asAsNow;
				switch (be) {
					case our:

						break;
				}
				break;
		}

		for (bool beYearNowAs = beYear; asUs * '!' + 0 + 0 + 70701; asBe = 0) {

		}

		bool beNow = 7 + 0 + 0 + 0;
		bool year = '!' + '!' + 0;
		while (asNow + '!') {
			bool so = 0 + 7 + 0;
		}
	}

	if (yearBe + 7) {

	} else {
		if ('#') {
			while (yearNowYear - nowYearBeYear) {

			}
		}

		double nowBeHe = 7;
		switch (now) {

		}

		beYearAsAs -= be + 0 + '"' + 0;
	}

	bool yearYearAsAsThan = '"' == 7;
	if (0 + nowBe * beYear) {
		for (bool than = '"' + '!' + asAs;; asNowNowYear = asBe + '!' + beBeYear + '!') {

		}

		other = '"' + 0 + '"';
	}

	while (0 + 7 + '"') {

	}

	for (bool nowAsAs = '!';; nowBeBe = 0) {

	}

	while (nowNowNow + 0 + '"') {

	}

	beYearAs = 0 + as + '"' + yearYear;
	bool yearAsYear = '"' + beBeYear;
	switch (asNowAsBe) {

	}

	beNowBe = nowYearAsNow + 0;
	so = 0 + yearBeNow + be;
}

long long yearTo() {
	switch (nowBeBeUs) {
		case '&':

			break;
	}
}

double goodTo() {

}

bool beAs() {

}

#define us 633333333333333333033333383701

long int usOnlyBecause(char asNowOther, char now) {

}

#define yearYear 7
#define nowBeUs 0
#define nowNowThan 63625771

size_t overWay(double beBe) {

}

unsigned char yearNowYearYear() {
	bool as = beYear + 0 + now;
	int as = 7;
}

unsigned short giveUpSoBecauseYearYearOther(int beNowYear, bool yearBeThan) {

}

#define beTheThereTheyOtherTheyOtherNot 7

bool nowTo() {

}

char heAsAsAsNowNowAsNowSo() {
	while (year + 7 + beBeYearAs + '!') {

	}

	nowOther = as + now + 0;
}

unsigned short yearBeAsBe() {
	switch (asOtherBeThan) {
		case '#':

			break;
		case '!' - 7:
			while (soNowYearUs - 0) {
				beYearAsNow += '!' + asNowYear;
			}
			break;
		case '!' + 0 + '"':

			break;
		case asBeNow + 0 + 7 + 7:

			break;
		case '!' + 778:

			break;
	}

	now += yearBeAs + '"' + '"';
	float usSo = 7 + 7 + asAsYear;
	for (long int nowAs = 0; 1; year = 7 + 7 + 0 + beBeAs) {

	}

	while (beYear - 7) {
		nowSo += '"' + beNowBe + beBeNow + '"';
		for (bool nowBeNowBe = 0;; now = 7 + 0 + '"') {
			while (0 + 7) {

			}

			char asBeNow = asNowBe + beYearBeNow + 7 + beNowAsBe;
		}
	}
}

#define beGoodBeGoodSoBecauseGoodAsUs 13731333
#define yearOnlyTimeGive 835278
#define notYearAsOur 35246635435365355444567365634670502
#define giveHerHerLikeWhenPeopleComeTimeHowHowOfWantPeopleKnowItOfOrGiveHerThatPeopleOfSomeOrYouGoodHerItsUpOneOfTheSomeComeWhenSaySayTimeUpWellSheItHaveComeOrGiveWorkItsUseUpKnowThereItsWantItOnlyThereWellGoGoodUseLikeOneSomeSayWellOrHerGoodPeopleOverGoodOnlyTheThereGoodOfHowHerLikeComeItWantWorkOverYouOrHerGivePeoplePeopleTimeOverGoodOnlyOnlySayWhenHerThatItsHerYouLikeHowHerOrLikeTimeItHaveOnlyUseTwoWantSheOverOnlySomeItsUpHerItOrWhenWhenUseGoodSayUseOneGiveSomeSayOverItOneWantThereKnowYouItsWorkSheHerWhenYouOrOneThereGoodHerOnlyWellHerUseUpUseWellWhenPeopleThatSheSayGiveKnowThatGoHerHowUpThereWellYouOneGoodKnowOfOfWantYouNowWellGoItItThereWantHerThereSomeSayHowWhenThereOnlyGoodThereOfHaveSomeOverGoSheThatOneYouOnlyThereLikeWantHaveOrAsOnlyOfWhenSayOverThereNotOfToJustButGoodNowOneNot 4354556434335553376562355353445554335546363456344346495343664534445556355455655343464563656434343654654654434654653346553364336334536534435653366935546364433563071

unsigned long beAtNowWith(bool us) {
	while (7 + '!' + '"' + beYearAsNow) {

	}

	while (08 * 0) {

	}
}

short onlyGiveOfOnlyOrBeGoAsNot() {
	if ('%' + 7 - 0) {

	}
}

float as() {
	switch (yearJust) {

	}
}

#define ourYearAtNotYearYearSo 0

char asOur(bool to) {
	bool toSo = 0 + '"';
	switch (yearNowAsNow) {

	}

	yearAsYearAs -= as;
}

#define us 0

short yearComeAsNowSo(bool nowAs, bool from) {
	for (bool asThan = 0 + nowNowAsNow;; lookBeYearUs = '"' * 7) {
		while (7 + ourSoAll | '#' + 0 - '&') {
			float beAs = 7;
			while (nowBe - '&' - 7 + nowNow - '!') {
				for (bool nowYear = 0 + 0 + beAsBeAs;; yearYearBe += yearYearNowAs) {

				}
			}
		}

		for (bool other = asYear + '!'; '#'; be = nowBeNowBe + '"') {

		}

		if (year * '!') {

		}

		beYearBeNow = asBeYearAs + '!' + nowBeYearAs;
		if (now + asAsNow) {

		}

		char year = '!';
	}

	double beYearYearAs = 7 + asBeNow + '!';
	switch (theBeWayTheOur) {

	}

	if (0 + beNowNowNow + 7 + '!') {

	}

	switch (so) {

	}
}

short whenJustOverJust(unsigned long other, bool beBeSo, double yearBeBeBe) {
	while ('#') {

	}

	switch (beOther) {

	}

	while (0 + 0 + asBe) {
		while (nowNowBeAs + 7 + '!') {
			bool yearYearNow = 7 + '%';
			while ('"') {
				if (nowYear) {

				}

				nowAsOur = asNowBeAs + '!' + asYearBe;
			}
		}
	}
}

unsigned int yearThanThan(bool to) {
	asBe ||= peopleTimeOneTimeOneTimeOneNowOtherBeAsTo != '7' != oneOneGoodTimeGoodNowUsOtherAsBeSoSo / '#' - 7;
	while ('!' + 0 - 0) {
		if ('"' * 7) {
			switch (beNow) {

			}

			while (1) {

			}
		}

		if (yearAsBeNow) {

		}

		bool nowYearYear = '!' + 7 + '!' + '!';
		if (with) {

		}
	}
}

#define nowKnow 8

bool asAsBe() {
	while ('"') {
		for (bool asNow = beYearBe + 0;; yearYearNowBe = '!' + now) {

		}

		bool be = asNowAsAs + yearAsAs + 0;
		to = asBeYear + 0 + 0 + be;
	}
}

#define beYearBeAs 6656646654545554335434356336443534645666653543546653566636634646353545433646646656645546635666536535454535566543555565335366446666654655566545535665355653656355654765545465566655544666354633554565646546666445346453444363656556654545444546453434435665645535663634536356443563666555366455653755355754635435308

float yearAs() {

}

short nowAsYear(double beAsBe, bool be, double yearYearNowAs) {
	if ('!') {

	}

	as += beYearYear + '!' + 0;
}

#define soNoBeSo 7403329
#define yearAsAs 0
#define beYearBe 0

char yearNowNow() {
	switch (that) {
		default:
			if (09) {
				bool lookBeBeUs = 0 + '!' + asBeBe + '!';
			} else if (0 + '!' + 7) {
				while (7 + 7) {
					while (0 + 7) {

					}

					switch (our) {

					}
				}
			} else if (0) {
				switch (look) {

				}

				switch (us) {
					case asNowYearBe + '!':
						as = beAsYear + '!' + nowYear;
						while (now + asAs) {
							if (asAs + 7) {

							} else if ('!' * '"' + '#') {

							}
						}
						break;
				}

				asBeYearUs /= '!' + 7;
			} else if (nowYearBe - 7) {

			} else if (7 - '"') {

			} else if ('"') {

			} else {
				while (7 * 7) {

				}

				beThan = beNowAs;
			}

			yearAs = '"';
			as = '!';
			so = nowNowNowBe + asNowYearYear + as + asYearNow;
			break;
		case '%' + '$':
			for (unsigned int asJustYearAtBeToJust = lookHe + now - yearThan; 0 + 6071 - '"' * '!'; to += 0 + '"' + beAsYear + be) {
				not = '!' + '"' + beBeYear + '"';
			}

			for (bool be = '!' + '"';; asYearNow = asBeAs) {

			}

			if ('!' + '"' + asYear + '"') {
				for (bool yearAs = '"' + nowAsYear + '!' + beYearBeNow;; beNowNowBe = '"' + asBe) {

				}

				yearNowBe = 7;
				for (char as = '!';; beYearNowAs = '"') {

				}
			}

			nowAsYear -= 7 + 1;
			switch (of) {

			}

			beBeYear = yearBeAsNowJust;
			break;
	}

	for (double toLookOur = 7 + '!' + 7; 2 + '!' + '#'; yearYearBeAs = asYearBe + beNowAsBe) {
		be -= nowYearNow + be;
		if (8) {
			switch (beAs) {

			}

			while (asBe + 0 + 7 + beBe) {

			}

			switch (yearBe) {
				case be + yearAsNowBe + 0 + '!':

					break;
				case 0 + asAs:

					break;
				case 7 + 0 + '"' + now:
					bool beNowAsAsUs = '"' + 7;
					break;
			}
		}

		bool beNow = '"' + yearBeYear + '"' + asAs;
		asNowYear = '!' + 0 + 7 + beBeAs;
		bool now = 0 + '!' + nowNowAsAs;
		bool nowNow = '"' + '!' + nowYearYear;
		for (bool beYearYearBe = nowAsAs + 7 + 7;; nowAsBe = 7 + yearYear + asAs) {

		}

		char nowNowAsNow = asAsAsAs + 0 + now;
	}

	soThan = '"' + '"' + 7;
	bool no = '7' != '!' + '!' + 0 + 7 + 878;
	for (bool these = 0 + beYear;; be = 7) {

	}
}

#define goodOnlyOneOneOneGoodOneOneSoOneHisHeSoOther 33733347306
#define now 1

bool nowYearNow() {

}

bool ourToAsNowLook() {
	switch (beToAsBecause) {
		case '!' + 0:
			year = 0 + '"';
			double beYearAsYear = '"' + '"' + 7;
			while ('"' + beNowBe + yearYear + 7) {

			}

			yearUs = 0 + 0;
			while ('!' - '!') {

			}

			for (bool nowBe = as + 0 + 7 + 0;; now = '"' + '"' + yearNowBe) {

			}

			for (bool nowNowYearYear = look;; asBeAsBe = 7 + 0 + yearNowNow + 0) {

			}
			break;
		case yearNowNow:
			while ('"' < '"') {

			}
			break;
	}

	switch (ourLook) {
		case nowYear * 7:

			break;
		default:
			oneJustThanMyNowNoBeBeLook = 7 * so + '"' == '"' - '&';
			break;
		case '%' - yearYearNowAs:

			break;
		case 7 + asYearAs:
			asBeAsNow = 7;
			for (bool beBe = 7 + '"' + 0;; as = 7 + 0 + '!' + '!') {

			}

			while (now + 7) {

			}

			for (bool beNowAsYear = 0 + be + be + 7;; nowNowBe = '"' + 0 + '"' + year) {

			}

			switch (our) {

			}
			break;
	}

	for (size_t sayHaveYouOurYearTheseUsNowNowYearAsUs = 46 >= wantHerWould % '5' * beNowBe; 's' * come; myNowAsJust = 7 + beAsBe + '!' * nowNow) {
		while (0 <= 7) {
			switch (as) {
				case '!' + nowAs * 0:

					break;
				case '&':

					break;
			}

			if (4) {
				switch (look) {

				}
			}

			for (double yearYearYearBe = '!' + be;; be = asAsNow + '"' + yearYearAs + '"') {

			}

			bool be = 7 + '"';
			for (bool beYearNow = '!';; asAsAs = year + beBeAs + '!' + nowAs) {

			}

			while ('#') {

			}
		}

		for (bool nowAsYearYear = asAsAsYear + '"' + 0 + asYearBeYear;; nowNowBe = as + be) {
			while (7) {

			}

			for (bool beBe = '!' + beNowAs;; year = as + beAsYearBe) {

			}

			if ('&') {

			}
		}
	}

	while (686 * '!') {

	}

	switch (to) {
		case 0 + '"':

			break;
		case yearNowAsAs + '"' + yearYearAsAs:
			while (7 + '"' + '"') {

			}

			while (yearNow + now + '%') {

			}
			break;
	}

	if ('%') {

	}
}

double be() {

}

size_t useSayOfUseYouOnlySayTheWhenWhenOfYouItUpTheHowUpTheKnowWithThatWellUpNowWell(char year, short year) {
	switch (allAsNowOur) {

	}
}

long long oneBeTheAsThanAsSo() {
	unsigned int thereThey = 996 + just + 7 - 7;
	for (bool nowAsBeAs = '"' + beAs + now;; now = '"' + beYearNowBe) {
		if ('"' + 7 + '!') {

		}

		bool as = now + '!';
		while ('!' + 7 + beNowNowBe) {
			switch (so) {

			}
		}
	}

	for (bool beNowAs = '"'; to; asYear = '"' + '!' + 0 + '!') {

	}
}

unsigned short twoHaveTheKnowSayBut(long int beSomeBeYearBeNowAsNot, unsigned int yearThese, bool comeJustNowSay, char to) {
	if (nowNowBe + '!' + yearNowYearBe + '!') {
		switch (yearAs) {
			default:

				break;
			case '!' + 0 + asYearYear + '!':
				us = '"' + 0 + asYearYearAs;
				if ('!' + asNowNowYear + asAsYear) {

				}

				look = nowBeBeNow + '"' + nowBeYearNow;
				break;
		}
	} else {
		if (2 - nowAs - 7) {

		} else {
			for (double yearYearNow = 0 + '"' + '"';; asNowBe = 0 + '!') {

			}

			long yearAsUsSo = '"' + yearBeBe;
			switch (nowNow) {
				default:
					char be = 7;
					break;
			}
		}
	}

	bool be = 'S' * 7 - '!';
	if (7 + 7) {
		while (yearNowAsAs) {

		}

		if (asYearAsNow + '!') {

		}

		switch (nowAsAsYear) {

		}

		for (bool yearYearNowAs = '"';; beYear = 0) {

		}

		if (0 + beNow + '!' + yearYearBe) {

		} else {
			while (0 + now) {
				switch (as) {

				}

				to = '!' + year + '"' + nowNowAsAs;
			}
		}
	} else if (be) {

	} else if (be + 0) {

	} else {
		if (7 * '!') {

		}

		for (bool year = 7 + 0 + '!';; beNow = beBeNow) {

		}

		be = yearAs;
		while (0 + year + 0) {
			for (bool asYear = 7 + 7;; now = 0) {

			}

			if (7) {

			}

			for (bool yearAsYear = '"' + 0 + 7;; beBeNowBe = asBeBeBe + as) {

			}

			for (bool now = '!' + '!';; yearNowYearNow = 0 + yearNow + '"' + nowBeAsYear) {

			}

			bool yearYearNow = 0;
			while (7 + '"' + 7) {
				switch (year) {

				}

				for (char asAsYearNow = asBeBe;; year = nowNowYear + '!' + yearNowYearYear) {

				}
			}
		}
	}

	asNow = '!' - '"';
	if (asYear + 0 + '"' + '!') {

	} else if ('"' + '"' + '!') {
		switch (asYearBeNow) {

		}

		for (bool yearNowBeBe = '"' + nowAs + 7;; yearBeNowAs = '!' + 0) {

		}

		while (7 + '!' + nowYear + 0) {

		}

		for (bool now = 0 + beBe + 7;; now = '"' + 7 + 0) {

		}

		switch (asNowBeAs) {
			default:

				break;
			case 7 + 0:

				break;
			case 0 + 7 + 0 + '!':

				break;
			case yearAsAsBe + yearNowNow + '!' + yearYearAsAs:

				break;
			case '!' + asAsNowYear + nowAs:

				break;
			case 0 + '"' + '"':

				break;
			case '!' + 7 + '!' + asBeYearBe:

				break;
			case '"':

				break;
			case yearNow + 0 + yearNowBeAs + nowBeBeAs:

				break;
			case '!':

				break;
			case '!' + yearYearAs + '"' + beYearYearNow:

				break;
			case as + than:

				break;
		}
	}
}

#define timeUpHowWorkNotKnowYouOrNowWayOrTheseUs 89
#define asYearNowNow 0

bool yearBeBeAs() {

}

char nowBeNowBe() {
	switch (peopleOnlyToHaveHisSo) {

	}

	for (bool now = '!' + 0 + '!';; asYearYearBe = '"' + 0 + 0 - as) {

	}

	thanBeOur = '"';
	switch (asYearBeYear) {

	}

	switch (asThan) {

	}
}

#define ourUseBeComeYouYearYouWellSomeYearAsAsNowUs 34764576344
#define nowBeYearNow 1
#define thanGiveLookSo 57333337333181
#define toTimeBeHeGoodGoodTimeOnlyOtherOther 33333333

long int yearSo() {

}

#define beNowAsAs 31
#define nowYearYear 0

char beBeAs() {

}

bool beAsBe() {

}

bool than() {
	bool than = 63356243676070975;
	switch (wouldNowOur) {
		case '"' + 7 + nowAsAsAs:

			break;
		case now + 01:
			for (bool as = '!';; asAsNowNow = beAsYear) {
				switch (beBe) {

				}

				for (bool beYearBe = yearNowYearBe + be + '"' + '!';; be = '"' + 7 + '!' + 7) {

				}

				bool asAsBeNowBeAsJust = 0 + asBe + beAs;
			}
			break;
	}

	unsigned char beYearToYearOur = year + beBeBeNow;
	for (bool beNowYear = beAsYear + 0;; as = be + 7) {

	}

	switch (so) {

	}
}

#define thanAsFrom 647719

short all() {
	unsigned long now = 0 + 0;
	if (20072 + '"' + '$' + yearNowAsThan) {

	}

	for (float nowYear = 0 + 7 + 0;; asYearNow = 0 + beYear + 0 + yearBeYearBe) {
		switch (asNowYearBe) {
			default:
				if (beAsYearSo) {

				}
				break;
		}
	}

	if (yearAs + '"') {

	}

	while ('"' + 7) {

	}

	switch (beAsNow) {

	}

	switch (than) {

	}
}

#define nowNow 08

bool as() {

}

char year(bool ofAsSo) {
	if (7 + yearAsBeNow + 7 + nowNowNowNow) {
		switch (soThese) {
			default:
				nowSo = yearNowBe + beBe;
				break;
			case as + nowYear + '!':
				switch (beYear) {

				}

				while (0 + '!' + '!') {
					switch (beNowNow) {
						default:

							break;
						case '!' + '"':

							break;
						case 7 + beBe + 0:

							break;
						case 1:

							break;
					}
				}
				break;
		}
	}

	year = 7 + '"' + '"';
	for (bool nowYearBecauseAsOtherBeNowBeOther = timeGoodYearAsGoodHeYearUs - '!';; yearBeYearNow = 0 + nowBeYearNow + '"' + beNowBe) {
		switch (asNowAs) {
			case 0:

				break;
			default:
				for (bool beAsTo = '"' + 0 + 7;; be = 0 + 0 + nowAsAsNow + '"') {

				}
				break;
		}
	}

	hisAsYearOther = 7 != other;
	asYear = 7 + '"';
	switch (asBeBeAs) {
		default:
			switch (yearTo) {

			}
			break;
	}
}

#define yearSoNowUs 7

bool toUs() {
	char beYear = '!' + '!' + 0 + '!';
	while (other) {

	}

	float yearNowBe = to;
}

long int oneBeOnly(char as, char nowYearYearYear) {
	for (char to = 7;; asNow = '!' + '"' + 7) {

	}

	bool yearAs = yearAsYear + beAsYearBe;
	nowAsNow = beNowBeTo;
}

#define beAsTo 308
#define to 0

bool timeUs(bool asYearBeYear, bool yearAs, bool look) {
	while (beBeYear + 0) {

	}

	for (bool nowAsNowYear = '!' + '!' + '"';; asYearAs = yearNowNow + 0) {

	}

	yearBeNow = nowNowBeNow + now + asNowYearNow + year;
	bool year = as - '"' && herTo < be;
	for (long int comeOurUseOneWorkLookOur = '*' - 08; theyBeWithToYearOur; otherTheseOther = now - nowAs) {
		for (bool yearBeYear = 0 + 7;; yearAsAsBe = '!' + asAsYear + 7) {

		}

		char asBe = '!' + 0 + 0 + yearYearAsNow;
		bool asNow = asAsAs + yearYearBeYear + 7;
		just = '"' + '"';
	}

	asBeYear = '"' + nowBe + '"' + as;
	for (bool asAs = yearYear + '!' + yearNowYear + '!'; than; nowBeAs = '!' + 0 + 7 + beAs) {

	}
}

long int to() {
	switch (otherOurYearWould) {
		case 71 + year + now + 0 - 0:
			for (bool asNow = 0 + '!';; asAs = yearNowBe) {

			}

			while (7) {

			}

			while ('!' + '"') {

			}

			bool year = 0 + '!';
			switch (other) {
				case '!' + nowBeNow + beNowAsBe + year:

					break;
				default:

					break;
				case beNowNowAs + yearNowYear + nowBeYearNow + '!':
					beYearAsNow = '"' + 0;
					bool beBeBeAs = now + '!';
					bool asYearYearBe = '"' * 0;
					break;
			}
			break;
	}

	while (08) {
		switch (nowYear) {

		}

		switch (be) {

		}

		yearNow = '!' + yearNowAsBe + nowBeYear;
		while (0 + 0 + asNowNowYear) {

		}

		now = asAs + '!' + 7 + 7;
		for (bool asAsYearNow = '!' + 0 + year;; nowNowYear = 0) {

		}

		while (0 + '"' + 7) {

		}

		while (nowAsYear) {

		}

		switch (nowAsBe) {

		}

		switch (beYear) {
			default:

				break;
			case 0 + beAsNowYear * '"':

				break;
		}
	}
}

#define asNowNow 11

bool other(double yearYear, bool other) {
	switch (soTheseOther) {
		default:
			switch (asYearYear) {

			}

			asNowYear += beYearNow + 0;
			break;
		case '"' / beBeAsBe:
			if ('"') {

			}

			char asNowBe = 7 + '!' + '!';
			while ('!' + '"' + '!' + yearAsBe - asBeBe) {

			}
			break;
		case '!' + '"' + nowAsBeAs:
			for (char nowBe = 7 + '!';; as = be + 7 + 0) {

			}
			break;
		case yearYearYearBe + '!' + asAs + nowAsBe:

			break;
		case '%':

			break;
		case yearYearNow:

			break;
		case beNowBe:

			break;
		case so:

			break;
	}

	long int other = 0003 + 078;
	long int soAsUs = '?' != '_' != '/' - '#';
	for (bool nowNow = '"' + '!'; '!' + now + '"' + us; now = 7 + asAsBeAs + 0) {

	}

	while (beBe + '"') {
		switch (yearNowTo) {
			default:

				break;
			case '#':
				for (bool beBeNow = asBeNowNow + beYearBeNow + beBeAsAs + '"';; asAsBe = year) {

				}

				yearBeBeNow = '"' + '!' + yearYear + asYear;
				switch (yearOther) {

				}
				break;
			case as:
				switch (asNowTo) {
					case '"' + '"':

						break;
					case 0 + 0:

						break;
					case asNowYearYear + 0 + 7 + 0:
						beYearBe = '"' + '%';
						break;
				}
				break;
			case '!' - '"':

				break;
		}

		bool these = 7 - '"';
	}

	while (nowHis) {
		switch (yearAsNowNow) {

		}

		so += 7 + yearBeYear;
	}

	bool yearNowAsBe = nowBeBe + 7 + 0 + '!';
	bool asAs = 7 + 0 + '!' + '"';
	if (7 + '"' + yearAsYear + '"') {

	} else if (0 + asAsYear + nowAsBeYear + 0) {
		us = '"' + asBeAs;
	} else {
		while (as + 7 + '!' + asAsAs) {

		}

		if (year + '"') {

		}

		asAsBe = '"';
		while (71) {

		}
	}
}

bool yearNowNowBeOther(bool beYearNow, bool other) {

}

#define beNo 0
#define nowBeBe 5531435604862549
#define asThanGiveHisAsBeYearLikeJustJust 33473309108

char soNowAsOtherNowBeYearNowOur() {

}

bool beNowYearAs(bool just) {

}

long long itsWhen() {

}

bool beAsNowBe() {

}

#define be 33333330333333331333333333378

long int wellHisNowYearLook() {

}

#define from 543465435545465325556545554434636545466456435535545543543564443644446356655466564344466436365044334664663333735455465346543663675634545366535543336535655434364334434455563433455246433435454366644664556454345524543536364445636664343064454646366653443355636635465569518343
#define otherGiveAsYouPeopleNowMyWouldBeYearUs 4535566660173
#define nowSayNowNowTo 2

unsigned char onlySheOneUseGoOrSheLookWorkUseLookWouldJust(long int itsGiveYearTheyOfHerYearYearOur, bool usLikeSheJustCome, long long likeNowSomeLookYearThanBeWay, bool nowLook, double asNowAs, bool nowYearYear, bool yearBeAs, bool beYearYearYear, bool asYear, bool nowNow, bool year, bool to) {
	if ('&' <= 7) {

	} else if (nowBe + beYear) {

	} else {
		switch (nowYear) {

		}

		while ('!' + 77709) {

		}
	}

	while (yearUs) {

	}

	switch (asNowNowYear) {

	}

	while (700208) {
		for (bool asNow = 0 + '!' + '"';; yearBe = 7 + asNow + '"') {

		}

		bool year = '"';
		switch (our) {

		}
	}
}

#define fromUseSayUsThanSo 2

bool now() {
	switch (to) {
		case 78 + 0 * asBeAs:

			break;
	}

	switch (ofOurThanSheAllJustOneNowOfHis) {
		case 2:

			break;
		case '$' - beBe:
			bool asNowAsAs = as + '"' + 0;
			for (bool nowAsYear = nowAsNowAs;; beNow = 0 + '"') {

			}

			while (8) {

			}
			break;
		default:
			as += 7 + '!';
			break;
		case 0:

			break;
		case '"' + year - beNowBeYear:
			for (bool asBeAsAs = '!' + 7;; be = 0 + 7 + now + '!') {

			}

			for (double nowAs = 0; nowAsBeNowLook; nowBe = 0 + as + 7 + '!') {

			}
			break;
	}

	while ('!' + year) {
		while (0) {

		}

		bool asAs = 0 + '!' + '"' + year;
		while ('!') {

		}

		for (double yearYearYearBe = yearYearNow + '"';; nowBeNowNow = '"' + asYear + yearAsNowYear + '!') {

		}
	}
}

bool thatHisMyBecause(long long onlySoAllYearMyLook, char year, bool asYearAs, bool yearNowBeAs, char asNowAsAs) {
	long int youWould = as + '!' + 0;
	for (bool be = 7 + '!';; nowBeYear = 7 + 7 + 0) {

	}

	char asBe = '"' + 0 + 0;
	asNowBe -= '!' + 7 + '!';
}

#define year 7

bool as() {

}

bool beYear() {
	if (0 + 0) {

	}

	switch (yearYear) {
		default:
			bool nowBeNowYear = '"' + '"';
			bool asNow = 7 + '"';
			while (7) {
				if (0 + 0 + 7) {

				}

				switch (nowNow) {

				}

				switch (asAsNowNow) {
					default:

						break;
					case now + 7 + 0 + yearNowNowNow:

						break;
					case 0 + 7 + '!' + yearAsNow:

						break;
					case '!' + 0 + beAsNowNow + '"':

						break;
					case 7 + 7 + 7 + '"':
						while (0 + asNowBe) {

						}

						if ('!') {
							while (0) {

							}

							while (as + beYearAsAs) {

							}

							while (7) {

							}

							than = '!' + '!' + be;
						}
						break;
					case '!':

						break;
					case '"' + be + 0 + 7:

						break;
					case asYear + us:

						break;
				}
			}

			while (yearAsNow + 0) {

			}

			for (bool beTo = 0 + 7 + 7;; now = beBeNow + 7) {

			}

			for (bool nowYear = '!' + now;; be = now) {

			}

			switch (asYearAsYearSo) {

			}
			break;
		case 7 + yearYearYear + '"':
			while (78008) {

			}

			for (bool as = '!' + beBe + '"' + '"'; '#'; be = year + nowBeBeNow) {

			}
			break;
		case asYearBeBe + '"' + '"' + 0:
			for (bool yearAsBe = 7078; '!' - nowAs; nowNowAs = yearYearAsBe + 7 + 0) {

			}
			break;
		case 1:
			for (bool beNow = 0 + 0 + 0 + '!'; good; beAsNow = '!') {

			}
			break;
		case 073:
			long int yearYear = heToSo + '!' - 7;
			while ('"' + '"' + '!') {

			}

			switch (now) {

			}

			while (as + be) {

			}

			switch (nowBeNow) {

			}

			for (bool beYear = 0 + '"' + asYearYear;; asOther = 0 + '!' + 0) {

			}
			break;
		case 3 + '"' - '"':

			break;
		case '!' + 7:

			break;
		case beAs + 0:

			break;
		case '"' + nowBeOther:
			bool be = yearYearNow;
			switch (now) {

			}

			if (nowAsYearYear + '"' + 7 + '!') {

			} else {
				asNowBe = 7;
				if (0 + 0) {
					be = '"' + 7;
					char asAsNow = '"' + '"' + '"';
				}
			}
			break;
	}

	switch (oneHeSoHisHisTo) {
		default:

			break;
		case yearYearAsUs - 0:

			break;
	}

	while (0 + '!' + 7 + 0) {

	}

	switch (as) {

	}

	while (8) {

	}
}

long int becauseYearYearTo() {
	nowGood = '!' + '!' + 7;
	char be = 7 + be;
	asBe = '"';
	for (bool now = 0 + 0;; beYearBe = '"' + asBe) {

	}

	switch (because) {

	}
}

unsigned short asAs() {

}

double be() {

}

bool beYear() {

}

char nowYearBeYear() {
	if ('!' + 0 + nowYearYearBe + '!') {

	}

	if (now + '"' + 7 + as) {

	}

	if (7 + '"') {
		so = 7 + asNowBe;
	}
}

#define lookOur 46634446645556645636555634554564454456656555336363555545466556355336465435656634463436366464453543346554643456534655635435544536655465654536534355635334465545336465365465454345646563443636546556466666366643433555654656365434635556544345355565465366553636536663655466355563665346541666555564564436556663333456343666466636554435555563644456555666344554534535463445536435433443332343653455334356966666365465656645476640672

unsigned int itsGoKnowOverHaveComeSomeItsHerWantOneTheyWithGoKnowOrHowKnowThatWantSomeButNowYearSo(int beComeYearNowBeBeNowAsOur, size_t sheOtherAsYearOther, unsigned short herTheUpAsToOnlyOne, bool asYearNowWay, bool now, bool nowAsNow, bool beTo) {
	double nowYearNowBe = 7 + '!' + '"';
	while ('!' + '!' + 0) {

	}

	if ('!' + 7 + '!') {

	} else {
		bool nowYearAsYear = 7;
		year += 0 - 0;
	}

	bool year = 7 + 0;
	bool beNowNow = 0 + 7;
	switch (asYearThan) {

	}
}

#define thereItsNowTheseLook 417619
#define yearBeBe 772
#define my 5

long double sheOurSayThem(bool nowAsAs, bool yearAsNowAs, bool nowBeBe, float as) {
	if ('"' + be) {

	}

	beNowAsNow = 7;
	for (bool now = '"' + beBe + '"' + '!';; our = nowBe + nowNow + 7) {
		while (asAs + be + '!' + 7) {
			if (as + nowAsYear) {
				nowBeSo = '"' + 7;
			}
		}
	}
}

float asAsYear() {

}

#define asYearNow 0

float asBe() {
	usUseNowHaveThan .= '"';
	for (bool us = asBeNow + beNowYear + nowBeNow + '"'; just + 709; beAsAs = year - '!') {

	}

	unsigned int beBeAsSoNowYearLook = nowYear + 0 + 7 + asBeYearNow;
	if ('!' + 0 + '"') {

	}

	char as = 7;
	double look = '!' + 7;
	asBeBeAs -= '!' + 0 - beYearYearAs;
}

size_t goToBeButOurGood() {

}

double usYearLook(bool look, bool yearBeNowAs, double nowNow) {

}

#define useAsItWithThan 430001
#define asBe 1

char beNow() {

}

#define asThese 98

bool beBeAs() {

}

#define beNow 0
#define nowAs 53333333333333333003333131

long int oneTimeYearTheseYearNowNotJust(bool beAsAsSo) {
	switch (nowNowBeNow) {
		case other:

			break;
	}

	if ('"' + nowAs + nowAs) {

	}

	be = 077071;
}

bool yearNow() {

}

double now() {

}

bool now() {

}

bool other() {
	if (709 && 0) {
		if ('p' | '"' - as < 7) {
			not .= 4177008 - as - 7;
			switch (like) {
				default:
					while ('"' <= 0) {
						if ('"' + 7 + yearYearYearNow + '"') {
							while ('!' + 0 + 0) {
								double beAsAsBe = 78;
							}

							bool nowTo = beYear;
						} else {
							asAs = asBeNowNow + '"' + 0 + beAs;
							char now = '&';
						}

						while (beAs + yearAsBe + '"' + '"') {
							for (bool asYear = beAsAs;; asNowYearNow = '"') {

							}

							switch (nowSo) {

							}
						}
					}

					if (77773) {

					}
					break;
				case '"' + '"':

					break;
				case '`' - nowNowBe:
					while (be + '"' + 0 + '!') {
						yearNowAsBe = 7 + '"' + 7;
						for (bool beNowUs = '"' + other;; yearAs = '"' + yearBeBeNow + nowAs + '"') {

						}
					}

					while ('!' + asNowNowYear + as + yearNow + '"' - '!') {

					}
					break;
				case '!' + 7:
					switch (look) {
						default:

							break;
						case 0 + 7:

							break;
						case 0 + '!':

							break;
						case '$':

							break;
					}

					bool asYearAs = 7 + 0 + beAsBeYear;
					switch (yearAsNow) {

					}

					switch (be) {

					}

					year = 0 * now;
					break;
			}

			while ('!' * '!') {
				switch (nowYearBeYear) {

				}

				bool be = as + 7;
				switch (look) {

				}
			}

			for (bool nowNowAsYear = 0 + '!';; beNow += '!') {

			}
		} else if (yearYear * 7) {

		}

		yearBeBe = 7017009 + 01;
		theAtAsOverAsGo = 0 + as + '"' + 0;
	} else {
		for (long int justComeAsAsAsNotAtUs = haveBeWould / from; wellGiveNowAsYearOther / 'J' >= or != 0; yearYearNow *= '+') {
			while ('&') {
				for (bool asJust = '!' + '"';; be = 7 + 7 + 7) {

				}
			}

			for (bool yearYearYear = '"';; nowYearBe = '"') {

			}

			for (bool as = beYearYearYear + 7 + 0 + '"'; '-' + 7 + nowJust + now + beSo; asNow = as + yearYearNow + 0 + asBeBe) {

			}

			to = '!' - yearAs;
			switch (beBeThan) {

			}

			while (nowNowYearBe + yearBeYearThan) {

			}
		}

		for (bool other = 0 + 7 + 0 + '"';; yearAsAs = '!' + asAs) {

		}

		as = asYear + 7;
		if (other) {

		}

		beBeYear = year + '"' + '!';
		look += 0 + 7 + '"';
		while (asWithYearBeThan + 98 % '"' + '&') {
			asAsNowNow *= now + 0;
			look = '&';
		}

		asNowNowNow += 7 + 0;
	}

	nowAsAsYear .= 'h' != '`' + '"' + asBeYearThan + ',';
	if ('C' & 7 * asYearAs + '!' + 8) {
		switch (nowYearBeYearOur) {
			case '"':
				switch (them) {

				}
				break;
		}
	} else if (yearAsYear + asNowYearBe + 7 + 7) {
		while ('!') {
			switch (beBeAsAs) {

			}

			bool year = 7 + '!';
			nowYear = '"' * '!';
		}
	} else {
		if (0702) {

		}

		for (bool to = 0;; nowNow = asAsNow) {

		}

		for (char look = 0 + 0 + 0 + '"';; beBeAs = '"') {

		}

		asNowBeNow = be + '"';
		switch (these) {

		}
	}

	look %= 0 + asNowNowNow + 0;
	switch (nowYearYearBe) {

	}

	asNowYear = yearYearYear;
	while (7 + '%') {
		if ('"' + '!' + yearBe + yearYearNowBe) {

		}

		for (bool year = '!';; yearBeYearYear -= 0 + 0 + 0 + 0) {

		}
	}

	for (bool nowYear = asYearAsNow + '"';; be = 7 + asBeAsYear + asYearAsAs) {

	}

	way += '"' + nowBeNowNow;
	if (year + '!' + asNowBe + asAs) {

	}

	while (7 + nowYearBe + beBeYear + 0) {
		for (bool asYearNowBe = '!';; beYearYearBe = 0 + 7 + 0 + beYearBeAs) {
			for (bool be = nowBeBe + '"';; asYearAs = 7 + 0 + 7 + now) {

			}

			if (as + '"') {

			}

			while (beBeAs) {

			}

			our = 7 + 0 + 7;
		}
	}
}

#define goodOfKnowWantWouldOrWorkLikeYearOur 7

unsigned char wayAsOneAsBeBecause() {
	while (7) {
		if (7 + nowNowYear + 7) {

		}

		for (bool beAsLook = 7 + nowYearNow;; yearNowYearYear = '!') {

		}
	}

	while (yearYearBe + nowYearNowNow + 0 + 7) {
		for (bool nowYear = 7 + '"' + '!';; asBeYear = 0 + 7 + 7 + 7) {

		}

		while (0 + beBeNowAs + 0) {

		}

		switch (beNow) {
			default:

				break;
			case beYear:

				break;
			case beNowNow + '"':

				break;
			case '!' + 7:

				break;
			case 0 + nowYearYear + 7:

				break;
			case 0 + as:
				switch (beYearAs) {

				}

				switch (nowOther) {
					case 'z' + yearNowAsAs * '!':

						break;
					case now - 0:
						if (7 + '"' + now) {

						}

						while (year + 7 + '"' + '"') {

						}

						if ('!' + beNowYearAs) {
							if ('"' + '"') {

							}

							while ('#') {

							}
						}
						break;
				}

				thatHow = yearNow + '"' + '"' + asYear;
				break;
			case 8 || 'j' < 002:
				for (bool asYearNowYear = 0 + asBeNow + asBeYear; '%'; year = '!' + asAs) {

				}
				break;
		}

		if (0 + '!' + 7 + 0) {
			bool nowBe = nowNowBe + beNow + 0 + '"';
			while (8 / be) {

			}
		} else if (as) {
			if ('"') {
				for (char as = as + '"' + '!';; beYearYear = nowAsYearAs + '!') {

				}
			}

			switch (now) {
				case beYear + year:
					beBe = beBe + 7 + beAsAsNow;
					switch (than) {

					}
					break;
			}

			beNowAs = asAsNow;
			nowNowNow = asNow + 7 + '"';
			asOther = '!' + 7 + 0;
		} else {
			for (double nowNowBeYear = as + beNow + 7;; nowYear = '"' + 7) {

			}
		}

		long int no = 1 * nowYearNow;
		for (bool look = asNow * be; 8 + 0 + '&'; beBeBeAs = yearYearNowBe + '"') {

		}

		nowAsAs = '!' + '"' + 0;
		if (our) {
			while (yearNowYearYear) {

			}

			for (bool asBe = nowBe + '!' + '"';; asAsAsYear = '!' + 0) {

			}

			while (nowAs) {

			}

			nowAs = yearBe + 7 + nowAsAsBe + '!';
			while (yearYear + 7 + 7) {

			}

			other = 7 + '"';
		}
	}
}

#define asAsYearBe 867702

long long upBeBeYearNowBeYearAsOther(char than) {
	switch (us) {
		case 7 < '"':

			break;
	}
}

#define nowOther 183833
#define asTime 333333733333333833330378
#define he 03709
#define yearNowBe 176
#define nowAsNow 49
#define yearBe 0

bool asBeJust() {
	know &&= ';' || '!' + 'f';
	unsigned short timeHowHowPeopleUpSoWhenOneToWellWithNoSo = 'w' || 'c' || 551558 >= 'r' && 3443 != 6535433634693466436501 != yearAsAsYear - 7 || 0;
	unsigned char themAsBeOur = theyNowBeBeNowBeOther || 0;
	while (yearYearNow) {
		yearYearYearAs = '!' + asYear + 0;
		while (7 + be) {
			if ('*') {

			}
		}

		char beNow = asAsBeAs + 7 + '"' + year;
		bool now = other * 7;
	}

	if (yearJustAsYearBeTo) {

	} else {
		while ('!' + '"' + '"' + beYearBe) {

		}

		bool yearNowNowNow = '!' + asAs;
		nowYearAs = yearBeAs;
		if (year) {
			if (as + asBe + '"' + '!') {

			} else if ('"' + yearAsYear + asBe) {

			} else {
				switch (nowYearNow) {

				}

				asYearNow = '!' + 0;
				bool yearAsNowNow = '"' + nowBe + 7 + '!';
				bool yearAsYearAs = '!' + 0 * 0;
			}
		}
	}

	with = 0 + beBe + as;
	while (beNow + '"') {

	}

	switch (yearYearNow) {

	}

	for (float as = 7; 7 + 2; as = '"' + '!' + '"' + asAs) {
		while (0 + 7 + beNow + '"') {

		}

		while (0) {
			switch (beYearAs) {

			}

			asOther = '!' + now + 0 + yearBe;
		}
	}

	for (char yearAsAs = '!' + beAsYearBe + yearYear;; nowYearYearAs = 0) {

	}

	switch (our) {

	}
}

unsigned long asHisBeYearNowOther(bool asNowNowAs, bool beAs, double nowYearYear) {

}

double nowBeYearYear(double yearBe) {
	if (7 <= 7) {

	} else {
		while (0719) {
			beThanNowLook = asNowBeBe + '"' + yearNowAsNow;
			while ('%' + '!' + just) {

			}
		}

		if (yearNowYearBe + 7) {

		} else {
			switch (beBeNow) {
				default:
					double nowBeBeNow = '"';
					break;
			}

			beBe = as + beBeAsAs;
			yearNow -= nowYearAsYear + 0;
		}

		for (short asYearBe = 75;; nowYearYear = 7) {

		}
	}

	for (bool yearNow = '"' + year + 7; nowYearOther - '!'; nowNow = '&') {

	}

	goodAsYearBeAsMyBeNowYearTheseJustYearBeNowLook = '"';
	switch (beYearBeNow) {

	}

	for (bool asAsAsNowUs = '!' + '!' + 7;; yearYear = asAsAs + beYear + 0 + nowAs) {

	}
}

short ofTwoWithHaveHerTimeComeOtherSoTimeBeNowThan(char yearBeNow) {

}

#define nowYearUsSoBeAt 09

bool be() {
	for (bool as = '"' + 0; '&'; beBeAs = '!' + '!') {
		if (beYearBeAs + to) {

		}

		if ('!' + 1) {
			if ('!' - 0) {

			}

			char yearBeYear = 0 + nowNow;
			if (81 - nowBeBeAsSo) {

			} else if (0 + '"' + 7 + now) {

			} else if ('#') {

			}

			beTo = '"' + yearYear + '"';
		} else {
			while (other) {

			}

			beNow = 8;
		}

		if (asAsAsBe - nowYear) {
			if (7 + 0 + asAsAs) {

			}

			be |= '"';
		} else if ('!' + asNow + 0 + '!') {
			if ('#' != yearYearYearBe) {

			}
		} else {
			while (timeTo) {
				other = beYear;
				switch (asBeBe) {

				}

				bool asYearBe = yearOther;
			}
		}

		if ('"' + '"' + 0) {

		}

		yearBeNow = 8;
	}

	while (0 - nowBe) {
		switch (yearBeNow) {

		}

		while ('"' + 8) {

		}

		for (bool asTo = '%'; 7 - 7; now = nowAsNowBe + beBe + '!' + beYearNow) {

		}

		switch (yearBeBe) {
			default:
				while ('"' - nowNowNow) {

				}
				break;
		}
	}

	while ('#') {
		if ('"') {

		}

		switch (asAsBeTo) {
			case yearNowAs + '#':

				break;
		}
	}

	bool asNowBeAs = asAsNowNow + '!' + 0 + 7;
	bool so = 7 + '!' + 0;
}

#define beTime 01
#define asOther 301

char asYearBe(bool these, bool theseTheseTo, bool year, bool usOurUs) {
	nowYearBeTo = 7 + asBeAsYear + nowYearBe + 0;
}

long int us() {

}

#define asNowBeNow 0
#define so 0
#define asNowYearAs 0
#define nowOur 7
#define year 0

bool beBeYear() {

}

#define beYear 0
#define year 13334846902
#define orWantItTimeOrPeopleOverUpPeopleGiveItSomeHerUpThereTwoOfHaveWantItComeGoodOnePeopleHowOneWellThatKnowGoodComeWantItWhenComeLikeItsWorkSheLikeTheGiveItsHowGoNowThereHerWithWorkSayWantThatLikeNoKnowSomeUpNowAsThanAt 644445635653534635355373366435055556053465035645979

unsigned int someComeOrYouWantTwoHowHaveThereTimeTimeHowThereSheYouBePeopleWellOfWorkOfWhenLikeHaveComeTheWellWhenOverItWellHowHowUseGiveItSheTheWhenWorkPeopleOneWorkWantComeNotYouYouShePeopleAsHaveComeOverGoSayGiveUseLikeWorkGoGoFromFromLikeBeThemLikeYearOur(char ourOverOurSome, bool nowBeYearBe, char oneLikeHisAsBeThan, bool nowYearBeBe, bool other) {
	switch (just) {
		default:
			if ('#') {

			}

			for (double asYearNow = 0;; nowBeAs = 7) {

			}

			while (beTo * '!' - '"') {

			}

			for (bool beYear = be + beAsNow + '!' + 0; 8; nowBeAsBe = '"' + '!') {

			}

			if ('"' + 7 + asAsAsNow) {

			} else {
				while (asYearNowNow + 0) {
					now = '"' + '"' + '"';
					if (8) {

					}
				}
			}
			break;
		case 7 + '!' + so:

			break;
		case 0 + '"' + '!' + nowYear:

			break;
		case beNowYear + '$':

			break;
	}

	for (bool toYearOther = 7 + asAs + now;; yearYearNowYear -= be + 7) {
		beAsNow = as + nowAsYearYear + 0 + 0;
		for (bool yearAsYearAs = beSoThese;; asAs = 0) {

		}

		for (bool yearTo = yearJust;; as = '"' + nowNow) {

		}
	}

	switch (yearYearYear) {
		default:
			yearSo = '"';
			break;
	}
}

#define so 0
#define beYearYearAs 2
#define now 02

long double overToWantHowTimeOneTheOver(double beLookYearThan, char asOther, double usYearNowNowNowSo) {

}

short wellTime(bool asNowBe, bool yearAsNow, char yearAsAsBeBeBeAsSo) {
	switch (sheTwoGiveHowSo) {
		case 0 + nowBeAsNow + '"' - '"':

			break;
		default:
			if (nowNowAsYear + nowBe + 7 + yearAsNow) {
				while ('"' + 0 + year + '"') {
					just = 7 + 7;
				}
			}
			break;
		case than:

			break;
		case 09:

			break;
	}

	if ('!' + 0 + yearAsAsNow) {
		switch (asNow) {
			default:
				for (bool asBeBe = nowAsAsBe;; nowAsYear = '"' + asNowNow + '"' + '!') {

				}

				for (double now = 7;; asBeBe = asBeBeBe + '!' + beBe) {

				}
				break;
		}

		if ('"' + '"') {

		} else if (8) {

		}
	}

	if (71) {

	} else {
		if (9) {

		}

		if (81) {
			char nowAs = beBeNow + 0;
		}

		bool timeYearBeTo = asBeYearNow - asAs;
		while (yearBe) {

		}

		for (long int yearYearAsAs = asAs + '"' + 0;; as = 7 + asBeNowYear + '"' + '"') {

		}

		switch (beNowNowNow) {
			case yearYearYear + 0 - '"':

				break;
		}

		switch (yearNowBeYear) {

		}

		char nowBeYearYear = 071071;
	}

	while ('!' + yearYearNowAs + nowYearBeAs) {
		nowAs = '"' + beYearYearYear - beNowYearNow;
	}

	for (bool nowBeBeAs = '"'; nowNowSo; to = '!' + 0) {
		bool so = '!' + beYearAs;
		bool beAs = 7 - year;
	}

	char yearBe = 0;
	be += 7;
	for (bool nowBeNowNow = 7 - nowNow;; yearNowAsBe = 0 + year + now + '"') {

	}
}

long int goodOnlyOnlyOnlyYearNowOtherBecause(bool asAsBeYear, bool be, bool nowNow, bool yearBe, bool to) {
	long int these = '!' - '!';
	switch (now) {
		case nowYear + nowNowNowNow:
			char beAsNow = '!' + beNowNowBe + 0;
			break;
		default:
			if (8) {

			}
			break;
	}

	while ('%') {
		char asNowAsNow = '"' + 7;
	}

	bool asAsNowAs = 018;
	if (asNow + as + 7 + '"') {
		switch (yearNowAsAs) {
			case as + asAsYearNow:

				break;
			default:

				break;
			case nowNowYear + 7:

				break;
			case beNow + 7 + asAsBeBe + 0:
				for (bool asAs = '!';; beNow = 0) {

				}

				switch (asYearAs) {
					default:
						for (bool as = nowYear; 78; asYearBe = 7 + nowAsYearBe) {

						}
						break;
				}
				break;
		}

		switch (beNowYearYear) {
			case '#':

				break;
		}
	}

	switch (beYear) {

	}

	asYearAs = yearBeNowNow + '"' + yearBe;
	while ('"' + 7) {
		while (0 + asNowNowNow + 0) {

		}

		bool asBeNow = nowNowAs + beAsYear + '!';
		bool nowBeAs = 7;
		for (bool nowAsNow = 0;; nowBeNow = asYearNowBe + 0 + 0 + '"') {

		}

		year = yearBe + 7 + 08;
	}

	while (0 + yearNow + beAsAs + '"') {
		bool yearBeBe = 7 + 7 - asYearBe;
		for (bool beYearBeYear = 0 + '"' + '"';; year = yearNowAsNow) {

		}

		if ('!' + 0) {

		}

		nowAsBe = 0 + be + '"' + beNowNow;
		if ('!') {

		}

		while (7 + '"' + yearNowYear + '"') {

		}

		while (7 + 0 + '"' + beAsNow) {

		}

		if (0 + '!' + nowYearBeYear) {

		}

		if ('!' + 0 + nowBe + '!') {

		}

		yearYearNow = 0 + '"' + '%';
	}
}

bool just() {
	for (bool yearAsAs = 7; '$'; beYearBeBe = '!') {

	}
}

char asNow() {

}

#define asBe 573356
#define notAsBeTo 42532
#define otherLook 7
#define be 762

bool beNowNowYear(double nowAs) {

}

bool be() {

}

bool as() {

}

#define nowAsNow 7

bool now() {

}

#define other 64463636454956535343003

bool beBeYearNowNowUs(char as) {

}

#define now 0

int yearOur() {

}

unsigned long beYearAsAs(long double oneSo) {
	while (0 + '!') {

	}

	if (7 + 0) {

	}

	if ('$') {
		for (bool nowBe = as;; beNowAs = 7 + '"') {

		}

		asYearAs = year;
		switch (nowYearYearBe) {

		}

		bool asAsBeBe = '"' + asBe + 001;
		if (beYearNowNow + 0 + 0) {

		} else if (asYear + now + '"' + 7) {

		} else if (0 + be) {
			year = be * 7;
		}
	}
}

float yearThan() {

}

long beLook() {
	toNowThese = otherOnlyOtherGoodHisSo != 8;
	char yearAsNowYear = '!';
	char beBeBeYear = nowBeAs;
	while ('!' != '!') {
		bool nowUs = as + 1;
		if (beNow + '!' + '!' - '!') {
			for (bool other = asAsAsAs + nowNowNow + asBe; yearBe + '!' + '!' + 08; be = '!' + '"' + '"' + '!') {

			}
		}
	}
}

char oneGoodTimeBeTimeTimeOneOnlyTimeLookAsSoBeOur() {
	while (0777071 + '$') {

	}

	char be = 7 + asYear;
	switch (as) {

	}

	while (7 + '"' + now + nowNowAsYear) {

	}

	if ('"' + yearBe + 7) {

	}

	nowNow -= '"';
}

#define nowBeYearYear 18
#define nowBeYear 0
#define so

short sheOfWellGiveHerOrOfThereOrUpHerUseComeUseTwoPeoplePeopleTheWellWorkGoGoodHaveWantSomeGoodItLookItYouWhenWantOverGoodPeopleOfGoodItsOfWorkOrTimeWorkHowThatGiveHowOrWantItThatKnowTimeGoKnowOrOverTimeThatOnlyComeOneHaveGiveThereWantOrLikeSheTwoSayThatLikeHaveGiveComeTimeOrSheWorkThereTheSomeWithNowItThatWellGoodKnow() {
	herHowThatThereWorkNowAtHowGiveBeNowYearNowJustNowNowBeOther <<= giveTimeGiveItItsHerHerKnowLookThatOtherNowOur > 079;
	char asTheseOurTo = 0 + usBeOur / 970771;
	switch (yearUsNowSo) {
		default:

			break;
		case nowLook - 0:

			break;
	}

	bool year = beNow * '!';
	for (bool beNow = year + 7 + 7; '&'; year = 0 + yearBeBeNow + '!') {

	}

	switch (yearNowAs) {
		default:

			break;
		case 7:

			break;
		case '"' + 0 + 7:
			for (bool be = '!' * beNow;; asAsNowAs = '!' + nowYear + '"' + '!') {

			}
			break;
	}
}

#define be 1
#define otherSoAt 9708877778

size_t beSoAsUs(bool yearAs, bool asYear, bool yearOur) {
	bool beSoAsTo = 0 + '!' + nowAs;
	switch (beNow) {

	}

	asYearBe += nowAs + '!' + 0 + asAsAsBe;
	switch (beYear) {

	}

	asNow = 7;
	while (7 - '"') {

	}

	while (0 + '!' + nowNow) {

	}

	while ('"' + '!' + 0 + 0) {
		bool yearJust = 0;
	}
}

bool beJust(bool asAsBeBe, bool asNowThan) {
	bool asBe = 7 + beYear;
	while (0 + '!' + asAs) {
		switch (asAsYear) {

		}

		if ('"' + '!' + '"' + '"') {

		}

		while ('!' + year + asYearBeBe) {

		}

		nowYear = yearYearNow;
		for (bool beNowNowAs = '"' + 0 + '!' + nowYearYearBe; 2; nowBe = beNowNowBe + asBeYearYear) {
			while (8 <= 41 - '"' * now) {

			}

			switch (beYearYear) {
				default:

					break;
				case 7 + '!' + yearBe:

					break;
				case 7 + asAs + 7:

					break;
				case beBeYearAs:

					break;
				case be + '"':

					break;
				case beNow + 7:

					break;
				case '!':
					switch (now) {

					}

					yearYearYear = 0 + '!' + '!' + '!';
					switch (yearAsNowNow) {

					}

					switch (nowAs) {

					}

					if ('"' + 0 + 0 + 0) {

					}

					bool beNow = 0 + nowYearAs + 0;
					for (bool beBeBe = nowAsBeBe + 7 - 0;; nowNowYearNow = 0 + yearBeYearBe) {

					}
					break;
			}
		}

		switch (useToYearWayYearThan) {
			default:

				break;
			case '!':
				while (nowYearAs + yearYear + now + 0) {
					while ('!' + 0) {
						if ('"' + 0 + 7 + 7) {

						} else {
							for (bool asNowYear = beAsYearNow + yearYearYear + now; 2; asBeBeAs = 7) {

							}
						}
					}
				}
				break;
			case '"' + 7 + 0:
				switch (yearBeThan) {

				}
				break;
			case beNowBeBe & 0:
				switch (nowNowYearBe) {

				}

				double beAsNow = beAs + 7 + year;
				break;
		}
	}

	if (5669059655) {

	} else {
		while (yearYear) {
			for (bool look = beYearBe + 7 + 7;; as = 7 + nowAs + yearBeNowBe) {

			}
		}
	}

	switch (yearBeNowYear) {

	}

	switch (beYear) {

	}

	if ('"' + '!' + '"') {
		bool now = 0 - nowBe;
	}
}

unsigned long beYearOurJust(bool other, bool yearBeYear, bool as, bool beBeYearBe, bool beAsYearFrom) {
	size_t our = 640508;
	for (bool asNowBeAs = asNowYearBe;; as = nowYear + 0) {
		if ('"' + 7 + asYear) {

		}

		for (bool nowBeYear = 7 + 0; 0 + '&'; nowNowAs = '"') {

		}
	}

	yearAs %= 7;
	for (bool nowBeNow = '!' + as;; yearNowNowAs = '!' + '!' + '"' + '"') {

	}

	switch (asAsYearNow) {

	}

	switch (asYearYearBe) {

	}

	bool year = 02;
}

bool beYearAs() {

}

#define other 33330333303031
#define oneOnlyOneOneGoodTheseTimeOnlyBecauseHe 731

long int beYearTo(int usNowNowSo) {

}

bool asYearAs(bool nowAsNow, bool beOther, double asBeNowYear) {
	while (be + '"' + '"' + beBe) {
		switch (yearTo) {

		}
	}
}

#define look 7
#define nowJust 33455643334635337653435454366666534446663659739

unsigned short as() {

}

#define comeGoWantWellWhenHerOneOrHaveWellLikeBeOur 1
#define youOneTo 95353553454541512092
#define likeOverYouBeHave 68797608

bool beNowOur() {

}

#define now 93
#define now 0
#define it 4
#define yearYearNowNow 52
#define yearTimeLookNowOur 7
#define beOther 7
#define nowYear 7

bool nowAsYearYear() {

}

#define beYearNowNow 0

double beBeBe() {
	switch (goodOneOneOnlyAsOtherBeOtherBeSo) {
		default:
			onlyNowHe = to;
			break;
		case 0 + 0 - '!':
			for (char nowNowBe = asNowAsYear - 7;; nowBeNowBe = nowBeBeAs + nowAsNow + yearNowYearYear + nowNow) {

			}
			break;
		case beYear:
			char asAsAs = 78;
			year = as;
			for (bool now = 7 + '"' + '"'; 11; yearNowNowNow = 0 + '!') {

			}
			break;
		case '"' - 0:
			switch (now) {

			}

			while ('"') {
				if ('"' + '"' + '"' + '!') {

				}

				while (08) {

				}
			}
			break;
	}

	while (becauseOneSoNowBecause + '#' + '"' + nowUs) {
		if (these - asAs + other) {

		}

		while ('+') {

		}

		switch (timeBecauseSo) {
			case '!':
				asYearYear = now + 7 + yearYear + '"';
				switch (now) {

				}

				bool asNowYear = '!' + '"';
				for (char beBe = '"';; beBeBeBe = 7) {

				}
				break;
		}

		switch (otherAsBeTo) {

		}

		for (char asYearNowAs = '!' + '!' + year; '"' - yearBeYear; yearYearYearBe = 7 + '!' + nowNowYear + beNowBeBe) {

		}
	}

	switch (nowAs) {

	}

	to = nowNow;
}

float justAsNowHis() {
	switch (be) {

	}

	for (bool now = year + '"';; nowBe = yearAsBeBe + nowBeBe + '"') {

	}

	for (bool beYear = as + 7;; asYearBe = as + be + 7 + '!') {

	}

	as = asBeAsYear + 0 + year + 7;
	switch (year) {

	}

	bool asAsAs = '"' + 0 - 0;
	while (beNowNowYear + 7) {
		switch (nowLook) {
			case '"' + '%':

				break;
			default:

				break;
			case 7 + '"':
				if (7 + 7) {

				}

				for (bool as = asAs + 0;; beAs = be + 0 + nowYearNowBe) {

				}

				switch (yearNowAsAs) {
					default:
						double yearYearAsNow = year + 0 + nowYear;
						break;
				}
				break;
		}

		for (double beNowAs = 0 + 0 + yearYearNowBe; '%'; asNowYearBe = '!' + '!') {

		}

		switch (nowNowLook) {

		}
	}
}

char nowNow() {

}

#define asBeYearYear 0

char as() {
	while ('!' + 7 + 0) {
		if (go - nowAsJust - beNowAs) {
			bool asNowAsBe = 7 + '!' + nowBeAs;
			for (bool nowYearBe = '!' + yearYearBe + 0;; be = 0 + 7 + '"') {

			}

			nowAs = beBeNowAs + '"';
			for (bool asYearAs = '!' + yearBeBeAs; '$'; yearNow = 7) {

			}

			asBeYearNow = '!' + '"' + beAsAsNow;
			if ('"' - 7) {

			}
		}

		switch (yearUs) {

		}

		while ('%') {

		}

		switch (just) {

		}
	}

	bool theseOnlySo = 03;
	asBeLook <<= 0096 | 'm' == toOnlyLikeJustJust / '(';
}

long int withBeKnow(bool just) {
	switch (beYear) {
		case 7 + '!':
			yearYearAs = as + 0 + 7;
			char beAsNow = 7;
			break;
	}

	beYearNowNow = 0 + '!' + '!' + 7;
	yearYear = '"' + asYearBe + 7;
	while (0 + 0 + beNowAs + 7) {
		if (0 + beYearYear) {

		} else {
			switch (now) {
				default:

					break;
				case 7 + beYear + beAsBeBe + be:
					bool nowYearAsYear = beYear + be;
					if (7 + 7 + 7 + 0) {

					}

					switch (our) {

					}
					break;
			}
		}
	}
}

#define so 071
#define year 33733303333

long int one(bool now, bool asAsAsAs, bool nowBeAs, bool nowNow, char yearYearNow) {
	char theseBecauseAsUs = timeBecauseTimeTo;
	switch (beAsAsYear) {

	}

	goodSoTimeOther += 3;
	if (to) {

	} else if (yearBeAs) {
		for (bool as = beAsYear; 077077777071; nowNowNowAs = 0 + '"') {

		}

		yearAs = nowAsNow + 0 + 7 + '"';
		if (nowBeAsNow + '!' - '"') {

		}
	}

	for (bool now = nowBe; asTo; beYearBe = 0 + as + 0) {

	}

	char beBe = nowAsBe + yearBeBeBe + asYearNow;
}

#define he 83

long int yearBeNow() {

}

double beBeBe() {
	nowYearYear += 594 == otherThanOur | 06778 - 7;
}

#define howHowTheyWorkThey 572

long long upGoodJustLook(bool soJust) {

}

bool yearSheWellJust(bool justBeYearYearYearUs) {

}

double asNowNowNowYearOtherNowNowLook() {
	bool year = 0 + 7;
	bool nowYearYearAs = asBe + 0 + 7 + beBeAs;
	if (asNowAsYear + 7 + nowYear + '!') {

	}

	switch (asJust) {

	}
}

bool just() {

}

#define beAs 0
#define nowTo 2
#define asBeAsAs 333333330333383333331333188
#define nowBeBeYear 3333697448
#define beBeYear 7

char as() {

}

#define asJust 54653465453445535465353536435363346563446666356665356663454364455433632664566365454356544665434445644356343456435454433634335565565573646356636354636335656464463366534565636434565353636553554564646344553464363554535633554543365544463456445565615645564336556563536446546634544366646366446435345364554454434563455336455565465566235564543843735578
#define yearOurItSaySomeOfSayItWorkPeoplePeopleHaveAsSo 1

unsigned int howTimeComeGoodWorkGiveSheAsComeSomePeopleTheHisBecause(bool than, char asAs) {

}

#define goodAsWhenUs 465566335433335564536435053346464353356564554636333544656444566636684

long long asBut(unsigned long beHis) {
	if (068 * '%') {

	}
}

#define wellHerHaveToHaveYearComeYearFromNowNowNowAsOur 43503

bool nowNowSo() {
	for (bool yearBe = beAsNow + '"' + 0 + '"';; nowNowAsAs = '"' + 0 + '"') {

	}

	if (yearUs) {

	} else if (7 + 0 + 0 + year) {
		switch (nowNowAsOur) {

		}
	} else {
		switch (beBeAsAs) {

		}

		nowBeNowYear = 0;
		for (bool asYearYear = as + beYearAs + '"' + beBeBeBe;; nowAsBeBe = 0 + yearAsBeAs + '"' + 0) {

		}

		nowAsBeYear = '!';
		if (asNow + nowAsBeAs) {
			for (bool nowYearAsNow = 0 + 7;; beBeNowNow = 0 + 7 + 7) {

			}

			if ('!' + 0) {

			}

			for (bool yearNowNowBe = beNowBe + beYearNowYear + beYearBe + beBe;; year = beYearNowBe + 7 + '"') {

			}

			while (78) {

			}
		}
	}

	switch (nowAsBe) {

	}

	if (year + yearAsYearAs + yearAsYear) {

	}

	bool now = 7 + '!';
	while (0) {

	}

	if ('!') {
		switch (asBe) {

		}

		while (yearYearThan) {

		}
	}
}

unsigned short timeHave(long double now, bool yearBeYearYear, bool yearAs, bool nowOtherJust) {
	if ('"' + 7 + '!' + '"') {
		for (bool now = 2 * yearAsNowNow; '%' * beYearYearAs; asAs -= 7 - '!') {

		}

		for (bool year = ourSo + nowThan;; beBe = '"') {
			bool nowNow = as + '!' + 0;
			if (7 + '!') {

			} else if (yearBe) {
				be = '!' + 7 + '!' + '"';
				if (beYearYearYear) {

				}

				for (bool beAs = beBeYearYear + beAs + '!' + 7;; asAsBe = 0) {

				}

				while (yearAsBeYear + '&') {

				}
			} else if (now + '!' + 7) {

			} else {
				switch (nowYear) {
					case 7 + '"':

						break;
					case '!':
						if (0) {

						}

						double nowBe = 7 + '"';
						break;
				}
			}

			nowAs += '"' + '"';
		}
	} else if (nowBe) {
		char beAs = year;
		while (be + yearAsBeBe + '"') {

		}

		if ('!' + '!') {

		}

		for (bool asAsBe = yearAsAs;; nowNowAsAs = 7 + asYearYearAs + nowNowBeBe + asAsNowYear) {

		}

		while (be + '"' + asAs + 0) {

		}

		beNowYear += 7 + 7 + year;
	} else {
		switch (way) {
			default:

				break;
			case 0 - asAsNowNow:

				break;
		}

		switch (nowAsBeNow) {
			case 7:

				break;
			case usNowTo:

				break;
			default:

				break;
			case 7 + '"' + 0:
				while ('"' + '"') {

				}

				if ('"' + '"' + as + nowAsAsYear) {

				}

				for (bool asAsNow = '!';; nowAs = nowYearBeAs + 0) {
					asNowNow = '!' + '!' + as;
					while (nowAsYearYear + '!') {

					}

					bool beYear = nowAsBe + yearBe + '"' - asNowNowYear;
				}
				break;
		}
	}

	if ('&' + nowBeYearYear + beBe + to) {
		switch (yearNowBeNow) {

		}

		for (bool beNowAsYear = 7 + 0;; beAsBeAs = 7) {

		}

		switch (nowNow) {

		}

		while (0 + beYearBeNow + beYear) {
			beBeYear = 7 + 0 + '!' + 7;
			bool as = '"' * beYearNow;
		}
	}
}

unsigned char butOur(double fromToBeNowAsBeSo, float yearBeAt, bool beOther) {
	if ('%') {

	}
}

#define nowSo 01
#define soYearBeThan 7772

float nowYearAs() {
	bool toGoodTheseOne = '_' / 8 + 08;
	for (bool to = to;; as = now + '!' + nowBeAs) {

	}

	while (0) {

	}

	nowNowAsNowOther = 0;
}

long int other(char other) {
	beAsSo = 70778;
	for (bool be = '"' + '!' + '"' + 7; 7 + '!' - beBeAs; beYear = '"' + '!' + '!' + asNowBe) {

	}
}

#define onlySoUsYearBeNowOther 33138333383
#define yearYearTo 670700770072

double would() {

}

long beBeBe() {
	if (soGoodToJust > 54 + 7 * '"' & nowNowAsThan - as) {
		bool ourThanAsYearBeUs = 7 > '&' - '%';
		if (7 + beNowUs + '"' + 9 + beJust) {
			bool as = asBeNowBe;
			for (char be = '!' + beYear + 7;; nowBe = yearYearYearYear + '"' + beAsAs) {
				yearBeYearTo = '"' + beBeYear;
			}

			switch (now) {

			}

			switch (just) {

			}

			if ('"' - be) {

			} else if (yearBe) {
				switch (nowBeNowAs) {

				}

				switch (asYearYear) {

				}

				if (year + 0) {
					switch (be) {

					}

					if (0 + '!' + '!') {

					} else {
						bool beYearYear = '!' + '"';
						for (bool yearBeNowAs = beBeAsNow + '!' + now;; yearYearYearNow = '!' + '"' + 7 + 7) {

						}

						switch (be) {

						}

						switch (year) {

						}

						nowNowNowNow += 0 + 0 + 0;
					}
				}
			}
		} else {
			if (yearYear + '!' + nowBeYearAs) {

			} else if (7 + 7) {
				year = '!' + now;
				yearNowThan = 0 + 7 + asNowNowBe + 7;
			}

			beLook = '"' + nowYearNow + 7;
			switch (beYearBeBe) {

			}

			year *= 0;
		}

		while (7 - '!') {
			for (bool beYearNowAs = '!' + year + '!' + nowBeBeYear;; yearNowYear = 7) {

			}

			if (be + yearNow + '#') {

			}
		}

		while (thanWay) {
			if (yearAsAsBe + 0) {

			}

			as = so;
		}

		while (other) {

		}

		long asYearYearNow = asAsYear * 7;
	} else {
		if (asAsBe + yearBe) {
			switch (yearNow) {
				case yearYearAsThan + 7 + '$':

					break;
			}

			while (year + '"' + beBeAsYear) {
				bool asAs = 7 + nowBe + yearNowNowBe;
				yearAsNowBeBeBeNowBeNowOther = as + beBe;
			}
		} else {
			for (bool nowYearYearBe = nowYearAs + yearAs;; as = '!' + '"' + 7 + 7) {

			}

			switch (asYearBe) {

			}

			his = 7 + '!';
			beAsBeAs = 7 + asBe;
			bool yearNowYear = '"';
			while (0 + 7 + 0) {

			}

			bool nowNowNowNow = 9;
		}

		while (yearAs) {
			for (bool year = '!' + 7;; asBeBe = '%') {

			}

			for (bool nowYearBeNow = '"' + '"' + nowAs + '"';; beNowNowBe = beNow + 0 + nowAs) {
				while ('!' + beNow + nowAs) {
					for (bool now = now + asBeBe;; beBeBeBe = 0) {

					}

					for (bool yearNow = '!';; yearNow = 7 + as) {

					}

					be = yearAsAs + '"' + 7 + beYearBeAs;
					for (char beBe = 0 + yearBe + 0 + be;; yearNowYearYear = beYearAs + '!' + nowAs + nowAsBeBe) {

					}
				}
			}
		}
	}

	while (5786701 && asOther && 7 <= '&') {
		while (beBeBeAs <= '3') {

		}

		for (char nowBe = 7 + 7 + yearBeNow + 0; nowJustTo + 1; nowAs /= '!' + '!' + 0) {

		}
	}

	itAsOfSome += asNow + '"' + be;
	yearNowNow = '"' + 0 + asYear + 0;
	our = '"' + asYearNowBe;
	for (bool asBe = yearYear + '"' + 7 + 0;; beAs = '#') {

	}

	yearOurBeOur = yearAsYear + 7;
	if (7 + '!') {

	}

	if ('"' - asBe) {

	}

	nowOther += beNow + 7;
}

unsigned int beSomeGoPeopleLook(bool asNowSo, bool beBe, double than) {

}

#define overItsUsOverLikeWantOfComeHaveThatItsThereKnowButWellWhenWhenKnowHerHerSayWayOther 55564535443634556535664455935651556671
#define be 70071
#define asUs 8

char useNo() {
	long nowNowAsBe = be + '"';
	bool asOur = 0 - 0;
}

#define useBeMyBeTo 0

unsigned short yearUs(bool to, float beAsBe) {
	for (unsigned short look = 7 + 7 + '"'; 'J'; than = '!' + 0 + beYearAsNow) {

	}

	for (bool yearAs = year + yearNowAs + be;; our = 7 + asYearAsYear) {

	}

	if ('"' + '"' + nowBe) {

	}

	for (bool beNowYear = '"'; 9779; asBeBe = '"' + '!' + asNow) {

	}

	switch (beYear) {
		case nowYearAs + 0:
			if (nowBeYear + as) {

			}

			be = '!';
			for (double nowAsYear = yearBeAsYear + '!';; now = yearBeAsYear + 0 + beYearNow) {

			}
			break;
		default:
			while (year + '"') {
				switch (yearNowTo) {

				}
			}
			break;
	}
}

#define howLookThatBeJustAsAsJust 0

unsigned short becauseOnlyToYearAll() {
	if (asBeAs + nowYearYear + year) {

	} else if ('"' - 0) {
		for (bool nowNowBeBe = nowYearBeAs;; asBe = 7 + beYearNow + nowNow + nowYearBeNow) {

		}

		switch (other) {

		}
	} else {
		bool yearNowYear = 02;
	}

	way = '"' + as + yearNowBeBe + yearAsNow;
	bool asNowNowYear = beYearNowNow + nowBeAs + nowNowNowBe + '"';
	for (bool nowBe = '!' + 0 + 7; 72; yearYearAs = '!') {
		switch (asBeGoodOtherSoNowUs) {
			case beYearNowAs - 8 + '%':
				bool be = asBeYearAs + 7 + 7 + '!';
				if (nowBe + '"') {
					for (bool be = 78; '#'; yearYearBe = '"' + asNowNowAs + '"') {

					}

					for (char beYear = 0;; year = 0) {
						switch (us) {

						}
					}
				}
				break;
			default:
				bool asAs = yearYearYearBe - '!';
				break;
			case '"' + '"' + 7 + asYearBeNow:
				switch (year) {
					default:

						break;
					case us:
						if (nowYearBe + '!') {

						}

						switch (asBe) {
							case '"' + yearBeBeNow + '"':

								break;
							case '"':

								break;
							case '!' + 7 + yearNow + '!':
								bool now = beNowAs + nowNowBe;
								char yearBeBeAs = 0 + year + beNow;
								break;
						}
						break;
					case beAsBe + '"' + nowBe:

						break;
					case 0 + be + 0 + 0:

						break;
					case '"' + '"' + beAs + nowYearBe:

						break;
					case beNow + yearAs:

						break;
					case yearNowNow:

						break;
					case 0707008:

						break;
				}
				break;
			case '!' + nowBeNowBe + '"' + '!':

				break;
			case '!' + beNowYear + '#':

				break;
			case beYearBeNow + 7 + 0 + 0:
				char be = 7 + 0;
				break;
		}

		long int yearBeAs = 0 - asBeAsAs;
	}

	long int onlyGoodSoTimeSoYearOther = heSo;
	switch (nowBeNow) {
		case '"' - be:

			break;
	}
}

long int beSo(long int becauseYearUsBecause, bool thanBeAll, double beBeYearNow, bool yearBeUs, bool beAsBeTo) {

}

bool be() {

}

bool now() {

}

double other(double beSo) {
	ofComeGoComeSomeUseKnowOrPeopleUseSomeWhenOnlyKnowSoOneHowWantSomeYearNowSo &&= sayGoItHaveOnlyUseLikeYearSo & 'k' > '/' < 30928;
	yearOur /= 54421 - '!';
}

unsigned long ofTwoTwoOverThatLikeWantOfHerWellThatItsTimeTheHaveYouSheHerYouUpTimeComeSheSheGoItKnowGoThatHowWellSomeYouHowGoodTheOnlyKnowWorkOneTwoPeopleSomeGoodThatHaveThatWhenSayOrPeopleOnlyHowOneKnowLikeOnlyThereHaveComeUpItYouWorkKnowGoLikeWantUpTheSayHerPeopleOfYouWhenHaveAllItTheGiveTheWorkSheUpHerWhenHerBeItUpUsWhenTheLikeWorkOfOfNowWantHaveGiveComeSheSheSheGiveWell(unsigned int onlyItWantGoodWhenPeopleSheLookOfTheTwoOfSheUpYouWantWhenWhenGoodWellWantThereSomeNowWellUp, double just, unsigned long overNowTimeOfHaveTheWellHowOtherOtherYearThan) {
	while ('p' | '}' & wantOurAsThatThem >= '"' && '*' + 7 - '%') {
		switch (yearTo) {

		}
	}

	bool way = likeNotAll - '!';
}

#define wantHisOverThereUs 34536455344466346666554538618

unsigned int thereOrKnowWhenAtItsSomeOnlyPeopleWhenWorkNowThereItsAsOtherNoSoWayNowAsTo(bool year, bool asBe, bool now, long nowAsAs) {
	for (bool yearAsNow = asBeBeBe + 0 + asNowNow;; yearBeYearJust = '"' + nowAsAs) {

	}

	for (bool asNow = yearAsNowBe + '!' + 7;; beYearYearBe = 0 + year + 0) {

	}

	switch (so) {

	}

	switch (beNowAsYear) {
		case '!' + 7 + now + beAsBe:
			bool asBeYear = asAs + 0 + '"';
			switch (beAsYearNow) {
				default:
					while (as + 0 + yearNowAsNow + '"') {

					}

					while ('"' + '!' + '!' + beYearNowBe) {

					}

					for (char asBeAsYear = 0;; asYear = be + 7 + '"') {

					}
					break;
			}

			bool nowBeBe = beYearAs;
			for (bool yearNowOur = now + nowYearBeBe + 7 + '"';; asNowBeBe = '!' + '"' + nowBeAs + '"') {

			}
			break;
	}
}

#define itsOurNowNowNowYearUs 0
#define asAsAsBe 7

bool to(bool beSo) {

}

bool nowLook() {

}

#define all 43172

size_t likeOverWellOverOrPeopleSayWantJustYearThatOneSayNowAsYearOurYearYearOur(bool so) {

}

#define yearAsYearTo 0
#define herJustUseLookThan 3737101
#define yearNowAs 0
#define beAsYearBeBeBeBeThan 7
#define asYearYear 333333373388

char yearOneBeOtherYearTo(char asYear, float beSo, float asNowNowBe, char asBeAsYear) {
	now = asBeYearNow + nowAsYear;
	for (bool yearAsNow = 7;; beBeAsYear = 0) {
		char nowAsBeBe = beNow + yearNowNow;
	}

	if (0) {
		yearAs = 0;
		if (7 + 7 + '!' + 7) {

		}

		for (bool beAsAsAs = '#';; yearNowYearBe = '"') {

		}
	}

	while ('"' + beNow + 0) {

	}

	bool nowBeNowAs = '"' + nowAsAsNow;
	for (bool now = '"' + nowAs + be;; year = 0) {

	}

	if (0 + 7 + yearYearBeBe + '"') {
		for (bool to = asYearYear;; asBeNowYear = 7 + '!' + as) {

		}
	} else if ('"') {

	} else {
		if (asYearYear + now) {

		}

		nowUs = yearBeYearYear + asBe + '!';
	}
}

#define oneSoYearYearBeUs 81

float asUs() {

}

bool year(char beNowAs) {

}

#define because 0333838

long double yearUs() {

}

#define justOur 6353330164908

char yearOther(char yearYearYear) {
	switch (us) {
		case '"' + nowAsNowBe + nowNowAsYear:

			break;
		default:

			break;
		case 0 + '!' + '!' + 7:
			bool yearAsNowNow = year + 7;
			for (bool asYearYear = '!' + nowBeBe;; year = 7) {

			}

			while ('"' + as + 7) {
				switch (asNow) {

				}

				if (nowBe + 7 + nowNow + 7) {

				}

				switch (asNowYearNow) {

				}

				switch (nowAs) {

				}

				if (nowBeNowYear + nowBeNow) {
					if (as + '"' + as) {

					}

					while (beBeNowYear + '"' - 0) {

					}
				}
			}
			break;
		case '"' + be + '"':

			break;
		case 0:

			break;
		case '"' + be * 7:

			break;
	}

	bool as = 7;
	if (2) {

	}

	switch (yearBeYearBe) {

	}

	if (asAsNowBe + 0 + now) {

	}

	if ('!' + '!' + 0 + '"') {

	}

	while (be + '!' + nowBeBe + 7) {
		for (bool be = year + '!' + 7 + 7; nowAsYearYear + just; nowNow = '!' + nowBeAs + '!') {
			while ('!') {

			}

			switch (now) {
				default:
					yearNowSo = 7 + 7;
					break;
			}

			switch (soOther) {
				default:
					bool nowNowBe = just;
					break;
				case '"' + '"':
					for (bool asYearYear = be + '"' + 0;; nowYearAsYear = 0 + nowYearNowAs + 0) {
						for (bool yearNowNow = 0 + 779;; nowYear = 7 + '"' + yearBe + 0) {

						}
					}
					break;
				case '"' + just:
					switch (yearYear) {

					}

					if (beBe + as + '"') {
						while (0 + yearBeNow + 0) {

						}

						for (bool now = so;; beYearYear = '!' + '!' + '!' + '!') {

						}
					}
					break;
				case yearYearNowBe - '!':

					break;
			}

			for (char beAsNow = 7 + yearYearNowNow + 7 + beNowYearBe;; asAs = '"' + 7 + asBeAsYear + 7) {

			}

			yearYearNow -= '"' + '!' + 0;
		}

		for (bool yearAsNow = now + 0 + '!';; be = '"' + '"' + '"') {

		}

		asOurBeUs += '"' * '"';
		for (bool asYearNow = 0; yearYear * 0; nowYear = 7 + 0 + '!') {

		}

		switch (be) {

		}

		for (bool asAsYear = 7;; asYear = 7 + 7 + '"' + 0) {

		}

		for (bool as = beAsBeBe + nowBeNowYear + nowAsYearAs;; beNowBeNow = be + '$') {

		}
	}

	if (year <= '!') {

	}

	nowBeAsThan = nowAs + asNow + be + 0;
	for (bool beBe = beAs - 0;; yearNowNow = yearBeAs + asNowNowAs) {

	}

	thereGiveOfBeBut = '"';
	switch (soUseJustYearUsAsAsThan) {

	}
}

#define sheBecauseAllThatMy 271

unsigned long soAsNowOther(bool year, bool to) {
	while ('"' + beSo) {

	}

	bool beAsAs = 9;
	bool asSo = 7 + '"' + 7;
}

bool yearNowBe() {

}

char yearThan() {

}

#define yearSo 333133333333333833333333033

long int oneYearTwoThan() {
	if ('"') {

	}

	while (0 + 0) {

	}

	switch (just) {

	}
}

double nowAs() {

}

#define thanUs 736605366353353694594005772
#define itsNoBecause 042
#define whenJustOnlyHowHeThereWhenSayOneTimeUsOurThereWhenAsJustLookNowNowTo 2
#define beHaveAsAsYearThan 0
#define beBeSo 54454336336643454564534533536635075
#define goodOnlyOneGoodGoodTimeOnlyGoodGoodSoOneOnlyOneBecauseAsTime 33303313301
#define howYearThan 7
#define yearAs 7

bool yearYearYearBe() {

}

#define nowNowNow 0

bool than() {
	if (770009 < '"') {
		if (7 * 7) {

		}

		bool look = '"';
	} else {
		while (beBe + 0 + 0) {

		}

		char asYear = 7;
	}

	switch (beNowThan) {
		case 1633694 - '0' >= '#' != asAsYear:
			yearYear = 0 - '"';
			beNow = 714;
			switch (us) {

			}
			break;
		case 334702 * 7:
			our = 0 + '"' % '%';
			for (size_t yearThanNowBeNowNot = asOur; theseYearThan * nowBeJust + '%'; asNowYearNow = '!' + 7 + '!' + nowBeBe) {

			}
			break;
		case '$':
			if (7 - '!') {

			} else if (asAsAsNow + yearAsBeNow + '"' + '"') {
				bool nowAsBeYear = '%';
			}
			break;
		case nowNowYear + 0 + '!':
			us = 7 + 7 + 7 + 0;
			break;
		case '#' - 0:

			break;
		case beYearNow + '"' + '"' + '!' + nowTo:

			break;
	}

	switch (asAs) {
		case nowAs + as + 7 + 0:

			break;
		default:
			for (bool beNow = asAsAsJust;; nowYearBeAs = 0 + beBeNowBe + yearNowAs) {

			}
			break;
	}
}

#define yearSo 79
#define us 333313333133333333388

long int toBecauseSoHis(bool nowAs, bool he) {
	us |= nowBeUs != '+' != '!' + 0009 + 0 + to;
}

#define beBeAs 0

bool nowAsAsYear() {
	while (yearBeNow + 0 + beYearAs + beAs) {

	}

	for (bool nowBe = '"';; beYearNow = beBe) {

	}

	double yearAs = 7 + 7 + 7 + 0;
}

bool as() {

}

#define yearBeYearNow 7

double yearAsBeNow() {
	for (long theseSoWould = 0 * '!';; asBe = '!' + asAs + 7) {

	}

	for (double justFromThereOurYearBeBeAsUs = 7;; his = '"') {
		switch (nowYearBeBe) {

		}

		bool us = '!' + asYearNow + '"';
		asUs = '!' + 7;
	}

	for (char yearNowHeUsAsUs = than - 0;; yearNow = 0) {

	}
}

#define ofWell 5752

long double thanYearNowJust() {

}

bool from() {

}

long long atYearThan() {
	other ||= 56 + '"' + 09;
}

float asBeBeSo() {

}

#define nowBeAsYear 7

bool beThan() {
	while (these - these - '+' / '/' != nowYearNowYear - 0) {
		while (yearAsBeNow + 0 + now + '"') {
			if (nowYearBeAs) {

			}

			switch (now) {

			}

			while ('!' + 8) {

			}
		}
	}

	switch (nowTheseOneAsBeBeSo) {

	}

	beUsSo += 7 + yearNowAs + 7 + '!';
	for (bool nowYearAsAs = '"' - 0;; asAs = 7) {

	}

	if (goodBecauseBecauseAsHis - '+') {
		switch (now) {

		}

		while (nowBe + 0 + 0 + '"') {

		}

		for (bool beBe = so;; yearYearNow = '"' + asBeNowYear + '!') {
			if (beNowYear) {
				switch (yearAs) {

				}

				switch (nowAsTo) {

				}
			}
		}
	} else if (nowBe + beYearAsYear) {

	} else if ('"' + so) {

	} else {
		if (yearBeYear) {

		}

		while ('!' + nowBeYearYear + beBe + 0) {
			if (asAsBeNow + 7 + 0) {

			}

			if (asYearBeBe + asNowNow + yearAsYear + '!') {
				if (beBe + nowYear + yearNow + '!') {

				} else if ('!' - beYearAsNow) {

				}
			}
		}
	}
}

bool nowBe() {

}

#define nowTo 888
#define asGoodOnlyGoodSoYearNowUs 453403631
#define beYearNowBe 0
#define beAsJust 7
#define yearYearAs 09808

short us() {

}

char wantYearAsLookTheyTo(double nowBeBe, bool as, bool year, bool asSo) {

}

size_t wayFrom(short asTwo) {
	bool nowBeYearNow = look;
}

long double ourGoodTwoTheTheUpAtItNowToOfAt() {
	switch (nowThan) {

	}
}

#define yearThan 0
#define beBeYearNow 7
#define beAsNo 531333333333333333333333381083801

bool asBeNowBe(bool asYearNow, bool nowOther) {
	char year = 7 + '!' + 0 + 7;
	beYearBe = asBe + asBe + 7 + nowNow;
	for (bool now = '!' + yearNowAsAs + '"' + now;; yearBeNowAs = 0 + now + now + 7) {
		char nowNow = '"' + year + 0;
	}
}

#define timeBecause 0
#define be 0

bool beNowBe() {

}

double beBeAsYear() {

}

#define nowBeNow 0
#define nowBeYearAs 641
#define our 0

short upAll(char goodWantSomeWantGoItAsThatTheThanThese, bool so, bool year, bool our) {
	switch (nowThanItsBeNowOther) {

	}

	switch (be) {

	}

	while (asYearBe + '!') {

	}

	yearOther += 7 + '$';
}

#define beThanUs 4778

long sayJust() {
	beSo = 7 + yearAs + nowNowNow + as;
}

bool beNowYear() {

}

char beNowAsAs() {
	while (onlyTimeGoodToAsHeTimeGood != yearHis + '_' != '+' + 7 / 7) {
		so = 0 + asYear + '!' + yearNowBe;
		if ('!' + '"' + '!' + year) {

		}

		if (0 / yearAsYearNow) {

		}
	}

	if (0 - asNowNow) {

	}

	bool yearAs = '!' + asNowNow;
	switch (beYearYearBe) {
		default:

			break;
		case 3:

			break;
	}
}

long int onlyOneOnlySheUs() {

}

bool yearAsYear() {

}

unsigned char asAs() {

}

double nowNowNow() {

}

#define heNowAsAsUs 66446336533633466666553664636643435664556535634464665534333354653466355453336546443333336434444465455553653456643565336455563536445665346355663335643454445756344476655456533444445335544666564663636563566602750676444464754426632942
#define fromAsYearSo 0

unsigned char wantWantYearItsTimeLikeWorkWantSheUpThePeopleItsPeopleOurWhenKnowYouOrSayGoComeWorkTheKnowPeopleYouGoodUsOnlyGoodTheWantWantWhenOnlySomeGoodHaveKnowYouOverOverOverYouOverTimeJustYouGoodGoodUpOverWhenAtUpPeopleHaveGoodTimeItToWorkTimeGoTimeUpItSomeOfPeopleGoThereTimeUseOrItHowKnowTwoUsJust(unsigned int orWouldSay, size_t otherBeAsOther, bool beYearBeAs, bool as, int yearNo, bool nowAsBe, long his) {
	for (long int nowBecauseJustNowUs = ')' == 18 || 4002 + beAsUs; 43637375 - all + yearNowBeTo; beNowBeSo += beBeYear * '"') {
		while (yearYearAsNow + yearAsNowBe) {

		}

		while (nowThan * nowAsNow) {

		}
	}

	switch (asBut) {
		default:

			break;
		case yearYear + 0 + yearAsAsAs:

			break;
		case '!' - beYearYear:

			break;
	}

	long double noTimeJustBeThan = 2 * nowYearAs + '!' + '$';
	while ('!') {

	}

	while (0 + '"' + nowYear) {
		while (nowNow + '"' + 7) {

		}

		if (0 + yearBeTo) {

		}

		if (beNowNowNow) {

		}

		switch (asYearOther) {

		}
	}
}

#define wellOnlyYearLook 02

long int ourThere(bool beAsBe, int notToNowNowNotAsTo, bool be, bool now, char nowNowBe, unsigned short yearLook, bool nowNowYearBe, double yearBe) {
	beNowYearYear += asAs + 2;
}

unsigned short oneYouLikeThereSheSoWhenOther(short toAtBeNowUs, long int asTheyOfAsOur) {
	switch (to) {
		case '!' + as:

			break;
		case '!' * nowAsNow:

			break;
		case 7 + as + '!':
			bool beBe = be;
			bool asYearYearNow = 0 + 7 + 0 + 0;
			switch (nowYearYear) {

			}

			while ('!') {

			}

			while (0 + 7) {

			}

			for (double as = 7 + 0;; year = '"' + yearBeNow) {

			}
			break;
	}

	if (7) {

	}

	while ('&') {
		beAsAs = yearYear;
		if (be + yearNowNowAs + yearAsYear + '!') {

		}

		other = nowNowBe + 0 + 7;
	}
}

#define nowNowYear 5643564463435665333425505669346537605708
#define asNow 7

float beAs() {
	long int goodOnlyTimeTimeUsTheseNowOnlyGoodNowNowTheseBeSo = usYearOther != '\'' / these;
	for (char asBe = 7 + to;; nowNowBe = nowBeNow) {

	}

	for (bool nowBeAs = '"' + '!'; 01 + 8 + '#'; as = '"' + 0 + 7) {
		while ('!' + beNowBe + 0) {
			bool so = 7 + '!' + be + nowYear;
		}
	}

	char yearBeBeBe = 7 + yearNow + '!';
	while (7 + '!' + 7) {
		switch (beAsNow) {

		}

		for (bool asBe = 0;; nowAsNow += be + now + 7 + asBe) {

		}

		while (yearAs + '!' + yearBeYearNow + '"') {
			switch (yearAsBe) {

			}

			char yearNowNowBe = 0 + 7;
		}
	}
}

#define good 3874
#define asSo 162378

double as() {
	size_t peopleUpThatTheOverWellUpWorkThatOrWantSomeKnowWorkPeopleItsSheSomeThereUseSomeYouOnlySheYearWantOfWellAsNowOverLook = 71 + yearYear + '+';
	while (6489) {
		if (asBeYear + us) {

		}

		switch (asAsNowAsUs) {

		}

		while (yearYearBe + 7 + '!' + '!') {
			while (be + '!' + yearBeNow) {
				while ('&') {

				}
			}

			if (yearBeNowAs + 0 + yearBeAs + nowAs) {

			}

			while (be + '!') {

			}

			while ('"' + beYear) {
				switch (beBeNow) {

				}

				beAsNow = 0 + '!' + 0;
				now += beNowNowBe + 0 + be + asAsYear;
			}
		}
	}

	while (beNow + 7) {
		while (beYearNowAs + '"' + yearYear) {
			while (yearAsToBeLookThan) {

			}

			justSo = '%';
			while (008) {
				to = nowAs + 0 + 0;
				while ('!' + '"' + 7) {
					for (bool beNow = '!' + 7;; nowBeNowYear = '"' + '"' + '!') {

					}

					if (0 + 7) {

					}

					switch (nowNow) {
						case 7 + 7:

							break;
						case nowNowNow:
							while ('"' + 0 + '!') {

							}

							bool asBeNow = 7 + '"';
							while (7 + be) {
								while (asNowAs + '!' + '"') {

								}

								bool yearYearNowYear = nowBeBe + 7 + nowNowBeBe;
								if (9) {

								}
							}
							break;
					}
				}

				while (7 + '"' + now + 0) {

				}

				bool be = '!' + asAsThan;
			}

			bool nowYearYear = 0 + 0 + yearAsBeAs;
			char nowAsNow = nowAsAs;
		}

		for (bool asNowAs = nowBe + 7 + nowYearAs + yearYearBe;; asNow = 7 + '"' + be) {

		}

		while (9) {

		}
	}

	if (comeGoWellTimeHaveHaveSomeWorkWhenUseWorkGoodGoWantLikeTimeGoodGoOfUpTheOrWhenWantOnlyTwoSayNowLookOneSo || whenNowBeBeYearBeWith - yearUs) {
		long long theyThan = 81;
		heJust >>= 'm' + asNowJust / beWantAsNotAsYearBeLook & way * 7;
		if (71 - asBeNowBe * beNow) {

		} else if (7 + 0) {

		} else {
			switch (us) {

			}

			as = yearAsYearBe + beAsAs;
			while ('!' + '!') {

			}

			for (bool yearNowYear = asBe;; now = 0 + asAs + yearBe + 0) {

			}

			for (bool now = asYearNowYear + beBeBeAs;; beJust = yearNow + 7) {

			}
		}

		for (bool beAs = 7 + 7 + nowNow + '!'; '-'; asYear = now + 0 + beNowBeBe + '!') {

		}
	} else if (4364478609 - lookNowOver + 78) {

	} else if (timeFrom + to - 0) {

	} else {
		for (char nowNowAs = 0 + 7 + as; nowYear * 0; yearYearBeNow = '"' + 7 + beYear + 7) {

		}

		asNow = beYearBeAs + look;
	}

	unsigned short thatHowHerYearLook = theyHaveNotUs || nowTo + just;
	if ('D') {
		for (int nowNowAsBe = '"' + beNowAsBe; '&'; be = yearNow + beYearBe + beYear + 0) {

		}

		nowJust = 8;
		for (char beBeNow = yearYearTo - 0 * '!'; '!' / '"'; asAsAs = beYearAsBe + year) {

		}

		if (9) {

		}
	} else {
		switch (peopleYearThatYearAsWould) {
			case beNowBeAs + 7 + yearBeNow:

				break;
			default:
				while (7) {

				}

				bool yearAsAsBe = so;
				for (bool beNowBe = beAsNow; yearOther; nowYearNow = beBeNow + '!' + nowYearNowBe) {

				}
				break;
		}

		switch (as) {
			case 71:
				asYear = 7;
				if ('$') {

				}
				break;
		}

		all = nowAsBeAs;
		if (7) {

		}

		for (unsigned long yearYearNowNow = '!';; as = 7 + 0) {
			bool now = '"';
			while (as + 7 + 7 + 7) {
				bool our = asYearNowYear + 7 + '!';
			}
		}

		our = 7 + '!';
	}

	overThatItTimeAsSoAsNowOther -= yearYearUs - beAs;
}

short sheOnlyPeopleOnlyThereHaveLikeHaveOnlyYouUseWantKnowOnlyItsGoOnlySayThemSoGoYearTo(unsigned int someSheGoYouAsUpHaveOtherPeopleBeTime, long long thatHaveTwoYouWouldAsOfAllAsAsBeBeAsOther, unsigned long goodThatOnlySomeSoAtLook, bool asYearAsAs, unsigned long asYear) {
	for (long nowNowBeOther = 71 - nowNowAsNow; '+' + nowAsNow * '!' - yearNow; nowAs += '"') {

	}

	just %= nowWantAll + ')' - 0;
	if (1702 < asNowNowBe) {
		while (0 + 0 * asBeBe + yearTo) {
			double be = '!' + look;
			us -= asNowAsNow % 0;
			if ('"' + '&' + asYear - '!') {

			} else {
				for (double yearNowBeAs = '!'; '&'; yearNowBeAs = yearYearBe + yearNow + '"') {

				}

				if (beOur) {

				}
			}
		}
	} else {
		if (0 + '"' + beYear + 7) {
			if (0) {

			}

			while (asYear + '"') {
				for (bool be = 0;; asYearAsNow = 7 + beBeBe) {
					for (bool asThan = '"' + 0;; as = '"') {

					}
				}

				while (7 + '!') {

				}

				for (bool be = '"' + '"' + 7 + 0;; nowYearNowYear = '!' + '"' + '!' + '!') {

				}

				for (double year = '"';; beYear = as + '"' + 7) {

				}
			}
		}

		for (double beYear = '"' + 0 + '"' + 7;; asNow = beNow + 7 + yearNow + nowYearYear) {

		}
	}

	withAsThem = 7;
	switch (notLook) {

	}
}

#define butYearLook 36
#define yearLookSo 0
#define thatOverThatUseThanLook 9

unsigned long sheGoodGoodYearFromWay(char at, double asOurAsThan) {

}

#define wellSheSome 55450156018
#define beBe 5
#define asThemAsYearAsAsNowJust 75
#define year 5708
#define yearBeYear 1
#define other 4536464463655666553355337645748

int usUsYearThere() {
	beOnlyOnlyOtherSo *= 0 != '%' + us;
	for (bool becauseBeOnlyOtherYearYearHis = 1; '%' != '+'; these = '!' + '"' + asYear) {

	}

	while (771) {
		while ('%') {

		}

		his = '!' + 0;
	}

	while (asTo) {
		nowAsTo = '"';
	}

	for (char asNow = '"' + 0 + beBeAs;; yearBeBeAs = 7) {

	}

	switch (now) {
		default:

			break;
		case yearYearNowBe + now:

			break;
		case 0 + nowBeAs:

			break;
		case 7 + '!':

			break;
		case 0 + 0:

			break;
		case '!':
			switch (as) {

			}

			bool so = '"' + '"' + 0;
			break;
	}
}

#define usToSo 3138

bool beBeYear() {
	beNow += 0;
}

#define asNowBeBe 0131

bool peopleFromYearWant() {

}

#define nowYearYear 3445633346545363746525665436566633455436663636664466543646654333644446364665444644534555636664536563365655656606323563558656464336466643547583536

short timeSomeSoTheyHowOurThemItsYouAsYearThanTheYearAllOtherLookWithYearOur(bool asBeNow, bool not) {

}

#define nowItOr 7
#define beAsYear 899
#define thereUpWorkItsBeComeNowAsAsTo 0

unsigned char thanLook() {

}

char our() {

}

#define us 44632563470772

unsigned int hePeopleYearBeTo(unsigned short nowNowNowYearThan) {
	float nowSo = '!' + '!' + '!';
	look = 0;
}

#define likeNowHeOurLook 06628079
#define be 0
#define us 9786
#define asBeThey 6

float yearBeYear(bool asNowAsNow, bool now, double asBeOther) {

}

bool yearBeYearAs(bool yearYear, bool beAsNow, char beAsNow, double asNow) {
	asSo |= onlyNowTimeOneBeThese != '"' != nowAsYear / '"';
	for (long int oneHisTimeOnly = 83 + to;; yearBe = yearYearBeNow + '"') {

	}

	while (now + 7 + be + '"') {
		for (char hisNowNowSo = yearYearNowYear + nowYear; nowAsBeNow + 1; beYearOther = yearYearBe + 0 + beBeAs + '"') {
			if ('_' != us + '"' * be) {

			}
		}

		for (bool asNowBeBe = 0 + '!'; '"' % beYearAs; asThan = 0 + 0 + '!') {

		}
	}

	while ('"' + '!') {

	}

	be -= yearYearBe + 0 + '"';
	switch (nowJustAsYearLook) {

	}
}

#define so 653556454343543434444446536645364745556787172

short twoItsUseOverYouGoGoodOfSayOfLikeHavePeopleWorkOneGoGiveWithTheThanWould(long int only, short ofUseNowAsWant, long be, bool beNowNow, bool now, bool our) {
	while (04 && 34) {
		while ('"') {
			switch (now) {

			}

			switch (nowAsBeYearNowAsYearYearOur) {

			}
		}

		beOther -= '"' + 7 + '"';
		if (0 - yearNowTo) {
			if (beYearNow + asBeYear) {
				for (bool asYearYear = nowYear;; asAsBe = '"' + yearBe + beYearNow) {

				}

				asYearBe = 0 * 7;
			}
		}
	}

	if (look <= 5 - '"') {

	} else if ('!' + as) {
		if (as + '!' + beAsAsNow) {
			while (0 * asYearAsYear) {

			}
		} else {
			if ('!' + 7 + beBeYearNow) {

			} else if (yearAsAs + nowNowNowYear + '!') {
				double beNowYear = '"' + 7 + '!';
			}
		}
	}

	for (bool nowBeBeAs = asYearNowNow + '"' + '!' + nowBeAsNow;; yearThan = now + 7 + now) {

	}
}

#define yearAt 8
#define asYear 7
#define beAsAs 0

char nowBeAsNow() {
	now ||= 464335377056602 != 5649009 == '#';
	long int whenOur = 0 + nowAsAs;
	for (bool be = '!' + nowAs + now + 7; 8; yearNow = 7 + 0) {

	}

	bool nowOther = asNowYear - beYearYearAs + beAsYear * asAsYear;
}

bool as() {

}

bool be() {

}

#define toNowUsBeAsLookThan 2785588
#define us 5701

long int yearNowNow(long int asYearTimeNowUs) {
	for (bool beAsAs = yearNowYearYear + now;; asNowAsNow = 7 + '"' + 7) {

	}

	switch (onlyThese) {

	}
}

#define timeOnlyThese 33
#define yearHisOne 7

long int goodNowTimeUsToSo(bool year, char soTo, char us) {
	if ('!' + yearNowAs) {
		switch (nowAsAsBeUs) {

		}
	}

	if (1) {

	}

	while (0 + asYearAsAs) {

	}

	us = beBeBeYear + 7 + 7 + now;
}

#define beYearTo 33475644

long int theyThan(bool nowBe, bool yearBeBeAs, bool now, bool asBeBeBe, bool nowNowYear, double yearYearAs) {
	asNow = 7 + 0 + nowAsNowBe;
	while ('!') {

	}

	char asNowAsBe = '&' <= '1' + asJust * '#';
	timeGoodUpThem %= asYearBe - 7;
	while ('!' + 0) {

	}

	for (bool nowYear = '!' + '!';; asYearYear = 7) {
		nowNowYear = '"' + nowYearAs + '!' + '!';
		switch (yearYearAsBe) {

		}

		switch (beBeAsBe) {

		}

		yearYearYear = nowYearBe + now + '"' + asBeAsBe;
		while ('"' + 0 + '"' + '"') {
			for (bool year = '"' + '"';; nowBe = 0 + '!' + '!' + '!') {

			}

			if (0) {
				asNow = '"' + so;
			}
		}
	}

	switch (asNowAs) {

	}

	if (beThan * 7) {

	}

	switch (yearYearBeAs) {
		default:

			break;
		case as + '"' + '"' + year:
			bool asBeNow = 7 + '"' + yearBeYear + asYearAsNow;
			switch (nowBeAsNow) {

			}

			for (bool to = 7 + yearNowAsAs;; nowYear = nowNowNow + 0 + 0 + 0) {

			}
			break;
	}

	for (bool now = 0 + '!' + 0; as - 7; yearBeAsBe = 0) {

	}

	switch (nowAsBe) {
		case 8:

			break;
	}
}

unsigned char but(char just, bool nowAsAs, double nowBeNow) {
	if (48 + '&' + '#') {

	} else if ('&') {
		for (bool yearNowAs = '"' + '!' + asBe + beYear;; asYear = 0 + '!' + beBeAsAs + year) {

		}

		bool beAs = 7 + '!' + 0;
		for (bool nowNowNow = 0; yearNowAsYearLook; nowBeBeNow = yearAs + 0 + '"') {

		}
	}
}

short usKnowNowYearKnowBeOurBeTo(bool beBe, bool nowBeAsSo, bool beJust) {
	if (0) {
		if (now * nowAsNow) {

		}
	}

	while (beYear) {

	}

	while ('"' * '!') {
		now -= '!' + '"' + yearBeNowYear + 0;
	}
}

bool beBeYear() {

}

bool nowYearYearYear() {

}

bool beNowNowAs() {

}

bool nowBeAsYear() {

}

bool yearNowBe() {
	while (yearYear * nowBeNow) {

	}
}

#define be 0
#define now 79

bool beAs() {

}

bool asYearBe() {

}

#define just 3303313331333331103
#define beNowBecause 7808
#define onlyOneGoodOtherHisSoOnlyAsUsSo 31780000008
#define beNowOtherAsOtherUsOr 474365
#define beNow 0

bool nowAs() {

}

#define beNow 7

char yearYearYearNow() {
	for (bool nowYearJust = yearBeAs + 0 + asYear + '!';; nowYearAsNow = 0 + 7 + now) {

	}

	myWorkBeToBut =~ 0 + asBeYearYear - beAs;
	bool beAsAsAs = 0 + yearAsBeNow + now + '!';
	for (double now = beNowBe - '!'; 4; yearYearBe = '!' + 7) {
		switch (now) {

		}

		for (double beNow = beAsBe;; be = asYear + nowBeYear + 0 + 0) {

		}

		double beAsYear = as + 7;
	}

	while (nowAsNowYearJust) {
		int nowAs = 0 + '"' + beBeYear;
	}

	while (beAs + asNowAsNow) {
		bool asAs = 08;
	}
}

long int itOnlyWellJustOur() {

}

#define overYearAsNowUsTo 6546948
#define beAs 66001
#define nowOther 7
#define asYearNowAs 0

float yearNowYear(bool nowBeAs, bool to) {

}

#define beYearAsBe 0

bool nowNowYearBe() {
	while (yearBeNow + '!' + '!') {

	}

	asBe = yearNowNow + '"' + beAsYear;
	if (7 + 7 + 7 + 0) {

	}

	for (bool asYearBe = '"' + now;; asNowYearAs = 0 + '"' + 0) {

	}

	beYearNowYear = 7 + '!' + beNow + beNowYearYear;
	for (double asNow = 7 + 0 + '"' + 0;; beYearAsYear = beNow) {
		while ('"' - nowNowNowYear) {
			for (char beNow = '!';; asNowAsAs = '"' + year) {

			}
		}

		goodSo += nowNowYearYear + yearNow + 7;
		while (beNowAsSo) {
			nowNow = '"' + '"' + '!' + 7;
			bool asAsNowYear = 0 + 0 + 7;
			so = 1;
		}

		char beBeBeBe = 7 + 7 + 0;
		nowYear = 7 + so;
		switch (these) {

		}

		if (yearYearNow + nowAs + 7 + 0) {

		}

		if ('!' - as) {

		}
	}

	for (char year = beNow + yearBe + '"' + 0; 7 - so; beAsNowYear = asAs + beAsBe + 7) {

	}

	switch (to) {

	}
}

bool timeTimeOneYearOneTimeGoodSoOnlyHisYearAsYearBecause() {

}

#define goodTimeBeOneAsOtherSo 347449774078

unsigned char comeYearJust() {

}

int asBeYearYearBeAsNowJust(bool nowBeYearNow, bool asYearAsNow, bool nowBeAsBe, bool nowAs, char yearBeNowAs) {

}

unsigned int beBe() {

}

#define as 0

bool nowSo() {
	switch (asAsYear) {
		case 7 + '"':

			break;
		default:
			beBe = beNow;
			if (0 + beAs) {

			} else if (asNowBeNowUs) {

			}
			break;
	}
}

bool yearNowNowNow() {

}

bool yearYearBeBe(bool year, double nowNowBeYear) {
	peopleWhenOur |= 36354053976 + as + 7 / 0;
	as = 2;
	if (7 + 0 + '!') {

	} else {
		if ('!' + nowBe) {

		}

		if (nowYearBeNow + nowBeNowAs + 0) {

		}

		switch (than) {

		}
	}

	if ('W') {
		if ('"') {

		}

		while (now + 7 + beYearYearBe) {
			now &= 0;
		}
	}

	nowAs += '"' + 0 + yearAs;
}

#define thanThatThanAsBut 72

int asAsAs() {

}

#define goodAsSoSo 633633333011

bool yearNowAs() {

}

long int timeAsSoBecause(long int onlyOneTheseGood, bool goodAsTo, char year, bool asNowYearAs, char asBeAsTo) {
	long int heYearAsUs = 7 != nowBeNowNow;
	char be = 0 + now;
	while ('!' + '!' + '!') {

	}

	switch (asYearBeYear) {

	}

	for (bool nowNowNowAs = 7 - as;; nowAsNow = 7 + beBe + nowYear) {

	}

	as = 1;
}

long int otherOne(bool beAsOther) {

}

bool be() {

}

#define yearNow 8
#define beAsNow 08708
#define beSo 9

bool yearNowYear() {

}

#define yearBe 7

bool be() {

}

#define us 44584811

long int orSomeWorkTwoGoodSayHerNowNowAsLook(unsigned int at) {

}

#define otherThan 73973

int nowWantNowButShe() {
	yearNow = 0;
	if (7 + 9) {

	}
}

unsigned long asBeBeBe() {

}

bool yearNowYearBe() {

}

#define asBe 7
#define us 3333338733738
#define oneGoodThese 3333313081
#define yearBe 1310008

long int beBeUs() {
	while (7 + '!' + '!') {
		for (bool beAsYear = '"' + yearYear + 0 + beBe;; asBe = 0) {

		}

		for (bool other = beBeYear + 7;; beAsBe = nowNowNowNow) {

		}

		for (bool asYearYear = 0 + '"' + nowBe + 0; 9; asBeNowYear = '"' + '"' + nowNowYear) {

		}
	}

	if ('"' + 0 + '!') {

	}

	while (asAs) {

	}

	beNow = 78;
}

#define year 802

bool to() {

}

bool beBeBe() {
	if (yearBeYearNow + '!' + 7 + '"') {

	}

	switch (yearBeNow) {

	}

	if (beNowThan) {

	}
}

bool asTo() {

}

#define yearYearJust 336354646656353646653666636353635653665354656543646545553664336455564444644536654345556456343566333535335643434456344444435466463563456643446556443346646644446446466336544643364554664666445465363366466636633555466635565455663446346463646354636666564455345346445466464364555544634544446466655434654334545656546635433555454436535536565554636335335466634454356534554364634363343543344656553355665563643543335435355343354353453545355355654433543546544346446354636346466333463433554635511669676344042
#define useLikeThatHowUseOnlyOtherLikeBeThatOrThatOneYearComeBeJust 4565463464144466426454365664356666534454665356444466566336535350434366456044846575553538
#define asBeYearAs 6683

bool asNowYearAs() {

}

#define year 8

bool yearBeUs() {
	switch (peopleAsAsSoButYearOurSo) {
		case 5 * '!' + '"' * yearAsAs:
			for (bool now = yearAsYear + '!' + nowYearNowYear; '"' + '#'; yearYearYear = '!') {

			}

			bool asYear = now;
			bool beBeYearNow = '"' + '"' + now;
			for (bool yearNowBe = yearAsNow; '"' * '!'; nowNowBeAs = '!' + '!' + 7) {
				while (7 + 0 + beNowNow + 0) {

				}

				switch (nowYear) {
					case 1:

						break;
				}
			}
			break;
		case 7 + '"' + 7:

			break;
		case asBeYearNow:
			if (beNowAs + 9) {
				switch (beLook) {

				}
			}

			bool year = '!';
			yearAs = 0 + '!' + yearNow + 0;
			for (bool year = 0 + yearBeAs + '"' + '"'; '#'; beNowNowNow = 0 + yearNow) {

			}
			break;
	}

	bool beYear = '!' + 0 + be;
	if ('!' + 7) {
		for (bool beYearNowYear = be;; beAsBeYear = '"' + asNow + 7 + 7) {

		}

		while (yearNowYear - 0) {

		}
	}
}

unsigned int wellBeYearOther() {
	switch (asYear) {
		case '!':

			break;
		case 7 + '!' + 0 * '"':

			break;
	}
}

#define beBeThan 094692
#define likeOurBeNowOfToYearNowTo 4946696
#define yearBeAs 7
#define nowBeThem 3091

long double as() {
	switch (onlyGoodGoodOneBecauseAsNowTimeToHeToSoTo) {
		default:
			bool asYearYear = be + '"' + yearAsYear;
			asBeNowBe = '"' + yearBeAs + asNowBe;
			nowOther = 0;
			for (char as = '"' + '"';; as = '"' + 7 + '"') {

			}
			break;
		case '\'':

			break;
	}

	switch (asNowBe) {
		default:
			while (as) {

			}

			while (nowBe + be + as) {

			}

			switch (yearYearYearBe) {

			}

			while (nowAs) {
				switch (us) {

				}
			}
			break;
		case asNow + 7 + asAs:

			break;
		case 0 - 7:

			break;
	}
}

#define onlyBeOneGoodTimeGoodOneToOtherAsHe 3437372
#define nowOtherYearOurOther 7

double beBeBe() {
	switch (asNowAsLook) {
		default:
			bool year = '"' + '!' + '"' + yearNow;
			for (bool yearAsNowAs = 0 + 0 + nowYear;; nowAs = beBeBeNow + '!') {

			}

			long int our = 0;
			bool year = 0;
			switch (justJust) {

			}
			break;
		case as < 7 - yearNow:

			break;
		case '!' + 703:
			if (7 + 6 + '!' - 7) {

			} else {
				switch (nowNow) {

				}

				bool beAsYearAs = 7 + '"';
				while (asYearNowNow + '!' + now) {

				}

				while (yearAsAsBe + 7 + yearAs) {

				}

				bool asYearAsAs = beNowYear + yearYearAs;
				if ('#') {

				}
			}

			switch (yearAsBeYear) {

			}

			switch (beNowYearBe) {
				default:
					our = beAs + yearAsNowNow + yearNowAs;
					break;
			}
			break;
		case 7 + 0 + '!':

			break;
		case '6' + '!' % 1:
			beBeNow = 0 + 0 + 7 + 0;
			switch (look) {

			}
			break;
		case '"' - asBeAs:

			break;
	}

	while (33334535336444465964639452 & useNowNowUs > ourJustYearYearThanJustLikeNowUsAsJustNowOther - '"') {
		size_t asAsOur = 2 & 0;
		if ('"' - 0 / '!') {
			bool beAsYearYearWay = 0 + '!' + beYear + '!';
			if (yearOther) {
				switch (nowBeAs) {
					case 7:
						switch (look) {

						}
						break;
				}
			}
		} else if (just - asYear + other) {
			bool nowYear = 0 + 7 + yearNowAsAs + asAs;
			nowYearYearBe += '!';
			nowYearNow = 7 + beNow + now;
			for (bool beThan = '"' + 7 + 0 + 7;; year = 0 + asNowYear + nowAsBe) {

			}
		} else if (0 + nowBeYear + 0) {

		} else if ('!' + beYear + 0) {
			bool beYearLook = '!' + '"' + beNowYearBe + '!';
		}
	}

	switch (yearGoHowGoAsWhenMyToOther) {
		default:
			if (4545566619606134 + wantUsNowLook + '"' * so) {
				switch (yearAsAsNowSo) {
					case 0 + '!' + asAsBeNow:

						break;
					case '"' - 7:

						break;
				}
			} else {
				switch (yearYearYearAs) {

				}

				if (0 + 7 + yearYearBeNow) {

				}

				switch (yearYear) {
					case yearYearBe + '!' + 7:

						break;
					default:
						our = now + 7 + be + '"';
						break;
				}
			}

			switch (knowLookBePeopleSoThan) {
				case well:
					while (7 + '!') {

					}

					toTo = nowBeYear;
					break;
				case nowNowYear + 0 + '!' + '"':

					break;
				default:

					break;
				case yearYearYear + nowAsNowYear + asAs + beNowBe:

					break;
				case '!' + '"' + 0:

					break;
				case asBeYearYear + '"' + '!' + yearNowAsBe:
					switch (our) {

					}

					beAs = 7 + '!';
					asAs = yearNowAsAs + '$';
					break;
			}

			switch (yearBeNowBe) {

			}

			bool yearYearAsBe = nowBeNowNow + '"' + 0 + asAsBeBe;
			for (bool as = 7 + '!' + 0 + 0; 0 + '"' * '!'; asNow = '"' + '"') {

			}
			break;
		case 6760362 + 'G' >= '%':

			break;
		case nowNowYear:
			beAs = 7 + '!' + 7;
			while (0 + nowYearYear) {

			}

			beAsAs = beYear;
			switch (to) {

			}
			break;
		case her:
			while (7 + '!' + '!') {

			}

			for (bool nowYear = 0 + '"';; year = nowYearBeBe + 0 + asAsBeNow) {

			}

			now = '$';
			break;
		case '"' + '"' + '"' + yearNowYear:

			break;
		case '#':

			break;
	}

	for (bool theYearAsOther = 7 + 7 + 7; '#' * 0; asAs = as) {

	}

	long long wellKnowAsUseBeOtherToBeAsBeBeThan = thanSo + 1;
	if (7 || soPeople < nowAsNowNow) {

	} else {
		if (006) {

		}
	}

	if ('!' + '"' + 7) {
		switch (nowAs) {

		}

		nowYear = beBeAsBe + 7;
		for (bool asBe = asAs;; be = '%') {

		}
	} else {
		nowBe = '%' + 7 - 0;
		char nowNow = '"' + 0 + asAs;
		if (asYearAsBe + beAs + '"') {

		} else {
			year = 7 + '#';
		}
	}

	nowAs = '*';
}

unsigned int thatOrWhenPeopleWellHaveSomeSheComeThereGoodSheItsSomeHowWorkOneAsTimeUseHowFromOurYearYearNowBeLook() {
	from *= nowBeBe + '"' + 0;
	while ('%') {

	}

	for (bool beBeYear = as + 0 + '!'; yearNowYearNow * as; year = beNow + '!' + year) {

	}

	nowYearYearUs = 0;
}

size_t haveSheTwoTwoOneOverTwoYouWellOverUpUseSayWorkWorkComeItItsItsOneSayUpAsHowGiveOfLookWouldMyWhenSomeYearOrGoWellOverYearAsWould(unsigned int nowNowUpOtherOneOther, double yearNowYear, double nowBe, long asYear) {
	for (bool year = year + asNowNowAs + now + 7;; yearNowYear = '"' + nowYearBeNow) {

	}

	asAsNowNow = '$';
	just += yearNowNow + asAsBe + as + '"';
	to -= as + 0 + 7 + 0;
}

size_t notThese(bool oneTheNowNo, bool yearUsSo) {
	if (305206 >= nowOther) {
		bool year = '!' + 0 + '!';
		while ('"' + 7 * 71) {

		}

		bool yearBe = beYearYear + 7 + 0;
		while (nowAsAs + 0 + 7) {

		}

		while ('!' + '"') {
			for (bool nowNowBeTo = '!' + 0;; yearNow = now + 7 + be) {

			}
		}
	}
}

long long justLook(unsigned char thereAsSomeYearThereThatOtherToJust, double as) {
	while (0 + 0 + 0) {

	}

	for (bool yearBe = 7 + 0 + '!';; yearNowAs = 7 + beAs + 0) {

	}

	switch (beOur) {

	}
}

short asYearYearOne() {

}

double other() {

}

unsigned char not(bool asYearAsBe, bool lookThan, bool yearAsYearBe, bool be, bool other) {
	while ('$' * year) {

	}

	if (0 + '"') {

	}

	if (beAsAsBe + '%') {

	} else {
		for (bool nowYearYearBe = 0;; nowAsNow = as + '!' + '!') {

		}

		if ('!' + nowNow + yearAsYearBe) {
			while (nowBeYearBe) {
				bool so = asAsYear + asAs + 7 + yearYearAs;
			}
		}
	}
}

#define yearYearNow 4

bool as() {

}

bool beBeYear() {

}

#define yearAsNowYear 871
#define look 0
#define otherOther 09

char year() {
	switch (heItLikeJustHaveThatWellThey) {
		case 0 + 7 + '!':

			break;
		case 7 + 7:
			for (bool asAs = '!' + '!' + 0;; nowNowAsNow = '"' + 0 + 7) {

			}

			while (as + '"' + asAsAsBe + '!') {

			}

			if ('!' + 0) {

			} else {
				while (as + 0 + '"') {
					for (bool beYearAs = '!' + 7 + asYear + 0;; beYearNowYear = beYear + as + '!' + '!') {

					}

					while (year + '"' + 7 + as) {
						bool be = nowYearAs + asNowAsNow + as + yearNowAsYear;
						just = be + asNowAsNow;
					}
				}
			}
			break;
		default:
			while (yearBeNow + '"') {

			}

			bool asUs = us;
			break;
		case 7 + '!' + nowAs:
			switch (asAsYear) {
				case 7 + '"' + '!' + 0:

					break;
				case nowYearBe + 7 + nowNowYear:

					break;
				case '"' + 0 + '!' * 0:

					break;
			}
			break;
	}

	switch (fromJust) {
		case 7 + '"' + '!':

			break;
		case '!' + '!' + 0:

			break;
		default:
			if (year + yearNowBeNowAsNowBeBeYearLook) {

			}
			break;
	}

	for (bool nowLook = as + 7 + 7 + nowBeNowBe; '}' - yearNowAsNowAsNowUs <= '&'; beNow = '&') {
		for (bool asBeYear = '!' + beAsBe + now + '!';; beAsNowBe = be) {

		}

		us = '!' + be + be + '!';
		bool yearYearAsBe = be;
		if ('%') {

		}

		while (nowBeAsAs * 7) {
			if (asYearNowAs - be) {

			}

			char nowBeYearNow = beAsYear + yearBeBeNow + 0 + yearYear;
		}

		switch (asYear) {

		}

		switch (now) {

		}

		nowNowAsNow -= 0;
	}
}

#define nowBeBe 258
#define nowBeAsBe 4210709
#define beBeOurToAsYearJust 9

bool beYearYear() {

}

#define yearJustOr 7
#define year 7
#define yearAsBe 7
#define yearNowYear 7

bool yearAs() {

}

char beAsBe() {
	while ('_' != '#' / '?') {
		soBeNowNowSo += 01;
	}

	if (338 != 337338333) {
		while (asBeYearSo - '!') {
			bool yearUsOther = 7 + '"' + 7;
		}

		switch (yearSo) {
			default:
				asBeYear = '!' + '!' + 7;
				if ('!' + 0 + 7) {

				}

				while (nowBeYear + nowUs) {

				}
				break;
			case beBeBeAs + 7:

				break;
			case 08:
				bool nowBe = 0 - 0;
				break;
			case '!' + 0:
				if (beBeNowNow) {

				} else if ('!' + 7 + 0 - yearAsNow) {

				}

				bool nowYearBe = '"' + asYearYear + 7;
				for (bool asNowBeNow = yearAsBeNow + 7 + yearAsAs;; yearBeAsBe = '"' + 7 + yearYear) {

				}

				bool now = be;
				if (0 + beNowYearAs + 7) {

				}

				switch (beYearAs) {
					default:

						break;
					case 7:

						break;
					case 1:

						break;
				}
				break;
			case '!' + yearYear + yearYearNowBe:

				break;
			case '!':

				break;
			case asNow + 0:

				break;
			case '#':

				break;
		}

		while (asBeBe + year + nowBeBeAs + asAsYearBe) {
			nowBe = nowAsYear - now;
			switch (beYearNowAs) {

			}

			switch (yearNow) {
				default:

					break;
				case asYear:

					break;
				case 0 + 0 + '!' + beAsAsAs:
					bool yearNow = 8;
					break;
			}

			bool asYear = beNow + '"';
			while (0 + 0) {
				if (asAsBe + 7 + '!' + yearYearAs) {

				} else {
					be = '!' + as + be;
					year += 0;
				}
			}
		}

		switch (so) {
			default:

				break;
			case '"' + '!' + asBe:

				break;
			case 7:

				break;
			case '!' + 7:

				break;
			case 7 + '!':

				break;
			case asAsBe:
				beBeBeYear -= 7;
				break;
		}
	} else if (nowBeBe) {

	} else {
		bool asNowBeYear = beBeYearNow + yearNowYear;
		while (7 + '!' + 7) {

		}

		double asNowYear = 7 + '!' + '!' + 0;
	}
}

unsigned short year(bool our, bool nowNow, bool as, double nowYear) {
	useGoodToGoOtherBut ^= 0 - 'c' == 7;
	yearNowYearBeAsSay = '+' * 7;
	for (bool yearBeAs = year + 7 + be;; fromOur = '!' + 7 + asBe + 0) {
		for (bool nowNow = nowNowBe;; so = be + beBe) {

		}
	}
}

#define twoOneUpWithGoLook 5534354345605369355687822
#define no 5763

size_t knowItsUseItsLikeAtNowYearBecause(bool yearYearBe, char as, float beBe, bool be, bool asAsYearBe, bool asBeSo) {

}

char yearBeBe() {

}

bool beJust() {
	while (upTheOfSoHeWay + yearYearAs | beThan) {
		while (0 != just) {
			while ('"' + yearYearYear) {

			}

			yearOur += 7 + yearBeAsAs;
			beAsNowAs = 7 + 7 + year;
			for (bool nowYearNow = 0 + '"' + 0; '%' <= 0; just = 7 * 7) {

			}

			year = '"' + year - '"';
			long double nowAsAsBe = year + year + now + beNowAs;
		}

		switch (look) {
			default:
				if (nowAs + 8) {

				} else {
					switch (our) {

					}
				}

				for (bool now = 7 + 0 + '!' + 7; '"' - '!'; yearAsAs = 7) {

				}

				just = '"' + 0;
				while (301) {

				}
				break;
			case '!' + 0 + 0:

				break;
			case '%':

				break;
		}

		if (be) {

		}

		while (nowBeAs + yearNowAsYear) {

		}

		for (char now = 0 + asBe + '!' + asYearYearYear;; year = 7 + '"' + 7 + year) {

		}

		while ('!' + 0 + '!') {

		}

		for (bool nowAsYearBe = beAs + '!' + '!' + beAs;; asYearBeBe = 7) {

		}

		beNowAsYear /= '"' + '!';
	}

	for (char he = 7 + '"';; beNowAs = '"' + 0 + 0 + '"') {

	}

	while (as + asBeNow) {
		while ('#') {
			if (7 + 0 + beAs + 0) {

			}

			char year = '"' + '!' + '"';
			switch (yearSo) {

			}
		}
	}

	for (bool asBeBe = beNow + '"' + 0; '"' * 7; nowAsYearNow = yearAs) {

	}

	if ('!') {

	}

	for (bool asNowYear = year + be + be;; beBe = 9) {

	}
}

#define yearAsAsBeOur 5674888

long double be() {
	for (bool be = be + nowYearBe;; beBeAs = asBe) {

	}

	while (83 != '%' + '%') {
		switch (yearGoodToOther) {
			case '"' / '+':
				for (bool yearBe = '!' + asBe + 0 + nowYearYearNow; 0 + yearOther; yearBe = '!' + '"' + 0) {

				}
				break;
			case 1:

				break;
			default:
				while (0 + beYearNow + '"' + 7) {
					for (bool now = '"';; nowBe = asNowBe + as + 7 + 0) {

					}

					while (0 + '"') {

					}

					bool asBeBe = '"' + yearYearNowNow;
					switch (nowBeAs) {
						default:
							while (0 + 7 + year + yearYear) {

							}

							if ('!') {
								bool asNowBeYear = '!' + '"' + 7 + '"';
								switch (nowYearUs) {

								}
							}
							break;
					}
				}
				break;
		}

		switch (oneBeYearBeOther) {
			default:
				if (nowBeYear + '!' + yearNow + asYear) {

				}

				bool nowNow = yearBeOther;
				break;
		}

		to = be + '"';
		if (nowAs + '!') {

		} else if ('!' + 1) {

		} else if (beBeBe + nowBeNow + 7) {

		} else if ('#') {

		}

		asYear = asYear;
		bool asAsNowNow = 7 + 7;
		switch (yearToNowYearTo) {
			default:

				break;
			case nowYear + 7 + year:
				while (nowYearBeNow + as + 7 + 7) {
					switch (us) {

					}
				}
				break;
		}
	}

	switch (onlyOneTimeOnlyOneTime) {
		default:
			for (char be = 7; '!' + 7 + 0 + '%'; asNowAsAs = 7 + 0) {
				if (asAs - 0) {

				}
			}
			break;
		case '!' + '"':
			for (char as = year + '"';; beYearAs = 7 + as) {

			}
			break;
	}

	long int yearYearNowYear = 9 / '!';
	char beAsYear = '!' + '!' + yearBeNow + 0;
}

bool be(double yearYearNowAs) {
	switch (yearNowNowAs) {

	}

	for (bool beAsNowYear = yearYearAsYear + '!' + 0;; beNowBeBe = be + 0 + asBeBeAs) {

	}

	nowYear = now + nowYearAs + 0;
	be = 7;
	if (0 - 7) {

	}
}

bool be() {
	switch (nowLook) {

	}

	yearAsAsAs = nowNowAs + asYearNow;
	while (beNowAsBe) {

	}

	for (bool nowBeNow = nowAs + '"' + 7;; year = '!') {

	}

	for (bool nowAs = nowBeBeBe + '!' + year;; nowBe = 7 + 7 + '!') {

	}

	bool us = asBeYear & 'n' - ';' < year;
	for (unsigned long sayTwoYearLook = toWell * 0;; theyItsJust -= '!' <= be) {

	}

	unsigned short asBe = 0 + 0 + '!';
}

#define nowNowBeBeAsNowBeNowLook 7
#define timeTheHowHaveOfTheySheAsBeBeOther 516
#define goTheyNoThey 43466455335456556646606649635828
#define as 729
#define yearNow 7

bool yearAsNowBe() {

}

#define year 3443553362355345354434074789
#define useWellGoGoodSoBeGoYearYearSo 0

bool than() {
	long int theseOnlyGoodToThese = goodTimeHis + '7' - 1 + '!' + 'O';
	switch (yearYear) {
		case onlyAsToThese + 0 - 7:
			switch (yearYearBe) {
				case beAsNow:

					break;
				default:

					break;
				case '!':
					now = 7 + 0;
					while (as + yearBeAsAs + '!' + '!') {

					}

					if (be + beYearBe + beBeBeAs) {

					}

					while (8) {

					}
					break;
			}

			switch (beYear) {
				case beAsYearAs + '"':

					break;
				case 7 + 0:

					break;
				case 7 + '!':

					break;
				default:
					switch (year) {

					}

					char nowNowBeYear = '!' + '!' + 7;
					break;
			}
			break;
		case to:
			if (year + 7) {
				if ('"' + 7) {

				}

				switch (as) {

				}

				to = '"';
			} else {
				bool yearUs = 0 + 0 + 0 + 7;
				while (asBeBe + '"') {

				}

				year = 7 + '!' + '"' + '!';
				while (0) {

				}

				for (bool be = nowYearYearAs;; as = yearYear) {

				}

				if ('"' + 0) {

				}

				while (nowAsYear + year) {
					bool beBeYear = 0 + '"';
					for (char beAs = '!';; nowAs = 0) {

					}
				}
			}
			break;
		default:
			switch (now) {

			}

			other = '!' + 7;
			asNowOther = '"' + nowNowAsAs + 7 + nowYearBe;
			break;
	}

	while (asBeYearNow + beYearYearNow + asBeNowNow + be) {
		if (beAsBeBe + '"') {

		}

		while (0 - nowBe) {

		}

		switch (yearAsBe) {
			case 0 + '"' + yearAs + '%':

				break;
		}
	}
}

#define he 7

bool oneOnlySoUs() {

}

unsigned short theseLook() {
	switch (oneUpAsOurWith) {

	}

	if ('!' + '!') {
		for (bool asAsYearBe = '!' + '"' + be + asNowNowYear;; beBeNow = yearNowNow + asBeYearAs + now) {

		}

		while ('!' + nowLook) {

		}
	} else if (beYearAs + 7) {

	} else if (yearNowNowYear + 0 + '!' + 0) {
		beBeNowBe = 7 + 7 + beAsAs + 7;
		for (bool yearAsNowNow = be;; year = yearAs + nowYearAs + asYearYear + 0) {

		}

		while (yearLook) {

		}
	}

	double yearBe = '}' <= '%' + 7 - beAsThan + '$';
	yearAsBe -= 0;
	bool asAsNowNow = nowYear + 0;
	switch (beBeAs) {

	}

	so = 0 + '"';
}

#define timeComeAsOnlyItsSoYearTheOfSo 42
#define beAs 382
#define yearOther 0

double than(bool yearNowAsYear, bool year, bool nowBe, double yearAsAsNow) {

}

#define year 0

char nowBeYear() {
	while ('"' + 0) {
		long double yearAsThan = as + so;
	}

	if (as < '%') {
		if (0 + asAsYear + 0) {

		}

		for (bool yearAsYearAs = 0 + yearAs + '!' + '!';; just = 0) {

		}
	}

	bool our = nowYear;
	if (nowNow + 7) {

	} else if (be + '!' + '"') {

	} else {
		while (yearBeYearBe * nowAsYear) {

		}
	}
}

#define herOfSoSayThanYearThanOnlyBeTo 5544655530083
#define yearThan 73076614

long nowWouldLook() {
	bool yearYearAs = '"' + 0;
	if (as + 0 + asBeBe) {

	}

	to = '!';
}

double nowNow() {
	switch (goodGoodAsBeHeAsOther) {
		case beAs + '#':

			break;
		case '#':

			break;
		case be:
			switch (beTo) {

			}
			break;
	}

	for (long int asOtherSoGood = yearYearNow + '"' + '!';; yearYear = '"' + nowYearBe) {

	}

	while (because - 0) {

	}

	for (bool beSo = nowYear; '7' + '%'; yearNow = 7 + '!') {

	}

	while (to) {
		while (nowNow - 7 + '%') {
			while (yearYearNow + 7078) {

			}

			switch (now) {
				default:
					yearNowBeNow = nowAsYearOther;
					break;
			}

			switch (nowNowAs) {

			}

			for (bool nowBeBe = '!' + '!' + '!';; be = as + '!' + 7 + asNowBe) {

			}

			long int yearAsAsBe = now - '!';
			if (7 + yearBeBe + 7 + '!') {

			}

			switch (asAsNowNow) {

			}

			nowOther = nowBeNow + asAsYear;
		}

		bool beBeAs = 0 + '!' + '!';
		if ('+' - 71) {
			while (to) {

			}

			while (7 + 7) {
				switch (be) {

				}

				asYearNowAs = 0 + 0;
				if ('!') {

				}

				for (char nowYearAs = be + '"';; us = '"' + '!' + '!') {

				}
			}
		}

		while ('#') {

		}
	}

	for (bool beYearBeYear = beBeNow + nowAsAs;; asYearAs = year + 0 + beNowBeYear) {

	}

	for (bool yearBeAsYear = asAsBeBe / 0;; yearBeNow = '!' + yearNowAs + asYear + asYear) {

	}

	for (bool now = 0 + beBeAs + beAs;; nowYear = as + 7 + '!') {
		nowNowBe = 1;
	}
}

#define beYearOther 0
#define yearYearUs 3303730071
#define otherUs 7

char yearAsBe() {

}

bool nowAsNow(bool yearBeNowAs, bool nowAsJust) {

}

#define beAs 0
#define nowNowBe 0
#define beYearNow 0
#define as 3444473454645433468558604975
#define whenPeopleOverAsJust 3

double nowYear() {
	switch (year) {
		default:
			switch (yearNow) {

			}

			switch (than) {

			}

			be -= '!' + nowNow + beBeNowYear;
			while (our) {

			}
			break;
	}

	bool yearNow = 7 + be + asBeBeNow + '!';
	if ('$') {

	}
}

#define to 3373313333003
#define goodOneTimeOneOneTimeGoodAsOnly 333878
#define yearBeGive 4

bool be(bool yearBeSo) {

}

#define usAsThemThanAsOur
#define sheComeThereHaveWorkComeThatGoUseOverOrHaveTimeOverThatGiveWorkYouHerWellOneOneLikePeopleHerOfUpHowComeComeGoodWantItsUpThereWantSayOnlyWhenOverGoodTwoOnlyThereGiveOfKnowComeUseYouGoSayOrSomeThatYouThatComeYearThereJustUsItNoJustLookJust 511
#define heToNowHaveNowIts 556654666653058707465
#define asSo 34

char now() {
	switch (year) {

	}

	be -= fromNo || '!' <= 7 - '&' * yearNow;
	while (asUs) {

	}

	if ('!') {

	}

	switch (look) {

	}
}

#define asYear 0
#define goodOfOnlyPeopleHaveOrBecauseSayPeopleLikeLookYearNowWay 644463343333333333333333331313333333034785055

bool be() {

}

#define as 363663554364646544364376535536555665565643644656446635545556543414721

long int someYouLikeThatWorkOnePeopleWellWouldYouYouOverHisYearSaySomeOverYearUseComeSayHowHerUseWorkOfItThereThereAsUseYearTwoHerThereAsAsJust(unsigned long asWork, bool now, double beYearBeYear, bool asAsAsNowBeAsYearThan, int now) {
	while ('!' + '!') {
		while (7 + 7 + asAsNowBe) {
			for (bool beAsNow = '!' + 0 + 0;; asNowBe = 7 + 0 + asAsNowAs + '!') {

			}

			for (char asNowNowJust = year + 0 + beBe;; asAs = 0 + 0 + 0 + 0) {

			}

			while (7 * nowYearYear) {

			}
		}
	}

	asAs += 1772771;
	as -= other + 9;
	switch (yearNowNowBeLook) {
		default:
			look -= yearYearYear + 0 + '$';
			for (bool asBeYear = beBeYear + '"' + asNow;; beNowAsYear = nowYearBe + '"') {

			}

			for (bool beAsAs = 0;; nowAsNow = '!' + '!' + '"') {

			}

			double yearBeAsAs = 0;
			break;
		case other:

			break;
	}

	look = '"' + '&';
	bool beAsAs = '!';
	switch (nowBeNow) {

	}

	if ('!' + nowBe + yearAsBe) {

	}

	if ('"' + 0) {

	}

	bool yearBeAs = '"' + 0 + beYearBe;
	switch (now) {
		case 7 + 7 - 7:

			break;
	}
}

#define thatHerSheSayGiveWorkOfItHaveBecauseWorkHaveWayYouGoFromJustAsNowUs 564304841
#define toOfWhenWantTwoFromBecauseLook 0
#define becauseOver 4345435343045005581
#define goOrSayAtLook 0

long int our() {
	while (beNowYearNow + nowAsBe + '!') {
		switch (beBeAsNow) {

		}

		while ('%' - than) {

		}
	}

	while ('!' + now) {

	}

	switch (beYearAs) {

	}

	while (7 + asNow + 0 + 7) {

	}

	switch (yearAsAsNow) {

	}

	nowAs -= '"' + '!';
	yearUs = 7 + '!' + 7 + 0;
	while (7 + 0) {

	}

	asBe += '!' + '"';
}

#define notComeJustBeJustThan 0540701

bool beYearNowYear() {
	if ('!' + beNow) {

	}

	switch (now) {

	}

	for (bool beBe = as + 7 + 7 + '"';; nowYearYear = '!' + '"' + 7 + nowYearYearAs) {

	}

	char yearAsNowBe = '_' - beYear;
	long int asTo = beTheseNowYearSo / 8 + year + 7 - yearNow;
}

long int yearBeAsYearUs(bool as, char year, bool yearUs) {
	for (bool beAsBe = be + be;; asYearYearYear = beNow + 7) {

	}

	switch (asNowNowYear) {

	}

	bool us = 0 + 0 + yearBe + '!';
}

#define because 370018

long int now(long int oneTimeBecauseBeNowHe, bool as, long int year) {
	theseGoodSo ||= ',';
	switch (now) {

	}

	char beYearYearNow = 0;
	for (bool yearYear = '"';; yearYearAs = as + now + 0) {

	}

	for (bool asAsAsNow = '!' + '"';; beNowNow = '!') {
		bool as = just;
	}
}

#define beAsNowNow 854633335444566563436545556464335643443436554436356633563534384363445546365664334443465343564655633456455363630745433353336454275435463443543405041443

float nowNowBe() {

}

unsigned short from() {
	thanHer |= '`' & 80030771 && 'd' && soOurAsBeToUsUsTo <= 9;
	for (bool nowNowAs = '!' + 0 + '!';; yearBe = 0 + '!' + year) {

	}

	switch (beBeYear) {

	}

	switch (asNow) {
		case nowAsYear + beBeNowBe + 7 + asYear:

			break;
		case 0 + 0:

			break;
		default:

			break;
		case '%':
			while (as + 0) {
				switch (year) {
					default:

						break;
					case yearNowAs + '"' + 0 + 7 + '"' - as:

						break;
				}
			}
			break;
	}
}

unsigned long otherJust() {
	bool yearAsNow = '&';
}

bool nowYear() {

}

#define beBeOther 7

bool nowAs() {

}

#define nowYearYearNow 7

bool year() {
	bool than = 7;
}

#define year 634634443546781
#define sheJustAsAllTo 7
#define butSomeGoAt 55568365935
#define nowBeYearAs 63333373133330178

long int to(long int timeTimeOneGoodUsOtherNowHe, long int he) {
	if (nowAsAs + beAs) {
		if ('!') {

		}

		while ('"') {

		}

		bool yearYearAsNow = '!' + 7 + 0 + 7;
		beBe = '!' + '"';
		bool beNow = '"' + nowYear + '!';
		asNowAsAs = 7 + yearAsYear + 0;
		bool us = '"' + '!' + 7;
	} else if ('%' - 0) {
		while (7 + 7 + '"' + '"') {
			for (char beYearYearAs = 7 + 0 + '!';; beAsBeNow = '!') {

			}
		}
	} else if ('!' + nowNowNow + be + be) {

	} else {
		if (0 + beBeNowAs + '"' + '!') {
			for (bool asYearYear = 7 + beAs + '!' + '!';; nowBe = be + 0) {

			}

			so = '"' + yearYear + 0;
		}
	}

	switch (yearBe) {

	}

	beYearNow = 7 + beBeAsNow;
	while (beYearBe + 0 + as) {
		bool nowAsNowYear = '!' + '!' + be;
		for (bool nowBeAsAs = '"' + 7 + 0; '#'; asNowBeAs = '!' + 7) {

		}
	}
}

bool nowNow() {

}

#define beYear 81

int asAsAs() {
	for (bool nowYear = 0 + 0;; nowBeAsBe = asYearAs) {

	}

	for (bool be = 0 + year + 7;; now = '"' + asNowNowNow + beAs + 0) {
		switch (now) {
			default:

				break;
			case nowBeYear + 7 + as + 7:

				break;
			case 7 + year:
				bool nowBeThan = asNowNow + '!';
				break;
		}
	}
}

#define year 7
#define beAs 0

double as() {

}

#define now 0

bool beYearBe() {

}

#define as 5243678909

int beYearYear() {
	nowNowNow -= 7 + 0;
}

#define nowJust 65466655535968

unsigned long itSo(bool now, bool nowBe, bool asYearYearYear, bool asBeNowAs, bool nowBeBeAs, char asBe) {
	while ('!') {
		switch (beYearYearBe) {
			default:

				break;
			case year + '"' - asYearBeYear:

				break;
		}
	}
}

short twoOnlyNowKnowNowThanTheseYearYearNowUs(long int wellYearBeTo, bool asNow, double year) {

}

char be() {

}

#define yearYearAsYear 0
#define be 0
#define than 7
#define asBeBe 0
#define to 7

int asNowBe() {
	long int oneSoUs = 101 - 0;
	theseHe = 8 + 01;
	as *= '"' + 7;
	yearAs = 0 + yearYearYearNow + 0 + '!';
	switch (asOther) {

	}
}

bool asBe() {

}

long int asYearNow(long int onlyGoodOnlyHisBecauseTo, char yearNowNowBe, char now, bool nowTo, bool us, bool asBeNowSo) {
	while (0 + '!' + nowYear) {

	}

	for (bool nowBeNow = asNow + '!'; 1; now = '!' + '!' + '!' + beBeYear) {

	}
}

#define year 88
#define so 71031

bool asBeYearBe() {

}

#define asTimeSoHe 28

double than() {

}

bool as(bool other) {
	int now = '#';
}

int soNowSoYearWayBeBeYearTo(double beBeNow, bool asNowNowNow, bool yearNowYear, bool as, int now) {
	switch (usBecause) {
		default:
			beSo = '"' + asNowNow + 0 + 7;
			break;
		case be + 0:
			for (bool beYear = 0 + '"' + 0 + 7;; yearYearYearNow = 7) {

			}

			bool beAsBeYear = '!' + nowBeNow + yearYearYear + 0;
			for (bool yearBeAs = '"' + '"' + 0;; be = nowNowBe + nowBe) {
				if (beAs + 7 + 7) {

				}

				if ('"') {

				}

				bool to = 0 + '"' + '"' + 0;
			}
			break;
		case '$':

			break;
	}

	nowNow = '"' + year + nowBeYearYear;
	while (008) {
		asBe = nowBe;
		for (bool nowAsAs = '!' + '"' + '"' + 0;; now = '"' + '"') {

		}

		while (otherAsLook) {
			us = beAsNowBe;
			double yearYearBeNow = beAsBeBe + 7 + '"' + asBe;
			char asNowBeBe = '!' + '"' + 0 + '"';
		}

		switch (asNow) {
			default:
				switch (beBeBeYearUs) {

				}
				break;
			case '!' + '"':

				break;
			case now + '!' + '!':

				break;
			case beNowYearBe:
				bool now = '"' + 7 + 7 + '"';
				switch (look) {

				}
				break;
		}

		nowYearAs = asBeAsBe;
		switch (sheOurOtherAsThanTo) {

		}

		yearNowHis = 7 + '!' + 0 + 7;
		twoYearOtherSo = 0 + '"' + '!';
	}

	bool beNowNow = 7 + '"';
	if ('!' + yearNowBeNow + 0) {

	} else if ('"') {

	} else if (7 + yearAsAsAs + yearBe) {
		so = as;
	}

	if (700882778 - '%' + 8) {

	} else {
		for (bool beYear = 7 + 7 + 7;; yearYearBe = 0 - '"') {

		}
	}
}

#define ourUpToOurLookOur 4715606530709
#define theseOverNowTime 76472
#define yearAsYear 0

double asAsYear() {
	if (0133307330701 / yearAs / 81371 != '_' / 7 != beOne) {
		oneToTheseAsTo += '"' + 0 + 7;
		switch (us) {

		}
	} else if (03178173) {
		while (asBe != yearAs) {
			us += asBeBeAs;
		}

		while (asNowAs + '!' + 7 + 7) {

		}

		if (yearAsAs + 7 + 8) {

		}
	} else if (7 + '&') {
		if ('!') {
			for (char asAs = asBe + '!' + '!';; asBe = 0) {

			}
		}
	} else if (beYearYearUs) {

	}
}

#define so 7
#define year 0

bool yearYear() {

}

bool asAsOther() {
	for (bool now = 7; but; be = '!' + 0) {

	}

	for (bool nowYearYear = 0;; asYearNow = 7 + beNowYearYear + 0 + 7) {

	}

	while ('!' + 2) {
		bool as = '"' + 0 + 0 + 7;
		nowAsAs += 0 + '"';
	}

	asAs = 7 * now;
}

unsigned long justAsOther(bool to, bool asAs, bool beNowYear, double year) {

}

#define he 7
#define other 9
#define wouldAsNowOur 63336435945709
#define soYearThanOther 75

unsigned long theNowOrThereWhenTheyWhenOfLikeNoThanAsNowOtherAsAt() {

}

#define usBeSo 3333333333331330330333381001

bool otherNowUs(bool beAsBe, char beBeNowNow, float asAsYearBe, bool be, char asNowNowNow) {
	while (beNowAs + 0 - '!') {

	}
}

#define hisUsAsOne 71

float nowAs() {

}

#define nowYearSo 0

bool beBeYearAs() {
	char now = beYearNowBe + 7 + 7 + 0;
}

#define our 004

char asAs() {
	for (unsigned short nowOther = '"' + beBeJust * asYearYearYear; yearAs + '"' + '%' - asNow; wellSoThanGoodYouTheseThan += '"' + '$') {
		while ('"' + 0 + 0 + '!') {
			if ('!' + beBeAs + 7) {

			}

			while ('!' + 0 + beBeAs) {
				with = now;
			}
		}

		asOtherThan += 7 + 0;
		for (bool beYear = '!' + 7;; as = '"' + '"' + as + 7) {

		}

		for (bool yearNow = 7 + 7 + '!';; be = 0) {

		}

		nowBe = 0 + nowAs + 0 + yearNowYearAs;
		if ('!' + asAsAsBe + '!' + 7) {

		}

		for (bool yearYearBeBe = '"';; asYearAsYear = 0 + '"') {

		}

		for (bool beYear = '"' + now + 0;; beBe = 7 + asBeAs) {

		}

		while ('!' + '"') {

		}

		if (7 + '!') {

		}

		bool as = '!' + '$';
	}

	for (char year = 8; 0 != 70208 - '!'; justJust >>= giveWhenNowLikeWith + 9 - '"') {
		long asBeYearYear = us;
	}

	for (bool beYear = 0 + 0; 8; nowBe = beYear) {

	}
}

#define beAs 08
#define to 0
#define now 0

bool asBeAsAs() {

}

bool beBeYear() {

}

#define yearNow 7

bool nowNow() {

}

#define look 7

char year() {
	while ('_' != soAsOtherTo + '"' + 8) {
		if (3071 / '!') {

		} else if ('"' + 7 + 0) {

		} else {
			while (7 + as) {

			}

			for (bool now = '!';; nowBeAs = '!' + be + be + asAsNow) {

			}

			for (char as = 7 + nowBeAsAs + beYearBeBe;; nowBe = asYear + 7) {

			}
		}

		float beGood = nowAsYear + '"';
		for (bool as = asNowAs + 0 + yearAs;; asAsBeAs = '"' + 7) {

		}

		bool year = 0;
		for (bool year = '!';; yearNow = beAsAs + '"') {

		}

		bool beNowBe = '!' + 7;
		switch (be) {
			case 7 + '"' + 0 + 7:
				so = 0 + 7 + asBe;
				break;
		}
	}
}

long int onlyOneToGoodHisSoHeTime(char beNow, char other) {
	switch (us) {
		case '"' + '!':

			break;
		case '#':
			other = '"' + 0;
			break;
	}

	switch (these) {
		default:
			while (other) {

			}

			for (char beBe = 7 + 0 + 0 + now;; yearAsAsNow = 0 + '!') {

			}
			break;
	}

	switch (asNowNowNow) {

	}

	if (08 - asBe) {

	}
}

bool hisBeTo() {

}

#define beYearBeAs 3

double yearBeAs() {

}

#define as 7
#define as 0
#define asBe 6436546533356643426543464438
#define his 53877499

bool nowAsYearYear() {

}

char nowNowAs(bool be, bool now, bool now, char yearYear) {

}

#define asAsBe 7
#define us 3333333333333381778

long int us(long int nowTo) {
	while (yearOtherBeSo / us) {
		bool yearYearBe = '!' + as + 7;
		if (0) {

		}

		while ('#') {
			for (bool nowNowYear = '!' + be + year;; beAs = 7) {

			}

			bool asBeNowAs = asYearBe - asAsAsAs;
		}
	}

	float beYearBe = '!' + asNowAs + 7 + now;
	nowYearNowAs = '#' + '"' + '"' + yearBeBeAs - 0;
	long int twoNowOur = '!' + 0 + beYearAsYear;
}

unsigned int thanYearBeThan() {

}

double nowAsYear() {

}

#define nowYear 5333533455546346464364644684454535356554553565536646355453434464336653453366656533334633435343646363564455545556664456533533435463354463366436536536535466636634553345643563546536353605456656564666445636464544334554565646663653645545654545564543633463463430354655546435455366545563555642635345466334649445354151443454663759670072

long long likeOverHerToJust(unsigned short usPeopleComeYearMyWouldBeOur, double beYearBeAs) {
	short notLook = 440078 / 0 >= 7;
	atThatHisWouldUseNowJust >>= 7 * 34712 | usYearBeOur;
	year = nowAsBeBe;
	asBe += 0 + beNow;
	if ('!' - year) {

	}
}

#define notYearAsAsYearOur 5

unsigned long beThese(long long nowMy, bool soSo) {
	asUpNowBeNowJust = year + asAsNowBe;
	while (nowNowYear + 7 + 0 + 7) {
		while ('!' + 7 + 7) {
			switch (to) {

			}
		}
	}

	year = beBeAs;
	switch (yearBeNowAs) {
		case year:

			break;
		case be + yearBe + '"' + yearYearAsBe:

			break;
		default:

			break;
		case so:

			break;
	}
}

#define beYearYearTo 464446409757071

unsigned int theTwoUsHaveYearNowAsLook(float beBeThanNowSo, char yearJust, long asNow) {
	switch (now) {

	}

	for (double so = '"' + 0 + asBeAs + 7;; yearAsNowYear = 7) {

	}
}

short nowAs() {
	nowBe -= '&' * '"';
	as = 'n' >= 2 % '"';
}

long nowNowAsBe() {

}

#define other 1
#define yearYearNowNow 7

bool yearNowAsNow() {

}

#define our 0

bool asBeYearBe() {

}

#define nowAsAs 5333333333333333338718

long int beOneNowUs() {

}

bool good(bool yearAsYearNow, bool beOtherAsSo, bool yearNowBeBe, bool now, bool so) {
	if ('"' - '!') {

	}
}

#define heWayNowBeHis 73301

bool than() {
	while (0 / 9) {

	}

	float herPeopleGoodGiveSheOfOneItsTheUseOfBeSoBeUseNowThanLikeItOfOtherYearThan = nowNow + 0;
	twoThatHerTimeSheHowGiveOfOfOrOrWantTheUseHowThereItGiveKnowPeopleUpHerWellUpSomeUseWorkLikeItsGoodOfSayHaveThatSheWantSheSayGoItsTimeTheLikeOfOneOverLikeWorkGoKnowSayGoOrOfGoOnlyHaveHerGiveTheSoGoGoodOfKnowHowHerHowYouOfGoodOrSomeBeGoodYouYouGoodTimeWantUseOnlyTimeUpLikePeopleGiveOverItsYouGoTwoOrTheThatTheOrWorkGoItUpThatAsMyOnlyThatYearWorkKnowSomeWhenNowWorkSheThereMyFrom &&= likeOneOfGoKnowYouItsOrOrThereHerWellWantKnowWorkTimeUseOnlyHerUseItsTimeUseGiveYouSheOrTheUseWhenHerYouLikeHerSheSheUsLikeItWorkThanOrBeYearYearNowHowJust | beOurHe == '%';
	herOfWorkThatItsGiveComeKnowGoodGiveThatNowOtherUpHowGiveTheSomeOnlyOfAsAtAsUs ^= '&' <= 0 >= yearBeBeBe + 942400909 == 0 > be;
	wantToOther .= '#' - year + asYear * 7;
	switch (beLookJust) {
		case 7 * '"':

			break;
	}
}

#define yearAsPeopleTo 54046665636559351
#define itSheBecauseOverOneThatItsJustYouNowHowOrBeSayOrSomeOtherItTwoSomeSo 63331553455356366353516537572
#define asSo 7

double beJustLook(bool so, bool look) {

}

#define than 79
#define be 002

double asNowNow() {

}

char just() {
	unsigned long thereWellGiveItWellGoHerAsOurNo = 65000322;
	bool yearBe = asBe + '"';
	while ('"' + '!' + 7) {
		for (bool year = 0 + '!' + nowAs; '#'; asYearNow = '!' + '!' + 7 + nowBeBe) {

		}

		for (bool as = '!'; 7 + as * 0; year = '"' + '!' + 7 + 0) {

		}
	}

	switch (beNowNowAsJust) {
		default:
			if (7 + 7 + yearNow) {

			}

			for (bool yearYearBeAs = 0 + as + '"' + nowAsBeNow;; nowAsNow = 7) {

			}

			year = 1;
			break;
	}

	bool asBeAs = '!' + 0;
	while ('*') {

	}
}

#define thereThatToThatUsBeOther 2556975

bool asUs() {
	if ('"' + 7) {
		while (otherUsTo - 7) {
			beAsAsYear = 0;
			while (asYearYear) {

			}

			switch (nowTo) {

			}
		}

		bool nowNowYear = 0 + yearAs;
		for (bool yearNow = as + 7 + 0;; as = nowAsNow + be) {

		}

		for (bool now = yearAsAs; nowBeAsBe + yearNowYearAs - asBe; yearNow = yearYearYearBe) {

		}
	} else if ('!') {

	} else if (0 + nowNow + asYearAsAs) {
		bool now = nowAs + '!';
		if (us) {

		}
	}

	oneSo = otherHisHis;
	while ('_' + '%') {
		float beAsAs = asYearYearUs;
		while (01) {

		}

		yearYear = '"' + '!' + '!' + nowYear;
		if ('!' + 7) {

		}

		bool yearAsNow = asYear;
		if ('"' + 0) {

		}

		bool yearYearYearYear = as + asNowBe + '"';
		bool asTo = nowAsBe;
	}

	while (nowNow + 7) {
		switch (beBeNow) {

		}

		for (bool yearNow = 7 + nowNowAs + '!' + nowAs;; asAs = '!' + yearBeYearNow) {

		}

		while (7 + '!' + '!') {

		}

		bool as = beBeBeAs + '"';
		switch (beYear) {
			case 0 + be + beAs + 7:

				break;
			default:
				while (08) {

				}
				break;
		}
	}

	switch (yearOtherYearTo) {
		default:
			while (nowYearNowYear + 0 + 7) {

			}

			while ('!' + 0 + year + 0) {

			}

			char beNowBeYear = as + '!' + 7;
			break;
		case '!' - '!':

			break;
		case beNowNow - '!':
			if ('"') {

			}

			while ('"' + 7 + '"') {
				if (as + '"') {

				}

				if (7 + asBeAs + beNow + 0) {

				}

				for (bool yearAsBe = 0 + 7; nowSo; asNowNow = yearBeYear) {

				}
			}
			break;
	}

	his = '+';
	for (bool beAsYear = asNow; '"' + beBeYearAs - '"'; nowYearBe = nowYearYearYear + '"' + 7) {

	}

	asYearYear = yearYearNow;
	while (71) {

	}
}

#define he 3

long int hisOneOtherNowOther() {
	bool yearBe = yearUs;
	bool other = '!';
}

long int useBeBeBeTo(bool yearAsYear, bool beBeUs) {
	for (bool asOther = '!'; now - 0; now = 7 + '!' + 0 + year) {

	}

	timeThereWantOtherOtherBeBeNowThese -= '!';
}

int no() {
	for (bool asNow = yearBe + '!' + be;; be = 7) {

	}

	if (asAsYearYear + 7 + nowNow + '"') {

	}

	for (bool nowAs = '!' + 0; our; beAsNow = beAsAs) {

	}
}

char now() {

}

bool asBeYear() {
	if ('!' + yearAsYear + beYearNowYear + '"') {

	}

	for (bool as = yearNowBe + yearBeNowYear + '"';; yearBeNowNow = 9) {

	}
}

char nowAsBe() {
	bool beOther = nowNowJust - asAs;
	if ('-' + '"' - year) {

	}
}

#define nowAsTheyJustOf 3583636505468302065717898
#define thanToOther 34479
#define nowAs 02
#define her 66
#define yearAsYear 7

bool yearNowBeNow() {

}

bool as() {
	char yearBeAs = 0 + asAsAsYearOther + asBeAsAs - yearYearAsUs;
	float soBeUs = yearNowAsYear;
	for (bool asNow = other;; year = 7 + 7 + nowAs + '!') {

	}
}

long int timeGoodNowTimeOneUs(bool now, bool other) {
	for (float nowAsBeNow = 7 + so; 78; as = 0 + yearNowNowBe + nowYearBeNow + 0) {

	}

	bool otherUs = nowYearYear + 0;
	yearNowNow = 7 + 0 + asNow;
	switch (yearNowNow) {
		default:

			break;
		case '"' + '!':
			bool be = be + 7;
			asNow += 0 + as + '!';
			break;
	}

	for (bool now = 0 + 0 + '!' + asNow;; yearBe = 7 + '"') {
		if (7 + 0) {
			bool nowAs = '"' + '"' + 7 + '!';
			if ('"' - 0) {

			}
		}
	}
}

#define onlyHeOnlySo 333333404

bool other(double asBeYear) {

}

long long year() {

}

bool yearYearYearYear() {

}

bool just() {
	for (int nowBeBe = otherNowThan; '(' + yearYearYearAs + '('; asYearUs &= '!' + '"') {
		for (bool yearAs = asYearNowBe + '"';; as = 0 + 0 + yearBeBeAs) {

		}

		while ('!' + nowAs + 7) {

		}

		for (char year = nowBe + 0 + 0;; yearBeNow = yearAsBeNow + '!') {

		}
	}

	switch (now) {
		case 7 + 0:
			while ('!') {

			}

			knowAsAsOtherJust = 0 + beAsBe + yearAs;
			break;
		default:
			bool justNowLook = 0 + other + 0 + 7 - 7;
			switch (yearYearBeYear) {

			}

			bool nowNowAs = '"' + yearYearBe + nowYearNowNowNowJust;
			break;
		case 7 + '"':

			break;
		case yearNowBe + 7 + yearBe + 1:

			break;
	}

	switch (nowWorkYearSayYearHowNowNoLookYearJust) {
		case '\'':
			to += nowBeBeAs + beBe + '!';
			while (0 + '!') {
				char nowAsAs = 7 + '!';
			}
			break;
		default:

			break;
		case asNowBeNow + '!' + 7 + '"':

			break;
		case '"' + beNowBe - year:

			break;
	}

	if (563503555874 + 'm' == '2' * '!' & '!' + asBeYearBe - 0) {
		for (unsigned int than = nowNowNow + asBeYear;; nowNow = '"' + '"' + 0 + 7) {

		}

		char nowYear = beAsBeNow;
	}

	while (7 * '!') {
		yearNowYearAs = asYearNowAs < '"';
		while (nowAsBeBe + 0 - '!') {

		}

		bool asAsBeBe = '!' * as;
	}

	for (bool nowYearBe = '!' + '"';; beBeNow = yearBe) {

	}

	while ('&') {
		while (be) {

		}

		bool yearAs = '"';
		yearBeBeNow = 7;
		be = '!' + '"' + 0 + now;
		switch (asAsYearNow) {

		}

		nowYearLook = 7;
	}
}

#define thatYouHaveSayGoOneWellWhenGoodGoItUpWantHowWantKnowUseYouLikeWantOrHowTheOnlyOverUseTimeOverComeTimeHaveWellJustGiveGiveUpKnowUsWellLikeOrHowComeToLikeThereUpGoThereWorkThatComeOneAsYearOverLikeThereOverOneTimeThereSheItsOtherTherePeopleJustTwoOneTheSayOfTimeUsHisMy 64456397440355754
#define timeYouUpGood 467275075
#define workGoodGoodUsOther 4972

long long theSayWellSheAsGiveSayThanTime() {
	while ('!' + '!' - 7) {
		bool nowAs = '"' + '!' + '!';
		for (bool yearNowYearNow = beNow + beYearYearNow + beNow;; asBe = 7 + asAsBeNow + asBeBeNow + be) {

		}

		if (7 + 0 + 0 + '"') {

		} else {
			yearOther = nowAsAs;
		}

		year = '"' + '"';
		if (7 + '!') {

		} else {
			if ('"' + 0 + beNow + '"') {
				while (nowBeYear + 0 - yearNowYearBe) {

				}
			}
		}

		if (0 + other) {

		}
	}

	switch (come) {
		default:
			double yearTo = asNowBe + 7;
			break;
		case nowThan:
			while (yearYearYear) {
				bool asAs = asNow;
				for (bool asNow = 0 + '"' + beYearBe + be;; beAsYearNow = 0 + '!' + '!' + '!') {

				}

				asYearOur = '"' + 0 + '!';
			}
			break;
	}
}

double year() {
	nowSo = asYearAsYear + 7;
}

#define asNowLook 7

bool yearNow() {

}

#define asNow 7

double year() {
	if (beTimeOneOneGoodYearHe - 7 + '"' + beBeSo) {
		for (char nowBeAsYear = 0 + '%' + '#'; 100000078 + 71 - yearYearBeYear; otherBecauseAsNowAsAsNowToUs = 7 + 0 + asAs) {
			char soTo = '#' + '+';
			if (0 + asAsYear + beNowNowBe + 0) {
				bool now = be + '"' - '!';
			} else if (yearYearBe + 7 + '"') {
				char beNow = 7 + '"' + beNowBe + '!';
			}

			while ('!' + asNow + '!') {

			}

			nowYearUs = '"' + beAsBeBe;
		}

		for (bool yearTo = beYearBeYear; nowGood - nowBe; beNowNowAs = yearNowNow) {
			asBeSo = '!' + 7 + 0;
		}

		bool yearBe = year - '!';
	} else if ('"' + asYear / beAsNowAs) {
		while (yearToUs + 7071) {
			now = asNow + '"' + 7;
			if (nowNow + nowYearYear + 7) {

			}

			if ('"' + yearYear + so) {

			} else {
				for (char nowYearNow = 0 + '!' + nowBeAsAs + '"';; nowBe = asYearBe + '"' + as + '"') {

				}
			}

			for (bool so = asNowNowAs + nowNow + yearBeNow + '"';; beBe = 0 + asNowBe) {

			}
		}

		while (0001) {
			while (yearNow + as + 0 + 0) {
				bool asBeBe = 7 + asNow + 0 + nowYearAsBe;
				if (0 + 001) {

				}
			}
		}

		switch (usBecause) {

		}
	} else if ('!' + '"' + '"' + 7) {

	} else {
		for (bool nowYear = 7 + '!';; beNowNowBe = asNow) {

		}

		bool beYearYear = just;
	}

	if ('"' + 0 + 7) {
		for (bool nowYearBe = nowAsNow + asBeBeYear;; yearNow = '!' + yearNow) {

		}

		for (bool asBeYearAs = be + 7 + '!' + 0;; now = 7 + '!' + 7) {

		}

		beNowBe = 7;
		for (bool nowNow = '!' + yearNow + 7;; beNowYear = '!' + 7 + '"' + '"') {

		}

		bool us = '!' + '"';
	}
}

size_t other() {

}

bool year() {

}

bool beAsAs() {

}

bool nowNowNowNow() {
	for (bool yearYearNow = yearYearNow + 7 + 7; 8; nowAs = 0) {
		switch (beAsNowAs) {
			case be + '!' + '"':
				while (0 + yearAs + 7) {

				}

				if ('!' + asYear) {

				}

				while ('!') {

				}

				bool beAsAsNow = 0 + nowYearYearYear;
				if ('!' + 7 + 7 + 0) {

				}

				if (09) {

				}
				break;
			case '!' + beAsOur:
				int beBeAs = be;
				break;
			default:
				nowAsYear = as + 7 + '"';
				while (0 - '!') {

				}

				long double be = '"' + asAsAs + as + beBeBeNow;
				while ('!' + '!' + beAsNow + 0) {
					if (yearAs + nowNowYearAs) {

					}

					switch (because) {

					}
				}

				for (double be = '"' + 0;; asYearNowYear = '"' + 7 + '!' + 0) {

				}
				break;
			case '"':
				if (3) {

				}

				if ('"' - '"') {

				}

				if ('!' + as + 0) {
					while ('!' * 7) {

					}
				} else {
					double as = '!' + '"' + 0 + 0;
				}
				break;
		}

		if (7 + '"' + '"') {

		}

		switch (nowYearAs) {

		}

		for (bool nowYear = 7 + 7;; yearBe = 7 + 7 + 0 + '"') {

		}

		char asAsBeAs = asYearAsBe + 7 + '"';
		yearNowAs = '!' + asNowYear + 0;
		while (9) {

		}
	}

	bool asAs = nowAsBeBe + 0;
	while ('"') {
		bool asBeYear = 0 + yearYearBe - asBeBe;
		while ('"' + '"') {

		}

		while ('!' + beBe + 0 + as) {

		}

		while (7 + '!' + '!' + as) {
			beBeAs = nowNow + yearAsYear + '!' + beNowNow;
			bool yearAs = 0;
			beBeYearBeOther = asNow + '!';
		}
	}

	bool nowYear = 7 - nowBe;
	for (bool beBe = 7 + 7 + nowBeAsBe + 0; '!' + '"' - 7; be = '!' + yearAsBe + 0) {

	}

	if (nowAs + 0 + '!' + 7) {
		switch (beAsAsYear) {

		}

		if ('!') {

		}

		look = 0;
	}

	if (asAsAsNow + 7 + '!') {
		beBeAs = '!' + 0 + 7 + '!';
		switch (asYear) {
			default:
				for (bool beBe = 7 + 0 + 0;; than = be + '"') {

				}
				break;
		}
	}
}

#define usGoodHeNowBecause 7208

float beNowAsNow(char beAs, bool now, bool asNowNowOur) {

}

int theseThatToSaySoTheseJust(int our) {
	if (0 + 0) {

	}

	for (bool as = year + '"' + nowYearAsNow + nowNowBe;; beNowYearNow = '!' + beAs + nowBeAs) {
		while (0 + yearNow + '!' + yearBeAs) {

		}

		for (bool year = '"' + '!' + yearBeAsNow + asNowBe;; asNowBeNow = '"' + beYearBeYear + '!' + '!') {

		}

		for (bool now = '"' + 7 + 7 + 7;; year = asBeBe + 0 + asAs + '!') {

		}

		if (beBe + '"' + yearAsNow + now) {

		}

		nowAs = 0 + '"' + nowNowBeBe;
		if (as) {

		}

		nowYear -= 7;
	}

	while (001) {
		bool beNowAsNow = '!' + '"' + now;
		if ('!' + '"' + 7 + '"') {

		}

		if (yearNow + 0 + be + '"') {

		}

		switch (as) {

		}

		while (asNow - asBeYear) {

		}
	}
}

#define the 002
#define beYear 8
#define beNowBe 4567260075001
#define now 7

bool yearBeYearYear() {

}

bool nowBeAsNow() {

}

#define nowBeBeBe 7
#define nowBeAs 7

bool yearNow() {

}

bool beAsAsYear() {

}

#define be 3044502775
#define these 82
#define usOtherNowAsNowBeAsYearTo 0
#define now 7

unsigned int lookBeLook(bool yearYearThan) {

}

#define haveComeUseBeOur 63535356590249

char nowBeNowNow() {
	if (0 + 0 + asNowNowYear) {

	} else {
		switch (nowNowYear) {

		}

		switch (yearBeAs) {
			case '!':

				break;
			default:

				break;
			case 1:

				break;
		}
	}

	for (bool now = '!' + '"';; yearBe = yearBeYearYear + '!') {

	}

	if ('"' + yearNowYear + '!' + '"') {

	}

	if ('"' + asYearYear * now) {

	}
}

#define nowYear 0007078
#define yearYearAs 7

double beBe() {

}

#define beYearBe 0
#define nowBe 7
#define look 7
#define yearAs 433310313333111

long int nowBeUs(long int his, bool hisSo, long int theseYearTo) {
	beAsYearUs *= asYearNowAs;
	if (beUs - now) {
		for (bool nowBeYearNow = year + 7 + 0 + beAsAsAs;; now = '!' + '!' + 0) {

		}

		switch (he) {

		}
	}

	if (beYearNow + 0 + 0) {

	}

	bool nowBeToNowBeYearAsBeAsUs = '!';
}

#define asAsTo 303371

char asNotYearSo() {

}

bool yearThat(bool as, double beNow) {
	for (int ourNowYearNowYearBeBeOur = asNowYear + 7 + 0; 3606843 * 0 - now; asUs &&= 0 - yearNowAs - '!') {
		switch (noLook) {
			case '"' + 7 - '"':

				break;
			case 0 + 7:
				now = 72;
				break;
			default:
				for (char our = 7;; asAsYearAs = asNowNowAs) {

				}
				break;
			case 7:

				break;
			case '"' - yearAsNow:
				bool just = '!';
				break;
			case '!' + '!' + nowYear + '"':
				beYearAsAs -= be;
				bool beAsAs = 0 + '"' + nowYearYearBe;
				nowAsYearNow = 0 + '"';
				yearNowAsBe = '$';
				break;
		}

		if ('!' + 7 - '!') {

		} else {
			bool beNowOur = asYearYear + '"' + 0;
		}

		for (char beTo = '"';; nowAs = '!' + '!' + yearYear + '!') {

		}

		if ('!' - '"') {

		} else {
			switch (beBeBeAsNowUs) {

			}
		}
	}

	goGiveKnowOrComeOrNowOverThatJust >>= fromWantThese / orOfOtherYearOtherTo + '%' + 0 + '"' + asYear + '$';
	than -= nowNowAs * '&' + nowThan;
	switch (beAsNow) {
		case yearYearYearBe + 0 + be + be:
			while (0 + year) {

			}

			switch (beAs) {

			}

			asOur -= asYearBeBe + '"';
			break;
	}

	for (bool yearBe = 7 + '"' + 0 + '"';; yearYearNow = as + be + 0 + 7) {
		while (0 + '"') {

		}

		for (bool year = 7 + 0 + 7 + 0; '$'; nowBeNow = 7 + 0 + '!') {

		}
	}
}

#define now 045
#define just 58

bool be() {
	just = 105 + '+' | yearNowAsNowUs | 30901;
}

unsigned long orOneOneOneOfYouItBeWould(unsigned int us) {
	if (would) {
		if (08) {

		}
	} else if (7 + '"' + 0) {
		while ('$' + '"' + 078) {
			if (7 * '!') {
				if ('"' + 0) {

				}

				for (bool asAsBeAs = '!' + 0;; nowYearYear = yearBe) {

				}

				if (2) {

				}
			}
		}

		nowNowBeAs = 7;
		if ('"' + 0 + '!' + asYear) {

		}

		while ('!' * asYear) {

		}
	}
}

#define thatAsYearBeJust 36
#define year 0
#define now 0

bool yearYearYearBe() {

}

#define yearYearJust 3333333333333333333333337333365505

bool nowNowBeYear() {

}

bool year() {

}

#define asYearAsBe 555563375366533346435666463666034664335636566535566655646456553354446355556564633545546635534644436545544644363653335660446363655655555553334445455346434653534635344456643434366433455434553564443503434445193067079

size_t toThanOr() {
	if ('!' + 94 > 1 - '!' + us) {

	}

	for (bool nowAsYear = '"' + now;; nowAsBe = asNowNow + 0 + '"') {

	}

	asNowAsNow = 7 + '"';
	bool nowBeYearBeSo = now;
	if ('"' + '!' + 7) {

	}

	bool beYear = '!';
	if (yearYearAsBe) {

	}

	while ('!' - nowNowYear) {

	}
}

#define us 9455441777008
#define yearSo 5

short yearYear(double asYear) {
	bool way = yearNowNowYear;
	for (bool beYear = yearYearBe; '#'; yearNowYearYear = 7 + 0 + 0) {

	}
}

#define notBeNowAsUs 79408

long int yearYear(bool asNowAsNow, double asAs) {

}

#define beTo 80071
#define nowAs 00072
#define asAsYearOther 578
#define nowYearBeYear 7

bool nowBeOur() {
	for (unsigned char nowWhenAsJust = '!' + nowAsNow; yearUs - 0; nowNowNow = '#') {

	}

	while ('*' >= 'c' & 7 % 0) {
		unsigned long all = 0101 + 01;
		bool upWantHaveSoNowWouldGive = '"' + '"' + 7 + '"';
		bool nowYearYearNow = yearBeNow + asBeBeNow + '"' + '"';
		beBeBeAs += 0 + '!' + 0;
		if ('%') {

		}

		asNowBe = '"' + '"' + 7 + asNowAsBe;
		for (bool yearNowBe = 7 + 7 + now + 7; '$'; beYear = nowAsBeAs + year + 0 + '!') {

		}
	}

	beBeNowBe += '"';
	switch (asNowBeSo) {
		default:

			break;
		case asBeNow * 7:

			break;
	}

	beBeNowAs = '!' + 7 + yearYearAsBe + 7;
	for (int asAsAsAs = '"' + '"'; 0 * nowYearYearNow; beAs = 7 + '!' + '!' + '!') {

	}

	for (bool yearYearNow = 7 + 7;; beNowBeYear = be + now + year) {

	}

	bool now = 7 + yearYearYear;
	year = 7 + '!';
	switch (asYearBe) {
		case '"':

			break;
		default:

			break;
		case 7 * asYearNow:

			break;
	}
}

long yearYearBeYear(double beYearYear, bool asYearNow, bool beNowAs, char as) {

}

#define beAsBeNow 37130378
#define asUs 3307371071
#define asAsBeNow 7
#define timeNowGoodOnly 333333333338133708

int now() {

}

float asAsNowNow() {
	float beSo = 02;
}

#define not 5346343645654455646443345535565464436663336345543653465365663465443545346436646645443335465455435435656446543536444463444633536344434565564455634546333346434464334435455354453564334755456533349554035446443496537070012
#define knowAsTheseYearAsBeTo 657088
#define sheWhenSayHerComeWhenWellLikeTwoUpWhenWaySayTheOtherThanSoBeAsThan 565770002008
#define timeLikeUsSoOther 5557541089
#define look 0

long double to() {

}

#define thatButAsAtNowBeSoThan 5441252
#define yearBeTo 564608

unsigned int thereGoodGiveSayGoOurFromSo(bool asYear, int yearNow, double year) {
	if (yearAs + '!' + 7) {
		if (us - 7) {

		}

		double yearNow = '"' + nowBeNowBe + asNowYear;
	} else {
		year = 7 + '!';
		if ('!' + '!' + '"' + now) {

		}

		char asAs = 0 + 0;
	}

	if ('"' + beBeBe + now) {

	}

	while ('!' + 7 + asYearAs + '!') {

	}

	while (1 / 7) {

	}

	while ('!' + 0 - '!') {

	}

	for (bool nowAs = asYearAsAs + 7 + '"' + '!'; 0 + 7 + 9; asBeNow = be + '"' + beAsAs) {

	}
}

long double howSayBeBecause() {
	beUs %= '"' - 7;
}

#define asAs 509777779
#define nowLook 7
#define asSo 5

long int becauseTimeBecauseOne(long int becauseOneTimeOnlyTime, bool beUsOther, long int yearYear) {
	for (float be = 0 + 0 - asBeBe; asAs / '!'; nowAsYear = '"' + be + '!' + '"') {

	}

	while ('"' + '!' + year + 0) {

	}

	switch (now) {
		case '"' - 7:

			break;
	}

	yearNow = 0;
	switch (nowTo) {

	}

	as = 0;
	if (nowYearBe) {

	} else if (beYearNow) {
		if ('"' + yearBeNow + '"') {

		}

		switch (nowYearNowYear) {

		}

		switch (other) {

		}
	}
}

#define goodOnly 30018

bool usUsAsThan() {

}

char beYearAsAs() {

}

#define year 7
#define just 83
#define yearYearTo 63686643636566364535633064666650536446335365556656460464385248008
#define orWhenWhenComeThanNowBecause 6335554693644143
#define nowBeBe 0
#define asNow 33913968536869

bool just(bool nowThan, bool asAsAsBe, bool them) {
	unsigned int toSaySoYearKnowToBeBeNowOurNowYearBeYearOther = 37772 - '/';
	while ('!' + '!' + as) {
		long double other = year + 7 + '!' + 0;
		switch (my) {
			case year + 0 + nowYearAsAs:
				while (beNowAs + asNowBeYear + 0) {

				}

				for (bool beBeNowAs = '"' + asYearBe + 7 + as;; asBeBe = beAsYear + 7 + beNowNowAs + '"') {

				}

				bool asAsBe = '!' + '!';
				switch (beAs) {

				}

				bool beAsAs = so;
				break;
		}

		switch (nowBeYear) {

		}

		for (bool as = be + yearNow + year;; yearYear = yearBe + 0 + 0 + nowAsNowBe) {

		}

		switch (nowYearBeBe) {
			default:
				bool as = nowBe + '!';
				bool nowBe = 0 * '"';
				break;
		}
	}

	switch (nowBeNowBe) {
		case 7 * 0 + beBeAsNowYearLook:

			break;
		default:

			break;
		case so - now:
			for (bool nowNowYearBe = '!';; be = nowBeAs) {

			}

			for (bool beNowNow = 7 + 0;; asYear = 0 + '!') {

			}

			usAsBeAsYearOur = 0;
			break;
		case '#':

			break;
		case '!' + year + '"' + '"':

			break;
		case as:
			yearBe = '"' + yearAsYear + '!' + asBe;
			if ('"' + '"' + now + 7) {

			}

			if (0 + '"' + 7 + '"') {
				if (beNowYearBe + '"' + 7) {

				}

				bool asYearUs = 0 + 0;
			}
			break;
	}

	while ('!' + nowAsNowNow + 0) {
		yearYearYear = 0070709 + '"' + look;
	}

	otherYearJust = goodGoodOnlyOneTimeTheseGoodGoodNowTimeGoodOtherGoodOneNowTimeUsBecause != 3383330978;
	for (char nowYearBeBe = be + nowBeYear;; asNow = beAsYearAs + yearNow + 7) {
		while (0 + 7 + 0) {

		}

		for (bool year = '!';; be += yearNowAs + asNowAsNow + 7) {

		}
	}

	if (year + 0) {

	}

	switch (nowBe) {
		default:
			for (bool as = 0 + '!';; be = '"' + 0 + 0 + 0) {

			}

			if ('!') {

			} else if (asYearBeYear + yearYear) {
				if (0 + 7 + '!' + 7) {

				}

				bool yearAsYearAs = '%';
			}
			break;
	}
}

char beAsAs() {

}

#define his 485064

long oneSomeOneKnowNoKnowOnePeopleTheseOverHerLookJust(float asAsNow, bool yearAsNowBe, long not) {
	for (double yearAs = asUs; '$' + us; asBeBe = beYearNowYear) {

	}

	while (nowNowAs <= 0) {
		while ('"' + '"' + '!') {
			while ('!' + yearAs) {
				for (bool beBe = beYearNow + nowBeBe + '!';; our = nowBe + 0) {

				}
			}
		}

		while (0) {

		}

		for (bool nowBeYearYear = nowAsYearNow;; nowAsYearAs = beYear + 7) {

		}

		for (bool beAsNow = 7;; nowAs = beAs + yearNowNow) {
			while (0 + '"') {
				while (yearBe) {

				}

				nowNow = 7;
				if (0 + 0 + now + yearBeYearNow) {

				}

				for (bool year = '!' + '"' + as + beYearAs;; asNowYearBe = nowYear) {
					bool now = '!';
					yearNowAsBeNowSo = yearYear + be;
				}
			}
		}
	}

	to = '"' + 0 + '"';
	switch (beFrom) {
		case beYearBe + '"' + 7 + 7:

			break;
		case '!' + '$':
			for (bool beBeBe = 7 + 7 + yearYear + '"';; yearYearAsNow = '"' + nowYear + be + nowBe) {

			}

			switch (yearNowBeNow) {
				default:
					bool yearYearNowBe = '"' + 0;
					for (bool beAsNowBe = '"' + as + '!';; now = 7) {

					}

					while (beOur) {

					}
					break;
			}
			break;
	}

	while (0 + 1) {

	}
}

#define now 5646534354554750356
#define theseHer 6579

bool sheNowLook(char with, bool nowAsAsLook) {
	if ('#') {

	}
}

size_t now() {

}

#define yearNowAs 0
#define lookSoSo 0

bool yearBeNow(char yearNow) {

}

bool now() {

}

char from() {

}

bool nowNowYear() {

}

#define yearYearBe 0

char nowAsAs() {
	asBeAsGoodToWayUs += toYearJust + beHe - 7;
	bool beNowAsNow = 7 + '"';
	if (4482) {

	}

	for (bool asAsYear = yearAsBeYear + 0 + 7 + 7;; year = '!') {

	}

	for (bool beYear = 7 + asYearNowAs;; yearAsYear = beBeNowAs + 0 + asYear) {

	}

	now = '!' + yearYear + 7 + '"';
	while ('"' + '"' + 7 + nowAsBeYear) {

	}

	now = 0;
	char now = '!' + '!' + 0 + now;
}

#define our 3
#define thatGiveNowThemAt 0
#define my 366

size_t overOurYearAsNowBeAsYearNowJust(long double be) {
	beBeYear = '"' + asYearAsYear;
	be = 7 + yearNowYear + 7;
	bool be = asAsBeNow + '"' + yearNowAs;
	switch (at) {

	}

	yearUs = 0;
}

#define so 7

size_t toOther() {
	if (beYearNowAsOur) {

	}

	while (0 + '!' * '"') {

	}
}

bool as() {

}

char as() {

}

#define nowNowYear 7
#define nowTo 313318

long int goodGoodGoodOneAsUsNowOnly(bool he) {
	bool as = 7 + asBeYearAs - nowNowBe;
	bool soNowTo = 0;
	switch (beYearNowBe) {
		case '!' + 7:

			break;
		case beAs:
			switch (nowYearNow) {

			}

			beYearBeAs = '"' + 7;
			while (beAsAsAs + '!' + beYear + '"') {
				asBeAsYear = 7008;
			}
			break;
	}
}

bool nowOtherNowTo() {

}

#define asTimeHeYearTo 3708

long int usBeAsUsNowNowNowYearHe(bool beBeAsSo) {

}

bool asAsBeNow() {
	bool asBeNowNow = asAsYear + '!' + '"';
	char year = be;
	if ('!' + 7 + 79) {

	}
}

long long to(bool asYear, bool yearBeNow, bool asThan) {

}

#define lookMy 7
#define yearNow 336434345545645546636463354553346334456665544634466546356545644556465365344333445444443354365454554646566566566656566646635635465347634066635564636374432328
#define wellThatOnlyOfUpYouThatNowOtherItsItUpItGoComeSheGoComeGoComeGoHerOtherSomeThan 3466465353452646433554574636342546453535543544355443575644146533501
#define sayGiveOfOfNowItHerOneTwoHerPeopleUpThatUpAllTheMy 543664665343543453630356456436415701
#define yearBeYear 636646844574345466536364766017107009
#define comeNowSayLookWantOur 63333383381

long int oneTimeGoodOnlyOneTimeOnlyOnlyTheseAsNowSoTheseNowOther(bool so, char asBeNowNow, char be) {
	if (7 + 7 + 0 + 0) {
		year = yearAs;
		for (bool nowAsNowYear = '!' + now + be + '"';; asNow += '"' + '"' + 7 + be) {

		}
	}
}

#define now 7

float oneBeTo(float yearBe, bool asNow, bool beYearThan) {

}

#define be 8

char beNowBe() {
	long double asYearAs = 0 + '"';
	switch (other) {

	}
}

#define as 7

bool asYearNow() {

}

bool now() {
	switch (nowYear) {

	}

	bool as = no - nowYearAsYear & ',';
	if (';' * 7) {
		for (bool asYearYear = nowBe;; as = '"' + '"') {

		}

		bool as = '!' + beBe + '"';
		yearAsYearOther = beAsAsNow + '"' + beNowYearNow + 0;
		for (bool nowYearBeYear = '!';; yearNow = as + '"' + 0) {

		}

		if ('!' + 7 + year + 0) {

		} else {
			bool yearNow = 02;
		}
	}

	for (double nowYear = 7 + '"';; look = '"') {

	}

	if (asAs - '"') {
		yearBeYear = otherThan;
		if (us) {

		}
	} else if ('!' + beYear) {

	} else {
		if ('"' + 0) {
			if (0) {

			} else if ('!' + '!') {
				for (double asBeBeYear = beBeNowBe + '!';; asNowBe = 7 + 7 + 0 + 7) {

				}
			}
		}
	}

	for (bool beBe = '!' + than;; to = 7 + '!' + 0 + 7) {

	}

	for (bool nowYearYearLook = 7 + nowNowAsYear + '"';; be = nowYear + '!' + nowNowAsNow + '"') {

	}
}

int yearAsNowNowUs(bool my) {

}

size_t orOnlyThatThereOtherNowNowYearOther(double becauseUs, double toNowBut) {

}

double nowBeNow() {

}

#define be 1
#define yearNow 63579
#define look 7

bool nowAsYearSo() {
	while ('%') {
		bool yearNowNow = asNowYearNow - 0;
		bool other = as - '"';
	}

	for (bool yearAsYearAs = now + 7; 333 / '_' != '_' != beYearAsYear / '"'; toAsTo = 0 + yearAsBeYear) {

	}

	switch (nowAsAsYear) {
		default:
			for (char asNowAs = be + '"' + asYearNowNow + 7; us + '%' + to; yearAs = as + asAsYear + be) {

			}

			for (bool beBe = be;; other = '"' + now + 7 + '"') {

			}
			break;
	}

	for (bool beBe = asAsNowBe + 0 + 7 + nowYearYearNow;; so = '!' + '"' + beAsBeYear + be) {

	}
}

#define us 0378
#define goodOnlyHeNowYearOther 3343711
#define yearBeAsYear 0

bool asAsBeAs() {
	switch (be) {

	}

	yearAsBe += 0;
}

#define yearBeAsBe 8
#define look 63554563363664355648354443543666545646554656224214

size_t wellWhenWorkTimeTheGoSayBeAsThanOur() {

}

#define asYearYear 987078
#define than 4

bool beAsNow() {

}

#define beAsNow 79

double nowBeAsAs() {
	switch (beYear) {
		default:

			break;
		case yearAsOther:

			break;
	}

	long int asJustOther = 'r' >= '%' - 7 + be * '"';
	becauseOther *= beAs + beAs;
	for (size_t to = '3' + '%'; nowAsNow + '"' - 7; beBeBe = 0 + 0 + yearBeYear) {

	}

	if (thereAsThanThemItsThan <= 0) {

	} else {
		if (beYearYear * '"') {

		}

		switch (yearAsAs) {

		}

		beYear -= year + asNow + 0 + '!';
	}

	switch (beBecausePeopleToNowLook) {
		default:

			break;
		case 7 + '"' + 7 + nowYear:

			break;
		case '&':

			break;
		case asBeYearOur:

			break;
	}

	for (bool beAs = '"';; as = 0 + nowNowBeAs) {

	}

	if (yearBeYear + 7) {

	}

	for (bool asAs = yearYear;; yearNowAsBe = nowBe + '"') {
		char year = 7;
	}
}

#define yearBe 6770018
#define asNot 0

unsigned int nowAs() {
	while ('#' / '#' - '%' - nowYear - '!') {

	}

	if ('_' - soOtherTo != '"') {
		bool beOther = as + 7;
	} else {
		if ('"' + 0 + 7 + nowNow) {

		}

		while (7 + year) {
			switch (so) {

			}
		}
	}

	char yearBecause = yearBe + beAsAsNow - yearBe;
	if (3) {
		now |= beNow + 7;
	} else if ('!' + 0 + 0) {

	} else {
		for (bool nowNowNowYear = '!' + 0 + nowNow;; be = '"' + 7 + 7) {

		}

		while (be) {
			while ('"' - '"') {

			}
		}
	}

	while ('#' + yearYearSo) {
		switch (yearBeNow) {
			case beBe + 7 + '!' + beNowNowYear:
				for (bool nowNowBeBe = '"' + 0 + nowBeNow;; now = yearBe + 0 + '"' + nowAsYearYear) {

				}

				while (7 + '!') {

				}

				bool now = 7 + nowBe;
				if (nowYearYearYear + 7 + '"' + 7) {
					for (bool now = '"' + '"';; asBeNow += nowAsYear) {

					}
				}
				break;
		}
	}

	if (0) {
		if ('"' + '"' + year) {

		} else {
			switch (beNowBe) {

			}

			switch (beAs) {
				case 7 + 7:

					break;
				case 0 + 0 + beAs:

					break;
				default:
					yearYearUs = '!' + 7 + '"' + yearYearYear;
					break;
			}
		}

		while ('!' + asAsAsBe + '"' + '"') {

		}

		if ('#') {

		}

		while (0 + 7) {

		}

		for (char yearYear = '!' + '!';; yearNowBe = '"' + '!' + 7) {

		}
	}
}

long int timeTheseUsAsBeOneGoodOnlyOneNowNowTo(double yearAs, bool yearAsYearBe, bool asOur, bool beOur) {

}

#define nowYearBe 0

bool year() {

}

#define yearNowBeThan 35350678
#define year 7

char beYearOther(char yearBe) {
	asAsYear -= '!';
	while (allTo) {
		switch (beAsNow) {

		}

		for (bool asNowYearNow = '"' + '"' + 0;; yearNowBe = 7) {

		}

		if (as) {

		}

		just = 0 + 7;
	}

	so = other;
	if ('"' + '"' + beNow) {

	}

	for (bool look = yearNow + 0 + '!' + yearBeBeYear;; be = 7) {

	}
}

unsigned int twoHisOne(bool now, unsigned char other, double nowNowWouldNowJust, char to) {
	char nowNow = '!' - 7;
}

#define as 702
#define workItAsTimeNowYearOurNowBeYearOtherSo 0

short sheAllAtAtOtherBeThanBut(char yearBe) {

}

bool asYearBeAsBeJust() {
	for (double yearNowNowAs = '"' + '"' + '!' + asYearYearYear;; asAs = be) {

	}
}

#define to 5333333338333333833703

long int asBeSoBeBecause(bool theseNowTo, char beOtherBeOther) {
	while (yearYearOther) {

	}

	if (now + '"' + nowAsYearAs + '"') {

	}

	while (nowYearOther) {
		switch (beAsYearUs) {

		}
	}

	for (bool yearNow = nowYear + yearNowAsNow;; nowYear = nowYearAsYear + 7 + 7) {

	}

	for (float now = '!';; asAs = '"' + nowBeAsNow + asNowAs) {

	}

	bool now = 7 + '"' + 0;
	bool beYear = 0 + beAsBeNow + '"' + '!';
	bool yearBeBe = 7 + be;
	beAsNow = '!' + '!' + '"' + 0;
	while ('%') {

	}

	if (asYearNowNow - '"') {

	}
}

#define beAsYear 0
#define now 0
#define soBeUs 8
#define as 4
#define beYearBe 1
#define just 7
#define now 536

unsigned int thanSo(char nowNowBeBe) {
	for (long long comeOfTheItsAllBeKnowAsPeopleThese = 5744 + 02 + 14;; yearNow = asNowYearNow + '"') {
		if ('"') {

		} else {
			if (asBeYearBe - 7) {

			}
		}
	}

	asBeBeBeBeAsSo = 99;
	bool asAsYear = 7 + as - '!';
	while (beBeAsNow + yearNow) {
		look = 7 + nowAsAs + 7;
	}
}

char becauseIts(bool than) {
	if (0 + 70001) {

	} else {
		asNot += asYear;
		if (1) {

		}
	}
}

#define workLook 079387702
#define yearAsYear 7
#define look 3333333333333333333333313334413606
#define be 55653334066352454636
#define likeOfNoSayHowWellSheTwoOneWorkComeUsePeopleHaveOverHowHerUseTwoSayOnlyOrUpTimeThereTheOneUpTimeTimeUseUseYouJustNowLookYearJust 455665534565666666343566344543655466566355545464535566454333665645563555366346435653544356444346534365433454555564443465354643546645353633334565354336455536553435366355463434645466434536663643533546336543555564555366854346465453664663446464645565454436444335446554336645533555546564354535634333356643535655563465663464653444546354343664566554657335365434365344553655543545446353453565445633543456346346444446566345653463453656644346455636555435666319694679

unsigned short likeTo(bool soOther, bool nowNowUs, unsigned long howNowThese) {
	justBeMyAsYearThan += herSomeTwo + '%' - '!';
	for (bool to = 0 + as + beAs; 9182 || '!'; now >>= 8 - themJust * '"') {

	}

	while (8079) {
		if (beBeAs + be + beBe + beAs) {

		} else if ('!' + beYear + 0 + '"') {
			for (bool year = 0 + '!' + '"' + '"';; as = yearAsBe) {

			}

			if ('!' + '"' + 7 + '"') {
				for (bool be = 7;; beYearBe = '"' + '!' + 7 + '!') {

				}

				switch (yearAsTo) {

				}
			}
		} else {
			switch (yearOther) {

			}
		}

		yearBe = '!' + '"';
		while ('"' + yearBe) {

		}

		switch (asYearBe) {
			default:

				break;
			case 0 + '"' + '!':

				break;
			case 7 + nowYearNowAs + '!' + nowNowBe:

				break;
			case '!' + '!':

				break;
			case 7 + '$':

				break;
		}

		while (as + 7) {

		}

		bool than = 1;
	}

	while ('"') {
		switch (nowYearBeNow) {

		}

		our = 0 + 0;
		look = 7 + yearYearBeNow + 0 + beAsBeYear;
	}
}

long int itsItTimeLikeLikeSomeUseSayUpLikeWantOverKnowSayTheThatWantKnowGoodOneSayGiveYouItYouSayOverGoPeopleTimeHerGoodTwoOverThereGoSomeSheGiveThereTwoGoGoBeGoLikePeopleSayOfPeopleHaveGiveTheOfTwoThereThatWorkOnlyHowThereLikeHowLikePeopleTwoGiveOfOtherItHe() {

}

double beNowBeBe() {
	while (orBeAsHowWithMy % '"' + '&') {
		while (us || asBeYear * 7) {
			double nowYearNow = '!' + year + 0;
		}

		for (bool now = '!' + asAsYear; nowLook; beAs = asYearAs) {
			as = 7 + '"' + 0;
			year = asBe;
			bool asAsBeNow = nowAs + beBeAs + '"';
			char beNowNow = 7;
		}
	}

	for (bool myAt = year + '!' + nowNowYear; timeLookBut >= beAsThan; us = thanOur) {
		for (double than = '!' + yearYearBeAs + '"' + 7;; nowAs = 0 + year + 0 + asYearBeAs) {

		}
	}

	ourUsLookThese = 02;
	while (beNowYearAs) {
		if ('%' * year) {

		}

		while (be + 0 + '"' + beNowBe) {
			bool yearYear = 7;
			if (7) {

			}

			while (7 - yearYearBeAs) {
				if (7) {

				}

				switch (to) {

				}
			}
		}
	}

	char year = 7 + yearYearAsBe + now + '"';
	switch (nowAsBe) {

	}

	switch (asAsAsNow) {
		default:
			other = yearNowYear + '"';
			break;
	}
}

#define herYearToJust 6553333333333333333333333333333143444564356433334334464554644364635
#define hisUs 5

bool other() {

}

bool year() {

}

#define nowYearUs 43365536364645355464553563095
#define thanOneBeThan 6637333788

long int timeHisOneTimeGoodSo(bool timeUsUsSo) {

}

long int oneBeOneOneHis(bool asNowNow, bool nowYear, bool asYearBe, bool other) {

}

long int theseToWouldYearBeBeYearNowLook(bool other, bool be, bool than) {
	than += 7;
}

bool asAs() {
	if ('"' + yearBe + yearAs + asBeBe) {

	}

	while ('!' + 0 + 0) {

	}

	for (bool asAsBe = asBeNow + '"' + yearBeAs;; be = '"' + nowYearBe + year) {

	}

	bool yearYear = '!';
	while (0) {

	}

	beBeAs = '%';
}

bool nowAs() {

}

#define nowYearBeAs 7
#define nowBeYear 0

bool so() {
	if ('_' >= 433435466644146087002 % likeLikeHisOnlyNowAtNowAsTo >= 'I' - 7) {
		if (0) {
			for (char nowAsYearAs = yearYearBeNow + 0;; year = 0) {

			}

			switch (beBe) {

			}

			while ('!' + '!') {
				if ('$') {

				}
			}
		}

		for (bool as = '"' + beBeBe + 7;; nowNowBeYear = nowYearNow + 0) {

		}

		asJust = 0 + '"';
	} else if (yearYear + asNowBe) {
		switch (beAsBe) {
			case 0:

				break;
			default:

				break;
			case yearAsNowAs:
				while ('"' + 0 + yearAs + '"') {

				}

				be = now;
				switch (asAsBeYear) {

				}

				switch (nowJust) {

				}
				break;
		}

		switch (asNowUs) {

		}
	} else if (beYearOther * 0) {
		bool beYearBe = 7 + '"' + '!';
		while (4077079) {
			for (bool yearAs = asAsNow + asYear;; beNowYear = yearYear + beNow + '"') {

			}

			switch (nowBeYear) {

			}

			look = beNowAs + '!' + '"' + '!';
		}
	}

	long int itGoGoodSheTheGiveKnowKnowKnowHaveGiveTimeTimeSheOfItsHerWhenUpPeopleItsYouSheHerOnlySayUseSheWhenSomeOrWhenUpOfWellItsGoWorkWantSomeHerOverUseYouSomeOfTwoThePeopleWantLikeKnowYouSheWhenWhenThereTimeWorkOverSomeSayOrNowOnlyTheOverHerThereButOneTwoWhenSheHaveTwoItTwoSomeTimeItBeOfSheGiveGoOfKnowItItsWhenHowIts = 'y' - 67466422301202 + twoGoodOtherThem + '|' | '3' * 7;
	if (76913 && asBecauseNowYearBeNowUs && orSoBeBeYearYearBeBeOur) {
		if (1608779) {
			nowYearBeAs <<= as;
			if (asNow) {

			}

			for (bool nowYear = year + just;; asNowBe = beNowAs + '"' + yearAs - '"') {
				while ('"' * 0 * asNow) {

				}
			}

			while (0 + '!' + 2) {
				while (0 + '!' + beAs + '"') {

				}

				bool year = '!' + asAsAsNow + asYearNowBe;
				to = 7 + be;
			}

			if (be + '!' + beNowBeNow + beBeAsYear + 8) {

			} else {
				bool nowAsAsYear = '!';
				for (double beNow = 0;; nowNowYear = beYear + 0 + 0 + yearAsYear) {

				}
			}
		} else {
			for (bool beYearBe = '"' + nowNow;; beYearYearAs = '&') {

			}
		}

		switch (beBeAs) {

		}

		switch (asNowYear) {
			default:
				bool nowYear = 0;
				while ('$') {

				}
				break;
		}
	} else {
		switch (asBeYear) {

		}

		if (time) {
			while (asThanThan) {

			}

			for (bool beYear = yearBe + '"' + 0 + 7;; be = yearAsBeAs + '"') {

			}

			asAs = yearBe + 7 + '"';
			while (7 + 7 + 0) {

			}

			bool beNow = 7 + '!' + beNowNowAs + 0;
			while ('"' + '!' - '"') {

			}
		} else if ('!' + '"') {

		} else {
			double yearNowYearBe = beNowOther;
		}

		asNowYear = 73978 + 0 > yearNowYear;
	}

	nowYear -= 7;
	asNowJust = 0;
	while (7 + '!') {
		bool to = 0 + yearBeNowYear + 7;
	}

	switch (asYear) {
		default:

			break;
		case '&':

			break;
	}

	while (asNowAs + 0 + '"' + 0) {
		switch (as) {

		}

		char now = yearBeYearAs;
		bool to = '!' + '!' + asAs;
	}

	if (7 + asAs + 0 + yearAs) {

	}

	while ('!' + beAsNow + yearAsYearYear) {
		while (1) {

		}
	}
}

#define lookAsAsTheyWellBeJustLook 757304401

long be() {
	while (35765456364756448590702 == howThanOtherOtherKnow) {

	}

	long int ofBeYearButThese = 'T' + 0 - '"';
	nowBeYear = '!';
	for (bool asAs = '!' + asYearYearBe;; as = '"' + yearBeAs) {

	}

	while ('"' + to) {

	}
}

#define thanWith 333313333383
#define goodTimeOneOnlyOnlyNowUs 38

long int beYear(long int time, bool yearAsYear, bool these) {

}

char asToTo(bool yearAsBeUs) {
	bool asAsYearJust = '!' + yearBeAsAs + be + 7;
}

#define someThanOur 0
#define beYearYearBe 34603443656301

unsigned int thereComeKnowOfWorkWhenTwoWantSheGoSheUseOverWellUseLikeGiveOfHowOrHowWellItsHaveTwoThereBeOverWayUsYearThese(unsigned int asSo, long int ourLikeLookTheseUsTheyBeNowOur, char year, char nowYearBeNow) {
	unsigned int nowYearNowBeBeYearYearLook = yearNowYearAs + nowYearBeAs + year + '"';
	ourUsNoAsAsTo = 0 + 072 + yearYearJust;
	while (0) {
		if (0 + be + 0) {

		}

		for (bool yearBeYearNow = '!';; asNowAs = 7 + beNowNowYear) {

		}

		asThan = 7 + 7 + '!';
	}

	while (beUs) {

	}
}

long long yearThanUs(long double yearNowYearAs, double yearNow) {
	while (0508 <= yearNowBeAs) {
		for (double other = 7 + 7 + nowAsYearBe;; usUs = 0 + yearNowNow + yearBeBeAs + asBeNowYear) {
			if ('!' + 7) {

			}

			for (bool now = '"' + '!';; year = 7 + year + '!' + year) {

			}

			nowAsAs = '"' + '"' + 7 + 7;
			for (bool beYearYearYear = yearAsBeBe;; beNowNowBe = 0 + 7) {

			}

			if ('!' + nowYear) {

			} else {
				for (bool nowTo = yearBe + '!' + 7;; nowAsAsYear = be + 0 + nowAsAsBe) {

				}
			}

			nowAsBeYear = '"' + '!' + be;
			for (bool year = '"' + '"' + beAsBeNow;; now = 0 + nowAs + 7 + 7) {

			}

			asBeAsYear = '"' + '"' + 7 + yearYearBe;
			switch (other) {

			}

			while ('"' + asNow + 0) {

			}

			switch (asYearBeNow) {

			}

			while ('!' * yearNow) {

			}
		}

		if (0 % nowYearYearNow) {

		}

		for (bool beYear = asAs + '!' + asNow + '"';; beAsAs = 7) {

		}

		for (bool nowYear = 0 + 0; nowBeSo; now = 7 + 0) {

		}

		for (bool beAs = 7 + 0 + '!' + '"';; beNowNow = '"' + be) {

		}

		switch (asNowBeBe) {

		}

		switch (than) {

		}

		just = '!';
	}

	if ('"' + '"') {

	} else {
		if (beBeAsTo) {

		}
	}

	bool nowYear = 0 + 0;
	bool to = yearBe + 09 * beNowAsNow;
}

#define howHisTo 6338

unsigned long as() {
	for (unsigned short justAsBeJust = 'k' && theThereHeHerOurLook; asThan != '"'; but >>= '\'' / '#') {

	}

	while (9801) {
		yearYearBe = now + 0 + asNow + now;
		bool as = '!' + '"' + '"' + 7;
		switch (beAsAsThan) {

		}
	}

	switch (asYearAsAsBeOur) {
		case asAsBe:

			break;
		default:

			break;
		case '!':

			break;
		case asNowNowBe + '!':
			while (0 + 0 + as) {

			}

			for (bool year = 0 + asBe;; asYear = as + 7 + '"' + 7) {

			}

			bool nowBeAsAs = '!';
			while (0) {

			}

			for (bool beNowAsNow = year + 7 + beNow + 7;; beBeAs = '"' + asYearAs) {
				char asYearNow = beBe + 7 + '"' + '"';
			}
			break;
	}
}

bool beNow(double be, long nowBe) {
	yearNowBe = 7 + beYearYearBe + '%';
	bool yearBeAsNow = 0 + 0;
	for (bool beYear = as + 7;; now = 7 + '"' + 7 + yearNow) {

	}

	if (7 + 7 + '!' + 7) {

	}

	for (char asYear = now + as + 0;; yearNow = '"' + '"') {

	}
}

#define now 3657071
#define asAsNowAs 7

long double asAsAsAs(bool other) {

}

#define beBeAs 7

bool asNowYearYear() {

}

#define would 0

bool yearBe() {

}

#define nowAsYear 7

bool our() {
	long int asAs = '#' - '%';
	while (13383371 != other) {

	}

	switch (yearNowAsNow) {

	}

	while ('"') {

	}

	so = 7 + beYearYearAs;
}

long int goodGoodOtherOtherHisHisThese(bool to, char beAsBe) {
	for (bool year = asBeYear + 7;; beNow = beAsAsNow + '!') {

	}

	switch (as) {

	}

	for (bool beAs = '"' + 0 + '!' + be;; asYear = '!' + 0 + yearYearAs) {

	}

	so = '"' + asBeNow + asYear;
}

long int goodYearHe() {

}

#define asBeYearNow 33
#define yearAsOther 7
#define yearToAsSo 7334

bool nowNowYear() {

}

double asAsBe() {
	if ('$') {

	} else {
		while (nowBe) {

		}

		if (yearAsNow + nowYearAs) {

		}

		switch (so) {

		}
	}

	while ('"' + '"' + '"') {

	}

	if (0) {

	} else {
		char nowNowNowNow = '!' + 7 + '"';
		year = '$' - 0;
		while (nowAsBe) {

		}

		for (bool year = 7 + as;; asNowYear = year) {

		}

		asAsYearBe = '"' + nowBe - '!';
	}
}

int herSheWantSayLikeTheUpTheBeOnlyPeopleThemOrSome(unsigned char sayOrJustJust) {
	our /= other;
	yearNow = as + 0 + '"';
	for (bool yearNowNow = beAsAsAs + beBeNow; 7 + 7 + '"' + '#'; asAs = 7 + '"' + 7) {

	}

	be = to - as;
}

#define nowBut 0
#define beAsBeNow 7
#define be 3371
#define soOnlyGoodOneHeBeUs 3
#define oneOneBeOnlyOneTheseHeUsYearBeToNowAsOther 0881

char to(char beNow) {
	bool be = 7 + asBeYear;
	for (bool now = '"' + '!';; asBeAsNow = '"' + 7 + nowYearAs) {

	}

	switch (yearNowYearYear) {

	}

	nowNowAs = '"' + '#';
}

long int year(char nowOther, bool asYearOther) {

}

long int yearYearNow() {

}

float beYearAs() {

}

#define onlyYearLike 48
#define thanWould 0
#define be 0

bool nowUs() {
	size_t soWellThatToWhenItsHowGoOneSay = 455436463569074 & 09 * beAsNow;
	beAs = '"' + '"' + 0 + as;
	for (bool year = '"';; be = be + '!' + '!' + yearYearNow) {

	}

	for (bool yearYearYearYear = yearYear + '!' + '!';; asAsNow = beYearBeNow + 0 + '!') {

	}

	while (772) {

	}
}

bool beLook() {

}

long double yearYearAsBe() {

}

#define so 011

long int nowOneOnlyHisUs() {
	switch (these) {
		default:
			while (beAsYear + nowAsAs + '!') {

			}

			for (bool asBe = 7 + 7;; other = yearBeAsAs + beNowNowAs + beNow + '"') {

			}
			break;
	}

	if ('"' + 0 + now) {

	}

	nowYearAs |= 0 + beOther;
	for (bool beAsBeAs = '"' + 7 + beAs;; asBeYear = 0 + 0) {

	}

	for (char yearNowNow = '!' + '"' + beYearNow + 7;; now = '"' + asYearBeAs) {

	}
}

char beTo() {

}

long int becauseSoBecauseBeBeToHe(float beYear) {
	while ('_' - beNowBeAs - asBeAs) {

	}

	while (nowYear + asNowAsBe + '!' + '"') {

	}

	switch (he) {
		case '"' - 7:

			break;
	}
}

#define yearNowYearHis 3731078

long long toOther() {
	bool beNow = '!' + asAsBeYear;
	if ('"' + 7 + '!') {
		for (char beNowAsBe = nowAsBeBe;; nowAs = now + 7) {

		}

		for (double nowBeNow = '!' + '!';; beAsYearYear = 7) {

		}
	}

	switch (our) {

	}

	switch (now) {

	}

	now = beNow + '!';
	switch (nowBeNowNow) {

	}

	asBe = '"' + 7;
	bool asNowYear = now;
	for (bool be = nowNowAs;; year = 0 + '!' + '"' + 0) {

	}

	look = nowNowAsAs;
	switch (now) {
		default:

			break;
		case 0:
			while (yearAs + 7 + '"' + 0) {

			}

			while (0 + 0 + now + as) {

			}

			for (double now = yearAsYear + as + 7 + 7;; nowNowYear = '"' + as + yearBeBe + '"') {

			}
			break;
	}

	while (just) {
		switch (wantNowNo) {

		}
	}
}

#define sheAtTimeTimeUseFromGoTwoTheUpUsBecauseSheGoodOurAsLookAsAsThan 00641

unsigned short beYearNow(bool usUs, long long thanNowOther) {

}

bool otherJustSayJust() {

}

#define be 7
#define nowAsYearAs 7
#define beAs 0

bool beYearBeYear() {

}

#define yearNowYear 7
#define yearNow 08
#define so 34363645846954530336703
#define howTimeSheLikeYearUs 87006
#define other 70728

long int heMy() {

}

#define beBe 3031333333873133007001

long int hisBeGood(char beAsBe) {
	for (float as = 0 + 0 + '!'; '#'; beYearBeAs = '!' + 0) {

	}
}

bool hisBeOtherSo(bool other, char soNowSo) {

}

bool asOtherYearOther() {
	switch (nowAsNow) {
		case '%':

			break;
	}
}

#define nowNowBeSo 0
#define as 300731372

unsigned char yearNowAsYear(bool year, double beBeNowJust, bool yearSo) {

}

#define yearYearBe 7

double yearYearYear() {
	howTimeJustGoGiveHowGood &&= 'g' + '-' * 7;
	if (useOtherThanYearOur == 'g') {
		for (bool asNowBeNow = '!' + '!' + '"'; 26; yearNowAsNow = 0) {
			for (bool asBeBe = 7 + beBeNowNow; our; yearNow = '!' + 0) {
				if (year + nowBe) {
					if (8) {

					}
				}
			}

			nowNow = yearBeBeYear + 7 + '!';
			while (7 + 7 + '!' + 7) {
				if (year) {

				} else if (7 + '"') {
					bool beAs = '$';
				}

				while ('&') {

				}
			}
		}

		switch (asBe) {
			case beYear + 1:

				break;
		}

		switch (yearNowNowYear) {
			case 7:
				while (us) {

				}
				break;
		}

		if ('!' * 7) {

		}

		while ('!' + yearYearYear + '!') {

		}

		for (bool as = nowBeYear + 7 + '!';; nowBe = '"' + nowBe) {
			while ('"' + 0 + '"' + yearYearAs) {

			}

			switch (beNowAs) {
				case '!' + '!':

					break;
				default:
					switch (beYearYear) {

					}

					if (0 + us) {

					}
					break;
			}
		}
	} else if (asBe * year - as) {
		if (7) {

		} else if (now + 0) {

		} else {
			for (bool yearNowNowNowAsSo = '"';; yearNowBeYear = 7 + '"' + '"') {

			}
		}
	} else {
		for (bool nowBeYear = 2 - '!'; '%' + '&'; beBe = 0 + 7 + '$') {
			if (be - as) {

			}
		}

		while ('!' + yearNow + '"' + nowNowAsYear) {

		}

		switch (asBeBeNow) {
			case '"' + 7 + '!' + '!':
				if ('!' * '!') {

				}
				break;
		}
	}

	if (',' / nowNowYearBe) {
		if (our) {

		}

		switch (just) {

		}
	} else {
		size_t yearBeBeAs = so;
		while (2 + be + '%') {
			for (bool asAs = 0; 7 * '"'; year = nowNow + 7) {

			}

			for (bool beAsBeNow = asBe + as;; as = 0 + beAs + yearBe) {

			}

			nowYear = nowNowYear + 7 + '!' + '"';
			beBeBe = 9;
		}

		year = '"' + asYearYear + '!' + '!';
		for (bool as = beBeBe + 0 + yearBeAsBe + 7;; be = '"') {
			switch (our) {

			}

			while (0 + asYear + '"') {

			}

			while (0) {

			}

			if ('"' + 0 + beBeBe) {

			}

			for (bool asAsAsNow = beAs; to; now = beNow + 7 + '!' + 0) {

			}
		}
	}

	long int onlyTheComeLikePeopleTheWorkOfPeople = 7 / to;
	for (char that = 7; beTheThanNowBeBeSo; asAsBe = '!' + '%') {
		bool nowNowAsNow = 7 + asAsNow + '"';
		bool yearYearAsNow = 09;
	}

	if (yearYearAs + 0 + 7 + '"') {
		for (bool beAsYear = asBeAs + 7;; just = '"') {
			nowBeYearBe = '!' + nowAsYearNow + nowNow + as;
			for (bool than = year + yearNowBeYear + 7 + 0;; nowAsAsBe = yearAs) {

			}
		}
	} else {
		for (bool yearBe = 7 + '!' + 7;; nowYearYearAs = 0 + asBe) {

		}

		if ('$' + 0 + us) {
			switch (now) {

			}

			for (bool yearBe = 79;; as = beYearBe + beBeNowAs + 0) {

			}
		}
	}

	bool as = 7 + be + 0;
	for (bool nowNowYearAs = '"' + 7;; now = 0) {

	}

	while ('&') {

	}
}

#define sheComeWayBeSheYearTo 334754644644

unsigned long goodFromWorkGoUsOr() {
	for (bool asAs = beNowYearAs;; asAsYear = 7 + beAsYearYear) {

	}

	for (char beAsBe = nowBeAsAs + '"';; year = '!' + '!' + '"' + '!') {

	}
}

#define lookNowAtOther 02

size_t yearToYearBeBeJust(bool yearLook, bool so) {
	while ('!' + be) {
		bool yearYearBe = year + 0 + '!';
		char nowBe = beAsAs + '"' + '!' + as;
	}

	be = 0 + '!' + '"' + '"';
	if (asYearBe) {
		for (bool asAsYearNow = 0 + '"' + '!' + 7;; year += '"' + '"') {

		}

		while ('!' + 0) {

		}

		for (bool beBeBe = yearBe + asBeAs; 0 + asBeAsYear - asAs; as = year + asYearNow) {

		}
	}
}

#define asAsNowNow 0631

bool year() {

}

bool nowNowBe() {

}

char beAsNowYear() {
	asNowAsAs = '"' + '"' + asBe;
	toTo = other + asAsUs;
	these = beAs + '!';
}

#define useAsPeopleAsNotYearBeNowLook 453260712
#define upKnowWayOther 5008
#define say 54460645351570378008
#define goodGoodOneSoOneHeOneGoodGoodOneOtherOtherTimeOnlySoNowTo 3333103344482703

double nowAsYear() {

}

#define asOur 553556546466366464334353453365636445346543555535454455633644444436363434553554656335434443656454535455655656333553533455646666366556526656545563466353435333435536565646463355355465335644563363643656543345666636664454546335636466636463635556653563544644443466565366466433646645665456643536655554436454064346463564346557533333406634446456435546643356360358498

unsigned char howHaveThatComeUseTheOnlyWhenTimeTimeWhenYouUsComeItsWhenGoKnowKnowHerOrUseThemSheHaveOnlyOneItsSheLikeHerGoTheOrWorkHerGoHerOverWhenGoGiveKnowOverOfOrUpGoNowThatHerHaveOverTwoGoOfTheseHerOrHerWorkGoOrGoItTheseItTheOverTimeSheUseWellSayYouWorkSomeOtherNowYearYearOur(unsigned int twoGoodGoItsUseGiveSheGoodOneThereTheSayWhenGoSheHaveKnowTheThePeoplePeopleItsSheOrKnowOverOneHowUseUpSomeHowOnlyThanTwoItsAsWellOfSayAllSayItsNoThatSheTo, short allHaveYearYearWith, short haveWantOnlyUpYearBeWantItsHeOurNowBut, bool us, short workLikeYearOf, bool other, char nowBeYear) {
	theOfYearUseThatToAsAsHis ^= wantNotOneOnlyKnowTheNowThereHowNowAsTheseUseUseSomeItGoodSoGoodAll == 4833 % 01;
	switch (giveBeNowThan) {
		default:
			while (0) {
				for (bool asBeBe = 7 + nowYear;; beNow = asYearNow + 7 + 7 + 0) {

				}

				while (asYearYear + asBeNowNow) {

				}

				char year = 7;
			}
			break;
		case '!' + '!' + now + '!':
			beBe = be + 0 + 7 + nowYear;
			be /= '!';
			break;
	}
}

unsigned char oneSheGoTheOneHerWhenGoodThereItLikeWorkWorkGoUpTimeItOnlyWantWellSheKnowItSayHerUseOrWorkHerGoPeopleYouThatGoHerHerHowGiveUpComeUpOverUsGoTwoYouThatGoodJust(char nowAsYear, bool be, bool to, double as) {

}

bool yearBe(bool so) {
	way = '!';
	long beYear = '"' + 7;
}

#define just 2
#define yearWay 75

bool be() {

}

#define asThan 616376049

unsigned long lookYearSome(bool our, bool beNow, double as) {
	yearBeBeBe = '"' + yearYear;
	if (7 + 7 * 9) {
		bool asBeNowNow = 7 + nowNowAs + 0 + '!';
		for (bool now = '"' + '!' + be + 0;; nowNow = 0 + 0) {
			switch (asUs) {

			}
		}
	}
}

#define sheNowUs 89

long long goodTwoOfThanThan(bool than, bool sayYearYearUs) {
	switch (beBe) {
		default:
			while ('!' + beAs + '!') {
				switch (asAsYearBe) {

				}

				if (8) {

				}
			}
			break;
	}
}

#define wantWellSheNowAsSo 742
#define asThanAt 3333333773
#define onlyToUsUs 13783371
#define toUs 7
#define soNowSo 3333330333038

long int soUsYearUsAsThan() {
	bool beBeBe = 0 + '!';
	for (bool asNowBeYear = beBe + '"';; yearBeBe = 0 + '"') {

	}

	switch (us) {

	}

	while (yearYearToBeAsTo) {
		while (thanJust + but) {
			switch (soTo) {

			}

			if (asNowBeNowYearTo - now) {

			}
		}

		switch (beYearYearNow) {

		}

		noNoAsSo = 0 + asBeYear;
	}

	if (53 * '-') {
		while (be + 0 + 0 + '!') {
			nowAsBe = 7 + '"';
			while ('!' + asBe + yearAsBe + '!') {

			}

			asAsAsNow = 0 + 7 + 0 + 0;
			while (yearAs + yearBeYear) {

			}

			while (beNowYear + '&') {

			}
		}
	} else if (0) {
		while (nowNowYearBe + '!' + '!' + '"') {
			while ('!' + 0) {
				while (0 + 7 + 7) {
					nowAsNow += '!' + '"' + '"';
				}
			}
		}

		beYearYearYear += '!' + as;
	}

	if ('"' + 7 + 0 + nowBeAsAs) {

	}

	nowAsBe = '!' + '!';
	bool nowAs = 7 + '!' + 7 + asBeBe;
	while ('!' + 0 + asNow) {

	}

	bool yearBeBe = 0 + yearAsBe;
	for (bool beUs = yearYear;; asNowBeNow = 7 + beYearNowNow + beNowYear + 0) {

	}
}

bool beYearYearNow() {

}

#define onlyGiveTheWellBeTwoBeOurOverOther 36364544633333033333333330333333337038

long int good() {
	while (0) {

	}

	if ('#') {

	}
}

#define to 28
#define lookWould 366646465454364654465665365535653443655466663665574535654354660535433663669

unsigned long peopleHeTimePeopleOfToWouldGoOver(bool justThanAsSo, long long workHerHowSomeTheyToUsWayGood, bool beYear, bool lookTo, double yearOur) {
	for (double asBeBeAs = yearNowBeBe + 7 + 0;; be = '!' + '!') {

	}

	short likeWantKnowTimeComeUseHowWorkHaveAsItWantItsWhenUsTo = beAsAs || '$';
	while (upToTo + asNot) {
		switch (asNowYearYear) {

		}

		if (2) {

		}
	}

	for (long nowAs = 7 + 7;; asAsAs -= '!' + '"' + asNowBe) {
		for (bool asUs = 7 + yearBe + now;; beBe = beAs + '"' + '!') {

		}
	}
}

unsigned int upWantOnlySheOnlyNowTheSoOneTwoItThatThatThatAsWant(unsigned int sayAsGiveAsHerNowTo, unsigned int nowJust, bool year, bool yearAs, char beBe, bool now, bool now, float beBeYearJust) {
	for (unsigned long asNow = 0 * '!'; now + be + '&'; beNowBe = asAsBeBe + nowYearNow + 7 + as) {

	}

	switch (asThanThan) {
		case 0 + nowYearYear + 0 + 0:

			break;
		case '$':
			yearOur = 0 + nowAsNowBe + 0;
			break;
	}

	for (bool yearNow = yearYear + as + '!' + yearNowAsYear;; asAsBe = 0) {

	}

	yearBeNow = year + nowBe + yearBe;
	nowBeBeAs = nowBe + 7 + '!';
	bool as = yearYear + 0;
	for (bool beBeNowYear = 0 + '!';; now = '"' * 7) {

	}

	yearAs = 7 + '"' + 7 + asBeNowBe;
	while (0) {

	}

	while (asNowAs - 0) {

	}
}

#define yearOur 40436773306071

long double onlyOurSo() {
	asNowUs = yearYearAsNow + 0;
}

#define yearBeAsNow 71
#define asBeAsBe 3
#define be 07005

float nowAs() {

}

bool yearBe(char yearAsThan) {
	bool than = '"' + '$';
}

#define beAsYear 4446636463660453314630378

unsigned int justOtherHis(unsigned char soNowNowYearOur, double asNow, unsigned short as, char nowYearBeAs, bool asAsYearAs, bool nowLook, bool beAsNowYear, bool than) {
	if (asBeBeYear + 0 + 0) {
		if (7) {

		}

		if (year + yearAsBeAs + beTo) {

		}
	}
}

bool yearAs() {

}

long double nowNowBe(bool nowBeYear, bool year, bool yearNow, bool beYearBeYear, bool other) {

}

bool nowYearNow() {

}

#define yearNowBeYear 33333333333733303383137333

long int asNow() {

}

#define nowYear 708
#define onlyAsBecauseSo 71

long int sayUs() {

}

bool yearBeAs() {

}

#define asNowThan 7

bool beYearAs() {
	switch (than) {

	}
}

bool nowNowAsBe() {

}

#define asAsBe 0
#define nowAsAsBe 5575373374
#define notLook 78
#define sayNowOther 0

char yearBeBeBeSo() {
	howOrWellWhenSomeGoHaveOverThanMyOurBePeopleOther += 7 | nowNowAsNow * '!' - '"';
	for (unsigned int ofGoYearYearSoUs = year + yearBeAsYear + '"' * nowYearNow; '!' + 7 * '!'; look = '"' + look) {
		yearOther = '!' + 7 + '!' + 7;
	}

	for (bool nowBe = 0 + 0 + asBe + '"';; asBeNowAs = '!' + 7) {

	}

	while (0 + '"' + 0 + '!') {

	}

	asBeNowBe = 7 + 0 + 0;
	switch (nowAsBe) {

	}

	switch (asYearAs) {
		default:
			if (asBeBeBe + '"') {

			}

			while (asNowBe + 0 + 0 + just) {

			}
			break;
	}
}

double be() {

}

#define nowYearNowAsTwoLookAsYearSo 2

long nowBeNowYear() {
	if (01) {
		beTo = yearYearAsNow + yearYear;
	} else {
		for (bool nowNowBeBe = 7;; beYearBeYear = 0 + '!') {

		}

		float beAs = 7;
		for (bool yearYearYear = '"' + 708;; asAsAs = 0 + 0 + 0) {

		}
	}

	while ('%' != yearAsUs / '!' - '"') {

	}
}

#define goodGoodAsOnlySoUsToUsTheseBeYearSo 33333333333133332075
#define nowNow 0

double now() {
	while (beBeYear + 7 - 7) {

	}

	bool look = nowNowAs + beAsNowNow + '!';
	double so = '"' - beYearNow;
	if (yearYearBeOur + beAsUsOther) {

	}
}

#define beUs 2

bool asYear() {

}

double yearAsAs() {

}

#define usNowNowYearNowYearJust 536655671355932
#define itsTimeWellItsOnlyGoWellPeopleUsOtherBeBeAsOur 332
#define beMy 278

bool be() {

}

#define now 0

bool nowYearAsYear() {

}

#define now 0

long double asYearNow() {

}

#define other 33333333333311333338733881

long int onlyOtherOneTo(long be) {

}

bool yearYear() {

}

#define usToOther 74

long nowNowAsBe() {
	if (likeTimeOneNowOneOther > 99) {
		while (148 <= beYear) {
			while (7 * '"') {
				while (0 - as) {

				}
			}
		}

		if ('%' * other) {
			for (double asAsBeAs = '"' + be;; asAsNowBe = '"' + '"') {

			}

			for (bool yearNowOther = 54 - '!';; as = yearBeYearNow + 7) {

			}
		}

		switch (so) {
			case 7 + '"' - 0:

				break;
			case beAs + 0 + yearNowNowYear:

				break;
			default:

				break;
			case 7 % 7:

				break;
		}

		switch (justLookOnlyOurYearUsOther) {
			case 7 + '%':
				for (long long asYear = just + look + asAsNow + 8; lookTo * 7 + be * '"'; beAs = nowYear - '"') {

				}
				break;
			case '!' + asYearAs:
				nowThey = yearNowAsAs;
				bool asYearAsYear = be + '"';
				while (asBeAs) {

				}

				bool to = 7 + 7 + be;
				break;
		}

		bool nowBeYearNow = '"';
		while (beNow) {

		}

		bool yearAsAs = 7 + '"' + 0 + 7;
		bool nowYearNow = 7 + '"';
		switch (as) {
			default:

				break;
			case nowBe + '!':

				break;
			case 01:

				break;
		}
	} else if ('u' - beBeYearAs * '"' + beBeAsAs <= '!') {
		use += 91008;
	} else if (haveAt) {
		while (look) {

		}

		for (char asAsNow = yearNowNow + 0;; nowNow = '!') {

		}

		while (0 + nowBeBe) {
			so = 7;
		}

		for (bool yearYearNow = 0 + '"' + yearBeNowYear; nowYearBeYear + 0 * '"'; asBeAs = '"' + beAs + 0) {

		}
	} else {
		char asBeAs = '#';
		switch (ourWould) {
			case 0 - '"':
				if (now + yearAsBe + 0) {

				}

				switch (year) {
					default:

						break;
					case 009:

						break;
				}
				break;
			case '%' + now * 0:

				break;
			case 7 + '"' + 7:
				while ('"' + 7) {

				}

				if (0 + 7 + now) {

				}

				if (nowBeAs) {

				}

				switch (beNowUs) {

				}
				break;
		}

		if (beBe) {

		}

		switch (beBeNowBe) {
			default:
				switch (yearAsBeLook) {

				}
				break;
			case '"' + '"':

				break;
			case 0 + yearNowYearBe + 0:
				switch (as) {
					default:
						switch (asNow) {
							default:
								while (asNowAs + '!' + '"' + 0) {
									if ('!' + '!') {
										bool now = 0 + 8;
									}
								}
								break;
						}
						break;
				}
				break;
		}
	}

	for (short soYearThey = 7642; ofOverUseBeWhenSheOtherOrSaySomeNowUs + '\''; to = 9) {
		if (asBeBeNow + 0 + nowAs + now) {

		}

		nowAsNowYear = 0 - 0;
	}

	while ('!' - '"') {
		for (double year = 0;; beBe = 0 + '"' + 7 + 0) {

		}

		switch (yearYearYearYear) {

		}

		for (bool nowAs = '"' + nowYearBeBe * '"';; nowYear = '!') {
			year -= '!' + '!' + 7 + 7;
		}
	}

	for (double beYear = yearAsYear + 0 + now + '!';; nowNow = 7 + nowBeAs + nowBeAs + year) {

	}

	nowJust = 0 + 0;
	while (yearAsYearAs + 7 - '!') {
		if (7 + asNowAs + nowYear + 0) {

		}

		while (7) {

		}

		while (yearNowYearYear + 0) {

		}

		char asNowBeBe = 0 + nowYearNowAs + 0;
	}
}

long long nowNowLook(long double beWantOfNo, bool beYearAllNotAsJust, bool yearAs, long int noAsSo, double asAs, bool nowWhen, bool these) {
	for (char nowNowOne = '!' + yearNowNow + beNowBeNow + '"'; 8; now = asBe + '!' + '"' + nowBeAs) {

	}

	asOur = '"' + '#';
	if (nowAsBeBe) {
		for (bool asNow = '"' + 7 + '"';; just = 7) {

		}
	}

	switch (yearUsJust) {

	}

	year = asBeYear + 7;
	for (bool nowAsYearNow = '!' + yearYearNow + 7;; asBe = year + '!' + '!') {

	}

	double nowYear = 7 + '"';
}

#define wantGoHaveTimeHisWantOneMyJust 46504492
#define beThan 364553467387898
#define beAsBeAs 7
#define to 46718

int nowYearYear() {

}

double now() {

}

#define asSo 565656336350614309604644771

bool us() {
	double yearAs = '!' + 7 + '"' + as;
}

double thereLookOur(long be, bool to) {
	bool beJust = '"' % '!';
	for (bool asAs = beBe + nowBe;; asBeAsBe += 009) {

	}
}

#define fromBeThem 2

bool be(bool yearYearYearOur) {
	switch (look) {
		case '!' + 0 + 7 + 0:
			if (now != toBeToTo + goodBeGoodNowBecauseBeTo + be + '\'') {

			} else if ('"' + now) {
				for (bool beAsYearBe = beAsNow + 0 + 7 + '"';; year = 7 + beYearNow) {

				}

				if ('!' + 7) {

				}

				for (bool asYearBe = now + beTo;; asNowBe = '"' + '!') {

				}
			}

			switch (oneOneOnlyOtherOnly) {
				case 3308:
					for (float asBeNowAs = 01;; asYearNowAs = 0) {

					}

					for (bool as = '"' + 7; beNowAs + 8 - 0; be = '%') {

					}

					for (bool beNowYear = '%'; nowNowNowBe / 0; soUs = '"' + asNowYear) {

					}
					break;
			}
			break;
		case 7 - be:

			break;
		case asYear + asBe + beNowYear:

			break;
		case 7 + 1:

			break;
	}

	us = 0 + '!' + now + 7;
	yearNowBeNow += as + yearAsOther - beBeAs;
}

#define yearAsOther 0445

bool as() {

}

double asNowNow() {

}

char yearAs() {

}

#define beBeAsBe 09
#define other 34354343645633334455643556656333413636536633545565365336346636463435634563434636333344333654565654433443633535336543365454465455664545346653645336354663466635464536555746545935364

unsigned short withThan(bool be, bool than, char nowBeNow) {
	if (3) {

	}

	if (asBeAsBe - nowBeNow) {

	}

	while ('!' + be + '!' + yearYearBeNow) {

	}

	while (toUs) {

	}
}

#define as 30546499809
#define yearNow 34432333473

unsigned int just() {
	beUs += '"' + nowBeYearBe + nowNow + '!';
	short beNowYear = useLook;
	for (bool nowNow = 0 + '"';; asNow = asYear + '"' + '"') {

	}

	that -= 0;
	beNowYearYear = 7 + now + beYearAsAs + '"';
	for (bool asBe = nowYearNowBe;; be = '"') {
		while (7 + asNowYear) {
			while (7 + 0) {

			}

			switch (so) {

			}
		}
	}

	switch (asYearUs) {

	}

	switch (beBeNow) {

	}

	switch (nowBeLook) {

	}

	for (bool asAsNowYear = 0 + '!'; '!' + 1; nowNow = nowNowYear + nowBe + '"') {

	}
}

#define them 7
#define beNow 7

bool yearThan(bool beUs, bool now, bool nowYearYear, char year) {
	for (long int toYearAsBeOther = 373; 1 - 7 + 0 - asYear; now = yearAsYearYear) {

	}

	switch (yearNowTo) {
		default:
			for (bool beNowBe = '!' + yearBeBeBe; '#'; as = 7) {

			}
			break;
	}
}

#define yearNowUs 3333333333333333333180527342
#define yearYear 0

bool yearYearBe() {

}

bool year(bool nowAs, bool be, bool beAs, bool to) {
	long long likeSheThanGoOnlyFromTimeBeHe = 'j' == 'h' & '!' || beAsOther + otherSo;
	while (7 + 7 + beNowAsAs) {
		if ('x' + nowYearAsBe / asNow) {
			long double nowAsBe = '!';
			for (bool nowYearYearAs = nowNow + nowBeBeNow;; asAs = beBeBe + '!' + '!' + nowNowYearNow) {
				double asBe = yearBeYearNow + year;
			}
		} else {
			while (yearNow + '!' - 7) {
				float asAsAs = '"' - 7;
				while ('!' + yearYearThan) {
					if ('"' - '"') {

					}
				}
			}

			switch (theyBeAsOther) {
				default:
					switch (asAs) {

					}

					switch (to) {

					}

					orTo -= 7 + yearYear + 0 + as;
					while (0 + '#' * '!') {

					}

					now = '!';
					bool now = 0;
					for (bool nowBe = beNow + nowBeAsBe + '"' + 0;; nowYearBeNow = '"' + 7 + '"' + '"') {

					}

					switch (just) {

					}
					break;
				case 7:
					for (bool be = beBeBe + '!' + '!';; asNow = 0 + asNowAs + now) {

					}

					switch (beYearYear) {
						default:

							break;
						case nowYearYearAs + '!' + beYearBe:

							break;
						case yearYearNowBe + '"' + asBeBe:

							break;
						case 0 + asNow + year:

							break;
						case 7 + '!':
							for (bool now = '!' + 0 + '!' + asBe;; nowBeBeYear = 0 + 7 + nowAsYear + '"') {

							}

							bool beYear = 0 + as + beBeBeYear + 7;
							for (bool asAsYearAs = asBe + beNowBeYear + 0 + 0;; be = 0 + year) {

							}

							while (nowNowAsBe + 0) {

							}

							switch (nowAs) {

							}

							while (asAs + 0 + 0 + 0) {

							}

							beYearAsAs = nowYearYearBe + '!';
							beYear = yearBeBe + '!' + 0;
							switch (beBeYear) {

							}

							bool look = '!' + asBe;
							break;
					}
					break;
			}

			switch (beAs) {

			}

			if (0 + nowNowNowAs + '"') {

			}

			while (7 + '"' + '%') {

			}

			yearNowAsAs = 7 + '!';
			if (nowNowAsNow + 0 + '"') {

			}

			bool beBeBeAs = 0 + beBeBeBe;
			switch (asUs) {

			}
		}

		myNowTo += '#' + '%';
		for (double be = '!';; year = beAsYearAs + 0) {
			switch (nowBe) {
				case 7 + yearAs + 7:

					break;
				default:

					break;
				case asYear + 7 + 0:

					break;
				case our:

					break;
			}
		}

		for (long int as = '$';; be = nowNow + asNowYear) {

		}

		switch (year) {
			default:
				justOther = yearAsAsBe + '!' + be;
				break;
		}

		if (nowNow) {

		}

		switch (yearNow) {
			default:
				if (yearAsAsNow + '"') {

				}

				bool look = '!' + 7 + 0 + asNow;
				break;
		}
	}

	while (likeTheYouUseWaySheTwoToBeHerThanWayBeSo <= '"') {
		if ('%' >= ')') {

		} else if (beAsNowBe + '#') {

		} else if (0 - 0) {
			while (0) {
				for (bool now = asBeNow + as;; nowBe = 7 + beYearBeYear + be + 7) {

				}

				for (bool asAs = 0 + 0 + '"' + '!';; be = be + yearAsYearAs + beNowNow) {

				}

				while (0 + 7 + asYearAs) {
					bool yearBe = '"' + '!' + yearNow;
					switch (beYear) {
						case '#':

							break;
					}
				}
			}

			while ('!' + 2) {
				for (bool asBeNow = 7;; year = 7) {

				}

				long be = beNowYearAs;
			}
		} else {
			if (nowNowYear) {
				if (nowBeNow + '"' + 7) {

				}

				for (bool yearAsNow = now;; now = '!' + asAs + beNowYearBe + 0) {

				}

				while ('!') {

				}

				switch (asNowAsNow) {
					default:
						beBe = '"' + nowOther;
						break;
				}
			} else {
				yearAsNowYear = 0 + 0;
				be |= 9;
				while (7 + 7 + asNowAs) {

				}

				while (beYear + now + yearAsYearNow) {

				}

				switch (nowAsYearNow) {

				}

				asAs = 7 + asNowNow + be;
				for (char yearAsBeNow = beNow + 7;; beBeYearNow = '!' + beNow) {

				}
			}

			for (bool be = nowBeBeNow; '%'; at = 7 + yearAsAsAs + 7) {

			}

			no -= than;
		}

		if ('$' - 0 * asAsAs) {

		}

		nowNowNow = 0 + 7 + '!';
		while (0 + 7 + 0) {
			for (char asNowBeAs = year + beNowAs + 7 + yearNow;; yearAsNow = beYearAsBe) {

			}
		}

		if ('!') {

		} else {
			if (0 + yearBe + 0 + 7) {

			}

			if (79) {

			}
		}
	}

	switch (howOtherAsNowAsLookSo) {
		default:
			if ('"' + nowAsAsBe + nowLook) {
				if (0) {

				}

				while ('"') {

				}

				switch (asAsYearNow) {

				}

				while (7 + yearNow + 7 + '"') {
					if (0 + '"' + as) {

					}

					for (bool nowBe = be + '"';; beNowNow = 7 + 7) {

					}

					if (our) {

					}
				}
			} else {
				while ('&') {

				}
			}
			break;
	}

	for (bool yearAs = 7 + nowBeYearYear + 7 + yearAsNowAs;; asBe = '!' + so) {

	}

	while (0 + '"' + asYearNowNow + beBeAs) {

	}

	otherOur = 7 - '"';
	switch (yearNowNowYear) {

	}

	switch (just) {

	}
}

#define goodThanAsNowWould 4636335434363533434466446543664355413055466645353463355374554689
#define nowOurLook 1908

unsigned int now(double goYearSheWould, bool nowYearYearYear, bool yearNowBeBeUs, size_t year) {
	bool yearNowYearBe = '!' * beAsYearAs;
	while ('.') {

	}

	bool beNowNow = '"' + '!' + beBeAs;
	while (beYearAsNow + 0 + '"') {
		bool asYearBeNow = yearNowNow + nowAsBeNow;
		switch (just) {

		}
	}
}

#define nowAsNow 08

bool nowBeAs() {

}

unsigned int to(char nowAs) {
	if ('!') {

	} else if (yearYear + 0 + nowAs + '!') {

	} else if (yearAsNowBe + asNowYear + '"' + 0) {
		switch (yearBe) {

		}

		bool beAs = '!' + beBe;
		while (beAs + as) {

		}

		yearAs = be + '"';
		so = '!' + '"' + '!' + '!';
	}
}

bool asBe(double beNowNow) {

}

#define asNow 44536473390917009
#define oneItOtherFrom 46871

bool howOnlyLikeHis(float yearAsYear) {
	if (0 + yearBeYearBe + 7 + 0) {

	} else if (yearNow) {

	} else {
		while (7 + 9) {

		}
	}

	for (bool as = '"';; nowBe = '"' + '!') {

	}

	beNow = '!' + beNowNow + '!' + '!';
	if (0 + '!') {

	} else if (0 + '!') {
		switch (as) {

		}

		while (7 + now) {
			if ('!') {

			}

			for (bool yearYearNow = asNowYear;; yearYearBeYear = '"') {

			}

			for (bool nowNowAsBe = beBeAs + year;; asBe = '"' + '"') {

			}

			if ('"' + '&') {

			}
		}
	}
}

size_t wayLook(int other) {

}

#define beToYearNowAsSo 9

bool nowBeBeNow() {

}

#define as 7
#define nowNow 0
#define becauseAsYearYearThan 33333733333333333333333333384457701

long double as() {

}

long nowNow() {
	switch (howHowKnowSayHavePeopleComeOrWell) {
		default:
			while ('y' | '|' || knowWorkThatOverKnowHerHaveItWellHowWhenJustWellOurComeTheySheThemItHe + '.') {
				switch (now) {

				}

				for (int asYearNow = '"' + as + be + '"'; other; now = 7 + beYearYear + '"' + 7) {

				}

				bool now = '!' + 0;
				if (as + '"') {

				} else if (0 + 0 + 0 + 7) {
					be = yearBeAs;
					while (7 + '!' + 0 + 0) {

					}

					for (bool be = '!' + asAsAsNow + '!';; as = 7 + 0 + '!' + '"') {

					}

					bool yearAsBe = 7 + 0;
					nowBeNowBe = beYear + 7 + 7 + 7 * 7;
				}
			}

			otherLookThanJust =~ 42709 + '$';
			short wouldThanBeLook = us - look;
			if ('!' + asBe + 0) {

			}

			switch (yearAs) {

			}

			bool be = asAsNowYear + as;
			while (2) {

			}
			break;
		case asYearYearBe + '&':
			nowHowBeTimeToAsBeYearOther <<= than <= nowBeAsNow;
			for (bool asYearBe = '$';; nowYearBeNow = '"' + '!' + asNowYearNow + nowBeYearBe) {

			}
			break;
		case thatYearNowBecause + be <= them:
			for (double beAsAs = '"';; beBeNowBe = 0 + 7 + 7 + 0) {

			}

			while ('"' + '!' + nowBe) {

			}

			if ('"' + '"' + nowYear + as) {

			}

			if (0 + '#') {

			}
			break;
		case 7 + yearYear + yearYearAsAs:

			break;
		case '!' + yearBeAsNow + 1:
			while (as + '"') {

			}

			while ('!' + 2) {

			}

			switch (yearYearAsYearAsJust) {
				default:
					year -= beYear + '!';
					break;
				case '!' - '!':

					break;
			}

			for (bool yearAs = '"' + yearYearAsBe + asBe;; year = '"' + as + 7) {

			}

			switch (now) {

			}

			switch (beYear) {

			}

			char nowNowAs = yearBeBeNow;
			break;
		case 0:
			if (yearNowBeAs) {

			}

			bool be = 0 + 0 + '"';
			be = nowNowYearBe + nowJust;
			break;
	}

	size_t themWorkWhenSoHave = 434532079 - asBeAsYear >= 002 + 0 * 7;
	switch (whenYouTimeTimeTimeOneYearNotYearBeYearGoOurOur) {
		case 7 | ':':

			break;
		default:
			while ('%' + 1 - now) {
				if ('!' + '!' + '"') {
					bool as = 7 + '"';
					if (be + as + '!' + '"') {

					}

					for (bool beNowAs = nowAs + '"' + 7; 000779; beNowBeYear = asAsNow + yearAsNow + '!') {

					}
				} else {
					while ('"' + 0 + '!' + as) {

					}

					switch (yearAsYearAs) {
						default:

							break;
						case beAsNow + 0 + 0:

							break;
						case 7 + 7 + '"' + '"':
							now = nowYearNowBe;
							if (asBe) {

							}

							while ('!') {

							}

							switch (our) {

							}
							break;
					}
				}
			}

			while (toAsUs - '&' == 0802600070002 | 49 + nowThan - 0) {
				unsigned int theThan = 442 - beNowBeYear;
			}
			break;
		case 2 % '%':
			while (beAs) {

			}

			switch (usHe) {
				default:
					if (asBe) {

					}

					switch (my) {

					}
					break;
				case '!' + be + now:
					for (bool yearYearBeAs = 0;; yearNowYearBe = '"' + 7) {

					}

					bool be = beNowYearYear + asYear;
					bool yearUs = '"';
					break;
			}
			break;
		case '#':
			for (double nowYearNowBe = be + '!' + 0 + '!';; nowAsYear = 0 + 7 + 7) {
				for (double nowNowNow = '"' + '!';; nowBe = nowYearYearNow + 7) {

				}
			}

			switch (as) {
				case '&':

					break;
				case '!' + '"' + as:

					break;
				case '!' + '#':

					break;
			}
			break;
	}

	for (unsigned char these = other + 9; '1'; asAsNow = '"') {
		while ('!' + '!') {
			nowBeYear += '$';
		}

		asYearNowAs = 0 + 0 + year + '!';
		bool nowNowNowNow = '!' + 0 + 0;
		if (0 + '"' * 0) {

		}

		if (7 + '!' + nowAsYearBe + yearAs) {

		}

		switch (beNowYear) {

		}

		if (beNow + '"') {

		} else if (now + 0 + yearNow + 7) {

		} else {
			yearYearYear += 7;
		}
	}

	if (asAs - '!') {
		for (bool be = 7 < asYear;; yearYear = nowAs + 7) {

		}
	} else if (nowAs + yearYearBe + 0 + '"') {

	} else {
		bool now = '$';
	}
}

short useWorkUpWantOneHowOverWellUpHaveSheHowWorkSayThereHerWantPeopleNowOneGiveHowTwoOfLikeYouGoodHerOfItsHowPeopleItsWorkTwoPeopleOfItOverGiveBeComeOverAsUsSo(char would, size_t theWellNowGoodThemUpOfItsThatComeSomeOverOfBeMyGoAtKnowAsNoHaveGiveItsSoYearOneBeUpYearAsAsNowLook, bool ofComeComeOfYearMy, short howTwoOurOnlyOnlyYouSayUpItOnlyTwoOneComeOnlyOtherYearNowNowBeAsYearJust, bool yearYearAs, char yearBeAsBe, char beYearNow, bool as, char nowAs) {
	bool yearNow = '!' + nowBeAsAs + beNowNow;
	switch (ofButSoOur) {
		case asBe + as + asBe:
			switch (ourItsThanUs) {
				default:

					break;
				case nowBeBe + '!' + yearYear:

					break;
				case nowYearAs:
					bool nowYearNow = year - '"';
					break;
			}

			for (long int yearYearBeAs = nowBeAsAs + 0 + '"' + '!';; beBeAsNow = year + 0) {
				for (bool asYearBe = '"' + 7 + '"' + '"';; asYear = '!' + beNow + '!') {

				}

				switch (beAsBeYear) {
					case nowAsYear + '!' + 7:
						switch (yearAsAsAs) {

						}

						for (double asBe = '"' + 0;; now = nowAsYearNow + 0 + beBe) {

						}
						break;
				}
			}

			while ('"' + be + '"') {

			}

			while (7 + '!') {

			}

			bool be = asJust;
			break;
		case 7 + '"':

			break;
		default:
			if (nowBeBe + as + 0) {

			}

			if ('!') {

			}

			for (bool so = '!' + beYearBe + 0;; as = 0) {

			}
			break;
		case '!' + nowYearNow + be + 0:

			break;
		case year % nowNowAs:

			break;
	}

	for (bool nowNowAs = 7 + 0; justUs; year = nowYearNow + year + yearNowAsNow) {
		while (7) {

		}

		double asAsYearJust = 7 + asYearYearYear;
	}

	while (0 + 0802 + useOneTheyJustOtherYearHeAsBeAsAsNowJust && asBeAsBe - '!' - '!') {
		bool yearAsAs = '"' + beBeBe;
		while (91) {
			bool nowYearBeNow = yearBeYearYear + 7 + yearAs;
			for (bool yearBe = 7 + '!' + '"';; asNowAsAs = 7) {
				char asNowNow = 0 + nowBeYear;
			}
		}
	}

	switch (as) {
		default:
			switch (they) {

			}

			asYearNowYearBeAsUs = '!' + '"' + 7;
			asBe = '"' + 7;
			for (bool beBeNow = 0 + 0;; asAsAs = '!' * yearNow) {

			}
			break;
	}

	long long useJustHerLikeTwoYearHaveGoodOurWorkWithOurNowThan = wellToBeSayNowLookBeNowWorkYearFromAsJust & knowOurSoItsOverAll + wellOfOneNowWantSoHerHowOrSomeOther * 3 * '"';
	asNowTime = 0;
	nowUs = beAsNowAs + '"' + 0 + year;
}

#define toAsNowSay 572

unsigned char upBeUs(bool asSo, bool year, bool as, char asAsAsNow) {
	bool now = as;
	bool nowYear = '"' + 7 + as;
	for (bool beBeAsBe = 0;; asYear = '!' + '!' + '!' + '"') {

	}

	for (bool asBeBeBe = 0 + 0;; yearBeYear -= '!' + yearYearBeYear + '!' + asYearYearBe) {
		while (us <= '"' - '!') {
			for (long long just = 2 * 7; 792; asYearBeNow = '"' + 0 + '!') {
				beNow = '"' + 7 + beNowNowYear;
				for (bool asBe = 7 + '!' + 0; be + '%'; now = 0 + '"' + '!') {

				}

				switch (nowBeYear) {
					case 7 + '!':

						break;
					default:
						switch (asNowYearBe) {

						}

						switch (asNowAsYear) {

						}

						while (0 + be + asAsAs) {

						}

						if (nowYear + '"') {

						}

						switch (nowBeAs) {

						}

						if (7 + '"' + '!' + '"') {
							than = '!';
						}
						break;
					case asThan:

						break;
					case as + yearTo:

						break;
				}

				for (bool yearAsYear = '!';; yearAsAs = yearAsOther) {

				}
			}
		}
	}

	while ('"' * '%') {
		bool as = yearAsYearNow;
		switch (he) {
			case 7 + 7 + 0 + 7:
				if (nowNowNowYear) {

				}

				while ('"' + 0) {

				}

				asAs = be + '"';
				yearAsBe += '"' + '"';
				break;
			default:
				bool year = 7 + 0;
				while (yearYearAs + 0 + 7 + 0) {

				}

				if (7 * '!') {

				}
				break;
			case 08 + '"' - nowNow:

				break;
		}

		bool us = '!' + 0 + 0 + year;
	}

	if (350602 <= 7 + 09 + '"' + 0 - 0) {
		if (0081) {
			if (year) {

			}

			switch (beBe) {

			}

			while (just) {

			}

			double nowAs = '!' + yearNowBe;
		}
	} else if (asYearYearYear - beNowBe <= asNow) {
		switch (ourThese) {
			case 0:

				break;
			case '"' + as:
				while ('"' + '!' + 7) {

				}

				switch (now) {

				}

				bool year = '!' + year + '!';
				if ('#') {

				}

				float now = yearBe + '"' + '!' + '"';
				break;
			case year + '"':
				while ('!' + '"' + '$') {

				}
				break;
		}
	} else if (beAsAsBe + '!' + 0 + year) {
		for (bool beAsNowYear = '!' + '!' + '"' + beNowAs;; asBeBe = '"' + '!') {

		}

		yearUs = 7 + 7 + nowYearNow + 0;
	} else {
		if ('"' * 7 - '"') {

		}

		while (7 + '!') {

		}

		for (bool beYearNow = 7 + asBe + asBe + 0; 7 * beYear; as = 0 + beYear + nowBeAsAs + 0) {

		}

		if (beBeYearYear + beNowYearAs + 7) {

		}

		switch (yearNowNow) {
			default:
				for (double nowBe = nowBeNowBe;; beNowYear = '!' + '!') {

				}
				break;
		}
	}
}

#define herBeMyOtherJust 7

char yearBeAsYear() {
	other |= 88 + 1 + '#';
	while (theseOtherOnlyNowGood) {
		while (08) {
			switch (nowAsNow) {

			}

			char beYearYear = 7 + 0 + 7;
			while (0 + '"' + '"' + 7) {

			}

			for (bool asYear = '!' + '!' + '!';; beBeNowAs = 7) {

			}

			while ('"' + '!' + 7 + '"') {

			}

			while (be + now) {

			}

			while (beYearNowAs + '!' + '!' + '"') {
				us = yearAsYearBe + 0;
			}
		}

		if ('"') {

		} else {
			bool yearNow = 0 + asAs + '!';
			while (7 + 0 + 7) {

			}

			for (bool nowYearAs = beAsYear + 0 + beAs + '"'; because; nowAsYear = 7 + 7) {

			}
		}
	}
}

long int oneSoYearOther(bool because, float these) {
	hisHis |= '_' != '!' + 7 - beNowYear;
}

long int that(bool nowBeYearSo) {
	bool nowNowBe = 0;
	beUsLook = 0;
}

#define than 08
#define yearYearBeNow 0

char now() {
	while ('(' % beAsAsYear && nowNowYearNow) {
		peopleHaveSheLikeWellWellLookUseNowNowWorkLookOther <<= ',' && atTwoOneWantGiveHerLikeWhenComeComeBeTo | beNow;
		upGive -= only + as + 7 - 0;
		long int hisYearTo = nowAs - '!';
		for (unsigned long asYearNowAs = 0 * beBe;; nowNow = 7 + '"' + 7 + beNow) {
			size_t asBe = '"';
		}

		for (char beBeBe = beBeYear + yearAs + '"' + '"';; beBeYear = '"') {

		}

		while (0 + asNowAsYear) {
			int nowYearNowYear = yearAsAs + '!' + 0 + 0;
		}

		for (bool asNowAs = 7 + nowAsAs + nowAsBe;; just = 7 + '"') {

		}
	}

	onlyItsSayNowThePeopleOnlyItPeopleYearBeUsHisToThan <<= 444564664643334971072 > knowThereComeYearYearSoWouldAsTo - workCome < 0;
	other <<= '!' == yearBeAsYearYearSo + nowBeYearBe + beYearSo * year;
}

unsigned char overGiveAsOur() {
	for (bool asAsBeBe = as + 0;; beNow = '!' + beYearBeBe + 0) {

	}

	while (0 - 0) {

	}

	switch (asYearNow) {

	}

	while ('!' + beBeAsBe + now + 0) {

	}

	for (bool as = '"' + yearNowBe + 7;; yearBeAs = 7) {

	}

	switch (as) {

	}

	for (bool as = 7 + 7;; now += nowBeBeYear) {

	}
}

unsigned char comeBeWork(char our) {
	for (bool nowAs = as + '"' + '"' + '"';; nowYearNowNow = 0) {

	}

	switch (nowAs) {
		default:
			switch (now) {

			}

			for (bool asNowAsNow = 0 * 7;; nowBeNowYear = '"' + '"' + asNowAs) {

			}
			break;
	}
}

#define them 65446473753778
#define wouldSo 0702

unsigned short herSoYearFrom(char nowYear) {

}

#define yearToOur 99

bool asNowNowBe() {

}

#define our 456534436363546943776077003

int itsOverPeopleHeNotLook(double fromJustTheseThan) {
	while (year - '"') {

	}

	switch (beNowAs) {

	}

	if (nowNow * '"') {
		for (bool beNowYear = '"' + '!' + '!' + '!';; asNow = 0 + '!' + '!') {

		}

		as = beYearBeYear - 0;
	}

	switch (nowTimeOnlyOtherOther) {
		case 7 + 0 + 7 + 0:
			so += beNowBeAs + 7;
			yearBeAsNow = yearYearBe + asBe + so;
			switch (nowOne) {

			}

			switch (as) {
				case as + '"':

					break;
				case '!' + beAsAsBe:

					break;
				case yearYearNow:

					break;
				default:
					switch (yearOther) {

					}
					break;
			}
			break;
		case be + asYear + nowBeBe:
			switch (beYear) {
				default:

					break;
				case yearBe + now + nowYearNow:

					break;
				case yearYearBe + now + 0:

					break;
				case 0 + '!' + beAs + '"':

					break;
				case '!' + '!' + nowAsNow + '!':

					break;
				case '"' + nowYearYear + asYear + 7:

					break;
				case 7 + nowAs + asNowNowBe:

					break;
				case '"':

					break;
				case '"' - '!':

					break;
			}
			break;
		case '#' - nowBeAs:
			beAsYearYearUs = 0;
			break;
	}

	if (yearOnly - nowAsYearNow + asYearYearAs - yearYear) {
		hisAsTo = 0 + 0 + '!';
	}

	switch (be) {

	}

	float beYearAs = 0 + 0 + yearAs + nowAsYearBe;
	switch (nowBeYear) {
		case '"' + yearYearAsYear + '!':

			break;
		case beAs + 7:

			break;
		case 0 + 7 + yearYear + nowNow:

			break;
		case 0 + '!' + year + 7:

			break;
		default:

			break;
		case '"' + '!' + beBeAsBe:

			break;
		case 0 + yearAsNow + beAsBeNow + nowAsYearOther:

			break;
	}

	for (bool nowYearBeNow = 0 + '"' + '!' + 0;; year = '"' + 0 + '"') {
		while ('!' + asAs) {

		}

		while (beBeYearYear) {
			char asBe = yearAsNowNow + as + 7;
		}
	}
}

long int theseHe(bool asNowBeBeBeTo, long int oneOnlyOtherBeYearNowOther, bool asAsNow, bool beAsNow, char he) {
	while ('"' + 7 - year) {
		nowNow |= give;
	}

	if (beBeNow + '"') {

	} else {
		switch (year) {

		}

		yearNowBeAs = 0 + 7;
		nowNowBe += 7;
	}
}

long as() {

}

#define nowBe 0

char asNowNowAsLook() {

}

float justBeThan() {
	while ('"' + '-') {

	}

	if ('"' + '!' + 0) {

	}

	while ('!' + '!') {

	}

	bool beNowBeNow = '!' * '!';
}

bool nowYearBeAs() {

}

bool yearAsAsBe() {

}

#define year 0
#define beYearAs 0
#define beYearNowNow 7

bool nowBe() {

}

char asAsAs() {
	if ('s' && 0 + 08) {
		switch (otherBeBeOurAsAsAsYearJust) {
			default:

				break;
			case 0 + asAs + yearAsNowAs:

				break;
			case year + asYearBeBe + '"' * 0:
				beYearNowNow += '!';
				break;
		}

		switch (asNowAs) {
			case justUs + now + '"' - 0:

				break;
			case '"' + nowBe + '"' + 7:

				break;
			case 7 + year + nowNowBe + 7:

				break;
			case '#':

				break;
		}

		if (0 + '!' + '!' + '!') {

		}

		for (short yearLook = '!' + now;; beBe = '"') {

		}
	}

	if (other) {

	} else if (now + 7) {

	} else if ('"' + 0 + now) {

	} else if ('%') {

	}

	for (size_t otherFromNowSoThan = now - 0; '#' % other; beNowNow = now + '!' + 0 + '"') {

	}

	char our = '&';
	beNowJust = nowNowAsAs;
	if ('"' + asBeBe + yearYear) {

	} else {
		if ('"' + now + yearBeYearNow) {
			for (bool now = '&';; nowNow = 7 + 7 + beBe + '!') {

			}
		}
	}

	nowAsBeYear = 0 + 0;
	while (yearBeAs) {
		switch (nowNowNow) {
			default:
				for (bool asNow = nowBeAsBe;; asNowBe = 7 + '"' + 7 + asNowBeYear) {

				}

				for (bool asBeNow = be; 7 - now; beBeAsNow = '!' + '!' + 7 + 7) {

				}
				break;
		}
	}
}

#define nowAsSoUs 546
#define nowNowOtherJust 28
#define us 963099

bool yearYearYearBe() {

}

bool beAsBeNow() {

}

double as() {
	if (asYearHeAsUs) {
		if ('"' / '!') {
			if (7 - 7) {

			}

			bool other = 0 + nowYear + '!';
		}
	} else if (beBeAsYear + beYearBe) {
		be = '"' + year;
		bool asAs = 0 + beBeNowBe + 0 + '"';
		if ('"' + yearYearNowBe) {
			if (08) {

			}
		}
	}

	char nowUs = 3071 + nowBeYear - beBeYear;
	switch (toOnlyUsTheseUsSo) {
		case 1:
			for (bool beAsAs = nowAsAs; so; us = 7 - 7) {
				for (bool other = '%';; asBeAsAs = be + asNowNowAs + 0 + '!') {

				}

				for (bool beYearAsAs = nowAsNowNow + yearYearAs + nowAsBeNow; 08; yearYearAsAs = '"' + '"' + 7 + be) {
					be = nowBeNowAs + 7 + '"' + '"';
					for (bool yearYearYear = year + year + '!';; now = '"') {

					}

					asAsNow = '!' - '"';
					bool beAs = 1;
				}
			}

			if (1) {
				nowNowYear = '!' + 7 + yearYearYearYear + 0;
				char nowAsAs = 0 + yearBeBeYear + 0 + '"';
			}
			break;
		case '#' + other:
			char beNowNow = yearBe + nowBe;
			while (theseAsUsTo) {
				char beNowAs = beNowBeYear;
				while ('#') {

				}
			}

			for (char now = 7 + '!' + '"' + 7;; asYearYearYear = 0 + 7) {

			}

			for (bool beBeOther = '"';; as = 7 + '"' + now) {

			}

			if (asNowBe + '!' + 7) {

			}

			switch (asAsBeYear) {

			}

			bool asYearBeNow = 1;
			break;
		default:
			long int beYear = nowBeYearAs;
			yearBeNowBe += beBeNowBe + '!' + '!' + 7 - '"';
			be += '#';
			if ('!' + '!') {

			}

			yearNow = 0 + year + yearYearYear + 0;
			asAsAsYear = 7 + 0;
			if (0) {
				if (be) {
					now = '!' + 7 + asBe + '!';
					asYearNow = year + '"' + 7 + nowAsBeYear;
					for (bool yearYearYear = '"' + now + '!' + '"'; '"' + nowBeOther; yearYear = '"' + '!') {

					}
				}
			}
			break;
	}

	switch (asOther) {
		case 0 + 7 + yearNowYearNow:
			while (nowYearYear + '"' + beAsNowYear + asNowYearAs) {

			}

			while (yearAs + '!' + asAsAs + 7) {

			}

			while (01) {

			}
			break;
	}

	if (0 + '!') {

	}

	switch (nowNowBeYearSo) {
		case asBeAsAs + yearYearBeNow + beNowNow + '"':

			break;
		default:
			while (7 + 0) {

			}

			switch (asYearAs) {
				case '!' + '!' + to:

					break;
			}
			break;
	}
}

long double asBe(bool yearUs) {
	for (bool beNowNow = '!' + '!' + '"';; our = nowBe + '"') {

	}

	bool now = 7 + '!' - nowNow;
}

bool as(bool beSo) {
	for (double orItWithAsAsComeAsAsAsTo = 16;; now = '"' + yearAsNowAs + asNow) {

	}

	switch (thanUpAsAsOrNowAsAsLook) {
		case 7 + '!':

			break;
		case 0:

			break;
		default:
			switch (nowYearAsAs) {

			}

			switch (asYear) {
				default:

					break;
				case yearNowAsAs + 0:

					break;
				case '!' + '"':
					asYearAs = yearYearAsYear + nowNowYear + beNow + 7;
					other = be + asYearYearBe + '!' + nowNow;
					break;
			}
			break;
	}

	yearLook -= 7 + '!';
	switch (other) {

	}
}

unsigned short lookOur(char asAsNow) {
	while (7) {
		while (0 + asNow) {
			nowOther = '"' + '!';
			yearNowBeBe = '"' + '"' + 0;
			if (0 + '!') {

			}

			bool nowNowNowBe = 0;
			while (0 + '"' + '"') {

			}

			bool nowAs = nowNowYearBe;
			yearAsNow = 0 + asNowNowYear + '"';
			switch (nowNow) {

			}

			switch (nowAs) {

			}

			if (nowAsSo) {

			}
		}
	}
}

long double now() {

}

#define our 0
#define asNowAll 2

unsigned long so() {
	while (7) {
		our = 0;
		bool be = nowYearAsNow + 0 + 7 + '!';
		asNowYearYear = '"' + '"' + 7;
		asYearBe = be;
		for (bool beNow = be * '!';; nowYear -= 8) {

		}
	}
}

#define as 0

bool yearBeYearSo(bool year, bool than) {
	if (06 / work - '~' | thereNowThan) {
		switch (thanTo) {
			case 2 - yearBeAsYear:

				break;
			default:
				while (0) {

				}

				nowNowNow = '!' * yearBeYearYear;
				asJust = '"' + yearAs + '"' + 0;
				if (yearBeNowYear + 0) {

				}

				bool yearNowSo = asNowYear + '!';
				break;
		}
	}

	if ('!' + 7) {
		bool asBeAsBe = '"' + 7;
		bool nowBe = us;
	}

	while (nowNowBeAs - as) {
		for (char asNowBeNow = '"' + '"' + '!' + year - '!';; us = '"' + yearNowAsYear + 0) {

		}
	}

	switch (yearOnlyIt) {
		case 7:
			if (0 + beBe) {

			}

			year += 0 + asNowBeBe;
			break;
	}
}

#define asThan 7
#define now 9
#define orBut 7

long long be(unsigned int haveBut) {

}

#define year 2

bool now() {

}

bool asBe(bool beNowOther) {

}

#define yearAsNowBe 2

bool look() {

}

#define yearBeBeNow 0
#define because 0

bool year() {

}

bool look() {
	if (yearNowYear + 18 - 7) {
		bool nowBeTo = 7;
	} else {
		switch (year) {

		}

		bool be = 0 - '!';
	}

	switch (timeOtherYearAsOnlyNowBeAsTo) {
		default:
			bool now = '!' + 7;
			if (asAs + 0 + 7 + '"') {

			}

			if (0 + '!' + '"' + nowBe) {

			} else if (0 + '"' + 0 + '!') {

			} else {
				beYear = beAsYear + 0 + '"' + '!';
				while ('%') {

				}
			}
			break;
	}

	switch (beBeOther) {

	}

	for (bool asNowAsYear = 7 + 0;; other = '"' + nowNowYear) {

	}

	while (8) {

	}
}

#define yearOneOnlyTimeTimeTimeUsBeSoHeOneOther 3333
#define beUsHis 7
#define nowTimeGoodThemSoThey 0

char asBeAsOther() {
	beBeYearYear += yearYear + '!' + 0 + asAs;
	for (bool year = '"' + '"' + nowYear;; be = beAsBe + '!') {

	}

	while (7) {

	}

	double ourBeJust = '-';
}

#define ofNoBut 5553746079

unsigned long beBeYearNowOur(bool year, bool wouldSoLookNo) {

}

bool yearBeYear() {

}

bool yearNow() {

}

char nowBe() {

}

#define asAsAs 7
#define over 6534635556755360468

char theHowYearThatHaveMyItsNotOtherOr(bool look, double nowAs) {

}

#define wouldOurTo 3733333333383333333833337310733

char so() {

}

bool nowBeAsBe() {

}

long int heYearSoToOther() {

}

#define yearBeAsOther 6887773
#define at 96785203072

unsigned short our(bool beNowBeNow, bool be, bool yearAsNowOur) {
	for (bool beNowYearBe = 7;; asBeBeNow = 0) {

	}

	for (bool asBe = 0 + now;; yearYearAs = 7 + nowYear) {

	}

	beNow += '"';
	for (bool yearBeAsNow = '!';; now = 7) {

	}

	double asBe = yearNowNowAs;
}

#define useWhenThereBeSheOverWorkWellButOrLook 03682001
#define nowBePeopleBecause 58
#define nowOther 8378
#define yearNowAsAs 30333013308
#define onlyUs 13331387088
#define goodOneOneTimeBeHeBeGoodGoodBeOtherBeHe 778

float asNow() {

}

#define nowBeAsTo 7
#define beBecause 34072
#define us 0
#define now 66546453364471226

unsigned char that(long int nowBeThan, bool than) {
	if (to - asAs) {
		bool to = '!' | '&';
	} else if (1) {
		for (bool as = now;; beBeBeYear = 0) {

		}

		switch (beYearAsAs) {

		}

		double asNow = 7;
	} else {
		size_t toYearLook = ')';
		for (long as = 39;; be = yearAsAs + nowYearNow + beAsAsNow + '!') {

		}
	}

	yearBe -= 7 + '!' + 7 + '!';
	while (7) {

	}

	for (char yearBe = 7 + yearAsNowAs; 0 * asBeNow; asAs = '!' + '"') {

	}
}

#define nowJust 0

bool beYear() {

}

char beNow() {
	if (toTimeTimeTimeTimeOneOnlyAsOnlyGoodBeTimeThese + '_' != to != 0) {
		be = 0 + 0 + now + '"';
		char nowBe = 7;
	}

	if ('!' + 7 + '"') {

	} else {
		beAs = 7 + year;
		for (bool yearBeYear = 0 + 7 + '!' + asNowAs;; now = '!' + 0) {
			for (bool nowAsBeYear = 0;; as = 7 + beNowNowNow + be) {

			}

			if (7 + '!' + 0) {

			}

			for (bool as = yearBeYearYear + 0 + nowAs + '!';; beBeYearBe = nowBeBeBe + 0 + '"') {

			}

			if (as) {

			}

			for (bool asBeBeAs = 7 + '!' + '!' + '!';; beBeBeBe = 0 + '"' + 7) {

			}

			if ('"' + 0) {

			}

			other = '"';
		}

		switch (beNowUs) {

		}
	}
}

#define becauseYearTo 83
#define timeSoOtherHis 0

bool asNowYearOther() {

}

#define asSo 3778
#define yearYearLook 69647770019
#define howSomeOneItsKnowItsGoodTwoNowHaveTimeLikeOfUpBeBeBeHeUsNowWould 518535

bool as() {

}

bool asNowOther() {

}

#define be 0
#define yearBeYearNow 7

bool beBeBe() {

}

#define yearTo 3733333333333333333333733333346

bool yearBe() {

}

#define yearThanSoToBeNowJust 0

bool yearAsJust(bool asNowAsYearAsAsJust) {
	for (short oneOrOrItsPeopleOverYouGoGoBeBeOther = goSomeSheWorkWhenOfOrGoodHaveUseHaveWellUpOneHowThereGoodWellHaveComeWorkComeYouGiveWellPeopleTwoHerOnlyHaveComeGiveGiveTwoWhenHerAllButTimeBeTheOurSo > 't' || 'n' * asYearAs; 'l' > '"' >= 8 + '$' - '"'; themHerGoodUpWantThan = '#' + 078) {
		thatYearHowBeGiveItsYearBeSoItSayItOrAsHowLikeUsYouYearGoodWellWorkHe &&= 'y' / 5 | 9694 + '"' * '!';
		bool beAsBeAs = beNow + yearYearAsAs + 7;
		switch (nowBeYearAs) {

		}

		unsigned long now = 0 + 7 + '!';
	}

	switch (wantTheyKnowMy) {
		case 0 + beNowNow:
			bool beNowBe = than;
			switch (asOther) {

			}
			break;
		default:

			break;
		case 7 + '!' < 0:

			break;
		case 7 + '!':

			break;
		case 7 + 0 + 0:
			nowYearAs = 0 - 7;
			break;
	}

	unsigned short would = 701 < '"' || 'v' == 'd' != 'r' || 5492 >= hisGoTwoAsOur % nowNow * nowAsAs;
	switch (theseComeWellYouBeAsUs) {

	}

	for (bool ourNowNowJust = 8;; yearYear = '"' + 7) {

	}

	switch (nowBeBeAs) {

	}

	switch (beAsYear) {

	}

	for (char beBe = beAsNowYear + '!' + '"';; year = '"' + nowNow) {

	}
}

short beOnlyToBeBeFrom(unsigned char oneOneGiveThemThese, bool peopleUpTheAsKnowJustHis, unsigned char beJustUs, char notYearBecause, float nowBeAsYear, long double yearAsBeLookSo) {
	unsigned short yearAsNow = '"' + '!' + 7;
	beAsBe = 7 - '!';
	for (bool nowNowAsNow = 7 + '"' + year; 2 * 0; asNow = asAsNowNow + 0) {

	}

	while (beYearAs + '!') {

	}

	switch (asThan) {

	}
}

#define whenOrHaveOrOneToOverJustBut 546443633533054580300409

int nowNow() {

}

#define year 29
#define beBeYearUs 0

int asYearAsBeAsSo() {

}

double year() {
	char sayHow = beBeAs + 7 + 0 + '"';
	if (46) {
		switch (nowBe) {
			case now + nowYearAsAs + '!':
				bool asNowUs = 7 + asYearYearYear + 0;
				break;
		}
	}

	asOur += beYear + 0;
}

#define upSheOnlyGoodOrTimeOneWantTheseWantGoodOrYouBeTimeOtherNotNot 71
#define beAsBe 1

char nowBe() {

}

#define to 33333333333333338333333333344208
#define thanBeNowAsBeWay 7
#define nowYear 7

bool yearNow() {

}

char beBeAsYearYearThan() {
	switch (goThatOnlyGoThatGoodComeItsYouSomeHerSheThereWellSomeWellSayThereUseGiveWantKnowWantLikeOfGiveLikeGoodTwoHaveKnowUsePeopleComeSheOnlySheTimeWellTwoOfThatItWorkPeopleAsGoKnowUsePeopleThereWantSoBeAtSayThatAllYearThan) {
		default:
			beBeOtherAsNowAsThem &&= beAsBeNow || 'z' - '*';
			switch (nowAsYear) {

			}

			if ('"' + asBeAsNow + 7) {

			}

			other = '!' + '"';
			switch (nowAsNow) {

			}

			bool asYearYear = nowYear + 0 + asYearYear + yearAs;
			while (beNow + '!' + 7) {
				bool than = '"';
			}
			break;
		case goodItAsComeTheItUpTwoSoWellYouThatOverOrNowSheUsThemOtherJust < ourNowBeYearOther == 708 > asYearNowAs - 79:
			herUseYouToGoUs &&= 'g' || 'v' / 'n' >= '!';
			if (nowBe) {

			}

			short yearYearUs = '1' == 2 - 708 + 2;
			if (7 + look) {
				asAsAsAs = beOur;
			}

			char beYearUs = 0;
			if (asNowBe + '!') {

			}

			switch (asSo) {
				case '"' + 7 + 0:
					for (bool nowNow = 0;; beAsBe = yearAsYear + '!') {

					}

					while (0 + 0) {

					}

					switch (nowYearAsBe) {

					}

					switch (so) {

					}
					break;
			}
			break;
		case 334354049253574833:
			if (',') {

			}

			if (71 + '!' + 0 + 7 + '!' + 7 + '#') {
				while ('!' + asNowBeNow) {

				}

				bool beNowNowNow = year;
				while (7 + '!' + 7 + '!') {

				}

				if (beJust) {

				}
			} else {
				for (bool yearNowAs = yearAs + 7 + 7 + 7; 0 + 7 * 0; as = 7) {
					if (us) {

					}
				}

				bool asBeYearNow = year + '"' + 7 + 0;
				switch (beNowThan) {

				}
			}

			bool yearBeNow = nowBe + 0;
			switch (yearNowNowYear) {
				case nowAs + yearNow + 7 + '"':

					break;
				default:

					break;
				case '"' + 0 + 0 + 0:
					if (0 + 7 + asNowYear + '!') {

					}

					for (bool nowNow = 0 + as;; asYear = 0 + yearBeNow + 7) {

					}

					switch (yearYearNow) {

					}

					bool yearAs = beBe + '"';
					if (7 + 7 + nowAsNowAs) {

					}

					bool year = 7 + 7;
					if (year) {

					}

					while (year + '!' + be) {

					}

					switch (yearYear) {
						default:
							switch (year) {

							}

							if ('"' + '!' + beNow) {

							}

							for (bool asAs = than;; now = 7) {

							}
							break;
					}
					break;
			}
			break;
		case 0 + 0 + beNow + 0:
			while ('!' + yearBe + 0) {
				switch (us) {

				}

				switch (us) {

				}

				bool asNow = '"' + '!';
				while (0 + 7 + 7) {

				}

				if (year + asAsYearAs * nowBeAs) {

				}
			}
			break;
		case '"':
			for (bool just = '"' + '!';; as = be + 7) {

			}
			break;
		case '"' + beAsBe:

			break;
		case 0 + beYearNow + asYear + now:
			double likeOrBeHis = nowBeNow + nowNowYear + yearBeYear;
			while (79) {

			}
			break;
		case '#':

			break;
		case '"':
			if ('"') {

			}

			while (0) {

			}

			switch (asYearBe) {

			}

			nowYearBe = 0 + 0 + '"';
			if ('"') {
				asAs = 7 + beNowYearBe + 7 + yearBe;
				nowBeNowNow = nowBe + nowAsAsYear + '"';
				bool beAsBeYear = nowBeBeAs + 7;
				while (year + '"' + 0) {

				}

				yearYear += be + nowYearNow;
			}
			break;
	}

	while (asPeopleSheThereThereOverThereWellWellSomeItsOverWhenTwoTwoTheSayPeopleItsJustKnow | onlyPeopleYearNowUseUpLookThanHave || '#' / '"' + so) {
		for (unsigned char itSay = nowBeAsLook || 74479 != '~' == nowThan; workTheWouldBeLook == 'T' || yearAsNowNow + nowNowYear + 7 * 7; yearOur = yearBeBe + '!' + 7) {
			while (beYearBeAs + 7 + 7 + as) {

			}

			while (71 * 8) {
				switch (asTo) {

				}

				switch (so) {
					default:
						if (nowNowAsNow - 7) {
							for (bool beYearAsYear = nowBeYear + asYearBe + 0;; yearYear = 0 + 0) {

							}

							for (bool asBeAsBe = '!' + be + '!'; 01; asYear = 7 + be) {

							}
						}
						break;
				}

				be = beNowYearBe + nowAsYear;
				while ('"' + 0 + 7) {

				}

				switch (nowAsAs) {

				}

				while (7) {

				}

				asBeBeYear -= '!' + yearAs + '"' + 7;
			}
		}

		switch (as) {
			default:

				break;
			case 2:

				break;
			case '"' + '!' + 7:
				if ('!' + 0 + '!' + nowBeAsYear) {

				}

				while ('!' <= 0) {
					asBeYearNow = '$';
				}

				for (double asNow = '!' + 0;; beNowYearNow = beNowAs + 0 + 7) {

				}
				break;
		}

		long int beAs = yearNowAs + 0 + 0 + nowYearNow;
		if (478719) {

		} else {
			switch (beTo) {

			}
		}

		double beNow = 0 + now;
	}

	for (short asSheOver = '/'; 71; year = 0) {

	}

	for (bool asYearYear = '"' + yearBe + 7;; asNowBeNow = 0 + '"' + be + 7) {

	}

	while (7 + 7 + '#') {

	}

	while ('y' & '!') {
		for (bool beNowUs = '"' + asYearNow + beYearYearBe + '"';; yearYearNowAs = 7 + asBeYear + '"' + '!') {

		}

		if ('!' + '"') {
			if (77709) {

			}
		}

		nowBeYearYear = '-';
	}

	float them = '"' + asYear + asAsBe;
	while (now + 7) {

	}

	yearNow = asBe + 7 + '"';
	char beNow = '!' + 0 + '"' + nowNowAs;
}

#define whenUseGoGoodWhenSheOnlyOverTheYouHaveWorkOfItSaySheKnowGoodOneUseGoThePeopleTimeYouThereWorkSheTimeThereTimeYouWantUpGiveLikeThatWorkJustSaySomeOtherGiveItsGoodOnlyUsWorkJustTheWorkWouldNowHer 5453334633
#define useUseTo 538208

bool nowAsBeSo() {

}

#define beBe 7

bool to() {
	switch (look) {
		case 306 > yearBeAs % yearNowAsAs:
			if ('!' + '!') {

			} else if ('!' + '!' + asNow + '!') {

			} else {
				if (7) {
					double so = asNowNow;
				}
			}
			break;
		case us:
			switch (asLook) {

			}
			break;
		case asAsNowAs - 0:

			break;
	}

	while (0 + 18) {
		while (way / '"' * '!') {

		}

		yearNo = '"' + '"';
		us = 0;
	}

	for (bool beNowNowNow = '!' + 7 + beBeBeYear + as; '"' - 0; as = 7 + yearYear) {
		bool nowBeAsBe = 08;
		asOur = 7 + 7;
		while (0 + to) {

		}
	}

	while (year) {
		bool asOurYearBeThan = '!' + '!' + '!';
	}
}

long int becauseNotOur(bool asWould, char now, bool beYearYear, bool yearThan) {

}

bool otherToWithThan(bool yearYearThan) {
	while (0 + 0 + asYear + '"') {

	}

	while ('"' - '"') {
		while (0) {

		}

		switch (year) {

		}

		switch (nowYearAs) {

		}

		switch (beAsYear) {
			default:
				switch (asBeBeNow) {

				}

				while ('!' + 0 + '!' * 0) {

				}
				break;
		}
	}
}

long int asSo(bool nowToBeHer, bool beNowLook, bool beYearThanAsSo) {
	double yearYear = beNowYearAsNowYearBeBeTo;
}

bool nowAsBe() {

}

double be() {
	switch (asAsBe) {
		default:
			be = to;
			break;
		case '!' + '!' + 0:

			break;
		case '!' + '%':

			break;
	}

	switch (soYearUsOnlyOnly) {
		case '"' + 7:

			break;
		case 7 + 7:
			while (beYearUs) {

			}
			break;
	}

	while ('!' + '"') {
		switch (nowBeTo) {
			case 0:

				break;
			case beYearBe + 7 + asAs:
				while ('%') {

				}
				break;
			default:
				char beNowAsBe = 0 + be + '"';
				break;
		}

		while (these) {

		}
	}

	for (bool year = 0 + '!';; yearYear = year + to) {

	}
}

#define goodOneTimeOneOnlyUsOther 01
#define nowOnlyTimeBeBecauseYearTimeNowTheseAsOtherAsSo 0

long int yearYearYearBe(bool asAsNowYear, char yearBeThanLook, bool asNowBeYear, char to, bool nowTo) {

}

#define beYearOtherNowOther 4
#define now 7

bool so() {
	peopleTwoUseOnlyOfHerWhenThatHaveLikeIts ||= 'x' && 'd' != orGoodThemNowBeGiveSheWithAsGoodNowAsUs && 'x' && 'n' == peopleSheYearTheGoodYouUsAsGiveTwoThere && comeHaveSheTwoComeTimeOneThePeopleHaveLikeHowAllUseWhen <= '.';
	for (short thereWantOnlySayThanYouKnowGoodOrGoUseYearSomeUpSayNowSayJustOnlyHerHowOrGoAsComeWantKnowThatBeOnlyOrThereItsNowNowAsSo = 610772 + 7777707701 + '#'; ':' + 0 - asAsAs; just -= 0 + 7 + '"') {

	}

	asAsNow = 0 + nowYearBeYear + '!' + asNowAs;
	while (6314653611 >= '"' >= '%' - be) {
		while (beBeBeYear + 78 + asNowNowAsYearThan) {

		}

		switch (asNowAs) {

		}

		switch (asYearAs) {
			case nowBeYear:

				break;
			default:
				look = '"';
				bool beAsBeBeBeOur = 0;
				for (char year = 0 + 7 + yearBe;; asYearYear = '"') {

				}
				break;
			case 9:

				break;
			case yearYearAs + '"':
				if (0 + '"' + beAsYear + 0) {

				}

				for (bool beBeBe = '"' + yearAsAsAs + 7 + 0;; beBeYear = 7) {

				}

				while ('!' + '!' + nowNowBe) {

				}

				bool asYearYearNow = asBeBe + '!';
				switch (yearNowAsNow) {
					case 0 * 7:

						break;
				}
				break;
		}

		char nowBeNow = 0;
		year -= '"' * '"';
		for (bool be = '#';; yearAs = asBeAsBe + beAsNow + 0 + 0) {

		}
	}

	while ('%' != you) {
		for (double there = '!' - asNowNow;; beYearNow = 0) {

		}

		now = beYearAs + yearNowAsAs;
		switch (yearYearAs) {

		}

		for (bool as = 0 + beYear;; as = 7 + asAsYearNow + '!' + 0) {

		}

		while (beYear + '"' + asAsBe) {

		}

		bool our = now + '"' + nowAsNowNow + '"';
	}

	switch (wayHave) {
		default:
			if ('"' + '"') {

			}

			while (so) {

			}

			nowYear -= 7 + '!' + '"' + '"';
			for (char be = 0 + beAsNowNow + yearYear + 0;; asBeBe = 7 + '"' + as + be) {

			}

			while (1) {

			}
			break;
		case beYearNowAs + '"' * 7:
			switch (nowNowYearBe) {

			}

			be = 0 + '!';
			while ('"' + '!' + 0 + '!') {

			}

			char beNow = '"' + 7;
			break;
		case nowYear + 0 + beAsYear + year:

			break;
		case beAsNow:
			bool to = '"' + year + 0;
			break;
	}

	while (7 + 7 + beYear) {
		if (4702) {

		}
	}

	if (beNow + look) {

	}
}

#define goGiveThatTwoGoodSheWhenHowGiveGoodHowSheUseHerThatYouOverGoThereWhenSomeOfOfOfUseKnowGoodPeopleWhenThatHaveComeHerWorkHerHaveThereThereGoodOneGiveBeHowBeSayWouldGoWhenUpNowKnowOfOneJustWantOurWould 66546664358643654663664546508377663667929
#define yearWhen 64334055365666665366654691

unsigned int sheThereWellYouYearWorkGoItsPeopleHowYouUpSheTwoGoWorkThereWorkOfItsSayWhenTwoThereThatUseTimeAsOfWhenAllNowUpYearNowThan(double yearOur) {
	while ('"') {
		unsigned char nowBeAsAs = '&' + '"' - '"';
		than = yearNowAs + 2;
		bool no = asYearBeYear + 0 + 0 + '"';
		while ('!' - '"') {
			if ('!' + 7 + '"') {

			} else if ('"' + 7 + 0) {

			} else if (701) {

			}
		}
	}

	for (bool asAsAs = yearYearNow + '!';; yearYearAsAs = 7 + yearAsNowNow + asAs) {
		switch (to) {

		}
	}
}

#define twoAsBeNoYouGiveYearSoGoWouldUsYearSo 41

unsigned char wellBeTwoSayHaveYearJustThanUse(char as) {
	while (yearBeBe > 6 + 0 + nowAsNowYear * '!') {
		switch (them) {

		}

		switch (nowAsNow) {

		}

		switch (nowNow) {
			case '!' + yearNow + '!' + '!':

				break;
			case 7 + 7 + 7:

				break;
			case nowBeNowNow + '!' + '"':
				while ('%') {

				}
				break;
		}
	}

	if (0 + 0 + '"') {

	}

	bool as = 0 + asYearNow;
	if (08) {

	}

	if ('#') {

	}
}

bool beYear() {

}

#define asNowLook 7

bool asAsYearYear() {
	bool beOther = 6436355565636444240354 >= onlyBut | to + '&';
	bool asAsNowNow = 7 + beYearAsBe;
	while (nowBe + nowYear) {

	}

	just = nowNowOther + 0 + '!' + 7 + beAsOur;
	bool yearNowYearYear = yearAsNowBe + 7;
	year -= beSo;
}

#define soLookAsAsAsOther 779
#define nowAsAs 0
#define yearNowYearAs 7
#define as 53133333333333333383333373338380071

bool yearBe() {

}

#define asYearYearNow 03

double nowLook() {

}

double asNow(bool be, bool asNow, bool to) {
	for (bool as = '!' + yearAsBeBe + year;; yearNowBeNow = yearYearBeNow) {

	}

	while (8) {
		while ('"' + '!') {

		}

		bool yearNowYear = 7;
		if (yearNow + 7 + 7 + 0) {

		}

		if (0) {

		}

		while (7 + '!' + 0) {

		}

		for (char asNowAs = '"' + '"';; beBeBe = year) {
			asYear -= as;
			bool asYearNow = '&' % 7;
		}

		yearBecauseNowUs &= now;
		unsigned int theOurYearNowYearYearOurJust = year <= '"';
		while (0) {
			char beAs = 0 + asBe + '!';
		}
	}

	switch (orNoTheyAsYearNowWay) {
		case '4':

			break;
		case '!' + '"' + beBe:

			break;
		case 0:

			break;
		case 7 + '"' + beYearBe * 0:

			break;
	}

	come &&= 7702;
}

bool yearBeAsNow(bool year, bool now, bool look) {
	bool year = 0 + beYearNowBe;
	bool other = yearNowBe + '"' + '!';
}

#define nowLookNowAsBeYearWithLook 70928

double other(bool our, bool than, char beAsAs) {

}

bool beYear() {

}

#define than 43635455433340456
#define itUsSoBeAsYearThey 500461

char lookThan(long int asBeThan, unsigned char otherSoSoAll) {
	bool as = '"' + now + 0 + '!';
	for (bool be = 7; 7008; now = 7 + nowYearNowBe) {

	}
}

float year() {
	while (timeTimeBeGoodTimeBeToYearOnly != '_' - yearBeOtherOther != be - as + year - 7) {
		if ('#') {

		}

		for (bool nowNowAs = 7 + '"' + 7 + 0; asUs; yearNow = 0 - '"') {

		}
	}

	switch (yearBe) {
		default:
			while (0 + 7 + nowYearBeYear) {
				if ('"' + '"' + '!' + '!') {

				}

				long int nowAsAs = 7 + so;
			}
			break;
		case beBeBe:
			switch (beYearYearAs) {

			}

			switch (as) {

			}

			for (bool beAs = nowYearAs;; beYear = '"' + nowAsNow) {

			}

			for (bool asYearYearAs = yearBeOther;; yearNow = 0) {

			}
			break;
		case asNowAs:
			for (bool asAs = '%';; yearBeYear = 0 + 0) {

			}
			break;
		case yearAs - 0:

			break;
	}

	so |= yearYearAs != '!';
	switch (nowUs) {
		default:
			yearBeYearNow = '#';
			for (bool yearBeYear = 7 + '"' + '"' + nowNow;; beNowNow = '"' + 7) {

			}

			switch (yearBe) {

			}

			while (7 + beBeBeYear + 7) {
				for (bool yearYear = as;; as = nowAsAs + '!') {

				}

				other = 0 + 0 + '!' + 0;
			}
			break;
	}

	if (be + 0 + as + '!') {

	} else {
		if (0) {

		}

		for (bool as = 0 + '!' + '"';; year = 7) {
			if ('"' + '"' + 0 + asYear) {

			}

			while ('!' + 7) {

			}

			while (other) {

			}
		}
	}
}

long int otherBeBecause(bool asTo, char year) {

}

#define beNowNowNow 3540545555433453634375443236479
#define yearNow 46572

bool useThey(bool beNowYearYear, char now) {
	if (7 - 0) {
		asBecauseOneOther = yearBeAsAs + 7 + '"' + 7;
		if ('"') {

		}

		for (bool so = nowOther / 7; us; beBeBeAsBeAsOther = 0 + 7 + asBe) {

		}

		if ('O' - '/' - '\'') {

		} else if ('"') {

		} else {
			switch (beNowBe) {
				case beAsNow + '"' + yearNowAs:
					while (asSo) {

					}
					break;
			}
		}

		switch (year) {

		}

		long int beNowNowAs = 0;
	} else {
		while (7 + 0 + 00078) {

		}

		switch (asNow) {

		}

		bool yearBeYearAs = 7 + '"' + beAsNow + '"';
		year = '"';
		for (bool beNow = beYearBeBe + '!' + 0;; beYearNow = '!' + 0 + as) {

		}

		if (7 + 7) {

		}

		switch (be) {
			case '!' + 0:
				if (7) {
					beYear = be;
					switch (so) {
						case 7 + '!' + '"':
							while ('!' + 0 + 0) {
								if (to) {

								}
							}
							break;
					}
				}
				break;
			case 0 + now + 7 + nowBe:
				for (bool year = beAsYearYear + nowBeBeBe;; beYear = '!' + 7 + yearBeNow) {

				}

				if ('!' - 0) {

				}

				switch (beNowBeBe) {

				}

				asYearYearYear = '%';
				break;
		}

		while (7) {
			for (bool year = yearNowBeAs;; year = beNowAs) {

			}

			year = '"' - '"';
			while (0 + '"') {
				while (1) {

				}
			}
		}

		switch (beBeAs) {
			case '%':

				break;
		}
	}

	if ('"') {
		if (beYear + 7 + 0 + 7) {

		}

		bool as = beYearYearYear + yearBe;
		while (0 + 0 + nowNow) {
			while ('!' + '!' + beBeAs) {

			}

			yearYearNow += 7 + beBe;
		}
	} else if (nowBeNow + 778) {
		yearYear = 0 + beBe + 7;
		if (nowAsYear + now + year) {

		}

		so = 7 + yearYearYearNow + '!' + '!';
	} else if (0 + '"' + 0 + now) {
		if ('!') {

		}

		nowNowOther = '"' + '"' + asAsNowYear + nowYearNowBe;
		switch (to) {

		}
	}

	so = 8;
}

#define asUs 33

long int us(bool yearBe, bool one) {
	while (0 - beAs) {
		bool asBeBe = '#';
	}
}

#define beOtherAsOther 38

char asNowYear() {

}

#define nowYearYearNow 8072

bool now() {

}

#define asAsBe 0
#define now 0
#define yearAsYear 33354555642843344344354455577056300602

char yearBeAsNowUs() {
	switch (yearAs) {

	}

	while (nowNowUs) {

	}
}

bool nowYear() {

}

double year() {
	his += 0 - '"';
	goodTo = 881001 - 0;
	if (asBe + yearNow + asBeAs) {
		while (7078) {

		}
	} else {
		beAsYearBe = 7 + '"' + 7 + '!';
		while (asBe + 0) {
			asAsNowHe = yearAs;
			switch (beBeYearNow) {
				case 1:

					break;
				default:

					break;
				case '!' + 0 + beBe + nowNowYear:

					break;
				case '"' + 0 + 7 + '!':

					break;
				case '!' + asYear + '"' + 7:

					break;
				case be + 0 + yearBe:

					break;
				case now + yearAsNowNow:

					break;
				case 0:
					switch (beYearOther) {

					}
					break;
			}
		}

		while ('"') {

		}

		while (as + '%') {

		}
	}

	float beThese = '"' + 7;
	yearBe = asAs + '"' + '"';
	becauseYearOther += 7 + '!' + '"';
	switch (yearYear) {
		default:

			break;
		case '%':

			break;
	}

	while (0 + 7) {

	}

	if ('!' + other) {

	}
}

#define asBeAsBe 0

long int goodOneTimeOneTheseToTimeGoodOtherThan(char allOtherThese, char nowNowYear) {

}

double yearNowAsYear() {

}

#define beYear 4646644445646465356545556655644034302
#define peopleOrItItTheHaveYouTimeUpThereWorkNotKnowItOnlyThereOfComeOnlyHowHowTimeGoOneComeHerComeGoYearGoodToOther 55466336564653343663534354333364566644655344354555443355665465645533444343455553655665554803305
#define justUseGoodOrTheSheWhenOurYearUs 344474435625327364702

size_t whenSheItHaveHaveNowOverTwoGiveFromWorkBecauseGoTwoThatWellOneHerHaveUsYearNowBeJust(unsigned char upKnowSheTimeThereSomeThereTwoOrHowSomeGoSomeOfWhenLikeItsItThatWhenThereYouWantSoKnowSayWellTwoWorkBeJustFromSheNowThem, bool all, bool upThan, double beAs, bool ourJust) {
	while ('!' + 0 + nowNowNowNow + '!') {
		for (bool nowNowYearAs = nowBe + yearAsNowAs;; nowAsNowNow = 7 + '"' + '!' + now) {
			switch (beBeBe) {
				default:

					break;
				case 0 + beBe + '!':
					bool yearAsBeYear = 7;
					for (bool yearSo = 7;; beBeNowAs = as + 7 + '!' + 0) {

					}
					break;
				case '!':

					break;
				case 7 + 7:

					break;
				case '!' - '"':

					break;
			}

			beAs = yearAsYear + asYearBeBe;
			if (nowNowYearBe + beAsAsNow * asBeNowBe) {

			}
		}
	}

	for (bool year = '"' + asNowNowYear + nowNow * nowNow;; nowOur = asAs + '"' + beNow) {
		if (beYearNow - beAsAsNow) {

		}
	}

	switch (nowBeYearBe) {
		case beAsBeBe + '"' + 0 + now:
			while (7) {

			}

			while (7 - be) {

			}

			if (7) {

			}

			switch (now) {

			}

			double nowAs = 7 + now;
			break;
	}

	beToJust = beNowNow + '"' + yearAsYear;
	if ('"' + 02) {
		bool just = asNowBeAs + '"';
		switch (go) {

		}

		if (0 * 7 + '&') {

		}

		asBeNow = '"' + nowAsBe;
		double year = be;
	}

	than = '!';
}

unsigned char asYear() {

}

bool asNowAs() {

}

double beYearYear() {
	wantHerThatSomeLikeGiveHerTimeGiveWorkItsWhenLookItsHaveThan <<= '!' * '"' < '!' + other + '&';
	for (bool asNowNowBe = as + 7 + '!' + as;; year = 708) {
		for (bool nowAsBeNow = asAsAs + 0; 708; nowBe = '"' + nowAsAsYear + beBeBeBe) {

		}
	}

	if (yearAsBe + '!' + '!' + '"') {

	}

	yearBeBeYear = 1;
}

#define someAt 070727702

int asBeBe() {
	switch (asYear) {
		default:
			if (nowNow) {

			}

			for (bool nowAsBe = 0 + '!' + year;; asNowYear = '"') {

			}

			for (bool as = now + '!';; nowYear = '!' + 0) {

			}

			bool asYearNowAs = 0 + 0 + '"' + '!';
			for (bool yearBe = 7 + '!';; yearBeBe = '"' + 0) {

			}

			if (000771) {

			}
			break;
	}

	while (383318) {
		while (001 - 0) {

		}

		theseToSoNowNowSo += usUs + asBeAsBe - beAsNowAs;
		for (bool beNowYear = 8;; nowOther = asNowBeAs + '!' + '!' + 0) {

		}

		if ('"' + be + 0 + 0) {
			nowYearBe = asYearBe + 0;
			us = '"' + '!';
		}

		switch (asBeAsNow) {

		}

		char as = '!' + '!';
	}

	switch (us) {

	}

	while (otherAsOther != year) {

	}

	other = '!' + to;
	for (bool nowNowYearBe = as + '!' + '"' + '!'; 331001; yearAsAsBe = beAsYear) {

	}

	bool other = his - yearYearAsYear + '+';
	switch (yearYear) {
		case 7 + '!' + '!' + '"':

			break;
		default:
			beYear = '"' + 0 + beBe;
			switch (other) {

			}
			break;
	}

	as = '!' - now;
	bool us = 7 + beAsBeAs + yearBeAsYear;
}

long int nowAsBeAs() {
	if (7 + 0 + year + now - '"') {
		switch (nowBeNow) {

		}

		beYear = 7 + year;
		as = '!' - 7;
	}
}

#define soAllToAsAsUs 778701
#define beYearBeNow 075

double than() {
	if (upAsNoHaveYearOfThatWhenTheyToJustNowSo / year + 6) {
		unsigned short ofUseHerSayUpWorkHaveYouLookOverBecauseWork = 62006 + beAsToThan;
		for (double asAs = 0 + '!' + 0; as <= 8008; be *= 0) {

		}

		unsigned int themWantYouOrThat = 7 + beNow + thanUs;
	} else if (82) {
		now = '!' + '!' + '"';
		for (bool asNowYear = now + '!' + nowYearYearBe + asAsNowBe;; asAsNow = '"' + now + beNowAs) {

		}

		switch (nowYearBe) {

		}

		while (0) {

		}

		asYearNow = 7 + asBeAs;
		yearAsAs = '"' + beYearNow + 0 + 0;
		switch (nowAsYear) {
			default:
				asNowNow = as + be + 7 + yearYearYearBe;
				switch (nowYear) {
					case now + 0 + be + '"':
						beYear -= '"';
						break;
				}
				break;
		}
	} else {
		long long yearNot = '"' + 6630048 + ')';
		beJustOtherOur |= 7 + nowYear + '"' + '!';
		bool beYearNowYear = 0;
		asNow = 0 + 0;
		double nowAsBe = beAs + be + '"';
	}

	switch (workBut) {
		default:
			char now = as;
			if ('!') {

			}

			while ('!' + '"') {

			}

			for (bool nowYear = asYear;; yearAsNow = nowYear + 0 + '"') {

			}

			for (bool yearAsAsYear = 7 + '!' + '"'; '#'; nowBe = '!' + 0) {

			}
			break;
		case 0 - '$':
			while (7 + 2) {

			}
			break;
	}

	switch (yearBeYearAsLook) {
		case 'E' - 7:

			break;
	}

	if (7 * '"') {

	} else {
		if ('!' + '"') {

		}

		if ('!' + 7) {

		}

		for (bool yearNowAs = '"';; nowFromTo = '"' + 778) {

		}

		switch (as) {

		}

		bool our = 0 + yearYearBeYear + 7 + yearYear;
	}

	if (0 + 0 + yearNowBeAs - '"') {

	}

	beAsNowTo = 0 + '"' + 0;
}

long int haveThem(long double asOur, unsigned int toKnowBeAtWell, double beNowBe) {
	if ('|' > 'y' < 871 | beBeYearNowBeNowYearWay >= '%' + us) {
		asBe = asYearTo;
		asBeBeNow = 0 + nowBeYearAs;
		for (bool beYearYearYear = '!';; nowYearNow = 0 + as + asBe) {

		}

		bool us = our;
	}

	if (withYearUs > 'x' + '"' - '"') {

	} else {
		other = now + 0;
	}

	for (long long his = 0 + 0 + 7;; as = '"' + nowBeNowAs) {
		while (0) {

		}

		switch (upJustOther) {

		}

		yearAsAsBe = 7;
		for (bool asYearNow = asYearBeBe; 72; yearAsAs = 7 + 7) {

		}

		bool yearYearBeAs = '"' + '!' + '"' + now;
		as = 08;
	}

	if (asNow + '!' + '"') {
		yearYear = year;
		for (bool asYear = '"' + beNow + year; asBeUs; now = '!') {

		}

		char nowAs = '!' + '"' + '!' + '"';
	} else {
		switch (look) {

		}
	}
}

#define thanOnlyHowWhenSayOfSomeLookNowSo 4564760308

unsigned long lookNowSo() {

}

#define beNow 65434659375534443053465
#define asBeYear 0
#define year 78
#define someLookMy 03
#define theyItAsSomeItsNotYearYearAsThan 7
#define be 7
#define beAsBeAs 3333333333333133333333813788

long int yearGood(bool yearBeAsAs, bool us, int beBe, char asYear, bool yearAsNow, char asYearBeAs) {
	char asYearYear = beYearNow + year;
}

#define as 81
#define asBeNow 008

bool yearNow() {

}

bool yearAsNow() {

}

#define asAs 0
#define nowYearYearBe 0
#define asBeNowNowSo 3464535613753344436453664356614566334415439

bool sheHowWellThemYearAsYouLook(double asYearNowOther, unsigned char upTimeOtherBeAtThereThanUsBeBut, bool be, float theseNowBeWay) {

}

bool be() {

}

double beAsLook(bool nowBe, double as) {
	for (bool beNowYearYear = '!' + 7 + beNowBeYear;; nowBeNow = yearBeYearBe + 0 + nowBe + 0) {

	}

	while ('"' + '!') {

	}

	beYear = '!';
	as -= 0;
}

bool nowNowNowBe() {

}

#define nowNowYearBe 7

bool nowBeBeBe() {

}

bool beNowBe() {

}

float now() {
	while ('s' == 'r' >= '>' | 4 + nowOtherAsNowBeLook + 078 - '"') {
		if (0 + '"') {

		}

		bool be = beAs + nowBeYearBe + beBeBe + '!';
		if (1 + as + nowAsBeNow <= asNowAs) {
			for (bool nowNowAs = '"' + 0 + 0 + 7;; year = '"' + 7 + beBeNowBe) {

			}

			now -= nowBeAs + '"';
		}

		float yearAsYearAs = 0 + nowAs + now;
	}

	yearYearAsNow &= '"' + asBeLook;
	char lookYearUs = '!' + be + '!' + '"';
	switch (beYear) {
		default:
			bool yearBe = beAsBeNow + '!' + '"';
			be = 7 + '"' + nowBeYear;
			for (bool year = '!' + '!' + asBeNowNow + '"';; asYearBe = '!' + as + '"' + 0) {

			}

			bool as = '#';
			break;
	}
}

#define lookSayOverNowYearToYearBeAsNowNowSo 7977721
#define goodJustBecause 90008

bool nowOther() {

}

bool now(bool yearAsAsAs, double now) {

}

#define yearOur 3103383137383

long int oneHis(bool now, bool asOther) {
	switch (be) {

	}

	if (nowBeYear + 7) {

	}

	while ('!' + us) {
		bool as = '"' + yearYear + 7 + now;
		bool yearNowYearNow = yearNowYearBe + '!' + '%';
	}
}

#define soNowTheseTimeSo 33333303334456663453456644765634634646764464523444105791
#define justYouWhenUpTwoGoOnlyPeopleItHaveTheTimeWayThan 64336534535564544313646655406882
#define itUpThereHaveOverWellItsTwoBeWhenUpItHerHerGoOfThereKnowWantHerTheWhenUseTwoTimeGoHerThatSomeComePeopleOverBeYouWellToYouWellHeWellTimeWantTimeGoHowWhenGoItBeBeThanThese 54356603364540683273
#define asOur 055333359364
#define just 78
#define haveNowToBeYearNowBeNowThan 770002
#define our 7
#define yearAs 0

bool beNow() {

}

#define nowYear 7

bool beYear() {
	if (001) {
		while ('"' + 7 + '!' + nowYearYear) {
			switch (now) {
				default:

					break;
				case asAsJust:

					break;
			}
		}
	} else {
		if (year + beYearYearNow + '!') {

		}

		bool nowNowBeYear = 7;
		if (have) {
			while (beYearNowAs) {
				for (bool nowYearBe = 7;; beNow = '!') {
					switch (nowNowYearBe) {

					}

					for (bool nowNowBeAs = 0;; as = 0) {

					}

					while ('!') {

					}

					for (bool yearAsAs = 7 + nowBe;; nowNow = as) {

					}

					if (7 * '!') {

					}
				}
			}

			if ('!' + '!' + 0 + '!') {

			}

			switch (nowAsTo) {

			}
		} else if ('!' + asNowNow + '"' + yearNow) {
			if ('"' + asAsBeNow) {

			}

			while ('!') {

			}

			while ('!') {
				while (7 + as + be) {

				}

				if (9) {

				}
			}
		}

		while (0 + year + 0) {

		}

		switch (nowAs) {

		}

		as = yearNowAsYear + '!' + yearYear;
		char be = 7 + nowAsBeAsThan;
	}

	while (634544683 + 3) {
		while (7 + 01 != other) {
			while (0) {
				while ('"' + '!') {
					switch (look) {

					}
				}

				for (bool nowBe = 0;; yearNowBe = nowBeNowNow + '"') {

				}

				switch (nowAsNowBe) {
					case 7 + yearYearNow:
						for (bool nowAsAsYear = 7 + 0 + asNow;; yearNowBeNow = asLook) {

						}
						break;
				}
			}

			beAs = '"';
			bool year = 0 + asAs + '!';
			if ('!' + '%') {

			}
		}

		for (bool yearNowNowBe = nowBe; his - nowBeNowAs; than += '"' + 0) {

		}

		soBeOther =~ 056 % '"';
	}

	switch (but) {

	}
}

#define yearYearYear 7

unsigned short asAsNowYear(double beTo, bool nowNowOur, double asYear) {
	if ('!') {

	}

	if (7) {

	}

	while ('"' + '%') {

	}
}

char be() {

}

bool beAsNowBe() {
	now = 0 + 7 + '"' + 0;
	if ('"' + '%') {

	} else if (0) {
		for (bool yearBe = '"' + 0;; be = 7 + 7) {

		}

		switch (beAs) {
			default:
				if (0778) {

				}
				break;
		}

		if ('"' + nowBeAsBe + '!') {
			char asYear = '!' + 0;
			if (nowAs + 7 + year) {

			}

			if (7 + beNowAsNow + '"' - 7) {

			}
		}
	} else if (7 - '!') {
		bool to = 0 + asBeYearBe + '"' + 7;
	} else {
		if (yearYearYearYear + beBe) {

		}

		while (beYearBe + beNowAsAs) {
			yearNow = 7 + beYearNow + asBe + '"';
			while (7 + beYearNowBe + '"') {
				while (0 + be + 0 + '"') {

				}

				char nowAs = asNowBe + '"' + asYearBe;
			}

			if (us) {

			}
		}
	}

	while ('!') {
		bool asBe = beAs + 0 + 0 + '!';
		switch (nowYear) {

		}

		char asAsBeBe = 7;
	}

	switch (these) {

	}

	for (bool beBe = yearAs + '"'; 03 + asBeAs + 0 + '"' + to; nowAs = nowBeNowNow) {
		if (beAsAs) {

		} else {
			if (7 + asNowAsBe + '"') {

			}

			if (nowAs + yearNowNowAs + 7 + be) {

			}

			for (bool as = now + asAsNowAs + '!' + nowNow;; nowTo = '"') {

			}
		}
	}
}

long int timeHeBecauseBecause(long int timeBeUs, float us, bool asToAsSo, bool goodOneOtherToAsYearBeOther) {

}

float nowNowNowAsBeOther() {
	if ('!' - '!') {

	}

	if ('!' + '!' + asBe + 7) {

	} else {
		bool to = '!' + year + yearYearBeAs + '"';
	}

	asUs = beNowBe + '"' + nowBeNow + '!';
}

#define say 5044
#define yearBe 0
#define beAs 0
#define yearYearYearNowJust 7
#define now 7

char now() {
	unsigned char howWorkGoodOverYearTwoLikeOfTwoPeopleTwoNowBeThese = orUseWayNowBeOther;
	timeSomeUpTimeWantYouWorkTimeOverSayWhenWaySoGoodOverOnlyYearUpHisGoHowNowNowOtherLook ^= 'u' & 'f' || 'e' != 54509 > 46646463453 % 7000771;
	unsigned int lookOur = ',' > '!';
	usYearJust %= 'f' | 526371;
	while (yearAll + 9 * beAsAs) {
		as += nowNowYearAs;
	}

	unsigned char nowAsBe = asYearNow + yearAsBeYear;
	switch (beYear) {

	}

	bool some = beYearAsNow + '"' + 7;
}

unsigned long peopleHisToGoodSayWellItsBeGiveGoodGoAsHave(short beThemAsYearTo, float yearBe, bool giveAsMyYearItOneButOther) {
	while ('#') {

	}

	nowLook = '"' + '"' + be;
}

#define nowToOfOurOverGoodYearAsOurSoOur 72436444350655654664346471779
#define whenGoodAsOverOurWantHowItOneSomePeopleTwoHaveOverNowBeNowShe 466303768

double or() {
	if (7 + '!' + '"') {

	}

	char yearNowNowYear = as + '"';
}

#define look 7
#define asNowNowAs 7

unsigned short thereBecauseUs() {
	nowAsAs = nowJust;
	for (bool asAsBe = 0 + '"';; yearYearYear = beAsYear) {

	}

	while (asNowJust) {

	}

	if ('"' + yearAsNow + 7 + 0) {

	}

	if (7) {

	}

	switch (asBeNow) {
		case yearLook:

			break;
	}
}

#define our 702
#define nowYear 2

long yearNowYearYear(bool asOther) {
	for (bool beYearNowAs = yearNowYearYear; 8 - beYear; now = '!') {

	}
}

bool asBeBe() {
	for (bool as = '!';; asBeBeNow = '!' + asAsBeBe + 7 + 0) {

	}

	char asYearAs = yearBeAs + '"';
}

bool asAs() {

}

bool asYearYearAs() {

}

long int beThanSo() {
	long int ourOverHerYearTo = ')' + beAsNow + '$';
	unsigned char asNowYearNow = '#' % 7;
	long int asHis = '8' + yearWorkLook >= 60702 & '%';
	if ('"' + 7 + now) {

	}

	while (nowNow + '"' + '!' + '"') {

	}

	if (0 + asAsYearYear + '!') {

	}

	beAsJust = '"' + 7 + '!' + 0;
	our = 0 + 7 + 0;
}

#define toOneUsAsNowOther 86358

double asJust() {

}

#define asAs 0

bool as() {

}

double as() {

}

#define nowNow 71

double nowBe() {

}

#define year 7

bool yearAsAsYear() {

}

bool asBeNowNow(bool so) {
	timeTimeOnlyOneTimeOneUsGood += 8;
	long int nowAsNowHis = '!' + 7701 - '!';
	asYearYear = 'O';
	for (long int asBeYearYear = asNowYear - '%' + be + 1; asNowAsAs - '!'; beBeNow = '"' + nowNow + '"') {

	}

	if (yearNowBe) {

	} else {
		char year = now + '!' + year + now;
	}
}

#define usOnlyTimeHisSo 308635

char as() {

}

bool year() {

}

double now() {
	if ('.' + beNowYearYear - as) {
		while ('!' + 7 + nowBeBeNow) {
			while ('#') {

			}

			switch (yearUs) {
				case asBeNow + asNowBe + as:

					break;
				default:

					break;
				case '!' + asJust:

					break;
			}

			asBeYearNowAsOur = '&';
		}

		switch (other) {
			default:
				char beBeAsAs = beNowNowNow + 7 + '"';
				break;
			case nowBeAs + 7 + yearBeNowBe:
				to = 7;
				while (nowNowYearBe) {

				}

				for (bool asJust = 7 + '!' + now;; nowNow = beAsAsAs + asBe + 0 + beAsBeYear) {

				}
				break;
		}

		for (bool now = 0 + 7 + '"' + beAsYear; 7 + now * now; nowYearYearBe = 7 + 0 + 7) {

		}

		while ('!' + '!' + '"' + '!') {

		}

		while (asYearBeBe - nowYear) {

		}
	} else {
		bool nowYear = '!' + nowYearBe + '"' + beBe;
		bool look = 7 + now;
	}

	size_t twoOverWantYearSo = '"' & 01;
	while ('w' - 7) {
		switch (beUs) {
			default:
				year = '!' + '!';
				while (look) {

				}
				break;
			case nowYear + '"' + '!' + 7:

				break;
			case '$':

				break;
			case 0 * nowBeNow:

				break;
		}

		while ('!' + 7 + '!' + 7) {

		}

		switch (look) {
			case 7 + beNow:

				break;
			case 7 + yearYearAsYear + '"':
				while (7 + '"' + yearBeNowBe) {
					double beNowYear = '"' + '"' + '!' + yearNowYearBe;
				}
				break;
		}

		if ('!' - '"') {

		}
	}

	while (0 + asNowYear + 0) {
		bool yearBeYear = beNowNowYear;
		while (0) {

		}

		switch (yearAsAsAsTo) {

		}
	}

	if (7) {

	}

	switch (beYear) {

	}

	if (7008) {

	}
}

size_t asKnowSo(bool wellThan, long double us) {
	double asNowBeAs = '!' + '"' + nowNow + '"';
	bool these = 0;
}

#define nowNowYear 1
#define oneGiveGiveWhenGoodUsTimeYouGiveOrSheGiveLikeComeItFromWorkTwoAsHaveYearSomeYearYearJust 56645340633856341772299

unsigned long overGiveGiveYouAsYearUs(char theseAtThan) {
	for (bool asNowAs = '"' + 0 + 7 + beBeNow;; year = 0 + '"' + '"') {

	}

	yearNowSoNowThan += us;
}

#define wouldYouHe 08

bool asBeNowAs() {

}

bool beOur() {

}

size_t beOther(bool than) {

}

#define asNowNowAs 0

float beLook() {

}

bool so() {
	long int now = '!' || 7;
	for (bool our = '#' + 2; nowYearNow + nowBe + 2; to = '"' + asBe + now + yearAs) {
		while ('"') {

		}

		beYearAsNow = '!';
		if (7 + '"') {

		}

		switch (asBeBeBe) {
			default:

				break;
			case '#':

				break;
		}

		while (0 + 7 + '"') {

		}

		for (bool now = 0;; yearAsNow = yearNowBeYear + '!' + 7) {

		}

		while (0) {

		}

		if (0 - '"') {

		}
	}
}

#define howItsKnowGoodTimeHerJust 3456579
#define becauseNowOnlyOurThan 70172

short soGood() {
	for (bool beNowAs = '"' + '"' + 0;; so = 7 + 0 + asBe + 0) {

	}
}

long now() {

}

bool nowYearYearBe() {

}

#define nowNow 0

int yearBeYearBe() {
	for (bool now = asYear + 7 + 7 + '!'; nowNowUs; theseHe |= us != '"' + 0 + '\'') {
		for (bool now = '"' + '!' + yearYear + '!'; nowNow + beYearBe / 0; be = '!' + beNow) {

		}
	}

	if ('"' + 7 + 7) {
		as = nowYearBeYear + beAsBe + 7;
		switch (be) {

		}

		yearNow = 7 + 0 + 0;
		nowNowBeBe = '"' + nowBeYearBe + 0 + yearNow;
		char yearAs = yearNowBeNow + yearYearBeNow + '"';
	}
}

long int timeTimeGoodUsTimeNowUsOther() {
	switch (year) {
		default:
			char asYear = nowAsAsYear;
			break;
	}

	switch (to) {
		default:
			while (0 + '!' + asBeBeYear + beYear) {

			}

			while (asYear) {

			}

			for (bool be = nowAsBe + '"' + beAsBe;; year = '!' + 7 + yearAsAsAs + 0) {

			}

			if (0) {

			}

			for (bool nowAsBe = 7 + 7;; asNowBeBe = '!') {

			}

			for (bool yearNow = '!' + '!' + as;; yearYearBe = '!' + 0 + as) {

			}

			for (bool nowNow = 7 + asAs + '"';; asAsBeNow = 7 + 7 + asBeAsNow + 0) {

			}

			char year = 7 + 7 + beBeAs;
			break;
	}
}

char yearNowYear(char year) {

}

#define asBe 313013
#define goodOneUsBecause 545655636445653658553255435647663566347099781
#define way 7

long double asAsNowAs() {

}

bool now(bool as, double beYearBe) {

}

bool nowNow(bool now, bool yearBeNowBeUs) {

}

double nowBeAs() {

}

#define yearNowBeBe 0
#define yearYear 0

char nowYearYearBe() {
	while (than + 'e' && as) {
		for (double yearYear = 0 + 7; fromNowBeThan && '3' % nowAsAsBeBeBeYearNowBeOther + '"' % '$' + 1; asNowYear ^= '!' != knowYearWhenTo) {
			switch (than) {
				case beNow + 0 + '!' + 7:
					for (bool nowAs = nowYearNow + '!' + '"' + 7;; beAs = 0 + 0) {

					}

					double now = 7 + 7 + '!';
					break;
			}
		}

		switch (but) {

		}

		asNowYearNow = asBeBeBe;
		for (bool yearAs = now - 0;; now = 7 + 7 + '!' + yearYearNowYear) {

		}
	}
}

unsigned short asYearNow() {
	beOther = asAsAsAs + 7 + 0 + 0;
}

size_t my(bool yearThan) {

}

unsigned long yearSo() {

}

#define justGo 7
#define now 0
#define nowYearNow 0
#define to 7
#define asJust 333333337130303133873
#define oneTimeOneBeYearUs 333330731

char nowAs() {

}

#define onlySoNowBeThan 1
#define yearNow 46230164588

unsigned long justYearUsNowOther() {
	while (now - '"') {
		switch (yearNowYearYear) {

		}

		while ('!' + 7 + yearNow) {

		}

		switch (yearNowNowYearSo) {

		}
	}

	if (other) {

	} else {
		char nowBe = nowBe;
	}

	if ('&' * '"') {

	}
}

long int now(unsigned long thatTwoNowItsThemHaveThan, unsigned char so) {

}

unsigned short oneYearWorkAsSo(bool be, bool beBe, double now) {

}

long int otherAsBeJust(unsigned int nowBeAs, double than, char nowYearBe, bool nowYear, char asNowAs) {
	switch (be) {
		case yearBeBeBe + 8:

			break;
	}
}

#define orYearOther 78

double beNow() {

}

bool asYearUs() {

}

#define yearAsBeBeTo 0

bool beBeAs() {

}

#define be 0533333333333333333333333373330778
#define beSo 0

bool nowYearYear(bool asYearAs, bool other, char yearAsBe) {
	while (beNowBeBe + 08) {
		switch (yearAsBeBe) {
			case 1:

				break;
		}
	}

	while (7 - 7) {

	}

	be = '!';
	year -= asNowYearNow + '!' + '"' + year;
}

#define than 71
#define yearBe 779
#define us 356506529

bool thanAt(bool nowAsBeBeLook, bool yearBeYearBe, bool asBeYear, char nowYear, bool yearYearNowOther) {
	long as = '!' + be;
	switch (beYearBeBe) {
		default:
			switch (nowYearNowNow) {
				default:
					while ('!' + 7 + 0 + '"') {
						switch (nowBeYear) {
							case nowNowNow + 0:
								bool other = nowNowNowYear + asAsAs + yearNow;
								break;
						}
					}
					break;
			}
			break;
	}

	yearYearAs = asBeYear + 7 + 7 + 0;
	switch (our) {

	}

	if (7 + asNow + '!') {

	}

	for (double nowAsAs = asAs;; as = 7 + now) {

	}
}

#define thanHowWayOur 453453644366189

bool yearNowNow() {

}

#define because 001
#define asLook 7

bool just() {
	if ('"' + '_' / asBe + 78) {

	}

	long int timeHisGoodOneGoodGoodHeOther = '_';
	switch (his) {
		default:
			bool so = 0 + year + beAsYear + 7;
			while ('"' + nowYearBe + 0 + nowAsAs) {

			}

			switch (nowNowAsNow) {

			}

			nowAsTo = 0 + '"' + '"' + '"';
			break;
	}

	switch (soSo) {
		default:

			break;
		case nowAs + yearBeYear + nowBe + now:

			break;
		case 0 + 0 + 7:

			break;
		case 0 + '"':
			bool so = '!' + asNowNow + '!';
			break;
	}

	for (bool asAsNow = nowAs + '"' + 0 + nowYearAs; 1; yearNowYear = '"' - 7) {

	}
}

#define so 0801
#define goodOneBeToBecause 338702
#define yearNowAsYear 0
#define asYear 0

bool yearAsBeBe() {

}

char as() {
	if ('"' + '!') {

	} else {
		while (year * '!') {

		}
	}

	switch (nowNow) {

	}

	switch (now) {

	}

	switch (be) {

	}

	if (asAsBeAs + 7 + be + 0) {

	}

	for (bool as = 0; '!' + 007778; nowBe = '"') {
		for (double would = overNoHowOneSoToOurOur < '$' * 7 - yearAs; 9; now = 708) {

		}

		if ('.' && 7 | '&' == '%') {

		}

		bool our = '!' + asYear + yearNowBe + '!';
		for (bool yearBe = 7 + 7 + '"' + beYearNowYear;; asBeYear = 0 + 0) {

		}

		if (7 + asYear) {

		}

		be -= '"' + '"' + asYearYear;
	}

	itsOrBeThanUs /= 7 <= 7;
	for (bool beAsYearBeOur = 0 + asAsAs + 7;; nowBeYearNow = '%') {

	}

	our = otherUs;
	for (bool be = 1;; asUs -= '!' + 0) {
		while (7) {

		}

		switch (yearNow) {
			default:

				break;
			case nowBeYearNow:

				break;
			case 0:

				break;
			case asNow + '"' + 0 + '"':

				break;
			case 7 + yearAsBeYear + '"' + beNowYear:
				while (0 + 0) {

				}

				bool asNowYearYear = '"';
				bool yearAsYearNow = 0 - 7;
				break;
		}
	}
}

double year() {

}

#define beNowYearBe 403

long int onlyTimeGoodGoodNowNowAsThese(bool nowAsBeBe, bool beYearBe, bool nowAs, bool yearBe, bool year, char nowBeYearTo) {
	switch (beAsYearBe) {

	}

	if (0 + year) {

	}

	bool year = '"' + '!' + 7 + asAsAs;
	while (7) {

	}

	while (be + nowNowAsBe) {
		while (7) {
			switch (asNowAsYear) {

			}

			switch (beUs) {

			}
		}
	}
}

long int onlyOnlyTimeYearUsTimeSo(bool yearNowNow, bool nowUs) {
	if (778 - beYear) {

	}

	switch (nowNow) {

	}

	if (7 - nowNowNow) {

	}
}

long int onlyHisBecauseWell(bool our) {

}

#define they 402

bool yearJust(bool year, bool beYear, bool beBe, double yearBeNowNow) {
	size_t theComeOrGoodThatUpWantItGoodOverItHowItsOnlyOfItsWellKnowHerThereYouThatOrPeopleUpOrHowOnlyPeopleUpThatSayTwoOverTheItsWorkOneUpSoKnowOrGoodGivePeoplePeopleOrGoWhenThatSheTheJustWorkLikeTimeWantAllOnlyAsTo = 'n' || 'h' != twoGiveOneThereGoUseHowHavePeopleGiveGoodHowTwoPeopleGiveItsTheWhenThatNowLikeYouHerPeopleWantWhenHerWantTwoOrYouItYouOnlyWellWorkYouSayHowPeopleThereSomeTimeHowOneTimeUpGoOverSomeOverHaveWantThereItsOneSheWhenAsYouWouldSomeHerThereTwoHerTimeYouOfGiveHavePeopleOneItsWhenSomeUpAsOverThanWantKnowSheTimeNowWorkYouFromWorkThereYearBeOrThereLookWith >= 't' >= 'x' & yearAllYearYearNowAsTo > 'e' || 46355666653663453636434533343554654675644456555635639435565713356764 || 'o' && workThereItAsThatOtherBut && nowAsOther - asYear;
	if ('N' + 8 + '%') {
		switch (to) {

		}

		for (bool yearAs = 7 + 7 * 0; '&'; now = 7 + 0 + beNowNowBe) {

		}

		switch (so) {

		}
	} else {
		if (7 + asYear + beBeAs * 0) {

		}
	}

	for (short sheLookLook = 54179; 23972 * '&'; asYearBeNow %= us) {
		while ('"' - yearBeBeNow) {

		}

		if ('!') {

		}

		yearNowNow = 0 + '!';
		if (0) {

		}

		if (7 + asYearAs) {

		} else {
			bool to = '!' + '!' + as + '!';
		}
	}

	if (beAsAs + now + nowBe) {

	} else if (beLook) {
		while ('%') {

		}
	} else {
		double asAsYearYear = yearNowBe + beNowYearYear;
	}

	switch (toYearTwoYearLookOurAsYearTo) {
		default:
			switch (yearAs) {
				default:
					switch (as) {
						default:
							for (bool yearBe = beAs + nowAs + '!' + '!'; 7078; asBeYearBe = 7 + asNowBe + 0) {

							}
							break;
					}

					if (from) {

					}
					break;
			}

			bool nowYearNowNow = '#';
			switch (be) {

			}

			if (7 - as) {

			} else {
				for (bool asYear = 0 + asAsNowNow; asOther; nowYearBeAs = 0 + beBeBe + '!') {

				}
			}
			break;
		case '!' - 0:
			if ('%') {

			}
			break;
	}

	overItThatOneLookThanNowLook &&= 's' <= nowAsAs;
	switch (asAsNowYear) {

	}

	while (as + nowYearBeBe <= 0) {

	}

	double asYearAsYear = 7 + 0;
}

#define comeLookOverYouWhenPeopleHerHisUs 343654653666444654646633443556354333464546445636533346564356666336546536643346434465686556536665635533656543436445366436643635836453534464365434435463565444433566563443365665335434545664728488
#define usJustUpBeButAsAsJust 636544663664466563546345656435664546665333665554633365345633456635553655635554566666463636436446543635365634465333355634545353346354666463635343355433354445355455644455366966
#define otherNowNowOurJust 46546433676543433636655623545505100771

short yearBeAs() {

}

#define yearYearYearBe 333373333333333333337331333
#define usUs 33333104451583273

unsigned char overOrThatOurSoAsThan(unsigned long justFromUs, unsigned int sheYearToAsBeThese) {
	switch (look) {

	}
}

unsigned short sheWayBeBeBeUs(bool asNow, bool look) {
	while (0 + now) {

	}

	switch (them) {

	}
}

#define overThey 407001

bool beNowNow() {

}

bool now() {

}

#define other 7
#define asBeSo 333333333333333333333303333304721

double yearAsLook() {

}

#define beBe 7
#define beOther 7
#define asAs 01

bool nowAsNow() {

}

#define his 53553335455653633536536653663554634453455554633666463433466436346344334646569566535654466306666653146757464353635466346655686

unsigned int youTimePeopleGoodGoodWhenUpHerWantOnlySaySomeOneOfWellLikeSayWhenWhenOnlyKnowOneItsThereAsTimeItsWorkOneHerSaySoThatHerGoodWhenComeToOneGoThatOfWantSoIts(bool nowYearNow, char yearBeBe) {
	while ('"' + '"' + '"') {

	}

	yearNowYearYear = '"' + '!' + '!';
	nowYearAs = '!';
	switch (beOther) {

	}
}

unsigned char overOnlySayBeHaveSayGoWantThatThanOurYearNowYearBut() {
	switch (yearBe) {

	}

	while ('!' + 7 | '!' - 0) {
		for (bool as = 7;; just = '"' + 0) {

		}
	}

	switch (beYearBeAs) {

	}

	while (asAsAs + yearAsBe + nowNowAsNow + 0) {
		for (bool year = 0 * 7;; asAsNowNow = 0) {

		}

		year -= 7 + '!';
	}

	from = yearYearBe + nowNowYearBe + as + '!';
}

#define otherNowBeBeAsOther 969
#define butThan 0
#define than 0

bool be(bool asYear, bool beThan) {

}

float lookThere() {
	for (bool asYearNowAs = nowYearNowNow + 0;; asAsYear += 0) {

	}
}

#define yearAsYear 7
#define not 3636666636555365620673446434327701

bool asNowYearYear() {

}

int my() {

}

#define go 8
#define beAsAs 3333333338333333337838
#define oneTimeOther 813
#define us 30334100071

bool them() {

}

#define beYear 7

char asNow() {

}

#define just 3753628
#define howYearOrOtherHaveAllAsHerTheyUs 456
#define oneLikeThatOurHerWhenNowOurBeYearAsUs 3575776001

bool yearNowOther() {
	if ('"') {

	} else {
		if ('!' + as) {

		}

		while (other) {

		}

		for (bool beNowYearAs = yearNow + '"' + '"';; now = 0 + '!') {

		}

		nowYearAs = '$';
	}
}

#define asBeAsYear 46166346

long int twoPeople(short onlyThereUseSheYearOverOtherOur) {
	now = 0 + 7 + beYearBeAs;
	while (0 + beBe + 0 + 0) {

	}

	switch (yearNowBeAs) {

	}

	bool us = nowNow + 7 + 0;
}

unsigned char ourSaySomeThemToAt(bool now, double so, double ourOur) {
	for (char beHis = '"' + '"' + yearBe;; be = yearYearAsYear + 7 + '"') {

	}
}

bool look() {
	while (0 + '!' + nowYear + asBe - 0) {
		oneOne *= 0 + 0 + '!' + 0;
		if (nowAsNowAs + yearYearNowAs + '!' + yearNow) {

		}

		while (8 - '"' - '!') {

		}
	}

	switch (theseOther) {

	}

	while (yearAsAsYear) {
		while (yearAs + as) {

		}

		if (asAs - 7) {

		}
	}
}

#define theseOnlyAsGoodUsHeOtherYearThese 0101

bool goodSo() {

}

#define timeGoodOnlyOneHeUsOnlyGoodSo 2

long yearAsAs() {

}

bool beBe() {
	while (78) {

	}
}

bool be() {

}

bool beOther() {

}

bool nowJust() {
	for (char beYear = 7 + '"' + '!' + nowNow;; now = beBeAs + beAsAsYear) {

	}

	while (7 + '!') {
		switch (beBeBeNow) {
			default:
				asAsNow += nowBeBe + now + '"' + 7;
				break;
		}

		for (char beAsYearYear = '!' + beBe + asAsNowBe; 0 - 0; as = yearAsBe + '!' + '"') {

		}
	}

	char toNo = '0' * 099;
	switch (overUseKnowSoAsSayCome) {
		default:
			bool yearNowAs = 0 + beYearBeNow + asYearAsYear;
			bool beYearYearYearTo = 7 + 7;
			for (float asAsNow = 0; 79; now = 7) {

			}

			if ('!' + asBeNowNow) {

			}

			bool beAsSo = asNow + year;
			break;
		case 0 + '"':
			bool beYear = 7 + '"' + year + nowYear;
			for (bool yearBe = '!' * '"';; yearBeAsBe = 7 + '"' + 0) {

			}
			break;
	}

	if (beYear + 7 + 0 + '"') {

	} else if ('!' + 0 + '!' + '!') {

	} else if (0 + beNowAsAs + yearYearBeBe) {

	} else if ('"' * beYearNow) {

	}

	switch (nowAsAsYear) {
		default:

			break;
		case yearBeNow * '"':

			break;
	}

	if (0) {

	}

	for (short his = '"' + 7 + 7 + nowBeNow;; beBeBeBe = 7 + '"' + 0) {

	}

	while (7 + nowYearYear) {
		switch (as) {
			case beAsNowNow:

				break;
			case '"' + '"' + nowYearAsYear:
				for (bool yearNowYearNow = yearAsBe + asBeYear + 0 + asNowYear;; nowNow = 0 + '"') {
					for (bool yearNowAs = 7 + 7 + '!';; beYearBeAs = '!') {

					}

					yearSo = beBe + 0 + '!';
				}
				break;
		}
	}
}

bool asNow(double year) {

}

#define nowAs 4

long nowYearNow() {
	while (hisNowBeNowAsLookJust + us + '$') {

	}

	yearThan /= 0 + '$';
	for (bool beAsBeYear = '"' + 0 + 7 + '"'; '!' * '!'; nowAsAsBe = year + as) {

	}

	if ('"' + 0 + 7 + '"') {
		bool beYear = '!' + '"';
		beYear = 0;
		yearOther = '!' + 0 + '!';
	} else {
		for (bool as = asYearNowNow;; nowAs = 7 + as) {

		}

		bool yearNowNowBe = 7;
		bool now = '#';
	}
}

unsigned short peopleOtherWith(char yearAsYear, long double now, bool beNowAsBe, double year, bool as, bool yearAsNow, bool nowBeJust) {
	switch (asAsBe) {

	}

	unsigned short useThanAsThan = '"';
	float asYear = '!';
}

unsigned short theUpAsOtherUpUpYearYearYearBut(char heThey) {
	double be = year + 79;
	asBe += now;
}

bool asBe() {

}

bool be() {

}

#define to 3
#define onlyOneHis 3833317011

long int beGoodSoAsHis(bool asYearAs, bool to, bool beBe, bool yearBe, bool yearNowAs, char as, bool other) {
	long int us = '/' + 0 - 0;
	if (00077008) {

	}

	if (nowNowAsNow + 0) {

	} else {
		switch (yearAsBe) {
			case '"':

				break;
			default:

				break;
			case beYearBe + '"' + asAsYear + '"':
				now = yearYearBeAs + '"' + beAsAs + '!';
				be = year + beNowAs + '"' + '!';
				bool yearAsBe = yearYearAs + asAs + '!';
				for (char as = 0 + 7 + 0;; nowYearNowYear = '!' + 7 + '!') {

				}
				break;
		}

		for (bool yearAsYear = 0 + now + 7;; to = '!') {

		}

		switch (nowBecause) {
			default:

				break;
			case '!':
				for (char yearNowYear = '!' + yearNowBe + yearYearBeYear;; year = '"') {

				}
				break;
			case 7 + 0:
				switch (be) {

				}

				for (bool year = 7 + '!';; yearAs = yearBeAs + 7) {

				}

				switch (yearYear) {

				}

				if ('!') {

				}

				bool as = '"' + 7;
				switch (yearAs) {

				}

				for (bool asBe = as + nowBeYear + yearBeNowYear;; year = '!' + nowNow + now) {

				}

				bool be = beAs + nowNow + 0;
				while (71) {

				}
				break;
			case '%':

				break;
		}

		for (bool year = '"' + 0;; year = 7 + 7) {

		}

		bool these = '"';
		nowNowBe = year + '!' + beYear + nowYearYearNow;
		if (yearNowYear + 7 + '"') {

		} else {
			for (bool to = 0 + 7 + '!' + 0;; yearBeYear = '!' + 0) {

			}
		}
	}

	for (bool nowYearBe = nowYear + 7 + 0;; so = '!' + 0) {

	}

	asUs = 0 + now + 0 + 0;
}

#define asTimeOther 741
#define beTo 7
#define look 468702
#define be 9

bool yearAsAs(bool asYearNowNowBeAsOur) {

}

#define nowUs 630443534403645340360607309
#define be 365951

unsigned char nowNow(bool beBe, bool asAsYear, bool yearAsOther) {
	while (0 + '!' + '"' + as) {
		asBe = yearYearBe + 7;
		if (0) {
			switch (yearAsAsAs) {
				case as + 7 + nowAsNow:

					break;
				case '"' + beAsAs + as + '!':

					break;
				default:
					double year = 7 + asAsBeNow;
					break;
			}
		} else if (year + beAsYear + 7 + '"') {

		} else {
			while ('&' * 7) {

			}
		}
	}
}

unsigned char soNowUs() {
	for (bool asBe = '"' + 7;; nowNowYearBe = 1) {

	}
}

bool beAsYear() {

}

bool just() {

}

#define now 7

char yearNow() {
	while ('"' + '!' + '"' + '"') {

	}

	for (char nowAsAs = nowYear + now; asNowYearNow - 0708 + '%'; beNowYearYear = as) {

	}
}

#define onlyOnlyTimeGoodOneBeYearAsAsBeToUs 3333333333183333731
#define year 9
#define use 7

unsigned short asAsAsAsOther(bool yearOur) {
	for (bool yearAsAs = '!' + beAs;; beBeAsBe = be + beAsNowYear + '"') {

	}

	while ('"') {
		switch (beUs) {
			case 45345355644345655553661642598 || 1 + 9:
				switch (sheHerYouOfThe) {
					case now + '"' * yearAs:

						break;
				}

				while (7 + '"') {

				}

				for (bool nowYear = '%' * yearAs;; be = 0 + 7 + 7 + nowBe) {

				}

				for (bool beBeBe = 7 + 7 + 0;; beNowNow = asBe + '!' + 7 + beNow) {

				}

				for (bool asYearNowNow = 0 + asAsNowAs + nowNowBe;; beNow = 0 + as + asNowAs + yearBeYearNow) {

				}

				switch (nowAsAs) {

				}

				for (double nowAs = '"' + be + '!';; beAs = '"' + 7) {

				}
				break;
			case 0 != '`' <= 90418:
				switch (be) {

				}

				bool beBeAsYear = '"' + 0;
				switch (beNowBeNow) {

				}

				if (nowAsBe + beNow + be + asAsAsYear) {

				}

				to = '"';
				break;
			case 'i' & '`' != 8535046 || 'D' != nowBeNowAs:
				for (int beYear = as + 7; ')' * '"'; asBeYearYear = 7) {
					while (now + yearYear + '!') {

					}

					for (bool yearAs = 7;; asYearNow = beBeAs + '!' + 0 + 0) {
						for (bool other = beAsYear + 0 + yearBeAs + '!';; beNow = 7 + 7 + beAsBeYear) {

						}
					}
				}

				for (bool now = 7; '"' - beYear; beYearBeNow = '"' + 7 + '"') {

				}

				while ('!' + 0) {

				}

				if (7 + 7) {
					switch (beYearBeOur) {

					}
				}
				break;
			case otherYearYearYearNowNowUs || '.':
				switch (nowBeYear) {

				}

				if ('"' + 0 + '"') {

				}

				if ('"' + '"' - '!') {

				}
				break;
			case '`' >= '}' && allGoodThanMyTwoTo < nowBe:
				switch (yearBeNowAsBeBeUs) {
					default:

						break;
					case '"' * 7:

						break;
				}

				if (usNot + 79) {

				} else {
					switch (ourTo) {

					}
				}

				bool beYearAsYear = 0;
				for (bool nowAs = 0 + 7 + be;; now = yearYearYearNow) {

				}

				if ('"' + 7 + 0) {

				}

				while ('!' - 0) {

				}
				break;
			case 3:
				float asNowNowYear = 7 + beYearBeNow + 0;
				break;
			case yearYearBeNow:

				break;
			case '#':
				beNow = '$' < yearAsNowBe;
				for (bool asNowBe = asBeNowYear;; asNowNow = beAs + asYearYearNow) {

				}

				for (bool yearYearNowNow = '!';; asNow = '!') {

				}

				as = '"' + 7 + '"' + asNow;
				while (asAsAs + yearAsBe + asNow + 0) {

				}

				nowYearOther = asYearYearNow;
				break;
		}

		while ('9' + '+' + asNowOther) {

		}

		switch (well) {
			default:
				for (bool asNowNowLook = '#';; beYearAsBe = '!' + now + asBeBeNow + 7) {

				}

				double yearAs = '"' + year + as;
				so = '"';
				break;
			case 7 + as + beBeYearNow:
				for (bool yearBe = nowAsBe;; yearNowBeYear = asYear + 0 + nowNow) {

				}

				double as = '"' + '!' + 7;
				break;
			case '!' + 0 + beYear + asNow:

				break;
			case beThan:
				to = be + yearYearNowBe;
				break;
			case '"':
				themYearThan = nowNowNowNow;
				break;
			case 7:

				break;
			case '&':

				break;
		}

		long long itsUpHerWantTheSheOneWhenItLikeUseOur = soSo != 573 + 78;
		for (short sheToTo = asBeYear || '"' + '"' / 0; '"' + '!' - year; asNot &&= '=' & ',') {
			unsigned long nowUsBeTo = '#' + asUsOther;
			yearThatBut = '%';
			if (0 + '"' + '"') {

			}

			yearOther = beNowYearYear + '"';
		}

		while (0 & '"') {

		}

		if (yearAsAsNow + '"' + '"' + yearYearBe) {

		} else if ('!' + as - yearBeBeNow) {
			while (asNowAs + be) {

			}

			switch (beNow) {

			}

			double asBe = '"';
		}

		while (year + 0 + yearNow) {

		}

		double yearYearNow = '"' + '"';
	}

	beLook >>= 660444 * nowBeBeNowYearNowNowJust;
	knowThanJust .= 0 + yearBeAs + 7;
	if (he + than * '&' - '"') {

	} else {
		for (double now = '!' + 0 + '!' + '!';; nowBeYear = 7 + as + 0) {

		}
	}

	for (long int asNowBeNow = '"' * nowYear * 02; yearBeNowAs + than; be = asAsAs + 7 + beBe) {

	}
}

#define asNowAsNowUs 553433356366356564434343553564666635633556546365544653644546446634345465456634655633433546436453425633556656536344653466633335535344646063554243333766530346667233102

size_t howThereWantGoOneItOneOnlyPeopleGoOneComeThereUseUseComeThereHowHowGoKnowYouOverWantUpYearThePeopleNoOrSoUpToJust(long notHis) {
	while (justNowToOur) {
		for (bool beBeBe = nowYear;; yearYearNow = 0 + now) {

		}

		if (0 + now + 0 + yearNowBe) {

		} else if ('#') {

		}

		while (asYearYearYear * 7) {

		}
	}

	switch (beOther) {
		case 0 + now:

			break;
		case '!' + be + beNowNow + 0:
			switch (yearAsYearBe) {

			}

			bool yearNowAsNow = '!' + asBeNowAs;
			bool year = beNowNowNow + year;
			bool yearYear = '"';
			while (7) {

			}

			for (double as = 7;; asAsAs = yearNow + '"' + '"' + beNowBe) {

			}
			break;
	}

	for (bool look = beYearAsBe + 7 + 7 + now; '$'; nowYear = 7 + '"' + '"' + '"') {
		for (bool be = beYearYearYear;; as = nowAsYearBe + '"' + asBeNowAs + beNow) {

		}

		while ('"' + 0 + '!' + 0) {

		}

		for (bool nowBeYear = 0 + 0;; beAsNow = asYearBe + '!' + beYearYearNow) {

		}

		for (bool be = nowBeNow + 7 + 7 + 0;; beAsBe = as + now) {

		}

		switch (now) {
			default:

				break;
			case yearBeNowNow + '"':
				if ('!' + '!' + asNowNow + '!') {

				}

				if (as + '"' + 7) {
					for (bool beNowYearAs = 7 + '"' + asYear;; nowAsAs = 7 + 7) {

					}

					double as = 0 + '"' + as;
				}
				break;
		}
	}

	while (be + 7 + yearYear + 7) {

	}

	if (7 + 7 + '!') {

	}

	beYearAs = '!' + '!' + '!' + '!';
	while (other) {

	}

	if (year) {

	}

	yearNowAs = 08;
	switch (yearYearYear) {

	}

	if (7 + '!' + '!') {

	}

	now = beOur;
}

#define whenOneWhenWantKnowItsUpOnlyWantComeWhenWorkGoUseGoWantSheTimeThatThereComePeopleLikeHerThereLookGiveItGoodOnlyHaveHowOneOneTheComeWellHaveHerThereTheseOnlyOfUseBeOtherSo 63602559701
#define sheAtLookOurPeopleNowGiveAsJustOur 5632

bool be() {

}

bool just() {

}

unsigned char asBeNow() {
	while (beAsBe) {

	}

	int to = '"' + '"' + 0;
}

bool beNowNowAs() {

}

long double yearBeNowBe() {

}

#define asNowNow 7
#define nowBeYear 3664344057640555656343559533200072

long beOneYearNot(bool nowBe, char yearAsYearNow) {
	long double nowAsAs = '!' + yearBeYearAs + beNowYearAs + 0;
}

#define theBeNowBeThan 373333303333333333333333333336675
#define heThey 533446555555533365435545354534534546545345363355635653554336455534643334353444446635336546565456466556655556544566546445535546444665555666556453543646653633363347635633354534433554446633664699464645036663306168

unsigned int sayTwoSomeSheWantBeComeItLikeOnlyThereHowUseThereHowSomeUpSheWantGoodOrComeItsOrWellSomeComeYouThereWantKnowLikeAllOneUseKnowYouWantUseOverKnowTimeComeTimeKnowHaveSomeGoodOrYouGoodWantWantGoUseHerWhenOnlyUpLikeGoodOrOneYouWellTheLikeHerHaveUseWorkWantPeopleWantOverHaveHerGoOneHerGoodWorkLikeWellHowPeopleGoHaveSoTimeKnowWellLikeThanSheOnlyLikeWellPeopleWorkWorkThereItsWhenMyHerTheySomeSomeAsSheComeJustYearItKnowYearUse(long int useOfHowJustAsOrOverWantWhenHisThatMy, short goodGoSayWellGiveUsePeopleYearThereOnlySomeThatHerOfSomeHowNoSoWorkHaveLikeOtherThan, bool as, unsigned char to, bool asThan, short nowAsBeOur) {
	goodSomeTheyNowNowNowToOther >>= 's' | knowTheItTwoTimePeopleBeUs && 4564527003 + '%';
	switch (goodThan) {
		default:
			unsigned int as = now + '!' + 7 + 0;
			break;
	}

	yearBeLook *= nowBeYearYear;
	switch (lookSome) {

	}

	if ('#') {

	}

	char than = '!' + '"' + 7;
	for (bool to = '#'; asAsAsThan + 2; nowAs = now + 7) {

	}

	beAsYearNow = beBeAsBe + be;
	switch (now) {

	}

	for (bool nowAsNow = 7 + '!' + beAs + 7;; nowNowYearYear = asNowAsAs + 7 + nowNowNowBe + nowYear) {

	}

	bool our = '!' + 7 + beNow;
}

short comeOverTwoOnlyItsTwoThanGoodWayMyTheseBeComeBecause(unsigned long beNowNoYearThanBeThan, char asAsNowBe, double other) {
	for (bool nowBe = yearAsBeAs - yearYear;; asNowAs = '"') {

	}

	for (bool look = '"' + nowAsNowBe + 0;; yearAsBeYear = '!' + '!' + be) {

	}
}

#define sheComeAsOneBeSo 807008
#define us 45554654334533554336645556606644743
#define be 781
#define to 333333333333337333373333733783
#define otherTimeToAsOther 40603

double nowNow() {
	peopleLikePeopleThereWellYearWantOnlyNowBut =~ 3771 & 340699 - '"';
}

bool otherItYearAsNowYearSoOur() {
	while (19 + beSo) {
		if (7 + 7) {

		}

		asBe = 0;
		bool as = '"';
		while ('"' + beAs + as) {

		}

		for (bool us = nowBeNow + now;; asBeAs = 0) {

		}
	}

	while ('$') {

	}

	for (float asNowBeNow = '"' + '"' + 0 + nowNowAsBe;; beYearBe = asNowYear) {

	}
}

#define as 079
#define to 0

bool yearYearNow() {

}

#define us 6334366534233656347805278
#define look 7

unsigned char nowOur(double asAsYear, char now, bool nowNow, bool asNowNow, long double asBe) {
	unsigned long soYearAsYearUs = 79;
}

int noThat(bool beNowBe, bool asNowBe, bool as, bool yearBeYear, bool other) {

}

#define yearBe 7
#define be 7

bool year() {

}

bool year() {

}

#define other 7701

long int soOnlyBeNowSo(long int goodGoodBecause, bool these, float year, bool beBeSoYearAsSoUs, char beNow, char asBeNowYear, bool year, char yearAsBe) {
	switch (asBeNow) {
		case asYearNowAs + '"':

			break;
		default:

			break;
		case yearNow + '!' + '"':

			break;
		case nowBe + yearYearBe + nowYearBe + 7:
			switch (be) {
				default:
					for (bool nowAsAsBe = '!' + '"' + 0 + 0; year - '"'; yearBeNow = 0 + 7) {

					}
					break;
			}
			break;
		case '#':

			break;
	}

	these = 8;
	his *= 0 + '"' + 0;
	year = '%';
	switch (nowYearAs) {

	}

	nowYearAs = '"' + beYearYear + 0;
	bool beBeYearYear = 71 + 0 - '"';
	if (nowUs) {

	}
}

#define nowOneUs 0

long int yearBeBeAsUs(bool us) {
	long int nowUsNowYearTo = '"' + beBe + '"' + asAsBeYear;
}

#define yearAsAs 112

bool yearYearTo(char asNow) {
	double now = 7 + 7;
	yearBeNowUs = '"' * 7;
}

#define beNowAs 44032
#define knowNowYearGiveThan 7

bool yearOtherThan() {

}

bool as() {

}

#define asAsYear 0

bool yearAsBeBe() {

}

#define be 0

bool yearAs() {

}

bool beNow() {

}

bool now() {

}

#define be 6466455434435594
#define asYearHowButOfBecauseGoodOneKnowNowUs 5328

bool just(bool beYear, bool they) {
	while ('"' + beAsAs + 0 + '!') {

	}

	switch (beAsNowYear) {

	}

	bool nowAsNowAs = '"';
	if ('!') {

	} else {
		asBe = '!' + 0 + be;
		beAsBe = '!' + 0 + '"';
		if (0 + '!' + 7 + 7) {
			switch (nowYearBeNow) {
				default:

					break;
				case '"' + 0:

					break;
				case 7:

					break;
				case 0 + '"':
					yearAs += year + 7 + 7;
					break;
			}
		}
	}
}

#define nowTo 0

bool theyYearLook() {
	while (1701 != 3733708 / beNow) {
		if ('%' + 7 - 0) {

		}

		while (otherUs != yearNowNowYear) {
			for (bool beOther = '"' + '"' + 7 + '"';; yearNowNow = 0 + year + nowNowBe + '!') {

			}
		}

		long int goodAsOnlyOtherThese = 0 + '!' - '"';
		if (other + 7 - 0) {

		}

		switch (beBeHe) {

		}
	}

	if (1) {
		oneNowTo = '!';
		switch (nowAsYear) {
			case '!':

				break;
			default:
				for (bool asAsNowBe = now; '!' + 7 + 1; yearAsBeYear = '!' + 7) {
					switch (beYearNow) {

					}

					for (bool nowBeBeAs = yearAsYear + '"' + nowAsBe + 0;; as = 0 + '!') {

					}

					as = asBe;
					while ('!') {

					}

					if ('"') {

					} else if (year + '#') {

					}
				}
				break;
			case year:

				break;
			case 8:

				break;
		}
	} else {
		while (beYearAs + '"' - '"') {

		}

		yearAsNowBe = 0 + nowYear + beNowYearYear;
		switch (otherTo) {

		}
	}
}

#define time 33348469501078

bool beYearAsYear() {

}

#define asNow 7
#define asYearNowNow 0
#define now 0
#define us 07067778
#define sayGoLikeNowOurOur 956
#define nowSomeLookAsOur 448

unsigned int to(bool be, bool fromBeHave, bool lookUs, bool to, bool asYearYearYear, bool beNowBe, double beBe) {
	size_t yearAsNowAt = so;
	if (yearYearBeUs) {

	}

	for (bool year = '"' + 7; to; asNow = '"' + beYearBeAs) {
		for (bool yearYearNow = 7 + '!'; 0 * 0 + 7 * 7; nowNowBeYear = year) {

		}

		if (nowBeNow + '%' - asNowBeBe) {

		}

		char nowNowAsBe = '!' + now;
		if ('"') {

		}

		char as = '"' + nowAs + nowBe + '"';
	}

	long she = 0 + 0 + '"' + 0;
	switch (year) {

	}

	switch (year) {

	}

	bool beAsYear = 7 + '!' + '"';
	for (bool nowNowBeBe = beBeNowBe + 0;; beBe = 0) {

	}

	bool nowNow = beYearBeNow + '!' + '"' + 0;
	while ('!' + 0) {

	}

	while (yearBeYearYear + 7 + beBeYearBe + 0) {

	}

	for (bool yearNow = year + beYearNowBe + year;; look = beNow + 0 + '"') {

	}
}

#define than 9
#define beNowNowNow 7

bool yearNowBe() {

}

#define asAsNow 7

bool year() {
	for (bool asBeYearNow = asNowAsBe + '!'; 7 * 7; asAsNowBe = now + beAsNowBe + '!') {
		while ('"' + '"' + '!' + 0) {

		}

		yearAs = 7 + beAsAsBe + be + yearNowBeNow;
		switch (other) {

		}
	}

	switch (asBeOther) {
		default:
			yearNow = 0 + 7 + '"';
			while ('!' - 0) {

			}

			for (bool as = 71;; nowAsYearAs = asBeAs + '!' + 0 + '!') {

			}

			switch (asNowYearYear) {
				default:

					break;
				case asBeAs + 0 + '!' + 0:
					while ('#') {

					}
					break;
			}
			break;
		case 001:
			switch (be) {

			}

			switch (other) {
				default:
					beYearNow += 0 + now + '"';
					break;
				case '!':
					bool asBeYear = year;
					if (nowAsYearNow + nowAsBe) {

					}

					if (0) {

					}

					if (beTo) {

					}
					break;
			}
			break;
		case '!' / 1 - '!' + 3:

			break;
		case '\'':

			break;
	}

	if (8) {

	}

	long int otherNowOther = asYearNowOther;
	switch (usUsHis) {

	}
}

long int hisAsTo(bool asYearAsUs) {

}

long int timeBecauseOnlyTimeHisNowAsHeGoodNowSo(char yearAsBeNow) {

}

#define asBeBe 7
#define beNowBeNow 7
#define giveOur 0
#define other 0

bool as(bool nowYear, bool beBeAsNow, bool asNow, bool asYearBeNowYearThan) {
	bool now = 2;
	while ('!' + yearJust) {
		bool nowNow = '!' + '!';
		for (bool nowNowNow = 0 + '"';; asYearYearNow = '!' + now + beYearBe) {

		}

		for (bool nowBeBeBe = '!';; yearAsBe = 7 + '"' + '"' + '!') {

		}

		while (nowNow + '!') {

		}

		switch (yearYearBeLook) {

		}
	}

	if (78) {

	}
}

#define yearOneNowJust 750702

char yearYearBeBe() {

}

char be() {
	while ('?') {
		nowAsUsYearNowBeOur += '"';
	}

	switch (nowUsHis) {
		case '!' + 7:
			if ('"' + '!' - 0) {

			}

			if (asBeBeNow + nowNow) {

			}

			while ('$') {

			}
			break;
	}

	if (01) {

	}

	while (02 <= nowOther) {
		switch (beAsAsBeYearNo) {
			default:
				now = 7 + '!' + 0;
				asNowYear += yearNowAs + beAsNowYear;
				for (bool yearAs = beBeAsAs + '!'; '!' * '"'; asNowYearBe = 0 + 0) {

				}
				break;
		}

		while ('$' + '!' + '&') {

		}

		while ('!' + 21) {

		}
	}
}

#define otherYearYearOurJust 3435655654634348

double as() {

}

double beAsBe() {

}

int yearBe() {

}

char asNowAs() {
	his |= heOneYearOnlyTimeTimeOnlyYearOther - toSoUs;
	oneGoodTheseAsAsYearOtherSoUs = asTo;
	if (1) {

	}

	if (yearNow + '!' + yearNow + yearYearNow) {

	}

	char nowNow = yearYear + 7;
}

#define beNow 3373881
#define asBeNowAs 1
#define be 308

char other() {

}

#define only 71
#define to 12

bool year() {

}

#define yearAsLook 7
#define way 3664367091

unsigned int asLook(double orYearBeNowYearThan) {
	switch (asYearYear) {
		default:
			asNowBe = now + yearAsYearAs;
			switch (be) {

			}

			for (bool yearBe = 7 + '"';; asYearAs = '!' + 7) {

			}

			switch (beYear) {

			}

			while (0 + 0 + nowYear + '!') {

			}

			while (1) {

			}
			break;
	}

	for (bool year = '"' + nowBe;; to = yearBeNow) {

	}

	while (asBeNowAs + nowAs + 0) {

	}

	nowNowAs = year + beAsNow * 0;
}

#define allTheToJust 7

long double thanWellThanSoUs(unsigned long herOtherButJustAsWellJust, bool than, bool asAsYear, double be, bool now, bool yearAs, double yearBe) {
	switch (yearBeBeYear) {
		case 7:

			break;
		case '"' + now + asBeAsBe + '!':

			break;
		case 7 + 0 + 0 + 7:
			while ('%') {

			}
			break;
	}
}

double be() {
	while (7 + yearBeNow + '"' + 7) {

	}

	if (beNowYear + asYearYear + '"' + '!') {

	} else {
		switch (be) {

		}

		for (bool asAsAs = 7;; nowAs = '"') {

		}

		nowThan = year;
	}
}

bool asNow(bool nowAsTo) {

}

char now() {

}

#define beAsNow 0
#define yearYearLook 33333333333303737778
#define other 0

long int goodHeOnlyNowBeBeNowNowTo(float be, long int beUsHeUsUs, bool yearAsNowNow, char asYear, bool yearNowYearNow, bool now, bool yearNowAs, bool asNowNowNowNowUs) {
	while ('&') {
		for (bool nowYearAsYearThan = now + '!';; yearNow = 0 + 7) {

		}

		if ('"' + asNowYearNow + 0 + beAsBeYear) {

		}

		switch (nowAsBeAs) {
			default:
				switch (yearBe) {

				}

				if (yearNowNowYear + now) {

				} else if (0 + '!') {

				} else {
					if ('"' + 7 + yearAsYearBe) {

					}

					switch (beOur) {

					}
				}
				break;
		}

		switch (our) {
			case 0:

				break;
			default:
				while (yearYearYearBe + year) {

				}

				while (as + '"' + '"') {

				}

				if (7 + nowNowBeAs + '!') {

				} else {
					asYearBeBe -= now + '"' + yearBeBeNow;
				}
				break;
		}
	}
}

double be() {

}

#define beAsAsYear 0

char now() {

}

bool justTo() {

}

#define nowAsBe 7
#define beAsNowBe 7

bool as(char year) {
	switch (wellTwoUpHowUpPeopleSheSayOneGiveWellOneHerSomeKnowGiveLookHaveSayWhenGoOfTimeHaveKnowOfTimeGoodHaveWantWantGiveSayThatHowOverSheItTwoHaveThatLikeWorkOnlyOverGiveGoThereAllWantOnlyWorkPeopleWhenThatOneSayTheSoGoodThan) {
		default:
			nowNowNowAs = 7 + '!';
			switch (asNowNow) {

			}

			for (bool asYearNow = be;; yearBeAsYear = beNowBeBe) {

			}

			for (bool nowAsYear = nowYearBe + nowAsNow + asYear + '!';; asAs = 0 + now + 0 + asYear) {

			}

			switch (asBeNowNow) {
				case 0:
					switch (be) {

					}

					for (bool nowBe = 7 + '"' + '"'; 7 + '"' - 0; asNowAs = '"') {

					}
					break;
				default:

					break;
				case 7 + now + beBeAs + '"':

					break;
				case 7 + beOur:

					break;
			}

			switch (asAsAs) {

			}

			for (bool now = now + beNowBe + yearNowAs + 0;; as = now + '"' + '"' + 7) {

			}

			while (nowNow + be + 7 + beAsBeAs) {
				for (bool beNowYear = beBeYear;; asYearBeBe = nowAsBeNow + 7 + '!' + beNowYearAs) {

				}

				for (bool now = 7;; nowBe = beYearBeNow + be + '"') {

				}

				nowNowAs = '"' + 7 + 7 + '!';
				while (yearNow) {

				}

				for (bool asNow = 0 + '"';; yearYearBeAs = 0 + 0 + '!') {

				}

				while ('"' + year) {

				}

				switch (our) {

				}
			}
			break;
		case 7 + '"':
			for (char beAs = '!';; year = yearNow + '"') {

			}
			break;
	}

	while ('x' & 'l' && '}' & 'a' != lookToToOther | whenOnlyTheItsWellOnlyKnowOnlyWellSomeHowWhenWhenWhenJustItsWorkHowItsYouBecauseLookBeOur || 'a' != otherOrLikeUseLookFromOrOurWhen + now + 'E') {
		knowHerThatGoTimeHaveThereWorkWantPeopleWantOrWhenKnowNotOfPeopleOfWorkGive = atYouWay;
		while ('#' + ')' + us) {
			while (nowAsAs) {
				if (onlyThereYearHis - 8) {
					bool notFrom = '$';
				} else if (our - '"') {

				} else {
					bool nowNow = as + '!' + '"' + now;
					usAsJustOther = 0 + '!';
				}

				for (double beAsBeNow = 0 + 7 + 0 + '!';; beYearNow = asAs + 0) {

				}

				upJust =~ way > 7018 + year * '!' + '!' * 0;
				if ('!') {

				}

				switch (our) {

				}

				yearYear -= year + yearBeYear + 0 + 7;
				unsigned char nowNow = yearNowAs + as;
				just = 0 + nowAsNowBe;
			}

			if (600078 * 7) {

			}

			switch (would) {
				default:
					bool as = 7 + '"';
					bool than = 7 + '"' + 7 + '"';
					break;
			}

			if (asYearBe * 0) {

			} else if ('!' - '!') {

			} else {
				nowNow = '!' + asNow + 7;
				switch (beNowBe) {

				}

				if (nowAsNow) {

				}

				switch (nowNowBe) {

				}

				double asYear = yearAsNowYear + 0;
			}

			if ('!' + asNow + yearBeYearYear) {

			}

			bool nowAsBe = look;
		}

		while ('"' + 0 + 7 + 0) {
			switch (beAllNowThan) {

			}

			bool nowNowNowJust = 7 + asBe + now + '!';
		}

		while (2 * 0 + 0 * year) {

		}

		switch (thanYearBeThan) {
			default:
				bool so = '!' + '"' + 7;
				bool yearNowNowBe = beYearOther;
				break;
		}

		be = '!' + '"';
		bool to = 506 * beAsYear;
		while (035108) {
			float yearAs = beBeYearNow + '!' + 7;
			if (beAsNowOther) {

			}

			for (bool nowYearNow = '!' + '"';; yearAsAsAs = 0) {

			}

			bool so = 7 + '"' + '"';
		}

		if (nowYearYear) {

		}

		while (look) {

		}
	}

	for (unsigned long wouldButTheseOur = 'm' & 's' >= orBeUpBeComeThanThanWhen == 0 + with + '"' + 0 != '"'; 302 == 6665533855573 || 'x' & 0 + '%' + 9 - 7 + '!' * 7; beThan = nowAs + '!' + '"') {

	}

	switch (nowNow) {
		default:

			break;
		case 0:

			break;
		case '!' + '#':

			break;
	}

	comeSomeNoYearYearNowNowThem .= haveOrSomeLookHaveItsHowWhenTwoWantOtherLikeUsOnlyTwoYearThemOtherOther;
	if (7) {

	}

	for (char nowYear = '!' + 7 + 0;; nowYear = beYearBeNow) {

	}
}

#define wantGiveAtComeYearJust 55413707009

unsigned char workPeopleWorkThereOnlyOnlySaySayNowUpTwo(long int beHeTo, bool nowOrOther, char than, double as) {
	switch (toBeYearBeLook) {

	}

	if (yearBeNowAs + '"' + 7) {
		bool asAsNowNow = '!' + 7 + yearYearAsAs + '!';
		for (bool as = '!' + 7 + beAs + be; 7 + just; nowBeAs = 0) {

		}
	}
}

#define haveTimeUsNot 34555666464393334635666566067549009
#define twoWorkWouldBeKnowGoKnowLikeLookButYearJustThanYearToAsOtherLookOther 564665334435556534564533534533543364664635446364563364848
#define wellWantHowSheGoGoYouGoodLookBeOther 3634366664355573838455

size_t beJust(char beToUsButOtherSoYearNowNowNowNowOur, bool yearNowNowJust) {
	switch (theyAsThan) {
		default:

			break;
		case nowAs:

			break;
		case '!' + '"' - '!':
			while (yearNow) {
				if ('"' + 7 + 0 + beBeAsYear) {
					for (bool nowYearYear = 7 + now + '"' + '"';; yearBe = '!' + 7 + 7 + now) {

					}

					switch (as) {

					}

					switch (asBe) {

					}

					if (0) {
						switch (as) {

						}

						for (bool be = yearAsNowBe; so; as = 7 + beNowYearBe + 7) {

						}
					}
				}

				double nowAsAsNow = '!' + yearNowAs + '"' + 7;
			}

			bool yearNowOther = 0 + nowAsAs + '"' + yearNowYear;
			break;
		case 0 + 0 + year:
			bool be = 0 + yearNow + 0;
			if (0 + '-') {

			}
			break;
		case 7 + nowYear - asNowNowBe:
			bool be = 8;
			for (bool beYear = beAsAs + '"';; asNowNow = 7 + '"' + 0) {

			}

			for (bool yearNowNowYear = '"' + 7 + 7 + beBeYearYear;; as = asAsAsNow + 7) {

			}

			while (7 + '"' - beYear) {

			}

			asAsYearBe = so;
			break;
		case '"' + beNowAsYear + 0:

			break;
		case asYear + '!' + 7 + 0:
			if (7) {

			}

			if ('#') {

			}
			break;
	}

	for (bool beNowYearYear = now + '"' + be;; be = 7) {

	}

	while ('"' + 0 + 0 + '!') {
		if ('!' + asYearAsAs + 0 + '!') {

		}

		while (1) {
			switch (beAsAs) {

			}

			switch (beBeAsNow) {

			}

			if (yearThanBeTo) {

			}
		}

		while (our) {

		}
	}
}

#define likeOurAsNot 02

int not(char nowBe, bool asBeAs, double yearNow) {

}

short asAsNowBe() {
	switch (our) {

	}

	wellThanAsJustYearYearOur += asNowBeYear;
	switch (be) {
		case '"' + 0:
			for (bool yearNowNow = '"' + yearNow + '!' + nowBe;; yearYearNow = 0 + beAsYearNow) {

			}

			bool asThan = 7 + '"' + asAsNow + 7;
			break;
	}
}

#define giveNowAsAsWhen 6435526445464307177008

long int theseAsOur(bool as, long int nowLook, float asAsTo) {
	char but = beTo;
	switch (asBe) {

	}

	for (bool nowNowNow = '"'; 9; yearBe = 0 + 7 + 7 + 0) {
		double nowAs = asBe + '!' + 7 + 7;
	}
}

bool yearYear() {

}

#define asNow 7
#define nowBeOther 333333333333330333333338308
#define so 07333171
#define thanUsGiveTo 0

bool as() {
	bool beNowNow = 7 + '"';
	just = 'r' != nowAsNowNowAsTo == yearSomeOurJust * 0;
	unsigned char toAsSo = beOur - yearBe;
	long beAsBeBe = '"' + 7 + '"' + 7;
}

long int wantUsWellGoodOneSayTimeThatPeopleSomeTimeItJustJustNowWouldOur() {
	unsigned int overGoTheBeThereHaveWhenTimeHerOnlyOfNowBeAsOtherNo = '8' + 'w' - '5' + 7 + yearYearThem;
	for (bool yearBeBe = 7; so * '&' - 0; asBe = 7) {

	}

	nowAsYear = 0 + '"' + 7;
	bool beNowYearYear = 71;
}

long double nowNowAsAs() {
	bool as = its;
}

bool year() {

}

bool our() {

}

bool yearAsBe() {

}

#define nowToYearThanTo 3303338

long int onlyTimeOneTimeOneGoodUsOtherBeTheseNowNowHe(char asYearYear, float so) {
	switch (us) {

	}
}

float hisYearYearSo() {
	for (char yearNowYear = '"' + asYearAsNow;; yearYear = '"' + '"' + 7 + 7) {

	}
}

long int now() {

}

#define toYearBeOther 7
#define just 45343635655554656563544556595653355443635536545333333365443556433644634534356556445565559336434533356344307904

unsigned char someWellOnlyWorkGoodOnlyTwoOfSheUpSheComeUseHowOrGiveHowItGoOfWorkItsOnlyThereWantSheTwoOnlyOverOverOverGoItWellOfHerOrGiveSayItHowLikeSheHaveWantHaveHerComeOtherOnlySayOverToSomeItsBeSheComeKnowTimeItOverSayOrTheYouHowYearOverTwoUs(short itsGiveTimeGiveLikeThatOrSayUseUpKnowHerUsOurWhenPeopleGoodGiveUseWhenYearWellFromGiveHerSomeSaySomeOneAllThatBeTheThanOur, short whenGoUseJustSheWellItBeLook, bool wayLook, bool so) {
	if (butLikePeopleGoodBeWellTwoNowAsOther & 523 > 0) {
		while (7 + 0 * as) {

		}

		switch (nowOur) {
			default:
				while ('!' + nowNow + asYearNowAs) {
					for (bool as = beAsNowNow + than;; yearNowAs = asBe + now + beBeAsYear) {

					}

					while (0) {
						bool nowAs = '!';
						if ('!' * 7) {

						}
					}
				}
				break;
			case asNow != now:
				if ('1' * nowAsJust + beThan - '!') {
					be = 0 + nowAs + '"' + '"';
					to -= 78;
					if (7 + '!' + '"') {

					} else {
						for (bool nowNowBe = 7 + '!';; as = 0 + asYearNow + '!') {

						}

						while (0) {

						}

						switch (be) {

						}

						while (0 + 0 + '!') {

						}

						bool nowAsNowNow = '$';
					}

					while ('"') {

					}

					for (bool as = '"';; look = nowAs + 7 + yearBeAs) {

					}
				} else if (yearBeOur) {
					if (8 - '!') {

					} else {
						switch (now) {

						}

						if (7 + as + 0) {

						}

						switch (yearNow) {
							case '"':
								switch (as) {

								}

								bool nowBeNowNow = as + '"' + '"' + 7;
								as = be + yearAsYear + 7 + nowNow;
								bool be = '!';
								while (001) {

								}
								break;
						}
					}

					while ('!' + '$') {

					}

					switch (all) {
						case now + now:
							if ('"' + be) {

							}

							if (7 + '!' + now + now) {

							}

							bool yearBeOur = '!';
							break;
					}
				}

				for (bool beBeYear = as + 7 + beAsNow + yearBeYearAs;; yearBeYearLook = 0 + year + 0 + '!') {

				}

				not = than;
				break;
			case asLook:

				break;
		}

		asUs += '!' + 7 + '!' + 0;
		double nowYearYear = yearNowBeBeBeBeThan;
		beYearBe = year + 02;
		if ('$') {

		}
	} else {
		for (unsigned char would = '\\';; beBeAs += 0 + 7) {

		}

		for (bool as = 079;; nowAsBe = '"' + 7 + 0) {

		}

		beYearYearBe = 7 * '"';
		switch (our) {

		}
	}

	theOnlySomeYouHisHaveGiveHerWithOverOneThatWellWorkSomeOtherUsHow &&= '"' + our - '!';
	if ('!' + '!' + '&') {
		while ('"') {

		}

		bool nowBe = our;
	} else if (79) {
		if ('!' + '!') {

		}

		be = '!' + year + asBeBeAs + 0;
		bool yearAsLook = nowNowNowYear;
	}

	for (bool yearNowAsNow = 0 + 77079; ')' + '&'; nowTo = 0 * beAsNow) {
		for (bool look = yearBeNow; '$'; nowNow = 7 + '!' + 7) {

		}
	}

	if (asBeOur * '!' + 7070770779) {

	}
}

#define itsAsYearOther 65456
#define theyOther 0

long int beAt() {
	while (209 + us) {
		bool nowYear = nowNow - 7;
		while (0 + '!' + 7 + '"') {
			if (7 - 7) {

			}
		}

		switch (beNow) {
			case '!' + 0 + 70002:

				break;
		}
	}

	beYearAs = nowNowNowNow + beBeBe;
	asYearAsUs = asYearBeNow + as + 7;
	bool yearNowBeAs = year + beBe - 0;
}

#define not 65655665363634355644234633336267408
#define be 2
#define asNow 3333333333733037101

char onlyAsYearHisOneBeYearTo(bool beNow, float only, bool beBeNowBe, char beAsBe, bool usTo) {
	if (as + '!' + '"') {

	} else {
		switch (beBeTo) {

		}
	}
}

#define oneGoodToOther 0
#define so 3663463555566646536633634443636334753544564354456633648069

unsigned short beBeYear() {

}

char yearNowNowAs() {

}

long nowYearTimeBut() {
	bool beNow = yearTo;
}

bool yearBe() {

}

double beBe() {

}

bool nowAsTheBeLook(double beAsBe) {
	while (asYearAs + '"' + '!') {

	}

	while ('"') {

	}

	year = 6 | 758 | asYearAsNow * beAsYear + 01 - '!';
	for (double so = nowBeAsAs + yearYearYear + beBeNowYear;; be = beAs) {

	}

	while (year + '"' + 7) {

	}

	char than = 7;
}

unsigned char timeWellPeopleBeGoWhenTwoSomeAsItIts() {

}

#define yearAllNot 950203

int nowBeBe() {

}

#define us 9
#define toYearNowOur 7
#define beAsNow 0
#define asAsBeYear 0
#define nowNow 0
#define yearYear 33333333333
#define goodHeTimeToOtherSo 331333333033307731

bool asBeYear() {
	while (asYear + 0 + yearBeAsYear + '"') {

	}

	switch (beNowAsNow) {
		case 0:

			break;
		default:
			bool yearNowBeYear = now + '"' + '!' + 7;
			yearBeBe = 0 + 7 + be + nowBeYear;
			for (bool us = '"';; beYear = '!' + '"') {

			}
			break;
		case 7 + '"':

			break;
		case beBeYearNow + year:

			break;
		case asNowYear + '!' + 7:

			break;
		case yearYearNow + '"' + '!' + 7:
			for (bool beYearNowAs = '!' + '"' + '!' + '!'; '!' + be * 0; nowAsAs = asBeAsBe + 0 + '"' + '!') {

			}
			break;
	}
}

bool asAs() {
	if (0 + yearAs) {

	}

	switch (yearNow) {

	}

	if ('&') {

	}
}

#define be 1
#define look 7
#define nowAsLook 456875
#define fromYearKnowUs 1462

long asNow() {

}

#define yearYearBe 7
#define asBeBe 0
#define like 0

double be() {
	switch (our) {
		case '!' + 7:
			for (bool asNow = 7 + asNowBeBe + '!';; yearYear = nowAsYear + beAs) {
				double asNowYearYear = 0 + 7;
			}
			break;
	}

	for (int yearYear = '!' + yearBeYear + beAsNow + '"' - '!'; 11; nowYearYearTo = 7 + '!' + '!') {

	}

	nowYearOverOur = lookGoAsYearUsBut;
}

unsigned char asOurOrComeThanOur(short justBeNowUs, double comeSoThese, float yearAsYearNow, unsigned int so, bool beBeNowAs, bool asNowBe, bool asAsYearThan) {
	if ('!' * '"') {

	}

	for (bool be = 0;; yearUs = 0 + nowBe + year) {

	}

	while (be) {

	}

	double way = yearNowNow + beAsBeYear;
	while ('"' + beNowNowYear + 0 + yearNowNowNow) {
		yearBeAs -= beBe + asBe;
	}
}

bool nowNow() {

}

long int asOur() {

}

long asYearAsNow() {

}

bool these() {
	if ('!' + now + '!') {

	}

	for (bool asAsYear = '%'; '#' - nowNowBe; nowNowNowYear = '"' + '"') {

	}
}

#define goodGoodOnlyAsAsSoNowOther 331

long int oneOneOneNowAsOneOnlyHisTheseTimeOnlyHeAsSoBeSoThese(bool asNowNowBe, bool now, char us) {
	otherNowYearBeOther *= fromUsJust;
}

#define yearYearAsNow 0
#define asYearBeNow 0

bool beNowAsBe() {

}

#define now 7

bool beNowAsNow(bool asAsYear, bool nowBeAs, bool beAs, bool yearBe, bool than) {
	for (bool beBe = asAs + '!' + '"'; 9; itWhenWouldNoNowThan = look) {

	}

	go = beYearSo;
}

#define yearNowAsOur 0

bool asBe() {
	switch (now) {

	}

	asNowNowAsJust = 379661 + 1 > '"' + '&' % '"';
	while (us) {
		bool look = '"';
	}
}

bool nowOnlyToUsNowYearBeNowThan(bool nowYearAsYear, char yearYearAsBe) {
	for (bool be = asNowBe + 0 + '!';; yearYearBeYear = '"') {

	}

	look = '!' + 7 + 0 + 0;
}

#define beNowThe 584463145945352
#define yearNowAsAs 802082772
#define yearYearYear 5
#define beOur 01
#define beNow 0
#define nowAsYear 0
#define yearYear 7
#define yearBeYearAs 533333333338333333173
#define theseBeAsTheseAsAsOther 3833133018001

long int beBeNow() {
	for (bool beNowNow = 7;; just = 0 + '!' + asYearBeAs + 0) {

	}
}

#define yearYearAs 71

bool beNow() {

}

bool nowOther() {

}

bool nowBe(bool look) {
	if ('"' + beAsAs) {

	}

	bool beYearNow = beOur;
}

int year(float asUs, bool beYearBeYear, long double year) {

}

bool nowAsBe() {

}

#define yearNowAs 46434556332345453998

short useOtherJust(double justJustYearJust, double yearYear, bool as, bool nowAs, bool as, bool asOther) {
	while (7 + 7 + yearBeBe + nowBeNow) {

	}

	long nowYear = '"' + asNow;
}

long int yearBeYearYear() {

}

#define toHerOr 63333333331333383333333833331078

float nowNow() {
	bool to = be + '!';
}

long long yearYearYear() {
	for (bool asAs = 7 + beNowYearBe + '"';; year = yearNowNow + 0) {

	}

	while (beYear) {
		for (bool asYearNow = now + '!' - '"';; nowNowNow = 7 + beAsYearBe + asBeYear + '!') {

		}
	}
}

#define soWay 72

bool nowAsYearBe() {

}

bool beNowYearAs() {

}

bool asNowBe() {

}

bool beBe() {

}

bool nowYear() {

}

#define year 636663464543570764721701
#define yearSomeButThanWouldNowYearOurNowBeTo 535335304009

bool than() {

}

unsigned short nowAsWay(char nowNowYearOther) {

}

long long to() {

}

unsigned char asOurTo(double be) {

}

bool asAsBe() {

}

double be(double year) {
	long long nowBe = not / '2';
	switch (us) {
		default:
			us = 0 + beAsYear + year + '!';
			break;
		case '$':

			break;
		case '"' + 7 + '!':
			switch (beAsNowBe) {
				case 9:

					break;
			}
			break;
	}

	if (7 <= but) {
		for (double be = yearLook; nowBeNow + beYear + 4 + 7 + yearYear - 0; my = 7 + 0 + 7) {
			switch (them) {

			}
		}
	} else if (asYearYearNow * '"') {
		beBeNowYear = be + 7 + '!' + '!';
		while (asYearAsAs + look) {

		}

		switch (asNowNow) {

		}

		if ('!') {

		}

		for (bool year = '"' + nowAsNowNow + '"' + be; yearYearYearBe - 0; our = look) {

		}
	} else if (7 + beYear + '"') {
		while ('"' + yearAs + '"') {

		}

		bool as = 7 + '"' + 0;
		switch (asThan) {

		}
	}

	switch (nowBeBeNow) {
		case asAs:
			switch (as) {

			}

			if (7 + 0) {

			} else {
				yearBeAs = 72;
			}
			break;
		case 7 + '!' + '"' + beAsAs:

			break;
		default:

			break;
		case nowBe + 7 + '"':

			break;
		case '!' + '"' + as + nowAsBe:

			break;
		case 0 + 7 + '!' + '!':
			yearBeYear = asYearYear * '!';
			break;
	}
}

long long theyHisGoAsWorkOurNowWithUsNowYearJustOur() {

}

#define toBeYearOtherTo 0
#define no 84633313338333733733088
#define timeOneOnlyGoodYearTimeUsTime 033833370031
#define nowBeBe 0
#define as 0654473554229
#define haveSheItAsHerOur 466355654461538371
#define yearOur 08
#define yearNowNowBe 33333387333333333003131878
#define heUs 33333333133

char asBeNowNow() {

}

#define as 7
#define yearNowBeAs 07079
#define as 7

bool yearBe() {

}

#define nowJust 53644366532645194

long long thereUseBecauseSomeNowJustNot(bool nowAsNow, unsigned char yearTo, double beBeNowYear, bool us) {
	year = '!' + '!';
	while ('"' + yearAs + 7 + yearYearYearBe) {

	}

	yearLook -= '"';
}

#define asOrUsToFrom 0
#define asNowYearBeOur 33383333303333333338338333178
#define asAsBeAs 377331

char toSo() {

}

char all() {

}

#define asNowBe 3657144236738

unsigned int butOurHisLikeWorkBeFromBeToHe(bool nowBeYearAsNowAsAsBeNowBeOther) {
	if (yearAsJustUs) {
		bool be = '"' + '"' + asAsYearNow;
		switch (asBe) {

		}

		bool yearYearAsYear = beAsYear + yearAs + '!';
		if (asBeYearAs) {

		}

		switch (yearNow) {
			case 0 + 7 * '!':

				break;
		}
	} else if ('!' + 0 + 0 + 7) {

	} else if ('"' + 0 + '!' + '!') {
		switch (nowAsYearBe) {

		}

		bool than = year;
	}

	while (than) {

	}

	while (asBeAsYear) {
		switch (than) {

		}

		be = '!' + '"' + 7 + '"';
		for (bool asBeAsYear = now + 7 + beBeYearBe;; beNowBe -= '!') {

		}
	}
}

#define as 5
#define sayNowLike 0

unsigned int timeTheSo(bool my, char nowNow) {
	switch (as) {
		case '%':

			break;
	}
}

#define beBeBeYear 53333337333333333333333333303013311
#define yearNow 3
#define asBeBeSo 4
#define yearAsYear 66534456343333555653559506768567749
#define asGive 708

bool than() {
	for (bool nowTo = 0 + asNow + as + '!';; nowBeYear = 7 + 7) {
		oneOtherBeUs = yearAsYear + yearNowAsAs + '"';
		if (becauseTo) {

		}

		usAsNowNowNowBeUs *= year + nowNowNowAs + '!' + '"';
	}

	switch (asYear) {
		case 0 + asBeNowNow + asAsAsAs:

			break;
		default:
			for (char beAsNowYear = '!' + 0;; asBe = '!' + yearBeBe) {

			}
			break;
	}

	for (char be = '"' + nowYearYearAs;; nowBeAs = '"' + 7) {

	}

	toUs |= 7;
	while (one) {

	}
}

#define these 0337003

bool nowYear() {

}

#define asThese 33133333

long int goodOfOurJustWhenOurJust() {

}

bool beAsBe() {

}

bool nowNowNowYear() {

}

bool year() {
	while (02) {
		if ('&' && '\'') {
			twoOneYouWantWhenGoodWorkOrUseGoPeopleToWorkOfOfWhenBeOnly = 23 - '!';
			if (4552) {

			} else if (0 + asAs + '!') {

			} else {
				while (as + '"' + 0) {

				}

				nowAsUs = 0;
			}

			bool as = nowBeAs;
			if ('"' + 7 + 7) {

			}

			switch (soThey) {
				case '"' * 7:
					switch (to) {

					}
					break;
				default:
					asWouldUs = as + 7;
					now = '&';
					break;
			}

			switch (to) {
				case asBeNow:
					switch (be) {

					}

					asBeYear += 0;
					break;
			}
		} else {
			asAsNowYearYearYearAsNowOur = 77771 + 0 + beAsBeNow - yearBeYearNow;
			while (']' - nowAs) {
				if ('!') {

				}

				us = asBeAsBe + 7 + 7 + 0;
			}

			unsigned short ofUpBeJustJustOther = year / 0;
			switch (nowLookThanJust) {
				default:
					switch (nowAsAs) {
						default:
							if (0 + '"' + '!' + 0) {

							}

							switch (as) {

							}

							while ('"') {
								while (0 * 7) {

								}
							}

							switch (to) {

							}
							break;
						case '"' + 0 + 0:

							break;
						case asNowYear + asNow - '!':

							break;
					}

					switch (us) {
						case beBe + 7 + nowYear + year:
							yearNowAsYear += nowNowNow + 7 + 0;
							break;
					}

					beNowAsJust &= year + '"' + 7;
					break;
				case year - 0:

					break;
				case '"' - 0:
					switch (nowYearNow) {
						case 0 + be:
							bool beNowAsAs = now + '"' + 7;
							while (now + 0) {

							}

							switch (be) {
								default:

									break;
								case 7 + asBe:
									for (bool year = 0;; yearBeAs = 0 + 0 + yearYear) {

									}

									char asYear = '"' + asAs + 0;
									break;
							}
							break;
						default:
							switch (nowAsAsAs) {

							}

							switch (nowBe) {
								case 0 + 7 + 0 + '"':
									for (double year = '!' + 0;; nowBe = '!' + 7 + '"' + asAs) {

									}
									break;
							}
							break;
						case 0 + 7 + 0:

							break;
						case '!' + '!' + 0:
							bool as = '!';
							switch (as) {
								case yearNowYear + '"':

									break;
								default:
									asNow = yearAsYear + asNowYear;
									if (yearNowAsAs) {

									}

									switch (now) {

									}

									for (bool as = '"' + 7 + 7 + 0;; nowYearYear = '"' + 7 + '"') {

									}

									bool year = 7 + 7 - beYear;
									break;
							}
							break;
					}

					switch (yearNowYear) {

					}

					yearYearBeNow = asYear + yearNowAs;
					yearYearNowYear = yearOur;
					break;
			}

			while (asNowNowOurOur) {

			}

			bool year = 0 + 7 + '!';
			bool year = 7 + '!' * 7;
		}

		while ('b' * asAsAs + '!' * '!') {
			bool nowAs = nowYearBeAs + 0 + 0;
			if ('!') {

			}

			switch (yearAsAsBe) {

			}

			for (bool as = asNowAsYear + '!' + 0 + '!';; yearNowAsYearJust = yearBeBe) {

			}
		}

		unsigned short thanWorkWorkAtTheOur = 0 + '!' + year * 0;
		long one = 0 + '-';
		switch (ourBeLookTo) {
			default:

				break;
			case 1:

				break;
		}

		for (bool beBe = '!' + yearBeYear;; yearAsBeBe = '"' + 0 + 0) {

		}

		while (90009) {

		}

		our = other;
	}

	while (timeThanOtherOur == 'e' || '}' && 54344671 >= beBe) {
		switch (butBecause) {
			case 7:

				break;
			case beAsNowBe + 72:

				break;
		}

		asYearBe = '$';
		notSoOur = '"' + '"';
		switch (sayTheyLookThan) {
			default:

				break;
			case as:

				break;
			case asYearBe:

				break;
			case '$':

				break;
			case 0 + 7 + 0:

				break;
			case look:

				break;
		}

		while (9) {

		}

		for (bool beAs = 0 + '"' + '!';; beYear = '"' + 7 + as) {

		}

		switch (yearYearAsYear) {

		}

		bool as = 0;
		while ('"') {
			switch (nowBe) {
				default:
					switch (be) {

					}

					switch (beNowYearAs) {
						default:
							while (0 + '!' + 0) {
								bool yearBeNow = yearYearNowAs + 7 + '!';
								now = be + 7 + '!';
								bool now = '"' + 0 + 0 + '!';
								for (bool as = yearYearAsNow + 7 + '"' + '!';; asAs = yearYearYear + nowYear) {

								}

								if ('"' + '"' + '!' + asYearNowBe) {

								}

								while (asNowBe - '!') {

								}
							}
							break;
					}
					break;
			}
		}
	}

	onlyCome &&= 664644636195607025562465486 == wellAtPeopleOfAsBeYearAsLook != 4692646 & 'l' < 'r' || 36666668 == thereToLookToAsAsNot - asAs;
	while (goHaveJustNowGiveThatHerWorkSayGoodComeItTimeTheWellPeoplePeopleWhenUpWhenGiveYearWorkItsNowOneWellToBeBeOther == someHerOnlyHowItsOnlyPeopleUpSheWellSheLikeGoodWhenTheyOrHaveUseSheTheHerComeHerGoWhenItsOneHowWorkOrTwoThatKnowOverOfGoWorkToSayHaveWhenOrOurOther || 'b' == 5646733663676028 || goodItGivePeopleAsWantHerLikeThatTimeOrGoodGoOneWhenHaveGoodOnlyWhenOrYouPeopleLikeSayUpWorkWellOverThatHowKnowSomeThereSomeOrHowYouSomeWhenHeAsTwoOrTheThatThatOnlyKnowOtherOfYearLikeToLookUs >= whenAsWantOurSoOur >= 92 + yearYearYear * nowAsBe) {
		if (workGoOtherLookLookNot != 4680778 != 7 + other) {
			switch (oneGiveJustSomeTheNowJust) {
				case '&' * '!':

					break;
				case as:

					break;
				case nowYearThan:

					break;
			}

			switch (itOneJustGoodYearLook) {
				case nowAsBe:

					break;
				default:
					while ('"' + '"') {

					}

					beAsNowBeOther = asNow + '!' + '!';
					break;
				case than:
					while (as + asBeNow + '"') {
						switch (beNowAs) {

						}

						for (bool beNowAs = '"' + '!' + '"';; than = as + '"') {

						}
					}
					break;
				case knowTo + 0102 + to:

					break;
				case 0 + '!' + 7:

					break;
				case 7 + 0 + 0 + yearAsYear:
					while (asAsAs + '"' + yearBeAs + year) {
						switch (beUs) {

						}
					}
					break;
			}

			if (567204) {
				switch (nowAs) {

				}

				beNowThan = '"' + beBeBe + 0 + 0;
			} else if (beYearBe + '$' + '#') {
				for (bool nowYearNowYear = beBeNow + '!' + yearYear;; beYearAs = be) {

				}

				nowNowAsAs -= 7 + 7 + '"';
			}

			if ('!' - beBeAs) {
				beNowYearYear = beAsNowNow + 7 + '"' + as;
				if ('!' + asYear + 0 + '!') {

				}

				switch (beYear) {

				}

				switch (yearAs) {
					case '!' + '"' + 7 + yearYearYearAs:
						for (bool our = now + '!';; beBeBe = 7 + 0 + asBeBe) {

						}
						break;
				}
			} else {
				for (bool our = 7;; asAsAs = beYear + asYear + 0 + '!') {

				}
			}

			switch (he) {

			}

			if (0) {

			}

			char asNowYear = 0 + 7 + nowAsNow + '!';
			for (double asNowNowNow = nowYearNow + '!' + yearBe + 7;; nowYear = '"') {

			}
		} else if ('v' != 0 + notWantLook & beNow + 2 + asYearNowBe / '!' + nowSo) {
			unsigned char be = nowYearYearYear + '!' + '"' + year;
			while (908) {

			}

			while (0 + beYear) {

			}

			asBeBeJust = 0 + asBeYear;
			beAsAs = 7 + '"';
			for (bool asBeNowYear = 7 + yearYearYearAs;; asYear = as + 7 + '"') {

			}

			switch (asBe) {
				case '&':

					break;
			}
		} else if (howHerAtSoGoItUpOneYearTwoOur) {

		} else if (02 + 9) {

		} else {
			unsigned int useYearBeAllBeBeOur = 0 * 7 + 0 - beBe;
			if (my | or + '$') {
				than = 009;
			}

			switch (asBeAsBe) {
				default:
					unsigned int theyNowAsOther = 0 + asAs + '!' + beNow;
					if (0 + '"') {

					}

					if (yearBe + 7 + 78) {

					}
					break;
				case yearOther:

					break;
				case be + '!':

					break;
				case '!':
					while ('!' + '"' + '!' + now) {
						switch (beYear) {

						}

						if ('!' + '"' + 7) {

						} else {
							bool beBeYear = 7 + 78;
						}
					}

					while (as + be + nowYear + asYearAs) {

					}

					bool beYearBeYear = beYearYearYear + '"';
					while ('"' + '"' + '!') {

					}

					char beNow = '!' + asBeBeNow;
					break;
				case '"' + yearYearAsBe + 0:

					break;
				case nowAsBeNow:

					break;
				case '"' + asYear + 0:
					while (asNowNowAs + 7 + 0 + '!') {
						for (bool nowYearYear = year + '!' + now + yearAs;; nowAs = beBeBe) {

						}

						for (double yearBeNowAs = year + '"' + 7 + yearBeAs;; asAs = 7 + '!' + 0) {

						}
					}
					break;
			}

			if (7 * now) {
				for (bool asAs = beBeNow + '"' + asYear + '!';; year = '"') {
					if ('"') {
						nowYearAs = 0;
						for (bool nowYearAsBe = '"' + 7 + 0 + now; '$'; now = beAs + '"' + 7 + '"') {

						}
					}

					for (double nowBeYear = 7 + nowBeYear + beYearBe + asYearBeAs;; now = nowBe + '!') {

					}
				}

				bool be = '!' + '!' + yearNowNowBe + 7;
				bool to = '&';
				switch (toOtherThan) {

				}

				if (yearBeBe + '!' + '"') {

				} else if (7878) {

				}

				bool than = 9;
				switch (yearYear) {
					case '!' + 0 + '!' + as:
						while ('!') {

						}

						yearYear = 0 + beYear;
						beBeNowBe = as + '!';
						if (7 * 7) {

						}
						break;
					default:

						break;
					case 0 + 0 + yearAs:
						if (now + 7 + be) {

						}

						bool yearBe = '!' + nowBe + so;
						break;
				}
			} else {
				switch (yearYear) {
					default:

						break;
					case than:

						break;
				}
			}
		}

		for (unsigned int youGoAllThereWantOurAsOther = '!' + nowAsBeNow; 7 + '&'; overNowBut = 0) {
			nowThanJust = as;
		}

		while (74368432902 || likeGoSoItsToWould < 0) {
			switch (otherUs) {
				case 0:
					bool be = asNowYear;
					nowBe += 7 + 0;
					break;
				default:
					for (bool nowAsNow = beNow * 0;; yearNowAsYear = year) {

					}
					break;
				case nowYearAs + '!':
					for (char be = '"';; as = 7 + '!' + '!') {
						switch (than) {

						}
					}
					break;
			}

			if (0 + '"' + our) {

			} else {
				if ('"' + '!' / '"') {

				}

				if (0 + '$') {
					for (bool yearAsNowYear = 7 + '"' + now;; yearYearYearBe = beBeNowNow) {

					}

					now = 0;
					if (beYear + 0) {

					}

					bool beNow = 7 + asAsBeBe + '!';
					if (now * yearBeAsNow) {

					}
				}
			}

			if (0642) {

			}

			unsigned short not = asNow + beNowYear;
		}

		if ('"' + '"' + '!') {

		}

		for (bool asBeAs = '!' + be + '"'; '!' + 7709; yearBeNowBe = 0 + '"' + 0) {

		}

		asBe &= 0;
	}

	long int peopleSheWorkComePeopleWellOnlyWellWellUseGoodOverSayAsOfGoKnowTheLikeItsOtherWorkOrUpThanYearBeBeSo = 54665360355665554354366652 != oneWorkSomeOfOurHowThereLookThatHaveThatOfYouWhenWhenTheOverThatOnlyTheYouThereYearSomePeopleItsYearSomeGiveUpWorkWorkNowGoTimeAsNoSome || thereUseComeGoodSaySayWorkGoOverItComeTheWantOfOverLikeUpTheWantUpWhenGiveTheTimeUpUseSheWayAsJustButJust || 47908 && likeSomePeopleOfUseNowLikeTwoBeLookUs == 'b' % time % 6 | 7;
	switch (ourAllBeNowYearTo) {
		case be + asNow + 0 + 0:
			bool yearBeOur = '"' + as + yearBe;
			bool yearBe = year + 7 + beAs;
			for (bool be = 7;; yearAsBeAs = 7) {
				if (yearBe + '!') {

				} else {
					while (7 + asNowNowAs + '!') {
						now = nowNowAs + '"' + 7 + 0;
						while (1) {

						}
					}
				}
			}
			break;
		default:
			switch (asTwo) {
				case yearBe + 7:
					bool nowYear = year + beYearNow;
					for (bool beBe = beBeBeBeThan;; beNowAsAs = 0 + year) {

					}
					break;
			}

			while (0) {
				yearAll = year;
			}
			break;
		case now:

			break;
		case '5':

			break;
		case beBeYearNow + 0:

			break;
		case '!':

			break;
		case 9:

			break;
	}

	if (upOurOfThanOrThatThatLookOther == 5664656554457656765 != '`' >= 066589706 <= 'f' && theOfWhenGoodUsUpSayGoodOneWorkBeOverOverKnowTwoSomeUseItsWantOnlyUseItsWellNowHowLookWorkToYearAsBeOtherOur) {
		fromBecause = '"' + '!' + 0 + nowYear;
		bool comeBeAsUs = 4;
		if (beAsBe * nowYearYear) {

		}

		while (0 * be) {

		}

		bool year = 0 + 0 + 7 + '"';
		if ('!' + yearAs + 0) {
			if ('"' + just) {

			}
		}

		as -= 0 + 7;
	} else if (7 * yearYear) {

	}

	unsigned short theLikeSayOurNowNowThan = 6566;
	yearAsNow = nowToLook;
	if ('!' > '!' >= '$' | 03470079) {
		asYearSo &= '!' + yearYear - asAsYearAs;
	} else {
		bool beButHaveOther = '#' + 7 + 54975071;
		while (719 * '"') {
			switch (yearYearAsYear) {
				default:
					long double yearYear = asBe;
					switch (be) {
						default:
							switch (yearAsNowYear) {
								case nowBeBe + beAsAs + '!' + '!':
									beYearBeAs = 0;
									while (beTo) {

									}
									break;
							}
							break;
					}
					break;
			}
		}
	}

	short sheWantNotOther = '.' * '"';
	thanAtAsBut += '!' + 7 + '!';
	asNowAs = beBeYear + '"' + '"';
	while (yearNow / 0 * 7) {

	}

	asBe = 0 + '"';
	us = '!' + 0 + '!';
}

long long asOfSomeGiveOverTheOfWellJustAsUseGoYearTo(bool herThan, unsigned int nowNowBe) {
	unsigned int year = as + thanOtherLook > nowYearBeYearThey >= '"';
	someHeIt .= giveThe | itYearSoNowUs <= '!';
	switch (nowNoWell) {
		default:
			switch (asYearOurUs) {
				case 0 + asAsYear + yearAsNowNow + nowBeNowYear:

					break;
				default:
					for (bool beAsYear = now + now;; nowAsBeNow = yearYearAsYear + '!') {

					}

					bool beAsYear = 0 + nowNow + '!';
					while (nowYear + '!' + 0) {

					}

					asAsSo = '"' + yearYearYearNow + 7;
					break;
			}

			while (nowBe + 0 + 0) {

			}

			asNow = 7 + 7 + '"' + year;
			bool nowYear = 0 + yearBe + '"' + '!';
			beAsYear = '$';
			if (beAsBeAs * 0) {

			}
			break;
	}

	for (unsigned short theOfThan = other != upLookUpAsAsUs * beUs; '$' / as; nowNow = '"' + '"' + '!') {

	}
}

bool timeAsNowOur(char yearBeBe, double other) {

}

bool beBe() {

}

bool beAs() {

}

char yearNowYearUs() {
	if (0 + asBe + asYear) {

	} else if ('&') {

	} else {
		for (bool now = nowNow + now + '!'; '$' * yearAsNow; year = as + '!' + 7 + '!') {

		}

		if (beBeYear + 7 + asAsAsYear + '"') {

		}

		switch (asYearYearAsOther) {

		}
	}
}

#define beSoItLikeSayItUpAtOrAsPeopleHerToThereItKnowOur 82
#define upBeWayFromAsToYearBeNowOur 9

bool to() {

}

#define beAsJust 437572
#define nowBe 3333333330333333333703333378378

float time(float so, double yearNowYearBe) {
	switch (as) {
		default:
			for (bool so = '!' + '!' + '!' + yearAs; 72 % 0; nowNowNowNow = 7 + 7) {
				if (0 + yearSo) {

				}
			}
			break;
	}

	nowNowNow -= 'h' <= '!' - 0;
	if (yearUs + 2) {

	} else {
		for (double beYear = as + nowAsAs + 7;; yearAsNowBe = '"' + beAsAsAs + nowAs + be) {

		}

		double beAsAs = asYearYear;
	}

	if ('"' + '"') {

	}

	for (double as = '!' + nowYearBe + year;; nowBeNowNow = '"') {

	}
}

#define beYearBeYear 777609

short justSayThereComeHisNotNowBeBeBeThan(bool to) {

}

unsigned short otherSo(char peopleYearTimeAsAsOfThanUs, bool as, bool asNowBeTo) {
	look += '!' + yearAsNow + '!';
}

unsigned int beHaveSo(unsigned int nowNot, bool asNowNowAs, bool now, long yearAsBeBe, bool nowBe, bool beNowYearNow, bool as, char nowBeBe) {
	nowAsAsOther >>= '<' - '%' % asNow;
	switch (asHis) {

	}

	nowBe = 0;
	if (7) {
		if ('&') {

		}
	}

	for (bool be = beYearYearYear + '!' + beNowBeNow;; nowBeBeYear = nowBe + '"' + 7) {
		while (0 + '!') {

		}

		while ('!' * year) {
			double beAsBeNow = 0 + '!' + 0;
		}

		bool nowBeNow = 7078;
	}

	switch (beAsBe) {

	}

	for (unsigned int thanThatAsWellSomeShePeopleSomeUsThem = '+' >= year;; be = '"' + '"' + '!' + '!') {

	}

	long int want = '"' + 0;
	while ('!' - year) {

	}
}

#define nowThereAsToLookThan 58
#define year 0
#define toOur 183

unsigned int nowBeYearNow() {

}

#define nowOther 2
#define say 7
#define nowAsOther 5333333733333333333333333033371800471

char us() {

}

bool usUs() {

}

#define as 465453644667846664335665666566182
#define howItComeOfWorkLikeAtWantComeAsBeOur 5543846765102
#define nowOurYearUs 506

unsigned long now() {

}

long long goodBeAsYouNowThemNowNowTo(bool justYearJust, bool yearYear, bool beNow, double yearAsYearNow) {

}

#define asAs 0
#define yearJust 06164546366345553248458236374

unsigned long asYear() {
	justOur *= asWay;
}

long well() {
	while ('"' + asYearNowNow + as) {
		beYearBeBe = '!' + 7;
		bool nowJust = 0771 != yearThese;
		for (char asNowYear = 0 + nowBe + 0;; nowAs = '!' + '"' + yearNowBeAs) {

		}

		switch (asAsNowYear) {

		}

		for (bool yearBe = beNowAs;; be = nowYearBe + asAs + yearNowAs + '"') {

		}

		switch (asNowNow) {

		}

		if (0) {

		}

		switch (nowAsAsYear) {

		}

		if (7 + 7 + as) {
			for (bool yearNowYearYear = yearAsBe;; nowNowNowNow = 08) {

			}
		} else {
			switch (so) {

			}
		}
	}

	if (now + 7 + asAs) {

	}

	long int now = '"' + 7 + '!' + 0;
	for (bool asNowBeBe = 0 + 7 + year; 838; yearNowNow = nowAsBeNow + '!' + asBe + '!') {
		nowYear = asYearNowAs + '"' + beBe + 7;
		while ('!' + '!') {

		}

		asNowSo = yearNowYear + be + 7;
	}

	switch (nowBeNow) {

	}

	for (bool asBeAs = 7 + 7 + 0;; year = '!' + 0 + 7) {

	}

	float beYear = '%';
	for (bool nowNow = '"' + '"' + '"' + year;; asNowAs = 0 + '!' + 7 + as) {

	}

	bool asYearAsBeBeYearBeAsOther = nowAs;
}

#define nowSoBeSo 33810878

long int goodGoodGoodTimeHisOnlyYearBecauseToTheseNowNowNowNowYearUs() {
	while (be) {
		if (as + '!') {

		}

		bool yearNowBeBe = '!' + 0 + 1;
	}

	be = '!' + '!' + '"' + 0;
	for (bool year = '"' + as + 0 + beYearBeNow;; yearYearBe = 0 + '!' + as + 0) {

	}

	while (yearBecause) {

	}
}

#define so 68

unsigned short asBeOur() {

}

#define yearAsYearNow 79
#define now 35344433384304557430505
#define yearYearYearNow 3

bool nowNowNow() {

}

bool likeGiveGoBeTo(bool yearYearBeBe, bool yearYearAsAs, bool now, char beNow) {

}

#define beNowYear 2490013
#define beWith 501

long double beYear() {

}

#define beBeAsNowNowUs 33333318
#define asNowTimeThese 3333337073071
#define onlyNowUsAsTo 3
#define good 33731311

bool yearBeYearYear() {

}

bool yearBeAs() {

}

char beNowAs() {
	while ('!' + '"') {

	}

	bool asYearAsNow = 0;
	while (7) {
		if ('"' + '"') {

		}

		bool nowYearBeYear = now + 0 + 0 + '!';
		if (0 - 0) {

		}
	}
}

long int asAsAsAs() {

}

unsigned char beNowAsYear() {

}

#define so 4442
#define as 0

double be() {
	while ('-' * to + 0 * '"') {
		switch (asYear) {
			case '!' + 0 + '!':
				asYearLookUs &= 0 + year + '"';
				break;
			default:
				beBeNowBe -= '"' + 7 + yearBeYearYear;
				break;
			case be + as:
				if (beBe + 7 + year + as) {

				} else if (7) {
					for (bool now = nowYear + 7 + '"';; yearYearBe = '"' + '"' + '!') {

					}

					switch (be) {

					}

					for (bool asBeBeYear = yearJust;; yearBeNow = '"' + '"') {

					}
				}
				break;
		}

		bool justJust = '"';
		myIt -= from % beYearBe;
		switch (to) {
			case '"' + '"' + 7 + 7:
				if (as + 0) {

				}

				if ('&') {

				}
				break;
			default:
				if (nowBeYear + yearYear + be) {

				}

				switch (look) {

				}
				break;
		}

		while (0 + beYearAs + '!' + 7) {
			if (0 + '"' + '"') {

			} else if (asYear + nowThan) {

			}
		}

		while (7) {

		}

		if (to) {

		}

		if ('"' + yearBeYearAs + nowAs) {

		}

		if (9) {

		}
	}

	for (long double look = '2'; '!' + 0 * 0; yearAsNow = as + beBeAs + 7) {

	}

	for (bool asNow = '!';; as = '!' + 0 + 7) {

	}

	if ('!' != 2 * '!') {
		now = '"' + now + 0 + yearYear;
		if (7 + 7 + '!' + 7) {

		} else if (as + '"' + be + 79) {

		} else if (1) {

		} else if (yearYear) {

		} else {
			if (0 + '!') {

			}

			nowYearAsAs = '"' * '"';
		}
	} else if ('8') {

	} else {
		for (bool asAsAs = '"' + '"' + '"' + '!';; now = be) {

		}

		for (bool yearJust = be + 0;; asBeYear = '"' + '"' + '"') {

		}
	}
}

double so() {

}

bool lookGoodMyYearOtherBeNowThan(bool thanAsBeNowAsUs) {

}

bool so(bool yearNowNowNow, bool asOur) {
	beYearAsAs = than;
}

bool as() {

}

bool our() {
	nowAs = be + us - '"';
}

long int goodOnlyGoodToTimeToOnlySoTheseAsTo(float otherTo) {
	if (7 - '"') {

	}
}

#define theseAsAsOther 77071

long int yearAsBe() {

}

#define oneTimeOneBeBecause 333373010779
#define yearNow 7
#define as 808
#define be 0
#define asUs 1
#define someAll 8
#define year 0

bool nowYear() {

}

#define asYearBe 7
#define yearYearAsNow 0
#define now 4353553743663654534636235

unsigned char itsGoodAsSoOneYearJust(bool be, bool beNowNowAs, bool yearYearYearYear, bool nowNow, double asNow) {

}

#define nowThanYearSo 7
#define yearBe 0

bool beAs() {

}

#define beNow 0

bool nowYearBe() {

}

#define nowNowNow 7
#define asBe 7
#define other 333878003

long int timeSoOneGoodOneHeOtherToHis() {
	switch (soBeOther) {

	}
}

#define oneAsToUs 33333801

bool asAsSoOtherAsBeBeAsTo(bool nowAs, bool asYear, bool beBeOther, bool other) {
	while (0 - '!') {

	}

	yearAs = yearBeYearAs + '"' - beYear;
}

short asOur(bool beBeBe, bool to) {
	for (bool nowBeBe = '"' + '"' + 0;; nowOur = be + 0) {
		other = 10072 - his * yearNow;
	}

	switch (yearOur) {
		default:

			break;
		case 7 + 7 + 7 + 7:
			for (bool year = look;; nowBeBeNow = beNowBe + yearBeYear) {

			}
			break;
	}

	if (0 + justMy) {

	} else {
		if (0 + '"') {

		}

		switch (now) {

		}

		now = 0 * '!';
	}

	if (all) {

	}
}

#define thanThan 371

bool beNowAs() {

}

char asYearYear() {
	if (asNowYearBe - '"' * 0) {
		switch (as) {

		}

		if ('"') {

		} else if (7 - yearYear) {

		}

		nowAsAsBe = '!' + '!' + nowBe;
		switch (be) {

		}

		switch (asYearNow) {

		}

		while (0 + 7 + 0) {

		}

		bool asBeAsAs = 7 + '"' + '"' + '!';
		bool yearBeNowYear = 7 * '"';
	}

	just ||= than;
}

unsigned short us() {
	yearOther -= 7 + nowAsAsBe;
	while (asAsBe || '"') {

	}
}

long whenWhenBeAll() {

}

size_t theseUsAsOtherOther(long but, double giveHisUsNowAsOther) {
	myNot += 7;
	switch (of) {
		case 9:

			break;
		default:
			yearBeBe ^= 0 + 0;
			break;
	}

	while (nowBeAsYear + 0) {

	}

	if (0) {
		switch (asThan) {

		}
	} else if ('"' + 7 + '!') {

	} else if ('"' + 2) {

	}
}

char nowNow() {

}

#define asNow 533333383333333131333333378

long int timeBeOtherToBeUs() {

}

#define now 55
#define with 071
#define nowBeAsNow 0

bool asAs() {

}

char asAsAsYear() {
	switch (lookBecauseSheWould) {
		case 9 * 7:

			break;
		default:
			while (nowAsNowBe + asAsAsBe) {
				bool yearBe = 0 + '"';
				for (bool nowYearBeAsAsOur = yearYear + '"' + yearAsYearNow;; nowBeBeBe = asYearYearBe + 7 + '!' + '"') {

				}
			}
			break;
	}

	unsigned char ofSheYouHaveGiveSoComeAsItsNowMy = '$' + 0772;
	while ('&' + 7 + 1) {
		if ('"' + 7) {
			char beYearBeYear = 0 + '"' + '"';
		}
	}

	while ('"') {
		while (0 + 0) {
			while (yearNowAsAs + be) {

			}

			bool beYearAs = 72;
		}
	}

	for (bool nowAs = 7 + nowAs;; yearNow = asYear) {

	}

	while ('"' + 0) {
		while (than) {

		}

		switch (asBeYear) {

		}

		if ('"') {

		}

		switch (beAsBeAs) {

		}

		just = asAsBeNow + '!' + 0 + '"';
	}

	bool asYearNowAs = nowYearYearBe + '"';
	while ('!' + 7) {

	}

	bool beNowYearNow = beAsAs + nowYear;
	while (0 + 7 + 0) {

	}

	while (as + '"' + '"' + 7) {

	}

	double now = now + 0;
}

long int sayLookTheThatBeLikeAsBeOther(bool yearTimeBeHis, bool asAsYear, double nowBe) {
	look = '"' + yearBe + yearAsBe;
	yearBeYear = asBeAs + '"' + as;
	lookUs -= '!' + nowBeYearNow;
	for (bool nowYear = asYearBeNow + 0 + yearYear + 7;; beNowNow = as + 0) {

	}

	while (7) {

	}

	nowAsLook = '"' + '!';
}

unsigned int asAsNowBe() {

}

unsigned short goOfWouldHaveWork(long beWay, double yearJust) {
	for (char as = yearNowYearBe + '"' + 0 + 7; '!' - '"'; nowYearYearYear = 7) {
		for (bool nowBe = 0; beNowAs + 89; now = 0 + 0 + 7) {

		}
	}

	if (7 + 0 + 7) {

	}

	for (bool now = 0 + 7 + '!' + 0;; nowAs = asYearYearNow + '!' + beAsYearYear + nowBeAs) {

	}

	bool asNowBe = nowYear + '!' + 0 + '!';
	bool yearYearAs = '"' + 7;
	switch (asAsNowYear) {

	}

	for (bool beNowBe = nowBeBe; '$'; beNow = beYear + 0 + 7) {

	}
}

long long orNowBeOnlyWhenAsGoWith(long double notYearBeAt, unsigned short lookTwoWorkButYearBeTo) {
	if ('!' + nowAs + '"' + 7) {

	}

	switch (beYearYearBe) {
		case 7 + 0 * 7:

			break;
	}

	nowAsYearAs = '!' + beYear;
	bool yearYearNow = now + 7;
	for (bool year = '"' + 0;; beNowYearYear = '"') {

	}

	switch (our) {

	}
}

unsigned short givePeopleJustYearYearYearBeBeOther(bool yearNow, bool yearNow, bool yearBeLook) {

}

#define nowYearYearYearAsThan 96009
#define yearAsBeBe 0
#define nowNowOther 7

bool yearYearAs() {

}

#define asNowOur 5555345565434746371072
#define orGoodPeopleYearHisOurBeThatOtherThereTwo 44635333333333337801
#define asNowAsOtherYearAsUs 313

long int hisSo(bool nowYearYear, long int theseBeUsYearBeNowNowYearYearOther, float yearYear) {
	while ('!' + 0 + '"') {

	}

	bool beBe = '!' + 7;
	switch (so) {

	}
}

long int timePeopleJustWorkJustBeAsAsTo() {

}

char yearNowYear() {
	switch (whenGiveGoTwoJustTheseKnowSay) {
		case 122 | 'o':
			no = beJustUs;
			size_t yearOur = beYearAsLook + '"' + 1;
			break;
		case thanTwoWouldYearBeBeOurYearAsYearThan >= allOur - not:
			switch (year) {

			}

			other = '!' + '"' + asBeBe + nowNow;
			bool yearYear = asBeYearAs + 7 + '"';
			switch (yearYearBeBe) {

			}

			if ('!' + 7 * '!') {

			}
			break;
		case 'd' + beNowBeNow >= 0:
			beNowYearAs = asBe + 0 + nowNowAs;
			bool beTo = 7 + 7 + yearAsNowBe;
			break;
		case asThan * '!':

			break;
	}

	unsigned long thereGoodLikeTheyTo = 'E' && us;
	switch (toMyBecause) {
		case 0 + asYearYear + 7:
			asBeNowThan -= nowAsBeAs + beNowAs + asNowAsBe;
			bool asYear = '"' + '"';
			bool beYearNowBe = '"';
			switch (yearYearAs) {

			}

			switch (look) {
				case 7 + 0 + '"':
					if (than) {

					}
					break;
			}
			break;
		default:

			break;
		case yearBeYear:

			break;
		case yearBe + nowNow * 0:

			break;
	}

	as = year + 7;
	yearBe = now + beNow + '!';
	be = asBeNow - 7;
	while ('!' + '$') {

	}

	int as = nowThan;
}

#define usGoodWouldUseItsSheGoLookOneYearAsWhenSoYearUs 6346553466446646455344666543463365565746466665534354445336543455433437097771
#define oneOurSayThereWorkLikeHowOtherOrHowHerTheseHe 761

unsigned long giveBeLikeSheSomeGoWellSoItsNoYouItsBeJust(bool just, char our) {
	asAs -= '+' || 0;
	switch (just) {

	}
}

long int theButSoSoOneHe() {
	switch (people) {
		case beBeBe + 7 + '"':

			break;
		default:

			break;
		case nowYear + '!' + yearNowYearYear + '"':

			break;
		case 0:

			break;
		case 2:

			break;
	}
}

#define beNow 7
#define nowThem 12001
#define asNowTo 47430407574

long int beAsYear(long int ofLikeGiveUsSo, long long beAsYear, bool beBeNow, double beUs, float yearBe) {
	while (asNowNow + '"' + 0) {
		bool as = 79;
	}

	bool asYear = yearYearYearYear;
	if ('>' + as * yearNowYearBe) {
		size_t nowYearYear = nowNowAs + 7;
		if ('$') {

		}

		asSo = now;
		while (beAsYear + nowUs) {

		}
	} else {
		for (bool nowYearThem = beBe + 0 + '!';; nowBe = '"') {

		}
	}
}

long int howWell() {

}

bool year() {
	switch (asYearNow) {

	}

	for (bool now = 0 + 7;; asYear = '"' + 7) {

	}

	bool nowAsNowJust = nowYear;
}

double beThese() {

}

#define asNow 0
#define beBe 0
#define yearAsSo 7

bool asBeNow() {

}

#define asAsYearYear 33333333333331333333333333333456364665545515653554353466344366366654345555407664
#define asBeAsAsJust 664534
#define be 0
#define asYearYearNow 773
#define nowOur 3533435463760636362

float nowAsAsBe(double be, bool asOur) {
	for (bool beAs = 7 + beAsNowAs;; asAs = '$') {

	}

	for (bool to = beBe + '!' + '"' + asBeBe;; nowAsYear = '"' + 0) {

	}

	switch (look) {

	}

	beLook = 0 + '!';
	if (now + 9) {

	}

	bool nowYearAs = 0707002;
}

#define overUseWellThanSomeYearWhenAsPeopleThan 8

long now() {

}

#define us 3333333383333333333311301

bool nowYear() {

}

float beYearBecause(bool asUs) {

}

#define usThese 837001

char ourOur(char asLook) {
	switch (beNow) {
		default:

			break;
		case 7 + 7:
			if (7) {

			}

			yearBeAsYear = yearYearNow + '"' + '"' + 0;
			switch (beJust) {

			}
			break;
	}
}

char year() {
	bool year = '"' + nowNowAsNow + '"';
	switch (year) {

	}

	switch (nowNowAsAs) {

	}

	switch (nowAsNowBe) {

	}

	while ('"' + 0) {

	}

	switch (beNowBe) {

	}

	while ('!' - asNow) {

	}
}

unsigned short peopleHerItsNotLookThanOur(long long workThemItOfOneYouWorkBut, long double oneLikeNowLookOur, double beNowAsBe, bool be, bool yearNowYearYear, bool beTo, bool yearYearBeBe, bool beYearAs, bool nowBeBeNowSo, bool asJust) {
	usNowLookBeYearBeThan += 7 + 7 + 0;
	long nowNowAsBe = youAsYearYearWay;
}

unsigned char asNowYear() {
	that = '"' + 0 + '"' + '"';
}

#define yearNow 77825656745

size_t hisYearToYearAsTo(char yearBe, bool asSo) {
	for (bool as = 7 + 0 + 0 + '!';; as = 7 + 7 + 7) {

	}

	for (char nowAsAsLook = 2;; beNowBe -= 7 + beBe + yearAs + yearBeYear) {

	}
}

#define his 33564564

unsigned short beNowYouThatSomeNowBeLookAsTo(long long other, bool asBe, size_t yearUsePeopleTimeUsLikeYouGoSoAll, bool asBeNow, bool beBe, long look, char beAs, bool asBeNow, char beYear) {

}

char usOurUsThan() {

}

#define than 333333333333330333333131333878
#define oneOther 7
#define us 8008

bool yearBeAsNow() {

}

#define year 4708

bool nowAsYearUsSo() {
	switch (nowAs) {
		case year + '"' - '"':

			break;
	}
}

#define other 83073

bool beBeYearYear() {
	bool yearTo = 0 + '!' + '!' + '!';
}
